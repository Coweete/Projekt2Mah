
TwiProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000091c8  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000891c8  000891c8  000111c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a2c  20070000  000891d0  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00008364  20070a30  00089c00  00018a2c  2**3
                  ALLOC
  4 .stack        00002004  20078d94  00091f64  00018a2c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00018a2c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00018a55  2**0
                  CONTENTS, READONLY
  7 .debug_info   00012385  00000000  00000000  00018ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000369b  00000000  00000000  0002ae35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000816b  00000000  00000000  0002e4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000e18  00000000  00000000  0003663b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d20  00000000  00000000  00037453  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000084f8  00000000  00000000  00038173  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000145dd  00000000  00000000  0004066b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00067c6d  00000000  00000000  00054c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002e3c  00000000  00000000  000bc8b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007ad98 	.word	0x2007ad98
   80004:	00082689 	.word	0x00082689
   80008:	00082685 	.word	0x00082685
   8000c:	00082685 	.word	0x00082685
   80010:	00082685 	.word	0x00082685
   80014:	00082685 	.word	0x00082685
   80018:	00082685 	.word	0x00082685
	...
   8002c:	00080585 	.word	0x00080585
   80030:	00082685 	.word	0x00082685
   80034:	00000000 	.word	0x00000000
   80038:	00080601 	.word	0x00080601
   8003c:	0008063d 	.word	0x0008063d
   80040:	00082685 	.word	0x00082685
   80044:	00082685 	.word	0x00082685
   80048:	00082685 	.word	0x00082685
   8004c:	00082685 	.word	0x00082685
   80050:	00082685 	.word	0x00082685
   80054:	00082685 	.word	0x00082685
   80058:	00082685 	.word	0x00082685
   8005c:	00082685 	.word	0x00082685
   80060:	00082685 	.word	0x00082685
   80064:	00082685 	.word	0x00082685
   80068:	00000000 	.word	0x00000000
   8006c:	000824f5 	.word	0x000824f5
   80070:	00082509 	.word	0x00082509
   80074:	0008251d 	.word	0x0008251d
   80078:	00082531 	.word	0x00082531
	...
   80084:	00081aad 	.word	0x00081aad
   80088:	00082685 	.word	0x00082685
   8008c:	00082685 	.word	0x00082685
   80090:	00082685 	.word	0x00082685
   80094:	00082685 	.word	0x00082685
   80098:	00082685 	.word	0x00082685
   8009c:	00082685 	.word	0x00082685
   800a0:	00082685 	.word	0x00082685
   800a4:	00000000 	.word	0x00000000
   800a8:	00082685 	.word	0x00082685
   800ac:	00082685 	.word	0x00082685
   800b0:	00082685 	.word	0x00082685
   800b4:	00082685 	.word	0x00082685
   800b8:	00082685 	.word	0x00082685
   800bc:	00082685 	.word	0x00082685
   800c0:	00082685 	.word	0x00082685
   800c4:	00082685 	.word	0x00082685
   800c8:	00082685 	.word	0x00082685
   800cc:	00082685 	.word	0x00082685
   800d0:	00082685 	.word	0x00082685
   800d4:	00082685 	.word	0x00082685
   800d8:	00082685 	.word	0x00082685
   800dc:	00082685 	.word	0x00082685
   800e0:	00082685 	.word	0x00082685
   800e4:	00082685 	.word	0x00082685
   800e8:	00082685 	.word	0x00082685
   800ec:	00082685 	.word	0x00082685
   800f0:	00082685 	.word	0x00082685

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070a30 	.word	0x20070a30
   80110:	00000000 	.word	0x00000000
   80114:	000891d0 	.word	0x000891d0

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	000891d0 	.word	0x000891d0
   8013c:	20070a34 	.word	0x20070a34
   80140:	000891d0 	.word	0x000891d0
   80144:	00000000 	.word	0x00000000

00080148 <task_nav_com>:

extern uint8_t data_received_nav[];
//xSemaphoreHandle signal_semafors = 0;
uint8_t navigation_break = 0;
int16_t x1,y1,x2,y2;
void task_nav_com(void *pvParameters){
   80148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8014c:	b087      	sub	sp, #28
	char ar[20];
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 1000;
	xLastWakeTime = xTaskGetTickCount();
   8014e:	4b2e      	ldr	r3, [pc, #184]	; (80208 <task_nav_com+0xc0>)
   80150:	4798      	blx	r3
   80152:	f8ad 0002 	strh.w	r0, [sp, #2]
	uint8_t arr[3];
	

	
	while(1){
		if(LOW == navigation_break){
   80156:	4e2d      	ldr	r6, [pc, #180]	; (8020c <task_nav_com+0xc4>)
			na_sendstatus(SOCKETXY);
   80158:	4d2d      	ldr	r5, [pc, #180]	; (80210 <task_nav_com+0xc8>)
			na_sendstatus(SQUAREXY);
			na_sendstatus(GLASSXY);
			na_sendstatus(BOXGOALXY);
			na_sendstatus(XY1);
			x1 = ((data_received_nav[1] << 8) | (data_received_nav[2] << 0));
   8015a:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80238 <task_nav_com+0xf0>
	uint8_t arr[3];
	

	
	while(1){
		if(LOW == navigation_break){
   8015e:	7833      	ldrb	r3, [r6, #0]
   80160:	2b00      	cmp	r3, #0
   80162:	d149      	bne.n	801f8 <task_nav_com+0xb0>
			na_sendstatus(SOCKETXY);
   80164:	2052      	movs	r0, #82	; 0x52
   80166:	47a8      	blx	r5
			na_sendstatus(SQUAREXY);
   80168:	2053      	movs	r0, #83	; 0x53
   8016a:	47a8      	blx	r5
			na_sendstatus(GLASSXY);
   8016c:	2054      	movs	r0, #84	; 0x54
   8016e:	47a8      	blx	r5
			na_sendstatus(BOXGOALXY);
   80170:	2055      	movs	r0, #85	; 0x55
   80172:	47a8      	blx	r5
			na_sendstatus(XY1);
   80174:	2050      	movs	r0, #80	; 0x50
   80176:	47a8      	blx	r5
			x1 = ((data_received_nav[1] << 8) | (data_received_nav[2] << 0));
   80178:	4c26      	ldr	r4, [pc, #152]	; (80214 <task_nav_com+0xcc>)
   8017a:	7862      	ldrb	r2, [r4, #1]
   8017c:	78a3      	ldrb	r3, [r4, #2]
   8017e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   80182:	f8a8 3000 	strh.w	r3, [r8]
			y1 = ((data_received_nav[3] << 8) | (data_received_nav[4] << 0));
   80186:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8023c <task_nav_com+0xf4>
   8018a:	78e2      	ldrb	r2, [r4, #3]
   8018c:	7923      	ldrb	r3, [r4, #4]
   8018e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   80192:	f8aa 3000 	strh.w	r3, [sl]
			na_sendstatus(XY2);
   80196:	2051      	movs	r0, #81	; 0x51
   80198:	47a8      	blx	r5
			x2 = ((data_received_nav[1] << 8) | (data_received_nav[2] << 0));
   8019a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80240 <task_nav_com+0xf8>
   8019e:	7862      	ldrb	r2, [r4, #1]
   801a0:	78a3      	ldrb	r3, [r4, #2]
   801a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   801a6:	f8a9 3000 	strh.w	r3, [r9]
			y2 = ((data_received_nav[3] << 8) | (data_received_nav[4] << 0));
   801aa:	4f1b      	ldr	r7, [pc, #108]	; (80218 <task_nav_com+0xd0>)
   801ac:	78e2      	ldrb	r2, [r4, #3]
   801ae:	7923      	ldrb	r3, [r4, #4]
   801b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   801b4:	803b      	strh	r3, [r7, #0]
			printf("recieved\n");
   801b6:	4819      	ldr	r0, [pc, #100]	; (8021c <task_nav_com+0xd4>)
   801b8:	4c19      	ldr	r4, [pc, #100]	; (80220 <task_nav_com+0xd8>)
   801ba:	47a0      	blx	r4
			sprintf(ar,"16 bitar x1 :%d \n",x1);
   801bc:	a801      	add	r0, sp, #4
   801be:	4919      	ldr	r1, [pc, #100]	; (80224 <task_nav_com+0xdc>)
   801c0:	f9b8 2000 	ldrsh.w	r2, [r8]
   801c4:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80244 <task_nav_com+0xfc>
   801c8:	47d8      	blx	fp
			printf(ar);
   801ca:	a801      	add	r0, sp, #4
   801cc:	47a0      	blx	r4
			sprintf(ar,"16 bitar y1 :%d \n",y1);
   801ce:	a801      	add	r0, sp, #4
   801d0:	4915      	ldr	r1, [pc, #84]	; (80228 <task_nav_com+0xe0>)
   801d2:	f9ba 2000 	ldrsh.w	r2, [sl]
   801d6:	47d8      	blx	fp
			printf(ar);
   801d8:	a801      	add	r0, sp, #4
   801da:	47a0      	blx	r4
			sprintf(ar,"16 bitar x2 :%d \n",x2);
   801dc:	a801      	add	r0, sp, #4
   801de:	4913      	ldr	r1, [pc, #76]	; (8022c <task_nav_com+0xe4>)
   801e0:	f9b9 2000 	ldrsh.w	r2, [r9]
   801e4:	47d8      	blx	fp
			printf(ar);
   801e6:	a801      	add	r0, sp, #4
   801e8:	47a0      	blx	r4
			sprintf(ar,"16 bitar y2 :%d \n",y2);
   801ea:	a801      	add	r0, sp, #4
   801ec:	4910      	ldr	r1, [pc, #64]	; (80230 <task_nav_com+0xe8>)
   801ee:	f9b7 2000 	ldrsh.w	r2, [r7]
   801f2:	47d8      	blx	fp
			printf(ar);
   801f4:	a801      	add	r0, sp, #4
   801f6:	47a0      	blx	r4
		}
		vTaskDelayUntil(&xLastWakeTime,xTimeIncrement);
   801f8:	f10d 0002 	add.w	r0, sp, #2
   801fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   80200:	4b0c      	ldr	r3, [pc, #48]	; (80234 <task_nav_com+0xec>)
   80202:	4798      	blx	r3
	}
   80204:	e7ab      	b.n	8015e <task_nav_com+0x16>
   80206:	bf00      	nop
   80208:	00081039 	.word	0x00081039
   8020c:	20070a4c 	.word	0x20070a4c
   80210:	00081e39 	.word	0x00081e39
   80214:	20078ca4 	.word	0x20078ca4
   80218:	20078d54 	.word	0x20078d54
   8021c:	00088e70 	.word	0x00088e70
   80220:	0008296d 	.word	0x0008296d
   80224:	00088e7c 	.word	0x00088e7c
   80228:	00088e90 	.word	0x00088e90
   8022c:	00088ea4 	.word	0x00088ea4
   80230:	00088eb8 	.word	0x00088eb8
   80234:	0008128d 	.word	0x0008128d
   80238:	20078d58 	.word	0x20078d58
   8023c:	20078d60 	.word	0x20078d60
   80240:	20078d56 	.word	0x20078d56
   80244:	00082c25 	.word	0x00082c25

00080248 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8024c:	460c      	mov	r4, r1
   8024e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80250:	b960      	cbnz	r0, 8026c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80252:	2a00      	cmp	r2, #0
   80254:	dd0e      	ble.n	80274 <_read+0x2c>
   80256:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80258:	4e09      	ldr	r6, [pc, #36]	; (80280 <_read+0x38>)
   8025a:	4d0a      	ldr	r5, [pc, #40]	; (80284 <_read+0x3c>)
   8025c:	6830      	ldr	r0, [r6, #0]
   8025e:	4621      	mov	r1, r4
   80260:	682b      	ldr	r3, [r5, #0]
   80262:	4798      	blx	r3
		ptr++;
   80264:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80266:	42bc      	cmp	r4, r7
   80268:	d1f8      	bne.n	8025c <_read+0x14>
   8026a:	e006      	b.n	8027a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8026c:	f04f 30ff 	mov.w	r0, #4294967295
   80270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80274:	2000      	movs	r0, #0
   80276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8027a:	4640      	mov	r0, r8
	}
	return nChars;
}
   8027c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80280:	20078d8c 	.word	0x20078d8c
   80284:	20078d64 	.word	0x20078d64

00080288 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80288:	4b0f      	ldr	r3, [pc, #60]	; (802c8 <twi_set_speed+0x40>)
   8028a:	4299      	cmp	r1, r3
   8028c:	d819      	bhi.n	802c2 <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8028e:	0049      	lsls	r1, r1, #1
   80290:	fbb2 f2f1 	udiv	r2, r2, r1
   80294:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80296:	2aff      	cmp	r2, #255	; 0xff
   80298:	d907      	bls.n	802aa <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   8029a:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   8029c:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   8029e:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   802a0:	2aff      	cmp	r2, #255	; 0xff
   802a2:	d903      	bls.n	802ac <twi_set_speed+0x24>
   802a4:	2b07      	cmp	r3, #7
   802a6:	d1f9      	bne.n	8029c <twi_set_speed+0x14>
   802a8:	e000      	b.n	802ac <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   802aa:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   802ac:	0211      	lsls	r1, r2, #8
   802ae:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
   802b0:	041b      	lsls	r3, r3, #16
   802b2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   802b6:	430b      	orrs	r3, r1
   802b8:	b2d2      	uxtb	r2, r2
   802ba:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   802bc:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   802be:	2000      	movs	r0, #0
   802c0:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   802c2:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   802c4:	4770      	bx	lr
   802c6:	bf00      	nop
   802c8:	00061a80 	.word	0x00061a80

000802cc <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   802cc:	b538      	push	{r3, r4, r5, lr}
   802ce:	4604      	mov	r4, r0
   802d0:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   802d2:	f04f 33ff 	mov.w	r3, #4294967295
   802d6:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   802d8:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   802da:	2380      	movs	r3, #128	; 0x80
   802dc:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   802de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   802e0:	2308      	movs	r3, #8
   802e2:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   802e4:	2320      	movs	r3, #32
   802e6:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   802e8:	2304      	movs	r3, #4
   802ea:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   802ec:	6849      	ldr	r1, [r1, #4]
   802ee:	682a      	ldr	r2, [r5, #0]
   802f0:	4b05      	ldr	r3, [pc, #20]	; (80308 <twi_master_init+0x3c>)
   802f2:	4798      	blx	r3
   802f4:	2801      	cmp	r0, #1
   802f6:	bf14      	ite	ne
   802f8:	2000      	movne	r0, #0
   802fa:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   802fc:	7a6b      	ldrb	r3, [r5, #9]
   802fe:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   80300:	bf04      	itt	eq
   80302:	2340      	moveq	r3, #64	; 0x40
   80304:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
   80306:	bd38      	pop	{r3, r4, r5, pc}
   80308:	00080289 	.word	0x00080289

0008030c <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   8030c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
   80310:	4604      	mov	r4, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   80312:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   80314:	688e      	ldr	r6, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
   80316:	2b00      	cmp	r3, #0
   80318:	d049      	beq.n	803ae <twi_master_read+0xa2>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   8031a:	2200      	movs	r2, #0
   8031c:	6042      	str	r2, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   8031e:	6848      	ldr	r0, [r1, #4]
   80320:	0200      	lsls	r0, r0, #8
   80322:	f400 7040 	and.w	r0, r0, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   80326:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
   8032a:	7c0d      	ldrb	r5, [r1, #16]
   8032c:	042d      	lsls	r5, r5, #16
   8032e:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
   80332:	4328      	orrs	r0, r5
   80334:	6060      	str	r0, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   80336:	60e2      	str	r2, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80338:	684a      	ldr	r2, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   8033a:	b15a      	cbz	r2, 80354 <twi_master_read+0x48>
		return 0;

	val = addr[0];
   8033c:	7808      	ldrb	r0, [r1, #0]
	if (len > 1) {
   8033e:	2a01      	cmp	r2, #1
		val <<= 8;
		val |= addr[1];
   80340:	bfc4      	itt	gt
   80342:	784d      	ldrbgt	r5, [r1, #1]
   80344:	ea45 2000 	orrgt.w	r0, r5, r0, lsl #8
	}
	if (len > 2) {
   80348:	2a02      	cmp	r2, #2
   8034a:	dd04      	ble.n	80356 <twi_master_read+0x4a>
		val <<= 8;
		val |= addr[2];
   8034c:	788a      	ldrb	r2, [r1, #2]
   8034e:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
   80352:	e000      	b.n	80356 <twi_master_read+0x4a>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   80354:	2000      	movs	r0, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80356:	60e0      	str	r0, [r4, #12]

	/* Send a START condition */
	if (cnt == 1) {
   80358:	2b01      	cmp	r3, #1
   8035a:	d104      	bne.n	80366 <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   8035c:	2203      	movs	r2, #3
   8035e:	6022      	str	r2, [r4, #0]
		stop_sent = 1;
   80360:	f04f 0c01 	mov.w	ip, #1
   80364:	e02b      	b.n	803be <twi_master_read+0xb2>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
   80366:	2201      	movs	r2, #1
   80368:	6022      	str	r2, [r4, #0]
		stop_sent = 0;
   8036a:	f04f 0c00 	mov.w	ip, #0
   8036e:	e026      	b.n	803be <twi_master_read+0xb2>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80370:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   80372:	f411 7f80 	tst.w	r1, #256	; 0x100
   80376:	d11c      	bne.n	803b2 <twi_master_read+0xa6>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   80378:	1e55      	subs	r5, r2, #1
   8037a:	b1e2      	cbz	r2, 803b6 <twi_master_read+0xaa>
   8037c:	462a      	mov	r2, r5
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
   8037e:	2b01      	cmp	r3, #1
   80380:	d105      	bne.n	8038e <twi_master_read+0x82>
   80382:	f1bc 0f00 	cmp.w	ip, #0
   80386:	d102      	bne.n	8038e <twi_master_read+0x82>
			p_twi->TWI_CR = TWI_CR_STOP;
   80388:	f8c4 9000 	str.w	r9, [r4]
			stop_sent = 1;
   8038c:	46c4      	mov	ip, r8
		}

		if (!(status & TWI_SR_RXRDY)) {
   8038e:	f011 0f02 	tst.w	r1, #2
   80392:	d004      	beq.n	8039e <twi_master_read+0x92>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   80394:	6b22      	ldr	r2, [r4, #48]	; 0x30
   80396:	7032      	strb	r2, [r6, #0]

		cnt--;
   80398:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   8039a:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
   8039c:	463a      	mov	r2, r7
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
   8039e:	2b00      	cmp	r3, #0
   803a0:	d1e6      	bne.n	80370 <twi_master_read+0x64>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   803a2:	6a23      	ldr	r3, [r4, #32]
   803a4:	f013 0f01 	tst.w	r3, #1
   803a8:	d0fb      	beq.n	803a2 <twi_master_read+0x96>
	}

	p_twi->TWI_SR;
   803aa:	6a23      	ldr	r3, [r4, #32]

	return TWI_SUCCESS;
   803ac:	e014      	b.n	803d8 <twi_master_read+0xcc>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   803ae:	2001      	movs	r0, #1
   803b0:	e012      	b.n	803d8 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   803b2:	2005      	movs	r0, #5
   803b4:	e010      	b.n	803d8 <twi_master_read+0xcc>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
   803b6:	2009      	movs	r0, #9
   803b8:	e00e      	b.n	803d8 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   803ba:	2005      	movs	r0, #5
   803bc:	e00c      	b.n	803d8 <twi_master_read+0xcc>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   803be:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   803c0:	f411 7080 	ands.w	r0, r1, #256	; 0x100
   803c4:	d1f9      	bne.n	803ba <twi_master_read+0xae>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   803c6:	f643 2297 	movw	r2, #14999	; 0x3a97
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
   803ca:	f04f 0902 	mov.w	r9, #2
			stop_sent = 1;
   803ce:	f04f 0801 	mov.w	r8, #1
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
   803d2:	f643 2798 	movw	r7, #15000	; 0x3a98
   803d6:	e7d2      	b.n	8037e <twi_master_read+0x72>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
   803d8:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
   803dc:	4770      	bx	lr
   803de:	bf00      	nop

000803e0 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   803e0:	b470      	push	{r4, r5, r6}
   803e2:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   803e4:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   803e6:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
   803e8:	2a00      	cmp	r2, #0
   803ea:	d03f      	beq.n	8046c <twi_master_write+0x8c>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   803ec:	2400      	movs	r4, #0
   803ee:	605c      	str	r4, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   803f0:	7c0e      	ldrb	r6, [r1, #16]
   803f2:	0436      	lsls	r6, r6, #16
   803f4:	f406 06fe 	and.w	r6, r6, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   803f8:	684d      	ldr	r5, [r1, #4]
   803fa:	022d      	lsls	r5, r5, #8
   803fc:	f405 7540 	and.w	r5, r5, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   80400:	4335      	orrs	r5, r6
   80402:	605d      	str	r5, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   80404:	60dc      	str	r4, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80406:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   80408:	b15c      	cbz	r4, 80422 <twi_master_write+0x42>
		return 0;

	val = addr[0];
   8040a:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
   8040c:	2c01      	cmp	r4, #1
		val <<= 8;
		val |= addr[1];
   8040e:	bfc4      	itt	gt
   80410:	784e      	ldrbgt	r6, [r1, #1]
   80412:	ea46 2505 	orrgt.w	r5, r6, r5, lsl #8
	}
	if (len > 2) {
   80416:	2c02      	cmp	r4, #2
   80418:	dd04      	ble.n	80424 <twi_master_write+0x44>
		val <<= 8;
		val |= addr[2];
   8041a:	7889      	ldrb	r1, [r1, #2]
   8041c:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
   80420:	e000      	b.n	80424 <twi_master_write+0x44>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   80422:	2500      	movs	r5, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80424:	60dd      	str	r5, [r3, #12]
   80426:	e00b      	b.n	80440 <twi_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80428:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   8042a:	f411 7f80 	tst.w	r1, #256	; 0x100
   8042e:	d11f      	bne.n	80470 <twi_master_write+0x90>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   80430:	f011 0f04 	tst.w	r1, #4
   80434:	d0f8      	beq.n	80428 <twi_master_write+0x48>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
   80436:	f810 1b01 	ldrb.w	r1, [r0], #1
   8043a:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   8043c:	3a01      	subs	r2, #1
   8043e:	d007      	beq.n	80450 <twi_master_write+0x70>
		status = p_twi->TWI_SR;
   80440:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   80442:	f411 7f80 	tst.w	r1, #256	; 0x100
   80446:	d115      	bne.n	80474 <twi_master_write+0x94>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   80448:	f011 0f04 	tst.w	r1, #4
   8044c:	d1f3      	bne.n	80436 <twi_master_write+0x56>
   8044e:	e7eb      	b.n	80428 <twi_master_write+0x48>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
   80450:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   80452:	f412 7080 	ands.w	r0, r2, #256	; 0x100
   80456:	d10f      	bne.n	80478 <twi_master_write+0x98>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
   80458:	f012 0f04 	tst.w	r2, #4
   8045c:	d0f8      	beq.n	80450 <twi_master_write+0x70>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   8045e:	2202      	movs	r2, #2
   80460:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   80462:	6a1a      	ldr	r2, [r3, #32]
   80464:	f012 0f01 	tst.w	r2, #1
   80468:	d0fb      	beq.n	80462 <twi_master_write+0x82>
   8046a:	e006      	b.n	8047a <twi_master_write+0x9a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   8046c:	2001      	movs	r0, #1
   8046e:	e004      	b.n	8047a <twi_master_write+0x9a>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80470:	2005      	movs	r0, #5
   80472:	e002      	b.n	8047a <twi_master_write+0x9a>
   80474:	2005      	movs	r0, #5
   80476:	e000      	b.n	8047a <twi_master_write+0x9a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80478:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
   8047a:	bc70      	pop	{r4, r5, r6}
   8047c:	4770      	bx	lr
   8047e:	bf00      	nop

00080480 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80480:	6943      	ldr	r3, [r0, #20]
   80482:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80486:	bf1d      	ittte	ne
   80488:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   8048c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8048e:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80490:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80492:	4770      	bx	lr

00080494 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80494:	6943      	ldr	r3, [r0, #20]
   80496:	f013 0f01 	tst.w	r3, #1
   8049a:	d005      	beq.n	804a8 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8049c:	6983      	ldr	r3, [r0, #24]
   8049e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   804a2:	600b      	str	r3, [r1, #0]

	return 0;
   804a4:	2000      	movs	r0, #0
   804a6:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   804a8:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   804aa:	4770      	bx	lr

000804ac <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   804ac:	f100 0308 	add.w	r3, r0, #8
   804b0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   804b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   804b6:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   804b8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   804ba:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   804bc:	2300      	movs	r3, #0
   804be:	6003      	str	r3, [r0, #0]
   804c0:	4770      	bx	lr
   804c2:	bf00      	nop

000804c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   804c4:	2300      	movs	r3, #0
   804c6:	6103      	str	r3, [r0, #16]
   804c8:	4770      	bx	lr
   804ca:	bf00      	nop

000804cc <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   804cc:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   804ce:	685a      	ldr	r2, [r3, #4]
   804d0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   804d2:	6842      	ldr	r2, [r0, #4]
   804d4:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   804d6:	685a      	ldr	r2, [r3, #4]
   804d8:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   804da:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   804dc:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   804de:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   804e0:	6803      	ldr	r3, [r0, #0]
   804e2:	3301      	adds	r3, #1
   804e4:	6003      	str	r3, [r0, #0]
   804e6:	4770      	bx	lr

000804e8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   804e8:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   804ea:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   804ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   804f0:	429c      	cmp	r4, r3
   804f2:	d101      	bne.n	804f8 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   804f4:	6903      	ldr	r3, [r0, #16]
   804f6:	e00c      	b.n	80512 <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   804f8:	f100 0308 	add.w	r3, r0, #8
   804fc:	68c2      	ldr	r2, [r0, #12]
   804fe:	8812      	ldrh	r2, [r2, #0]
   80500:	b292      	uxth	r2, r2
   80502:	4294      	cmp	r4, r2
   80504:	d305      	bcc.n	80512 <vListInsert+0x2a>
   80506:	685b      	ldr	r3, [r3, #4]
   80508:	685a      	ldr	r2, [r3, #4]
   8050a:	8812      	ldrh	r2, [r2, #0]
   8050c:	b292      	uxth	r2, r2
   8050e:	4294      	cmp	r4, r2
   80510:	d2f9      	bcs.n	80506 <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80512:	685a      	ldr	r2, [r3, #4]
   80514:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80516:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   80518:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   8051a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8051c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   8051e:	6803      	ldr	r3, [r0, #0]
   80520:	3301      	adds	r3, #1
   80522:	6003      	str	r3, [r0, #0]
}
   80524:	f85d 4b04 	ldr.w	r4, [sp], #4
   80528:	4770      	bx	lr
   8052a:	bf00      	nop

0008052c <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   8052c:	6843      	ldr	r3, [r0, #4]
   8052e:	6882      	ldr	r2, [r0, #8]
   80530:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80532:	6883      	ldr	r3, [r0, #8]
   80534:	6842      	ldr	r2, [r0, #4]
   80536:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80538:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8053a:	685a      	ldr	r2, [r3, #4]
   8053c:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8053e:	bf04      	itt	eq
   80540:	6882      	ldreq	r2, [r0, #8]
   80542:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80544:	2200      	movs	r2, #0
   80546:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80548:	681a      	ldr	r2, [r3, #0]
   8054a:	3a01      	subs	r2, #1
   8054c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   8054e:	6818      	ldr	r0, [r3, #0]
}
   80550:	4770      	bx	lr
   80552:	bf00      	nop

00080554 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80554:	4803      	ldr	r0, [pc, #12]	; (80564 <prvPortStartFirstTask+0x10>)
   80556:	6800      	ldr	r0, [r0, #0]
   80558:	6800      	ldr	r0, [r0, #0]
   8055a:	f380 8808 	msr	MSP, r0
   8055e:	b662      	cpsie	i
   80560:	df00      	svc	0
   80562:	bf00      	nop
   80564:	e000ed08 	.word	0xe000ed08

00080568 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   8056c:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80570:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   80574:	2300      	movs	r3, #0
   80576:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   8057a:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   8057e:	3840      	subs	r0, #64	; 0x40
   80580:	4770      	bx	lr
   80582:	bf00      	nop

00080584 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80584:	4b06      	ldr	r3, [pc, #24]	; (805a0 <pxCurrentTCBConst2>)
   80586:	6819      	ldr	r1, [r3, #0]
   80588:	6808      	ldr	r0, [r1, #0]
   8058a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8058e:	f380 8809 	msr	PSP, r0
   80592:	f04f 0000 	mov.w	r0, #0
   80596:	f380 8811 	msr	BASEPRI, r0
   8059a:	f04e 0e0d 	orr.w	lr, lr, #13
   8059e:	4770      	bx	lr

000805a0 <pxCurrentTCBConst2>:
   805a0:	20078b78 	.word	0x20078b78

000805a4 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   805a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   805a8:	4b01      	ldr	r3, [pc, #4]	; (805b0 <vPortYieldFromISR+0xc>)
   805aa:	601a      	str	r2, [r3, #0]
   805ac:	4770      	bx	lr
   805ae:	bf00      	nop
   805b0:	e000ed04 	.word	0xe000ed04

000805b4 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   805b4:	f3ef 8011 	mrs	r0, BASEPRI
   805b8:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   805bc:	f381 8811 	msr	BASEPRI, r1
   805c0:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   805c2:	2000      	movs	r0, #0

000805c4 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   805c4:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   805c6:	4b03      	ldr	r3, [pc, #12]	; (805d4 <vPortEnterCritical+0x10>)
   805c8:	4798      	blx	r3
	uxCriticalNesting++;
   805ca:	4b03      	ldr	r3, [pc, #12]	; (805d8 <vPortEnterCritical+0x14>)
   805cc:	681a      	ldr	r2, [r3, #0]
   805ce:	3201      	adds	r2, #1
   805d0:	601a      	str	r2, [r3, #0]
   805d2:	bd08      	pop	{r3, pc}
   805d4:	000805b5 	.word	0x000805b5
   805d8:	2007012c 	.word	0x2007012c

000805dc <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   805dc:	f380 8811 	msr	BASEPRI, r0
   805e0:	4770      	bx	lr
   805e2:	bf00      	nop

000805e4 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   805e4:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   805e6:	4a04      	ldr	r2, [pc, #16]	; (805f8 <vPortExitCritical+0x14>)
   805e8:	6813      	ldr	r3, [r2, #0]
   805ea:	3b01      	subs	r3, #1
   805ec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   805ee:	b913      	cbnz	r3, 805f6 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   805f0:	2000      	movs	r0, #0
   805f2:	4b02      	ldr	r3, [pc, #8]	; (805fc <vPortExitCritical+0x18>)
   805f4:	4798      	blx	r3
   805f6:	bd08      	pop	{r3, pc}
   805f8:	2007012c 	.word	0x2007012c
   805fc:	000805dd 	.word	0x000805dd

00080600 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80600:	f3ef 8009 	mrs	r0, PSP
   80604:	4b0c      	ldr	r3, [pc, #48]	; (80638 <pxCurrentTCBConst>)
   80606:	681a      	ldr	r2, [r3, #0]
   80608:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8060c:	6010      	str	r0, [r2, #0]
   8060e:	e92d 4008 	stmdb	sp!, {r3, lr}
   80612:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80616:	f380 8811 	msr	BASEPRI, r0
   8061a:	f000 fec5 	bl	813a8 <vTaskSwitchContext>
   8061e:	f04f 0000 	mov.w	r0, #0
   80622:	f380 8811 	msr	BASEPRI, r0
   80626:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8062a:	6819      	ldr	r1, [r3, #0]
   8062c:	6808      	ldr	r0, [r1, #0]
   8062e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80632:	f380 8809 	msr	PSP, r0
   80636:	4770      	bx	lr

00080638 <pxCurrentTCBConst>:
   80638:	20078b78 	.word	0x20078b78

0008063c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   8063c:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8063e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80642:	4b05      	ldr	r3, [pc, #20]	; (80658 <SysTick_Handler+0x1c>)
   80644:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80646:	4b05      	ldr	r3, [pc, #20]	; (8065c <SysTick_Handler+0x20>)
   80648:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8064a:	4b05      	ldr	r3, [pc, #20]	; (80660 <SysTick_Handler+0x24>)
   8064c:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8064e:	2000      	movs	r0, #0
   80650:	4b04      	ldr	r3, [pc, #16]	; (80664 <SysTick_Handler+0x28>)
   80652:	4798      	blx	r3
   80654:	bd08      	pop	{r3, pc}
   80656:	bf00      	nop
   80658:	e000ed04 	.word	0xe000ed04
   8065c:	000805b5 	.word	0x000805b5
   80660:	00081059 	.word	0x00081059
   80664:	000805dd 	.word	0x000805dd

00080668 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   80668:	4a03      	ldr	r2, [pc, #12]	; (80678 <vPortSetupTimerInterrupt+0x10>)
   8066a:	4b04      	ldr	r3, [pc, #16]	; (8067c <vPortSetupTimerInterrupt+0x14>)
   8066c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   8066e:	2207      	movs	r2, #7
   80670:	3b04      	subs	r3, #4
   80672:	601a      	str	r2, [r3, #0]
   80674:	4770      	bx	lr
   80676:	bf00      	nop
   80678:	0001481f 	.word	0x0001481f
   8067c:	e000e014 	.word	0xe000e014

00080680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   80680:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80682:	4b09      	ldr	r3, [pc, #36]	; (806a8 <xPortStartScheduler+0x28>)
   80684:	681a      	ldr	r2, [r3, #0]
   80686:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   8068a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   8068c:	681a      	ldr	r2, [r3, #0]
   8068e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   80692:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   80694:	4b05      	ldr	r3, [pc, #20]	; (806ac <xPortStartScheduler+0x2c>)
   80696:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   80698:	2400      	movs	r4, #0
   8069a:	4b05      	ldr	r3, [pc, #20]	; (806b0 <xPortStartScheduler+0x30>)
   8069c:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   8069e:	4b05      	ldr	r3, [pc, #20]	; (806b4 <xPortStartScheduler+0x34>)
   806a0:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   806a2:	4620      	mov	r0, r4
   806a4:	bd10      	pop	{r4, pc}
   806a6:	bf00      	nop
   806a8:	e000ed20 	.word	0xe000ed20
   806ac:	00080669 	.word	0x00080669
   806b0:	2007012c 	.word	0x2007012c
   806b4:	00080555 	.word	0x00080555

000806b8 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   806b8:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   806ba:	4a13      	ldr	r2, [pc, #76]	; (80708 <prvInsertBlockIntoFreeList+0x50>)
   806bc:	6813      	ldr	r3, [r2, #0]
   806be:	4283      	cmp	r3, r0
   806c0:	d201      	bcs.n	806c6 <prvInsertBlockIntoFreeList+0xe>
   806c2:	461a      	mov	r2, r3
   806c4:	e7fa      	b.n	806bc <prvInsertBlockIntoFreeList+0x4>
   806c6:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   806c8:	6854      	ldr	r4, [r2, #4]
   806ca:	1915      	adds	r5, r2, r4
   806cc:	4285      	cmp	r5, r0
   806ce:	d103      	bne.n	806d8 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   806d0:	6868      	ldr	r0, [r5, #4]
   806d2:	4404      	add	r4, r0
   806d4:	6054      	str	r4, [r2, #4]
   806d6:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   806d8:	6842      	ldr	r2, [r0, #4]
   806da:	1884      	adds	r4, r0, r2
   806dc:	42a3      	cmp	r3, r4
   806de:	d10c      	bne.n	806fa <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   806e0:	4c0a      	ldr	r4, [pc, #40]	; (8070c <prvInsertBlockIntoFreeList+0x54>)
   806e2:	6824      	ldr	r4, [r4, #0]
   806e4:	429c      	cmp	r4, r3
   806e6:	d006      	beq.n	806f6 <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   806e8:	685b      	ldr	r3, [r3, #4]
   806ea:	441a      	add	r2, r3
   806ec:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   806ee:	680b      	ldr	r3, [r1, #0]
   806f0:	681b      	ldr	r3, [r3, #0]
   806f2:	6003      	str	r3, [r0, #0]
   806f4:	e002      	b.n	806fc <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   806f6:	6003      	str	r3, [r0, #0]
   806f8:	e000      	b.n	806fc <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   806fa:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   806fc:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   806fe:	bf18      	it	ne
   80700:	6008      	strne	r0, [r1, #0]
	}
}
   80702:	bc30      	pop	{r4, r5}
   80704:	4770      	bx	lr
   80706:	bf00      	nop
   80708:	20078a54 	.word	0x20078a54
   8070c:	20078a50 	.word	0x20078a50

00080710 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   80710:	b538      	push	{r3, r4, r5, lr}
   80712:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   80714:	4b28      	ldr	r3, [pc, #160]	; (807b8 <pvPortMalloc+0xa8>)
   80716:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   80718:	4b28      	ldr	r3, [pc, #160]	; (807bc <pvPortMalloc+0xac>)
   8071a:	681b      	ldr	r3, [r3, #0]
   8071c:	b99b      	cbnz	r3, 80746 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   8071e:	4a28      	ldr	r2, [pc, #160]	; (807c0 <pvPortMalloc+0xb0>)
   80720:	4b28      	ldr	r3, [pc, #160]	; (807c4 <pvPortMalloc+0xb4>)
   80722:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80724:	2100      	movs	r1, #0
   80726:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   80728:	f647 72f0 	movw	r2, #32752	; 0x7ff0
   8072c:	1898      	adds	r0, r3, r2
   8072e:	4d23      	ldr	r5, [pc, #140]	; (807bc <pvPortMalloc+0xac>)
   80730:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   80732:	f647 75f4 	movw	r5, #32756	; 0x7ff4
   80736:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80738:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   8073a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   8073c:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   8073e:	4b22      	ldr	r3, [pc, #136]	; (807c8 <pvPortMalloc+0xb8>)
   80740:	681a      	ldr	r2, [r3, #0]
   80742:	3a10      	subs	r2, #16
   80744:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   80746:	2c00      	cmp	r4, #0
   80748:	d02d      	beq.n	807a6 <pvPortMalloc+0x96>
		{
			xWantedSize += heapSTRUCT_SIZE;
   8074a:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   8074e:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80752:	bf1c      	itt	ne
   80754:	f022 0207 	bicne.w	r2, r2, #7
   80758:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   8075a:	1e51      	subs	r1, r2, #1
   8075c:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   80760:	4299      	cmp	r1, r3
   80762:	d822      	bhi.n	807aa <pvPortMalloc+0x9a>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   80764:	4916      	ldr	r1, [pc, #88]	; (807c0 <pvPortMalloc+0xb0>)
   80766:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80768:	6863      	ldr	r3, [r4, #4]
   8076a:	429a      	cmp	r2, r3
   8076c:	d904      	bls.n	80778 <pvPortMalloc+0x68>
   8076e:	6823      	ldr	r3, [r4, #0]
   80770:	b113      	cbz	r3, 80778 <pvPortMalloc+0x68>
   80772:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   80774:	461c      	mov	r4, r3
   80776:	e7f7      	b.n	80768 <pvPortMalloc+0x58>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   80778:	4b10      	ldr	r3, [pc, #64]	; (807bc <pvPortMalloc+0xac>)
   8077a:	681b      	ldr	r3, [r3, #0]
   8077c:	429c      	cmp	r4, r3
   8077e:	d016      	beq.n	807ae <pvPortMalloc+0x9e>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   80780:	680d      	ldr	r5, [r1, #0]
   80782:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80784:	6823      	ldr	r3, [r4, #0]
   80786:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   80788:	6863      	ldr	r3, [r4, #4]
   8078a:	1a9b      	subs	r3, r3, r2
   8078c:	2b20      	cmp	r3, #32
   8078e:	d904      	bls.n	8079a <pvPortMalloc+0x8a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   80790:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80792:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80794:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80796:	4b0d      	ldr	r3, [pc, #52]	; (807cc <pvPortMalloc+0xbc>)
   80798:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   8079a:	4b0b      	ldr	r3, [pc, #44]	; (807c8 <pvPortMalloc+0xb8>)
   8079c:	681a      	ldr	r2, [r3, #0]
   8079e:	6861      	ldr	r1, [r4, #4]
   807a0:	1a52      	subs	r2, r2, r1
   807a2:	601a      	str	r2, [r3, #0]
   807a4:	e004      	b.n	807b0 <pvPortMalloc+0xa0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   807a6:	2500      	movs	r5, #0
   807a8:	e002      	b.n	807b0 <pvPortMalloc+0xa0>
   807aa:	2500      	movs	r5, #0
   807ac:	e000      	b.n	807b0 <pvPortMalloc+0xa0>
   807ae:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   807b0:	4b07      	ldr	r3, [pc, #28]	; (807d0 <pvPortMalloc+0xc0>)
   807b2:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   807b4:	4628      	mov	r0, r5
   807b6:	bd38      	pop	{r3, r4, r5, pc}
   807b8:	00081029 	.word	0x00081029
   807bc:	20078a50 	.word	0x20078a50
   807c0:	20078a54 	.word	0x20078a54
   807c4:	20070a50 	.word	0x20070a50
   807c8:	20070130 	.word	0x20070130
   807cc:	000806b9 	.word	0x000806b9
   807d0:	00081185 	.word	0x00081185

000807d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   807d4:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   807d6:	4604      	mov	r4, r0
   807d8:	b168      	cbz	r0, 807f6 <vPortFree+0x22>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   807da:	4b07      	ldr	r3, [pc, #28]	; (807f8 <vPortFree+0x24>)
   807dc:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   807de:	4b07      	ldr	r3, [pc, #28]	; (807fc <vPortFree+0x28>)
   807e0:	6819      	ldr	r1, [r3, #0]
   807e2:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   807e6:	440a      	add	r2, r1
   807e8:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   807ea:	f1a4 0010 	sub.w	r0, r4, #16
   807ee:	4b04      	ldr	r3, [pc, #16]	; (80800 <vPortFree+0x2c>)
   807f0:	4798      	blx	r3
		}
		xTaskResumeAll();
   807f2:	4b04      	ldr	r3, [pc, #16]	; (80804 <vPortFree+0x30>)
   807f4:	4798      	blx	r3
   807f6:	bd10      	pop	{r4, pc}
   807f8:	00081029 	.word	0x00081029
   807fc:	20070130 	.word	0x20070130
   80800:	000806b9 	.word	0x000806b9
   80804:	00081185 	.word	0x00081185

00080808 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80808:	b510      	push	{r4, lr}
   8080a:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   8080c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8080e:	b93b      	cbnz	r3, 80820 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80810:	6803      	ldr	r3, [r0, #0]
   80812:	bb1b      	cbnz	r3, 8085c <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80814:	6840      	ldr	r0, [r0, #4]
   80816:	4b13      	ldr	r3, [pc, #76]	; (80864 <prvCopyDataToQueue+0x5c>)
   80818:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   8081a:	2300      	movs	r3, #0
   8081c:	6063      	str	r3, [r4, #4]
   8081e:	e01d      	b.n	8085c <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   80820:	b96a      	cbnz	r2, 8083e <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80822:	6880      	ldr	r0, [r0, #8]
   80824:	461a      	mov	r2, r3
   80826:	4b10      	ldr	r3, [pc, #64]	; (80868 <prvCopyDataToQueue+0x60>)
   80828:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   8082a:	68a2      	ldr	r2, [r4, #8]
   8082c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   8082e:	4413      	add	r3, r2
   80830:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80832:	6862      	ldr	r2, [r4, #4]
   80834:	4293      	cmp	r3, r2
   80836:	d311      	bcc.n	8085c <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80838:	6823      	ldr	r3, [r4, #0]
   8083a:	60a3      	str	r3, [r4, #8]
   8083c:	e00e      	b.n	8085c <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   8083e:	68c0      	ldr	r0, [r0, #12]
   80840:	461a      	mov	r2, r3
   80842:	4b09      	ldr	r3, [pc, #36]	; (80868 <prvCopyDataToQueue+0x60>)
   80844:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80846:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80848:	4252      	negs	r2, r2
   8084a:	68e3      	ldr	r3, [r4, #12]
   8084c:	4413      	add	r3, r2
   8084e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80850:	6821      	ldr	r1, [r4, #0]
   80852:	428b      	cmp	r3, r1
   80854:	d202      	bcs.n	8085c <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80856:	6863      	ldr	r3, [r4, #4]
   80858:	441a      	add	r2, r3
   8085a:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   8085c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8085e:	3301      	adds	r3, #1
   80860:	63a3      	str	r3, [r4, #56]	; 0x38
   80862:	bd10      	pop	{r4, pc}
   80864:	000816d1 	.word	0x000816d1
   80868:	00082995 	.word	0x00082995

0008086c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   8086c:	b538      	push	{r3, r4, r5, lr}
   8086e:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80870:	6805      	ldr	r5, [r0, #0]
   80872:	b15d      	cbz	r5, 8088c <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80874:	6c02      	ldr	r2, [r0, #64]	; 0x40
   80876:	68c4      	ldr	r4, [r0, #12]
   80878:	4414      	add	r4, r2
   8087a:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   8087c:	6840      	ldr	r0, [r0, #4]
   8087e:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80880:	bf28      	it	cs
   80882:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   80884:	4608      	mov	r0, r1
   80886:	68d9      	ldr	r1, [r3, #12]
   80888:	4b01      	ldr	r3, [pc, #4]	; (80890 <prvCopyDataFromQueue+0x24>)
   8088a:	4798      	blx	r3
   8088c:	bd38      	pop	{r3, r4, r5, pc}
   8088e:	bf00      	nop
   80890:	00082995 	.word	0x00082995

00080894 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   80894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80896:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   80898:	4b1d      	ldr	r3, [pc, #116]	; (80910 <prvUnlockQueue+0x7c>)
   8089a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   8089c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8089e:	2b00      	cmp	r3, #0
   808a0:	dd12      	ble.n	808c8 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   808a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   808a4:	b183      	cbz	r3, 808c8 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   808a6:	f104 0624 	add.w	r6, r4, #36	; 0x24
   808aa:	4d1a      	ldr	r5, [pc, #104]	; (80914 <prvUnlockQueue+0x80>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   808ac:	4f1a      	ldr	r7, [pc, #104]	; (80918 <prvUnlockQueue+0x84>)
   808ae:	e001      	b.n	808b4 <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   808b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   808b2:	b14b      	cbz	r3, 808c8 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   808b4:	4630      	mov	r0, r6
   808b6:	47a8      	blx	r5
   808b8:	b100      	cbz	r0, 808bc <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   808ba:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   808bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   808be:	3b01      	subs	r3, #1
   808c0:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   808c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   808c4:	2b00      	cmp	r3, #0
   808c6:	dcf3      	bgt.n	808b0 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   808c8:	f04f 33ff 	mov.w	r3, #4294967295
   808cc:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   808ce:	4b13      	ldr	r3, [pc, #76]	; (8091c <prvUnlockQueue+0x88>)
   808d0:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   808d2:	4b0f      	ldr	r3, [pc, #60]	; (80910 <prvUnlockQueue+0x7c>)
   808d4:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   808d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   808d8:	2b00      	cmp	r3, #0
   808da:	dd12      	ble.n	80902 <prvUnlockQueue+0x6e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   808dc:	6923      	ldr	r3, [r4, #16]
   808de:	b183      	cbz	r3, 80902 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   808e0:	f104 0610 	add.w	r6, r4, #16
   808e4:	4d0b      	ldr	r5, [pc, #44]	; (80914 <prvUnlockQueue+0x80>)
				{
					vTaskMissedYield();
   808e6:	4f0c      	ldr	r7, [pc, #48]	; (80918 <prvUnlockQueue+0x84>)
   808e8:	e001      	b.n	808ee <prvUnlockQueue+0x5a>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   808ea:	6923      	ldr	r3, [r4, #16]
   808ec:	b14b      	cbz	r3, 80902 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   808ee:	4630      	mov	r0, r6
   808f0:	47a8      	blx	r5
   808f2:	b100      	cbz	r0, 808f6 <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
   808f4:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   808f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   808f8:	3b01      	subs	r3, #1
   808fa:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   808fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   808fe:	2b00      	cmp	r3, #0
   80900:	dcf3      	bgt.n	808ea <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   80902:	f04f 33ff 	mov.w	r3, #4294967295
   80906:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80908:	4b04      	ldr	r3, [pc, #16]	; (8091c <prvUnlockQueue+0x88>)
   8090a:	4798      	blx	r3
   8090c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8090e:	bf00      	nop
   80910:	000805c5 	.word	0x000805c5
   80914:	000814e5 	.word	0x000814e5
   80918:	0008161d 	.word	0x0008161d
   8091c:	000805e5 	.word	0x000805e5

00080920 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   80920:	b538      	push	{r3, r4, r5, lr}
   80922:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   80924:	4604      	mov	r4, r0
   80926:	b918      	cbnz	r0, 80930 <xQueueGenericReset+0x10>
   80928:	4b16      	ldr	r3, [pc, #88]	; (80984 <xQueueGenericReset+0x64>)
   8092a:	4798      	blx	r3
   8092c:	bf00      	nop
   8092e:	e7fd      	b.n	8092c <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
   80930:	4b15      	ldr	r3, [pc, #84]	; (80988 <xQueueGenericReset+0x68>)
   80932:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80934:	6823      	ldr	r3, [r4, #0]
   80936:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80938:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   8093a:	fb00 f002 	mul.w	r0, r0, r2
   8093e:	1819      	adds	r1, r3, r0
   80940:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   80942:	2100      	movs	r1, #0
   80944:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80946:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80948:	1a82      	subs	r2, r0, r2
   8094a:	4413      	add	r3, r2
   8094c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   8094e:	f04f 33ff 	mov.w	r3, #4294967295
   80952:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   80954:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   80956:	b955      	cbnz	r5, 8096e <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80958:	6923      	ldr	r3, [r4, #16]
   8095a:	b17b      	cbz	r3, 8097c <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   8095c:	f104 0010 	add.w	r0, r4, #16
   80960:	4b0a      	ldr	r3, [pc, #40]	; (8098c <xQueueGenericReset+0x6c>)
   80962:	4798      	blx	r3
   80964:	2801      	cmp	r0, #1
   80966:	d109      	bne.n	8097c <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   80968:	4b09      	ldr	r3, [pc, #36]	; (80990 <xQueueGenericReset+0x70>)
   8096a:	4798      	blx	r3
   8096c:	e006      	b.n	8097c <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   8096e:	f104 0010 	add.w	r0, r4, #16
   80972:	4d08      	ldr	r5, [pc, #32]	; (80994 <xQueueGenericReset+0x74>)
   80974:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80976:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8097a:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   8097c:	4b06      	ldr	r3, [pc, #24]	; (80998 <xQueueGenericReset+0x78>)
   8097e:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   80980:	2001      	movs	r0, #1
   80982:	bd38      	pop	{r3, r4, r5, pc}
   80984:	000805b5 	.word	0x000805b5
   80988:	000805c5 	.word	0x000805c5
   8098c:	000814e5 	.word	0x000814e5
   80990:	000805a5 	.word	0x000805a5
   80994:	000804ad 	.word	0x000804ad
   80998:	000805e5 	.word	0x000805e5

0008099c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   8099c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8099e:	460d      	mov	r5, r1
   809a0:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   809a2:	4606      	mov	r6, r0
   809a4:	b188      	cbz	r0, 809ca <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   809a6:	2050      	movs	r0, #80	; 0x50
   809a8:	4b0e      	ldr	r3, [pc, #56]	; (809e4 <xQueueGenericCreate+0x48>)
   809aa:	4798      	blx	r3
		if( pxNewQueue != NULL )
   809ac:	4604      	mov	r4, r0
   809ae:	b160      	cbz	r0, 809ca <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   809b0:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   809b4:	3001      	adds	r0, #1
   809b6:	4b0b      	ldr	r3, [pc, #44]	; (809e4 <xQueueGenericCreate+0x48>)
   809b8:	4798      	blx	r3
   809ba:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   809bc:	b940      	cbnz	r0, 809d0 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   809be:	4620      	mov	r0, r4
   809c0:	4b09      	ldr	r3, [pc, #36]	; (809e8 <xQueueGenericCreate+0x4c>)
   809c2:	4798      	blx	r3
   809c4:	e001      	b.n	809ca <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   809c6:	bf00      	nop
   809c8:	e7fd      	b.n	809c6 <xQueueGenericCreate+0x2a>
   809ca:	4b08      	ldr	r3, [pc, #32]	; (809ec <xQueueGenericCreate+0x50>)
   809cc:	4798      	blx	r3
   809ce:	e7fa      	b.n	809c6 <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   809d0:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   809d2:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   809d4:	4620      	mov	r0, r4
   809d6:	2101      	movs	r1, #1
   809d8:	4b05      	ldr	r3, [pc, #20]	; (809f0 <xQueueGenericCreate+0x54>)
   809da:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   809dc:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   809e0:	4620      	mov	r0, r4
   809e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   809e4:	00080711 	.word	0x00080711
   809e8:	000807d5 	.word	0x000807d5
   809ec:	000805b5 	.word	0x000805b5
   809f0:	00080921 	.word	0x00080921

000809f4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   809f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   809f8:	b085      	sub	sp, #20
   809fa:	468a      	mov	sl, r1
   809fc:	469b      	mov	fp, r3
   809fe:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   80a02:	4604      	mov	r4, r0
   80a04:	b918      	cbnz	r0, 80a0e <xQueueGenericSend+0x1a>
   80a06:	4b38      	ldr	r3, [pc, #224]	; (80ae8 <xQueueGenericSend+0xf4>)
   80a08:	4798      	blx	r3
   80a0a:	bf00      	nop
   80a0c:	e7fd      	b.n	80a0a <xQueueGenericSend+0x16>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80a0e:	b909      	cbnz	r1, 80a14 <xQueueGenericSend+0x20>
   80a10:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80a12:	b91b      	cbnz	r3, 80a1c <xQueueGenericSend+0x28>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   80a14:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80a16:	4e35      	ldr	r6, [pc, #212]	; (80aec <xQueueGenericSend+0xf8>)
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80a18:	4d35      	ldr	r5, [pc, #212]	; (80af0 <xQueueGenericSend+0xfc>)
   80a1a:	e003      	b.n	80a24 <xQueueGenericSend+0x30>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80a1c:	4b32      	ldr	r3, [pc, #200]	; (80ae8 <xQueueGenericSend+0xf4>)
   80a1e:	4798      	blx	r3
   80a20:	bf00      	nop
   80a22:	e7fd      	b.n	80a20 <xQueueGenericSend+0x2c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80a24:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80a26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80a28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80a2a:	429a      	cmp	r2, r3
   80a2c:	d212      	bcs.n	80a54 <xQueueGenericSend+0x60>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80a2e:	4620      	mov	r0, r4
   80a30:	4651      	mov	r1, sl
   80a32:	465a      	mov	r2, fp
   80a34:	4b2f      	ldr	r3, [pc, #188]	; (80af4 <xQueueGenericSend+0x100>)
   80a36:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80a3a:	b13b      	cbz	r3, 80a4c <xQueueGenericSend+0x58>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80a3c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80a40:	4b2d      	ldr	r3, [pc, #180]	; (80af8 <xQueueGenericSend+0x104>)
   80a42:	4798      	blx	r3
   80a44:	2801      	cmp	r0, #1
   80a46:	d101      	bne.n	80a4c <xQueueGenericSend+0x58>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   80a48:	4b2c      	ldr	r3, [pc, #176]	; (80afc <xQueueGenericSend+0x108>)
   80a4a:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   80a4c:	4b28      	ldr	r3, [pc, #160]	; (80af0 <xQueueGenericSend+0xfc>)
   80a4e:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   80a50:	2001      	movs	r0, #1
   80a52:	e046      	b.n	80ae2 <xQueueGenericSend+0xee>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80a54:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   80a58:	b91b      	cbnz	r3, 80a62 <xQueueGenericSend+0x6e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80a5a:	4b25      	ldr	r3, [pc, #148]	; (80af0 <xQueueGenericSend+0xfc>)
   80a5c:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   80a5e:	2000      	movs	r0, #0
   80a60:	e03f      	b.n	80ae2 <xQueueGenericSend+0xee>
				}
				else if( xEntryTimeSet == pdFALSE )
   80a62:	b91f      	cbnz	r7, 80a6c <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80a64:	a802      	add	r0, sp, #8
   80a66:	4b26      	ldr	r3, [pc, #152]	; (80b00 <xQueueGenericSend+0x10c>)
   80a68:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   80a6a:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80a6c:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80a6e:	4b25      	ldr	r3, [pc, #148]	; (80b04 <xQueueGenericSend+0x110>)
   80a70:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80a72:	47b0      	blx	r6
   80a74:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80a76:	f1b3 3fff 	cmp.w	r3, #4294967295
   80a7a:	bf04      	itt	eq
   80a7c:	2300      	moveq	r3, #0
   80a7e:	6463      	streq	r3, [r4, #68]	; 0x44
   80a80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80a82:	f1b3 3fff 	cmp.w	r3, #4294967295
   80a86:	bf04      	itt	eq
   80a88:	2300      	moveq	r3, #0
   80a8a:	64a3      	streq	r3, [r4, #72]	; 0x48
   80a8c:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80a8e:	a802      	add	r0, sp, #8
   80a90:	f10d 0106 	add.w	r1, sp, #6
   80a94:	4b1c      	ldr	r3, [pc, #112]	; (80b08 <xQueueGenericSend+0x114>)
   80a96:	4798      	blx	r3
   80a98:	b9e8      	cbnz	r0, 80ad6 <xQueueGenericSend+0xe2>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80a9a:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   80a9c:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   80aa0:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   80aa4:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   80aa6:	45c1      	cmp	r9, r8
   80aa8:	d10f      	bne.n	80aca <xQueueGenericSend+0xd6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   80aaa:	f104 0010 	add.w	r0, r4, #16
   80aae:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   80ab2:	4b16      	ldr	r3, [pc, #88]	; (80b0c <xQueueGenericSend+0x118>)
   80ab4:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   80ab6:	4620      	mov	r0, r4
   80ab8:	4b15      	ldr	r3, [pc, #84]	; (80b10 <xQueueGenericSend+0x11c>)
   80aba:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   80abc:	4b15      	ldr	r3, [pc, #84]	; (80b14 <xQueueGenericSend+0x120>)
   80abe:	4798      	blx	r3
   80ac0:	2800      	cmp	r0, #0
   80ac2:	d1af      	bne.n	80a24 <xQueueGenericSend+0x30>
				{
					portYIELD_WITHIN_API();
   80ac4:	4b0d      	ldr	r3, [pc, #52]	; (80afc <xQueueGenericSend+0x108>)
   80ac6:	4798      	blx	r3
   80ac8:	e7ac      	b.n	80a24 <xQueueGenericSend+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80aca:	4620      	mov	r0, r4
   80acc:	4b10      	ldr	r3, [pc, #64]	; (80b10 <xQueueGenericSend+0x11c>)
   80ace:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80ad0:	4b10      	ldr	r3, [pc, #64]	; (80b14 <xQueueGenericSend+0x120>)
   80ad2:	4798      	blx	r3
   80ad4:	e7a6      	b.n	80a24 <xQueueGenericSend+0x30>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   80ad6:	4620      	mov	r0, r4
   80ad8:	4b0d      	ldr	r3, [pc, #52]	; (80b10 <xQueueGenericSend+0x11c>)
   80ada:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80adc:	4b0d      	ldr	r3, [pc, #52]	; (80b14 <xQueueGenericSend+0x120>)
   80ade:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   80ae0:	2000      	movs	r0, #0
		}
	}
}
   80ae2:	b005      	add	sp, #20
   80ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80ae8:	000805b5 	.word	0x000805b5
   80aec:	000805c5 	.word	0x000805c5
   80af0:	000805e5 	.word	0x000805e5
   80af4:	00080809 	.word	0x00080809
   80af8:	000814e5 	.word	0x000814e5
   80afc:	000805a5 	.word	0x000805a5
   80b00:	00081569 	.word	0x00081569
   80b04:	00081029 	.word	0x00081029
   80b08:	00081591 	.word	0x00081591
   80b0c:	00081439 	.word	0x00081439
   80b10:	00080895 	.word	0x00080895
   80b14:	00081185 	.word	0x00081185

00080b18 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   80b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80b1c:	460e      	mov	r6, r1
   80b1e:	4615      	mov	r5, r2
   80b20:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   80b22:	4604      	mov	r4, r0
   80b24:	b918      	cbnz	r0, 80b2e <xQueueGenericSendFromISR+0x16>
   80b26:	4b1c      	ldr	r3, [pc, #112]	; (80b98 <xQueueGenericSendFromISR+0x80>)
   80b28:	4798      	blx	r3
   80b2a:	bf00      	nop
   80b2c:	e7fd      	b.n	80b2a <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80b2e:	b929      	cbnz	r1, 80b3c <xQueueGenericSendFromISR+0x24>
   80b30:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80b32:	b11b      	cbz	r3, 80b3c <xQueueGenericSendFromISR+0x24>
   80b34:	4b18      	ldr	r3, [pc, #96]	; (80b98 <xQueueGenericSendFromISR+0x80>)
   80b36:	4798      	blx	r3
   80b38:	bf00      	nop
   80b3a:	e7fd      	b.n	80b38 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80b3c:	4b16      	ldr	r3, [pc, #88]	; (80b98 <xQueueGenericSendFromISR+0x80>)
   80b3e:	4798      	blx	r3
   80b40:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80b42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80b44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80b46:	429a      	cmp	r2, r3
   80b48:	d218      	bcs.n	80b7c <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80b4a:	4620      	mov	r0, r4
   80b4c:	4631      	mov	r1, r6
   80b4e:	4642      	mov	r2, r8
   80b50:	4b12      	ldr	r3, [pc, #72]	; (80b9c <xQueueGenericSendFromISR+0x84>)
   80b52:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   80b54:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80b56:	f1b3 3fff 	cmp.w	r3, #4294967295
   80b5a:	d10a      	bne.n	80b72 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80b5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80b5e:	b17b      	cbz	r3, 80b80 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80b60:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80b64:	4b0e      	ldr	r3, [pc, #56]	; (80ba0 <xQueueGenericSendFromISR+0x88>)
   80b66:	4798      	blx	r3
   80b68:	b160      	cbz	r0, 80b84 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   80b6a:	b16d      	cbz	r5, 80b88 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   80b6c:	2401      	movs	r4, #1
   80b6e:	602c      	str	r4, [r5, #0]
   80b70:	e00b      	b.n	80b8a <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   80b72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80b74:	3301      	adds	r3, #1
   80b76:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   80b78:	2401      	movs	r4, #1
   80b7a:	e006      	b.n	80b8a <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   80b7c:	2400      	movs	r4, #0
   80b7e:	e004      	b.n	80b8a <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   80b80:	2401      	movs	r4, #1
   80b82:	e002      	b.n	80b8a <xQueueGenericSendFromISR+0x72>
   80b84:	2401      	movs	r4, #1
   80b86:	e000      	b.n	80b8a <xQueueGenericSendFromISR+0x72>
   80b88:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80b8a:	4638      	mov	r0, r7
   80b8c:	4b05      	ldr	r3, [pc, #20]	; (80ba4 <xQueueGenericSendFromISR+0x8c>)
   80b8e:	4798      	blx	r3

	return xReturn;
}
   80b90:	4620      	mov	r0, r4
   80b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b96:	bf00      	nop
   80b98:	000805b5 	.word	0x000805b5
   80b9c:	00080809 	.word	0x00080809
   80ba0:	000814e5 	.word	0x000814e5
   80ba4:	000805dd 	.word	0x000805dd

00080ba8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   80ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80bac:	b085      	sub	sp, #20
   80bae:	4689      	mov	r9, r1
   80bb0:	469a      	mov	sl, r3
   80bb2:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   80bb6:	4604      	mov	r4, r0
   80bb8:	b918      	cbnz	r0, 80bc2 <xQueueGenericReceive+0x1a>
   80bba:	4b46      	ldr	r3, [pc, #280]	; (80cd4 <xQueueGenericReceive+0x12c>)
   80bbc:	4798      	blx	r3
   80bbe:	bf00      	nop
   80bc0:	e7fd      	b.n	80bbe <xQueueGenericReceive+0x16>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80bc2:	b909      	cbnz	r1, 80bc8 <xQueueGenericReceive+0x20>
   80bc4:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80bc6:	b92b      	cbnz	r3, 80bd4 <xQueueGenericReceive+0x2c>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   80bc8:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80bca:	4e43      	ldr	r6, [pc, #268]	; (80cd8 <xQueueGenericReceive+0x130>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80bcc:	f8df b138 	ldr.w	fp, [pc, #312]	; 80d08 <xQueueGenericReceive+0x160>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80bd0:	4d42      	ldr	r5, [pc, #264]	; (80cdc <xQueueGenericReceive+0x134>)
   80bd2:	e003      	b.n	80bdc <xQueueGenericReceive+0x34>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80bd4:	4b3f      	ldr	r3, [pc, #252]	; (80cd4 <xQueueGenericReceive+0x12c>)
   80bd6:	4798      	blx	r3
   80bd8:	bf00      	nop
   80bda:	e7fd      	b.n	80bd8 <xQueueGenericReceive+0x30>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80bdc:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   80bde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80be0:	2b00      	cmp	r3, #0
   80be2:	d028      	beq.n	80c36 <xQueueGenericReceive+0x8e>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   80be4:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80be6:	4620      	mov	r0, r4
   80be8:	4649      	mov	r1, r9
   80bea:	4b3d      	ldr	r3, [pc, #244]	; (80ce0 <xQueueGenericReceive+0x138>)
   80bec:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   80bee:	f1ba 0f00 	cmp.w	sl, #0
   80bf2:	d112      	bne.n	80c1a <xQueueGenericReceive+0x72>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   80bf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80bf6:	3b01      	subs	r3, #1
   80bf8:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80bfa:	6823      	ldr	r3, [r4, #0]
   80bfc:	b913      	cbnz	r3, 80c04 <xQueueGenericReceive+0x5c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80bfe:	4b39      	ldr	r3, [pc, #228]	; (80ce4 <xQueueGenericReceive+0x13c>)
   80c00:	4798      	blx	r3
   80c02:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80c04:	6923      	ldr	r3, [r4, #16]
   80c06:	b193      	cbz	r3, 80c2e <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80c08:	f104 0010 	add.w	r0, r4, #16
   80c0c:	4b36      	ldr	r3, [pc, #216]	; (80ce8 <xQueueGenericReceive+0x140>)
   80c0e:	4798      	blx	r3
   80c10:	2801      	cmp	r0, #1
   80c12:	d10c      	bne.n	80c2e <xQueueGenericReceive+0x86>
						{
							portYIELD_WITHIN_API();
   80c14:	4b35      	ldr	r3, [pc, #212]	; (80cec <xQueueGenericReceive+0x144>)
   80c16:	4798      	blx	r3
   80c18:	e009      	b.n	80c2e <xQueueGenericReceive+0x86>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   80c1a:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80c1e:	b133      	cbz	r3, 80c2e <xQueueGenericReceive+0x86>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80c20:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80c24:	4b30      	ldr	r3, [pc, #192]	; (80ce8 <xQueueGenericReceive+0x140>)
   80c26:	4798      	blx	r3
   80c28:	b108      	cbz	r0, 80c2e <xQueueGenericReceive+0x86>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   80c2a:	4b30      	ldr	r3, [pc, #192]	; (80cec <xQueueGenericReceive+0x144>)
   80c2c:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   80c2e:	4b2b      	ldr	r3, [pc, #172]	; (80cdc <xQueueGenericReceive+0x134>)
   80c30:	4798      	blx	r3
				return pdPASS;
   80c32:	2001      	movs	r0, #1
   80c34:	e04b      	b.n	80cce <xQueueGenericReceive+0x126>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80c36:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   80c3a:	b91b      	cbnz	r3, 80c44 <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80c3c:	4b27      	ldr	r3, [pc, #156]	; (80cdc <xQueueGenericReceive+0x134>)
   80c3e:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   80c40:	2000      	movs	r0, #0
   80c42:	e044      	b.n	80cce <xQueueGenericReceive+0x126>
				}
				else if( xEntryTimeSet == pdFALSE )
   80c44:	b917      	cbnz	r7, 80c4c <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80c46:	a802      	add	r0, sp, #8
   80c48:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   80c4a:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80c4c:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80c4e:	4b28      	ldr	r3, [pc, #160]	; (80cf0 <xQueueGenericReceive+0x148>)
   80c50:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80c52:	47b0      	blx	r6
   80c54:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80c56:	f1b3 3fff 	cmp.w	r3, #4294967295
   80c5a:	bf04      	itt	eq
   80c5c:	2300      	moveq	r3, #0
   80c5e:	6463      	streq	r3, [r4, #68]	; 0x44
   80c60:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80c62:	f1b3 3fff 	cmp.w	r3, #4294967295
   80c66:	bf04      	itt	eq
   80c68:	2300      	moveq	r3, #0
   80c6a:	64a3      	streq	r3, [r4, #72]	; 0x48
   80c6c:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80c6e:	a802      	add	r0, sp, #8
   80c70:	f10d 0106 	add.w	r1, sp, #6
   80c74:	4b1f      	ldr	r3, [pc, #124]	; (80cf4 <xQueueGenericReceive+0x14c>)
   80c76:	4798      	blx	r3
   80c78:	bb18      	cbnz	r0, 80cc2 <xQueueGenericReceive+0x11a>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80c7a:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   80c7c:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   80c80:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80c82:	f1b8 0f00 	cmp.w	r8, #0
   80c86:	d116      	bne.n	80cb6 <xQueueGenericReceive+0x10e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80c88:	6823      	ldr	r3, [r4, #0]
   80c8a:	b923      	cbnz	r3, 80c96 <xQueueGenericReceive+0xee>
					{
						portENTER_CRITICAL();
   80c8c:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   80c8e:	6860      	ldr	r0, [r4, #4]
   80c90:	4b19      	ldr	r3, [pc, #100]	; (80cf8 <xQueueGenericReceive+0x150>)
   80c92:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   80c94:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80c96:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80c9a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   80c9e:	4b17      	ldr	r3, [pc, #92]	; (80cfc <xQueueGenericReceive+0x154>)
   80ca0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80ca2:	4620      	mov	r0, r4
   80ca4:	4b16      	ldr	r3, [pc, #88]	; (80d00 <xQueueGenericReceive+0x158>)
   80ca6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80ca8:	4b16      	ldr	r3, [pc, #88]	; (80d04 <xQueueGenericReceive+0x15c>)
   80caa:	4798      	blx	r3
   80cac:	2800      	cmp	r0, #0
   80cae:	d195      	bne.n	80bdc <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
   80cb0:	4b0e      	ldr	r3, [pc, #56]	; (80cec <xQueueGenericReceive+0x144>)
   80cb2:	4798      	blx	r3
   80cb4:	e792      	b.n	80bdc <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80cb6:	4620      	mov	r0, r4
   80cb8:	4b11      	ldr	r3, [pc, #68]	; (80d00 <xQueueGenericReceive+0x158>)
   80cba:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80cbc:	4b11      	ldr	r3, [pc, #68]	; (80d04 <xQueueGenericReceive+0x15c>)
   80cbe:	4798      	blx	r3
   80cc0:	e78c      	b.n	80bdc <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   80cc2:	4620      	mov	r0, r4
   80cc4:	4b0e      	ldr	r3, [pc, #56]	; (80d00 <xQueueGenericReceive+0x158>)
   80cc6:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80cc8:	4b0e      	ldr	r3, [pc, #56]	; (80d04 <xQueueGenericReceive+0x15c>)
   80cca:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   80ccc:	2000      	movs	r0, #0
		}
	}
}
   80cce:	b005      	add	sp, #20
   80cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80cd4:	000805b5 	.word	0x000805b5
   80cd8:	000805c5 	.word	0x000805c5
   80cdc:	000805e5 	.word	0x000805e5
   80ce0:	0008086d 	.word	0x0008086d
   80ce4:	00081629 	.word	0x00081629
   80ce8:	000814e5 	.word	0x000814e5
   80cec:	000805a5 	.word	0x000805a5
   80cf0:	00081029 	.word	0x00081029
   80cf4:	00081591 	.word	0x00081591
   80cf8:	00081655 	.word	0x00081655
   80cfc:	00081439 	.word	0x00081439
   80d00:	00080895 	.word	0x00080895
   80d04:	00081185 	.word	0x00081185
   80d08:	00081569 	.word	0x00081569

00080d0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   80d0c:	b538      	push	{r3, r4, r5, lr}
   80d0e:	4604      	mov	r4, r0
   80d10:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80d12:	4b0d      	ldr	r3, [pc, #52]	; (80d48 <vQueueWaitForMessageRestricted+0x3c>)
   80d14:	4798      	blx	r3
   80d16:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80d18:	f1b3 3fff 	cmp.w	r3, #4294967295
   80d1c:	bf04      	itt	eq
   80d1e:	2300      	moveq	r3, #0
   80d20:	6463      	streq	r3, [r4, #68]	; 0x44
   80d22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80d24:	f1b3 3fff 	cmp.w	r3, #4294967295
   80d28:	bf04      	itt	eq
   80d2a:	2300      	moveq	r3, #0
   80d2c:	64a3      	streq	r3, [r4, #72]	; 0x48
   80d2e:	4b07      	ldr	r3, [pc, #28]	; (80d4c <vQueueWaitForMessageRestricted+0x40>)
   80d30:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   80d32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80d34:	b923      	cbnz	r3, 80d40 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80d36:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80d3a:	4629      	mov	r1, r5
   80d3c:	4b04      	ldr	r3, [pc, #16]	; (80d50 <vQueueWaitForMessageRestricted+0x44>)
   80d3e:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   80d40:	4620      	mov	r0, r4
   80d42:	4b04      	ldr	r3, [pc, #16]	; (80d54 <vQueueWaitForMessageRestricted+0x48>)
   80d44:	4798      	blx	r3
   80d46:	bd38      	pop	{r3, r4, r5, pc}
   80d48:	000805c5 	.word	0x000805c5
   80d4c:	000805e5 	.word	0x000805e5
   80d50:	0008149d 	.word	0x0008149d
   80d54:	00080895 	.word	0x00080895

00080d58 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   80d58:	b510      	push	{r4, lr}
   80d5a:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   80d5c:	4b0f      	ldr	r3, [pc, #60]	; (80d9c <prvAddCurrentTaskToDelayedList+0x44>)
   80d5e:	681b      	ldr	r3, [r3, #0]
   80d60:	8098      	strh	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   80d62:	4b0f      	ldr	r3, [pc, #60]	; (80da0 <prvAddCurrentTaskToDelayedList+0x48>)
   80d64:	881b      	ldrh	r3, [r3, #0]
   80d66:	b29b      	uxth	r3, r3
   80d68:	4298      	cmp	r0, r3
   80d6a:	d207      	bcs.n	80d7c <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80d6c:	4b0d      	ldr	r3, [pc, #52]	; (80da4 <prvAddCurrentTaskToDelayedList+0x4c>)
   80d6e:	6818      	ldr	r0, [r3, #0]
   80d70:	4b0a      	ldr	r3, [pc, #40]	; (80d9c <prvAddCurrentTaskToDelayedList+0x44>)
   80d72:	6819      	ldr	r1, [r3, #0]
   80d74:	3104      	adds	r1, #4
   80d76:	4b0c      	ldr	r3, [pc, #48]	; (80da8 <prvAddCurrentTaskToDelayedList+0x50>)
   80d78:	4798      	blx	r3
   80d7a:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80d7c:	4b0b      	ldr	r3, [pc, #44]	; (80dac <prvAddCurrentTaskToDelayedList+0x54>)
   80d7e:	6818      	ldr	r0, [r3, #0]
   80d80:	4b06      	ldr	r3, [pc, #24]	; (80d9c <prvAddCurrentTaskToDelayedList+0x44>)
   80d82:	6819      	ldr	r1, [r3, #0]
   80d84:	3104      	adds	r1, #4
   80d86:	4b08      	ldr	r3, [pc, #32]	; (80da8 <prvAddCurrentTaskToDelayedList+0x50>)
   80d88:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   80d8a:	4b09      	ldr	r3, [pc, #36]	; (80db0 <prvAddCurrentTaskToDelayedList+0x58>)
   80d8c:	881b      	ldrh	r3, [r3, #0]
   80d8e:	b29b      	uxth	r3, r3
   80d90:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   80d92:	bf3c      	itt	cc
   80d94:	4b06      	ldrcc	r3, [pc, #24]	; (80db0 <prvAddCurrentTaskToDelayedList+0x58>)
   80d96:	801c      	strhcc	r4, [r3, #0]
   80d98:	bd10      	pop	{r4, pc}
   80d9a:	bf00      	nop
   80d9c:	20078b78 	.word	0x20078b78
   80da0:	20078b94 	.word	0x20078b94
   80da4:	20078b98 	.word	0x20078b98
   80da8:	000804e9 	.word	0x000804e9
   80dac:	20078a74 	.word	0x20078a74
   80db0:	20070134 	.word	0x20070134

00080db4 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   80db4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80db8:	460e      	mov	r6, r1
   80dba:	4617      	mov	r7, r2
   80dbc:	469a      	mov	sl, r3
   80dbe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   80dc0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   80dc4:	4681      	mov	r9, r0
   80dc6:	b918      	cbnz	r0, 80dd0 <xTaskGenericCreate+0x1c>
   80dc8:	4b62      	ldr	r3, [pc, #392]	; (80f54 <xTaskGenericCreate+0x1a0>)
   80dca:	4798      	blx	r3
   80dcc:	bf00      	nop
   80dce:	e7fd      	b.n	80dcc <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   80dd0:	2d09      	cmp	r5, #9
   80dd2:	d903      	bls.n	80ddc <xTaskGenericCreate+0x28>
   80dd4:	4b5f      	ldr	r3, [pc, #380]	; (80f54 <xTaskGenericCreate+0x1a0>)
   80dd6:	4798      	blx	r3
   80dd8:	bf00      	nop
   80dda:	e7fd      	b.n	80dd8 <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   80ddc:	2050      	movs	r0, #80	; 0x50
   80dde:	4b5e      	ldr	r3, [pc, #376]	; (80f58 <xTaskGenericCreate+0x1a4>)
   80de0:	4798      	blx	r3

	if( pxNewTCB != NULL )
   80de2:	4604      	mov	r4, r0
   80de4:	2800      	cmp	r0, #0
   80de6:	f000 80b1 	beq.w	80f4c <xTaskGenericCreate+0x198>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80dea:	f1b8 0f00 	cmp.w	r8, #0
   80dee:	f040 80a9 	bne.w	80f44 <xTaskGenericCreate+0x190>
   80df2:	00b8      	lsls	r0, r7, #2
   80df4:	4b58      	ldr	r3, [pc, #352]	; (80f58 <xTaskGenericCreate+0x1a4>)
   80df6:	4798      	blx	r3
   80df8:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   80dfa:	b918      	cbnz	r0, 80e04 <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   80dfc:	4620      	mov	r0, r4
   80dfe:	4b57      	ldr	r3, [pc, #348]	; (80f5c <xTaskGenericCreate+0x1a8>)
   80e00:	4798      	blx	r3
   80e02:	e0a3      	b.n	80f4c <xTaskGenericCreate+0x198>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   80e04:	21a5      	movs	r1, #165	; 0xa5
   80e06:	00ba      	lsls	r2, r7, #2
   80e08:	4b55      	ldr	r3, [pc, #340]	; (80f60 <xTaskGenericCreate+0x1ac>)
   80e0a:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   80e0c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   80e10:	3f01      	subs	r7, #1
   80e12:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80e14:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   80e18:	f023 0b07 	bic.w	fp, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   80e1c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   80e20:	4631      	mov	r1, r6
   80e22:	2210      	movs	r2, #16
   80e24:	4b4f      	ldr	r3, [pc, #316]	; (80f64 <xTaskGenericCreate+0x1b0>)
   80e26:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   80e28:	2300      	movs	r3, #0
   80e2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   80e2e:	2d09      	cmp	r5, #9
   80e30:	bf34      	ite	cc
   80e32:	462e      	movcc	r6, r5
   80e34:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   80e36:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   80e38:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   80e3a:	1d27      	adds	r7, r4, #4
   80e3c:	4638      	mov	r0, r7
   80e3e:	f8df 8170 	ldr.w	r8, [pc, #368]	; 80fb0 <xTaskGenericCreate+0x1fc>
   80e42:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   80e44:	f104 0018 	add.w	r0, r4, #24
   80e48:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   80e4a:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   80e4c:	f1c6 060a 	rsb	r6, r6, #10
   80e50:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   80e52:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   80e54:	4658      	mov	r0, fp
   80e56:	4649      	mov	r1, r9
   80e58:	4652      	mov	r2, sl
   80e5a:	4b43      	ldr	r3, [pc, #268]	; (80f68 <xTaskGenericCreate+0x1b4>)
   80e5c:	4798      	blx	r3
   80e5e:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80e60:	f010 0f07 	tst.w	r0, #7
   80e64:	d003      	beq.n	80e6e <xTaskGenericCreate+0xba>
   80e66:	4b3b      	ldr	r3, [pc, #236]	; (80f54 <xTaskGenericCreate+0x1a0>)
   80e68:	4798      	blx	r3
   80e6a:	bf00      	nop
   80e6c:	e7fd      	b.n	80e6a <xTaskGenericCreate+0xb6>

		if( ( void * ) pxCreatedTask != NULL )
   80e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80e70:	b103      	cbz	r3, 80e74 <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   80e72:	601c      	str	r4, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   80e74:	4b3d      	ldr	r3, [pc, #244]	; (80f6c <xTaskGenericCreate+0x1b8>)
   80e76:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   80e78:	4b3d      	ldr	r3, [pc, #244]	; (80f70 <xTaskGenericCreate+0x1bc>)
   80e7a:	681a      	ldr	r2, [r3, #0]
   80e7c:	3201      	adds	r2, #1
   80e7e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   80e80:	4b3c      	ldr	r3, [pc, #240]	; (80f74 <xTaskGenericCreate+0x1c0>)
   80e82:	681b      	ldr	r3, [r3, #0]
   80e84:	bb2b      	cbnz	r3, 80ed2 <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   80e86:	4b3b      	ldr	r3, [pc, #236]	; (80f74 <xTaskGenericCreate+0x1c0>)
   80e88:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   80e8a:	4b39      	ldr	r3, [pc, #228]	; (80f70 <xTaskGenericCreate+0x1bc>)
   80e8c:	681b      	ldr	r3, [r3, #0]
   80e8e:	2b01      	cmp	r3, #1
   80e90:	d129      	bne.n	80ee6 <xTaskGenericCreate+0x132>
   80e92:	4e39      	ldr	r6, [pc, #228]	; (80f78 <xTaskGenericCreate+0x1c4>)
   80e94:	f106 09c8 	add.w	r9, r6, #200	; 0xc8
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   80e98:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80f7c <xTaskGenericCreate+0x1c8>
   80e9c:	4630      	mov	r0, r6
   80e9e:	47c0      	blx	r8
   80ea0:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   80ea2:	454e      	cmp	r6, r9
   80ea4:	d1fa      	bne.n	80e9c <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   80ea6:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80fb4 <xTaskGenericCreate+0x200>
   80eaa:	4648      	mov	r0, r9
   80eac:	4e33      	ldr	r6, [pc, #204]	; (80f7c <xTaskGenericCreate+0x1c8>)
   80eae:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   80eb0:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80fb8 <xTaskGenericCreate+0x204>
   80eb4:	4640      	mov	r0, r8
   80eb6:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   80eb8:	4831      	ldr	r0, [pc, #196]	; (80f80 <xTaskGenericCreate+0x1cc>)
   80eba:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   80ebc:	4831      	ldr	r0, [pc, #196]	; (80f84 <xTaskGenericCreate+0x1d0>)
   80ebe:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   80ec0:	4831      	ldr	r0, [pc, #196]	; (80f88 <xTaskGenericCreate+0x1d4>)
   80ec2:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   80ec4:	4b31      	ldr	r3, [pc, #196]	; (80f8c <xTaskGenericCreate+0x1d8>)
   80ec6:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   80eca:	4b31      	ldr	r3, [pc, #196]	; (80f90 <xTaskGenericCreate+0x1dc>)
   80ecc:	f8c3 8000 	str.w	r8, [r3]
   80ed0:	e009      	b.n	80ee6 <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   80ed2:	4b30      	ldr	r3, [pc, #192]	; (80f94 <xTaskGenericCreate+0x1e0>)
   80ed4:	681b      	ldr	r3, [r3, #0]
   80ed6:	b933      	cbnz	r3, 80ee6 <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   80ed8:	4b26      	ldr	r3, [pc, #152]	; (80f74 <xTaskGenericCreate+0x1c0>)
   80eda:	681b      	ldr	r3, [r3, #0]
   80edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80ede:	429d      	cmp	r5, r3
					{
						pxCurrentTCB = pxNewTCB;
   80ee0:	bf24      	itt	cs
   80ee2:	4b24      	ldrcs	r3, [pc, #144]	; (80f74 <xTaskGenericCreate+0x1c0>)
   80ee4:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   80ee6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   80ee8:	4a2b      	ldr	r2, [pc, #172]	; (80f98 <xTaskGenericCreate+0x1e4>)
   80eea:	6812      	ldr	r2, [r2, #0]
   80eec:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   80eee:	bf84      	itt	hi
   80ef0:	4a29      	ldrhi	r2, [pc, #164]	; (80f98 <xTaskGenericCreate+0x1e4>)
   80ef2:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   80ef4:	4a29      	ldr	r2, [pc, #164]	; (80f9c <xTaskGenericCreate+0x1e8>)
   80ef6:	6811      	ldr	r1, [r2, #0]
   80ef8:	6461      	str	r1, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   80efa:	3101      	adds	r1, #1
   80efc:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   80efe:	4a28      	ldr	r2, [pc, #160]	; (80fa0 <xTaskGenericCreate+0x1ec>)
   80f00:	6812      	ldr	r2, [r2, #0]
   80f02:	4293      	cmp	r3, r2
   80f04:	bf84      	itt	hi
   80f06:	4a26      	ldrhi	r2, [pc, #152]	; (80fa0 <xTaskGenericCreate+0x1ec>)
   80f08:	6013      	strhi	r3, [r2, #0]
   80f0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80f0e:	481a      	ldr	r0, [pc, #104]	; (80f78 <xTaskGenericCreate+0x1c4>)
   80f10:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   80f14:	4639      	mov	r1, r7
   80f16:	4b23      	ldr	r3, [pc, #140]	; (80fa4 <xTaskGenericCreate+0x1f0>)
   80f18:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   80f1a:	4b23      	ldr	r3, [pc, #140]	; (80fa8 <xTaskGenericCreate+0x1f4>)
   80f1c:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   80f1e:	4b1d      	ldr	r3, [pc, #116]	; (80f94 <xTaskGenericCreate+0x1e0>)
   80f20:	681b      	ldr	r3, [r3, #0]
   80f22:	b14b      	cbz	r3, 80f38 <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   80f24:	4b13      	ldr	r3, [pc, #76]	; (80f74 <xTaskGenericCreate+0x1c0>)
   80f26:	681b      	ldr	r3, [r3, #0]
   80f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80f2a:	429d      	cmp	r5, r3
   80f2c:	d907      	bls.n	80f3e <xTaskGenericCreate+0x18a>
			{
				portYIELD_WITHIN_API();
   80f2e:	4b1f      	ldr	r3, [pc, #124]	; (80fac <xTaskGenericCreate+0x1f8>)
   80f30:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   80f32:	2001      	movs	r0, #1
   80f34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80f38:	2001      	movs	r0, #1
   80f3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80f3e:	2001      	movs	r0, #1
   80f40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80f44:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
   80f48:	4640      	mov	r0, r8
   80f4a:	e75b      	b.n	80e04 <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   80f4c:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   80f50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80f54:	000805b5 	.word	0x000805b5
   80f58:	00080711 	.word	0x00080711
   80f5c:	000807d5 	.word	0x000807d5
   80f60:	00082a81 	.word	0x00082a81
   80f64:	00082cd1 	.word	0x00082cd1
   80f68:	00080569 	.word	0x00080569
   80f6c:	000805c5 	.word	0x000805c5
   80f70:	20078bb8 	.word	0x20078bb8
   80f74:	20078b78 	.word	0x20078b78
   80f78:	20078aac 	.word	0x20078aac
   80f7c:	000804ad 	.word	0x000804ad
   80f80:	20078b7c 	.word	0x20078b7c
   80f84:	20078a80 	.word	0x20078a80
   80f88:	20078a60 	.word	0x20078a60
   80f8c:	20078a74 	.word	0x20078a74
   80f90:	20078b98 	.word	0x20078b98
   80f94:	20078a78 	.word	0x20078a78
   80f98:	20078bbc 	.word	0x20078bbc
   80f9c:	20078b9c 	.word	0x20078b9c
   80fa0:	20078aa8 	.word	0x20078aa8
   80fa4:	000804cd 	.word	0x000804cd
   80fa8:	000805e5 	.word	0x000805e5
   80fac:	000805a5 	.word	0x000805a5
   80fb0:	000804c5 	.word	0x000804c5
   80fb4:	20078ba0 	.word	0x20078ba0
   80fb8:	20078a94 	.word	0x20078a94

00080fbc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   80fbc:	b510      	push	{r4, lr}
   80fbe:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   80fc0:	2300      	movs	r3, #0
   80fc2:	9300      	str	r3, [sp, #0]
   80fc4:	9301      	str	r3, [sp, #4]
   80fc6:	9302      	str	r3, [sp, #8]
   80fc8:	9303      	str	r3, [sp, #12]
   80fca:	480f      	ldr	r0, [pc, #60]	; (81008 <vTaskStartScheduler+0x4c>)
   80fcc:	490f      	ldr	r1, [pc, #60]	; (8100c <vTaskStartScheduler+0x50>)
   80fce:	f44f 7280 	mov.w	r2, #256	; 0x100
   80fd2:	4c0f      	ldr	r4, [pc, #60]	; (81010 <vTaskStartScheduler+0x54>)
   80fd4:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   80fd6:	2801      	cmp	r0, #1
   80fd8:	d10e      	bne.n	80ff8 <vTaskStartScheduler+0x3c>
		{
			xReturn = xTimerCreateTimerTask();
   80fda:	4b0e      	ldr	r3, [pc, #56]	; (81014 <vTaskStartScheduler+0x58>)
   80fdc:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   80fde:	2801      	cmp	r0, #1
   80fe0:	d10a      	bne.n	80ff8 <vTaskStartScheduler+0x3c>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   80fe2:	4b0d      	ldr	r3, [pc, #52]	; (81018 <vTaskStartScheduler+0x5c>)
   80fe4:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   80fe6:	2201      	movs	r2, #1
   80fe8:	4b0c      	ldr	r3, [pc, #48]	; (8101c <vTaskStartScheduler+0x60>)
   80fea:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   80fec:	2200      	movs	r2, #0
   80fee:	4b0c      	ldr	r3, [pc, #48]	; (81020 <vTaskStartScheduler+0x64>)
   80ff0:	801a      	strh	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   80ff2:	4b0c      	ldr	r3, [pc, #48]	; (81024 <vTaskStartScheduler+0x68>)
   80ff4:	4798      	blx	r3
   80ff6:	e004      	b.n	81002 <vTaskStartScheduler+0x46>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   80ff8:	b918      	cbnz	r0, 81002 <vTaskStartScheduler+0x46>
   80ffa:	4b07      	ldr	r3, [pc, #28]	; (81018 <vTaskStartScheduler+0x5c>)
   80ffc:	4798      	blx	r3
   80ffe:	bf00      	nop
   81000:	e7fd      	b.n	80ffe <vTaskStartScheduler+0x42>
}
   81002:	b004      	add	sp, #16
   81004:	bd10      	pop	{r4, pc}
   81006:	bf00      	nop
   81008:	00081325 	.word	0x00081325
   8100c:	00088ee0 	.word	0x00088ee0
   81010:	00080db5 	.word	0x00080db5
   81014:	000817cd 	.word	0x000817cd
   81018:	000805b5 	.word	0x000805b5
   8101c:	20078a78 	.word	0x20078a78
   81020:	20078b94 	.word	0x20078b94
   81024:	00080681 	.word	0x00080681

00081028 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   81028:	4b02      	ldr	r3, [pc, #8]	; (81034 <vTaskSuspendAll+0xc>)
   8102a:	681a      	ldr	r2, [r3, #0]
   8102c:	3201      	adds	r2, #1
   8102e:	601a      	str	r2, [r3, #0]
   81030:	4770      	bx	lr
   81032:	bf00      	nop
   81034:	20078b74 	.word	0x20078b74

00081038 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   81038:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   8103a:	4b04      	ldr	r3, [pc, #16]	; (8104c <xTaskGetTickCount+0x14>)
   8103c:	4798      	blx	r3
	{
		xTicks = xTickCount;
   8103e:	4b04      	ldr	r3, [pc, #16]	; (81050 <xTaskGetTickCount+0x18>)
   81040:	881c      	ldrh	r4, [r3, #0]
   81042:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   81044:	4b03      	ldr	r3, [pc, #12]	; (81054 <xTaskGetTickCount+0x1c>)
   81046:	4798      	blx	r3

	return xTicks;
}
   81048:	4620      	mov	r0, r4
   8104a:	bd10      	pop	{r4, pc}
   8104c:	000805c5 	.word	0x000805c5
   81050:	20078b94 	.word	0x20078b94
   81054:	000805e5 	.word	0x000805e5

00081058 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8105c:	4b3d      	ldr	r3, [pc, #244]	; (81154 <vTaskIncrementTick+0xfc>)
   8105e:	681b      	ldr	r3, [r3, #0]
   81060:	2b00      	cmp	r3, #0
   81062:	d171      	bne.n	81148 <vTaskIncrementTick+0xf0>
	{
		++xTickCount;
   81064:	4b3c      	ldr	r3, [pc, #240]	; (81158 <vTaskIncrementTick+0x100>)
   81066:	881a      	ldrh	r2, [r3, #0]
   81068:	3201      	adds	r2, #1
   8106a:	b292      	uxth	r2, r2
   8106c:	801a      	strh	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   8106e:	881b      	ldrh	r3, [r3, #0]
   81070:	b29b      	uxth	r3, r3
   81072:	bb03      	cbnz	r3, 810b6 <vTaskIncrementTick+0x5e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81074:	4b39      	ldr	r3, [pc, #228]	; (8115c <vTaskIncrementTick+0x104>)
   81076:	681b      	ldr	r3, [r3, #0]
   81078:	681b      	ldr	r3, [r3, #0]
   8107a:	b11b      	cbz	r3, 81084 <vTaskIncrementTick+0x2c>
   8107c:	4b38      	ldr	r3, [pc, #224]	; (81160 <vTaskIncrementTick+0x108>)
   8107e:	4798      	blx	r3
   81080:	bf00      	nop
   81082:	e7fd      	b.n	81080 <vTaskIncrementTick+0x28>

			pxTemp = pxDelayedTaskList;
   81084:	4b35      	ldr	r3, [pc, #212]	; (8115c <vTaskIncrementTick+0x104>)
   81086:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81088:	4a36      	ldr	r2, [pc, #216]	; (81164 <vTaskIncrementTick+0x10c>)
   8108a:	6810      	ldr	r0, [r2, #0]
   8108c:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   8108e:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81090:	4a35      	ldr	r2, [pc, #212]	; (81168 <vTaskIncrementTick+0x110>)
   81092:	6811      	ldr	r1, [r2, #0]
   81094:	3101      	adds	r1, #1
   81096:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81098:	681b      	ldr	r3, [r3, #0]
   8109a:	681b      	ldr	r3, [r3, #0]
   8109c:	b923      	cbnz	r3, 810a8 <vTaskIncrementTick+0x50>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   8109e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   810a2:	4b32      	ldr	r3, [pc, #200]	; (8116c <vTaskIncrementTick+0x114>)
   810a4:	801a      	strh	r2, [r3, #0]
   810a6:	e006      	b.n	810b6 <vTaskIncrementTick+0x5e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   810a8:	4b2c      	ldr	r3, [pc, #176]	; (8115c <vTaskIncrementTick+0x104>)
   810aa:	681b      	ldr	r3, [r3, #0]
   810ac:	68db      	ldr	r3, [r3, #12]
   810ae:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   810b0:	889a      	ldrh	r2, [r3, #4]
   810b2:	4b2e      	ldr	r3, [pc, #184]	; (8116c <vTaskIncrementTick+0x114>)
   810b4:	801a      	strh	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   810b6:	4b28      	ldr	r3, [pc, #160]	; (81158 <vTaskIncrementTick+0x100>)
   810b8:	881a      	ldrh	r2, [r3, #0]
   810ba:	b292      	uxth	r2, r2
   810bc:	4b2b      	ldr	r3, [pc, #172]	; (8116c <vTaskIncrementTick+0x114>)
   810be:	881b      	ldrh	r3, [r3, #0]
   810c0:	b29b      	uxth	r3, r3
   810c2:	429a      	cmp	r2, r3
   810c4:	d344      	bcc.n	81150 <vTaskIncrementTick+0xf8>
   810c6:	4b25      	ldr	r3, [pc, #148]	; (8115c <vTaskIncrementTick+0x104>)
   810c8:	681b      	ldr	r3, [r3, #0]
   810ca:	681b      	ldr	r3, [r3, #0]
   810cc:	b153      	cbz	r3, 810e4 <vTaskIncrementTick+0x8c>
   810ce:	4b23      	ldr	r3, [pc, #140]	; (8115c <vTaskIncrementTick+0x104>)
   810d0:	681b      	ldr	r3, [r3, #0]
   810d2:	68db      	ldr	r3, [r3, #12]
   810d4:	68dc      	ldr	r4, [r3, #12]
   810d6:	88a3      	ldrh	r3, [r4, #4]
   810d8:	4a1f      	ldr	r2, [pc, #124]	; (81158 <vTaskIncrementTick+0x100>)
   810da:	8812      	ldrh	r2, [r2, #0]
   810dc:	b292      	uxth	r2, r2
   810de:	4293      	cmp	r3, r2
   810e0:	d914      	bls.n	8110c <vTaskIncrementTick+0xb4>
   810e2:	e00f      	b.n	81104 <vTaskIncrementTick+0xac>
   810e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   810e8:	4b20      	ldr	r3, [pc, #128]	; (8116c <vTaskIncrementTick+0x114>)
   810ea:	801a      	strh	r2, [r3, #0]
   810ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   810f0:	4b1a      	ldr	r3, [pc, #104]	; (8115c <vTaskIncrementTick+0x104>)
   810f2:	681b      	ldr	r3, [r3, #0]
   810f4:	68db      	ldr	r3, [r3, #12]
   810f6:	68dc      	ldr	r4, [r3, #12]
   810f8:	88a3      	ldrh	r3, [r4, #4]
   810fa:	4a17      	ldr	r2, [pc, #92]	; (81158 <vTaskIncrementTick+0x100>)
   810fc:	8812      	ldrh	r2, [r2, #0]
   810fe:	b292      	uxth	r2, r2
   81100:	4293      	cmp	r3, r2
   81102:	d907      	bls.n	81114 <vTaskIncrementTick+0xbc>
   81104:	4a19      	ldr	r2, [pc, #100]	; (8116c <vTaskIncrementTick+0x114>)
   81106:	8013      	strh	r3, [r2, #0]
   81108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8110c:	4e18      	ldr	r6, [pc, #96]	; (81170 <vTaskIncrementTick+0x118>)
   8110e:	4f19      	ldr	r7, [pc, #100]	; (81174 <vTaskIncrementTick+0x11c>)
   81110:	f8df 806c 	ldr.w	r8, [pc, #108]	; 81180 <vTaskIncrementTick+0x128>
   81114:	1d25      	adds	r5, r4, #4
   81116:	4628      	mov	r0, r5
   81118:	47b0      	blx	r6
   8111a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   8111c:	b113      	cbz	r3, 81124 <vTaskIncrementTick+0xcc>
   8111e:	f104 0018 	add.w	r0, r4, #24
   81122:	47b0      	blx	r6
   81124:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81126:	683a      	ldr	r2, [r7, #0]
   81128:	4293      	cmp	r3, r2
   8112a:	bf88      	it	hi
   8112c:	603b      	strhi	r3, [r7, #0]
   8112e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   81132:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   81136:	4629      	mov	r1, r5
   81138:	4b0f      	ldr	r3, [pc, #60]	; (81178 <vTaskIncrementTick+0x120>)
   8113a:	4798      	blx	r3
   8113c:	4b07      	ldr	r3, [pc, #28]	; (8115c <vTaskIncrementTick+0x104>)
   8113e:	681b      	ldr	r3, [r3, #0]
   81140:	681b      	ldr	r3, [r3, #0]
   81142:	2b00      	cmp	r3, #0
   81144:	d1d4      	bne.n	810f0 <vTaskIncrementTick+0x98>
   81146:	e7cd      	b.n	810e4 <vTaskIncrementTick+0x8c>
	}
	else
	{
		++uxMissedTicks;
   81148:	4b0c      	ldr	r3, [pc, #48]	; (8117c <vTaskIncrementTick+0x124>)
   8114a:	681a      	ldr	r2, [r3, #0]
   8114c:	3201      	adds	r2, #1
   8114e:	601a      	str	r2, [r3, #0]
   81150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81154:	20078b74 	.word	0x20078b74
   81158:	20078b94 	.word	0x20078b94
   8115c:	20078a74 	.word	0x20078a74
   81160:	000805b5 	.word	0x000805b5
   81164:	20078b98 	.word	0x20078b98
   81168:	20078b90 	.word	0x20078b90
   8116c:	20070134 	.word	0x20070134
   81170:	0008052d 	.word	0x0008052d
   81174:	20078aa8 	.word	0x20078aa8
   81178:	000804cd 	.word	0x000804cd
   8117c:	20078a5c 	.word	0x20078a5c
   81180:	20078aac 	.word	0x20078aac

00081184 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   81184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   81188:	4b31      	ldr	r3, [pc, #196]	; (81250 <xTaskResumeAll+0xcc>)
   8118a:	681b      	ldr	r3, [r3, #0]
   8118c:	b91b      	cbnz	r3, 81196 <xTaskResumeAll+0x12>
   8118e:	4b31      	ldr	r3, [pc, #196]	; (81254 <xTaskResumeAll+0xd0>)
   81190:	4798      	blx	r3
   81192:	bf00      	nop
   81194:	e7fd      	b.n	81192 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   81196:	4b30      	ldr	r3, [pc, #192]	; (81258 <xTaskResumeAll+0xd4>)
   81198:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   8119a:	4b2d      	ldr	r3, [pc, #180]	; (81250 <xTaskResumeAll+0xcc>)
   8119c:	681a      	ldr	r2, [r3, #0]
   8119e:	3a01      	subs	r2, #1
   811a0:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   811a2:	681b      	ldr	r3, [r3, #0]
   811a4:	2b00      	cmp	r3, #0
   811a6:	d148      	bne.n	8123a <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   811a8:	4b2c      	ldr	r3, [pc, #176]	; (8125c <xTaskResumeAll+0xd8>)
   811aa:	681b      	ldr	r3, [r3, #0]
   811ac:	2b00      	cmp	r3, #0
   811ae:	d046      	beq.n	8123e <xTaskResumeAll+0xba>
   811b0:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   811b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 81288 <xTaskResumeAll+0x104>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   811b6:	4f2a      	ldr	r7, [pc, #168]	; (81260 <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   811b8:	4e2a      	ldr	r6, [pc, #168]	; (81264 <xTaskResumeAll+0xe0>)
   811ba:	e01d      	b.n	811f8 <xTaskResumeAll+0x74>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   811bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
   811c0:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   811c2:	f104 0018 	add.w	r0, r4, #24
   811c6:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   811c8:	f104 0904 	add.w	r9, r4, #4
   811cc:	4648      	mov	r0, r9
   811ce:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   811d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   811d2:	6832      	ldr	r2, [r6, #0]
   811d4:	4293      	cmp	r3, r2
   811d6:	bf88      	it	hi
   811d8:	6033      	strhi	r3, [r6, #0]
   811da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   811de:	4822      	ldr	r0, [pc, #136]	; (81268 <xTaskResumeAll+0xe4>)
   811e0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   811e4:	4649      	mov	r1, r9
   811e6:	4b21      	ldr	r3, [pc, #132]	; (8126c <xTaskResumeAll+0xe8>)
   811e8:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   811ea:	4b21      	ldr	r3, [pc, #132]	; (81270 <xTaskResumeAll+0xec>)
   811ec:	681b      	ldr	r3, [r3, #0]
   811ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   811f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   811f2:	429a      	cmp	r2, r3
   811f4:	bf28      	it	cs
   811f6:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   811f8:	f8d8 3000 	ldr.w	r3, [r8]
   811fc:	2b00      	cmp	r3, #0
   811fe:	d1dd      	bne.n	811bc <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81200:	4b1c      	ldr	r3, [pc, #112]	; (81274 <xTaskResumeAll+0xf0>)
   81202:	681b      	ldr	r3, [r3, #0]
   81204:	b163      	cbz	r3, 81220 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81206:	4b1b      	ldr	r3, [pc, #108]	; (81274 <xTaskResumeAll+0xf0>)
   81208:	681b      	ldr	r3, [r3, #0]
   8120a:	b17b      	cbz	r3, 8122c <xTaskResumeAll+0xa8>
					{
						vTaskIncrementTick();
   8120c:	4d1a      	ldr	r5, [pc, #104]	; (81278 <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
   8120e:	4c19      	ldr	r4, [pc, #100]	; (81274 <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   81210:	47a8      	blx	r5
						--uxMissedTicks;
   81212:	6823      	ldr	r3, [r4, #0]
   81214:	3b01      	subs	r3, #1
   81216:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81218:	6823      	ldr	r3, [r4, #0]
   8121a:	2b00      	cmp	r3, #0
   8121c:	d1f8      	bne.n	81210 <xTaskResumeAll+0x8c>
   8121e:	e005      	b.n	8122c <xTaskResumeAll+0xa8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81220:	2d01      	cmp	r5, #1
   81222:	d003      	beq.n	8122c <xTaskResumeAll+0xa8>
   81224:	4b15      	ldr	r3, [pc, #84]	; (8127c <xTaskResumeAll+0xf8>)
   81226:	681b      	ldr	r3, [r3, #0]
   81228:	2b01      	cmp	r3, #1
   8122a:	d10a      	bne.n	81242 <xTaskResumeAll+0xbe>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   8122c:	2200      	movs	r2, #0
   8122e:	4b13      	ldr	r3, [pc, #76]	; (8127c <xTaskResumeAll+0xf8>)
   81230:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   81232:	4b13      	ldr	r3, [pc, #76]	; (81280 <xTaskResumeAll+0xfc>)
   81234:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   81236:	2401      	movs	r4, #1
   81238:	e004      	b.n	81244 <xTaskResumeAll+0xc0>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8123a:	2400      	movs	r4, #0
   8123c:	e002      	b.n	81244 <xTaskResumeAll+0xc0>
   8123e:	2400      	movs	r4, #0
   81240:	e000      	b.n	81244 <xTaskResumeAll+0xc0>
   81242:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   81244:	4b0f      	ldr	r3, [pc, #60]	; (81284 <xTaskResumeAll+0x100>)
   81246:	4798      	blx	r3

	return xAlreadyYielded;
}
   81248:	4620      	mov	r0, r4
   8124a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8124e:	bf00      	nop
   81250:	20078b74 	.word	0x20078b74
   81254:	000805b5 	.word	0x000805b5
   81258:	000805c5 	.word	0x000805c5
   8125c:	20078bb8 	.word	0x20078bb8
   81260:	0008052d 	.word	0x0008052d
   81264:	20078aa8 	.word	0x20078aa8
   81268:	20078aac 	.word	0x20078aac
   8126c:	000804cd 	.word	0x000804cd
   81270:	20078b78 	.word	0x20078b78
   81274:	20078a5c 	.word	0x20078a5c
   81278:	00081059 	.word	0x00081059
   8127c:	20078bb4 	.word	0x20078bb4
   81280:	000805a5 	.word	0x000805a5
   81284:	000805e5 	.word	0x000805e5
   81288:	20078b7c 	.word	0x20078b7c

0008128c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   8128c:	b538      	push	{r3, r4, r5, lr}
   8128e:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   81290:	4605      	mov	r5, r0
   81292:	b918      	cbnz	r0, 8129c <vTaskDelayUntil+0x10>
   81294:	4b1b      	ldr	r3, [pc, #108]	; (81304 <vTaskDelayUntil+0x78>)
   81296:	4798      	blx	r3
   81298:	bf00      	nop
   8129a:	e7fd      	b.n	81298 <vTaskDelayUntil+0xc>
		configASSERT( ( xTimeIncrement > 0U ) );
   8129c:	b919      	cbnz	r1, 812a6 <vTaskDelayUntil+0x1a>
   8129e:	4b19      	ldr	r3, [pc, #100]	; (81304 <vTaskDelayUntil+0x78>)
   812a0:	4798      	blx	r3
   812a2:	bf00      	nop
   812a4:	e7fd      	b.n	812a2 <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   812a6:	4b18      	ldr	r3, [pc, #96]	; (81308 <vTaskDelayUntil+0x7c>)
   812a8:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   812aa:	882b      	ldrh	r3, [r5, #0]
   812ac:	441c      	add	r4, r3
   812ae:	b2a4      	uxth	r4, r4

			if( xTickCount < *pxPreviousWakeTime )
   812b0:	4a16      	ldr	r2, [pc, #88]	; (8130c <vTaskDelayUntil+0x80>)
   812b2:	8812      	ldrh	r2, [r2, #0]
   812b4:	b292      	uxth	r2, r2
   812b6:	4293      	cmp	r3, r2
   812b8:	d908      	bls.n	812cc <vTaskDelayUntil+0x40>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   812ba:	42a3      	cmp	r3, r4
   812bc:	d91e      	bls.n	812fc <vTaskDelayUntil+0x70>
   812be:	4b13      	ldr	r3, [pc, #76]	; (8130c <vTaskDelayUntil+0x80>)
   812c0:	881b      	ldrh	r3, [r3, #0]
   812c2:	b29b      	uxth	r3, r3
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   812c4:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   812c6:	429c      	cmp	r4, r3
   812c8:	d910      	bls.n	812ec <vTaskDelayUntil+0x60>
   812ca:	e007      	b.n	812dc <vTaskDelayUntil+0x50>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   812cc:	42a3      	cmp	r3, r4
   812ce:	d813      	bhi.n	812f8 <vTaskDelayUntil+0x6c>
   812d0:	4b0e      	ldr	r3, [pc, #56]	; (8130c <vTaskDelayUntil+0x80>)
   812d2:	881b      	ldrh	r3, [r3, #0]
   812d4:	b29b      	uxth	r3, r3
   812d6:	429c      	cmp	r4, r3
   812d8:	d80e      	bhi.n	812f8 <vTaskDelayUntil+0x6c>
   812da:	e00f      	b.n	812fc <vTaskDelayUntil+0x70>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   812dc:	4b0c      	ldr	r3, [pc, #48]	; (81310 <vTaskDelayUntil+0x84>)
   812de:	6818      	ldr	r0, [r3, #0]
   812e0:	3004      	adds	r0, #4
   812e2:	4b0c      	ldr	r3, [pc, #48]	; (81314 <vTaskDelayUntil+0x88>)
   812e4:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   812e6:	4620      	mov	r0, r4
   812e8:	4b0b      	ldr	r3, [pc, #44]	; (81318 <vTaskDelayUntil+0x8c>)
   812ea:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   812ec:	4b0b      	ldr	r3, [pc, #44]	; (8131c <vTaskDelayUntil+0x90>)
   812ee:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   812f0:	b930      	cbnz	r0, 81300 <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
   812f2:	4b0b      	ldr	r3, [pc, #44]	; (81320 <vTaskDelayUntil+0x94>)
   812f4:	4798      	blx	r3
   812f6:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   812f8:	802c      	strh	r4, [r5, #0]
   812fa:	e7ef      	b.n	812dc <vTaskDelayUntil+0x50>
   812fc:	802c      	strh	r4, [r5, #0]
   812fe:	e7f5      	b.n	812ec <vTaskDelayUntil+0x60>
   81300:	bd38      	pop	{r3, r4, r5, pc}
   81302:	bf00      	nop
   81304:	000805b5 	.word	0x000805b5
   81308:	00081029 	.word	0x00081029
   8130c:	20078b94 	.word	0x20078b94
   81310:	20078b78 	.word	0x20078b78
   81314:	0008052d 	.word	0x0008052d
   81318:	00080d59 	.word	0x00080d59
   8131c:	00081185 	.word	0x00081185
   81320:	000805a5 	.word	0x000805a5

00081324 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   81324:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81326:	4d15      	ldr	r5, [pc, #84]	; (8137c <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81328:	4e15      	ldr	r6, [pc, #84]	; (81380 <prvIdleTask+0x5c>)
			{
				taskYIELD();
   8132a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 813a4 <prvIdleTask+0x80>
   8132e:	e01c      	b.n	8136a <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81330:	4b14      	ldr	r3, [pc, #80]	; (81384 <prvIdleTask+0x60>)
   81332:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81334:	4b14      	ldr	r3, [pc, #80]	; (81388 <prvIdleTask+0x64>)
   81336:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
   81338:	4b14      	ldr	r3, [pc, #80]	; (8138c <prvIdleTask+0x68>)
   8133a:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   8133c:	b1ac      	cbz	r4, 8136a <prvIdleTask+0x46>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   8133e:	4b14      	ldr	r3, [pc, #80]	; (81390 <prvIdleTask+0x6c>)
   81340:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81342:	4b11      	ldr	r3, [pc, #68]	; (81388 <prvIdleTask+0x64>)
   81344:	68db      	ldr	r3, [r3, #12]
   81346:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81348:	1d20      	adds	r0, r4, #4
   8134a:	4b12      	ldr	r3, [pc, #72]	; (81394 <prvIdleTask+0x70>)
   8134c:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   8134e:	4b12      	ldr	r3, [pc, #72]	; (81398 <prvIdleTask+0x74>)
   81350:	681a      	ldr	r2, [r3, #0]
   81352:	3a01      	subs	r2, #1
   81354:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   81356:	682b      	ldr	r3, [r5, #0]
   81358:	3b01      	subs	r3, #1
   8135a:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   8135c:	4b0f      	ldr	r3, [pc, #60]	; (8139c <prvIdleTask+0x78>)
   8135e:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81360:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81362:	4f0f      	ldr	r7, [pc, #60]	; (813a0 <prvIdleTask+0x7c>)
   81364:	47b8      	blx	r7
		vPortFree( pxTCB );
   81366:	4620      	mov	r0, r4
   81368:	47b8      	blx	r7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8136a:	682b      	ldr	r3, [r5, #0]
   8136c:	2b00      	cmp	r3, #0
   8136e:	d1df      	bne.n	81330 <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81370:	6833      	ldr	r3, [r6, #0]
   81372:	2b01      	cmp	r3, #1
   81374:	d9f9      	bls.n	8136a <prvIdleTask+0x46>
			{
				taskYIELD();
   81376:	47c0      	blx	r8
   81378:	e7f7      	b.n	8136a <prvIdleTask+0x46>
   8137a:	bf00      	nop
   8137c:	20078a7c 	.word	0x20078a7c
   81380:	20078aac 	.word	0x20078aac
   81384:	00081029 	.word	0x00081029
   81388:	20078a80 	.word	0x20078a80
   8138c:	00081185 	.word	0x00081185
   81390:	000805c5 	.word	0x000805c5
   81394:	0008052d 	.word	0x0008052d
   81398:	20078bb8 	.word	0x20078bb8
   8139c:	000805e5 	.word	0x000805e5
   813a0:	000807d5 	.word	0x000807d5
   813a4:	000805a5 	.word	0x000805a5

000813a8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   813a8:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   813aa:	4b1d      	ldr	r3, [pc, #116]	; (81420 <vTaskSwitchContext+0x78>)
   813ac:	681b      	ldr	r3, [r3, #0]
   813ae:	b95b      	cbnz	r3, 813c8 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   813b0:	4b1c      	ldr	r3, [pc, #112]	; (81424 <vTaskSwitchContext+0x7c>)
   813b2:	681b      	ldr	r3, [r3, #0]
   813b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   813b8:	009b      	lsls	r3, r3, #2
   813ba:	4a1b      	ldr	r2, [pc, #108]	; (81428 <vTaskSwitchContext+0x80>)
   813bc:	58d3      	ldr	r3, [r2, r3]
   813be:	b9cb      	cbnz	r3, 813f4 <vTaskSwitchContext+0x4c>
   813c0:	4b18      	ldr	r3, [pc, #96]	; (81424 <vTaskSwitchContext+0x7c>)
   813c2:	681b      	ldr	r3, [r3, #0]
   813c4:	b953      	cbnz	r3, 813dc <vTaskSwitchContext+0x34>
   813c6:	e005      	b.n	813d4 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   813c8:	2201      	movs	r2, #1
   813ca:	4b18      	ldr	r3, [pc, #96]	; (8142c <vTaskSwitchContext+0x84>)
   813cc:	601a      	str	r2, [r3, #0]
   813ce:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   813d0:	681a      	ldr	r2, [r3, #0]
   813d2:	b92a      	cbnz	r2, 813e0 <vTaskSwitchContext+0x38>
   813d4:	4b16      	ldr	r3, [pc, #88]	; (81430 <vTaskSwitchContext+0x88>)
   813d6:	4798      	blx	r3
   813d8:	bf00      	nop
   813da:	e7fd      	b.n	813d8 <vTaskSwitchContext+0x30>
   813dc:	4b11      	ldr	r3, [pc, #68]	; (81424 <vTaskSwitchContext+0x7c>)
   813de:	4912      	ldr	r1, [pc, #72]	; (81428 <vTaskSwitchContext+0x80>)
   813e0:	681a      	ldr	r2, [r3, #0]
   813e2:	3a01      	subs	r2, #1
   813e4:	601a      	str	r2, [r3, #0]
   813e6:	681a      	ldr	r2, [r3, #0]
   813e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   813ec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   813f0:	2a00      	cmp	r2, #0
   813f2:	d0ed      	beq.n	813d0 <vTaskSwitchContext+0x28>
   813f4:	4b0b      	ldr	r3, [pc, #44]	; (81424 <vTaskSwitchContext+0x7c>)
   813f6:	681b      	ldr	r3, [r3, #0]
   813f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   813fc:	4a0a      	ldr	r2, [pc, #40]	; (81428 <vTaskSwitchContext+0x80>)
   813fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81402:	685a      	ldr	r2, [r3, #4]
   81404:	6852      	ldr	r2, [r2, #4]
   81406:	605a      	str	r2, [r3, #4]
   81408:	f103 0108 	add.w	r1, r3, #8
   8140c:	428a      	cmp	r2, r1
   8140e:	bf04      	itt	eq
   81410:	6852      	ldreq	r2, [r2, #4]
   81412:	605a      	streq	r2, [r3, #4]
   81414:	685b      	ldr	r3, [r3, #4]
   81416:	68da      	ldr	r2, [r3, #12]
   81418:	4b06      	ldr	r3, [pc, #24]	; (81434 <vTaskSwitchContext+0x8c>)
   8141a:	601a      	str	r2, [r3, #0]
   8141c:	bd08      	pop	{r3, pc}
   8141e:	bf00      	nop
   81420:	20078b74 	.word	0x20078b74
   81424:	20078aa8 	.word	0x20078aa8
   81428:	20078aac 	.word	0x20078aac
   8142c:	20078bb4 	.word	0x20078bb4
   81430:	000805b5 	.word	0x000805b5
   81434:	20078b78 	.word	0x20078b78

00081438 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   81438:	b538      	push	{r3, r4, r5, lr}
   8143a:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   8143c:	b918      	cbnz	r0, 81446 <vTaskPlaceOnEventList+0xe>
   8143e:	4b0f      	ldr	r3, [pc, #60]	; (8147c <vTaskPlaceOnEventList+0x44>)
   81440:	4798      	blx	r3
   81442:	bf00      	nop
   81444:	e7fd      	b.n	81442 <vTaskPlaceOnEventList+0xa>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81446:	4d0e      	ldr	r5, [pc, #56]	; (81480 <vTaskPlaceOnEventList+0x48>)
   81448:	6829      	ldr	r1, [r5, #0]
   8144a:	3118      	adds	r1, #24
   8144c:	4b0d      	ldr	r3, [pc, #52]	; (81484 <vTaskPlaceOnEventList+0x4c>)
   8144e:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81450:	6828      	ldr	r0, [r5, #0]
   81452:	3004      	adds	r0, #4
   81454:	4b0c      	ldr	r3, [pc, #48]	; (81488 <vTaskPlaceOnEventList+0x50>)
   81456:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   81458:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8145c:	429c      	cmp	r4, r3
   8145e:	d105      	bne.n	8146c <vTaskPlaceOnEventList+0x34>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81460:	6829      	ldr	r1, [r5, #0]
   81462:	480a      	ldr	r0, [pc, #40]	; (8148c <vTaskPlaceOnEventList+0x54>)
   81464:	3104      	adds	r1, #4
   81466:	4b0a      	ldr	r3, [pc, #40]	; (81490 <vTaskPlaceOnEventList+0x58>)
   81468:	4798      	blx	r3
   8146a:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   8146c:	4b09      	ldr	r3, [pc, #36]	; (81494 <vTaskPlaceOnEventList+0x5c>)
   8146e:	8818      	ldrh	r0, [r3, #0]
   81470:	4420      	add	r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81472:	b280      	uxth	r0, r0
   81474:	4b08      	ldr	r3, [pc, #32]	; (81498 <vTaskPlaceOnEventList+0x60>)
   81476:	4798      	blx	r3
   81478:	bd38      	pop	{r3, r4, r5, pc}
   8147a:	bf00      	nop
   8147c:	000805b5 	.word	0x000805b5
   81480:	20078b78 	.word	0x20078b78
   81484:	000804e9 	.word	0x000804e9
   81488:	0008052d 	.word	0x0008052d
   8148c:	20078a60 	.word	0x20078a60
   81490:	000804cd 	.word	0x000804cd
   81494:	20078b94 	.word	0x20078b94
   81498:	00080d59 	.word	0x00080d59

0008149c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   8149c:	b538      	push	{r3, r4, r5, lr}
   8149e:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   814a0:	b918      	cbnz	r0, 814aa <vTaskPlaceOnEventListRestricted+0xe>
   814a2:	4b0a      	ldr	r3, [pc, #40]	; (814cc <vTaskPlaceOnEventListRestricted+0x30>)
   814a4:	4798      	blx	r3
   814a6:	bf00      	nop
   814a8:	e7fd      	b.n	814a6 <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   814aa:	4c09      	ldr	r4, [pc, #36]	; (814d0 <vTaskPlaceOnEventListRestricted+0x34>)
   814ac:	6821      	ldr	r1, [r4, #0]
   814ae:	3118      	adds	r1, #24
   814b0:	4b08      	ldr	r3, [pc, #32]	; (814d4 <vTaskPlaceOnEventListRestricted+0x38>)
   814b2:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   814b4:	6820      	ldr	r0, [r4, #0]
   814b6:	3004      	adds	r0, #4
   814b8:	4b07      	ldr	r3, [pc, #28]	; (814d8 <vTaskPlaceOnEventListRestricted+0x3c>)
   814ba:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   814bc:	4b07      	ldr	r3, [pc, #28]	; (814dc <vTaskPlaceOnEventListRestricted+0x40>)
   814be:	8818      	ldrh	r0, [r3, #0]
   814c0:	4428      	add	r0, r5
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   814c2:	b280      	uxth	r0, r0
   814c4:	4b06      	ldr	r3, [pc, #24]	; (814e0 <vTaskPlaceOnEventListRestricted+0x44>)
   814c6:	4798      	blx	r3
   814c8:	bd38      	pop	{r3, r4, r5, pc}
   814ca:	bf00      	nop
   814cc:	000805b5 	.word	0x000805b5
   814d0:	20078b78 	.word	0x20078b78
   814d4:	000804cd 	.word	0x000804cd
   814d8:	0008052d 	.word	0x0008052d
   814dc:	20078b94 	.word	0x20078b94
   814e0:	00080d59 	.word	0x00080d59

000814e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   814e4:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   814e6:	68c3      	ldr	r3, [r0, #12]
   814e8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   814ea:	b91c      	cbnz	r4, 814f4 <xTaskRemoveFromEventList+0x10>
   814ec:	4b16      	ldr	r3, [pc, #88]	; (81548 <xTaskRemoveFromEventList+0x64>)
   814ee:	4798      	blx	r3
   814f0:	bf00      	nop
   814f2:	e7fd      	b.n	814f0 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   814f4:	f104 0518 	add.w	r5, r4, #24
   814f8:	4628      	mov	r0, r5
   814fa:	4b14      	ldr	r3, [pc, #80]	; (8154c <xTaskRemoveFromEventList+0x68>)
   814fc:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   814fe:	4b14      	ldr	r3, [pc, #80]	; (81550 <xTaskRemoveFromEventList+0x6c>)
   81500:	681b      	ldr	r3, [r3, #0]
   81502:	b99b      	cbnz	r3, 8152c <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81504:	1d25      	adds	r5, r4, #4
   81506:	4628      	mov	r0, r5
   81508:	4b10      	ldr	r3, [pc, #64]	; (8154c <xTaskRemoveFromEventList+0x68>)
   8150a:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   8150c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8150e:	4a11      	ldr	r2, [pc, #68]	; (81554 <xTaskRemoveFromEventList+0x70>)
   81510:	6812      	ldr	r2, [r2, #0]
   81512:	4293      	cmp	r3, r2
   81514:	bf84      	itt	hi
   81516:	4a0f      	ldrhi	r2, [pc, #60]	; (81554 <xTaskRemoveFromEventList+0x70>)
   81518:	6013      	strhi	r3, [r2, #0]
   8151a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8151e:	480e      	ldr	r0, [pc, #56]	; (81558 <xTaskRemoveFromEventList+0x74>)
   81520:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81524:	4629      	mov	r1, r5
   81526:	4b0d      	ldr	r3, [pc, #52]	; (8155c <xTaskRemoveFromEventList+0x78>)
   81528:	4798      	blx	r3
   8152a:	e003      	b.n	81534 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   8152c:	480c      	ldr	r0, [pc, #48]	; (81560 <xTaskRemoveFromEventList+0x7c>)
   8152e:	4629      	mov	r1, r5
   81530:	4b0a      	ldr	r3, [pc, #40]	; (8155c <xTaskRemoveFromEventList+0x78>)
   81532:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81534:	4b0b      	ldr	r3, [pc, #44]	; (81564 <xTaskRemoveFromEventList+0x80>)
   81536:	681b      	ldr	r3, [r3, #0]
   81538:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   8153c:	4298      	cmp	r0, r3
   8153e:	bf34      	ite	cc
   81540:	2000      	movcc	r0, #0
   81542:	2001      	movcs	r0, #1
   81544:	bd38      	pop	{r3, r4, r5, pc}
   81546:	bf00      	nop
   81548:	000805b5 	.word	0x000805b5
   8154c:	0008052d 	.word	0x0008052d
   81550:	20078b74 	.word	0x20078b74
   81554:	20078aa8 	.word	0x20078aa8
   81558:	20078aac 	.word	0x20078aac
   8155c:	000804cd 	.word	0x000804cd
   81560:	20078b7c 	.word	0x20078b7c
   81564:	20078b78 	.word	0x20078b78

00081568 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   81568:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   8156a:	b918      	cbnz	r0, 81574 <vTaskSetTimeOutState+0xc>
   8156c:	4b05      	ldr	r3, [pc, #20]	; (81584 <vTaskSetTimeOutState+0x1c>)
   8156e:	4798      	blx	r3
   81570:	bf00      	nop
   81572:	e7fd      	b.n	81570 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81574:	4a04      	ldr	r2, [pc, #16]	; (81588 <vTaskSetTimeOutState+0x20>)
   81576:	6812      	ldr	r2, [r2, #0]
   81578:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   8157a:	4a04      	ldr	r2, [pc, #16]	; (8158c <vTaskSetTimeOutState+0x24>)
   8157c:	8812      	ldrh	r2, [r2, #0]
   8157e:	8082      	strh	r2, [r0, #4]
   81580:	bd08      	pop	{r3, pc}
   81582:	bf00      	nop
   81584:	000805b5 	.word	0x000805b5
   81588:	20078b90 	.word	0x20078b90
   8158c:	20078b94 	.word	0x20078b94

00081590 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   81590:	b538      	push	{r3, r4, r5, lr}
   81592:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   81594:	4604      	mov	r4, r0
   81596:	b918      	cbnz	r0, 815a0 <xTaskCheckForTimeOut+0x10>
   81598:	4b1a      	ldr	r3, [pc, #104]	; (81604 <xTaskCheckForTimeOut+0x74>)
   8159a:	4798      	blx	r3
   8159c:	bf00      	nop
   8159e:	e7fd      	b.n	8159c <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
   815a0:	b919      	cbnz	r1, 815aa <xTaskCheckForTimeOut+0x1a>
   815a2:	4b18      	ldr	r3, [pc, #96]	; (81604 <xTaskCheckForTimeOut+0x74>)
   815a4:	4798      	blx	r3
   815a6:	bf00      	nop
   815a8:	e7fd      	b.n	815a6 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   815aa:	4b17      	ldr	r3, [pc, #92]	; (81608 <xTaskCheckForTimeOut+0x78>)
   815ac:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   815ae:	882b      	ldrh	r3, [r5, #0]
   815b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   815b4:	4293      	cmp	r3, r2
   815b6:	d01c      	beq.n	815f2 <xTaskCheckForTimeOut+0x62>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   815b8:	4a14      	ldr	r2, [pc, #80]	; (8160c <xTaskCheckForTimeOut+0x7c>)
   815ba:	6811      	ldr	r1, [r2, #0]
   815bc:	6822      	ldr	r2, [r4, #0]
   815be:	428a      	cmp	r2, r1
   815c0:	d005      	beq.n	815ce <xTaskCheckForTimeOut+0x3e>
   815c2:	4a13      	ldr	r2, [pc, #76]	; (81610 <xTaskCheckForTimeOut+0x80>)
   815c4:	8812      	ldrh	r2, [r2, #0]
   815c6:	b292      	uxth	r2, r2
   815c8:	88a1      	ldrh	r1, [r4, #4]
   815ca:	4291      	cmp	r1, r2
   815cc:	d913      	bls.n	815f6 <xTaskCheckForTimeOut+0x66>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   815ce:	4a10      	ldr	r2, [pc, #64]	; (81610 <xTaskCheckForTimeOut+0x80>)
   815d0:	8811      	ldrh	r1, [r2, #0]
   815d2:	88a2      	ldrh	r2, [r4, #4]
   815d4:	1a89      	subs	r1, r1, r2
   815d6:	b289      	uxth	r1, r1
   815d8:	428b      	cmp	r3, r1
   815da:	d90e      	bls.n	815fa <xTaskCheckForTimeOut+0x6a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   815dc:	490c      	ldr	r1, [pc, #48]	; (81610 <xTaskCheckForTimeOut+0x80>)
   815de:	8809      	ldrh	r1, [r1, #0]
   815e0:	b289      	uxth	r1, r1
   815e2:	1a52      	subs	r2, r2, r1
   815e4:	4413      	add	r3, r2
   815e6:	802b      	strh	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   815e8:	4620      	mov	r0, r4
   815ea:	4b0a      	ldr	r3, [pc, #40]	; (81614 <xTaskCheckForTimeOut+0x84>)
   815ec:	4798      	blx	r3
			xReturn = pdFALSE;
   815ee:	2400      	movs	r4, #0
   815f0:	e004      	b.n	815fc <xTaskCheckForTimeOut+0x6c>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   815f2:	2400      	movs	r4, #0
   815f4:	e002      	b.n	815fc <xTaskCheckForTimeOut+0x6c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   815f6:	2401      	movs	r4, #1
   815f8:	e000      	b.n	815fc <xTaskCheckForTimeOut+0x6c>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   815fa:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   815fc:	4b06      	ldr	r3, [pc, #24]	; (81618 <xTaskCheckForTimeOut+0x88>)
   815fe:	4798      	blx	r3

	return xReturn;
}
   81600:	4620      	mov	r0, r4
   81602:	bd38      	pop	{r3, r4, r5, pc}
   81604:	000805b5 	.word	0x000805b5
   81608:	000805c5 	.word	0x000805c5
   8160c:	20078b90 	.word	0x20078b90
   81610:	20078b94 	.word	0x20078b94
   81614:	00081569 	.word	0x00081569
   81618:	000805e5 	.word	0x000805e5

0008161c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   8161c:	2201      	movs	r2, #1
   8161e:	4b01      	ldr	r3, [pc, #4]	; (81624 <vTaskMissedYield+0x8>)
   81620:	601a      	str	r2, [r3, #0]
   81622:	4770      	bx	lr
   81624:	20078bb4 	.word	0x20078bb4

00081628 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81628:	4b01      	ldr	r3, [pc, #4]	; (81630 <xTaskGetCurrentTaskHandle+0x8>)
   8162a:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   8162c:	4770      	bx	lr
   8162e:	bf00      	nop
   81630:	20078b78 	.word	0x20078b78

00081634 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81634:	4b05      	ldr	r3, [pc, #20]	; (8164c <xTaskGetSchedulerState+0x18>)
   81636:	681b      	ldr	r3, [r3, #0]
   81638:	b133      	cbz	r3, 81648 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8163a:	4b05      	ldr	r3, [pc, #20]	; (81650 <xTaskGetSchedulerState+0x1c>)
   8163c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   8163e:	2b00      	cmp	r3, #0
   81640:	bf14      	ite	ne
   81642:	2002      	movne	r0, #2
   81644:	2001      	moveq	r0, #1
   81646:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   81648:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   8164a:	4770      	bx	lr
   8164c:	20078a78 	.word	0x20078a78
   81650:	20078b74 	.word	0x20078b74

00081654 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81654:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81656:	4604      	mov	r4, r0
   81658:	2800      	cmp	r0, #0
   8165a:	d02e      	beq.n	816ba <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   8165c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   8165e:	4a17      	ldr	r2, [pc, #92]	; (816bc <vTaskPriorityInherit+0x68>)
   81660:	6812      	ldr	r2, [r2, #0]
   81662:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81664:	4293      	cmp	r3, r2
   81666:	d228      	bcs.n	816ba <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81668:	4a14      	ldr	r2, [pc, #80]	; (816bc <vTaskPriorityInherit+0x68>)
   8166a:	6812      	ldr	r2, [r2, #0]
   8166c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   8166e:	f1c2 020a 	rsb	r2, r2, #10
   81672:	8302      	strh	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81674:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81678:	4a11      	ldr	r2, [pc, #68]	; (816c0 <vTaskPriorityInherit+0x6c>)
   8167a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8167e:	6942      	ldr	r2, [r0, #20]
   81680:	429a      	cmp	r2, r3
   81682:	d116      	bne.n	816b2 <vTaskPriorityInherit+0x5e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81684:	1d05      	adds	r5, r0, #4
   81686:	4628      	mov	r0, r5
   81688:	4b0e      	ldr	r3, [pc, #56]	; (816c4 <vTaskPriorityInherit+0x70>)
   8168a:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   8168c:	4b0b      	ldr	r3, [pc, #44]	; (816bc <vTaskPriorityInherit+0x68>)
   8168e:	681b      	ldr	r3, [r3, #0]
   81690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81692:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   81694:	4a0c      	ldr	r2, [pc, #48]	; (816c8 <vTaskPriorityInherit+0x74>)
   81696:	6812      	ldr	r2, [r2, #0]
   81698:	4293      	cmp	r3, r2
   8169a:	bf84      	itt	hi
   8169c:	4a0a      	ldrhi	r2, [pc, #40]	; (816c8 <vTaskPriorityInherit+0x74>)
   8169e:	6013      	strhi	r3, [r2, #0]
   816a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   816a4:	4806      	ldr	r0, [pc, #24]	; (816c0 <vTaskPriorityInherit+0x6c>)
   816a6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   816aa:	4629      	mov	r1, r5
   816ac:	4b07      	ldr	r3, [pc, #28]	; (816cc <vTaskPriorityInherit+0x78>)
   816ae:	4798      	blx	r3
   816b0:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   816b2:	4b02      	ldr	r3, [pc, #8]	; (816bc <vTaskPriorityInherit+0x68>)
   816b4:	681b      	ldr	r3, [r3, #0]
   816b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   816b8:	62c3      	str	r3, [r0, #44]	; 0x2c
   816ba:	bd38      	pop	{r3, r4, r5, pc}
   816bc:	20078b78 	.word	0x20078b78
   816c0:	20078aac 	.word	0x20078aac
   816c4:	0008052d 	.word	0x0008052d
   816c8:	20078aa8 	.word	0x20078aa8
   816cc:	000804cd 	.word	0x000804cd

000816d0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   816d0:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   816d2:	4604      	mov	r4, r0
   816d4:	b1d0      	cbz	r0, 8170c <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   816d6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   816d8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   816da:	429a      	cmp	r2, r3
   816dc:	d016      	beq.n	8170c <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   816de:	1d05      	adds	r5, r0, #4
   816e0:	4628      	mov	r0, r5
   816e2:	4b0b      	ldr	r3, [pc, #44]	; (81710 <vTaskPriorityDisinherit+0x40>)
   816e4:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   816e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   816e8:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   816ea:	f1c3 020a 	rsb	r2, r3, #10
   816ee:	8322      	strh	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   816f0:	4a08      	ldr	r2, [pc, #32]	; (81714 <vTaskPriorityDisinherit+0x44>)
   816f2:	6812      	ldr	r2, [r2, #0]
   816f4:	4293      	cmp	r3, r2
   816f6:	bf84      	itt	hi
   816f8:	4a06      	ldrhi	r2, [pc, #24]	; (81714 <vTaskPriorityDisinherit+0x44>)
   816fa:	6013      	strhi	r3, [r2, #0]
   816fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81700:	4805      	ldr	r0, [pc, #20]	; (81718 <vTaskPriorityDisinherit+0x48>)
   81702:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81706:	4629      	mov	r1, r5
   81708:	4b04      	ldr	r3, [pc, #16]	; (8171c <vTaskPriorityDisinherit+0x4c>)
   8170a:	4798      	blx	r3
   8170c:	bd38      	pop	{r3, r4, r5, pc}
   8170e:	bf00      	nop
   81710:	0008052d 	.word	0x0008052d
   81714:	20078aa8 	.word	0x20078aa8
   81718:	20078aac 	.word	0x20078aac
   8171c:	000804cd 	.word	0x000804cd

00081720 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81720:	b510      	push	{r4, lr}
   81722:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81724:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81726:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   81728:	4291      	cmp	r1, r2
   8172a:	d80b      	bhi.n	81744 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   8172c:	1ad3      	subs	r3, r2, r3
   8172e:	8b01      	ldrh	r1, [r0, #24]
   81730:	b29b      	uxth	r3, r3
   81732:	4299      	cmp	r1, r3
   81734:	d911      	bls.n	8175a <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81736:	4b0b      	ldr	r3, [pc, #44]	; (81764 <prvInsertTimerInActiveList+0x44>)
   81738:	6818      	ldr	r0, [r3, #0]
   8173a:	1d21      	adds	r1, r4, #4
   8173c:	4b0a      	ldr	r3, [pc, #40]	; (81768 <prvInsertTimerInActiveList+0x48>)
   8173e:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81740:	2000      	movs	r0, #0
   81742:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81744:	429a      	cmp	r2, r3
   81746:	d201      	bcs.n	8174c <prvInsertTimerInActiveList+0x2c>
   81748:	4299      	cmp	r1, r3
   8174a:	d208      	bcs.n	8175e <prvInsertTimerInActiveList+0x3e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   8174c:	4b07      	ldr	r3, [pc, #28]	; (8176c <prvInsertTimerInActiveList+0x4c>)
   8174e:	6818      	ldr	r0, [r3, #0]
   81750:	1d21      	adds	r1, r4, #4
   81752:	4b05      	ldr	r3, [pc, #20]	; (81768 <prvInsertTimerInActiveList+0x48>)
   81754:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81756:	2000      	movs	r0, #0
   81758:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   8175a:	2001      	movs	r0, #1
   8175c:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   8175e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   81760:	bd10      	pop	{r4, pc}
   81762:	bf00      	nop
   81764:	20078bf4 	.word	0x20078bf4
   81768:	000804e9 	.word	0x000804e9
   8176c:	20078bc0 	.word	0x20078bc0

00081770 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81770:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81772:	4b0d      	ldr	r3, [pc, #52]	; (817a8 <prvCheckForValidListAndQueue+0x38>)
   81774:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81776:	4b0d      	ldr	r3, [pc, #52]	; (817ac <prvCheckForValidListAndQueue+0x3c>)
   81778:	681b      	ldr	r3, [r3, #0]
   8177a:	b98b      	cbnz	r3, 817a0 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   8177c:	4d0c      	ldr	r5, [pc, #48]	; (817b0 <prvCheckForValidListAndQueue+0x40>)
   8177e:	4628      	mov	r0, r5
   81780:	4e0c      	ldr	r6, [pc, #48]	; (817b4 <prvCheckForValidListAndQueue+0x44>)
   81782:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81784:	4c0c      	ldr	r4, [pc, #48]	; (817b8 <prvCheckForValidListAndQueue+0x48>)
   81786:	4620      	mov	r0, r4
   81788:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   8178a:	4b0c      	ldr	r3, [pc, #48]	; (817bc <prvCheckForValidListAndQueue+0x4c>)
   8178c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   8178e:	4b0c      	ldr	r3, [pc, #48]	; (817c0 <prvCheckForValidListAndQueue+0x50>)
   81790:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   81792:	2005      	movs	r0, #5
   81794:	210c      	movs	r1, #12
   81796:	2200      	movs	r2, #0
   81798:	4b0a      	ldr	r3, [pc, #40]	; (817c4 <prvCheckForValidListAndQueue+0x54>)
   8179a:	4798      	blx	r3
   8179c:	4b03      	ldr	r3, [pc, #12]	; (817ac <prvCheckForValidListAndQueue+0x3c>)
   8179e:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   817a0:	4b09      	ldr	r3, [pc, #36]	; (817c8 <prvCheckForValidListAndQueue+0x58>)
   817a2:	4798      	blx	r3
   817a4:	bd70      	pop	{r4, r5, r6, pc}
   817a6:	bf00      	nop
   817a8:	000805c5 	.word	0x000805c5
   817ac:	20078bf0 	.word	0x20078bf0
   817b0:	20078bc4 	.word	0x20078bc4
   817b4:	000804ad 	.word	0x000804ad
   817b8:	20078bd8 	.word	0x20078bd8
   817bc:	20078bc0 	.word	0x20078bc0
   817c0:	20078bf4 	.word	0x20078bf4
   817c4:	0008099d 	.word	0x0008099d
   817c8:	000805e5 	.word	0x000805e5

000817cc <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   817cc:	b510      	push	{r4, lr}
   817ce:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   817d0:	4b0b      	ldr	r3, [pc, #44]	; (81800 <xTimerCreateTimerTask+0x34>)
   817d2:	4798      	blx	r3

	if( xTimerQueue != NULL )
   817d4:	4b0b      	ldr	r3, [pc, #44]	; (81804 <xTimerCreateTimerTask+0x38>)
   817d6:	681b      	ldr	r3, [r3, #0]
   817d8:	b163      	cbz	r3, 817f4 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   817da:	2309      	movs	r3, #9
   817dc:	9300      	str	r3, [sp, #0]
   817de:	2300      	movs	r3, #0
   817e0:	9301      	str	r3, [sp, #4]
   817e2:	9302      	str	r3, [sp, #8]
   817e4:	9303      	str	r3, [sp, #12]
   817e6:	4808      	ldr	r0, [pc, #32]	; (81808 <xTimerCreateTimerTask+0x3c>)
   817e8:	4908      	ldr	r1, [pc, #32]	; (8180c <xTimerCreateTimerTask+0x40>)
   817ea:	f44f 7200 	mov.w	r2, #512	; 0x200
   817ee:	4c08      	ldr	r4, [pc, #32]	; (81810 <xTimerCreateTimerTask+0x44>)
   817f0:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   817f2:	b918      	cbnz	r0, 817fc <xTimerCreateTimerTask+0x30>
   817f4:	4b07      	ldr	r3, [pc, #28]	; (81814 <xTimerCreateTimerTask+0x48>)
   817f6:	4798      	blx	r3
   817f8:	bf00      	nop
   817fa:	e7fd      	b.n	817f8 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   817fc:	b004      	add	sp, #16
   817fe:	bd10      	pop	{r4, pc}
   81800:	00081771 	.word	0x00081771
   81804:	20078bf0 	.word	0x20078bf0
   81808:	0008192d 	.word	0x0008192d
   8180c:	00088eec 	.word	0x00088eec
   81810:	00080db5 	.word	0x00080db5
   81814:	000805b5 	.word	0x000805b5

00081818 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   81818:	b510      	push	{r4, lr}
   8181a:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   8181c:	4c10      	ldr	r4, [pc, #64]	; (81860 <xTimerGenericCommand+0x48>)
   8181e:	6824      	ldr	r4, [r4, #0]
   81820:	b1d4      	cbz	r4, 81858 <xTimerGenericCommand+0x40>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   81822:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81824:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81828:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   8182a:	b973      	cbnz	r3, 8184a <xTimerGenericCommand+0x32>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   8182c:	4b0d      	ldr	r3, [pc, #52]	; (81864 <xTimerGenericCommand+0x4c>)
   8182e:	4798      	blx	r3
   81830:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81832:	4b0b      	ldr	r3, [pc, #44]	; (81860 <xTimerGenericCommand+0x48>)
   81834:	6818      	ldr	r0, [r3, #0]
   81836:	a901      	add	r1, sp, #4
   81838:	bf07      	ittee	eq
   8183a:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
   8183e:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81840:	2200      	movne	r2, #0
   81842:	4613      	movne	r3, r2
   81844:	4c08      	ldr	r4, [pc, #32]	; (81868 <xTimerGenericCommand+0x50>)
   81846:	47a0      	blx	r4
   81848:	e007      	b.n	8185a <xTimerGenericCommand+0x42>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   8184a:	4620      	mov	r0, r4
   8184c:	a901      	add	r1, sp, #4
   8184e:	461a      	mov	r2, r3
   81850:	2300      	movs	r3, #0
   81852:	4c06      	ldr	r4, [pc, #24]	; (8186c <xTimerGenericCommand+0x54>)
   81854:	47a0      	blx	r4
   81856:	e000      	b.n	8185a <xTimerGenericCommand+0x42>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   81858:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   8185a:	b004      	add	sp, #16
   8185c:	bd10      	pop	{r4, pc}
   8185e:	bf00      	nop
   81860:	20078bf0 	.word	0x20078bf0
   81864:	00081635 	.word	0x00081635
   81868:	000809f5 	.word	0x000809f5
   8186c:	00080b19 	.word	0x00080b19

00081870 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81874:	b082      	sub	sp, #8
   81876:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   81878:	4b24      	ldr	r3, [pc, #144]	; (8190c <prvSampleTimeNow+0x9c>)
   8187a:	4798      	blx	r3
   8187c:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   8187e:	4b24      	ldr	r3, [pc, #144]	; (81910 <prvSampleTimeNow+0xa0>)
   81880:	881b      	ldrh	r3, [r3, #0]
   81882:	4283      	cmp	r3, r0
   81884:	d937      	bls.n	818f6 <prvSampleTimeNow+0x86>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81886:	4e23      	ldr	r6, [pc, #140]	; (81914 <prvSampleTimeNow+0xa4>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81888:	4f23      	ldr	r7, [pc, #140]	; (81918 <prvSampleTimeNow+0xa8>)
   8188a:	e027      	b.n	818dc <prvSampleTimeNow+0x6c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   8188c:	68da      	ldr	r2, [r3, #12]
   8188e:	f8b2 a000 	ldrh.w	sl, [r2]
   81892:	fa1f fa8a 	uxth.w	sl, sl

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81896:	68db      	ldr	r3, [r3, #12]
   81898:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   8189a:	1d25      	adds	r5, r4, #4
   8189c:	4628      	mov	r0, r5
   8189e:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   818a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   818a2:	4620      	mov	r0, r4
   818a4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   818a6:	69e3      	ldr	r3, [r4, #28]
   818a8:	2b01      	cmp	r3, #1
   818aa:	d117      	bne.n	818dc <prvSampleTimeNow+0x6c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   818ac:	8b23      	ldrh	r3, [r4, #24]
   818ae:	4453      	add	r3, sl
   818b0:	b29b      	uxth	r3, r3
			if( xReloadTime > xNextExpireTime )
   818b2:	4553      	cmp	r3, sl
   818b4:	d906      	bls.n	818c4 <prvSampleTimeNow+0x54>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   818b6:	80a3      	strh	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   818b8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   818ba:	6830      	ldr	r0, [r6, #0]
   818bc:	4629      	mov	r1, r5
   818be:	4b17      	ldr	r3, [pc, #92]	; (8191c <prvSampleTimeNow+0xac>)
   818c0:	4798      	blx	r3
   818c2:	e00b      	b.n	818dc <prvSampleTimeNow+0x6c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   818c4:	2300      	movs	r3, #0
   818c6:	9300      	str	r3, [sp, #0]
   818c8:	4620      	mov	r0, r4
   818ca:	4619      	mov	r1, r3
   818cc:	4652      	mov	r2, sl
   818ce:	4c14      	ldr	r4, [pc, #80]	; (81920 <prvSampleTimeNow+0xb0>)
   818d0:	47a0      	blx	r4
				configASSERT( xResult );
   818d2:	b918      	cbnz	r0, 818dc <prvSampleTimeNow+0x6c>
   818d4:	4b13      	ldr	r3, [pc, #76]	; (81924 <prvSampleTimeNow+0xb4>)
   818d6:	4798      	blx	r3
   818d8:	bf00      	nop
   818da:	e7fd      	b.n	818d8 <prvSampleTimeNow+0x68>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   818dc:	6833      	ldr	r3, [r6, #0]
   818de:	681a      	ldr	r2, [r3, #0]
   818e0:	2a00      	cmp	r2, #0
   818e2:	d1d3      	bne.n	8188c <prvSampleTimeNow+0x1c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   818e4:	4a10      	ldr	r2, [pc, #64]	; (81928 <prvSampleTimeNow+0xb8>)
   818e6:	6811      	ldr	r1, [r2, #0]
   818e8:	480a      	ldr	r0, [pc, #40]	; (81914 <prvSampleTimeNow+0xa4>)
   818ea:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   818ec:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   818ee:	2301      	movs	r3, #1
   818f0:	f8c9 3000 	str.w	r3, [r9]
   818f4:	e002      	b.n	818fc <prvSampleTimeNow+0x8c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   818f6:	2300      	movs	r3, #0
   818f8:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   818fc:	4b04      	ldr	r3, [pc, #16]	; (81910 <prvSampleTimeNow+0xa0>)
   818fe:	f8a3 8000 	strh.w	r8, [r3]

	return xTimeNow;
}
   81902:	4640      	mov	r0, r8
   81904:	b002      	add	sp, #8
   81906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8190a:	bf00      	nop
   8190c:	00081039 	.word	0x00081039
   81910:	20078bec 	.word	0x20078bec
   81914:	20078bc0 	.word	0x20078bc0
   81918:	0008052d 	.word	0x0008052d
   8191c:	000804e9 	.word	0x000804e9
   81920:	00081819 	.word	0x00081819
   81924:	000805b5 	.word	0x000805b5
   81928:	20078bf4 	.word	0x20078bf4

0008192c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   8192c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81930:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81932:	4d51      	ldr	r5, [pc, #324]	; (81a78 <prvTimerTask+0x14c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81934:	f8df 8170 	ldr.w	r8, [pc, #368]	; 81aa8 <prvTimerTask+0x17c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81938:	4b50      	ldr	r3, [pc, #320]	; (81a7c <prvTimerTask+0x150>)
   8193a:	681b      	ldr	r3, [r3, #0]
   8193c:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   8193e:	2a00      	cmp	r2, #0
   81940:	f000 8090 	beq.w	81a64 <prvTimerTask+0x138>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81944:	68db      	ldr	r3, [r3, #12]
   81946:	881e      	ldrh	r6, [r3, #0]
   81948:	b2b6      	uxth	r6, r6
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   8194a:	4b4d      	ldr	r3, [pc, #308]	; (81a80 <prvTimerTask+0x154>)
   8194c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8194e:	a803      	add	r0, sp, #12
   81950:	4b4c      	ldr	r3, [pc, #304]	; (81a84 <prvTimerTask+0x158>)
   81952:	4798      	blx	r3
   81954:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81956:	9b03      	ldr	r3, [sp, #12]
   81958:	2b00      	cmp	r3, #0
   8195a:	d132      	bne.n	819c2 <prvTimerTask+0x96>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   8195c:	4286      	cmp	r6, r0
   8195e:	d825      	bhi.n	819ac <prvTimerTask+0x80>
			{
				xTaskResumeAll();
   81960:	4b49      	ldr	r3, [pc, #292]	; (81a88 <prvTimerTask+0x15c>)
   81962:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81964:	4b45      	ldr	r3, [pc, #276]	; (81a7c <prvTimerTask+0x150>)
   81966:	681b      	ldr	r3, [r3, #0]
   81968:	68db      	ldr	r3, [r3, #12]
   8196a:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   8196c:	1d20      	adds	r0, r4, #4
   8196e:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81970:	69e3      	ldr	r3, [r4, #28]
   81972:	2b01      	cmp	r3, #1
   81974:	d115      	bne.n	819a2 <prvTimerTask+0x76>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   81976:	8b21      	ldrh	r1, [r4, #24]
   81978:	4431      	add	r1, r6
   8197a:	4620      	mov	r0, r4
   8197c:	b289      	uxth	r1, r1
   8197e:	463a      	mov	r2, r7
   81980:	4633      	mov	r3, r6
   81982:	4f42      	ldr	r7, [pc, #264]	; (81a8c <prvTimerTask+0x160>)
   81984:	47b8      	blx	r7
   81986:	2801      	cmp	r0, #1
   81988:	d10b      	bne.n	819a2 <prvTimerTask+0x76>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   8198a:	2300      	movs	r3, #0
   8198c:	9300      	str	r3, [sp, #0]
   8198e:	4620      	mov	r0, r4
   81990:	4619      	mov	r1, r3
   81992:	4632      	mov	r2, r6
   81994:	4e3e      	ldr	r6, [pc, #248]	; (81a90 <prvTimerTask+0x164>)
   81996:	47b0      	blx	r6
			configASSERT( xResult );
   81998:	b918      	cbnz	r0, 819a2 <prvTimerTask+0x76>
   8199a:	4b3e      	ldr	r3, [pc, #248]	; (81a94 <prvTimerTask+0x168>)
   8199c:	4798      	blx	r3
   8199e:	bf00      	nop
   819a0:	e7fd      	b.n	8199e <prvTimerTask+0x72>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   819a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   819a4:	4620      	mov	r0, r4
   819a6:	4798      	blx	r3
   819a8:	e00d      	b.n	819c6 <prvTimerTask+0x9a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   819aa:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   819ac:	1bf1      	subs	r1, r6, r7
   819ae:	6828      	ldr	r0, [r5, #0]
   819b0:	b289      	uxth	r1, r1
   819b2:	4b39      	ldr	r3, [pc, #228]	; (81a98 <prvTimerTask+0x16c>)
   819b4:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   819b6:	4b34      	ldr	r3, [pc, #208]	; (81a88 <prvTimerTask+0x15c>)
   819b8:	4798      	blx	r3
   819ba:	b920      	cbnz	r0, 819c6 <prvTimerTask+0x9a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   819bc:	4b37      	ldr	r3, [pc, #220]	; (81a9c <prvTimerTask+0x170>)
   819be:	4798      	blx	r3
   819c0:	e001      	b.n	819c6 <prvTimerTask+0x9a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   819c2:	4b31      	ldr	r3, [pc, #196]	; (81a88 <prvTimerTask+0x15c>)
   819c4:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   819c6:	a802      	add	r0, sp, #8
   819c8:	4b2e      	ldr	r3, [pc, #184]	; (81a84 <prvTimerTask+0x158>)
   819ca:	4798      	blx	r3
   819cc:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   819ce:	4e34      	ldr	r6, [pc, #208]	; (81aa0 <prvTimerTask+0x174>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   819d0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 81a8c <prvTimerTask+0x160>
   819d4:	e03e      	b.n	81a54 <prvTimerTask+0x128>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   819d6:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   819d8:	b11c      	cbz	r4, 819e2 <prvTimerTask+0xb6>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   819da:	6961      	ldr	r1, [r4, #20]
   819dc:	b109      	cbz	r1, 819e2 <prvTimerTask+0xb6>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   819de:	1d20      	adds	r0, r4, #4
   819e0:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   819e2:	9903      	ldr	r1, [sp, #12]
   819e4:	2902      	cmp	r1, #2
   819e6:	d023      	beq.n	81a30 <prvTimerTask+0x104>
   819e8:	2903      	cmp	r1, #3
   819ea:	d030      	beq.n	81a4e <prvTimerTask+0x122>
   819ec:	2900      	cmp	r1, #0
   819ee:	d131      	bne.n	81a54 <prvTimerTask+0x128>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   819f0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   819f4:	8b21      	ldrh	r1, [r4, #24]
   819f6:	4419      	add	r1, r3
   819f8:	4620      	mov	r0, r4
   819fa:	b289      	uxth	r1, r1
   819fc:	463a      	mov	r2, r7
   819fe:	47c8      	blx	r9
   81a00:	2801      	cmp	r0, #1
   81a02:	d127      	bne.n	81a54 <prvTimerTask+0x128>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81a04:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81a06:	4620      	mov	r0, r4
   81a08:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81a0a:	69e3      	ldr	r3, [r4, #28]
   81a0c:	2b01      	cmp	r3, #1
   81a0e:	d121      	bne.n	81a54 <prvTimerTask+0x128>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81a10:	8b22      	ldrh	r2, [r4, #24]
   81a12:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   81a16:	441a      	add	r2, r3
   81a18:	2300      	movs	r3, #0
   81a1a:	9300      	str	r3, [sp, #0]
   81a1c:	4620      	mov	r0, r4
   81a1e:	4619      	mov	r1, r3
   81a20:	b292      	uxth	r2, r2
   81a22:	4c1b      	ldr	r4, [pc, #108]	; (81a90 <prvTimerTask+0x164>)
   81a24:	47a0      	blx	r4
						configASSERT( xResult );
   81a26:	b9a8      	cbnz	r0, 81a54 <prvTimerTask+0x128>
   81a28:	4b1a      	ldr	r3, [pc, #104]	; (81a94 <prvTimerTask+0x168>)
   81a2a:	4798      	blx	r3
   81a2c:	bf00      	nop
   81a2e:	e7fd      	b.n	81a2c <prvTimerTask+0x100>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   81a30:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   81a34:	8323      	strh	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81a36:	b91b      	cbnz	r3, 81a40 <prvTimerTask+0x114>
   81a38:	4b16      	ldr	r3, [pc, #88]	; (81a94 <prvTimerTask+0x168>)
   81a3a:	4798      	blx	r3
   81a3c:	bf00      	nop
   81a3e:	e7fd      	b.n	81a3c <prvTimerTask+0x110>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81a40:	18f9      	adds	r1, r7, r3
   81a42:	4620      	mov	r0, r4
   81a44:	b289      	uxth	r1, r1
   81a46:	463a      	mov	r2, r7
   81a48:	463b      	mov	r3, r7
   81a4a:	47c8      	blx	r9
   81a4c:	e002      	b.n	81a54 <prvTimerTask+0x128>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   81a4e:	4620      	mov	r0, r4
   81a50:	4b14      	ldr	r3, [pc, #80]	; (81aa4 <prvTimerTask+0x178>)
   81a52:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81a54:	6828      	ldr	r0, [r5, #0]
   81a56:	a903      	add	r1, sp, #12
   81a58:	2200      	movs	r2, #0
   81a5a:	4613      	mov	r3, r2
   81a5c:	47b0      	blx	r6
   81a5e:	2800      	cmp	r0, #0
   81a60:	d1b9      	bne.n	819d6 <prvTimerTask+0xaa>
   81a62:	e769      	b.n	81938 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81a64:	4b06      	ldr	r3, [pc, #24]	; (81a80 <prvTimerTask+0x154>)
   81a66:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81a68:	a803      	add	r0, sp, #12
   81a6a:	4b06      	ldr	r3, [pc, #24]	; (81a84 <prvTimerTask+0x158>)
   81a6c:	4798      	blx	r3
   81a6e:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81a70:	9b03      	ldr	r3, [sp, #12]
   81a72:	2b00      	cmp	r3, #0
   81a74:	d099      	beq.n	819aa <prvTimerTask+0x7e>
   81a76:	e7a4      	b.n	819c2 <prvTimerTask+0x96>
   81a78:	20078bf0 	.word	0x20078bf0
   81a7c:	20078bc0 	.word	0x20078bc0
   81a80:	00081029 	.word	0x00081029
   81a84:	00081871 	.word	0x00081871
   81a88:	00081185 	.word	0x00081185
   81a8c:	00081721 	.word	0x00081721
   81a90:	00081819 	.word	0x00081819
   81a94:	000805b5 	.word	0x000805b5
   81a98:	00080d0d 	.word	0x00080d0d
   81a9c:	000805a5 	.word	0x000805a5
   81aa0:	00080ba9 	.word	0x00080ba9
   81aa4:	000807d5 	.word	0x000807d5
   81aa8:	0008052d 	.word	0x0008052d

00081aac <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   81aac:	b500      	push	{lr}
   81aae:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   81ab0:	4813      	ldr	r0, [pc, #76]	; (81b00 <USART0_Handler+0x54>)
   81ab2:	f10d 0107 	add.w	r1, sp, #7
   81ab6:	2201      	movs	r2, #1
   81ab8:	4b12      	ldr	r3, [pc, #72]	; (81b04 <USART0_Handler+0x58>)
   81aba:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   81abc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   81abe:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   81ac2:	2200      	movs	r2, #0
   81ac4:	4b10      	ldr	r3, [pc, #64]	; (81b08 <USART0_Handler+0x5c>)
   81ac6:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   81ac8:	4b10      	ldr	r3, [pc, #64]	; (81b0c <USART0_Handler+0x60>)
   81aca:	781a      	ldrb	r2, [r3, #0]
   81acc:	3201      	adds	r2, #1
   81ace:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   81ad0:	4b0f      	ldr	r3, [pc, #60]	; (81b10 <USART0_Handler+0x64>)
   81ad2:	781b      	ldrb	r3, [r3, #0]
   81ad4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   81ad8:	4a0e      	ldr	r2, [pc, #56]	; (81b14 <USART0_Handler+0x68>)
   81ada:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   81adc:	2b9b      	cmp	r3, #155	; 0x9b
   81ade:	d103      	bne.n	81ae8 <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   81ae0:	2200      	movs	r2, #0
   81ae2:	4b0b      	ldr	r3, [pc, #44]	; (81b10 <USART0_Handler+0x64>)
   81ae4:	701a      	strb	r2, [r3, #0]
   81ae6:	e002      	b.n	81aee <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   81ae8:	3301      	adds	r3, #1
   81aea:	4a09      	ldr	r2, [pc, #36]	; (81b10 <USART0_Handler+0x64>)
   81aec:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   81aee:	2201      	movs	r2, #1
   81af0:	4b05      	ldr	r3, [pc, #20]	; (81b08 <USART0_Handler+0x5c>)
   81af2:	701a      	strb	r2, [r3, #0]
   81af4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   81af8:	b662      	cpsie	i
}
   81afa:	b003      	add	sp, #12
   81afc:	f85d fb04 	ldr.w	pc, [sp], #4
   81b00:	40098000 	.word	0x40098000
   81b04:	00082071 	.word	0x00082071
   81b08:	20070188 	.word	0x20070188
   81b0c:	20078c95 	.word	0x20078c95
   81b10:	20078c94 	.word	0x20078c94
   81b14:	20078bf8 	.word	0x20078bf8

00081b18 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   81b18:	b5f0      	push	{r4, r5, r6, r7, lr}
   81b1a:	b083      	sub	sp, #12
   81b1c:	4604      	mov	r4, r0
   81b1e:	460d      	mov	r5, r1
	uint32_t val = 0;
   81b20:	2300      	movs	r3, #0
   81b22:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81b24:	4b1f      	ldr	r3, [pc, #124]	; (81ba4 <usart_serial_getchar+0x8c>)
   81b26:	4298      	cmp	r0, r3
   81b28:	d107      	bne.n	81b3a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   81b2a:	461f      	mov	r7, r3
   81b2c:	4e1e      	ldr	r6, [pc, #120]	; (81ba8 <usart_serial_getchar+0x90>)
   81b2e:	4638      	mov	r0, r7
   81b30:	4629      	mov	r1, r5
   81b32:	47b0      	blx	r6
   81b34:	2800      	cmp	r0, #0
   81b36:	d1fa      	bne.n	81b2e <usart_serial_getchar+0x16>
   81b38:	e019      	b.n	81b6e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81b3a:	4b1c      	ldr	r3, [pc, #112]	; (81bac <usart_serial_getchar+0x94>)
   81b3c:	4298      	cmp	r0, r3
   81b3e:	d109      	bne.n	81b54 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   81b40:	461f      	mov	r7, r3
   81b42:	4e1b      	ldr	r6, [pc, #108]	; (81bb0 <usart_serial_getchar+0x98>)
   81b44:	4638      	mov	r0, r7
   81b46:	a901      	add	r1, sp, #4
   81b48:	47b0      	blx	r6
   81b4a:	2800      	cmp	r0, #0
   81b4c:	d1fa      	bne.n	81b44 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   81b4e:	9b01      	ldr	r3, [sp, #4]
   81b50:	702b      	strb	r3, [r5, #0]
   81b52:	e019      	b.n	81b88 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81b54:	4b17      	ldr	r3, [pc, #92]	; (81bb4 <usart_serial_getchar+0x9c>)
   81b56:	4298      	cmp	r0, r3
   81b58:	d109      	bne.n	81b6e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   81b5a:	461e      	mov	r6, r3
   81b5c:	4c14      	ldr	r4, [pc, #80]	; (81bb0 <usart_serial_getchar+0x98>)
   81b5e:	4630      	mov	r0, r6
   81b60:	a901      	add	r1, sp, #4
   81b62:	47a0      	blx	r4
   81b64:	2800      	cmp	r0, #0
   81b66:	d1fa      	bne.n	81b5e <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   81b68:	9b01      	ldr	r3, [sp, #4]
   81b6a:	702b      	strb	r3, [r5, #0]
   81b6c:	e018      	b.n	81ba0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81b6e:	4b12      	ldr	r3, [pc, #72]	; (81bb8 <usart_serial_getchar+0xa0>)
   81b70:	429c      	cmp	r4, r3
   81b72:	d109      	bne.n	81b88 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   81b74:	461e      	mov	r6, r3
   81b76:	4c0e      	ldr	r4, [pc, #56]	; (81bb0 <usart_serial_getchar+0x98>)
   81b78:	4630      	mov	r0, r6
   81b7a:	a901      	add	r1, sp, #4
   81b7c:	47a0      	blx	r4
   81b7e:	2800      	cmp	r0, #0
   81b80:	d1fa      	bne.n	81b78 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   81b82:	9b01      	ldr	r3, [sp, #4]
   81b84:	702b      	strb	r3, [r5, #0]
   81b86:	e00b      	b.n	81ba0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81b88:	4b0c      	ldr	r3, [pc, #48]	; (81bbc <usart_serial_getchar+0xa4>)
   81b8a:	429c      	cmp	r4, r3
   81b8c:	d108      	bne.n	81ba0 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   81b8e:	461e      	mov	r6, r3
   81b90:	4c07      	ldr	r4, [pc, #28]	; (81bb0 <usart_serial_getchar+0x98>)
   81b92:	4630      	mov	r0, r6
   81b94:	a901      	add	r1, sp, #4
   81b96:	47a0      	blx	r4
   81b98:	2800      	cmp	r0, #0
   81b9a:	d1fa      	bne.n	81b92 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   81b9c:	9b01      	ldr	r3, [sp, #4]
   81b9e:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   81ba0:	b003      	add	sp, #12
   81ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81ba4:	400e0800 	.word	0x400e0800
   81ba8:	0008217d 	.word	0x0008217d
   81bac:	40098000 	.word	0x40098000
   81bb0:	00080495 	.word	0x00080495
   81bb4:	4009c000 	.word	0x4009c000
   81bb8:	400a0000 	.word	0x400a0000
   81bbc:	400a4000 	.word	0x400a4000

00081bc0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   81bc0:	b570      	push	{r4, r5, r6, lr}
   81bc2:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81bc4:	4b21      	ldr	r3, [pc, #132]	; (81c4c <usart_serial_putchar+0x8c>)
   81bc6:	4298      	cmp	r0, r3
   81bc8:	d107      	bne.n	81bda <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   81bca:	461e      	mov	r6, r3
   81bcc:	4d20      	ldr	r5, [pc, #128]	; (81c50 <usart_serial_putchar+0x90>)
   81bce:	4630      	mov	r0, r6
   81bd0:	4621      	mov	r1, r4
   81bd2:	47a8      	blx	r5
   81bd4:	2800      	cmp	r0, #0
   81bd6:	d1fa      	bne.n	81bce <usart_serial_putchar+0xe>
   81bd8:	e02b      	b.n	81c32 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81bda:	4b1e      	ldr	r3, [pc, #120]	; (81c54 <usart_serial_putchar+0x94>)
   81bdc:	4298      	cmp	r0, r3
   81bde:	d107      	bne.n	81bf0 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   81be0:	461e      	mov	r6, r3
   81be2:	4d1d      	ldr	r5, [pc, #116]	; (81c58 <usart_serial_putchar+0x98>)
   81be4:	4630      	mov	r0, r6
   81be6:	4621      	mov	r1, r4
   81be8:	47a8      	blx	r5
   81bea:	2800      	cmp	r0, #0
   81bec:	d1fa      	bne.n	81be4 <usart_serial_putchar+0x24>
   81bee:	e022      	b.n	81c36 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81bf0:	4b1a      	ldr	r3, [pc, #104]	; (81c5c <usart_serial_putchar+0x9c>)
   81bf2:	4298      	cmp	r0, r3
   81bf4:	d107      	bne.n	81c06 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   81bf6:	461e      	mov	r6, r3
   81bf8:	4d17      	ldr	r5, [pc, #92]	; (81c58 <usart_serial_putchar+0x98>)
   81bfa:	4630      	mov	r0, r6
   81bfc:	4621      	mov	r1, r4
   81bfe:	47a8      	blx	r5
   81c00:	2800      	cmp	r0, #0
   81c02:	d1fa      	bne.n	81bfa <usart_serial_putchar+0x3a>
   81c04:	e019      	b.n	81c3a <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81c06:	4b16      	ldr	r3, [pc, #88]	; (81c60 <usart_serial_putchar+0xa0>)
   81c08:	4298      	cmp	r0, r3
   81c0a:	d107      	bne.n	81c1c <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   81c0c:	461e      	mov	r6, r3
   81c0e:	4d12      	ldr	r5, [pc, #72]	; (81c58 <usart_serial_putchar+0x98>)
   81c10:	4630      	mov	r0, r6
   81c12:	4621      	mov	r1, r4
   81c14:	47a8      	blx	r5
   81c16:	2800      	cmp	r0, #0
   81c18:	d1fa      	bne.n	81c10 <usart_serial_putchar+0x50>
   81c1a:	e010      	b.n	81c3e <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81c1c:	4b11      	ldr	r3, [pc, #68]	; (81c64 <usart_serial_putchar+0xa4>)
   81c1e:	4298      	cmp	r0, r3
   81c20:	d10f      	bne.n	81c42 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   81c22:	461e      	mov	r6, r3
   81c24:	4d0c      	ldr	r5, [pc, #48]	; (81c58 <usart_serial_putchar+0x98>)
   81c26:	4630      	mov	r0, r6
   81c28:	4621      	mov	r1, r4
   81c2a:	47a8      	blx	r5
   81c2c:	2800      	cmp	r0, #0
   81c2e:	d1fa      	bne.n	81c26 <usart_serial_putchar+0x66>
   81c30:	e009      	b.n	81c46 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   81c32:	2001      	movs	r0, #1
   81c34:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81c36:	2001      	movs	r0, #1
   81c38:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81c3a:	2001      	movs	r0, #1
   81c3c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81c3e:	2001      	movs	r0, #1
   81c40:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   81c42:	2000      	movs	r0, #0
   81c44:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81c46:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   81c48:	bd70      	pop	{r4, r5, r6, pc}
   81c4a:	bf00      	nop
   81c4c:	400e0800 	.word	0x400e0800
   81c50:	0008216d 	.word	0x0008216d
   81c54:	40098000 	.word	0x40098000
   81c58:	00080481 	.word	0x00080481
   81c5c:	4009c000 	.word	0x4009c000
   81c60:	400a0000 	.word	0x400a0000
   81c64:	400a4000 	.word	0x400a4000

00081c68 <configureConsole>:
#include "consoleFunctions.h"

void configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   81c68:	b530      	push	{r4, r5, lr}
   81c6a:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81c6c:	2008      	movs	r0, #8
   81c6e:	4d12      	ldr	r5, [pc, #72]	; (81cb8 <configureConsole+0x50>)
   81c70:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   81c72:	4c12      	ldr	r4, [pc, #72]	; (81cbc <configureConsole+0x54>)
   81c74:	4b12      	ldr	r3, [pc, #72]	; (81cc0 <configureConsole+0x58>)
   81c76:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81c78:	4a12      	ldr	r2, [pc, #72]	; (81cc4 <configureConsole+0x5c>)
   81c7a:	4b13      	ldr	r3, [pc, #76]	; (81cc8 <configureConsole+0x60>)
   81c7c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81c7e:	4a13      	ldr	r2, [pc, #76]	; (81ccc <configureConsole+0x64>)
   81c80:	4b13      	ldr	r3, [pc, #76]	; (81cd0 <configureConsole+0x68>)
   81c82:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   81c84:	4b13      	ldr	r3, [pc, #76]	; (81cd4 <configureConsole+0x6c>)
   81c86:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   81c88:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   81c8c:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   81c8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81c92:	9303      	str	r3, [sp, #12]
   81c94:	2008      	movs	r0, #8
   81c96:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   81c98:	4620      	mov	r0, r4
   81c9a:	a901      	add	r1, sp, #4
   81c9c:	4b0e      	ldr	r3, [pc, #56]	; (81cd8 <configureConsole+0x70>)
   81c9e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81ca0:	4d0e      	ldr	r5, [pc, #56]	; (81cdc <configureConsole+0x74>)
   81ca2:	682b      	ldr	r3, [r5, #0]
   81ca4:	6898      	ldr	r0, [r3, #8]
   81ca6:	2100      	movs	r1, #0
   81ca8:	4c0d      	ldr	r4, [pc, #52]	; (81ce0 <configureConsole+0x78>)
   81caa:	47a0      	blx	r4
	setbuf(stdin, NULL);
   81cac:	682b      	ldr	r3, [r5, #0]
   81cae:	6858      	ldr	r0, [r3, #4]
   81cb0:	2100      	movs	r1, #0
   81cb2:	47a0      	blx	r4
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	//printf("Console ready\n");
	//printf("=============\n");
   81cb4:	b005      	add	sp, #20
   81cb6:	bd30      	pop	{r4, r5, pc}
   81cb8:	0008262d 	.word	0x0008262d
   81cbc:	400e0800 	.word	0x400e0800
   81cc0:	20078d8c 	.word	0x20078d8c
   81cc4:	00081bc1 	.word	0x00081bc1
   81cc8:	20078d88 	.word	0x20078d88
   81ccc:	00081b19 	.word	0x00081b19
   81cd0:	20078d64 	.word	0x20078d64
   81cd4:	0501bd00 	.word	0x0501bd00
   81cd8:	00082135 	.word	0x00082135
   81cdc:	200705b8 	.word	0x200705b8
   81ce0:	00082b15 	.word	0x00082b15

00081ce4 <init_twi_functions>:
	.buffer			= (void*) data_received_nav,
	.length			= TWI_DATA_RECIEVE_LENGTH_NA
};

//Sets due to master
void init_twi_functions(){
   81ce4:	b500      	push	{lr}
   81ce6:	b085      	sub	sp, #20
	twi_master_options_t opt;
	opt.speed = TWI_SPEED;
   81ce8:	4b08      	ldr	r3, [pc, #32]	; (81d0c <init_twi_functions+0x28>)
   81cea:	9302      	str	r3, [sp, #8]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_cpu_hz();
   81cec:	4b08      	ldr	r3, [pc, #32]	; (81d10 <init_twi_functions+0x2c>)
   81cee:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
   81cf0:	2300      	movs	r3, #0
   81cf2:	f88d 300d 	strb.w	r3, [sp, #13]
   81cf6:	2016      	movs	r0, #22
   81cf8:	4b06      	ldr	r3, [pc, #24]	; (81d14 <init_twi_functions+0x30>)
   81cfa:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   81cfc:	4806      	ldr	r0, [pc, #24]	; (81d18 <init_twi_functions+0x34>)
   81cfe:	a901      	add	r1, sp, #4
   81d00:	4b06      	ldr	r3, [pc, #24]	; (81d1c <init_twi_functions+0x38>)
   81d02:	4798      	blx	r3
	if(twi_master_setup(TWI_MASTER,&opt) == TWI_SUCCESS){
	}
}
   81d04:	b005      	add	sp, #20
   81d06:	f85d fb04 	ldr.w	pc, [sp], #4
   81d0a:	bf00      	nop
   81d0c:	000186a0 	.word	0x000186a0
   81d10:	0501bd00 	.word	0x0501bd00
   81d14:	0008262d 	.word	0x0008262d
   81d18:	4008c000 	.word	0x4008c000
   81d1c:	000802cd 	.word	0x000802cd

00081d20 <send_package>:
		break;
	}	
}


void  send_package(uint8_t twi_state,uint8_t slave){
   81d20:	b570      	push	{r4, r5, r6, lr}
   81d22:	4605      	mov	r5, r0
   81d24:	460c      	mov	r4, r1
	printf("in send\n");
   81d26:	481a      	ldr	r0, [pc, #104]	; (81d90 <send_package+0x70>)
   81d28:	4b1a      	ldr	r3, [pc, #104]	; (81d94 <send_package+0x74>)
   81d2a:	4798      	blx	r3
	char sts[20];
	
	if(TWI_SLAVE_NAVIGERING == slave){
   81d2c:	2c03      	cmp	r4, #3
   81d2e:	d116      	bne.n	81d5e <send_package+0x3e>
		printf("NAV PACK");
   81d30:	4819      	ldr	r0, [pc, #100]	; (81d98 <send_package+0x78>)
   81d32:	4c18      	ldr	r4, [pc, #96]	; (81d94 <send_package+0x74>)
   81d34:	47a0      	blx	r4
		send_data_nav[0] = twi_state;
   81d36:	4a19      	ldr	r2, [pc, #100]	; (81d9c <send_package+0x7c>)
   81d38:	7015      	strb	r5, [r2, #0]
		packet_nav.chip = slave;
   81d3a:	4b19      	ldr	r3, [pc, #100]	; (81da0 <send_package+0x80>)
   81d3c:	2103      	movs	r1, #3
   81d3e:	7419      	strb	r1, [r3, #16]
		packet_nav.buffer = (void *)send_data_nav;
   81d40:	609a      	str	r2, [r3, #8]
		printf("TRYING TO SEND\n");
   81d42:	4818      	ldr	r0, [pc, #96]	; (81da4 <send_package+0x84>)
   81d44:	47a0      	blx	r4
		while(twi_master_write(TWI_MASTER,&packet_nav));
   81d46:	4e18      	ldr	r6, [pc, #96]	; (81da8 <send_package+0x88>)
   81d48:	4d15      	ldr	r5, [pc, #84]	; (81da0 <send_package+0x80>)
   81d4a:	4c18      	ldr	r4, [pc, #96]	; (81dac <send_package+0x8c>)
   81d4c:	4630      	mov	r0, r6
   81d4e:	4629      	mov	r1, r5
   81d50:	47a0      	blx	r4
   81d52:	2800      	cmp	r0, #0
   81d54:	d1fa      	bne.n	81d4c <send_package+0x2c>
		printf("done sending nav\n");
   81d56:	4816      	ldr	r0, [pc, #88]	; (81db0 <send_package+0x90>)
   81d58:	4b0e      	ldr	r3, [pc, #56]	; (81d94 <send_package+0x74>)
   81d5a:	4798      	blx	r3
   81d5c:	bd70      	pop	{r4, r5, r6, pc}
		
	}else if(TWI_SLAVE_PABYGGNAD == slave){
   81d5e:	2c02      	cmp	r4, #2
   81d60:	d115      	bne.n	81d8e <send_package+0x6e>
		printf("PAB PACK0");
   81d62:	4814      	ldr	r0, [pc, #80]	; (81db4 <send_package+0x94>)
   81d64:	4c0b      	ldr	r4, [pc, #44]	; (81d94 <send_package+0x74>)
   81d66:	47a0      	blx	r4
		send_data_pab[0] = twi_state;
   81d68:	4a13      	ldr	r2, [pc, #76]	; (81db8 <send_package+0x98>)
   81d6a:	7015      	strb	r5, [r2, #0]
		packet_pab.chip = slave;
   81d6c:	4b13      	ldr	r3, [pc, #76]	; (81dbc <send_package+0x9c>)
   81d6e:	2102      	movs	r1, #2
   81d70:	7419      	strb	r1, [r3, #16]
		packet_pab.buffer = (void *)send_data_pab;
   81d72:	609a      	str	r2, [r3, #8]
		printf("TRYING TO SEND\n");
   81d74:	480b      	ldr	r0, [pc, #44]	; (81da4 <send_package+0x84>)
   81d76:	47a0      	blx	r4
		while(twi_master_write(TWI_MASTER,&packet_pab));
   81d78:	4e0b      	ldr	r6, [pc, #44]	; (81da8 <send_package+0x88>)
   81d7a:	4d10      	ldr	r5, [pc, #64]	; (81dbc <send_package+0x9c>)
   81d7c:	4c0b      	ldr	r4, [pc, #44]	; (81dac <send_package+0x8c>)
   81d7e:	4630      	mov	r0, r6
   81d80:	4629      	mov	r1, r5
   81d82:	47a0      	blx	r4
   81d84:	2800      	cmp	r0, #0
   81d86:	d1fa      	bne.n	81d7e <send_package+0x5e>
		printf("done sending pab\n");
   81d88:	480d      	ldr	r0, [pc, #52]	; (81dc0 <send_package+0xa0>)
   81d8a:	4b02      	ldr	r3, [pc, #8]	; (81d94 <send_package+0x74>)
   81d8c:	4798      	blx	r3
   81d8e:	bd70      	pop	{r4, r5, r6, pc}
   81d90:	00088ef4 	.word	0x00088ef4
   81d94:	0008296d 	.word	0x0008296d
   81d98:	00088f00 	.word	0x00088f00
   81d9c:	20078c9c 	.word	0x20078c9c
   81da0:	20070174 	.word	0x20070174
   81da4:	00088f0c 	.word	0x00088f0c
   81da8:	4008c000 	.word	0x4008c000
   81dac:	000803e1 	.word	0x000803e1
   81db0:	00088f1c 	.word	0x00088f1c
   81db4:	00088f30 	.word	0x00088f30
   81db8:	20078c98 	.word	0x20078c98
   81dbc:	20070160 	.word	0x20070160
   81dc0:	00088f3c 	.word	0x00088f3c

00081dc4 <receive_package>:
}

/************************************************************************/
/*                                                                      */
/************************************************************************/
void receive_package(uint8_t slave){
   81dc4:	b570      	push	{r4, r5, r6, lr}
   81dc6:	4604      	mov	r4, r0
	printf("Start of receive\n");
   81dc8:	4812      	ldr	r0, [pc, #72]	; (81e14 <receive_package+0x50>)
   81dca:	4b13      	ldr	r3, [pc, #76]	; (81e18 <receive_package+0x54>)
   81dcc:	4798      	blx	r3
	char str[20];
	
	if (slave == TWI_SLAVE_NAVIGERING){
   81dce:	2c03      	cmp	r4, #3
   81dd0:	d10e      	bne.n	81df0 <receive_package+0x2c>
		printf("TRYing to receive nav");
   81dd2:	4812      	ldr	r0, [pc, #72]	; (81e1c <receive_package+0x58>)
   81dd4:	4b10      	ldr	r3, [pc, #64]	; (81e18 <receive_package+0x54>)
   81dd6:	4798      	blx	r3
		while(twi_master_read(TWI_MASTER, &packet_received_nav) != TWI_SUCCESS);
   81dd8:	4e11      	ldr	r6, [pc, #68]	; (81e20 <receive_package+0x5c>)
   81dda:	4d12      	ldr	r5, [pc, #72]	; (81e24 <receive_package+0x60>)
   81ddc:	4c12      	ldr	r4, [pc, #72]	; (81e28 <receive_package+0x64>)
   81dde:	4630      	mov	r0, r6
   81de0:	4629      	mov	r1, r5
   81de2:	47a0      	blx	r4
   81de4:	2800      	cmp	r0, #0
   81de6:	d1fa      	bne.n	81dde <receive_package+0x1a>
		printf("done sending");
   81de8:	4810      	ldr	r0, [pc, #64]	; (81e2c <receive_package+0x68>)
   81dea:	4b0b      	ldr	r3, [pc, #44]	; (81e18 <receive_package+0x54>)
   81dec:	4798      	blx	r3
   81dee:	bd70      	pop	{r4, r5, r6, pc}
	
	}else if(slave == TWI_SLAVE_PABYGGNAD){
   81df0:	2c02      	cmp	r4, #2
   81df2:	d10d      	bne.n	81e10 <receive_package+0x4c>
		printf("TRYing to receive Pa");
   81df4:	480e      	ldr	r0, [pc, #56]	; (81e30 <receive_package+0x6c>)
   81df6:	4b08      	ldr	r3, [pc, #32]	; (81e18 <receive_package+0x54>)
   81df8:	4798      	blx	r3
		while(twi_master_read(TWI_MASTER, &packet_received_pab) != TWI_SUCCESS);
   81dfa:	4e09      	ldr	r6, [pc, #36]	; (81e20 <receive_package+0x5c>)
   81dfc:	4d0d      	ldr	r5, [pc, #52]	; (81e34 <receive_package+0x70>)
   81dfe:	4c0a      	ldr	r4, [pc, #40]	; (81e28 <receive_package+0x64>)
   81e00:	4630      	mov	r0, r6
   81e02:	4629      	mov	r1, r5
   81e04:	47a0      	blx	r4
   81e06:	2800      	cmp	r0, #0
   81e08:	d1fa      	bne.n	81e00 <receive_package+0x3c>
		printf("done sending");
   81e0a:	4808      	ldr	r0, [pc, #32]	; (81e2c <receive_package+0x68>)
   81e0c:	4b02      	ldr	r3, [pc, #8]	; (81e18 <receive_package+0x54>)
   81e0e:	4798      	blx	r3
   81e10:	bd70      	pop	{r4, r5, r6, pc}
   81e12:	bf00      	nop
   81e14:	00088f50 	.word	0x00088f50
   81e18:	0008296d 	.word	0x0008296d
   81e1c:	00088f64 	.word	0x00088f64
   81e20:	4008c000 	.word	0x4008c000
   81e24:	2007014c 	.word	0x2007014c
   81e28:	0008030d 	.word	0x0008030d
   81e2c:	00088f7c 	.word	0x00088f7c
   81e30:	00088f8c 	.word	0x00088f8c
   81e34:	20070138 	.word	0x20070138

00081e38 <na_sendstatus>:
	if(twi_master_setup(TWI_MASTER,&opt) == TWI_SUCCESS){
	}
}


void na_sendstatus(TwiCmd twi_state){
   81e38:	b570      	push	{r4, r5, r6, lr}
   81e3a:	b086      	sub	sp, #24
	char ar[20];
	switch(twi_state){
   81e3c:	3850      	subs	r0, #80	; 0x50
   81e3e:	2805      	cmp	r0, #5
   81e40:	f200 80cf 	bhi.w	81fe2 <na_sendstatus+0x1aa>
   81e44:	e8df f010 	tbh	[pc, r0, lsl #1]
   81e48:	000e0006 	.word	0x000e0006
   81e4c:	00440016 	.word	0x00440016
   81e50:	00a00072 	.word	0x00a00072
		//Led 1 position
		case XY1:
		send_package(XY1,TWI_SLAVE_NAVIGERING);
   81e54:	2050      	movs	r0, #80	; 0x50
   81e56:	2103      	movs	r1, #3
   81e58:	4b63      	ldr	r3, [pc, #396]	; (81fe8 <na_sendstatus+0x1b0>)
   81e5a:	4798      	blx	r3
		receive_package(TWI_SLAVE_NAVIGERING);
   81e5c:	2003      	movs	r0, #3
   81e5e:	4b63      	ldr	r3, [pc, #396]	; (81fec <na_sendstatus+0x1b4>)
   81e60:	4798      	blx	r3
		break;
   81e62:	e0be      	b.n	81fe2 <na_sendstatus+0x1aa>
		//Led 2 position
		case XY2:
		send_package(XY2,TWI_SLAVE_NAVIGERING);
   81e64:	2051      	movs	r0, #81	; 0x51
   81e66:	2103      	movs	r1, #3
   81e68:	4b5f      	ldr	r3, [pc, #380]	; (81fe8 <na_sendstatus+0x1b0>)
   81e6a:	4798      	blx	r3
		receive_package(TWI_SLAVE_NAVIGERING);
   81e6c:	2003      	movs	r0, #3
   81e6e:	4b5f      	ldr	r3, [pc, #380]	; (81fec <na_sendstatus+0x1b4>)
   81e70:	4798      	blx	r3
		break;
   81e72:	e0b6      	b.n	81fe2 <na_sendstatus+0x1aa>
		//socket position
		case SOCKETXY:
		send_package(SOCKETXY,TWI_SLAVE_NAVIGERING);
   81e74:	2052      	movs	r0, #82	; 0x52
   81e76:	2103      	movs	r1, #3
   81e78:	4b5b      	ldr	r3, [pc, #364]	; (81fe8 <na_sendstatus+0x1b0>)
   81e7a:	4798      	blx	r3
		receive_package(TWI_SLAVE_NAVIGERING);
   81e7c:	2003      	movs	r0, #3
   81e7e:	4b5b      	ldr	r3, [pc, #364]	; (81fec <na_sendstatus+0x1b4>)
   81e80:	4798      	blx	r3
		objectinfo[0].theObject = SOCK;
   81e82:	4c5b      	ldr	r4, [pc, #364]	; (81ff0 <na_sendstatus+0x1b8>)
   81e84:	2302      	movs	r3, #2
   81e86:	7023      	strb	r3, [r4, #0]
		objectinfo[0].xpos = ((data_received_nav[1] << 8) | (data_received_nav[2] << 0));
   81e88:	4b5a      	ldr	r3, [pc, #360]	; (81ff4 <na_sendstatus+0x1bc>)
   81e8a:	7859      	ldrb	r1, [r3, #1]
   81e8c:	789a      	ldrb	r2, [r3, #2]
   81e8e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   81e92:	8062      	strh	r2, [r4, #2]
		objectinfo[0].ypox = ((data_received_nav[3] << 8) | (data_received_nav[4]) <<0);
   81e94:	78da      	ldrb	r2, [r3, #3]
   81e96:	791b      	ldrb	r3, [r3, #4]
   81e98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   81e9c:	80a3      	strh	r3, [r4, #4]
		printf("SOCKET");
   81e9e:	4856      	ldr	r0, [pc, #344]	; (81ff8 <na_sendstatus+0x1c0>)
   81ea0:	4d56      	ldr	r5, [pc, #344]	; (81ffc <na_sendstatus+0x1c4>)
   81ea2:	47a8      	blx	r5
		sprintf(ar,"Object: %d \n", objectinfo[0].theObject);
   81ea4:	a801      	add	r0, sp, #4
   81ea6:	4956      	ldr	r1, [pc, #344]	; (82000 <na_sendstatus+0x1c8>)
   81ea8:	7822      	ldrb	r2, [r4, #0]
   81eaa:	4e56      	ldr	r6, [pc, #344]	; (82004 <na_sendstatus+0x1cc>)
   81eac:	47b0      	blx	r6
		printf(ar);
   81eae:	a801      	add	r0, sp, #4
   81eb0:	47a8      	blx	r5
		sprintf(ar,"xpos: %d \n", objectinfo[0].xpos);
   81eb2:	a801      	add	r0, sp, #4
   81eb4:	4954      	ldr	r1, [pc, #336]	; (82008 <na_sendstatus+0x1d0>)
   81eb6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   81eba:	47b0      	blx	r6
		printf(ar);
   81ebc:	a801      	add	r0, sp, #4
   81ebe:	47a8      	blx	r5
		sprintf(ar,"ypos: %d \n", objectinfo[0].ypox);
   81ec0:	a801      	add	r0, sp, #4
   81ec2:	4952      	ldr	r1, [pc, #328]	; (8200c <na_sendstatus+0x1d4>)
   81ec4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
   81ec8:	47b0      	blx	r6
		printf(ar);
   81eca:	a801      	add	r0, sp, #4
   81ecc:	47a8      	blx	r5
		break;
   81ece:	e088      	b.n	81fe2 <na_sendstatus+0x1aa>
		//Square position
		case SQUAREXY:
		send_package(SQUAREXY,TWI_SLAVE_NAVIGERING);
   81ed0:	2053      	movs	r0, #83	; 0x53
   81ed2:	2103      	movs	r1, #3
   81ed4:	4b44      	ldr	r3, [pc, #272]	; (81fe8 <na_sendstatus+0x1b0>)
   81ed6:	4798      	blx	r3
		receive_package(TWI_SLAVE_NAVIGERING);
   81ed8:	2003      	movs	r0, #3
   81eda:	4b44      	ldr	r3, [pc, #272]	; (81fec <na_sendstatus+0x1b4>)
   81edc:	4798      	blx	r3
		objectinfo[1].theObject = SQUARE;
   81ede:	4c44      	ldr	r4, [pc, #272]	; (81ff0 <na_sendstatus+0x1b8>)
   81ee0:	2303      	movs	r3, #3
   81ee2:	71a3      	strb	r3, [r4, #6]
		objectinfo[1].xpos = ((data_received_nav[1] << 8) | (data_received_nav[2] << 0));
   81ee4:	4b43      	ldr	r3, [pc, #268]	; (81ff4 <na_sendstatus+0x1bc>)
   81ee6:	7859      	ldrb	r1, [r3, #1]
   81ee8:	789a      	ldrb	r2, [r3, #2]
   81eea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   81eee:	8122      	strh	r2, [r4, #8]
		objectinfo[1].ypox = ((data_received_nav[3] << 8) | (data_received_nav[4]) <<0);
   81ef0:	78da      	ldrb	r2, [r3, #3]
   81ef2:	791b      	ldrb	r3, [r3, #4]
   81ef4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   81ef8:	8163      	strh	r3, [r4, #10]
		printf("SQUARE");
   81efa:	4845      	ldr	r0, [pc, #276]	; (82010 <na_sendstatus+0x1d8>)
   81efc:	4d3f      	ldr	r5, [pc, #252]	; (81ffc <na_sendstatus+0x1c4>)
   81efe:	47a8      	blx	r5
		sprintf(ar,"Object: %d \n", objectinfo[1].theObject);
   81f00:	a801      	add	r0, sp, #4
   81f02:	493f      	ldr	r1, [pc, #252]	; (82000 <na_sendstatus+0x1c8>)
   81f04:	79a2      	ldrb	r2, [r4, #6]
   81f06:	4e3f      	ldr	r6, [pc, #252]	; (82004 <na_sendstatus+0x1cc>)
   81f08:	47b0      	blx	r6
		printf(ar);
   81f0a:	a801      	add	r0, sp, #4
   81f0c:	47a8      	blx	r5
		sprintf(ar,"xpos: %d \n", objectinfo[1].xpos);
   81f0e:	a801      	add	r0, sp, #4
   81f10:	493d      	ldr	r1, [pc, #244]	; (82008 <na_sendstatus+0x1d0>)
   81f12:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   81f16:	47b0      	blx	r6
		printf(ar);
   81f18:	a801      	add	r0, sp, #4
   81f1a:	47a8      	blx	r5
		sprintf(ar,"ypos: %d \n", objectinfo[1].ypox);
   81f1c:	a801      	add	r0, sp, #4
   81f1e:	493b      	ldr	r1, [pc, #236]	; (8200c <na_sendstatus+0x1d4>)
   81f20:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   81f24:	47b0      	blx	r6
		printf(ar);
   81f26:	a801      	add	r0, sp, #4
   81f28:	47a8      	blx	r5
		break;
   81f2a:	e05a      	b.n	81fe2 <na_sendstatus+0x1aa>
		//Glass position
		case GLASSXY:
		send_package(GLASSXY,TWI_SLAVE_NAVIGERING);
   81f2c:	2054      	movs	r0, #84	; 0x54
   81f2e:	2103      	movs	r1, #3
   81f30:	4b2d      	ldr	r3, [pc, #180]	; (81fe8 <na_sendstatus+0x1b0>)
   81f32:	4798      	blx	r3
		receive_package(TWI_SLAVE_NAVIGERING);
   81f34:	2003      	movs	r0, #3
   81f36:	4b2d      	ldr	r3, [pc, #180]	; (81fec <na_sendstatus+0x1b4>)
   81f38:	4798      	blx	r3
		objectinfo[2].theObject = GLASS;
   81f3a:	4c2d      	ldr	r4, [pc, #180]	; (81ff0 <na_sendstatus+0x1b8>)
   81f3c:	2304      	movs	r3, #4
   81f3e:	7323      	strb	r3, [r4, #12]
		objectinfo[2].xpos = ((data_received_nav[1] << 8) | (data_received_nav[2] << 0));
   81f40:	4b2c      	ldr	r3, [pc, #176]	; (81ff4 <na_sendstatus+0x1bc>)
   81f42:	7859      	ldrb	r1, [r3, #1]
   81f44:	789a      	ldrb	r2, [r3, #2]
   81f46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   81f4a:	81e2      	strh	r2, [r4, #14]
		objectinfo[2].ypox = ((data_received_nav[3] << 8) | (data_received_nav[4]) <<0);
   81f4c:	78da      	ldrb	r2, [r3, #3]
   81f4e:	791b      	ldrb	r3, [r3, #4]
   81f50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   81f54:	8223      	strh	r3, [r4, #16]
		printf("Glass");
   81f56:	482f      	ldr	r0, [pc, #188]	; (82014 <na_sendstatus+0x1dc>)
   81f58:	4d28      	ldr	r5, [pc, #160]	; (81ffc <na_sendstatus+0x1c4>)
   81f5a:	47a8      	blx	r5
		sprintf(ar,"Object: %d \n", objectinfo[2].theObject);
   81f5c:	a801      	add	r0, sp, #4
   81f5e:	4928      	ldr	r1, [pc, #160]	; (82000 <na_sendstatus+0x1c8>)
   81f60:	7b22      	ldrb	r2, [r4, #12]
   81f62:	4e28      	ldr	r6, [pc, #160]	; (82004 <na_sendstatus+0x1cc>)
   81f64:	47b0      	blx	r6
		printf(ar);
   81f66:	a801      	add	r0, sp, #4
   81f68:	47a8      	blx	r5
		sprintf(ar,"xpos: %d \n", objectinfo[2].xpos);
   81f6a:	a801      	add	r0, sp, #4
   81f6c:	4926      	ldr	r1, [pc, #152]	; (82008 <na_sendstatus+0x1d0>)
   81f6e:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
   81f72:	47b0      	blx	r6
		printf(ar);
   81f74:	a801      	add	r0, sp, #4
   81f76:	47a8      	blx	r5
		sprintf(ar,"ypos: %d \n", objectinfo[2].ypox);
   81f78:	a801      	add	r0, sp, #4
   81f7a:	4924      	ldr	r1, [pc, #144]	; (8200c <na_sendstatus+0x1d4>)
   81f7c:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
   81f80:	47b0      	blx	r6
		printf(ar);
   81f82:	a801      	add	r0, sp, #4
   81f84:	47a8      	blx	r5
		break;
   81f86:	e02c      	b.n	81fe2 <na_sendstatus+0x1aa>
		//Boxgal info
		case BOXGOALXY:
		send_package(BOXGOALXY,TWI_SLAVE_NAVIGERING);
   81f88:	2055      	movs	r0, #85	; 0x55
   81f8a:	2103      	movs	r1, #3
   81f8c:	4b16      	ldr	r3, [pc, #88]	; (81fe8 <na_sendstatus+0x1b0>)
   81f8e:	4798      	blx	r3
		receive_package(TWI_SLAVE_NAVIGERING);
   81f90:	2003      	movs	r0, #3
   81f92:	4b16      	ldr	r3, [pc, #88]	; (81fec <na_sendstatus+0x1b4>)
   81f94:	4798      	blx	r3
		objectinfo[3].theObject = BOXGOALXY;
   81f96:	4c16      	ldr	r4, [pc, #88]	; (81ff0 <na_sendstatus+0x1b8>)
   81f98:	2355      	movs	r3, #85	; 0x55
   81f9a:	74a3      	strb	r3, [r4, #18]
		objectinfo[3].xpos = ((data_received_nav[1] << 8) | (data_received_nav[2] << 0));
   81f9c:	4b15      	ldr	r3, [pc, #84]	; (81ff4 <na_sendstatus+0x1bc>)
   81f9e:	7859      	ldrb	r1, [r3, #1]
   81fa0:	789a      	ldrb	r2, [r3, #2]
   81fa2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   81fa6:	82a2      	strh	r2, [r4, #20]
		objectinfo[3].ypox = ((data_received_nav[3] << 8) | (data_received_nav[4]) <<0);
   81fa8:	78da      	ldrb	r2, [r3, #3]
   81faa:	791b      	ldrb	r3, [r3, #4]
   81fac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   81fb0:	82e3      	strh	r3, [r4, #22]
		printf("BOX");
   81fb2:	4819      	ldr	r0, [pc, #100]	; (82018 <na_sendstatus+0x1e0>)
   81fb4:	4d11      	ldr	r5, [pc, #68]	; (81ffc <na_sendstatus+0x1c4>)
   81fb6:	47a8      	blx	r5
		sprintf(ar,"Object: %d \n", objectinfo[3].theObject);
   81fb8:	a801      	add	r0, sp, #4
   81fba:	4911      	ldr	r1, [pc, #68]	; (82000 <na_sendstatus+0x1c8>)
   81fbc:	7ca2      	ldrb	r2, [r4, #18]
   81fbe:	4e11      	ldr	r6, [pc, #68]	; (82004 <na_sendstatus+0x1cc>)
   81fc0:	47b0      	blx	r6
		printf(ar);
   81fc2:	a801      	add	r0, sp, #4
   81fc4:	47a8      	blx	r5
		sprintf(ar,"xpos: %d \n", objectinfo[3].xpos);
   81fc6:	a801      	add	r0, sp, #4
   81fc8:	490f      	ldr	r1, [pc, #60]	; (82008 <na_sendstatus+0x1d0>)
   81fca:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
   81fce:	47b0      	blx	r6
		printf(ar);
   81fd0:	a801      	add	r0, sp, #4
   81fd2:	47a8      	blx	r5
		sprintf(ar,"ypos: %d \n", objectinfo[3].ypox);
   81fd4:	a801      	add	r0, sp, #4
   81fd6:	490d      	ldr	r1, [pc, #52]	; (8200c <na_sendstatus+0x1d4>)
   81fd8:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   81fdc:	47b0      	blx	r6
		printf(ar);
   81fde:	a801      	add	r0, sp, #4
   81fe0:	47a8      	blx	r5
		break;
	}
	

}
   81fe2:	b006      	add	sp, #24
   81fe4:	bd70      	pop	{r4, r5, r6, pc}
   81fe6:	bf00      	nop
   81fe8:	00081d21 	.word	0x00081d21
   81fec:	00081dc5 	.word	0x00081dc5
   81ff0:	20078d68 	.word	0x20078d68
   81ff4:	20078ca4 	.word	0x20078ca4
   81ff8:	00088fa4 	.word	0x00088fa4
   81ffc:	0008296d 	.word	0x0008296d
   82000:	00088fac 	.word	0x00088fac
   82004:	00082c25 	.word	0x00082c25
   82008:	00088fbc 	.word	0x00088fbc
   8200c:	00088fc8 	.word	0x00088fc8
   82010:	00088fd4 	.word	0x00088fd4
   82014:	00088fdc 	.word	0x00088fdc
   82018:	00088fe4 	.word	0x00088fe4

0008201c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8201c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82020:	460e      	mov	r6, r1
   82022:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   82024:	3801      	subs	r0, #1
   82026:	2802      	cmp	r0, #2
   82028:	d80f      	bhi.n	8204a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   8202a:	b192      	cbz	r2, 82052 <_write+0x36>
   8202c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8202e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8206c <_write+0x50>
   82032:	4f0d      	ldr	r7, [pc, #52]	; (82068 <_write+0x4c>)
   82034:	f8d8 0000 	ldr.w	r0, [r8]
   82038:	5d31      	ldrb	r1, [r6, r4]
   8203a:	683b      	ldr	r3, [r7, #0]
   8203c:	4798      	blx	r3
   8203e:	2800      	cmp	r0, #0
   82040:	db0a      	blt.n	82058 <_write+0x3c>
			return -1;
		}
		++nChars;
   82042:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   82044:	42a5      	cmp	r5, r4
   82046:	d1f5      	bne.n	82034 <_write+0x18>
   82048:	e00a      	b.n	82060 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8204a:	f04f 30ff 	mov.w	r0, #4294967295
   8204e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   82052:	2000      	movs	r0, #0
   82054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   82058:	f04f 30ff 	mov.w	r0, #4294967295
   8205c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   82060:	4620      	mov	r0, r4
	}
	return nChars;
}
   82062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82066:	bf00      	nop
   82068:	20078d88 	.word	0x20078d88
   8206c:	20078d8c 	.word	0x20078d8c

00082070 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   82070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82074:	b083      	sub	sp, #12
   82076:	4605      	mov	r5, r0
	while (len) {
   82078:	4690      	mov	r8, r2
   8207a:	2a00      	cmp	r2, #0
   8207c:	d047      	beq.n	8210e <usart_serial_read_packet+0x9e>
   8207e:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82080:	4f25      	ldr	r7, [pc, #148]	; (82118 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   82082:	4c26      	ldr	r4, [pc, #152]	; (8211c <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   82084:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 82130 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   82088:	f8df b094 	ldr.w	fp, [pc, #148]	; 82120 <usart_serial_read_packet+0xb0>
   8208c:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   82090:	2300      	movs	r3, #0
   82092:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   82094:	4b22      	ldr	r3, [pc, #136]	; (82120 <usart_serial_read_packet+0xb0>)
   82096:	429d      	cmp	r5, r3
   82098:	d106      	bne.n	820a8 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   8209a:	4658      	mov	r0, fp
   8209c:	4649      	mov	r1, r9
   8209e:	4b21      	ldr	r3, [pc, #132]	; (82124 <usart_serial_read_packet+0xb4>)
   820a0:	4798      	blx	r3
   820a2:	2800      	cmp	r0, #0
   820a4:	d1f9      	bne.n	8209a <usart_serial_read_packet+0x2a>
   820a6:	e019      	b.n	820dc <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   820a8:	4b1f      	ldr	r3, [pc, #124]	; (82128 <usart_serial_read_packet+0xb8>)
   820aa:	429d      	cmp	r5, r3
   820ac:	d109      	bne.n	820c2 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   820ae:	4699      	mov	r9, r3
   820b0:	4648      	mov	r0, r9
   820b2:	a901      	add	r1, sp, #4
   820b4:	47a0      	blx	r4
   820b6:	2800      	cmp	r0, #0
   820b8:	d1fa      	bne.n	820b0 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   820ba:	9b01      	ldr	r3, [sp, #4]
   820bc:	f806 3c01 	strb.w	r3, [r6, #-1]
   820c0:	e017      	b.n	820f2 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   820c2:	4b1a      	ldr	r3, [pc, #104]	; (8212c <usart_serial_read_packet+0xbc>)
   820c4:	429d      	cmp	r5, r3
   820c6:	d109      	bne.n	820dc <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   820c8:	4699      	mov	r9, r3
   820ca:	4648      	mov	r0, r9
   820cc:	a901      	add	r1, sp, #4
   820ce:	47a0      	blx	r4
   820d0:	2800      	cmp	r0, #0
   820d2:	d1fa      	bne.n	820ca <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   820d4:	9b01      	ldr	r3, [sp, #4]
   820d6:	f806 3c01 	strb.w	r3, [r6, #-1]
   820da:	e014      	b.n	82106 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   820dc:	4555      	cmp	r5, sl
   820de:	d108      	bne.n	820f2 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   820e0:	4650      	mov	r0, sl
   820e2:	a901      	add	r1, sp, #4
   820e4:	47a0      	blx	r4
   820e6:	2800      	cmp	r0, #0
   820e8:	d1fa      	bne.n	820e0 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   820ea:	9b01      	ldr	r3, [sp, #4]
   820ec:	f806 3c01 	strb.w	r3, [r6, #-1]
   820f0:	e009      	b.n	82106 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   820f2:	42bd      	cmp	r5, r7
   820f4:	d107      	bne.n	82106 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   820f6:	4638      	mov	r0, r7
   820f8:	a901      	add	r1, sp, #4
   820fa:	47a0      	blx	r4
   820fc:	2800      	cmp	r0, #0
   820fe:	d1fa      	bne.n	820f6 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   82100:	9b01      	ldr	r3, [sp, #4]
   82102:	f806 3c01 	strb.w	r3, [r6, #-1]
   82106:	3601      	adds	r6, #1
   82108:	f1b8 0801 	subs.w	r8, r8, #1
   8210c:	d1be      	bne.n	8208c <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   8210e:	2000      	movs	r0, #0
   82110:	b003      	add	sp, #12
   82112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82116:	bf00      	nop
   82118:	400a4000 	.word	0x400a4000
   8211c:	00080495 	.word	0x00080495
   82120:	400e0800 	.word	0x400e0800
   82124:	0008217d 	.word	0x0008217d
   82128:	40098000 	.word	0x40098000
   8212c:	4009c000 	.word	0x4009c000
   82130:	400a0000 	.word	0x400a0000

00082134 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   82134:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   82136:	23ac      	movs	r3, #172	; 0xac
   82138:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8213a:	680a      	ldr	r2, [r1, #0]
   8213c:	684b      	ldr	r3, [r1, #4]
   8213e:	fbb2 f3f3 	udiv	r3, r2, r3
   82142:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   82144:	1e5c      	subs	r4, r3, #1
   82146:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8214a:	4294      	cmp	r4, r2
   8214c:	d80a      	bhi.n	82164 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   8214e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   82150:	688b      	ldr	r3, [r1, #8]
   82152:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   82154:	f240 2302 	movw	r3, #514	; 0x202
   82158:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8215c:	2350      	movs	r3, #80	; 0x50
   8215e:	6003      	str	r3, [r0, #0]

	return 0;
   82160:	2000      	movs	r0, #0
   82162:	e000      	b.n	82166 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   82164:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   82166:	f85d 4b04 	ldr.w	r4, [sp], #4
   8216a:	4770      	bx	lr

0008216c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8216c:	6943      	ldr	r3, [r0, #20]
   8216e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   82172:	bf1a      	itte	ne
   82174:	61c1      	strne	r1, [r0, #28]
	return 0;
   82176:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   82178:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   8217a:	4770      	bx	lr

0008217c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8217c:	6943      	ldr	r3, [r0, #20]
   8217e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   82182:	bf1d      	ittte	ne
   82184:	6983      	ldrne	r3, [r0, #24]
   82186:	700b      	strbne	r3, [r1, #0]
	return 0;
   82188:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8218a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   8218c:	4770      	bx	lr
   8218e:	bf00      	nop

00082190 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82190:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82192:	480e      	ldr	r0, [pc, #56]	; (821cc <sysclk_init+0x3c>)
   82194:	4b0e      	ldr	r3, [pc, #56]	; (821d0 <sysclk_init+0x40>)
   82196:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82198:	2000      	movs	r0, #0
   8219a:	213e      	movs	r1, #62	; 0x3e
   8219c:	4b0d      	ldr	r3, [pc, #52]	; (821d4 <sysclk_init+0x44>)
   8219e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   821a0:	4c0d      	ldr	r4, [pc, #52]	; (821d8 <sysclk_init+0x48>)
   821a2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   821a4:	2800      	cmp	r0, #0
   821a6:	d0fc      	beq.n	821a2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   821a8:	4b0c      	ldr	r3, [pc, #48]	; (821dc <sysclk_init+0x4c>)
   821aa:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   821ac:	4a0c      	ldr	r2, [pc, #48]	; (821e0 <sysclk_init+0x50>)
   821ae:	4b0d      	ldr	r3, [pc, #52]	; (821e4 <sysclk_init+0x54>)
   821b0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   821b2:	4c0d      	ldr	r4, [pc, #52]	; (821e8 <sysclk_init+0x58>)
   821b4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   821b6:	2800      	cmp	r0, #0
   821b8:	d0fc      	beq.n	821b4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   821ba:	2010      	movs	r0, #16
   821bc:	4b0b      	ldr	r3, [pc, #44]	; (821ec <sysclk_init+0x5c>)
   821be:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   821c0:	4b0b      	ldr	r3, [pc, #44]	; (821f0 <sysclk_init+0x60>)
   821c2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   821c4:	4801      	ldr	r0, [pc, #4]	; (821cc <sysclk_init+0x3c>)
   821c6:	4b02      	ldr	r3, [pc, #8]	; (821d0 <sysclk_init+0x40>)
   821c8:	4798      	blx	r3
   821ca:	bd10      	pop	{r4, pc}
   821cc:	0501bd00 	.word	0x0501bd00
   821d0:	200700a5 	.word	0x200700a5
   821d4:	000825a9 	.word	0x000825a9
   821d8:	000825fd 	.word	0x000825fd
   821dc:	0008260d 	.word	0x0008260d
   821e0:	200d3f01 	.word	0x200d3f01
   821e4:	400e0600 	.word	0x400e0600
   821e8:	0008261d 	.word	0x0008261d
   821ec:	00082545 	.word	0x00082545
   821f0:	00082739 	.word	0x00082739

000821f4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   821f4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   821f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   821fa:	4b1b      	ldr	r3, [pc, #108]	; (82268 <board_init+0x74>)
   821fc:	605a      	str	r2, [r3, #4]
   821fe:	200b      	movs	r0, #11
   82200:	4c1a      	ldr	r4, [pc, #104]	; (8226c <board_init+0x78>)
   82202:	47a0      	blx	r4
   82204:	200c      	movs	r0, #12
   82206:	47a0      	blx	r4
   82208:	200d      	movs	r0, #13
   8220a:	47a0      	blx	r4
   8220c:	200e      	movs	r0, #14
   8220e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82210:	203b      	movs	r0, #59	; 0x3b
   82212:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82216:	4c16      	ldr	r4, [pc, #88]	; (82270 <board_init+0x7c>)
   82218:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8221a:	2055      	movs	r0, #85	; 0x55
   8221c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82220:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82222:	2056      	movs	r0, #86	; 0x56
   82224:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82228:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8222a:	2068      	movs	r0, #104	; 0x68
   8222c:	4911      	ldr	r1, [pc, #68]	; (82274 <board_init+0x80>)
   8222e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82230:	205c      	movs	r0, #92	; 0x5c
   82232:	4911      	ldr	r1, [pc, #68]	; (82278 <board_init+0x84>)
   82234:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82236:	4811      	ldr	r0, [pc, #68]	; (8227c <board_init+0x88>)
   82238:	f44f 7140 	mov.w	r1, #768	; 0x300
   8223c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   82240:	4b0f      	ldr	r3, [pc, #60]	; (82280 <board_init+0x8c>)
   82242:	4798      	blx	r3
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   82244:	2011      	movs	r0, #17
   82246:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8224a:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   8224c:	2012      	movs	r0, #18
   8224e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82252:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   82254:	202b      	movs	r0, #43	; 0x2b
   82256:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8225a:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8225c:	202a      	movs	r0, #42	; 0x2a
   8225e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82262:	47a0      	blx	r4
   82264:	bd10      	pop	{r4, pc}
   82266:	bf00      	nop
   82268:	400e1a50 	.word	0x400e1a50
   8226c:	0008262d 	.word	0x0008262d
   82270:	00082329 	.word	0x00082329
   82274:	28000079 	.word	0x28000079
   82278:	28000001 	.word	0x28000001
   8227c:	400e0e00 	.word	0x400e0e00
   82280:	000823fd 	.word	0x000823fd

00082284 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82284:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82286:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8228a:	d016      	beq.n	822ba <pio_set_peripheral+0x36>
   8228c:	d804      	bhi.n	82298 <pio_set_peripheral+0x14>
   8228e:	b1c1      	cbz	r1, 822c2 <pio_set_peripheral+0x3e>
   82290:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   82294:	d00a      	beq.n	822ac <pio_set_peripheral+0x28>
   82296:	e013      	b.n	822c0 <pio_set_peripheral+0x3c>
   82298:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8229c:	d011      	beq.n	822c2 <pio_set_peripheral+0x3e>
   8229e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   822a2:	d00e      	beq.n	822c2 <pio_set_peripheral+0x3e>
   822a4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   822a8:	d10a      	bne.n	822c0 <pio_set_peripheral+0x3c>
   822aa:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   822ac:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   822ae:	6f01      	ldr	r1, [r0, #112]	; 0x70
   822b0:	400b      	ands	r3, r1
   822b2:	ea23 0302 	bic.w	r3, r3, r2
   822b6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   822b8:	e002      	b.n	822c0 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   822ba:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   822bc:	4313      	orrs	r3, r2
   822be:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   822c0:	6042      	str	r2, [r0, #4]
   822c2:	4770      	bx	lr

000822c4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   822c4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   822c6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   822ca:	bf14      	ite	ne
   822cc:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   822ce:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   822d0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   822d4:	bf14      	ite	ne
   822d6:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   822d8:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   822da:	f012 0f02 	tst.w	r2, #2
   822de:	d002      	beq.n	822e6 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   822e0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   822e4:	e004      	b.n	822f0 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   822e6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   822ea:	bf18      	it	ne
   822ec:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   822f0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   822f2:	6001      	str	r1, [r0, #0]
   822f4:	4770      	bx	lr
   822f6:	bf00      	nop

000822f8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   822f8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   822fa:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   822fc:	9c01      	ldr	r4, [sp, #4]
   822fe:	b10c      	cbz	r4, 82304 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   82300:	6641      	str	r1, [r0, #100]	; 0x64
   82302:	e000      	b.n	82306 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82304:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82306:	b10b      	cbz	r3, 8230c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   82308:	6501      	str	r1, [r0, #80]	; 0x50
   8230a:	e000      	b.n	8230e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8230c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8230e:	b10a      	cbz	r2, 82314 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   82310:	6301      	str	r1, [r0, #48]	; 0x30
   82312:	e000      	b.n	82316 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82314:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   82316:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82318:	6001      	str	r1, [r0, #0]
}
   8231a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8231e:	4770      	bx	lr

00082320 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82320:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   82322:	4770      	bx	lr

00082324 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82324:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   82326:	4770      	bx	lr

00082328 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82328:	b570      	push	{r4, r5, r6, lr}
   8232a:	b082      	sub	sp, #8
   8232c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8232e:	0944      	lsrs	r4, r0, #5
   82330:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   82334:	f204 7407 	addw	r4, r4, #1799	; 0x707
   82338:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8233a:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   8233e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   82342:	d030      	beq.n	823a6 <pio_configure_pin+0x7e>
   82344:	d806      	bhi.n	82354 <pio_configure_pin+0x2c>
   82346:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8234a:	d00a      	beq.n	82362 <pio_configure_pin+0x3a>
   8234c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   82350:	d018      	beq.n	82384 <pio_configure_pin+0x5c>
   82352:	e049      	b.n	823e8 <pio_configure_pin+0xc0>
   82354:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82358:	d030      	beq.n	823bc <pio_configure_pin+0x94>
   8235a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8235e:	d02d      	beq.n	823bc <pio_configure_pin+0x94>
   82360:	e042      	b.n	823e8 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82362:	f000 001f 	and.w	r0, r0, #31
   82366:	2401      	movs	r4, #1
   82368:	4084      	lsls	r4, r0
   8236a:	4630      	mov	r0, r6
   8236c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82370:	4622      	mov	r2, r4
   82372:	4b1f      	ldr	r3, [pc, #124]	; (823f0 <pio_configure_pin+0xc8>)
   82374:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82376:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8237a:	bf14      	ite	ne
   8237c:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8237e:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82380:	2001      	movs	r0, #1
   82382:	e032      	b.n	823ea <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82384:	f000 001f 	and.w	r0, r0, #31
   82388:	2401      	movs	r4, #1
   8238a:	4084      	lsls	r4, r0
   8238c:	4630      	mov	r0, r6
   8238e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82392:	4622      	mov	r2, r4
   82394:	4b16      	ldr	r3, [pc, #88]	; (823f0 <pio_configure_pin+0xc8>)
   82396:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82398:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8239c:	bf14      	ite	ne
   8239e:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   823a0:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   823a2:	2001      	movs	r0, #1
   823a4:	e021      	b.n	823ea <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   823a6:	f000 011f 	and.w	r1, r0, #31
   823aa:	2401      	movs	r4, #1
   823ac:	4630      	mov	r0, r6
   823ae:	fa04 f101 	lsl.w	r1, r4, r1
   823b2:	462a      	mov	r2, r5
   823b4:	4b0f      	ldr	r3, [pc, #60]	; (823f4 <pio_configure_pin+0xcc>)
   823b6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   823b8:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   823ba:	e016      	b.n	823ea <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   823bc:	f000 011f 	and.w	r1, r0, #31
   823c0:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   823c2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   823c6:	ea05 0304 	and.w	r3, r5, r4
   823ca:	9300      	str	r3, [sp, #0]
   823cc:	4630      	mov	r0, r6
   823ce:	fa04 f101 	lsl.w	r1, r4, r1
   823d2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   823d6:	bf14      	ite	ne
   823d8:	2200      	movne	r2, #0
   823da:	2201      	moveq	r2, #1
   823dc:	f3c5 0380 	ubfx	r3, r5, #2, #1
   823e0:	4d05      	ldr	r5, [pc, #20]	; (823f8 <pio_configure_pin+0xd0>)
   823e2:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   823e4:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   823e6:	e000      	b.n	823ea <pio_configure_pin+0xc2>

	default:
		return 0;
   823e8:	2000      	movs	r0, #0
	}

	return 1;
}
   823ea:	b002      	add	sp, #8
   823ec:	bd70      	pop	{r4, r5, r6, pc}
   823ee:	bf00      	nop
   823f0:	00082285 	.word	0x00082285
   823f4:	000822c5 	.word	0x000822c5
   823f8:	000822f9 	.word	0x000822f9

000823fc <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   823fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   823fe:	b083      	sub	sp, #12
   82400:	4607      	mov	r7, r0
   82402:	460e      	mov	r6, r1
   82404:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82406:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8240a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8240e:	d026      	beq.n	8245e <pio_configure_pin_group+0x62>
   82410:	d806      	bhi.n	82420 <pio_configure_pin_group+0x24>
   82412:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   82416:	d00a      	beq.n	8242e <pio_configure_pin_group+0x32>
   82418:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   8241c:	d013      	beq.n	82446 <pio_configure_pin_group+0x4a>
   8241e:	e034      	b.n	8248a <pio_configure_pin_group+0x8e>
   82420:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82424:	d01f      	beq.n	82466 <pio_configure_pin_group+0x6a>
   82426:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8242a:	d01c      	beq.n	82466 <pio_configure_pin_group+0x6a>
   8242c:	e02d      	b.n	8248a <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8242e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82432:	4632      	mov	r2, r6
   82434:	4b16      	ldr	r3, [pc, #88]	; (82490 <pio_configure_pin_group+0x94>)
   82436:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82438:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8243c:	bf14      	ite	ne
   8243e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82440:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82442:	2001      	movs	r0, #1
   82444:	e022      	b.n	8248c <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82446:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8244a:	4632      	mov	r2, r6
   8244c:	4b10      	ldr	r3, [pc, #64]	; (82490 <pio_configure_pin_group+0x94>)
   8244e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82450:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82454:	bf14      	ite	ne
   82456:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82458:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8245a:	2001      	movs	r0, #1
   8245c:	e016      	b.n	8248c <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8245e:	4b0d      	ldr	r3, [pc, #52]	; (82494 <pio_configure_pin_group+0x98>)
   82460:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82462:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   82464:	e012      	b.n	8248c <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82466:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8246a:	f005 0301 	and.w	r3, r5, #1
   8246e:	9300      	str	r3, [sp, #0]
   82470:	4638      	mov	r0, r7
   82472:	4631      	mov	r1, r6
   82474:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82478:	bf14      	ite	ne
   8247a:	2200      	movne	r2, #0
   8247c:	2201      	moveq	r2, #1
   8247e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82482:	4c05      	ldr	r4, [pc, #20]	; (82498 <pio_configure_pin_group+0x9c>)
   82484:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   82486:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82488:	e000      	b.n	8248c <pio_configure_pin_group+0x90>

	default:
		return 0;
   8248a:	2000      	movs	r0, #0
	}

	return 1;
}
   8248c:	b003      	add	sp, #12
   8248e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82490:	00082285 	.word	0x00082285
   82494:	000822c5 	.word	0x000822c5
   82498:	000822f9 	.word	0x000822f9

0008249c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8249c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   824a0:	4604      	mov	r4, r0
   824a2:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   824a4:	4b10      	ldr	r3, [pc, #64]	; (824e8 <pio_handler_process+0x4c>)
   824a6:	4798      	blx	r3
   824a8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   824aa:	4620      	mov	r0, r4
   824ac:	4b0f      	ldr	r3, [pc, #60]	; (824ec <pio_handler_process+0x50>)
   824ae:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   824b0:	4005      	ands	r5, r0
   824b2:	d017      	beq.n	824e4 <pio_handler_process+0x48>
   824b4:	4f0e      	ldr	r7, [pc, #56]	; (824f0 <pio_handler_process+0x54>)
   824b6:	f107 040c 	add.w	r4, r7, #12
   824ba:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   824bc:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   824c0:	42b3      	cmp	r3, r6
   824c2:	d10a      	bne.n	824da <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   824c4:	f854 1c08 	ldr.w	r1, [r4, #-8]
   824c8:	4229      	tst	r1, r5
   824ca:	d006      	beq.n	824da <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   824cc:	6823      	ldr	r3, [r4, #0]
   824ce:	4630      	mov	r0, r6
   824d0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   824d2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   824d6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   824da:	42bc      	cmp	r4, r7
   824dc:	d002      	beq.n	824e4 <pio_handler_process+0x48>
   824de:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   824e0:	2d00      	cmp	r5, #0
   824e2:	d1eb      	bne.n	824bc <pio_handler_process+0x20>
   824e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   824e8:	00082321 	.word	0x00082321
   824ec:	00082325 	.word	0x00082325
   824f0:	20078cac 	.word	0x20078cac

000824f4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   824f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   824f6:	4802      	ldr	r0, [pc, #8]	; (82500 <PIOA_Handler+0xc>)
   824f8:	210b      	movs	r1, #11
   824fa:	4b02      	ldr	r3, [pc, #8]	; (82504 <PIOA_Handler+0x10>)
   824fc:	4798      	blx	r3
   824fe:	bd08      	pop	{r3, pc}
   82500:	400e0e00 	.word	0x400e0e00
   82504:	0008249d 	.word	0x0008249d

00082508 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82508:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8250a:	4802      	ldr	r0, [pc, #8]	; (82514 <PIOB_Handler+0xc>)
   8250c:	210c      	movs	r1, #12
   8250e:	4b02      	ldr	r3, [pc, #8]	; (82518 <PIOB_Handler+0x10>)
   82510:	4798      	blx	r3
   82512:	bd08      	pop	{r3, pc}
   82514:	400e1000 	.word	0x400e1000
   82518:	0008249d 	.word	0x0008249d

0008251c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8251c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8251e:	4802      	ldr	r0, [pc, #8]	; (82528 <PIOC_Handler+0xc>)
   82520:	210d      	movs	r1, #13
   82522:	4b02      	ldr	r3, [pc, #8]	; (8252c <PIOC_Handler+0x10>)
   82524:	4798      	blx	r3
   82526:	bd08      	pop	{r3, pc}
   82528:	400e1200 	.word	0x400e1200
   8252c:	0008249d 	.word	0x0008249d

00082530 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82530:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82532:	4802      	ldr	r0, [pc, #8]	; (8253c <PIOD_Handler+0xc>)
   82534:	210e      	movs	r1, #14
   82536:	4b02      	ldr	r3, [pc, #8]	; (82540 <PIOD_Handler+0x10>)
   82538:	4798      	blx	r3
   8253a:	bd08      	pop	{r3, pc}
   8253c:	400e1400 	.word	0x400e1400
   82540:	0008249d 	.word	0x0008249d

00082544 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82544:	4b17      	ldr	r3, [pc, #92]	; (825a4 <pmc_switch_mck_to_pllack+0x60>)
   82546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82548:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   8254c:	4310      	orrs	r0, r2
   8254e:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82552:	f013 0f08 	tst.w	r3, #8
   82556:	d109      	bne.n	8256c <pmc_switch_mck_to_pllack+0x28>
   82558:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8255c:	4911      	ldr	r1, [pc, #68]	; (825a4 <pmc_switch_mck_to_pllack+0x60>)
   8255e:	e001      	b.n	82564 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82560:	3b01      	subs	r3, #1
   82562:	d019      	beq.n	82598 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82564:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82566:	f012 0f08 	tst.w	r2, #8
   8256a:	d0f9      	beq.n	82560 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8256c:	4b0d      	ldr	r3, [pc, #52]	; (825a4 <pmc_switch_mck_to_pllack+0x60>)
   8256e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82570:	f022 0203 	bic.w	r2, r2, #3
   82574:	f042 0202 	orr.w	r2, r2, #2
   82578:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8257a:	6e98      	ldr	r0, [r3, #104]	; 0x68
   8257c:	f010 0008 	ands.w	r0, r0, #8
   82580:	d10c      	bne.n	8259c <pmc_switch_mck_to_pllack+0x58>
   82582:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82586:	4907      	ldr	r1, [pc, #28]	; (825a4 <pmc_switch_mck_to_pllack+0x60>)
   82588:	e001      	b.n	8258e <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8258a:	3b01      	subs	r3, #1
   8258c:	d008      	beq.n	825a0 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8258e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82590:	f012 0f08 	tst.w	r2, #8
   82594:	d0f9      	beq.n	8258a <pmc_switch_mck_to_pllack+0x46>
   82596:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82598:	2001      	movs	r0, #1
   8259a:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   8259c:	2000      	movs	r0, #0
   8259e:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   825a0:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   825a2:	4770      	bx	lr
   825a4:	400e0600 	.word	0x400e0600

000825a8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   825a8:	b138      	cbz	r0, 825ba <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   825aa:	4911      	ldr	r1, [pc, #68]	; (825f0 <pmc_switch_mainck_to_xtal+0x48>)
   825ac:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   825ae:	4a11      	ldr	r2, [pc, #68]	; (825f4 <pmc_switch_mainck_to_xtal+0x4c>)
   825b0:	401a      	ands	r2, r3
   825b2:	4b11      	ldr	r3, [pc, #68]	; (825f8 <pmc_switch_mainck_to_xtal+0x50>)
   825b4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   825b6:	620b      	str	r3, [r1, #32]
   825b8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   825ba:	4a0d      	ldr	r2, [pc, #52]	; (825f0 <pmc_switch_mainck_to_xtal+0x48>)
   825bc:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   825be:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   825c2:	f023 0303 	bic.w	r3, r3, #3
   825c6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   825ca:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   825ce:	0209      	lsls	r1, r1, #8
   825d0:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   825d2:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   825d4:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   825d6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   825d8:	f013 0f01 	tst.w	r3, #1
   825dc:	d0fb      	beq.n	825d6 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   825de:	4a04      	ldr	r2, [pc, #16]	; (825f0 <pmc_switch_mainck_to_xtal+0x48>)
   825e0:	6a13      	ldr	r3, [r2, #32]
   825e2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   825e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   825ea:	6213      	str	r3, [r2, #32]
   825ec:	4770      	bx	lr
   825ee:	bf00      	nop
   825f0:	400e0600 	.word	0x400e0600
   825f4:	fec8fffc 	.word	0xfec8fffc
   825f8:	01370002 	.word	0x01370002

000825fc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   825fc:	4b02      	ldr	r3, [pc, #8]	; (82608 <pmc_osc_is_ready_mainck+0xc>)
   825fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82600:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82604:	4770      	bx	lr
   82606:	bf00      	nop
   82608:	400e0600 	.word	0x400e0600

0008260c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8260c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82610:	4b01      	ldr	r3, [pc, #4]	; (82618 <pmc_disable_pllack+0xc>)
   82612:	629a      	str	r2, [r3, #40]	; 0x28
   82614:	4770      	bx	lr
   82616:	bf00      	nop
   82618:	400e0600 	.word	0x400e0600

0008261c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8261c:	4b02      	ldr	r3, [pc, #8]	; (82628 <pmc_is_locked_pllack+0xc>)
   8261e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82620:	f000 0002 	and.w	r0, r0, #2
   82624:	4770      	bx	lr
   82626:	bf00      	nop
   82628:	400e0600 	.word	0x400e0600

0008262c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8262c:	282c      	cmp	r0, #44	; 0x2c
   8262e:	d820      	bhi.n	82672 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   82630:	281f      	cmp	r0, #31
   82632:	d80d      	bhi.n	82650 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82634:	4b12      	ldr	r3, [pc, #72]	; (82680 <pmc_enable_periph_clk+0x54>)
   82636:	699a      	ldr	r2, [r3, #24]
   82638:	2301      	movs	r3, #1
   8263a:	4083      	lsls	r3, r0
   8263c:	401a      	ands	r2, r3
   8263e:	4293      	cmp	r3, r2
   82640:	d019      	beq.n	82676 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   82642:	2301      	movs	r3, #1
   82644:	fa03 f000 	lsl.w	r0, r3, r0
   82648:	4b0d      	ldr	r3, [pc, #52]	; (82680 <pmc_enable_periph_clk+0x54>)
   8264a:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8264c:	2000      	movs	r0, #0
   8264e:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82650:	4b0b      	ldr	r3, [pc, #44]	; (82680 <pmc_enable_periph_clk+0x54>)
   82652:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   82656:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82658:	2301      	movs	r3, #1
   8265a:	4083      	lsls	r3, r0
   8265c:	401a      	ands	r2, r3
   8265e:	4293      	cmp	r3, r2
   82660:	d00b      	beq.n	8267a <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   82662:	2301      	movs	r3, #1
   82664:	fa03 f000 	lsl.w	r0, r3, r0
   82668:	4b05      	ldr	r3, [pc, #20]	; (82680 <pmc_enable_periph_clk+0x54>)
   8266a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   8266e:	2000      	movs	r0, #0
   82670:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   82672:	2001      	movs	r0, #1
   82674:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82676:	2000      	movs	r0, #0
   82678:	4770      	bx	lr
   8267a:	2000      	movs	r0, #0
}
   8267c:	4770      	bx	lr
   8267e:	bf00      	nop
   82680:	400e0600 	.word	0x400e0600

00082684 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82684:	e7fe      	b.n	82684 <Dummy_Handler>
   82686:	bf00      	nop

00082688 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82688:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8268a:	4b1e      	ldr	r3, [pc, #120]	; (82704 <Reset_Handler+0x7c>)
   8268c:	4a1e      	ldr	r2, [pc, #120]	; (82708 <Reset_Handler+0x80>)
   8268e:	429a      	cmp	r2, r3
   82690:	d003      	beq.n	8269a <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   82692:	4b1e      	ldr	r3, [pc, #120]	; (8270c <Reset_Handler+0x84>)
   82694:	4a1b      	ldr	r2, [pc, #108]	; (82704 <Reset_Handler+0x7c>)
   82696:	429a      	cmp	r2, r3
   82698:	d304      	bcc.n	826a4 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8269a:	4b1d      	ldr	r3, [pc, #116]	; (82710 <Reset_Handler+0x88>)
   8269c:	4a1d      	ldr	r2, [pc, #116]	; (82714 <Reset_Handler+0x8c>)
   8269e:	429a      	cmp	r2, r3
   826a0:	d30f      	bcc.n	826c2 <Reset_Handler+0x3a>
   826a2:	e01a      	b.n	826da <Reset_Handler+0x52>
   826a4:	4b1c      	ldr	r3, [pc, #112]	; (82718 <Reset_Handler+0x90>)
   826a6:	4c1d      	ldr	r4, [pc, #116]	; (8271c <Reset_Handler+0x94>)
   826a8:	1ae4      	subs	r4, r4, r3
   826aa:	f024 0403 	bic.w	r4, r4, #3
   826ae:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   826b0:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   826b2:	4814      	ldr	r0, [pc, #80]	; (82704 <Reset_Handler+0x7c>)
   826b4:	4914      	ldr	r1, [pc, #80]	; (82708 <Reset_Handler+0x80>)
   826b6:	585a      	ldr	r2, [r3, r1]
   826b8:	501a      	str	r2, [r3, r0]
   826ba:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   826bc:	42a3      	cmp	r3, r4
   826be:	d1fa      	bne.n	826b6 <Reset_Handler+0x2e>
   826c0:	e7eb      	b.n	8269a <Reset_Handler+0x12>
   826c2:	4b17      	ldr	r3, [pc, #92]	; (82720 <Reset_Handler+0x98>)
   826c4:	4917      	ldr	r1, [pc, #92]	; (82724 <Reset_Handler+0x9c>)
   826c6:	1ac9      	subs	r1, r1, r3
   826c8:	f021 0103 	bic.w	r1, r1, #3
   826cc:	1d1a      	adds	r2, r3, #4
   826ce:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   826d0:	2200      	movs	r2, #0
   826d2:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   826d6:	428b      	cmp	r3, r1
   826d8:	d1fb      	bne.n	826d2 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   826da:	4a13      	ldr	r2, [pc, #76]	; (82728 <Reset_Handler+0xa0>)
   826dc:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   826e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   826e4:	4911      	ldr	r1, [pc, #68]	; (8272c <Reset_Handler+0xa4>)
   826e6:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   826e8:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   826ec:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   826f0:	d203      	bcs.n	826fa <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   826f2:	688a      	ldr	r2, [r1, #8]
   826f4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   826f8:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   826fa:	4b0d      	ldr	r3, [pc, #52]	; (82730 <Reset_Handler+0xa8>)
   826fc:	4798      	blx	r3

	/* Branch to main function */
	main();
   826fe:	4b0d      	ldr	r3, [pc, #52]	; (82734 <Reset_Handler+0xac>)
   82700:	4798      	blx	r3
   82702:	e7fe      	b.n	82702 <Reset_Handler+0x7a>
   82704:	20070000 	.word	0x20070000
   82708:	000891d0 	.word	0x000891d0
   8270c:	20070a2c 	.word	0x20070a2c
   82710:	20078d94 	.word	0x20078d94
   82714:	20070a30 	.word	0x20070a30
   82718:	20070004 	.word	0x20070004
   8271c:	20070a2f 	.word	0x20070a2f
   82720:	20070a2c 	.word	0x20070a2c
   82724:	20078d8f 	.word	0x20078d8f
   82728:	00080000 	.word	0x00080000
   8272c:	e000ed00 	.word	0xe000ed00
   82730:	0008291d 	.word	0x0008291d
   82734:	000828a5 	.word	0x000828a5

00082738 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82738:	4b3e      	ldr	r3, [pc, #248]	; (82834 <SystemCoreClockUpdate+0xfc>)
   8273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8273c:	f003 0303 	and.w	r3, r3, #3
   82740:	2b03      	cmp	r3, #3
   82742:	d85f      	bhi.n	82804 <SystemCoreClockUpdate+0xcc>
   82744:	e8df f003 	tbb	[pc, r3]
   82748:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8274c:	4b3a      	ldr	r3, [pc, #232]	; (82838 <SystemCoreClockUpdate+0x100>)
   8274e:	695b      	ldr	r3, [r3, #20]
   82750:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82754:	bf14      	ite	ne
   82756:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8275a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8275e:	4b37      	ldr	r3, [pc, #220]	; (8283c <SystemCoreClockUpdate+0x104>)
   82760:	601a      	str	r2, [r3, #0]
   82762:	e04f      	b.n	82804 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82764:	4b33      	ldr	r3, [pc, #204]	; (82834 <SystemCoreClockUpdate+0xfc>)
   82766:	6a1b      	ldr	r3, [r3, #32]
   82768:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8276c:	d003      	beq.n	82776 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8276e:	4a34      	ldr	r2, [pc, #208]	; (82840 <SystemCoreClockUpdate+0x108>)
   82770:	4b32      	ldr	r3, [pc, #200]	; (8283c <SystemCoreClockUpdate+0x104>)
   82772:	601a      	str	r2, [r3, #0]
   82774:	e046      	b.n	82804 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82776:	4a33      	ldr	r2, [pc, #204]	; (82844 <SystemCoreClockUpdate+0x10c>)
   82778:	4b30      	ldr	r3, [pc, #192]	; (8283c <SystemCoreClockUpdate+0x104>)
   8277a:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8277c:	4b2d      	ldr	r3, [pc, #180]	; (82834 <SystemCoreClockUpdate+0xfc>)
   8277e:	6a1b      	ldr	r3, [r3, #32]
   82780:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82784:	2b10      	cmp	r3, #16
   82786:	d002      	beq.n	8278e <SystemCoreClockUpdate+0x56>
   82788:	2b20      	cmp	r3, #32
   8278a:	d004      	beq.n	82796 <SystemCoreClockUpdate+0x5e>
   8278c:	e03a      	b.n	82804 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8278e:	4a2e      	ldr	r2, [pc, #184]	; (82848 <SystemCoreClockUpdate+0x110>)
   82790:	4b2a      	ldr	r3, [pc, #168]	; (8283c <SystemCoreClockUpdate+0x104>)
   82792:	601a      	str	r2, [r3, #0]
				break;
   82794:	e036      	b.n	82804 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82796:	4a2a      	ldr	r2, [pc, #168]	; (82840 <SystemCoreClockUpdate+0x108>)
   82798:	4b28      	ldr	r3, [pc, #160]	; (8283c <SystemCoreClockUpdate+0x104>)
   8279a:	601a      	str	r2, [r3, #0]
				break;
   8279c:	e032      	b.n	82804 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8279e:	4b25      	ldr	r3, [pc, #148]	; (82834 <SystemCoreClockUpdate+0xfc>)
   827a0:	6a1b      	ldr	r3, [r3, #32]
   827a2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   827a6:	d003      	beq.n	827b0 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   827a8:	4a25      	ldr	r2, [pc, #148]	; (82840 <SystemCoreClockUpdate+0x108>)
   827aa:	4b24      	ldr	r3, [pc, #144]	; (8283c <SystemCoreClockUpdate+0x104>)
   827ac:	601a      	str	r2, [r3, #0]
   827ae:	e012      	b.n	827d6 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   827b0:	4a24      	ldr	r2, [pc, #144]	; (82844 <SystemCoreClockUpdate+0x10c>)
   827b2:	4b22      	ldr	r3, [pc, #136]	; (8283c <SystemCoreClockUpdate+0x104>)
   827b4:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   827b6:	4b1f      	ldr	r3, [pc, #124]	; (82834 <SystemCoreClockUpdate+0xfc>)
   827b8:	6a1b      	ldr	r3, [r3, #32]
   827ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
   827be:	2b10      	cmp	r3, #16
   827c0:	d002      	beq.n	827c8 <SystemCoreClockUpdate+0x90>
   827c2:	2b20      	cmp	r3, #32
   827c4:	d004      	beq.n	827d0 <SystemCoreClockUpdate+0x98>
   827c6:	e006      	b.n	827d6 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   827c8:	4a1f      	ldr	r2, [pc, #124]	; (82848 <SystemCoreClockUpdate+0x110>)
   827ca:	4b1c      	ldr	r3, [pc, #112]	; (8283c <SystemCoreClockUpdate+0x104>)
   827cc:	601a      	str	r2, [r3, #0]
				break;
   827ce:	e002      	b.n	827d6 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   827d0:	4a1b      	ldr	r2, [pc, #108]	; (82840 <SystemCoreClockUpdate+0x108>)
   827d2:	4b1a      	ldr	r3, [pc, #104]	; (8283c <SystemCoreClockUpdate+0x104>)
   827d4:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   827d6:	4b17      	ldr	r3, [pc, #92]	; (82834 <SystemCoreClockUpdate+0xfc>)
   827d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   827da:	f003 0303 	and.w	r3, r3, #3
   827de:	2b02      	cmp	r3, #2
   827e0:	d10d      	bne.n	827fe <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   827e2:	4b14      	ldr	r3, [pc, #80]	; (82834 <SystemCoreClockUpdate+0xfc>)
   827e4:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   827e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
   827e8:	4b14      	ldr	r3, [pc, #80]	; (8283c <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   827ea:	f3c0 400a 	ubfx	r0, r0, #16, #11
   827ee:	681a      	ldr	r2, [r3, #0]
   827f0:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   827f4:	b2c9      	uxtb	r1, r1
   827f6:	fbb2 f2f1 	udiv	r2, r2, r1
   827fa:	601a      	str	r2, [r3, #0]
   827fc:	e002      	b.n	82804 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   827fe:	4a13      	ldr	r2, [pc, #76]	; (8284c <SystemCoreClockUpdate+0x114>)
   82800:	4b0e      	ldr	r3, [pc, #56]	; (8283c <SystemCoreClockUpdate+0x104>)
   82802:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82804:	4b0b      	ldr	r3, [pc, #44]	; (82834 <SystemCoreClockUpdate+0xfc>)
   82806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82808:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8280c:	2b70      	cmp	r3, #112	; 0x70
   8280e:	d107      	bne.n	82820 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   82810:	4b0a      	ldr	r3, [pc, #40]	; (8283c <SystemCoreClockUpdate+0x104>)
   82812:	681a      	ldr	r2, [r3, #0]
   82814:	490e      	ldr	r1, [pc, #56]	; (82850 <SystemCoreClockUpdate+0x118>)
   82816:	fba1 0202 	umull	r0, r2, r1, r2
   8281a:	0852      	lsrs	r2, r2, #1
   8281c:	601a      	str	r2, [r3, #0]
   8281e:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82820:	4b04      	ldr	r3, [pc, #16]	; (82834 <SystemCoreClockUpdate+0xfc>)
   82822:	6b19      	ldr	r1, [r3, #48]	; 0x30
   82824:	4b05      	ldr	r3, [pc, #20]	; (8283c <SystemCoreClockUpdate+0x104>)
   82826:	f3c1 1102 	ubfx	r1, r1, #4, #3
   8282a:	681a      	ldr	r2, [r3, #0]
   8282c:	40ca      	lsrs	r2, r1
   8282e:	601a      	str	r2, [r3, #0]
   82830:	4770      	bx	lr
   82832:	bf00      	nop
   82834:	400e0600 	.word	0x400e0600
   82838:	400e1a10 	.word	0x400e1a10
   8283c:	2007018c 	.word	0x2007018c
   82840:	00b71b00 	.word	0x00b71b00
   82844:	003d0900 	.word	0x003d0900
   82848:	007a1200 	.word	0x007a1200
   8284c:	0e4e1c00 	.word	0x0e4e1c00
   82850:	aaaaaaab 	.word	0xaaaaaaab

00082854 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82854:	4b09      	ldr	r3, [pc, #36]	; (8287c <_sbrk+0x28>)
   82856:	681b      	ldr	r3, [r3, #0]
   82858:	b913      	cbnz	r3, 82860 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   8285a:	4a09      	ldr	r2, [pc, #36]	; (82880 <_sbrk+0x2c>)
   8285c:	4b07      	ldr	r3, [pc, #28]	; (8287c <_sbrk+0x28>)
   8285e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   82860:	4b06      	ldr	r3, [pc, #24]	; (8287c <_sbrk+0x28>)
   82862:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82864:	181a      	adds	r2, r3, r0
   82866:	4907      	ldr	r1, [pc, #28]	; (82884 <_sbrk+0x30>)
   82868:	4291      	cmp	r1, r2
   8286a:	db04      	blt.n	82876 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   8286c:	4610      	mov	r0, r2
   8286e:	4a03      	ldr	r2, [pc, #12]	; (8287c <_sbrk+0x28>)
   82870:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82872:	4618      	mov	r0, r3
   82874:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   82876:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   8287a:	4770      	bx	lr
   8287c:	20078d1c 	.word	0x20078d1c
   82880:	2007ad98 	.word	0x2007ad98
   82884:	20087ffc 	.word	0x20087ffc

00082888 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82888:	f04f 30ff 	mov.w	r0, #4294967295
   8288c:	4770      	bx	lr
   8288e:	bf00      	nop

00082890 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82894:	604b      	str	r3, [r1, #4]

	return 0;
}
   82896:	2000      	movs	r0, #0
   82898:	4770      	bx	lr
   8289a:	bf00      	nop

0008289c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   8289c:	2001      	movs	r0, #1
   8289e:	4770      	bx	lr

000828a0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   828a0:	2000      	movs	r0, #0
   828a2:	4770      	bx	lr

000828a4 <main>:
#define TASK_TWI_PRIO	2
#define TASK_BLINK		1


int main (void)
{
   828a4:	b500      	push	{lr}
   828a6:	b085      	sub	sp, #20

	board_init();
   828a8:	4b11      	ldr	r3, [pc, #68]	; (828f0 <main+0x4c>)
   828aa:	4798      	blx	r3
	sysclk_init();
   828ac:	4b11      	ldr	r3, [pc, #68]	; (828f4 <main+0x50>)
   828ae:	4798      	blx	r3
	configureConsole();
   828b0:	4b11      	ldr	r3, [pc, #68]	; (828f8 <main+0x54>)
   828b2:	4798      	blx	r3
   828b4:	200b      	movs	r0, #11
   828b6:	4c11      	ldr	r4, [pc, #68]	; (828fc <main+0x58>)
   828b8:	47a0      	blx	r4
   828ba:	200c      	movs	r0, #12
   828bc:	47a0      	blx	r4
   828be:	200d      	movs	r0, #13
   828c0:	47a0      	blx	r4
   828c2:	200e      	movs	r0, #14
   828c4:	47a0      	blx	r4
	ioport_init();
	delay_init();
	printf("Start of inint\n");
   828c6:	480e      	ldr	r0, [pc, #56]	; (82900 <main+0x5c>)
   828c8:	4b0e      	ldr	r3, [pc, #56]	; (82904 <main+0x60>)
   828ca:	4798      	blx	r3
	init_twi_functions();
   828cc:	4b0e      	ldr	r3, [pc, #56]	; (82908 <main+0x64>)
   828ce:	4798      	blx	r3
	//testloop();

	//pa_sendstatus(TWI_CMD_PICKUP_START,0);
	//na_sendstatus(XY1);
	
	xTaskCreate(task_nav_com,(const signed char* const) "navigation",TASK_TWI_SIZE,NULL,TASK_TWI_NAV,NULL);
   828d0:	2303      	movs	r3, #3
   828d2:	9300      	str	r3, [sp, #0]
   828d4:	2300      	movs	r3, #0
   828d6:	9301      	str	r3, [sp, #4]
   828d8:	9302      	str	r3, [sp, #8]
   828da:	9303      	str	r3, [sp, #12]
   828dc:	480b      	ldr	r0, [pc, #44]	; (8290c <main+0x68>)
   828de:	490c      	ldr	r1, [pc, #48]	; (82910 <main+0x6c>)
   828e0:	f44f 7280 	mov.w	r2, #256	; 0x100
   828e4:	4c0b      	ldr	r4, [pc, #44]	; (82914 <main+0x70>)
   828e6:	47a0      	blx	r4
	//xTaskCreate(task_blink,(const signed char* const) "blink",TASK_TWI_SIZE,NULL,TASK_BLINK,NULL);
	//xTaskCreate(task_twi,(const signed char* const) "com",TASK_TWI_SIZE,NULL,TASK_TWI_PRIO,NULL);
	vTaskStartScheduler();
   828e8:	4b0b      	ldr	r3, [pc, #44]	; (82918 <main+0x74>)
   828ea:	4798      	blx	r3
   828ec:	e7fe      	b.n	828ec <main+0x48>
   828ee:	bf00      	nop
   828f0:	000821f5 	.word	0x000821f5
   828f4:	00082191 	.word	0x00082191
   828f8:	00081c69 	.word	0x00081c69
   828fc:	0008262d 	.word	0x0008262d
   82900:	00088fe8 	.word	0x00088fe8
   82904:	0008296d 	.word	0x0008296d
   82908:	00081ce5 	.word	0x00081ce5
   8290c:	00080149 	.word	0x00080149
   82910:	00088ff8 	.word	0x00088ff8
   82914:	00080db5 	.word	0x00080db5
   82918:	00080fbd 	.word	0x00080fbd

0008291c <__libc_init_array>:
   8291c:	b570      	push	{r4, r5, r6, lr}
   8291e:	4e0f      	ldr	r6, [pc, #60]	; (8295c <__libc_init_array+0x40>)
   82920:	4d0f      	ldr	r5, [pc, #60]	; (82960 <__libc_init_array+0x44>)
   82922:	1b76      	subs	r6, r6, r5
   82924:	10b6      	asrs	r6, r6, #2
   82926:	d007      	beq.n	82938 <__libc_init_array+0x1c>
   82928:	3d04      	subs	r5, #4
   8292a:	2400      	movs	r4, #0
   8292c:	3401      	adds	r4, #1
   8292e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82932:	4798      	blx	r3
   82934:	42a6      	cmp	r6, r4
   82936:	d1f9      	bne.n	8292c <__libc_init_array+0x10>
   82938:	4e0a      	ldr	r6, [pc, #40]	; (82964 <__libc_init_array+0x48>)
   8293a:	4d0b      	ldr	r5, [pc, #44]	; (82968 <__libc_init_array+0x4c>)
   8293c:	f006 fc32 	bl	891a4 <_init>
   82940:	1b76      	subs	r6, r6, r5
   82942:	10b6      	asrs	r6, r6, #2
   82944:	d008      	beq.n	82958 <__libc_init_array+0x3c>
   82946:	3d04      	subs	r5, #4
   82948:	2400      	movs	r4, #0
   8294a:	3401      	adds	r4, #1
   8294c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82950:	4798      	blx	r3
   82952:	42a6      	cmp	r6, r4
   82954:	d1f9      	bne.n	8294a <__libc_init_array+0x2e>
   82956:	bd70      	pop	{r4, r5, r6, pc}
   82958:	bd70      	pop	{r4, r5, r6, pc}
   8295a:	bf00      	nop
   8295c:	000891b0 	.word	0x000891b0
   82960:	000891b0 	.word	0x000891b0
   82964:	000891b8 	.word	0x000891b8
   82968:	000891b0 	.word	0x000891b0

0008296c <iprintf>:
   8296c:	b40f      	push	{r0, r1, r2, r3}
   8296e:	b510      	push	{r4, lr}
   82970:	4b07      	ldr	r3, [pc, #28]	; (82990 <iprintf+0x24>)
   82972:	b082      	sub	sp, #8
   82974:	ac04      	add	r4, sp, #16
   82976:	f854 2b04 	ldr.w	r2, [r4], #4
   8297a:	6818      	ldr	r0, [r3, #0]
   8297c:	4623      	mov	r3, r4
   8297e:	6881      	ldr	r1, [r0, #8]
   82980:	9401      	str	r4, [sp, #4]
   82982:	f001 fc83 	bl	8428c <_vfiprintf_r>
   82986:	b002      	add	sp, #8
   82988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8298c:	b004      	add	sp, #16
   8298e:	4770      	bx	lr
   82990:	200705b8 	.word	0x200705b8

00082994 <memcpy>:
   82994:	4684      	mov	ip, r0
   82996:	ea41 0300 	orr.w	r3, r1, r0
   8299a:	f013 0303 	ands.w	r3, r3, #3
   8299e:	d149      	bne.n	82a34 <memcpy+0xa0>
   829a0:	3a40      	subs	r2, #64	; 0x40
   829a2:	d323      	bcc.n	829ec <memcpy+0x58>
   829a4:	680b      	ldr	r3, [r1, #0]
   829a6:	6003      	str	r3, [r0, #0]
   829a8:	684b      	ldr	r3, [r1, #4]
   829aa:	6043      	str	r3, [r0, #4]
   829ac:	688b      	ldr	r3, [r1, #8]
   829ae:	6083      	str	r3, [r0, #8]
   829b0:	68cb      	ldr	r3, [r1, #12]
   829b2:	60c3      	str	r3, [r0, #12]
   829b4:	690b      	ldr	r3, [r1, #16]
   829b6:	6103      	str	r3, [r0, #16]
   829b8:	694b      	ldr	r3, [r1, #20]
   829ba:	6143      	str	r3, [r0, #20]
   829bc:	698b      	ldr	r3, [r1, #24]
   829be:	6183      	str	r3, [r0, #24]
   829c0:	69cb      	ldr	r3, [r1, #28]
   829c2:	61c3      	str	r3, [r0, #28]
   829c4:	6a0b      	ldr	r3, [r1, #32]
   829c6:	6203      	str	r3, [r0, #32]
   829c8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   829ca:	6243      	str	r3, [r0, #36]	; 0x24
   829cc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   829ce:	6283      	str	r3, [r0, #40]	; 0x28
   829d0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   829d2:	62c3      	str	r3, [r0, #44]	; 0x2c
   829d4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   829d6:	6303      	str	r3, [r0, #48]	; 0x30
   829d8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   829da:	6343      	str	r3, [r0, #52]	; 0x34
   829dc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   829de:	6383      	str	r3, [r0, #56]	; 0x38
   829e0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   829e2:	63c3      	str	r3, [r0, #60]	; 0x3c
   829e4:	3040      	adds	r0, #64	; 0x40
   829e6:	3140      	adds	r1, #64	; 0x40
   829e8:	3a40      	subs	r2, #64	; 0x40
   829ea:	d2db      	bcs.n	829a4 <memcpy+0x10>
   829ec:	3230      	adds	r2, #48	; 0x30
   829ee:	d30b      	bcc.n	82a08 <memcpy+0x74>
   829f0:	680b      	ldr	r3, [r1, #0]
   829f2:	6003      	str	r3, [r0, #0]
   829f4:	684b      	ldr	r3, [r1, #4]
   829f6:	6043      	str	r3, [r0, #4]
   829f8:	688b      	ldr	r3, [r1, #8]
   829fa:	6083      	str	r3, [r0, #8]
   829fc:	68cb      	ldr	r3, [r1, #12]
   829fe:	60c3      	str	r3, [r0, #12]
   82a00:	3010      	adds	r0, #16
   82a02:	3110      	adds	r1, #16
   82a04:	3a10      	subs	r2, #16
   82a06:	d2f3      	bcs.n	829f0 <memcpy+0x5c>
   82a08:	320c      	adds	r2, #12
   82a0a:	d305      	bcc.n	82a18 <memcpy+0x84>
   82a0c:	f851 3b04 	ldr.w	r3, [r1], #4
   82a10:	f840 3b04 	str.w	r3, [r0], #4
   82a14:	3a04      	subs	r2, #4
   82a16:	d2f9      	bcs.n	82a0c <memcpy+0x78>
   82a18:	3204      	adds	r2, #4
   82a1a:	d008      	beq.n	82a2e <memcpy+0x9a>
   82a1c:	07d2      	lsls	r2, r2, #31
   82a1e:	bf1c      	itt	ne
   82a20:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82a24:	f800 3b01 	strbne.w	r3, [r0], #1
   82a28:	d301      	bcc.n	82a2e <memcpy+0x9a>
   82a2a:	880b      	ldrh	r3, [r1, #0]
   82a2c:	8003      	strh	r3, [r0, #0]
   82a2e:	4660      	mov	r0, ip
   82a30:	4770      	bx	lr
   82a32:	bf00      	nop
   82a34:	2a08      	cmp	r2, #8
   82a36:	d313      	bcc.n	82a60 <memcpy+0xcc>
   82a38:	078b      	lsls	r3, r1, #30
   82a3a:	d0b1      	beq.n	829a0 <memcpy+0xc>
   82a3c:	f010 0303 	ands.w	r3, r0, #3
   82a40:	d0ae      	beq.n	829a0 <memcpy+0xc>
   82a42:	f1c3 0304 	rsb	r3, r3, #4
   82a46:	1ad2      	subs	r2, r2, r3
   82a48:	07db      	lsls	r3, r3, #31
   82a4a:	bf1c      	itt	ne
   82a4c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82a50:	f800 3b01 	strbne.w	r3, [r0], #1
   82a54:	d3a4      	bcc.n	829a0 <memcpy+0xc>
   82a56:	f831 3b02 	ldrh.w	r3, [r1], #2
   82a5a:	f820 3b02 	strh.w	r3, [r0], #2
   82a5e:	e79f      	b.n	829a0 <memcpy+0xc>
   82a60:	3a04      	subs	r2, #4
   82a62:	d3d9      	bcc.n	82a18 <memcpy+0x84>
   82a64:	3a01      	subs	r2, #1
   82a66:	f811 3b01 	ldrb.w	r3, [r1], #1
   82a6a:	f800 3b01 	strb.w	r3, [r0], #1
   82a6e:	d2f9      	bcs.n	82a64 <memcpy+0xd0>
   82a70:	780b      	ldrb	r3, [r1, #0]
   82a72:	7003      	strb	r3, [r0, #0]
   82a74:	784b      	ldrb	r3, [r1, #1]
   82a76:	7043      	strb	r3, [r0, #1]
   82a78:	788b      	ldrb	r3, [r1, #2]
   82a7a:	7083      	strb	r3, [r0, #2]
   82a7c:	4660      	mov	r0, ip
   82a7e:	4770      	bx	lr

00082a80 <memset>:
   82a80:	b4f0      	push	{r4, r5, r6, r7}
   82a82:	0784      	lsls	r4, r0, #30
   82a84:	d043      	beq.n	82b0e <memset+0x8e>
   82a86:	1e54      	subs	r4, r2, #1
   82a88:	2a00      	cmp	r2, #0
   82a8a:	d03e      	beq.n	82b0a <memset+0x8a>
   82a8c:	b2cd      	uxtb	r5, r1
   82a8e:	4603      	mov	r3, r0
   82a90:	e003      	b.n	82a9a <memset+0x1a>
   82a92:	1e62      	subs	r2, r4, #1
   82a94:	2c00      	cmp	r4, #0
   82a96:	d038      	beq.n	82b0a <memset+0x8a>
   82a98:	4614      	mov	r4, r2
   82a9a:	f803 5b01 	strb.w	r5, [r3], #1
   82a9e:	079a      	lsls	r2, r3, #30
   82aa0:	d1f7      	bne.n	82a92 <memset+0x12>
   82aa2:	2c03      	cmp	r4, #3
   82aa4:	d92a      	bls.n	82afc <memset+0x7c>
   82aa6:	b2cd      	uxtb	r5, r1
   82aa8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82aac:	2c0f      	cmp	r4, #15
   82aae:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82ab2:	d915      	bls.n	82ae0 <memset+0x60>
   82ab4:	f1a4 0710 	sub.w	r7, r4, #16
   82ab8:	093f      	lsrs	r7, r7, #4
   82aba:	f103 0610 	add.w	r6, r3, #16
   82abe:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   82ac2:	461a      	mov	r2, r3
   82ac4:	6015      	str	r5, [r2, #0]
   82ac6:	6055      	str	r5, [r2, #4]
   82ac8:	6095      	str	r5, [r2, #8]
   82aca:	60d5      	str	r5, [r2, #12]
   82acc:	3210      	adds	r2, #16
   82ace:	42b2      	cmp	r2, r6
   82ad0:	d1f8      	bne.n	82ac4 <memset+0x44>
   82ad2:	f004 040f 	and.w	r4, r4, #15
   82ad6:	3701      	adds	r7, #1
   82ad8:	2c03      	cmp	r4, #3
   82ada:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   82ade:	d90d      	bls.n	82afc <memset+0x7c>
   82ae0:	461e      	mov	r6, r3
   82ae2:	4622      	mov	r2, r4
   82ae4:	3a04      	subs	r2, #4
   82ae6:	2a03      	cmp	r2, #3
   82ae8:	f846 5b04 	str.w	r5, [r6], #4
   82aec:	d8fa      	bhi.n	82ae4 <memset+0x64>
   82aee:	1f22      	subs	r2, r4, #4
   82af0:	f022 0203 	bic.w	r2, r2, #3
   82af4:	3204      	adds	r2, #4
   82af6:	4413      	add	r3, r2
   82af8:	f004 0403 	and.w	r4, r4, #3
   82afc:	b12c      	cbz	r4, 82b0a <memset+0x8a>
   82afe:	b2c9      	uxtb	r1, r1
   82b00:	441c      	add	r4, r3
   82b02:	f803 1b01 	strb.w	r1, [r3], #1
   82b06:	42a3      	cmp	r3, r4
   82b08:	d1fb      	bne.n	82b02 <memset+0x82>
   82b0a:	bcf0      	pop	{r4, r5, r6, r7}
   82b0c:	4770      	bx	lr
   82b0e:	4614      	mov	r4, r2
   82b10:	4603      	mov	r3, r0
   82b12:	e7c6      	b.n	82aa2 <memset+0x22>

00082b14 <setbuf>:
   82b14:	2900      	cmp	r1, #0
   82b16:	bf0c      	ite	eq
   82b18:	2202      	moveq	r2, #2
   82b1a:	2200      	movne	r2, #0
   82b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82b20:	f000 b800 	b.w	82b24 <setvbuf>

00082b24 <setvbuf>:
   82b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82b28:	4d3c      	ldr	r5, [pc, #240]	; (82c1c <setvbuf+0xf8>)
   82b2a:	4604      	mov	r4, r0
   82b2c:	682d      	ldr	r5, [r5, #0]
   82b2e:	4688      	mov	r8, r1
   82b30:	4616      	mov	r6, r2
   82b32:	461f      	mov	r7, r3
   82b34:	b115      	cbz	r5, 82b3c <setvbuf+0x18>
   82b36:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82b38:	2b00      	cmp	r3, #0
   82b3a:	d04f      	beq.n	82bdc <setvbuf+0xb8>
   82b3c:	2e02      	cmp	r6, #2
   82b3e:	d830      	bhi.n	82ba2 <setvbuf+0x7e>
   82b40:	2f00      	cmp	r7, #0
   82b42:	db2e      	blt.n	82ba2 <setvbuf+0x7e>
   82b44:	4628      	mov	r0, r5
   82b46:	4621      	mov	r1, r4
   82b48:	f003 fb2a 	bl	861a0 <_fflush_r>
   82b4c:	89a3      	ldrh	r3, [r4, #12]
   82b4e:	2200      	movs	r2, #0
   82b50:	6062      	str	r2, [r4, #4]
   82b52:	61a2      	str	r2, [r4, #24]
   82b54:	061a      	lsls	r2, r3, #24
   82b56:	d428      	bmi.n	82baa <setvbuf+0x86>
   82b58:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   82b5c:	b29b      	uxth	r3, r3
   82b5e:	2e02      	cmp	r6, #2
   82b60:	81a3      	strh	r3, [r4, #12]
   82b62:	d02d      	beq.n	82bc0 <setvbuf+0x9c>
   82b64:	f1b8 0f00 	cmp.w	r8, #0
   82b68:	d03c      	beq.n	82be4 <setvbuf+0xc0>
   82b6a:	2e01      	cmp	r6, #1
   82b6c:	d013      	beq.n	82b96 <setvbuf+0x72>
   82b6e:	b29b      	uxth	r3, r3
   82b70:	f003 0008 	and.w	r0, r3, #8
   82b74:	4a2a      	ldr	r2, [pc, #168]	; (82c20 <setvbuf+0xfc>)
   82b76:	b280      	uxth	r0, r0
   82b78:	63ea      	str	r2, [r5, #60]	; 0x3c
   82b7a:	f8c4 8000 	str.w	r8, [r4]
   82b7e:	f8c4 8010 	str.w	r8, [r4, #16]
   82b82:	6167      	str	r7, [r4, #20]
   82b84:	b178      	cbz	r0, 82ba6 <setvbuf+0x82>
   82b86:	f013 0f03 	tst.w	r3, #3
   82b8a:	bf18      	it	ne
   82b8c:	2700      	movne	r7, #0
   82b8e:	60a7      	str	r7, [r4, #8]
   82b90:	2000      	movs	r0, #0
   82b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b96:	f043 0301 	orr.w	r3, r3, #1
   82b9a:	427a      	negs	r2, r7
   82b9c:	81a3      	strh	r3, [r4, #12]
   82b9e:	61a2      	str	r2, [r4, #24]
   82ba0:	e7e5      	b.n	82b6e <setvbuf+0x4a>
   82ba2:	f04f 30ff 	mov.w	r0, #4294967295
   82ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82baa:	4628      	mov	r0, r5
   82bac:	6921      	ldr	r1, [r4, #16]
   82bae:	f003 fc57 	bl	86460 <_free_r>
   82bb2:	89a3      	ldrh	r3, [r4, #12]
   82bb4:	2e02      	cmp	r6, #2
   82bb6:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   82bba:	b29b      	uxth	r3, r3
   82bbc:	81a3      	strh	r3, [r4, #12]
   82bbe:	d1d1      	bne.n	82b64 <setvbuf+0x40>
   82bc0:	2000      	movs	r0, #0
   82bc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82bc6:	f043 0302 	orr.w	r3, r3, #2
   82bca:	2500      	movs	r5, #0
   82bcc:	2101      	movs	r1, #1
   82bce:	81a3      	strh	r3, [r4, #12]
   82bd0:	60a5      	str	r5, [r4, #8]
   82bd2:	6022      	str	r2, [r4, #0]
   82bd4:	6122      	str	r2, [r4, #16]
   82bd6:	6161      	str	r1, [r4, #20]
   82bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82bdc:	4628      	mov	r0, r5
   82bde:	f003 fafb 	bl	861d8 <__sinit>
   82be2:	e7ab      	b.n	82b3c <setvbuf+0x18>
   82be4:	2f00      	cmp	r7, #0
   82be6:	bf08      	it	eq
   82be8:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   82bec:	4638      	mov	r0, r7
   82bee:	f003 ff31 	bl	86a54 <malloc>
   82bf2:	4680      	mov	r8, r0
   82bf4:	b128      	cbz	r0, 82c02 <setvbuf+0xde>
   82bf6:	89a3      	ldrh	r3, [r4, #12]
   82bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82bfc:	b29b      	uxth	r3, r3
   82bfe:	81a3      	strh	r3, [r4, #12]
   82c00:	e7b3      	b.n	82b6a <setvbuf+0x46>
   82c02:	f44f 6080 	mov.w	r0, #1024	; 0x400
   82c06:	f003 ff25 	bl	86a54 <malloc>
   82c0a:	4680      	mov	r8, r0
   82c0c:	b918      	cbnz	r0, 82c16 <setvbuf+0xf2>
   82c0e:	89a3      	ldrh	r3, [r4, #12]
   82c10:	f04f 30ff 	mov.w	r0, #4294967295
   82c14:	e7d5      	b.n	82bc2 <setvbuf+0x9e>
   82c16:	f44f 6780 	mov.w	r7, #1024	; 0x400
   82c1a:	e7ec      	b.n	82bf6 <setvbuf+0xd2>
   82c1c:	200705b8 	.word	0x200705b8
   82c20:	000861cd 	.word	0x000861cd

00082c24 <sprintf>:
   82c24:	b40e      	push	{r1, r2, r3}
   82c26:	b5f0      	push	{r4, r5, r6, r7, lr}
   82c28:	b09c      	sub	sp, #112	; 0x70
   82c2a:	ac21      	add	r4, sp, #132	; 0x84
   82c2c:	f854 2b04 	ldr.w	r2, [r4], #4
   82c30:	490e      	ldr	r1, [pc, #56]	; (82c6c <sprintf+0x48>)
   82c32:	4606      	mov	r6, r0
   82c34:	4623      	mov	r3, r4
   82c36:	f44f 7e02 	mov.w	lr, #520	; 0x208
   82c3a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   82c3e:	6808      	ldr	r0, [r1, #0]
   82c40:	f64f 77ff 	movw	r7, #65535	; 0xffff
   82c44:	a902      	add	r1, sp, #8
   82c46:	9602      	str	r6, [sp, #8]
   82c48:	9606      	str	r6, [sp, #24]
   82c4a:	9401      	str	r4, [sp, #4]
   82c4c:	f8ad e014 	strh.w	lr, [sp, #20]
   82c50:	9504      	str	r5, [sp, #16]
   82c52:	9507      	str	r5, [sp, #28]
   82c54:	f8ad 7016 	strh.w	r7, [sp, #22]
   82c58:	f000 f86c 	bl	82d34 <_svfprintf_r>
   82c5c:	9b02      	ldr	r3, [sp, #8]
   82c5e:	2200      	movs	r2, #0
   82c60:	701a      	strb	r2, [r3, #0]
   82c62:	b01c      	add	sp, #112	; 0x70
   82c64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   82c68:	b003      	add	sp, #12
   82c6a:	4770      	bx	lr
   82c6c:	200705b8 	.word	0x200705b8

00082c70 <strlen>:
   82c70:	f020 0103 	bic.w	r1, r0, #3
   82c74:	f010 0003 	ands.w	r0, r0, #3
   82c78:	f1c0 0000 	rsb	r0, r0, #0
   82c7c:	f851 3b04 	ldr.w	r3, [r1], #4
   82c80:	f100 0c04 	add.w	ip, r0, #4
   82c84:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   82c88:	f06f 0200 	mvn.w	r2, #0
   82c8c:	bf1c      	itt	ne
   82c8e:	fa22 f20c 	lsrne.w	r2, r2, ip
   82c92:	4313      	orrne	r3, r2
   82c94:	f04f 0c01 	mov.w	ip, #1
   82c98:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   82c9c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82ca0:	eba3 020c 	sub.w	r2, r3, ip
   82ca4:	ea22 0203 	bic.w	r2, r2, r3
   82ca8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   82cac:	bf04      	itt	eq
   82cae:	f851 3b04 	ldreq.w	r3, [r1], #4
   82cb2:	3004      	addeq	r0, #4
   82cb4:	d0f4      	beq.n	82ca0 <strlen+0x30>
   82cb6:	f013 0fff 	tst.w	r3, #255	; 0xff
   82cba:	bf1f      	itttt	ne
   82cbc:	3001      	addne	r0, #1
   82cbe:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   82cc2:	3001      	addne	r0, #1
   82cc4:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   82cc8:	bf18      	it	ne
   82cca:	3001      	addne	r0, #1
   82ccc:	4770      	bx	lr
   82cce:	bf00      	nop

00082cd0 <strncpy>:
   82cd0:	ea40 0301 	orr.w	r3, r0, r1
   82cd4:	079b      	lsls	r3, r3, #30
   82cd6:	b470      	push	{r4, r5, r6}
   82cd8:	d12a      	bne.n	82d30 <strncpy+0x60>
   82cda:	2a03      	cmp	r2, #3
   82cdc:	d928      	bls.n	82d30 <strncpy+0x60>
   82cde:	460c      	mov	r4, r1
   82ce0:	4603      	mov	r3, r0
   82ce2:	4621      	mov	r1, r4
   82ce4:	f854 5b04 	ldr.w	r5, [r4], #4
   82ce8:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   82cec:	ea26 0605 	bic.w	r6, r6, r5
   82cf0:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   82cf4:	d105      	bne.n	82d02 <strncpy+0x32>
   82cf6:	3a04      	subs	r2, #4
   82cf8:	2a03      	cmp	r2, #3
   82cfa:	f843 5b04 	str.w	r5, [r3], #4
   82cfe:	4621      	mov	r1, r4
   82d00:	d8ef      	bhi.n	82ce2 <strncpy+0x12>
   82d02:	b19a      	cbz	r2, 82d2c <strncpy+0x5c>
   82d04:	780c      	ldrb	r4, [r1, #0]
   82d06:	3a01      	subs	r2, #1
   82d08:	701c      	strb	r4, [r3, #0]
   82d0a:	3301      	adds	r3, #1
   82d0c:	b13c      	cbz	r4, 82d1e <strncpy+0x4e>
   82d0e:	b16a      	cbz	r2, 82d2c <strncpy+0x5c>
   82d10:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   82d14:	3a01      	subs	r2, #1
   82d16:	f803 4b01 	strb.w	r4, [r3], #1
   82d1a:	2c00      	cmp	r4, #0
   82d1c:	d1f7      	bne.n	82d0e <strncpy+0x3e>
   82d1e:	b12a      	cbz	r2, 82d2c <strncpy+0x5c>
   82d20:	441a      	add	r2, r3
   82d22:	2100      	movs	r1, #0
   82d24:	f803 1b01 	strb.w	r1, [r3], #1
   82d28:	4293      	cmp	r3, r2
   82d2a:	d1fb      	bne.n	82d24 <strncpy+0x54>
   82d2c:	bc70      	pop	{r4, r5, r6}
   82d2e:	4770      	bx	lr
   82d30:	4603      	mov	r3, r0
   82d32:	e7e6      	b.n	82d02 <strncpy+0x32>

00082d34 <_svfprintf_r>:
   82d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82d38:	b0c9      	sub	sp, #292	; 0x124
   82d3a:	9310      	str	r3, [sp, #64]	; 0x40
   82d3c:	910c      	str	r1, [sp, #48]	; 0x30
   82d3e:	4691      	mov	r9, r2
   82d40:	900d      	str	r0, [sp, #52]	; 0x34
   82d42:	f003 fe13 	bl	8696c <_localeconv_r>
   82d46:	6800      	ldr	r0, [r0, #0]
   82d48:	9015      	str	r0, [sp, #84]	; 0x54
   82d4a:	f7ff ff91 	bl	82c70 <strlen>
   82d4e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82d50:	9018      	str	r0, [sp, #96]	; 0x60
   82d52:	89a3      	ldrh	r3, [r4, #12]
   82d54:	061e      	lsls	r6, r3, #24
   82d56:	d503      	bpl.n	82d60 <_svfprintf_r+0x2c>
   82d58:	6923      	ldr	r3, [r4, #16]
   82d5a:	2b00      	cmp	r3, #0
   82d5c:	f001 8081 	beq.w	83e62 <_svfprintf_r+0x112e>
   82d60:	ac38      	add	r4, sp, #224	; 0xe0
   82d62:	46a4      	mov	ip, r4
   82d64:	9408      	str	r4, [sp, #32]
   82d66:	942b      	str	r4, [sp, #172]	; 0xac
   82d68:	2500      	movs	r5, #0
   82d6a:	2400      	movs	r4, #0
   82d6c:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
   82d70:	2300      	movs	r3, #0
   82d72:	9311      	str	r3, [sp, #68]	; 0x44
   82d74:	932d      	str	r3, [sp, #180]	; 0xb4
   82d76:	932c      	str	r3, [sp, #176]	; 0xb0
   82d78:	931a      	str	r3, [sp, #104]	; 0x68
   82d7a:	9319      	str	r3, [sp, #100]	; 0x64
   82d7c:	930e      	str	r3, [sp, #56]	; 0x38
   82d7e:	4666      	mov	r6, ip
   82d80:	f899 3000 	ldrb.w	r3, [r9]
   82d84:	2b00      	cmp	r3, #0
   82d86:	f000 80f8 	beq.w	82f7a <_svfprintf_r+0x246>
   82d8a:	2b25      	cmp	r3, #37	; 0x25
   82d8c:	f000 80f5 	beq.w	82f7a <_svfprintf_r+0x246>
   82d90:	f109 0201 	add.w	r2, r9, #1
   82d94:	e001      	b.n	82d9a <_svfprintf_r+0x66>
   82d96:	2b25      	cmp	r3, #37	; 0x25
   82d98:	d004      	beq.n	82da4 <_svfprintf_r+0x70>
   82d9a:	7813      	ldrb	r3, [r2, #0]
   82d9c:	4614      	mov	r4, r2
   82d9e:	3201      	adds	r2, #1
   82da0:	2b00      	cmp	r3, #0
   82da2:	d1f8      	bne.n	82d96 <_svfprintf_r+0x62>
   82da4:	ebc9 0504 	rsb	r5, r9, r4
   82da8:	b17d      	cbz	r5, 82dca <_svfprintf_r+0x96>
   82daa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   82dac:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   82dae:	3301      	adds	r3, #1
   82db0:	442a      	add	r2, r5
   82db2:	2b07      	cmp	r3, #7
   82db4:	f8c6 9000 	str.w	r9, [r6]
   82db8:	6075      	str	r5, [r6, #4]
   82dba:	922d      	str	r2, [sp, #180]	; 0xb4
   82dbc:	932c      	str	r3, [sp, #176]	; 0xb0
   82dbe:	f300 80c2 	bgt.w	82f46 <_svfprintf_r+0x212>
   82dc2:	3608      	adds	r6, #8
   82dc4:	980e      	ldr	r0, [sp, #56]	; 0x38
   82dc6:	4428      	add	r0, r5
   82dc8:	900e      	str	r0, [sp, #56]	; 0x38
   82dca:	7823      	ldrb	r3, [r4, #0]
   82dcc:	2b00      	cmp	r3, #0
   82dce:	f000 80c2 	beq.w	82f56 <_svfprintf_r+0x222>
   82dd2:	2300      	movs	r3, #0
   82dd4:	f894 8001 	ldrb.w	r8, [r4, #1]
   82dd8:	461a      	mov	r2, r3
   82dda:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
   82dde:	930f      	str	r3, [sp, #60]	; 0x3c
   82de0:	9309      	str	r3, [sp, #36]	; 0x24
   82de2:	f104 0901 	add.w	r9, r4, #1
   82de6:	f04f 34ff 	mov.w	r4, #4294967295
   82dea:	940a      	str	r4, [sp, #40]	; 0x28
   82dec:	f109 0901 	add.w	r9, r9, #1
   82df0:	f1a8 0320 	sub.w	r3, r8, #32
   82df4:	2b58      	cmp	r3, #88	; 0x58
   82df6:	f200 83c5 	bhi.w	83584 <_svfprintf_r+0x850>
   82dfa:	e8df f013 	tbh	[pc, r3, lsl #1]
   82dfe:	026a      	.short	0x026a
   82e00:	03c303c3 	.word	0x03c303c3
   82e04:	03c30271 	.word	0x03c30271
   82e08:	03c303c3 	.word	0x03c303c3
   82e0c:	03c303c3 	.word	0x03c303c3
   82e10:	031403c3 	.word	0x031403c3
   82e14:	03c30366 	.word	0x03c30366
   82e18:	00c0009d 	.word	0x00c0009d
   82e1c:	027803c3 	.word	0x027803c3
   82e20:	027f027f 	.word	0x027f027f
   82e24:	027f027f 	.word	0x027f027f
   82e28:	027f027f 	.word	0x027f027f
   82e2c:	027f027f 	.word	0x027f027f
   82e30:	03c3027f 	.word	0x03c3027f
   82e34:	03c303c3 	.word	0x03c303c3
   82e38:	03c303c3 	.word	0x03c303c3
   82e3c:	03c303c3 	.word	0x03c303c3
   82e40:	03c303c3 	.word	0x03c303c3
   82e44:	029003c3 	.word	0x029003c3
   82e48:	03c30371 	.word	0x03c30371
   82e4c:	03c30371 	.word	0x03c30371
   82e50:	03c303c3 	.word	0x03c303c3
   82e54:	036a03c3 	.word	0x036a03c3
   82e58:	03c303c3 	.word	0x03c303c3
   82e5c:	03c30078 	.word	0x03c30078
   82e60:	03c303c3 	.word	0x03c303c3
   82e64:	03c303c3 	.word	0x03c303c3
   82e68:	03c30059 	.word	0x03c30059
   82e6c:	02af03c3 	.word	0x02af03c3
   82e70:	03c303c3 	.word	0x03c303c3
   82e74:	03c303c3 	.word	0x03c303c3
   82e78:	03c303c3 	.word	0x03c303c3
   82e7c:	03c303c3 	.word	0x03c303c3
   82e80:	03c303c3 	.word	0x03c303c3
   82e84:	03480337 	.word	0x03480337
   82e88:	03710371 	.word	0x03710371
   82e8c:	02ff0371 	.word	0x02ff0371
   82e90:	03c30348 	.word	0x03c30348
   82e94:	030803c3 	.word	0x030803c3
   82e98:	02c503c3 	.word	0x02c503c3
   82e9c:	0320007c 	.word	0x0320007c
   82ea0:	03c303a3 	.word	0x03c303a3
   82ea4:	03c302d9 	.word	0x03c302d9
   82ea8:	03c3005f 	.word	0x03c3005f
   82eac:	00de03c3 	.word	0x00de03c3
   82eb0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   82eb4:	f04c 0c10 	orr.w	ip, ip, #16
   82eb8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   82ebc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82ebe:	06a2      	lsls	r2, r4, #26
   82ec0:	f100 8354 	bmi.w	8356c <_svfprintf_r+0x838>
   82ec4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82ec6:	06e3      	lsls	r3, r4, #27
   82ec8:	f100 85bd 	bmi.w	83a46 <_svfprintf_r+0xd12>
   82ecc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   82ed0:	f01c 0f40 	tst.w	ip, #64	; 0x40
   82ed4:	f000 85b7 	beq.w	83a46 <_svfprintf_r+0xd12>
   82ed8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   82edc:	2500      	movs	r5, #0
   82ede:	f8bc 4000 	ldrh.w	r4, [ip]
   82ee2:	f10c 0c04 	add.w	ip, ip, #4
   82ee6:	2301      	movs	r3, #1
   82ee8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   82eec:	e08c      	b.n	83008 <_svfprintf_r+0x2d4>
   82eee:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82ef0:	f045 0510 	orr.w	r5, r5, #16
   82ef4:	9509      	str	r5, [sp, #36]	; 0x24
   82ef6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   82efa:	f01c 0320 	ands.w	r3, ip, #32
   82efe:	f040 832a 	bne.w	83556 <_svfprintf_r+0x822>
   82f02:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   82f06:	f01c 0210 	ands.w	r2, ip, #16
   82f0a:	f040 85a4 	bne.w	83a56 <_svfprintf_r+0xd22>
   82f0e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   82f12:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
   82f16:	f000 859e 	beq.w	83a56 <_svfprintf_r+0xd22>
   82f1a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   82f1e:	4613      	mov	r3, r2
   82f20:	f8bc 4000 	ldrh.w	r4, [ip]
   82f24:	f10c 0c04 	add.w	ip, ip, #4
   82f28:	2500      	movs	r5, #0
   82f2a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   82f2e:	e06b      	b.n	83008 <_svfprintf_r+0x2d4>
   82f30:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82f32:	9310      	str	r3, [sp, #64]	; 0x40
   82f34:	4264      	negs	r4, r4
   82f36:	940f      	str	r4, [sp, #60]	; 0x3c
   82f38:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82f3a:	f045 0504 	orr.w	r5, r5, #4
   82f3e:	9509      	str	r5, [sp, #36]	; 0x24
   82f40:	f899 8000 	ldrb.w	r8, [r9]
   82f44:	e752      	b.n	82dec <_svfprintf_r+0xb8>
   82f46:	980d      	ldr	r0, [sp, #52]	; 0x34
   82f48:	990c      	ldr	r1, [sp, #48]	; 0x30
   82f4a:	aa2b      	add	r2, sp, #172	; 0xac
   82f4c:	f004 fe40 	bl	87bd0 <__ssprint_r>
   82f50:	b940      	cbnz	r0, 82f64 <_svfprintf_r+0x230>
   82f52:	ae38      	add	r6, sp, #224	; 0xe0
   82f54:	e736      	b.n	82dc4 <_svfprintf_r+0x90>
   82f56:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   82f58:	b123      	cbz	r3, 82f64 <_svfprintf_r+0x230>
   82f5a:	980d      	ldr	r0, [sp, #52]	; 0x34
   82f5c:	990c      	ldr	r1, [sp, #48]	; 0x30
   82f5e:	aa2b      	add	r2, sp, #172	; 0xac
   82f60:	f004 fe36 	bl	87bd0 <__ssprint_r>
   82f64:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82f66:	980e      	ldr	r0, [sp, #56]	; 0x38
   82f68:	89a3      	ldrh	r3, [r4, #12]
   82f6a:	f013 0f40 	tst.w	r3, #64	; 0x40
   82f6e:	bf18      	it	ne
   82f70:	f04f 30ff 	movne.w	r0, #4294967295
   82f74:	b049      	add	sp, #292	; 0x124
   82f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f7a:	464c      	mov	r4, r9
   82f7c:	e725      	b.n	82dca <_svfprintf_r+0x96>
   82f7e:	f899 8000 	ldrb.w	r8, [r9]
   82f82:	f109 0001 	add.w	r0, r9, #1
   82f86:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
   82f8a:	f001 810c 	beq.w	841a6 <_svfprintf_r+0x1472>
   82f8e:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   82f92:	2b09      	cmp	r3, #9
   82f94:	bf98      	it	ls
   82f96:	2100      	movls	r1, #0
   82f98:	f201 806b 	bhi.w	84072 <_svfprintf_r+0x133e>
   82f9c:	f810 8b01 	ldrb.w	r8, [r0], #1
   82fa0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82fa4:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   82fa8:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   82fac:	2b09      	cmp	r3, #9
   82fae:	d9f5      	bls.n	82f9c <_svfprintf_r+0x268>
   82fb0:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   82fb4:	910a      	str	r1, [sp, #40]	; 0x28
   82fb6:	4681      	mov	r9, r0
   82fb8:	e71a      	b.n	82df0 <_svfprintf_r+0xbc>
   82fba:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82fbc:	4ca1      	ldr	r4, [pc, #644]	; (83244 <_svfprintf_r+0x510>)
   82fbe:	06af      	lsls	r7, r5, #26
   82fc0:	941a      	str	r4, [sp, #104]	; 0x68
   82fc2:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   82fc6:	f140 81d1 	bpl.w	8336c <_svfprintf_r+0x638>
   82fca:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   82fce:	f10c 0307 	add.w	r3, ip, #7
   82fd2:	f023 0307 	bic.w	r3, r3, #7
   82fd6:	f103 0408 	add.w	r4, r3, #8
   82fda:	9410      	str	r4, [sp, #64]	; 0x40
   82fdc:	e9d3 4500 	ldrd	r4, r5, [r3]
   82fe0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   82fe4:	f01c 0f01 	tst.w	ip, #1
   82fe8:	f000 8462 	beq.w	838b0 <_svfprintf_r+0xb7c>
   82fec:	ea54 0005 	orrs.w	r0, r4, r5
   82ff0:	f000 845e 	beq.w	838b0 <_svfprintf_r+0xb7c>
   82ff4:	2330      	movs	r3, #48	; 0x30
   82ff6:	f04c 0c02 	orr.w	ip, ip, #2
   82ffa:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
   82ffe:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
   83002:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   83006:	2302      	movs	r3, #2
   83008:	f04f 0a00 	mov.w	sl, #0
   8300c:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   83010:	990a      	ldr	r1, [sp, #40]	; 0x28
   83012:	2900      	cmp	r1, #0
   83014:	db05      	blt.n	83022 <_svfprintf_r+0x2ee>
   83016:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   8301a:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
   8301e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   83022:	ea54 0005 	orrs.w	r0, r4, r5
   83026:	f040 82c5 	bne.w	835b4 <_svfprintf_r+0x880>
   8302a:	990a      	ldr	r1, [sp, #40]	; 0x28
   8302c:	2900      	cmp	r1, #0
   8302e:	f040 82c1 	bne.w	835b4 <_svfprintf_r+0x880>
   83032:	2b00      	cmp	r3, #0
   83034:	f040 8438 	bne.w	838a8 <_svfprintf_r+0xb74>
   83038:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   8303c:	f01c 0f01 	tst.w	ip, #1
   83040:	f000 8432 	beq.w	838a8 <_svfprintf_r+0xb74>
   83044:	af48      	add	r7, sp, #288	; 0x120
   83046:	2330      	movs	r3, #48	; 0x30
   83048:	9d08      	ldr	r5, [sp, #32]
   8304a:	f807 3d41 	strb.w	r3, [r7, #-65]!
   8304e:	1bec      	subs	r4, r5, r7
   83050:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   83054:	2500      	movs	r5, #0
   83056:	4564      	cmp	r4, ip
   83058:	bfa8      	it	ge
   8305a:	46a4      	movge	ip, r4
   8305c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   83060:	9514      	str	r5, [sp, #80]	; 0x50
   83062:	f1ba 0f00 	cmp.w	sl, #0
   83066:	d002      	beq.n	8306e <_svfprintf_r+0x33a>
   83068:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8306a:	3501      	adds	r5, #1
   8306c:	950b      	str	r5, [sp, #44]	; 0x2c
   8306e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83070:	f013 0302 	ands.w	r3, r3, #2
   83074:	9312      	str	r3, [sp, #72]	; 0x48
   83076:	d002      	beq.n	8307e <_svfprintf_r+0x34a>
   83078:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8307a:	3502      	adds	r5, #2
   8307c:	950b      	str	r5, [sp, #44]	; 0x2c
   8307e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   83082:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
   83086:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
   8308a:	f040 8290 	bne.w	835ae <_svfprintf_r+0x87a>
   8308e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   83090:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
   83094:	ebcc 0b05 	rsb	fp, ip, r5
   83098:	f1bb 0f00 	cmp.w	fp, #0
   8309c:	f340 8287 	ble.w	835ae <_svfprintf_r+0x87a>
   830a0:	f1bb 0f10 	cmp.w	fp, #16
   830a4:	992d      	ldr	r1, [sp, #180]	; 0xb4
   830a6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   830a8:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8324c <_svfprintf_r+0x518>
   830ac:	dd2c      	ble.n	83108 <_svfprintf_r+0x3d4>
   830ae:	971b      	str	r7, [sp, #108]	; 0x6c
   830b0:	4630      	mov	r0, r6
   830b2:	4657      	mov	r7, sl
   830b4:	2510      	movs	r5, #16
   830b6:	46ca      	mov	sl, r9
   830b8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   830ba:	46a1      	mov	r9, r4
   830bc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   830be:	e006      	b.n	830ce <_svfprintf_r+0x39a>
   830c0:	f1ab 0b10 	sub.w	fp, fp, #16
   830c4:	f1bb 0f10 	cmp.w	fp, #16
   830c8:	f100 0008 	add.w	r0, r0, #8
   830cc:	dd17      	ble.n	830fe <_svfprintf_r+0x3ca>
   830ce:	3201      	adds	r2, #1
   830d0:	3110      	adds	r1, #16
   830d2:	2a07      	cmp	r2, #7
   830d4:	912d      	str	r1, [sp, #180]	; 0xb4
   830d6:	922c      	str	r2, [sp, #176]	; 0xb0
   830d8:	6007      	str	r7, [r0, #0]
   830da:	6045      	str	r5, [r0, #4]
   830dc:	ddf0      	ble.n	830c0 <_svfprintf_r+0x38c>
   830de:	4620      	mov	r0, r4
   830e0:	4631      	mov	r1, r6
   830e2:	aa2b      	add	r2, sp, #172	; 0xac
   830e4:	f004 fd74 	bl	87bd0 <__ssprint_r>
   830e8:	2800      	cmp	r0, #0
   830ea:	f47f af3b 	bne.w	82f64 <_svfprintf_r+0x230>
   830ee:	f1ab 0b10 	sub.w	fp, fp, #16
   830f2:	f1bb 0f10 	cmp.w	fp, #16
   830f6:	992d      	ldr	r1, [sp, #180]	; 0xb4
   830f8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   830fa:	a838      	add	r0, sp, #224	; 0xe0
   830fc:	dce7      	bgt.n	830ce <_svfprintf_r+0x39a>
   830fe:	464c      	mov	r4, r9
   83100:	46d1      	mov	r9, sl
   83102:	46ba      	mov	sl, r7
   83104:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
   83106:	4606      	mov	r6, r0
   83108:	3201      	adds	r2, #1
   8310a:	eb0b 0c01 	add.w	ip, fp, r1
   8310e:	2a07      	cmp	r2, #7
   83110:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   83114:	922c      	str	r2, [sp, #176]	; 0xb0
   83116:	e886 0c00 	stmia.w	r6, {sl, fp}
   8311a:	f300 841a 	bgt.w	83952 <_svfprintf_r+0xc1e>
   8311e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   83122:	3608      	adds	r6, #8
   83124:	f1ba 0f00 	cmp.w	sl, #0
   83128:	d00f      	beq.n	8314a <_svfprintf_r+0x416>
   8312a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8312c:	f10c 0c01 	add.w	ip, ip, #1
   83130:	3301      	adds	r3, #1
   83132:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
   83136:	2201      	movs	r2, #1
   83138:	2b07      	cmp	r3, #7
   8313a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   8313e:	932c      	str	r3, [sp, #176]	; 0xb0
   83140:	e886 0006 	stmia.w	r6, {r1, r2}
   83144:	f300 83a4 	bgt.w	83890 <_svfprintf_r+0xb5c>
   83148:	3608      	adds	r6, #8
   8314a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8314c:	b173      	cbz	r3, 8316c <_svfprintf_r+0x438>
   8314e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   83150:	f10c 0c02 	add.w	ip, ip, #2
   83154:	3301      	adds	r3, #1
   83156:	a924      	add	r1, sp, #144	; 0x90
   83158:	2202      	movs	r2, #2
   8315a:	2b07      	cmp	r3, #7
   8315c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   83160:	932c      	str	r3, [sp, #176]	; 0xb0
   83162:	e886 0006 	stmia.w	r6, {r1, r2}
   83166:	f300 8387 	bgt.w	83878 <_svfprintf_r+0xb44>
   8316a:	3608      	adds	r6, #8
   8316c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   8316e:	2d80      	cmp	r5, #128	; 0x80
   83170:	f000 82ca 	beq.w	83708 <_svfprintf_r+0x9d4>
   83174:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   83176:	ebc4 0a05 	rsb	sl, r4, r5
   8317a:	f1ba 0f00 	cmp.w	sl, #0
   8317e:	dd3b      	ble.n	831f8 <_svfprintf_r+0x4c4>
   83180:	f1ba 0f10 	cmp.w	sl, #16
   83184:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   83186:	4d30      	ldr	r5, [pc, #192]	; (83248 <_svfprintf_r+0x514>)
   83188:	dd2b      	ble.n	831e2 <_svfprintf_r+0x4ae>
   8318a:	940a      	str	r4, [sp, #40]	; 0x28
   8318c:	4632      	mov	r2, r6
   8318e:	f04f 0b10 	mov.w	fp, #16
   83192:	462e      	mov	r6, r5
   83194:	4661      	mov	r1, ip
   83196:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   83198:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   8319a:	e006      	b.n	831aa <_svfprintf_r+0x476>
   8319c:	f1aa 0a10 	sub.w	sl, sl, #16
   831a0:	f1ba 0f10 	cmp.w	sl, #16
   831a4:	f102 0208 	add.w	r2, r2, #8
   831a8:	dd17      	ble.n	831da <_svfprintf_r+0x4a6>
   831aa:	3301      	adds	r3, #1
   831ac:	3110      	adds	r1, #16
   831ae:	2b07      	cmp	r3, #7
   831b0:	912d      	str	r1, [sp, #180]	; 0xb4
   831b2:	932c      	str	r3, [sp, #176]	; 0xb0
   831b4:	e882 0840 	stmia.w	r2, {r6, fp}
   831b8:	ddf0      	ble.n	8319c <_svfprintf_r+0x468>
   831ba:	4620      	mov	r0, r4
   831bc:	4629      	mov	r1, r5
   831be:	aa2b      	add	r2, sp, #172	; 0xac
   831c0:	f004 fd06 	bl	87bd0 <__ssprint_r>
   831c4:	2800      	cmp	r0, #0
   831c6:	f47f aecd 	bne.w	82f64 <_svfprintf_r+0x230>
   831ca:	f1aa 0a10 	sub.w	sl, sl, #16
   831ce:	f1ba 0f10 	cmp.w	sl, #16
   831d2:	992d      	ldr	r1, [sp, #180]	; 0xb4
   831d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   831d6:	aa38      	add	r2, sp, #224	; 0xe0
   831d8:	dce7      	bgt.n	831aa <_svfprintf_r+0x476>
   831da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   831dc:	4635      	mov	r5, r6
   831de:	468c      	mov	ip, r1
   831e0:	4616      	mov	r6, r2
   831e2:	3301      	adds	r3, #1
   831e4:	44d4      	add	ip, sl
   831e6:	2b07      	cmp	r3, #7
   831e8:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   831ec:	932c      	str	r3, [sp, #176]	; 0xb0
   831ee:	e886 0420 	stmia.w	r6, {r5, sl}
   831f2:	f300 8335 	bgt.w	83860 <_svfprintf_r+0xb2c>
   831f6:	3608      	adds	r6, #8
   831f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
   831fa:	05ed      	lsls	r5, r5, #23
   831fc:	f100 8224 	bmi.w	83648 <_svfprintf_r+0x914>
   83200:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   83202:	44a4      	add	ip, r4
   83204:	3301      	adds	r3, #1
   83206:	2b07      	cmp	r3, #7
   83208:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   8320c:	6037      	str	r7, [r6, #0]
   8320e:	6074      	str	r4, [r6, #4]
   83210:	932c      	str	r3, [sp, #176]	; 0xb0
   83212:	f300 830f 	bgt.w	83834 <_svfprintf_r+0xb00>
   83216:	3608      	adds	r6, #8
   83218:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8321a:	0763      	lsls	r3, r4, #29
   8321c:	d549      	bpl.n	832b2 <_svfprintf_r+0x57e>
   8321e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   83220:	980b      	ldr	r0, [sp, #44]	; 0x2c
   83222:	1a2c      	subs	r4, r5, r0
   83224:	2c00      	cmp	r4, #0
   83226:	dd44      	ble.n	832b2 <_svfprintf_r+0x57e>
   83228:	2c10      	cmp	r4, #16
   8322a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8322c:	f8df a01c 	ldr.w	sl, [pc, #28]	; 8324c <_svfprintf_r+0x518>
   83230:	dd2b      	ble.n	8328a <_svfprintf_r+0x556>
   83232:	4657      	mov	r7, sl
   83234:	2510      	movs	r5, #16
   83236:	4662      	mov	r2, ip
   83238:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   8323c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   83240:	e00b      	b.n	8325a <_svfprintf_r+0x526>
   83242:	bf00      	nop
   83244:	00089040 	.word	0x00089040
   83248:	0008900c 	.word	0x0008900c
   8324c:	0008905c 	.word	0x0008905c
   83250:	3c10      	subs	r4, #16
   83252:	2c10      	cmp	r4, #16
   83254:	f106 0608 	add.w	r6, r6, #8
   83258:	dd15      	ble.n	83286 <_svfprintf_r+0x552>
   8325a:	3301      	adds	r3, #1
   8325c:	3210      	adds	r2, #16
   8325e:	2b07      	cmp	r3, #7
   83260:	922d      	str	r2, [sp, #180]	; 0xb4
   83262:	932c      	str	r3, [sp, #176]	; 0xb0
   83264:	6037      	str	r7, [r6, #0]
   83266:	6075      	str	r5, [r6, #4]
   83268:	ddf2      	ble.n	83250 <_svfprintf_r+0x51c>
   8326a:	4650      	mov	r0, sl
   8326c:	4641      	mov	r1, r8
   8326e:	aa2b      	add	r2, sp, #172	; 0xac
   83270:	f004 fcae 	bl	87bd0 <__ssprint_r>
   83274:	2800      	cmp	r0, #0
   83276:	f47f ae75 	bne.w	82f64 <_svfprintf_r+0x230>
   8327a:	3c10      	subs	r4, #16
   8327c:	2c10      	cmp	r4, #16
   8327e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   83280:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   83282:	ae38      	add	r6, sp, #224	; 0xe0
   83284:	dce9      	bgt.n	8325a <_svfprintf_r+0x526>
   83286:	4694      	mov	ip, r2
   83288:	46ba      	mov	sl, r7
   8328a:	3301      	adds	r3, #1
   8328c:	44a4      	add	ip, r4
   8328e:	2b07      	cmp	r3, #7
   83290:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   83294:	932c      	str	r3, [sp, #176]	; 0xb0
   83296:	f8c6 a000 	str.w	sl, [r6]
   8329a:	6074      	str	r4, [r6, #4]
   8329c:	dd09      	ble.n	832b2 <_svfprintf_r+0x57e>
   8329e:	980d      	ldr	r0, [sp, #52]	; 0x34
   832a0:	990c      	ldr	r1, [sp, #48]	; 0x30
   832a2:	aa2b      	add	r2, sp, #172	; 0xac
   832a4:	f004 fc94 	bl	87bd0 <__ssprint_r>
   832a8:	2800      	cmp	r0, #0
   832aa:	f47f ae5b 	bne.w	82f64 <_svfprintf_r+0x230>
   832ae:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   832b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   832b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   832b6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   832b8:	42a8      	cmp	r0, r5
   832ba:	bfac      	ite	ge
   832bc:	1824      	addge	r4, r4, r0
   832be:	1964      	addlt	r4, r4, r5
   832c0:	940e      	str	r4, [sp, #56]	; 0x38
   832c2:	f1bc 0f00 	cmp.w	ip, #0
   832c6:	f040 82c1 	bne.w	8384c <_svfprintf_r+0xb18>
   832ca:	2300      	movs	r3, #0
   832cc:	932c      	str	r3, [sp, #176]	; 0xb0
   832ce:	ae38      	add	r6, sp, #224	; 0xe0
   832d0:	e556      	b.n	82d80 <_svfprintf_r+0x4c>
   832d2:	f899 8000 	ldrb.w	r8, [r9]
   832d6:	2a00      	cmp	r2, #0
   832d8:	f47f ad88 	bne.w	82dec <_svfprintf_r+0xb8>
   832dc:	2220      	movs	r2, #32
   832de:	e585      	b.n	82dec <_svfprintf_r+0xb8>
   832e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   832e2:	f045 0501 	orr.w	r5, r5, #1
   832e6:	9509      	str	r5, [sp, #36]	; 0x24
   832e8:	f899 8000 	ldrb.w	r8, [r9]
   832ec:	e57e      	b.n	82dec <_svfprintf_r+0xb8>
   832ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
   832f0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   832f4:	9509      	str	r5, [sp, #36]	; 0x24
   832f6:	f899 8000 	ldrb.w	r8, [r9]
   832fa:	e577      	b.n	82dec <_svfprintf_r+0xb8>
   832fc:	2400      	movs	r4, #0
   832fe:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   83302:	940f      	str	r4, [sp, #60]	; 0x3c
   83304:	4621      	mov	r1, r4
   83306:	f819 8b01 	ldrb.w	r8, [r9], #1
   8330a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8330e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   83312:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   83316:	2b09      	cmp	r3, #9
   83318:	d9f5      	bls.n	83306 <_svfprintf_r+0x5d2>
   8331a:	910f      	str	r1, [sp, #60]	; 0x3c
   8331c:	e568      	b.n	82df0 <_svfprintf_r+0xbc>
   8331e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   83322:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   83326:	f04c 0c10 	orr.w	ip, ip, #16
   8332a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   8332e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83330:	06a5      	lsls	r5, r4, #26
   83332:	f140 80b2 	bpl.w	8349a <_svfprintf_r+0x766>
   83336:	9d10      	ldr	r5, [sp, #64]	; 0x40
   83338:	1de9      	adds	r1, r5, #7
   8333a:	f021 0107 	bic.w	r1, r1, #7
   8333e:	e9d1 2300 	ldrd	r2, r3, [r1]
   83342:	3108      	adds	r1, #8
   83344:	9110      	str	r1, [sp, #64]	; 0x40
   83346:	4614      	mov	r4, r2
   83348:	461d      	mov	r5, r3
   8334a:	2a00      	cmp	r2, #0
   8334c:	f173 0c00 	sbcs.w	ip, r3, #0
   83350:	f2c0 8394 	blt.w	83a7c <_svfprintf_r+0xd48>
   83354:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   83358:	2301      	movs	r3, #1
   8335a:	e659      	b.n	83010 <_svfprintf_r+0x2dc>
   8335c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8335e:	4cb6      	ldr	r4, [pc, #728]	; (83638 <_svfprintf_r+0x904>)
   83360:	06af      	lsls	r7, r5, #26
   83362:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   83366:	941a      	str	r4, [sp, #104]	; 0x68
   83368:	f53f ae2f 	bmi.w	82fca <_svfprintf_r+0x296>
   8336c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8336e:	06ed      	lsls	r5, r5, #27
   83370:	f140 8443 	bpl.w	83bfa <_svfprintf_r+0xec6>
   83374:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   83378:	2500      	movs	r5, #0
   8337a:	f8dc 4000 	ldr.w	r4, [ip]
   8337e:	f10c 0c04 	add.w	ip, ip, #4
   83382:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   83386:	e62b      	b.n	82fe0 <_svfprintf_r+0x2ac>
   83388:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   8338c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   83390:	f01c 0f20 	tst.w	ip, #32
   83394:	f000 8440 	beq.w	83c18 <_svfprintf_r+0xee4>
   83398:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8339a:	6821      	ldr	r1, [r4, #0]
   8339c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   8339e:	17e5      	asrs	r5, r4, #31
   833a0:	462b      	mov	r3, r5
   833a2:	9d10      	ldr	r5, [sp, #64]	; 0x40
   833a4:	4622      	mov	r2, r4
   833a6:	3504      	adds	r5, #4
   833a8:	9510      	str	r5, [sp, #64]	; 0x40
   833aa:	e9c1 2300 	strd	r2, r3, [r1]
   833ae:	e4e7      	b.n	82d80 <_svfprintf_r+0x4c>
   833b0:	9c10      	ldr	r4, [sp, #64]	; 0x40
   833b2:	f04f 0a00 	mov.w	sl, #0
   833b6:	6827      	ldr	r7, [r4, #0]
   833b8:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   833bc:	1d25      	adds	r5, r4, #4
   833be:	2f00      	cmp	r7, #0
   833c0:	f000 85e9 	beq.w	83f96 <_svfprintf_r+0x1262>
   833c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   833c6:	4638      	mov	r0, r7
   833c8:	2c00      	cmp	r4, #0
   833ca:	f2c0 859b 	blt.w	83f04 <_svfprintf_r+0x11d0>
   833ce:	4651      	mov	r1, sl
   833d0:	4622      	mov	r2, r4
   833d2:	f003 fde3 	bl	86f9c <memchr>
   833d6:	2800      	cmp	r0, #0
   833d8:	f000 8613 	beq.w	84002 <_svfprintf_r+0x12ce>
   833dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   833de:	1bc0      	subs	r0, r0, r7
   833e0:	42a0      	cmp	r0, r4
   833e2:	bfb8      	it	lt
   833e4:	4604      	movlt	r4, r0
   833e6:	9510      	str	r5, [sp, #64]	; 0x40
   833e8:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
   833ec:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   833f0:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
   833f4:	950b      	str	r5, [sp, #44]	; 0x2c
   833f6:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   833fa:	e632      	b.n	83062 <_svfprintf_r+0x32e>
   833fc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   83400:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
   83404:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   83408:	f899 8000 	ldrb.w	r8, [r9]
   8340c:	e4ee      	b.n	82dec <_svfprintf_r+0xb8>
   8340e:	f899 8000 	ldrb.w	r8, [r9]
   83412:	464b      	mov	r3, r9
   83414:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   83418:	f000 847f 	beq.w	83d1a <_svfprintf_r+0xfe6>
   8341c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8341e:	f045 0510 	orr.w	r5, r5, #16
   83422:	9509      	str	r5, [sp, #36]	; 0x24
   83424:	e4e2      	b.n	82dec <_svfprintf_r+0xb8>
   83426:	9c10      	ldr	r4, [sp, #64]	; 0x40
   83428:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8342a:	6824      	ldr	r4, [r4, #0]
   8342c:	1d2b      	adds	r3, r5, #4
   8342e:	2c00      	cmp	r4, #0
   83430:	940f      	str	r4, [sp, #60]	; 0x3c
   83432:	f6ff ad7d 	blt.w	82f30 <_svfprintf_r+0x1fc>
   83436:	9310      	str	r3, [sp, #64]	; 0x40
   83438:	f899 8000 	ldrb.w	r8, [r9]
   8343c:	e4d6      	b.n	82dec <_svfprintf_r+0xb8>
   8343e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   83440:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   83444:	9d10      	ldr	r5, [sp, #64]	; 0x40
   83446:	487d      	ldr	r0, [pc, #500]	; (8363c <_svfprintf_r+0x908>)
   83448:	3504      	adds	r5, #4
   8344a:	681c      	ldr	r4, [r3, #0]
   8344c:	f04f 0878 	mov.w	r8, #120	; 0x78
   83450:	2330      	movs	r3, #48	; 0x30
   83452:	f04c 0c02 	orr.w	ip, ip, #2
   83456:	9510      	str	r5, [sp, #64]	; 0x40
   83458:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
   8345c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   83460:	2500      	movs	r5, #0
   83462:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
   83466:	901a      	str	r0, [sp, #104]	; 0x68
   83468:	2302      	movs	r3, #2
   8346a:	e5cd      	b.n	83008 <_svfprintf_r+0x2d4>
   8346c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8346e:	9d10      	ldr	r5, [sp, #64]	; 0x40
   83470:	681a      	ldr	r2, [r3, #0]
   83472:	2401      	movs	r4, #1
   83474:	2300      	movs	r3, #0
   83476:	3504      	adds	r5, #4
   83478:	469a      	mov	sl, r3
   8347a:	940b      	str	r4, [sp, #44]	; 0x2c
   8347c:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
   83480:	9510      	str	r5, [sp, #64]	; 0x40
   83482:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
   83486:	930a      	str	r3, [sp, #40]	; 0x28
   83488:	9314      	str	r3, [sp, #80]	; 0x50
   8348a:	af2e      	add	r7, sp, #184	; 0xb8
   8348c:	e5ef      	b.n	8306e <_svfprintf_r+0x33a>
   8348e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83490:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   83494:	06a5      	lsls	r5, r4, #26
   83496:	f53f af4e 	bmi.w	83336 <_svfprintf_r+0x602>
   8349a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   8349e:	f01c 0f10 	tst.w	ip, #16
   834a2:	f040 82df 	bne.w	83a64 <_svfprintf_r+0xd30>
   834a6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   834aa:	f01c 0f40 	tst.w	ip, #64	; 0x40
   834ae:	f000 82d9 	beq.w	83a64 <_svfprintf_r+0xd30>
   834b2:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   834b6:	f9bc 4000 	ldrsh.w	r4, [ip]
   834ba:	f10c 0c04 	add.w	ip, ip, #4
   834be:	17e5      	asrs	r5, r4, #31
   834c0:	4622      	mov	r2, r4
   834c2:	462b      	mov	r3, r5
   834c4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   834c8:	e73f      	b.n	8334a <_svfprintf_r+0x616>
   834ca:	f899 8000 	ldrb.w	r8, [r9]
   834ce:	222b      	movs	r2, #43	; 0x2b
   834d0:	e48c      	b.n	82dec <_svfprintf_r+0xb8>
   834d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   834d4:	f045 0508 	orr.w	r5, r5, #8
   834d8:	9509      	str	r5, [sp, #36]	; 0x24
   834da:	f899 8000 	ldrb.w	r8, [r9]
   834de:	e485      	b.n	82dec <_svfprintf_r+0xb8>
   834e0:	9d10      	ldr	r5, [sp, #64]	; 0x40
   834e2:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   834e6:	1deb      	adds	r3, r5, #7
   834e8:	f023 0307 	bic.w	r3, r3, #7
   834ec:	f103 0c08 	add.w	ip, r3, #8
   834f0:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   834f4:	e9d3 4500 	ldrd	r4, r5, [r3]
   834f8:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
   834fc:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   83500:	f004 faea 	bl	87ad8 <__fpclassifyd>
   83504:	2801      	cmp	r0, #1
   83506:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   8350a:	f040 835c 	bne.w	83bc6 <_svfprintf_r+0xe92>
   8350e:	2200      	movs	r2, #0
   83510:	2300      	movs	r3, #0
   83512:	f005 f97d 	bl	88810 <__aeabi_dcmplt>
   83516:	2800      	cmp	r0, #0
   83518:	f040 8563 	bne.w	83fe2 <_svfprintf_r+0x12ae>
   8351c:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   83520:	2503      	movs	r5, #3
   83522:	950b      	str	r5, [sp, #44]	; 0x2c
   83524:	9d09      	ldr	r5, [sp, #36]	; 0x24
   83526:	4f46      	ldr	r7, [pc, #280]	; (83640 <_svfprintf_r+0x90c>)
   83528:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   8352c:	4b45      	ldr	r3, [pc, #276]	; (83644 <_svfprintf_r+0x910>)
   8352e:	2400      	movs	r4, #0
   83530:	9509      	str	r5, [sp, #36]	; 0x24
   83532:	2500      	movs	r5, #0
   83534:	940a      	str	r4, [sp, #40]	; 0x28
   83536:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   8353a:	bfd8      	it	le
   8353c:	461f      	movle	r7, r3
   8353e:	2403      	movs	r4, #3
   83540:	9514      	str	r5, [sp, #80]	; 0x50
   83542:	e58e      	b.n	83062 <_svfprintf_r+0x32e>
   83544:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   83548:	f04c 0c20 	orr.w	ip, ip, #32
   8354c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   83550:	f899 8000 	ldrb.w	r8, [r9]
   83554:	e44a      	b.n	82dec <_svfprintf_r+0xb8>
   83556:	9c10      	ldr	r4, [sp, #64]	; 0x40
   83558:	1de3      	adds	r3, r4, #7
   8355a:	f023 0307 	bic.w	r3, r3, #7
   8355e:	f103 0508 	add.w	r5, r3, #8
   83562:	9510      	str	r5, [sp, #64]	; 0x40
   83564:	e9d3 4500 	ldrd	r4, r5, [r3]
   83568:	2300      	movs	r3, #0
   8356a:	e54d      	b.n	83008 <_svfprintf_r+0x2d4>
   8356c:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8356e:	1deb      	adds	r3, r5, #7
   83570:	f023 0307 	bic.w	r3, r3, #7
   83574:	f103 0c08 	add.w	ip, r3, #8
   83578:	e9d3 4500 	ldrd	r4, r5, [r3]
   8357c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   83580:	2301      	movs	r3, #1
   83582:	e541      	b.n	83008 <_svfprintf_r+0x2d4>
   83584:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   83588:	f1b8 0f00 	cmp.w	r8, #0
   8358c:	f43f ace3 	beq.w	82f56 <_svfprintf_r+0x222>
   83590:	2300      	movs	r3, #0
   83592:	f04f 0c01 	mov.w	ip, #1
   83596:	469a      	mov	sl, r3
   83598:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   8359c:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
   835a0:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
   835a4:	930a      	str	r3, [sp, #40]	; 0x28
   835a6:	9314      	str	r3, [sp, #80]	; 0x50
   835a8:	4664      	mov	r4, ip
   835aa:	af2e      	add	r7, sp, #184	; 0xb8
   835ac:	e55f      	b.n	8306e <_svfprintf_r+0x33a>
   835ae:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   835b2:	e5b7      	b.n	83124 <_svfprintf_r+0x3f0>
   835b4:	2b01      	cmp	r3, #1
   835b6:	f000 80ec 	beq.w	83792 <_svfprintf_r+0xa5e>
   835ba:	2b02      	cmp	r3, #2
   835bc:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
   835c0:	d118      	bne.n	835f4 <_svfprintf_r+0x8c0>
   835c2:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
   835c6:	4619      	mov	r1, r3
   835c8:	f004 000f 	and.w	r0, r4, #15
   835cc:	0922      	lsrs	r2, r4, #4
   835ce:	f81c 0000 	ldrb.w	r0, [ip, r0]
   835d2:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   835d6:	092b      	lsrs	r3, r5, #4
   835d8:	7008      	strb	r0, [r1, #0]
   835da:	ea52 0003 	orrs.w	r0, r2, r3
   835de:	460f      	mov	r7, r1
   835e0:	4614      	mov	r4, r2
   835e2:	461d      	mov	r5, r3
   835e4:	f101 31ff 	add.w	r1, r1, #4294967295
   835e8:	d1ee      	bne.n	835c8 <_svfprintf_r+0x894>
   835ea:	9d08      	ldr	r5, [sp, #32]
   835ec:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
   835f0:	1bec      	subs	r4, r5, r7
   835f2:	e52d      	b.n	83050 <_svfprintf_r+0x31c>
   835f4:	08e0      	lsrs	r0, r4, #3
   835f6:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   835fa:	f004 0207 	and.w	r2, r4, #7
   835fe:	08e9      	lsrs	r1, r5, #3
   83600:	3230      	adds	r2, #48	; 0x30
   83602:	ea50 0c01 	orrs.w	ip, r0, r1
   83606:	461f      	mov	r7, r3
   83608:	701a      	strb	r2, [r3, #0]
   8360a:	4604      	mov	r4, r0
   8360c:	460d      	mov	r5, r1
   8360e:	f103 33ff 	add.w	r3, r3, #4294967295
   83612:	d1ef      	bne.n	835f4 <_svfprintf_r+0x8c0>
   83614:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83616:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
   8361a:	07e0      	lsls	r0, r4, #31
   8361c:	4639      	mov	r1, r7
   8361e:	f140 80c1 	bpl.w	837a4 <_svfprintf_r+0xa70>
   83622:	2a30      	cmp	r2, #48	; 0x30
   83624:	f000 80be 	beq.w	837a4 <_svfprintf_r+0xa70>
   83628:	9d08      	ldr	r5, [sp, #32]
   8362a:	461f      	mov	r7, r3
   8362c:	2330      	movs	r3, #48	; 0x30
   8362e:	1bec      	subs	r4, r5, r7
   83630:	f801 3c01 	strb.w	r3, [r1, #-1]
   83634:	e50c      	b.n	83050 <_svfprintf_r+0x31c>
   83636:	bf00      	nop
   83638:	0008902c 	.word	0x0008902c
   8363c:	00089040 	.word	0x00089040
   83640:	00089020 	.word	0x00089020
   83644:	0008901c 	.word	0x0008901c
   83648:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   8364c:	f340 80ad 	ble.w	837aa <_svfprintf_r+0xa76>
   83650:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   83654:	2200      	movs	r2, #0
   83656:	2300      	movs	r3, #0
   83658:	f8cd c01c 	str.w	ip, [sp, #28]
   8365c:	f005 f8ce 	bl	887fc <__aeabi_dcmpeq>
   83660:	f8dd c01c 	ldr.w	ip, [sp, #28]
   83664:	2800      	cmp	r0, #0
   83666:	f000 8126 	beq.w	838b6 <_svfprintf_r+0xb82>
   8366a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8366c:	49aa      	ldr	r1, [pc, #680]	; (83918 <_svfprintf_r+0xbe4>)
   8366e:	3301      	adds	r3, #1
   83670:	f10c 0c01 	add.w	ip, ip, #1
   83674:	2201      	movs	r2, #1
   83676:	2b07      	cmp	r3, #7
   83678:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   8367c:	932c      	str	r3, [sp, #176]	; 0xb0
   8367e:	e886 0006 	stmia.w	r6, {r1, r2}
   83682:	f300 82ed 	bgt.w	83c60 <_svfprintf_r+0xf2c>
   83686:	3608      	adds	r6, #8
   83688:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8368a:	9c11      	ldr	r4, [sp, #68]	; 0x44
   8368c:	42a3      	cmp	r3, r4
   8368e:	db03      	blt.n	83698 <_svfprintf_r+0x964>
   83690:	9d09      	ldr	r5, [sp, #36]	; 0x24
   83692:	07ec      	lsls	r4, r5, #31
   83694:	f57f adc0 	bpl.w	83218 <_svfprintf_r+0x4e4>
   83698:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8369a:	9c18      	ldr	r4, [sp, #96]	; 0x60
   8369c:	3301      	adds	r3, #1
   8369e:	9d15      	ldr	r5, [sp, #84]	; 0x54
   836a0:	44a4      	add	ip, r4
   836a2:	2b07      	cmp	r3, #7
   836a4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   836a8:	6035      	str	r5, [r6, #0]
   836aa:	6074      	str	r4, [r6, #4]
   836ac:	932c      	str	r3, [sp, #176]	; 0xb0
   836ae:	f300 833e 	bgt.w	83d2e <_svfprintf_r+0xffa>
   836b2:	3608      	adds	r6, #8
   836b4:	9d11      	ldr	r5, [sp, #68]	; 0x44
   836b6:	1e6c      	subs	r4, r5, #1
   836b8:	2c00      	cmp	r4, #0
   836ba:	f77f adad 	ble.w	83218 <_svfprintf_r+0x4e4>
   836be:	2c10      	cmp	r4, #16
   836c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   836c2:	4d96      	ldr	r5, [pc, #600]	; (8391c <_svfprintf_r+0xbe8>)
   836c4:	f340 8197 	ble.w	839f6 <_svfprintf_r+0xcc2>
   836c8:	2710      	movs	r7, #16
   836ca:	4662      	mov	r2, ip
   836cc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   836d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   836d4:	e004      	b.n	836e0 <_svfprintf_r+0x9ac>
   836d6:	3608      	adds	r6, #8
   836d8:	3c10      	subs	r4, #16
   836da:	2c10      	cmp	r4, #16
   836dc:	f340 818a 	ble.w	839f4 <_svfprintf_r+0xcc0>
   836e0:	3301      	adds	r3, #1
   836e2:	3210      	adds	r2, #16
   836e4:	2b07      	cmp	r3, #7
   836e6:	922d      	str	r2, [sp, #180]	; 0xb4
   836e8:	932c      	str	r3, [sp, #176]	; 0xb0
   836ea:	e886 00a0 	stmia.w	r6, {r5, r7}
   836ee:	ddf2      	ble.n	836d6 <_svfprintf_r+0x9a2>
   836f0:	4640      	mov	r0, r8
   836f2:	4651      	mov	r1, sl
   836f4:	aa2b      	add	r2, sp, #172	; 0xac
   836f6:	f004 fa6b 	bl	87bd0 <__ssprint_r>
   836fa:	2800      	cmp	r0, #0
   836fc:	f47f ac32 	bne.w	82f64 <_svfprintf_r+0x230>
   83700:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   83702:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   83704:	ae38      	add	r6, sp, #224	; 0xe0
   83706:	e7e7      	b.n	836d8 <_svfprintf_r+0x9a4>
   83708:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   8370a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   8370c:	ebc0 0a05 	rsb	sl, r0, r5
   83710:	f1ba 0f00 	cmp.w	sl, #0
   83714:	f77f ad2e 	ble.w	83174 <_svfprintf_r+0x440>
   83718:	f1ba 0f10 	cmp.w	sl, #16
   8371c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8371e:	4d7f      	ldr	r5, [pc, #508]	; (8391c <_svfprintf_r+0xbe8>)
   83720:	dd2b      	ble.n	8377a <_svfprintf_r+0xa46>
   83722:	9412      	str	r4, [sp, #72]	; 0x48
   83724:	4632      	mov	r2, r6
   83726:	f04f 0b10 	mov.w	fp, #16
   8372a:	462e      	mov	r6, r5
   8372c:	4661      	mov	r1, ip
   8372e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   83730:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   83732:	e006      	b.n	83742 <_svfprintf_r+0xa0e>
   83734:	f1aa 0a10 	sub.w	sl, sl, #16
   83738:	f1ba 0f10 	cmp.w	sl, #16
   8373c:	f102 0208 	add.w	r2, r2, #8
   83740:	dd17      	ble.n	83772 <_svfprintf_r+0xa3e>
   83742:	3301      	adds	r3, #1
   83744:	3110      	adds	r1, #16
   83746:	2b07      	cmp	r3, #7
   83748:	912d      	str	r1, [sp, #180]	; 0xb4
   8374a:	932c      	str	r3, [sp, #176]	; 0xb0
   8374c:	e882 0840 	stmia.w	r2, {r6, fp}
   83750:	ddf0      	ble.n	83734 <_svfprintf_r+0xa00>
   83752:	4620      	mov	r0, r4
   83754:	4629      	mov	r1, r5
   83756:	aa2b      	add	r2, sp, #172	; 0xac
   83758:	f004 fa3a 	bl	87bd0 <__ssprint_r>
   8375c:	2800      	cmp	r0, #0
   8375e:	f47f ac01 	bne.w	82f64 <_svfprintf_r+0x230>
   83762:	f1aa 0a10 	sub.w	sl, sl, #16
   83766:	f1ba 0f10 	cmp.w	sl, #16
   8376a:	992d      	ldr	r1, [sp, #180]	; 0xb4
   8376c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8376e:	aa38      	add	r2, sp, #224	; 0xe0
   83770:	dce7      	bgt.n	83742 <_svfprintf_r+0xa0e>
   83772:	9c12      	ldr	r4, [sp, #72]	; 0x48
   83774:	4635      	mov	r5, r6
   83776:	468c      	mov	ip, r1
   83778:	4616      	mov	r6, r2
   8377a:	3301      	adds	r3, #1
   8377c:	44d4      	add	ip, sl
   8377e:	2b07      	cmp	r3, #7
   83780:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   83784:	932c      	str	r3, [sp, #176]	; 0xb0
   83786:	e886 0420 	stmia.w	r6, {r5, sl}
   8378a:	f300 820f 	bgt.w	83bac <_svfprintf_r+0xe78>
   8378e:	3608      	adds	r6, #8
   83790:	e4f0      	b.n	83174 <_svfprintf_r+0x440>
   83792:	2d00      	cmp	r5, #0
   83794:	bf08      	it	eq
   83796:	2c0a      	cmpeq	r4, #10
   83798:	f080 8138 	bcs.w	83a0c <_svfprintf_r+0xcd8>
   8379c:	3430      	adds	r4, #48	; 0x30
   8379e:	af48      	add	r7, sp, #288	; 0x120
   837a0:	f807 4d41 	strb.w	r4, [r7, #-65]!
   837a4:	9d08      	ldr	r5, [sp, #32]
   837a6:	1bec      	subs	r4, r5, r7
   837a8:	e452      	b.n	83050 <_svfprintf_r+0x31c>
   837aa:	9c11      	ldr	r4, [sp, #68]	; 0x44
   837ac:	2c01      	cmp	r4, #1
   837ae:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   837b0:	f340 81d2 	ble.w	83b58 <_svfprintf_r+0xe24>
   837b4:	3401      	adds	r4, #1
   837b6:	f10c 0301 	add.w	r3, ip, #1
   837ba:	2201      	movs	r2, #1
   837bc:	2c07      	cmp	r4, #7
   837be:	932d      	str	r3, [sp, #180]	; 0xb4
   837c0:	6037      	str	r7, [r6, #0]
   837c2:	942c      	str	r4, [sp, #176]	; 0xb0
   837c4:	6072      	str	r2, [r6, #4]
   837c6:	f300 81d8 	bgt.w	83b7a <_svfprintf_r+0xe46>
   837ca:	3608      	adds	r6, #8
   837cc:	9d15      	ldr	r5, [sp, #84]	; 0x54
   837ce:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   837d2:	3401      	adds	r4, #1
   837d4:	6035      	str	r5, [r6, #0]
   837d6:	9d18      	ldr	r5, [sp, #96]	; 0x60
   837d8:	4498      	add	r8, r3
   837da:	2c07      	cmp	r4, #7
   837dc:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   837e0:	942c      	str	r4, [sp, #176]	; 0xb0
   837e2:	6075      	str	r5, [r6, #4]
   837e4:	f300 81d5 	bgt.w	83b92 <_svfprintf_r+0xe5e>
   837e8:	3608      	adds	r6, #8
   837ea:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   837ee:	2200      	movs	r2, #0
   837f0:	2300      	movs	r3, #0
   837f2:	f005 f803 	bl	887fc <__aeabi_dcmpeq>
   837f6:	9d11      	ldr	r5, [sp, #68]	; 0x44
   837f8:	2800      	cmp	r0, #0
   837fa:	f040 80b9 	bne.w	83970 <_svfprintf_r+0xc3c>
   837fe:	1e6b      	subs	r3, r5, #1
   83800:	3401      	adds	r4, #1
   83802:	3701      	adds	r7, #1
   83804:	4498      	add	r8, r3
   83806:	2c07      	cmp	r4, #7
   83808:	942c      	str	r4, [sp, #176]	; 0xb0
   8380a:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   8380e:	6037      	str	r7, [r6, #0]
   83810:	6073      	str	r3, [r6, #4]
   83812:	f300 80e2 	bgt.w	839da <_svfprintf_r+0xca6>
   83816:	3608      	adds	r6, #8
   83818:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
   8381c:	3401      	adds	r4, #1
   8381e:	9d19      	ldr	r5, [sp, #100]	; 0x64
   83820:	44c4      	add	ip, r8
   83822:	ab27      	add	r3, sp, #156	; 0x9c
   83824:	2c07      	cmp	r4, #7
   83826:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   8382a:	942c      	str	r4, [sp, #176]	; 0xb0
   8382c:	e886 0028 	stmia.w	r6, {r3, r5}
   83830:	f77f acf1 	ble.w	83216 <_svfprintf_r+0x4e2>
   83834:	980d      	ldr	r0, [sp, #52]	; 0x34
   83836:	990c      	ldr	r1, [sp, #48]	; 0x30
   83838:	aa2b      	add	r2, sp, #172	; 0xac
   8383a:	f004 f9c9 	bl	87bd0 <__ssprint_r>
   8383e:	2800      	cmp	r0, #0
   83840:	f47f ab90 	bne.w	82f64 <_svfprintf_r+0x230>
   83844:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83848:	ae38      	add	r6, sp, #224	; 0xe0
   8384a:	e4e5      	b.n	83218 <_svfprintf_r+0x4e4>
   8384c:	980d      	ldr	r0, [sp, #52]	; 0x34
   8384e:	990c      	ldr	r1, [sp, #48]	; 0x30
   83850:	aa2b      	add	r2, sp, #172	; 0xac
   83852:	f004 f9bd 	bl	87bd0 <__ssprint_r>
   83856:	2800      	cmp	r0, #0
   83858:	f43f ad37 	beq.w	832ca <_svfprintf_r+0x596>
   8385c:	f7ff bb82 	b.w	82f64 <_svfprintf_r+0x230>
   83860:	980d      	ldr	r0, [sp, #52]	; 0x34
   83862:	990c      	ldr	r1, [sp, #48]	; 0x30
   83864:	aa2b      	add	r2, sp, #172	; 0xac
   83866:	f004 f9b3 	bl	87bd0 <__ssprint_r>
   8386a:	2800      	cmp	r0, #0
   8386c:	f47f ab7a 	bne.w	82f64 <_svfprintf_r+0x230>
   83870:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83874:	ae38      	add	r6, sp, #224	; 0xe0
   83876:	e4bf      	b.n	831f8 <_svfprintf_r+0x4c4>
   83878:	980d      	ldr	r0, [sp, #52]	; 0x34
   8387a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8387c:	aa2b      	add	r2, sp, #172	; 0xac
   8387e:	f004 f9a7 	bl	87bd0 <__ssprint_r>
   83882:	2800      	cmp	r0, #0
   83884:	f47f ab6e 	bne.w	82f64 <_svfprintf_r+0x230>
   83888:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   8388c:	ae38      	add	r6, sp, #224	; 0xe0
   8388e:	e46d      	b.n	8316c <_svfprintf_r+0x438>
   83890:	980d      	ldr	r0, [sp, #52]	; 0x34
   83892:	990c      	ldr	r1, [sp, #48]	; 0x30
   83894:	aa2b      	add	r2, sp, #172	; 0xac
   83896:	f004 f99b 	bl	87bd0 <__ssprint_r>
   8389a:	2800      	cmp	r0, #0
   8389c:	f47f ab62 	bne.w	82f64 <_svfprintf_r+0x230>
   838a0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   838a4:	ae38      	add	r6, sp, #224	; 0xe0
   838a6:	e450      	b.n	8314a <_svfprintf_r+0x416>
   838a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   838aa:	af38      	add	r7, sp, #224	; 0xe0
   838ac:	f7ff bbd0 	b.w	83050 <_svfprintf_r+0x31c>
   838b0:	2302      	movs	r3, #2
   838b2:	f7ff bba9 	b.w	83008 <_svfprintf_r+0x2d4>
   838b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   838b8:	2b00      	cmp	r3, #0
   838ba:	f340 81dd 	ble.w	83c78 <_svfprintf_r+0xf44>
   838be:	9c11      	ldr	r4, [sp, #68]	; 0x44
   838c0:	9d14      	ldr	r5, [sp, #80]	; 0x50
   838c2:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   838c6:	42ac      	cmp	r4, r5
   838c8:	bfa8      	it	ge
   838ca:	462c      	movge	r4, r5
   838cc:	2c00      	cmp	r4, #0
   838ce:	44ba      	add	sl, r7
   838d0:	dd0b      	ble.n	838ea <_svfprintf_r+0xbb6>
   838d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   838d4:	44a4      	add	ip, r4
   838d6:	3301      	adds	r3, #1
   838d8:	2b07      	cmp	r3, #7
   838da:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   838de:	6037      	str	r7, [r6, #0]
   838e0:	6074      	str	r4, [r6, #4]
   838e2:	932c      	str	r3, [sp, #176]	; 0xb0
   838e4:	f300 831e 	bgt.w	83f24 <_svfprintf_r+0x11f0>
   838e8:	3608      	adds	r6, #8
   838ea:	9d14      	ldr	r5, [sp, #80]	; 0x50
   838ec:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   838f0:	1b2c      	subs	r4, r5, r4
   838f2:	2c00      	cmp	r4, #0
   838f4:	f340 80d7 	ble.w	83aa6 <_svfprintf_r+0xd72>
   838f8:	2c10      	cmp	r4, #16
   838fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   838fc:	4d07      	ldr	r5, [pc, #28]	; (8391c <_svfprintf_r+0xbe8>)
   838fe:	f340 81a3 	ble.w	83c48 <_svfprintf_r+0xf14>
   83902:	970a      	str	r7, [sp, #40]	; 0x28
   83904:	f04f 0810 	mov.w	r8, #16
   83908:	462f      	mov	r7, r5
   8390a:	4662      	mov	r2, ip
   8390c:	4625      	mov	r5, r4
   8390e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   83912:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   83914:	e009      	b.n	8392a <_svfprintf_r+0xbf6>
   83916:	bf00      	nop
   83918:	00088f38 	.word	0x00088f38
   8391c:	0008900c 	.word	0x0008900c
   83920:	3608      	adds	r6, #8
   83922:	3d10      	subs	r5, #16
   83924:	2d10      	cmp	r5, #16
   83926:	f340 818b 	ble.w	83c40 <_svfprintf_r+0xf0c>
   8392a:	3301      	adds	r3, #1
   8392c:	3210      	adds	r2, #16
   8392e:	2b07      	cmp	r3, #7
   83930:	922d      	str	r2, [sp, #180]	; 0xb4
   83932:	932c      	str	r3, [sp, #176]	; 0xb0
   83934:	e886 0180 	stmia.w	r6, {r7, r8}
   83938:	ddf2      	ble.n	83920 <_svfprintf_r+0xbec>
   8393a:	4658      	mov	r0, fp
   8393c:	4621      	mov	r1, r4
   8393e:	aa2b      	add	r2, sp, #172	; 0xac
   83940:	f004 f946 	bl	87bd0 <__ssprint_r>
   83944:	2800      	cmp	r0, #0
   83946:	f47f ab0d 	bne.w	82f64 <_svfprintf_r+0x230>
   8394a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   8394c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8394e:	ae38      	add	r6, sp, #224	; 0xe0
   83950:	e7e7      	b.n	83922 <_svfprintf_r+0xbee>
   83952:	980d      	ldr	r0, [sp, #52]	; 0x34
   83954:	990c      	ldr	r1, [sp, #48]	; 0x30
   83956:	aa2b      	add	r2, sp, #172	; 0xac
   83958:	f004 f93a 	bl	87bd0 <__ssprint_r>
   8395c:	2800      	cmp	r0, #0
   8395e:	f47f ab01 	bne.w	82f64 <_svfprintf_r+0x230>
   83962:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   83966:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   8396a:	ae38      	add	r6, sp, #224	; 0xe0
   8396c:	f7ff bbda 	b.w	83124 <_svfprintf_r+0x3f0>
   83970:	1e6f      	subs	r7, r5, #1
   83972:	2f00      	cmp	r7, #0
   83974:	f77f af50 	ble.w	83818 <_svfprintf_r+0xae4>
   83978:	2f10      	cmp	r7, #16
   8397a:	4dae      	ldr	r5, [pc, #696]	; (83c34 <_svfprintf_r+0xf00>)
   8397c:	dd23      	ble.n	839c6 <_svfprintf_r+0xc92>
   8397e:	4643      	mov	r3, r8
   83980:	f04f 0a10 	mov.w	sl, #16
   83984:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   83988:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8398c:	e004      	b.n	83998 <_svfprintf_r+0xc64>
   8398e:	3f10      	subs	r7, #16
   83990:	2f10      	cmp	r7, #16
   83992:	f106 0608 	add.w	r6, r6, #8
   83996:	dd15      	ble.n	839c4 <_svfprintf_r+0xc90>
   83998:	3401      	adds	r4, #1
   8399a:	3310      	adds	r3, #16
   8399c:	2c07      	cmp	r4, #7
   8399e:	932d      	str	r3, [sp, #180]	; 0xb4
   839a0:	942c      	str	r4, [sp, #176]	; 0xb0
   839a2:	e886 0420 	stmia.w	r6, {r5, sl}
   839a6:	ddf2      	ble.n	8398e <_svfprintf_r+0xc5a>
   839a8:	4640      	mov	r0, r8
   839aa:	4659      	mov	r1, fp
   839ac:	aa2b      	add	r2, sp, #172	; 0xac
   839ae:	f004 f90f 	bl	87bd0 <__ssprint_r>
   839b2:	2800      	cmp	r0, #0
   839b4:	f47f aad6 	bne.w	82f64 <_svfprintf_r+0x230>
   839b8:	3f10      	subs	r7, #16
   839ba:	2f10      	cmp	r7, #16
   839bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   839be:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   839c0:	ae38      	add	r6, sp, #224	; 0xe0
   839c2:	dce9      	bgt.n	83998 <_svfprintf_r+0xc64>
   839c4:	4698      	mov	r8, r3
   839c6:	3401      	adds	r4, #1
   839c8:	44b8      	add	r8, r7
   839ca:	2c07      	cmp	r4, #7
   839cc:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   839d0:	942c      	str	r4, [sp, #176]	; 0xb0
   839d2:	e886 00a0 	stmia.w	r6, {r5, r7}
   839d6:	f77f af1e 	ble.w	83816 <_svfprintf_r+0xae2>
   839da:	980d      	ldr	r0, [sp, #52]	; 0x34
   839dc:	990c      	ldr	r1, [sp, #48]	; 0x30
   839de:	aa2b      	add	r2, sp, #172	; 0xac
   839e0:	f004 f8f6 	bl	87bd0 <__ssprint_r>
   839e4:	2800      	cmp	r0, #0
   839e6:	f47f aabd 	bne.w	82f64 <_svfprintf_r+0x230>
   839ea:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
   839ee:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   839f0:	ae38      	add	r6, sp, #224	; 0xe0
   839f2:	e711      	b.n	83818 <_svfprintf_r+0xae4>
   839f4:	4694      	mov	ip, r2
   839f6:	3301      	adds	r3, #1
   839f8:	44a4      	add	ip, r4
   839fa:	2b07      	cmp	r3, #7
   839fc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   83a00:	932c      	str	r3, [sp, #176]	; 0xb0
   83a02:	6035      	str	r5, [r6, #0]
   83a04:	6074      	str	r4, [r6, #4]
   83a06:	f77f ac06 	ble.w	83216 <_svfprintf_r+0x4e2>
   83a0a:	e713      	b.n	83834 <_svfprintf_r+0xb00>
   83a0c:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
   83a10:	4620      	mov	r0, r4
   83a12:	4629      	mov	r1, r5
   83a14:	220a      	movs	r2, #10
   83a16:	2300      	movs	r3, #0
   83a18:	f004 ff4a 	bl	888b0 <__aeabi_uldivmod>
   83a1c:	3230      	adds	r2, #48	; 0x30
   83a1e:	f88b 2000 	strb.w	r2, [fp]
   83a22:	4620      	mov	r0, r4
   83a24:	4629      	mov	r1, r5
   83a26:	220a      	movs	r2, #10
   83a28:	2300      	movs	r3, #0
   83a2a:	f004 ff41 	bl	888b0 <__aeabi_uldivmod>
   83a2e:	4604      	mov	r4, r0
   83a30:	460d      	mov	r5, r1
   83a32:	ea54 0c05 	orrs.w	ip, r4, r5
   83a36:	465f      	mov	r7, fp
   83a38:	f10b 3bff 	add.w	fp, fp, #4294967295
   83a3c:	d1e8      	bne.n	83a10 <_svfprintf_r+0xcdc>
   83a3e:	9d08      	ldr	r5, [sp, #32]
   83a40:	1bec      	subs	r4, r5, r7
   83a42:	f7ff bb05 	b.w	83050 <_svfprintf_r+0x31c>
   83a46:	9d10      	ldr	r5, [sp, #64]	; 0x40
   83a48:	2301      	movs	r3, #1
   83a4a:	682c      	ldr	r4, [r5, #0]
   83a4c:	3504      	adds	r5, #4
   83a4e:	9510      	str	r5, [sp, #64]	; 0x40
   83a50:	2500      	movs	r5, #0
   83a52:	f7ff bad9 	b.w	83008 <_svfprintf_r+0x2d4>
   83a56:	9d10      	ldr	r5, [sp, #64]	; 0x40
   83a58:	682c      	ldr	r4, [r5, #0]
   83a5a:	3504      	adds	r5, #4
   83a5c:	9510      	str	r5, [sp, #64]	; 0x40
   83a5e:	2500      	movs	r5, #0
   83a60:	f7ff bad2 	b.w	83008 <_svfprintf_r+0x2d4>
   83a64:	9d10      	ldr	r5, [sp, #64]	; 0x40
   83a66:	682c      	ldr	r4, [r5, #0]
   83a68:	3504      	adds	r5, #4
   83a6a:	9510      	str	r5, [sp, #64]	; 0x40
   83a6c:	17e5      	asrs	r5, r4, #31
   83a6e:	4622      	mov	r2, r4
   83a70:	462b      	mov	r3, r5
   83a72:	2a00      	cmp	r2, #0
   83a74:	f173 0c00 	sbcs.w	ip, r3, #0
   83a78:	f6bf ac6c 	bge.w	83354 <_svfprintf_r+0x620>
   83a7c:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   83a80:	4264      	negs	r4, r4
   83a82:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   83a86:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   83a8a:	2301      	movs	r3, #1
   83a8c:	f7ff bac0 	b.w	83010 <_svfprintf_r+0x2dc>
   83a90:	980d      	ldr	r0, [sp, #52]	; 0x34
   83a92:	990c      	ldr	r1, [sp, #48]	; 0x30
   83a94:	aa2b      	add	r2, sp, #172	; 0xac
   83a96:	f004 f89b 	bl	87bd0 <__ssprint_r>
   83a9a:	2800      	cmp	r0, #0
   83a9c:	f47f aa62 	bne.w	82f64 <_svfprintf_r+0x230>
   83aa0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83aa4:	ae38      	add	r6, sp, #224	; 0xe0
   83aa6:	9d14      	ldr	r5, [sp, #80]	; 0x50
   83aa8:	9c25      	ldr	r4, [sp, #148]	; 0x94
   83aaa:	442f      	add	r7, r5
   83aac:	9d11      	ldr	r5, [sp, #68]	; 0x44
   83aae:	42ac      	cmp	r4, r5
   83ab0:	db42      	blt.n	83b38 <_svfprintf_r+0xe04>
   83ab2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   83ab4:	07e9      	lsls	r1, r5, #31
   83ab6:	d43f      	bmi.n	83b38 <_svfprintf_r+0xe04>
   83ab8:	9811      	ldr	r0, [sp, #68]	; 0x44
   83aba:	ebc7 050a 	rsb	r5, r7, sl
   83abe:	1b04      	subs	r4, r0, r4
   83ac0:	42ac      	cmp	r4, r5
   83ac2:	bfb8      	it	lt
   83ac4:	4625      	movlt	r5, r4
   83ac6:	2d00      	cmp	r5, #0
   83ac8:	dd0b      	ble.n	83ae2 <_svfprintf_r+0xdae>
   83aca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   83acc:	44ac      	add	ip, r5
   83ace:	3301      	adds	r3, #1
   83ad0:	2b07      	cmp	r3, #7
   83ad2:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   83ad6:	6037      	str	r7, [r6, #0]
   83ad8:	6075      	str	r5, [r6, #4]
   83ada:	932c      	str	r3, [sp, #176]	; 0xb0
   83adc:	f300 824c 	bgt.w	83f78 <_svfprintf_r+0x1244>
   83ae0:	3608      	adds	r6, #8
   83ae2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   83ae6:	1b64      	subs	r4, r4, r5
   83ae8:	2c00      	cmp	r4, #0
   83aea:	f77f ab95 	ble.w	83218 <_svfprintf_r+0x4e4>
   83aee:	2c10      	cmp	r4, #16
   83af0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   83af2:	4d50      	ldr	r5, [pc, #320]	; (83c34 <_svfprintf_r+0xf00>)
   83af4:	f77f af7f 	ble.w	839f6 <_svfprintf_r+0xcc2>
   83af8:	2710      	movs	r7, #16
   83afa:	4662      	mov	r2, ip
   83afc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   83b00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   83b04:	e004      	b.n	83b10 <_svfprintf_r+0xddc>
   83b06:	3608      	adds	r6, #8
   83b08:	3c10      	subs	r4, #16
   83b0a:	2c10      	cmp	r4, #16
   83b0c:	f77f af72 	ble.w	839f4 <_svfprintf_r+0xcc0>
   83b10:	3301      	adds	r3, #1
   83b12:	3210      	adds	r2, #16
   83b14:	2b07      	cmp	r3, #7
   83b16:	922d      	str	r2, [sp, #180]	; 0xb4
   83b18:	932c      	str	r3, [sp, #176]	; 0xb0
   83b1a:	e886 00a0 	stmia.w	r6, {r5, r7}
   83b1e:	ddf2      	ble.n	83b06 <_svfprintf_r+0xdd2>
   83b20:	4640      	mov	r0, r8
   83b22:	4651      	mov	r1, sl
   83b24:	aa2b      	add	r2, sp, #172	; 0xac
   83b26:	f004 f853 	bl	87bd0 <__ssprint_r>
   83b2a:	2800      	cmp	r0, #0
   83b2c:	f47f aa1a 	bne.w	82f64 <_svfprintf_r+0x230>
   83b30:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   83b32:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   83b34:	ae38      	add	r6, sp, #224	; 0xe0
   83b36:	e7e7      	b.n	83b08 <_svfprintf_r+0xdd4>
   83b38:	9d18      	ldr	r5, [sp, #96]	; 0x60
   83b3a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   83b3c:	44ac      	add	ip, r5
   83b3e:	9d15      	ldr	r5, [sp, #84]	; 0x54
   83b40:	3301      	adds	r3, #1
   83b42:	6035      	str	r5, [r6, #0]
   83b44:	9d18      	ldr	r5, [sp, #96]	; 0x60
   83b46:	2b07      	cmp	r3, #7
   83b48:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   83b4c:	6075      	str	r5, [r6, #4]
   83b4e:	932c      	str	r3, [sp, #176]	; 0xb0
   83b50:	f300 81f4 	bgt.w	83f3c <_svfprintf_r+0x1208>
   83b54:	3608      	adds	r6, #8
   83b56:	e7af      	b.n	83ab8 <_svfprintf_r+0xd84>
   83b58:	9d09      	ldr	r5, [sp, #36]	; 0x24
   83b5a:	07ea      	lsls	r2, r5, #31
   83b5c:	f53f ae2a 	bmi.w	837b4 <_svfprintf_r+0xa80>
   83b60:	3401      	adds	r4, #1
   83b62:	f10c 0801 	add.w	r8, ip, #1
   83b66:	2301      	movs	r3, #1
   83b68:	2c07      	cmp	r4, #7
   83b6a:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   83b6e:	942c      	str	r4, [sp, #176]	; 0xb0
   83b70:	6037      	str	r7, [r6, #0]
   83b72:	6073      	str	r3, [r6, #4]
   83b74:	f77f ae4f 	ble.w	83816 <_svfprintf_r+0xae2>
   83b78:	e72f      	b.n	839da <_svfprintf_r+0xca6>
   83b7a:	980d      	ldr	r0, [sp, #52]	; 0x34
   83b7c:	990c      	ldr	r1, [sp, #48]	; 0x30
   83b7e:	aa2b      	add	r2, sp, #172	; 0xac
   83b80:	f004 f826 	bl	87bd0 <__ssprint_r>
   83b84:	2800      	cmp	r0, #0
   83b86:	f47f a9ed 	bne.w	82f64 <_svfprintf_r+0x230>
   83b8a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   83b8c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   83b8e:	ae38      	add	r6, sp, #224	; 0xe0
   83b90:	e61c      	b.n	837cc <_svfprintf_r+0xa98>
   83b92:	980d      	ldr	r0, [sp, #52]	; 0x34
   83b94:	990c      	ldr	r1, [sp, #48]	; 0x30
   83b96:	aa2b      	add	r2, sp, #172	; 0xac
   83b98:	f004 f81a 	bl	87bd0 <__ssprint_r>
   83b9c:	2800      	cmp	r0, #0
   83b9e:	f47f a9e1 	bne.w	82f64 <_svfprintf_r+0x230>
   83ba2:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
   83ba6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   83ba8:	ae38      	add	r6, sp, #224	; 0xe0
   83baa:	e61e      	b.n	837ea <_svfprintf_r+0xab6>
   83bac:	980d      	ldr	r0, [sp, #52]	; 0x34
   83bae:	990c      	ldr	r1, [sp, #48]	; 0x30
   83bb0:	aa2b      	add	r2, sp, #172	; 0xac
   83bb2:	f004 f80d 	bl	87bd0 <__ssprint_r>
   83bb6:	2800      	cmp	r0, #0
   83bb8:	f47f a9d4 	bne.w	82f64 <_svfprintf_r+0x230>
   83bbc:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83bc0:	ae38      	add	r6, sp, #224	; 0xe0
   83bc2:	f7ff bad7 	b.w	83174 <_svfprintf_r+0x440>
   83bc6:	f003 ff87 	bl	87ad8 <__fpclassifyd>
   83bca:	2800      	cmp	r0, #0
   83bcc:	f040 80bb 	bne.w	83d46 <_svfprintf_r+0x1012>
   83bd0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83bd2:	4f19      	ldr	r7, [pc, #100]	; (83c38 <_svfprintf_r+0xf04>)
   83bd4:	4b19      	ldr	r3, [pc, #100]	; (83c3c <_svfprintf_r+0xf08>)
   83bd6:	f04f 0c03 	mov.w	ip, #3
   83bda:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   83bde:	9409      	str	r4, [sp, #36]	; 0x24
   83be0:	900a      	str	r0, [sp, #40]	; 0x28
   83be2:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   83be6:	9014      	str	r0, [sp, #80]	; 0x50
   83be8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   83bec:	bfd8      	it	le
   83bee:	461f      	movle	r7, r3
   83bf0:	4664      	mov	r4, ip
   83bf2:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   83bf6:	f7ff ba34 	b.w	83062 <_svfprintf_r+0x32e>
   83bfa:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83bfc:	0664      	lsls	r4, r4, #25
   83bfe:	f140 8150 	bpl.w	83ea2 <_svfprintf_r+0x116e>
   83c02:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   83c06:	2500      	movs	r5, #0
   83c08:	f8bc 4000 	ldrh.w	r4, [ip]
   83c0c:	f10c 0c04 	add.w	ip, ip, #4
   83c10:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   83c14:	f7ff b9e4 	b.w	82fe0 <_svfprintf_r+0x2ac>
   83c18:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   83c1c:	f01c 0f10 	tst.w	ip, #16
   83c20:	f000 8146 	beq.w	83eb0 <_svfprintf_r+0x117c>
   83c24:	9c10      	ldr	r4, [sp, #64]	; 0x40
   83c26:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   83c28:	6823      	ldr	r3, [r4, #0]
   83c2a:	3404      	adds	r4, #4
   83c2c:	9410      	str	r4, [sp, #64]	; 0x40
   83c2e:	601d      	str	r5, [r3, #0]
   83c30:	f7ff b8a6 	b.w	82d80 <_svfprintf_r+0x4c>
   83c34:	0008900c 	.word	0x0008900c
   83c38:	00089028 	.word	0x00089028
   83c3c:	00089024 	.word	0x00089024
   83c40:	462c      	mov	r4, r5
   83c42:	463d      	mov	r5, r7
   83c44:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   83c46:	4694      	mov	ip, r2
   83c48:	3301      	adds	r3, #1
   83c4a:	44a4      	add	ip, r4
   83c4c:	2b07      	cmp	r3, #7
   83c4e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   83c52:	932c      	str	r3, [sp, #176]	; 0xb0
   83c54:	6035      	str	r5, [r6, #0]
   83c56:	6074      	str	r4, [r6, #4]
   83c58:	f73f af1a 	bgt.w	83a90 <_svfprintf_r+0xd5c>
   83c5c:	3608      	adds	r6, #8
   83c5e:	e722      	b.n	83aa6 <_svfprintf_r+0xd72>
   83c60:	980d      	ldr	r0, [sp, #52]	; 0x34
   83c62:	990c      	ldr	r1, [sp, #48]	; 0x30
   83c64:	aa2b      	add	r2, sp, #172	; 0xac
   83c66:	f003 ffb3 	bl	87bd0 <__ssprint_r>
   83c6a:	2800      	cmp	r0, #0
   83c6c:	f47f a97a 	bne.w	82f64 <_svfprintf_r+0x230>
   83c70:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83c74:	ae38      	add	r6, sp, #224	; 0xe0
   83c76:	e507      	b.n	83688 <_svfprintf_r+0x954>
   83c78:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   83c7a:	49b7      	ldr	r1, [pc, #732]	; (83f58 <_svfprintf_r+0x1224>)
   83c7c:	3201      	adds	r2, #1
   83c7e:	f10c 0c01 	add.w	ip, ip, #1
   83c82:	2001      	movs	r0, #1
   83c84:	2a07      	cmp	r2, #7
   83c86:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   83c8a:	922c      	str	r2, [sp, #176]	; 0xb0
   83c8c:	6031      	str	r1, [r6, #0]
   83c8e:	6070      	str	r0, [r6, #4]
   83c90:	f300 80f7 	bgt.w	83e82 <_svfprintf_r+0x114e>
   83c94:	3608      	adds	r6, #8
   83c96:	461c      	mov	r4, r3
   83c98:	b92c      	cbnz	r4, 83ca6 <_svfprintf_r+0xf72>
   83c9a:	9d11      	ldr	r5, [sp, #68]	; 0x44
   83c9c:	b91d      	cbnz	r5, 83ca6 <_svfprintf_r+0xf72>
   83c9e:	9d09      	ldr	r5, [sp, #36]	; 0x24
   83ca0:	07e8      	lsls	r0, r5, #31
   83ca2:	f57f aab9 	bpl.w	83218 <_svfprintf_r+0x4e4>
   83ca6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   83ca8:	9d15      	ldr	r5, [sp, #84]	; 0x54
   83caa:	9918      	ldr	r1, [sp, #96]	; 0x60
   83cac:	3301      	adds	r3, #1
   83cae:	6035      	str	r5, [r6, #0]
   83cb0:	9d18      	ldr	r5, [sp, #96]	; 0x60
   83cb2:	4461      	add	r1, ip
   83cb4:	2b07      	cmp	r3, #7
   83cb6:	912d      	str	r1, [sp, #180]	; 0xb4
   83cb8:	6075      	str	r5, [r6, #4]
   83cba:	932c      	str	r3, [sp, #176]	; 0xb0
   83cbc:	f300 81de 	bgt.w	8407c <_svfprintf_r+0x1348>
   83cc0:	f106 0208 	add.w	r2, r6, #8
   83cc4:	4264      	negs	r4, r4
   83cc6:	2c00      	cmp	r4, #0
   83cc8:	f340 810b 	ble.w	83ee2 <_svfprintf_r+0x11ae>
   83ccc:	2c10      	cmp	r4, #16
   83cce:	4da3      	ldr	r5, [pc, #652]	; (83f5c <_svfprintf_r+0x1228>)
   83cd0:	f340 8148 	ble.w	83f64 <_svfprintf_r+0x1230>
   83cd4:	46a3      	mov	fp, r4
   83cd6:	2610      	movs	r6, #16
   83cd8:	460c      	mov	r4, r1
   83cda:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   83cde:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   83ce2:	e006      	b.n	83cf2 <_svfprintf_r+0xfbe>
   83ce4:	3208      	adds	r2, #8
   83ce6:	f1ab 0b10 	sub.w	fp, fp, #16
   83cea:	f1bb 0f10 	cmp.w	fp, #16
   83cee:	f340 8137 	ble.w	83f60 <_svfprintf_r+0x122c>
   83cf2:	3301      	adds	r3, #1
   83cf4:	3410      	adds	r4, #16
   83cf6:	2b07      	cmp	r3, #7
   83cf8:	942d      	str	r4, [sp, #180]	; 0xb4
   83cfa:	932c      	str	r3, [sp, #176]	; 0xb0
   83cfc:	e882 0060 	stmia.w	r2, {r5, r6}
   83d00:	ddf0      	ble.n	83ce4 <_svfprintf_r+0xfb0>
   83d02:	4640      	mov	r0, r8
   83d04:	4651      	mov	r1, sl
   83d06:	aa2b      	add	r2, sp, #172	; 0xac
   83d08:	f003 ff62 	bl	87bd0 <__ssprint_r>
   83d0c:	2800      	cmp	r0, #0
   83d0e:	f47f a929 	bne.w	82f64 <_svfprintf_r+0x230>
   83d12:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
   83d14:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   83d16:	aa38      	add	r2, sp, #224	; 0xe0
   83d18:	e7e5      	b.n	83ce6 <_svfprintf_r+0xfb2>
   83d1a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83d1c:	f109 0901 	add.w	r9, r9, #1
   83d20:	f044 0420 	orr.w	r4, r4, #32
   83d24:	9409      	str	r4, [sp, #36]	; 0x24
   83d26:	f893 8001 	ldrb.w	r8, [r3, #1]
   83d2a:	f7ff b85f 	b.w	82dec <_svfprintf_r+0xb8>
   83d2e:	980d      	ldr	r0, [sp, #52]	; 0x34
   83d30:	990c      	ldr	r1, [sp, #48]	; 0x30
   83d32:	aa2b      	add	r2, sp, #172	; 0xac
   83d34:	f003 ff4c 	bl	87bd0 <__ssprint_r>
   83d38:	2800      	cmp	r0, #0
   83d3a:	f47f a913 	bne.w	82f64 <_svfprintf_r+0x230>
   83d3e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83d42:	ae38      	add	r6, sp, #224	; 0xe0
   83d44:	e4b6      	b.n	836b4 <_svfprintf_r+0x980>
   83d46:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   83d48:	f028 0a20 	bic.w	sl, r8, #32
   83d4c:	3501      	adds	r5, #1
   83d4e:	f000 80a5 	beq.w	83e9c <_svfprintf_r+0x1168>
   83d52:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   83d56:	d104      	bne.n	83d62 <_svfprintf_r+0x102e>
   83d58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   83d5a:	2d00      	cmp	r5, #0
   83d5c:	bf08      	it	eq
   83d5e:	2501      	moveq	r5, #1
   83d60:	950a      	str	r5, [sp, #40]	; 0x28
   83d62:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   83d66:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   83d6a:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
   83d6e:	2b00      	cmp	r3, #0
   83d70:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
   83d74:	f2c0 819c 	blt.w	840b0 <_svfprintf_r+0x137c>
   83d78:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   83d7c:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
   83d80:	f04f 0b00 	mov.w	fp, #0
   83d84:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   83d88:	f000 819b 	beq.w	840c2 <_svfprintf_r+0x138e>
   83d8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   83d90:	f000 81a9 	beq.w	840e6 <_svfprintf_r+0x13b2>
   83d94:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   83d98:	bf0a      	itet	eq
   83d9a:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
   83d9c:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   83d9e:	1c65      	addeq	r5, r4, #1
   83da0:	2002      	movs	r0, #2
   83da2:	a925      	add	r1, sp, #148	; 0x94
   83da4:	aa26      	add	r2, sp, #152	; 0x98
   83da6:	ab29      	add	r3, sp, #164	; 0xa4
   83da8:	e88d 0021 	stmia.w	sp, {r0, r5}
   83dac:	9203      	str	r2, [sp, #12]
   83dae:	9304      	str	r3, [sp, #16]
   83db0:	9102      	str	r1, [sp, #8]
   83db2:	980d      	ldr	r0, [sp, #52]	; 0x34
   83db4:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
   83db8:	f001 fa32 	bl	85220 <_dtoa_r>
   83dbc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   83dc0:	4607      	mov	r7, r0
   83dc2:	d002      	beq.n	83dca <_svfprintf_r+0x1096>
   83dc4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   83dc8:	d105      	bne.n	83dd6 <_svfprintf_r+0x10a2>
   83dca:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   83dce:	f01c 0f01 	tst.w	ip, #1
   83dd2:	f000 819c 	beq.w	8410e <_svfprintf_r+0x13da>
   83dd6:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   83dda:	eb07 0405 	add.w	r4, r7, r5
   83dde:	f000 811c 	beq.w	8401a <_svfprintf_r+0x12e6>
   83de2:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
   83de6:	2200      	movs	r2, #0
   83de8:	2300      	movs	r3, #0
   83dea:	f004 fd07 	bl	887fc <__aeabi_dcmpeq>
   83dee:	2800      	cmp	r0, #0
   83df0:	f040 8105 	bne.w	83ffe <_svfprintf_r+0x12ca>
   83df4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   83df6:	429c      	cmp	r4, r3
   83df8:	d906      	bls.n	83e08 <_svfprintf_r+0x10d4>
   83dfa:	2130      	movs	r1, #48	; 0x30
   83dfc:	1c5a      	adds	r2, r3, #1
   83dfe:	9229      	str	r2, [sp, #164]	; 0xa4
   83e00:	7019      	strb	r1, [r3, #0]
   83e02:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   83e04:	429c      	cmp	r4, r3
   83e06:	d8f9      	bhi.n	83dfc <_svfprintf_r+0x10c8>
   83e08:	1bdb      	subs	r3, r3, r7
   83e0a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   83e0e:	9311      	str	r3, [sp, #68]	; 0x44
   83e10:	f000 80ed 	beq.w	83fee <_svfprintf_r+0x12ba>
   83e14:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   83e18:	f340 81f2 	ble.w	84200 <_svfprintf_r+0x14cc>
   83e1c:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   83e20:	f000 8168 	beq.w	840f4 <_svfprintf_r+0x13c0>
   83e24:	9c25      	ldr	r4, [sp, #148]	; 0x94
   83e26:	9414      	str	r4, [sp, #80]	; 0x50
   83e28:	9c11      	ldr	r4, [sp, #68]	; 0x44
   83e2a:	9d14      	ldr	r5, [sp, #80]	; 0x50
   83e2c:	42ac      	cmp	r4, r5
   83e2e:	f300 8132 	bgt.w	84096 <_svfprintf_r+0x1362>
   83e32:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   83e36:	f01c 0f01 	tst.w	ip, #1
   83e3a:	f040 81ad 	bne.w	84198 <_svfprintf_r+0x1464>
   83e3e:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
   83e42:	462c      	mov	r4, r5
   83e44:	f04f 0867 	mov.w	r8, #103	; 0x67
   83e48:	f1bb 0f00 	cmp.w	fp, #0
   83e4c:	f040 80b2 	bne.w	83fb4 <_svfprintf_r+0x1280>
   83e50:	9d12      	ldr	r5, [sp, #72]	; 0x48
   83e52:	930b      	str	r3, [sp, #44]	; 0x2c
   83e54:	9509      	str	r5, [sp, #36]	; 0x24
   83e56:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   83e5a:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   83e5e:	f7ff b900 	b.w	83062 <_svfprintf_r+0x32e>
   83e62:	980d      	ldr	r0, [sp, #52]	; 0x34
   83e64:	2140      	movs	r1, #64	; 0x40
   83e66:	f002 fdfd 	bl	86a64 <_malloc_r>
   83e6a:	6020      	str	r0, [r4, #0]
   83e6c:	6120      	str	r0, [r4, #16]
   83e6e:	2800      	cmp	r0, #0
   83e70:	f000 81bf 	beq.w	841f2 <_svfprintf_r+0x14be>
   83e74:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   83e78:	2340      	movs	r3, #64	; 0x40
   83e7a:	f8cc 3014 	str.w	r3, [ip, #20]
   83e7e:	f7fe bf6f 	b.w	82d60 <_svfprintf_r+0x2c>
   83e82:	980d      	ldr	r0, [sp, #52]	; 0x34
   83e84:	990c      	ldr	r1, [sp, #48]	; 0x30
   83e86:	aa2b      	add	r2, sp, #172	; 0xac
   83e88:	f003 fea2 	bl	87bd0 <__ssprint_r>
   83e8c:	2800      	cmp	r0, #0
   83e8e:	f47f a869 	bne.w	82f64 <_svfprintf_r+0x230>
   83e92:	9c25      	ldr	r4, [sp, #148]	; 0x94
   83e94:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83e98:	ae38      	add	r6, sp, #224	; 0xe0
   83e9a:	e6fd      	b.n	83c98 <_svfprintf_r+0xf64>
   83e9c:	2406      	movs	r4, #6
   83e9e:	940a      	str	r4, [sp, #40]	; 0x28
   83ea0:	e75f      	b.n	83d62 <_svfprintf_r+0x102e>
   83ea2:	9d10      	ldr	r5, [sp, #64]	; 0x40
   83ea4:	682c      	ldr	r4, [r5, #0]
   83ea6:	3504      	adds	r5, #4
   83ea8:	9510      	str	r5, [sp, #64]	; 0x40
   83eaa:	2500      	movs	r5, #0
   83eac:	f7ff b898 	b.w	82fe0 <_svfprintf_r+0x2ac>
   83eb0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   83eb4:	f01c 0f40 	tst.w	ip, #64	; 0x40
   83eb8:	f000 8087 	beq.w	83fca <_svfprintf_r+0x1296>
   83ebc:	9c10      	ldr	r4, [sp, #64]	; 0x40
   83ebe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   83ec0:	6823      	ldr	r3, [r4, #0]
   83ec2:	3404      	adds	r4, #4
   83ec4:	9410      	str	r4, [sp, #64]	; 0x40
   83ec6:	801d      	strh	r5, [r3, #0]
   83ec8:	f7fe bf5a 	b.w	82d80 <_svfprintf_r+0x4c>
   83ecc:	980d      	ldr	r0, [sp, #52]	; 0x34
   83ece:	990c      	ldr	r1, [sp, #48]	; 0x30
   83ed0:	aa2b      	add	r2, sp, #172	; 0xac
   83ed2:	f003 fe7d 	bl	87bd0 <__ssprint_r>
   83ed6:	2800      	cmp	r0, #0
   83ed8:	f47f a844 	bne.w	82f64 <_svfprintf_r+0x230>
   83edc:	992d      	ldr	r1, [sp, #180]	; 0xb4
   83ede:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   83ee0:	aa38      	add	r2, sp, #224	; 0xe0
   83ee2:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   83ee6:	3301      	adds	r3, #1
   83ee8:	9c11      	ldr	r4, [sp, #68]	; 0x44
   83eea:	448c      	add	ip, r1
   83eec:	2b07      	cmp	r3, #7
   83eee:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   83ef2:	932c      	str	r3, [sp, #176]	; 0xb0
   83ef4:	6017      	str	r7, [r2, #0]
   83ef6:	6054      	str	r4, [r2, #4]
   83ef8:	f73f ac9c 	bgt.w	83834 <_svfprintf_r+0xb00>
   83efc:	f102 0608 	add.w	r6, r2, #8
   83f00:	f7ff b98a 	b.w	83218 <_svfprintf_r+0x4e4>
   83f04:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   83f08:	f7fe feb2 	bl	82c70 <strlen>
   83f0c:	9510      	str	r5, [sp, #64]	; 0x40
   83f0e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   83f10:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   83f14:	4604      	mov	r4, r0
   83f16:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   83f1a:	9514      	str	r5, [sp, #80]	; 0x50
   83f1c:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   83f20:	f7ff b89f 	b.w	83062 <_svfprintf_r+0x32e>
   83f24:	980d      	ldr	r0, [sp, #52]	; 0x34
   83f26:	990c      	ldr	r1, [sp, #48]	; 0x30
   83f28:	aa2b      	add	r2, sp, #172	; 0xac
   83f2a:	f003 fe51 	bl	87bd0 <__ssprint_r>
   83f2e:	2800      	cmp	r0, #0
   83f30:	f47f a818 	bne.w	82f64 <_svfprintf_r+0x230>
   83f34:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83f38:	ae38      	add	r6, sp, #224	; 0xe0
   83f3a:	e4d6      	b.n	838ea <_svfprintf_r+0xbb6>
   83f3c:	980d      	ldr	r0, [sp, #52]	; 0x34
   83f3e:	990c      	ldr	r1, [sp, #48]	; 0x30
   83f40:	aa2b      	add	r2, sp, #172	; 0xac
   83f42:	f003 fe45 	bl	87bd0 <__ssprint_r>
   83f46:	2800      	cmp	r0, #0
   83f48:	f47f a80c 	bne.w	82f64 <_svfprintf_r+0x230>
   83f4c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   83f4e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83f52:	ae38      	add	r6, sp, #224	; 0xe0
   83f54:	e5b0      	b.n	83ab8 <_svfprintf_r+0xd84>
   83f56:	bf00      	nop
   83f58:	00088f38 	.word	0x00088f38
   83f5c:	0008900c 	.word	0x0008900c
   83f60:	4621      	mov	r1, r4
   83f62:	465c      	mov	r4, fp
   83f64:	3301      	adds	r3, #1
   83f66:	4421      	add	r1, r4
   83f68:	2b07      	cmp	r3, #7
   83f6a:	912d      	str	r1, [sp, #180]	; 0xb4
   83f6c:	932c      	str	r3, [sp, #176]	; 0xb0
   83f6e:	6015      	str	r5, [r2, #0]
   83f70:	6054      	str	r4, [r2, #4]
   83f72:	dcab      	bgt.n	83ecc <_svfprintf_r+0x1198>
   83f74:	3208      	adds	r2, #8
   83f76:	e7b4      	b.n	83ee2 <_svfprintf_r+0x11ae>
   83f78:	980d      	ldr	r0, [sp, #52]	; 0x34
   83f7a:	990c      	ldr	r1, [sp, #48]	; 0x30
   83f7c:	aa2b      	add	r2, sp, #172	; 0xac
   83f7e:	f003 fe27 	bl	87bd0 <__ssprint_r>
   83f82:	2800      	cmp	r0, #0
   83f84:	f47e afee 	bne.w	82f64 <_svfprintf_r+0x230>
   83f88:	9c25      	ldr	r4, [sp, #148]	; 0x94
   83f8a:	9911      	ldr	r1, [sp, #68]	; 0x44
   83f8c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83f90:	1b0c      	subs	r4, r1, r4
   83f92:	ae38      	add	r6, sp, #224	; 0xe0
   83f94:	e5a5      	b.n	83ae2 <_svfprintf_r+0xdae>
   83f96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   83f98:	46ba      	mov	sl, r7
   83f9a:	2c06      	cmp	r4, #6
   83f9c:	bf28      	it	cs
   83f9e:	2406      	movcs	r4, #6
   83fa0:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
   83fa4:	970a      	str	r7, [sp, #40]	; 0x28
   83fa6:	9714      	str	r7, [sp, #80]	; 0x50
   83fa8:	9510      	str	r5, [sp, #64]	; 0x40
   83faa:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   83fae:	4f97      	ldr	r7, [pc, #604]	; (8420c <_svfprintf_r+0x14d8>)
   83fb0:	f7ff b857 	b.w	83062 <_svfprintf_r+0x32e>
   83fb4:	9d12      	ldr	r5, [sp, #72]	; 0x48
   83fb6:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   83fba:	9509      	str	r5, [sp, #36]	; 0x24
   83fbc:	2500      	movs	r5, #0
   83fbe:	930b      	str	r3, [sp, #44]	; 0x2c
   83fc0:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   83fc4:	950a      	str	r5, [sp, #40]	; 0x28
   83fc6:	f7ff b84f 	b.w	83068 <_svfprintf_r+0x334>
   83fca:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   83fce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   83fd0:	f8dc 3000 	ldr.w	r3, [ip]
   83fd4:	f10c 0c04 	add.w	ip, ip, #4
   83fd8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   83fdc:	601c      	str	r4, [r3, #0]
   83fde:	f7fe becf 	b.w	82d80 <_svfprintf_r+0x4c>
   83fe2:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   83fe6:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   83fea:	f7ff ba99 	b.w	83520 <_svfprintf_r+0x7ec>
   83fee:	9b25      	ldr	r3, [sp, #148]	; 0x94
   83ff0:	1cdc      	adds	r4, r3, #3
   83ff2:	db19      	blt.n	84028 <_svfprintf_r+0x12f4>
   83ff4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   83ff6:	429c      	cmp	r4, r3
   83ff8:	db16      	blt.n	84028 <_svfprintf_r+0x12f4>
   83ffa:	9314      	str	r3, [sp, #80]	; 0x50
   83ffc:	e714      	b.n	83e28 <_svfprintf_r+0x10f4>
   83ffe:	4623      	mov	r3, r4
   84000:	e702      	b.n	83e08 <_svfprintf_r+0x10d4>
   84002:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
   84006:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   8400a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8400c:	9510      	str	r5, [sp, #64]	; 0x40
   8400e:	900a      	str	r0, [sp, #40]	; 0x28
   84010:	9014      	str	r0, [sp, #80]	; 0x50
   84012:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   84016:	f7ff b824 	b.w	83062 <_svfprintf_r+0x32e>
   8401a:	783b      	ldrb	r3, [r7, #0]
   8401c:	2b30      	cmp	r3, #48	; 0x30
   8401e:	f000 80ad 	beq.w	8417c <_svfprintf_r+0x1448>
   84022:	9d25      	ldr	r5, [sp, #148]	; 0x94
   84024:	442c      	add	r4, r5
   84026:	e6dc      	b.n	83de2 <_svfprintf_r+0x10ae>
   84028:	f1a8 0802 	sub.w	r8, r8, #2
   8402c:	1e59      	subs	r1, r3, #1
   8402e:	2900      	cmp	r1, #0
   84030:	9125      	str	r1, [sp, #148]	; 0x94
   84032:	bfba      	itte	lt
   84034:	4249      	neglt	r1, r1
   84036:	232d      	movlt	r3, #45	; 0x2d
   84038:	232b      	movge	r3, #43	; 0x2b
   8403a:	2909      	cmp	r1, #9
   8403c:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
   84040:	f88d 309d 	strb.w	r3, [sp, #157]	; 0x9d
   84044:	dc65      	bgt.n	84112 <_svfprintf_r+0x13de>
   84046:	2330      	movs	r3, #48	; 0x30
   84048:	3130      	adds	r1, #48	; 0x30
   8404a:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
   8404e:	f88d 109f 	strb.w	r1, [sp, #159]	; 0x9f
   84052:	ab28      	add	r3, sp, #160	; 0xa0
   84054:	9d11      	ldr	r5, [sp, #68]	; 0x44
   84056:	aa27      	add	r2, sp, #156	; 0x9c
   84058:	9c11      	ldr	r4, [sp, #68]	; 0x44
   8405a:	1a9a      	subs	r2, r3, r2
   8405c:	2d01      	cmp	r5, #1
   8405e:	9219      	str	r2, [sp, #100]	; 0x64
   84060:	4414      	add	r4, r2
   84062:	f340 80b7 	ble.w	841d4 <_svfprintf_r+0x14a0>
   84066:	3401      	adds	r4, #1
   84068:	2500      	movs	r5, #0
   8406a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   8406e:	9514      	str	r5, [sp, #80]	; 0x50
   84070:	e6ea      	b.n	83e48 <_svfprintf_r+0x1114>
   84072:	2400      	movs	r4, #0
   84074:	4681      	mov	r9, r0
   84076:	940a      	str	r4, [sp, #40]	; 0x28
   84078:	f7fe beba 	b.w	82df0 <_svfprintf_r+0xbc>
   8407c:	980d      	ldr	r0, [sp, #52]	; 0x34
   8407e:	990c      	ldr	r1, [sp, #48]	; 0x30
   84080:	aa2b      	add	r2, sp, #172	; 0xac
   84082:	f003 fda5 	bl	87bd0 <__ssprint_r>
   84086:	2800      	cmp	r0, #0
   84088:	f47e af6c 	bne.w	82f64 <_svfprintf_r+0x230>
   8408c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   8408e:	992d      	ldr	r1, [sp, #180]	; 0xb4
   84090:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   84092:	aa38      	add	r2, sp, #224	; 0xe0
   84094:	e616      	b.n	83cc4 <_svfprintf_r+0xf90>
   84096:	9c14      	ldr	r4, [sp, #80]	; 0x50
   84098:	9d11      	ldr	r5, [sp, #68]	; 0x44
   8409a:	2c00      	cmp	r4, #0
   8409c:	bfd4      	ite	le
   8409e:	f1c4 0402 	rsble	r4, r4, #2
   840a2:	2401      	movgt	r4, #1
   840a4:	442c      	add	r4, r5
   840a6:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   840aa:	f04f 0867 	mov.w	r8, #103	; 0x67
   840ae:	e6cb      	b.n	83e48 <_svfprintf_r+0x1114>
   840b0:	9917      	ldr	r1, [sp, #92]	; 0x5c
   840b2:	9816      	ldr	r0, [sp, #88]	; 0x58
   840b4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   840b8:	9020      	str	r0, [sp, #128]	; 0x80
   840ba:	9121      	str	r1, [sp, #132]	; 0x84
   840bc:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   840c0:	e660      	b.n	83d84 <_svfprintf_r+0x1050>
   840c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   840c4:	2003      	movs	r0, #3
   840c6:	a925      	add	r1, sp, #148	; 0x94
   840c8:	aa26      	add	r2, sp, #152	; 0x98
   840ca:	ab29      	add	r3, sp, #164	; 0xa4
   840cc:	9501      	str	r5, [sp, #4]
   840ce:	9000      	str	r0, [sp, #0]
   840d0:	9203      	str	r2, [sp, #12]
   840d2:	9304      	str	r3, [sp, #16]
   840d4:	9102      	str	r1, [sp, #8]
   840d6:	980d      	ldr	r0, [sp, #52]	; 0x34
   840d8:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
   840dc:	f001 f8a0 	bl	85220 <_dtoa_r>
   840e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   840e2:	4607      	mov	r7, r0
   840e4:	e677      	b.n	83dd6 <_svfprintf_r+0x10a2>
   840e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   840e8:	2003      	movs	r0, #3
   840ea:	a925      	add	r1, sp, #148	; 0x94
   840ec:	aa26      	add	r2, sp, #152	; 0x98
   840ee:	ab29      	add	r3, sp, #164	; 0xa4
   840f0:	9401      	str	r4, [sp, #4]
   840f2:	e7ec      	b.n	840ce <_svfprintf_r+0x139a>
   840f4:	9d25      	ldr	r5, [sp, #148]	; 0x94
   840f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   840f8:	2d00      	cmp	r5, #0
   840fa:	9514      	str	r5, [sp, #80]	; 0x50
   840fc:	dd63      	ble.n	841c6 <_svfprintf_r+0x1492>
   840fe:	bbb4      	cbnz	r4, 8416e <_svfprintf_r+0x143a>
   84100:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84102:	07e8      	lsls	r0, r5, #31
   84104:	d433      	bmi.n	8416e <_svfprintf_r+0x143a>
   84106:	9c14      	ldr	r4, [sp, #80]	; 0x50
   84108:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   8410c:	e69c      	b.n	83e48 <_svfprintf_r+0x1114>
   8410e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   84110:	e67a      	b.n	83e08 <_svfprintf_r+0x10d4>
   84112:	f10d 02aa 	add.w	r2, sp, #170	; 0xaa
   84116:	4d3e      	ldr	r5, [pc, #248]	; (84210 <_svfprintf_r+0x14dc>)
   84118:	17cb      	asrs	r3, r1, #31
   8411a:	fb85 5001 	smull	r5, r0, r5, r1
   8411e:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
   84122:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   84126:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
   8412a:	2809      	cmp	r0, #9
   8412c:	4613      	mov	r3, r2
   8412e:	f101 0230 	add.w	r2, r1, #48	; 0x30
   84132:	701a      	strb	r2, [r3, #0]
   84134:	4601      	mov	r1, r0
   84136:	f103 32ff 	add.w	r2, r3, #4294967295
   8413a:	dcec      	bgt.n	84116 <_svfprintf_r+0x13e2>
   8413c:	f100 0130 	add.w	r1, r0, #48	; 0x30
   84140:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
   84144:	b2c9      	uxtb	r1, r1
   84146:	4294      	cmp	r4, r2
   84148:	f803 1c01 	strb.w	r1, [r3, #-1]
   8414c:	d95a      	bls.n	84204 <_svfprintf_r+0x14d0>
   8414e:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
   84152:	461a      	mov	r2, r3
   84154:	e001      	b.n	8415a <_svfprintf_r+0x1426>
   84156:	f812 1b01 	ldrb.w	r1, [r2], #1
   8415a:	42a2      	cmp	r2, r4
   8415c:	f800 1f01 	strb.w	r1, [r0, #1]!
   84160:	d1f9      	bne.n	84156 <_svfprintf_r+0x1422>
   84162:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
   84166:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
   8416a:	3bf6      	subs	r3, #246	; 0xf6
   8416c:	e772      	b.n	84054 <_svfprintf_r+0x1320>
   8416e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   84170:	1c6c      	adds	r4, r5, #1
   84172:	9d14      	ldr	r5, [sp, #80]	; 0x50
   84174:	442c      	add	r4, r5
   84176:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   8417a:	e665      	b.n	83e48 <_svfprintf_r+0x1114>
   8417c:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
   84180:	2200      	movs	r2, #0
   84182:	2300      	movs	r3, #0
   84184:	f004 fb3a 	bl	887fc <__aeabi_dcmpeq>
   84188:	2800      	cmp	r0, #0
   8418a:	f47f af4a 	bne.w	84022 <_svfprintf_r+0x12ee>
   8418e:	f1c5 0501 	rsb	r5, r5, #1
   84192:	9525      	str	r5, [sp, #148]	; 0x94
   84194:	442c      	add	r4, r5
   84196:	e624      	b.n	83de2 <_svfprintf_r+0x10ae>
   84198:	9d14      	ldr	r5, [sp, #80]	; 0x50
   8419a:	f04f 0867 	mov.w	r8, #103	; 0x67
   8419e:	1c6c      	adds	r4, r5, #1
   841a0:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   841a4:	e650      	b.n	83e48 <_svfprintf_r+0x1114>
   841a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
   841a8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   841ac:	682d      	ldr	r5, [r5, #0]
   841ae:	f10c 0304 	add.w	r3, ip, #4
   841b2:	2d00      	cmp	r5, #0
   841b4:	f899 8001 	ldrb.w	r8, [r9, #1]
   841b8:	950a      	str	r5, [sp, #40]	; 0x28
   841ba:	9310      	str	r3, [sp, #64]	; 0x40
   841bc:	4681      	mov	r9, r0
   841be:	f6be ae15 	bge.w	82dec <_svfprintf_r+0xb8>
   841c2:	f7fe be10 	b.w	82de6 <_svfprintf_r+0xb2>
   841c6:	b97c      	cbnz	r4, 841e8 <_svfprintf_r+0x14b4>
   841c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
   841ca:	07e9      	lsls	r1, r5, #31
   841cc:	d40c      	bmi.n	841e8 <_svfprintf_r+0x14b4>
   841ce:	2301      	movs	r3, #1
   841d0:	461c      	mov	r4, r3
   841d2:	e639      	b.n	83e48 <_svfprintf_r+0x1114>
   841d4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   841d8:	f01c 0301 	ands.w	r3, ip, #1
   841dc:	f47f af43 	bne.w	84066 <_svfprintf_r+0x1332>
   841e0:	9314      	str	r3, [sp, #80]	; 0x50
   841e2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   841e6:	e62f      	b.n	83e48 <_svfprintf_r+0x1114>
   841e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   841ea:	1cac      	adds	r4, r5, #2
   841ec:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   841f0:	e62a      	b.n	83e48 <_svfprintf_r+0x1114>
   841f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   841f4:	230c      	movs	r3, #12
   841f6:	602b      	str	r3, [r5, #0]
   841f8:	f04f 30ff 	mov.w	r0, #4294967295
   841fc:	f7fe beba 	b.w	82f74 <_svfprintf_r+0x240>
   84200:	9b25      	ldr	r3, [sp, #148]	; 0x94
   84202:	e713      	b.n	8402c <_svfprintf_r+0x12f8>
   84204:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
   84208:	e724      	b.n	84054 <_svfprintf_r+0x1320>
   8420a:	bf00      	nop
   8420c:	00089054 	.word	0x00089054
   84210:	66666667 	.word	0x66666667

00084214 <__sprint_r.part.0>:
   84214:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   84216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8421a:	049c      	lsls	r4, r3, #18
   8421c:	460e      	mov	r6, r1
   8421e:	4680      	mov	r8, r0
   84220:	4691      	mov	r9, r2
   84222:	d52a      	bpl.n	8427a <__sprint_r.part.0+0x66>
   84224:	6893      	ldr	r3, [r2, #8]
   84226:	6812      	ldr	r2, [r2, #0]
   84228:	f102 0a08 	add.w	sl, r2, #8
   8422c:	b31b      	cbz	r3, 84276 <__sprint_r.part.0+0x62>
   8422e:	e91a 00a0 	ldmdb	sl, {r5, r7}
   84232:	08bf      	lsrs	r7, r7, #2
   84234:	d017      	beq.n	84266 <__sprint_r.part.0+0x52>
   84236:	3d04      	subs	r5, #4
   84238:	2400      	movs	r4, #0
   8423a:	e001      	b.n	84240 <__sprint_r.part.0+0x2c>
   8423c:	42a7      	cmp	r7, r4
   8423e:	d010      	beq.n	84262 <__sprint_r.part.0+0x4e>
   84240:	4640      	mov	r0, r8
   84242:	f855 1f04 	ldr.w	r1, [r5, #4]!
   84246:	4632      	mov	r2, r6
   84248:	f002 f85c 	bl	86304 <_fputwc_r>
   8424c:	1c43      	adds	r3, r0, #1
   8424e:	f104 0401 	add.w	r4, r4, #1
   84252:	d1f3      	bne.n	8423c <__sprint_r.part.0+0x28>
   84254:	2300      	movs	r3, #0
   84256:	f8c9 3008 	str.w	r3, [r9, #8]
   8425a:	f8c9 3004 	str.w	r3, [r9, #4]
   8425e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84262:	f8d9 3008 	ldr.w	r3, [r9, #8]
   84266:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   8426a:	f8c9 3008 	str.w	r3, [r9, #8]
   8426e:	f10a 0a08 	add.w	sl, sl, #8
   84272:	2b00      	cmp	r3, #0
   84274:	d1db      	bne.n	8422e <__sprint_r.part.0+0x1a>
   84276:	2000      	movs	r0, #0
   84278:	e7ec      	b.n	84254 <__sprint_r.part.0+0x40>
   8427a:	f002 f9bd 	bl	865f8 <__sfvwrite_r>
   8427e:	2300      	movs	r3, #0
   84280:	f8c9 3008 	str.w	r3, [r9, #8]
   84284:	f8c9 3004 	str.w	r3, [r9, #4]
   84288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0008428c <_vfiprintf_r>:
   8428c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84290:	b0b1      	sub	sp, #196	; 0xc4
   84292:	461c      	mov	r4, r3
   84294:	9102      	str	r1, [sp, #8]
   84296:	4690      	mov	r8, r2
   84298:	9308      	str	r3, [sp, #32]
   8429a:	9006      	str	r0, [sp, #24]
   8429c:	b118      	cbz	r0, 842a6 <_vfiprintf_r+0x1a>
   8429e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   842a0:	2b00      	cmp	r3, #0
   842a2:	f000 80e8 	beq.w	84476 <_vfiprintf_r+0x1ea>
   842a6:	9d02      	ldr	r5, [sp, #8]
   842a8:	89ab      	ldrh	r3, [r5, #12]
   842aa:	b29a      	uxth	r2, r3
   842ac:	0490      	lsls	r0, r2, #18
   842ae:	d407      	bmi.n	842c0 <_vfiprintf_r+0x34>
   842b0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   842b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   842b6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   842ba:	81ab      	strh	r3, [r5, #12]
   842bc:	b29a      	uxth	r2, r3
   842be:	6669      	str	r1, [r5, #100]	; 0x64
   842c0:	0711      	lsls	r1, r2, #28
   842c2:	f140 80b7 	bpl.w	84434 <_vfiprintf_r+0x1a8>
   842c6:	f8dd b008 	ldr.w	fp, [sp, #8]
   842ca:	f8db 3010 	ldr.w	r3, [fp, #16]
   842ce:	2b00      	cmp	r3, #0
   842d0:	f000 80b0 	beq.w	84434 <_vfiprintf_r+0x1a8>
   842d4:	f002 021a 	and.w	r2, r2, #26
   842d8:	2a0a      	cmp	r2, #10
   842da:	f000 80b7 	beq.w	8444c <_vfiprintf_r+0x1c0>
   842de:	2300      	movs	r3, #0
   842e0:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   842e4:	930a      	str	r3, [sp, #40]	; 0x28
   842e6:	9315      	str	r3, [sp, #84]	; 0x54
   842e8:	9314      	str	r3, [sp, #80]	; 0x50
   842ea:	9309      	str	r3, [sp, #36]	; 0x24
   842ec:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   842f0:	464e      	mov	r6, r9
   842f2:	f898 3000 	ldrb.w	r3, [r8]
   842f6:	2b00      	cmp	r3, #0
   842f8:	f000 84c8 	beq.w	84c8c <_vfiprintf_r+0xa00>
   842fc:	2b25      	cmp	r3, #37	; 0x25
   842fe:	f000 84c5 	beq.w	84c8c <_vfiprintf_r+0xa00>
   84302:	f108 0201 	add.w	r2, r8, #1
   84306:	e001      	b.n	8430c <_vfiprintf_r+0x80>
   84308:	2b25      	cmp	r3, #37	; 0x25
   8430a:	d004      	beq.n	84316 <_vfiprintf_r+0x8a>
   8430c:	7813      	ldrb	r3, [r2, #0]
   8430e:	4614      	mov	r4, r2
   84310:	3201      	adds	r2, #1
   84312:	2b00      	cmp	r3, #0
   84314:	d1f8      	bne.n	84308 <_vfiprintf_r+0x7c>
   84316:	ebc8 0504 	rsb	r5, r8, r4
   8431a:	b195      	cbz	r5, 84342 <_vfiprintf_r+0xb6>
   8431c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8431e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84320:	3301      	adds	r3, #1
   84322:	442a      	add	r2, r5
   84324:	2b07      	cmp	r3, #7
   84326:	f8c6 8000 	str.w	r8, [r6]
   8432a:	6075      	str	r5, [r6, #4]
   8432c:	9215      	str	r2, [sp, #84]	; 0x54
   8432e:	9314      	str	r3, [sp, #80]	; 0x50
   84330:	dd7b      	ble.n	8442a <_vfiprintf_r+0x19e>
   84332:	2a00      	cmp	r2, #0
   84334:	f040 84d5 	bne.w	84ce2 <_vfiprintf_r+0xa56>
   84338:	9809      	ldr	r0, [sp, #36]	; 0x24
   8433a:	9214      	str	r2, [sp, #80]	; 0x50
   8433c:	4428      	add	r0, r5
   8433e:	464e      	mov	r6, r9
   84340:	9009      	str	r0, [sp, #36]	; 0x24
   84342:	7823      	ldrb	r3, [r4, #0]
   84344:	2b00      	cmp	r3, #0
   84346:	f000 83ed 	beq.w	84b24 <_vfiprintf_r+0x898>
   8434a:	2100      	movs	r1, #0
   8434c:	f04f 0200 	mov.w	r2, #0
   84350:	f04f 3cff 	mov.w	ip, #4294967295
   84354:	7863      	ldrb	r3, [r4, #1]
   84356:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   8435a:	9104      	str	r1, [sp, #16]
   8435c:	468a      	mov	sl, r1
   8435e:	f104 0801 	add.w	r8, r4, #1
   84362:	4608      	mov	r0, r1
   84364:	4665      	mov	r5, ip
   84366:	f108 0801 	add.w	r8, r8, #1
   8436a:	f1a3 0220 	sub.w	r2, r3, #32
   8436e:	2a58      	cmp	r2, #88	; 0x58
   84370:	f200 82d9 	bhi.w	84926 <_vfiprintf_r+0x69a>
   84374:	e8df f012 	tbh	[pc, r2, lsl #1]
   84378:	02d702cb 	.word	0x02d702cb
   8437c:	02d202d7 	.word	0x02d202d7
   84380:	02d702d7 	.word	0x02d702d7
   84384:	02d702d7 	.word	0x02d702d7
   84388:	02d702d7 	.word	0x02d702d7
   8438c:	028f0282 	.word	0x028f0282
   84390:	008402d7 	.word	0x008402d7
   84394:	02d70293 	.word	0x02d70293
   84398:	0196012b 	.word	0x0196012b
   8439c:	01960196 	.word	0x01960196
   843a0:	01960196 	.word	0x01960196
   843a4:	01960196 	.word	0x01960196
   843a8:	01960196 	.word	0x01960196
   843ac:	02d702d7 	.word	0x02d702d7
   843b0:	02d702d7 	.word	0x02d702d7
   843b4:	02d702d7 	.word	0x02d702d7
   843b8:	02d702d7 	.word	0x02d702d7
   843bc:	02d702d7 	.word	0x02d702d7
   843c0:	02d70130 	.word	0x02d70130
   843c4:	02d702d7 	.word	0x02d702d7
   843c8:	02d702d7 	.word	0x02d702d7
   843cc:	02d702d7 	.word	0x02d702d7
   843d0:	02d702d7 	.word	0x02d702d7
   843d4:	017b02d7 	.word	0x017b02d7
   843d8:	02d702d7 	.word	0x02d702d7
   843dc:	02d702d7 	.word	0x02d702d7
   843e0:	01a402d7 	.word	0x01a402d7
   843e4:	02d702d7 	.word	0x02d702d7
   843e8:	02d701bf 	.word	0x02d701bf
   843ec:	02d702d7 	.word	0x02d702d7
   843f0:	02d702d7 	.word	0x02d702d7
   843f4:	02d702d7 	.word	0x02d702d7
   843f8:	02d702d7 	.word	0x02d702d7
   843fc:	01e402d7 	.word	0x01e402d7
   84400:	02d701fa 	.word	0x02d701fa
   84404:	02d702d7 	.word	0x02d702d7
   84408:	01fa0216 	.word	0x01fa0216
   8440c:	02d702d7 	.word	0x02d702d7
   84410:	02d7021b 	.word	0x02d7021b
   84414:	00890228 	.word	0x00890228
   84418:	027d0266 	.word	0x027d0266
   8441c:	023a02d7 	.word	0x023a02d7
   84420:	011902d7 	.word	0x011902d7
   84424:	02d702d7 	.word	0x02d702d7
   84428:	02af      	.short	0x02af
   8442a:	3608      	adds	r6, #8
   8442c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8442e:	4428      	add	r0, r5
   84430:	9009      	str	r0, [sp, #36]	; 0x24
   84432:	e786      	b.n	84342 <_vfiprintf_r+0xb6>
   84434:	9806      	ldr	r0, [sp, #24]
   84436:	9902      	ldr	r1, [sp, #8]
   84438:	f000 fde4 	bl	85004 <__swsetup_r>
   8443c:	b9b0      	cbnz	r0, 8446c <_vfiprintf_r+0x1e0>
   8443e:	9d02      	ldr	r5, [sp, #8]
   84440:	89aa      	ldrh	r2, [r5, #12]
   84442:	f002 021a 	and.w	r2, r2, #26
   84446:	2a0a      	cmp	r2, #10
   84448:	f47f af49 	bne.w	842de <_vfiprintf_r+0x52>
   8444c:	f8dd b008 	ldr.w	fp, [sp, #8]
   84450:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   84454:	2b00      	cmp	r3, #0
   84456:	f6ff af42 	blt.w	842de <_vfiprintf_r+0x52>
   8445a:	9806      	ldr	r0, [sp, #24]
   8445c:	4659      	mov	r1, fp
   8445e:	4642      	mov	r2, r8
   84460:	4623      	mov	r3, r4
   84462:	f000 fd3d 	bl	84ee0 <__sbprintf>
   84466:	b031      	add	sp, #196	; 0xc4
   84468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8446c:	f04f 30ff 	mov.w	r0, #4294967295
   84470:	b031      	add	sp, #196	; 0xc4
   84472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84476:	f001 feaf 	bl	861d8 <__sinit>
   8447a:	e714      	b.n	842a6 <_vfiprintf_r+0x1a>
   8447c:	4240      	negs	r0, r0
   8447e:	9308      	str	r3, [sp, #32]
   84480:	f04a 0a04 	orr.w	sl, sl, #4
   84484:	f898 3000 	ldrb.w	r3, [r8]
   84488:	e76d      	b.n	84366 <_vfiprintf_r+0xda>
   8448a:	f01a 0320 	ands.w	r3, sl, #32
   8448e:	9004      	str	r0, [sp, #16]
   84490:	46ac      	mov	ip, r5
   84492:	f000 80f4 	beq.w	8467e <_vfiprintf_r+0x3f2>
   84496:	f8dd b020 	ldr.w	fp, [sp, #32]
   8449a:	f10b 0307 	add.w	r3, fp, #7
   8449e:	f023 0307 	bic.w	r3, r3, #7
   844a2:	f103 0408 	add.w	r4, r3, #8
   844a6:	9408      	str	r4, [sp, #32]
   844a8:	e9d3 4500 	ldrd	r4, r5, [r3]
   844ac:	2300      	movs	r3, #0
   844ae:	f04f 0000 	mov.w	r0, #0
   844b2:	2100      	movs	r1, #0
   844b4:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   844b8:	f8cd c014 	str.w	ip, [sp, #20]
   844bc:	9107      	str	r1, [sp, #28]
   844be:	f1bc 0f00 	cmp.w	ip, #0
   844c2:	bfa8      	it	ge
   844c4:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   844c8:	ea54 0205 	orrs.w	r2, r4, r5
   844cc:	f040 80ad 	bne.w	8462a <_vfiprintf_r+0x39e>
   844d0:	f1bc 0f00 	cmp.w	ip, #0
   844d4:	f040 80a9 	bne.w	8462a <_vfiprintf_r+0x39e>
   844d8:	2b00      	cmp	r3, #0
   844da:	f040 83c0 	bne.w	84c5e <_vfiprintf_r+0x9d2>
   844de:	f01a 0f01 	tst.w	sl, #1
   844e2:	f000 83bc 	beq.w	84c5e <_vfiprintf_r+0x9d2>
   844e6:	2330      	movs	r3, #48	; 0x30
   844e8:	af30      	add	r7, sp, #192	; 0xc0
   844ea:	f807 3d41 	strb.w	r3, [r7, #-65]!
   844ee:	ebc7 0409 	rsb	r4, r7, r9
   844f2:	9405      	str	r4, [sp, #20]
   844f4:	f8dd b014 	ldr.w	fp, [sp, #20]
   844f8:	9c07      	ldr	r4, [sp, #28]
   844fa:	45e3      	cmp	fp, ip
   844fc:	bfb8      	it	lt
   844fe:	46e3      	movlt	fp, ip
   84500:	f8cd b00c 	str.w	fp, [sp, #12]
   84504:	b11c      	cbz	r4, 8450e <_vfiprintf_r+0x282>
   84506:	f10b 0b01 	add.w	fp, fp, #1
   8450a:	f8cd b00c 	str.w	fp, [sp, #12]
   8450e:	f01a 0502 	ands.w	r5, sl, #2
   84512:	9507      	str	r5, [sp, #28]
   84514:	d005      	beq.n	84522 <_vfiprintf_r+0x296>
   84516:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8451a:	f10b 0b02 	add.w	fp, fp, #2
   8451e:	f8cd b00c 	str.w	fp, [sp, #12]
   84522:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   84526:	930b      	str	r3, [sp, #44]	; 0x2c
   84528:	f040 821b 	bne.w	84962 <_vfiprintf_r+0x6d6>
   8452c:	9d04      	ldr	r5, [sp, #16]
   8452e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84532:	ebcb 0405 	rsb	r4, fp, r5
   84536:	2c00      	cmp	r4, #0
   84538:	f340 8213 	ble.w	84962 <_vfiprintf_r+0x6d6>
   8453c:	2c10      	cmp	r4, #16
   8453e:	f340 8489 	ble.w	84e54 <_vfiprintf_r+0xbc8>
   84542:	4dbe      	ldr	r5, [pc, #760]	; (8483c <_vfiprintf_r+0x5b0>)
   84544:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84546:	462b      	mov	r3, r5
   84548:	9814      	ldr	r0, [sp, #80]	; 0x50
   8454a:	4625      	mov	r5, r4
   8454c:	f04f 0b10 	mov.w	fp, #16
   84550:	4664      	mov	r4, ip
   84552:	46b4      	mov	ip, r6
   84554:	461e      	mov	r6, r3
   84556:	e006      	b.n	84566 <_vfiprintf_r+0x2da>
   84558:	1c83      	adds	r3, r0, #2
   8455a:	f10c 0c08 	add.w	ip, ip, #8
   8455e:	4608      	mov	r0, r1
   84560:	3d10      	subs	r5, #16
   84562:	2d10      	cmp	r5, #16
   84564:	dd11      	ble.n	8458a <_vfiprintf_r+0x2fe>
   84566:	1c41      	adds	r1, r0, #1
   84568:	3210      	adds	r2, #16
   8456a:	2907      	cmp	r1, #7
   8456c:	9215      	str	r2, [sp, #84]	; 0x54
   8456e:	e88c 0840 	stmia.w	ip, {r6, fp}
   84572:	9114      	str	r1, [sp, #80]	; 0x50
   84574:	ddf0      	ble.n	84558 <_vfiprintf_r+0x2cc>
   84576:	2a00      	cmp	r2, #0
   84578:	f040 81e6 	bne.w	84948 <_vfiprintf_r+0x6bc>
   8457c:	3d10      	subs	r5, #16
   8457e:	2d10      	cmp	r5, #16
   84580:	f04f 0301 	mov.w	r3, #1
   84584:	4610      	mov	r0, r2
   84586:	46cc      	mov	ip, r9
   84588:	dced      	bgt.n	84566 <_vfiprintf_r+0x2da>
   8458a:	4631      	mov	r1, r6
   8458c:	4666      	mov	r6, ip
   8458e:	46a4      	mov	ip, r4
   84590:	462c      	mov	r4, r5
   84592:	460d      	mov	r5, r1
   84594:	4422      	add	r2, r4
   84596:	2b07      	cmp	r3, #7
   84598:	9215      	str	r2, [sp, #84]	; 0x54
   8459a:	6035      	str	r5, [r6, #0]
   8459c:	6074      	str	r4, [r6, #4]
   8459e:	9314      	str	r3, [sp, #80]	; 0x50
   845a0:	f300 836d 	bgt.w	84c7e <_vfiprintf_r+0x9f2>
   845a4:	3608      	adds	r6, #8
   845a6:	1c59      	adds	r1, r3, #1
   845a8:	e1de      	b.n	84968 <_vfiprintf_r+0x6dc>
   845aa:	f01a 0f20 	tst.w	sl, #32
   845ae:	9004      	str	r0, [sp, #16]
   845b0:	46ac      	mov	ip, r5
   845b2:	f000 808d 	beq.w	846d0 <_vfiprintf_r+0x444>
   845b6:	9d08      	ldr	r5, [sp, #32]
   845b8:	1deb      	adds	r3, r5, #7
   845ba:	f023 0307 	bic.w	r3, r3, #7
   845be:	f103 0b08 	add.w	fp, r3, #8
   845c2:	e9d3 4500 	ldrd	r4, r5, [r3]
   845c6:	f8cd b020 	str.w	fp, [sp, #32]
   845ca:	2301      	movs	r3, #1
   845cc:	e76f      	b.n	844ae <_vfiprintf_r+0x222>
   845ce:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   845d2:	f898 3000 	ldrb.w	r3, [r8]
   845d6:	e6c6      	b.n	84366 <_vfiprintf_r+0xda>
   845d8:	f04a 0a10 	orr.w	sl, sl, #16
   845dc:	f01a 0f20 	tst.w	sl, #32
   845e0:	9004      	str	r0, [sp, #16]
   845e2:	46ac      	mov	ip, r5
   845e4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   845e8:	f000 80c8 	beq.w	8477c <_vfiprintf_r+0x4f0>
   845ec:	9c08      	ldr	r4, [sp, #32]
   845ee:	1de1      	adds	r1, r4, #7
   845f0:	f021 0107 	bic.w	r1, r1, #7
   845f4:	e9d1 2300 	ldrd	r2, r3, [r1]
   845f8:	3108      	adds	r1, #8
   845fa:	9108      	str	r1, [sp, #32]
   845fc:	4614      	mov	r4, r2
   845fe:	461d      	mov	r5, r3
   84600:	2a00      	cmp	r2, #0
   84602:	f173 0b00 	sbcs.w	fp, r3, #0
   84606:	f2c0 83ce 	blt.w	84da6 <_vfiprintf_r+0xb1a>
   8460a:	f1bc 0f00 	cmp.w	ip, #0
   8460e:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   84612:	bfa8      	it	ge
   84614:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   84618:	ea54 0205 	orrs.w	r2, r4, r5
   8461c:	9007      	str	r0, [sp, #28]
   8461e:	f8cd c014 	str.w	ip, [sp, #20]
   84622:	f04f 0301 	mov.w	r3, #1
   84626:	f43f af53 	beq.w	844d0 <_vfiprintf_r+0x244>
   8462a:	2b01      	cmp	r3, #1
   8462c:	f000 8319 	beq.w	84c62 <_vfiprintf_r+0x9d6>
   84630:	2b02      	cmp	r3, #2
   84632:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   84636:	f040 824c 	bne.w	84ad2 <_vfiprintf_r+0x846>
   8463a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   8463e:	4619      	mov	r1, r3
   84640:	f004 000f 	and.w	r0, r4, #15
   84644:	0922      	lsrs	r2, r4, #4
   84646:	f81b 0000 	ldrb.w	r0, [fp, r0]
   8464a:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   8464e:	092b      	lsrs	r3, r5, #4
   84650:	7008      	strb	r0, [r1, #0]
   84652:	ea52 0003 	orrs.w	r0, r2, r3
   84656:	460f      	mov	r7, r1
   84658:	4614      	mov	r4, r2
   8465a:	461d      	mov	r5, r3
   8465c:	f101 31ff 	add.w	r1, r1, #4294967295
   84660:	d1ee      	bne.n	84640 <_vfiprintf_r+0x3b4>
   84662:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   84666:	ebc7 0309 	rsb	r3, r7, r9
   8466a:	9305      	str	r3, [sp, #20]
   8466c:	e742      	b.n	844f4 <_vfiprintf_r+0x268>
   8466e:	f04a 0a10 	orr.w	sl, sl, #16
   84672:	f01a 0320 	ands.w	r3, sl, #32
   84676:	9004      	str	r0, [sp, #16]
   84678:	46ac      	mov	ip, r5
   8467a:	f47f af0c 	bne.w	84496 <_vfiprintf_r+0x20a>
   8467e:	f01a 0210 	ands.w	r2, sl, #16
   84682:	f040 8311 	bne.w	84ca8 <_vfiprintf_r+0xa1c>
   84686:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   8468a:	f000 830d 	beq.w	84ca8 <_vfiprintf_r+0xa1c>
   8468e:	f8dd b020 	ldr.w	fp, [sp, #32]
   84692:	4613      	mov	r3, r2
   84694:	f8bb 4000 	ldrh.w	r4, [fp]
   84698:	f10b 0b04 	add.w	fp, fp, #4
   8469c:	2500      	movs	r5, #0
   8469e:	f8cd b020 	str.w	fp, [sp, #32]
   846a2:	e704      	b.n	844ae <_vfiprintf_r+0x222>
   846a4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   846a8:	2000      	movs	r0, #0
   846aa:	f818 3b01 	ldrb.w	r3, [r8], #1
   846ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   846b2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   846b6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   846ba:	2a09      	cmp	r2, #9
   846bc:	d9f5      	bls.n	846aa <_vfiprintf_r+0x41e>
   846be:	e654      	b.n	8436a <_vfiprintf_r+0xde>
   846c0:	f04a 0a10 	orr.w	sl, sl, #16
   846c4:	f01a 0f20 	tst.w	sl, #32
   846c8:	9004      	str	r0, [sp, #16]
   846ca:	46ac      	mov	ip, r5
   846cc:	f47f af73 	bne.w	845b6 <_vfiprintf_r+0x32a>
   846d0:	f01a 0f10 	tst.w	sl, #16
   846d4:	f040 82ef 	bne.w	84cb6 <_vfiprintf_r+0xa2a>
   846d8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   846dc:	f000 82eb 	beq.w	84cb6 <_vfiprintf_r+0xa2a>
   846e0:	f8dd b020 	ldr.w	fp, [sp, #32]
   846e4:	2500      	movs	r5, #0
   846e6:	f8bb 4000 	ldrh.w	r4, [fp]
   846ea:	f10b 0b04 	add.w	fp, fp, #4
   846ee:	2301      	movs	r3, #1
   846f0:	f8cd b020 	str.w	fp, [sp, #32]
   846f4:	e6db      	b.n	844ae <_vfiprintf_r+0x222>
   846f6:	46ac      	mov	ip, r5
   846f8:	4d51      	ldr	r5, [pc, #324]	; (84840 <_vfiprintf_r+0x5b4>)
   846fa:	f01a 0f20 	tst.w	sl, #32
   846fe:	9004      	str	r0, [sp, #16]
   84700:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   84704:	950a      	str	r5, [sp, #40]	; 0x28
   84706:	f000 80f0 	beq.w	848ea <_vfiprintf_r+0x65e>
   8470a:	9d08      	ldr	r5, [sp, #32]
   8470c:	1dea      	adds	r2, r5, #7
   8470e:	f022 0207 	bic.w	r2, r2, #7
   84712:	f102 0b08 	add.w	fp, r2, #8
   84716:	f8cd b020 	str.w	fp, [sp, #32]
   8471a:	e9d2 4500 	ldrd	r4, r5, [r2]
   8471e:	f01a 0f01 	tst.w	sl, #1
   84722:	f000 82aa 	beq.w	84c7a <_vfiprintf_r+0x9ee>
   84726:	ea54 0b05 	orrs.w	fp, r4, r5
   8472a:	f000 82a6 	beq.w	84c7a <_vfiprintf_r+0x9ee>
   8472e:	2230      	movs	r2, #48	; 0x30
   84730:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   84734:	f04a 0a02 	orr.w	sl, sl, #2
   84738:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8473c:	2302      	movs	r3, #2
   8473e:	e6b6      	b.n	844ae <_vfiprintf_r+0x222>
   84740:	9b08      	ldr	r3, [sp, #32]
   84742:	f8dd b020 	ldr.w	fp, [sp, #32]
   84746:	681b      	ldr	r3, [r3, #0]
   84748:	2401      	movs	r4, #1
   8474a:	f04f 0500 	mov.w	r5, #0
   8474e:	f10b 0b04 	add.w	fp, fp, #4
   84752:	9004      	str	r0, [sp, #16]
   84754:	9403      	str	r4, [sp, #12]
   84756:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8475a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8475e:	f8cd b020 	str.w	fp, [sp, #32]
   84762:	9405      	str	r4, [sp, #20]
   84764:	af16      	add	r7, sp, #88	; 0x58
   84766:	f04f 0c00 	mov.w	ip, #0
   8476a:	e6d0      	b.n	8450e <_vfiprintf_r+0x282>
   8476c:	f01a 0f20 	tst.w	sl, #32
   84770:	9004      	str	r0, [sp, #16]
   84772:	46ac      	mov	ip, r5
   84774:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   84778:	f47f af38 	bne.w	845ec <_vfiprintf_r+0x360>
   8477c:	f01a 0f10 	tst.w	sl, #16
   84780:	f040 82a7 	bne.w	84cd2 <_vfiprintf_r+0xa46>
   84784:	f01a 0f40 	tst.w	sl, #64	; 0x40
   84788:	f000 82a3 	beq.w	84cd2 <_vfiprintf_r+0xa46>
   8478c:	f8dd b020 	ldr.w	fp, [sp, #32]
   84790:	f9bb 4000 	ldrsh.w	r4, [fp]
   84794:	f10b 0b04 	add.w	fp, fp, #4
   84798:	17e5      	asrs	r5, r4, #31
   8479a:	4622      	mov	r2, r4
   8479c:	462b      	mov	r3, r5
   8479e:	f8cd b020 	str.w	fp, [sp, #32]
   847a2:	e72d      	b.n	84600 <_vfiprintf_r+0x374>
   847a4:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   847a8:	f898 3000 	ldrb.w	r3, [r8]
   847ac:	e5db      	b.n	84366 <_vfiprintf_r+0xda>
   847ae:	f898 3000 	ldrb.w	r3, [r8]
   847b2:	4642      	mov	r2, r8
   847b4:	2b6c      	cmp	r3, #108	; 0x6c
   847b6:	bf03      	ittte	eq
   847b8:	f108 0801 	addeq.w	r8, r8, #1
   847bc:	f04a 0a20 	orreq.w	sl, sl, #32
   847c0:	7853      	ldrbeq	r3, [r2, #1]
   847c2:	f04a 0a10 	orrne.w	sl, sl, #16
   847c6:	e5ce      	b.n	84366 <_vfiprintf_r+0xda>
   847c8:	f01a 0f20 	tst.w	sl, #32
   847cc:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   847d0:	f000 82f7 	beq.w	84dc2 <_vfiprintf_r+0xb36>
   847d4:	9c08      	ldr	r4, [sp, #32]
   847d6:	6821      	ldr	r1, [r4, #0]
   847d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   847da:	17e5      	asrs	r5, r4, #31
   847dc:	462b      	mov	r3, r5
   847de:	9d08      	ldr	r5, [sp, #32]
   847e0:	4622      	mov	r2, r4
   847e2:	3504      	adds	r5, #4
   847e4:	9508      	str	r5, [sp, #32]
   847e6:	e9c1 2300 	strd	r2, r3, [r1]
   847ea:	e582      	b.n	842f2 <_vfiprintf_r+0x66>
   847ec:	9c08      	ldr	r4, [sp, #32]
   847ee:	46ac      	mov	ip, r5
   847f0:	6827      	ldr	r7, [r4, #0]
   847f2:	f04f 0500 	mov.w	r5, #0
   847f6:	9004      	str	r0, [sp, #16]
   847f8:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   847fc:	3404      	adds	r4, #4
   847fe:	2f00      	cmp	r7, #0
   84800:	f000 8332 	beq.w	84e68 <_vfiprintf_r+0xbdc>
   84804:	f1bc 0f00 	cmp.w	ip, #0
   84808:	4638      	mov	r0, r7
   8480a:	f2c0 8307 	blt.w	84e1c <_vfiprintf_r+0xb90>
   8480e:	4662      	mov	r2, ip
   84810:	2100      	movs	r1, #0
   84812:	f8cd c004 	str.w	ip, [sp, #4]
   84816:	f002 fbc1 	bl	86f9c <memchr>
   8481a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8481e:	2800      	cmp	r0, #0
   84820:	f000 833a 	beq.w	84e98 <_vfiprintf_r+0xc0c>
   84824:	1bc0      	subs	r0, r0, r7
   84826:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8482a:	4560      	cmp	r0, ip
   8482c:	bfa8      	it	ge
   8482e:	4660      	movge	r0, ip
   84830:	9005      	str	r0, [sp, #20]
   84832:	9408      	str	r4, [sp, #32]
   84834:	9507      	str	r5, [sp, #28]
   84836:	f04f 0c00 	mov.w	ip, #0
   8483a:	e65b      	b.n	844f4 <_vfiprintf_r+0x268>
   8483c:	0008907c 	.word	0x0008907c
   84840:	0008902c 	.word	0x0008902c
   84844:	9b08      	ldr	r3, [sp, #32]
   84846:	f8dd b020 	ldr.w	fp, [sp, #32]
   8484a:	9004      	str	r0, [sp, #16]
   8484c:	48b2      	ldr	r0, [pc, #712]	; (84b18 <_vfiprintf_r+0x88c>)
   8484e:	681c      	ldr	r4, [r3, #0]
   84850:	2230      	movs	r2, #48	; 0x30
   84852:	2378      	movs	r3, #120	; 0x78
   84854:	f10b 0b04 	add.w	fp, fp, #4
   84858:	46ac      	mov	ip, r5
   8485a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   8485e:	f04a 0a02 	orr.w	sl, sl, #2
   84862:	f8cd b020 	str.w	fp, [sp, #32]
   84866:	2500      	movs	r5, #0
   84868:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8486c:	900a      	str	r0, [sp, #40]	; 0x28
   8486e:	2302      	movs	r3, #2
   84870:	e61d      	b.n	844ae <_vfiprintf_r+0x222>
   84872:	f04a 0a20 	orr.w	sl, sl, #32
   84876:	f898 3000 	ldrb.w	r3, [r8]
   8487a:	e574      	b.n	84366 <_vfiprintf_r+0xda>
   8487c:	f8dd b020 	ldr.w	fp, [sp, #32]
   84880:	f8db 0000 	ldr.w	r0, [fp]
   84884:	f10b 0304 	add.w	r3, fp, #4
   84888:	2800      	cmp	r0, #0
   8488a:	f6ff adf7 	blt.w	8447c <_vfiprintf_r+0x1f0>
   8488e:	9308      	str	r3, [sp, #32]
   84890:	f898 3000 	ldrb.w	r3, [r8]
   84894:	e567      	b.n	84366 <_vfiprintf_r+0xda>
   84896:	f898 3000 	ldrb.w	r3, [r8]
   8489a:	212b      	movs	r1, #43	; 0x2b
   8489c:	e563      	b.n	84366 <_vfiprintf_r+0xda>
   8489e:	f898 3000 	ldrb.w	r3, [r8]
   848a2:	f108 0401 	add.w	r4, r8, #1
   848a6:	2b2a      	cmp	r3, #42	; 0x2a
   848a8:	f000 8305 	beq.w	84eb6 <_vfiprintf_r+0xc2a>
   848ac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   848b0:	2a09      	cmp	r2, #9
   848b2:	bf98      	it	ls
   848b4:	2500      	movls	r5, #0
   848b6:	f200 82fa 	bhi.w	84eae <_vfiprintf_r+0xc22>
   848ba:	f814 3b01 	ldrb.w	r3, [r4], #1
   848be:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   848c2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   848c6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   848ca:	2a09      	cmp	r2, #9
   848cc:	d9f5      	bls.n	848ba <_vfiprintf_r+0x62e>
   848ce:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   848d2:	46a0      	mov	r8, r4
   848d4:	e549      	b.n	8436a <_vfiprintf_r+0xde>
   848d6:	4c90      	ldr	r4, [pc, #576]	; (84b18 <_vfiprintf_r+0x88c>)
   848d8:	f01a 0f20 	tst.w	sl, #32
   848dc:	9004      	str	r0, [sp, #16]
   848de:	46ac      	mov	ip, r5
   848e0:	940a      	str	r4, [sp, #40]	; 0x28
   848e2:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   848e6:	f47f af10 	bne.w	8470a <_vfiprintf_r+0x47e>
   848ea:	f01a 0f10 	tst.w	sl, #16
   848ee:	f040 81ea 	bne.w	84cc6 <_vfiprintf_r+0xa3a>
   848f2:	f01a 0f40 	tst.w	sl, #64	; 0x40
   848f6:	f000 81e6 	beq.w	84cc6 <_vfiprintf_r+0xa3a>
   848fa:	f8dd b020 	ldr.w	fp, [sp, #32]
   848fe:	2500      	movs	r5, #0
   84900:	f8bb 4000 	ldrh.w	r4, [fp]
   84904:	f10b 0b04 	add.w	fp, fp, #4
   84908:	f8cd b020 	str.w	fp, [sp, #32]
   8490c:	e707      	b.n	8471e <_vfiprintf_r+0x492>
   8490e:	f898 3000 	ldrb.w	r3, [r8]
   84912:	2900      	cmp	r1, #0
   84914:	f47f ad27 	bne.w	84366 <_vfiprintf_r+0xda>
   84918:	2120      	movs	r1, #32
   8491a:	e524      	b.n	84366 <_vfiprintf_r+0xda>
   8491c:	f04a 0a01 	orr.w	sl, sl, #1
   84920:	f898 3000 	ldrb.w	r3, [r8]
   84924:	e51f      	b.n	84366 <_vfiprintf_r+0xda>
   84926:	9004      	str	r0, [sp, #16]
   84928:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8492c:	2b00      	cmp	r3, #0
   8492e:	f000 80f9 	beq.w	84b24 <_vfiprintf_r+0x898>
   84932:	2501      	movs	r5, #1
   84934:	f04f 0b00 	mov.w	fp, #0
   84938:	9503      	str	r5, [sp, #12]
   8493a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8493e:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   84942:	9505      	str	r5, [sp, #20]
   84944:	af16      	add	r7, sp, #88	; 0x58
   84946:	e70e      	b.n	84766 <_vfiprintf_r+0x4da>
   84948:	9806      	ldr	r0, [sp, #24]
   8494a:	9902      	ldr	r1, [sp, #8]
   8494c:	aa13      	add	r2, sp, #76	; 0x4c
   8494e:	f7ff fc61 	bl	84214 <__sprint_r.part.0>
   84952:	2800      	cmp	r0, #0
   84954:	f040 80ed 	bne.w	84b32 <_vfiprintf_r+0x8a6>
   84958:	9814      	ldr	r0, [sp, #80]	; 0x50
   8495a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8495c:	1c43      	adds	r3, r0, #1
   8495e:	46cc      	mov	ip, r9
   84960:	e5fe      	b.n	84560 <_vfiprintf_r+0x2d4>
   84962:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84964:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84966:	1c59      	adds	r1, r3, #1
   84968:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   8496c:	b168      	cbz	r0, 8498a <_vfiprintf_r+0x6fe>
   8496e:	3201      	adds	r2, #1
   84970:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   84974:	2301      	movs	r3, #1
   84976:	2907      	cmp	r1, #7
   84978:	9215      	str	r2, [sp, #84]	; 0x54
   8497a:	9114      	str	r1, [sp, #80]	; 0x50
   8497c:	e886 0009 	stmia.w	r6, {r0, r3}
   84980:	f300 8160 	bgt.w	84c44 <_vfiprintf_r+0x9b8>
   84984:	460b      	mov	r3, r1
   84986:	3608      	adds	r6, #8
   84988:	3101      	adds	r1, #1
   8498a:	9c07      	ldr	r4, [sp, #28]
   8498c:	b164      	cbz	r4, 849a8 <_vfiprintf_r+0x71c>
   8498e:	3202      	adds	r2, #2
   84990:	a812      	add	r0, sp, #72	; 0x48
   84992:	2302      	movs	r3, #2
   84994:	2907      	cmp	r1, #7
   84996:	9215      	str	r2, [sp, #84]	; 0x54
   84998:	9114      	str	r1, [sp, #80]	; 0x50
   8499a:	e886 0009 	stmia.w	r6, {r0, r3}
   8499e:	f300 8157 	bgt.w	84c50 <_vfiprintf_r+0x9c4>
   849a2:	460b      	mov	r3, r1
   849a4:	3608      	adds	r6, #8
   849a6:	3101      	adds	r1, #1
   849a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   849aa:	2d80      	cmp	r5, #128	; 0x80
   849ac:	f000 8101 	beq.w	84bb2 <_vfiprintf_r+0x926>
   849b0:	9d05      	ldr	r5, [sp, #20]
   849b2:	ebc5 040c 	rsb	r4, r5, ip
   849b6:	2c00      	cmp	r4, #0
   849b8:	dd2f      	ble.n	84a1a <_vfiprintf_r+0x78e>
   849ba:	2c10      	cmp	r4, #16
   849bc:	4d57      	ldr	r5, [pc, #348]	; (84b1c <_vfiprintf_r+0x890>)
   849be:	dd22      	ble.n	84a06 <_vfiprintf_r+0x77a>
   849c0:	4630      	mov	r0, r6
   849c2:	f04f 0b10 	mov.w	fp, #16
   849c6:	462e      	mov	r6, r5
   849c8:	4625      	mov	r5, r4
   849ca:	9c06      	ldr	r4, [sp, #24]
   849cc:	e006      	b.n	849dc <_vfiprintf_r+0x750>
   849ce:	f103 0c02 	add.w	ip, r3, #2
   849d2:	3008      	adds	r0, #8
   849d4:	460b      	mov	r3, r1
   849d6:	3d10      	subs	r5, #16
   849d8:	2d10      	cmp	r5, #16
   849da:	dd10      	ble.n	849fe <_vfiprintf_r+0x772>
   849dc:	1c59      	adds	r1, r3, #1
   849de:	3210      	adds	r2, #16
   849e0:	2907      	cmp	r1, #7
   849e2:	9215      	str	r2, [sp, #84]	; 0x54
   849e4:	e880 0840 	stmia.w	r0, {r6, fp}
   849e8:	9114      	str	r1, [sp, #80]	; 0x50
   849ea:	ddf0      	ble.n	849ce <_vfiprintf_r+0x742>
   849ec:	2a00      	cmp	r2, #0
   849ee:	d163      	bne.n	84ab8 <_vfiprintf_r+0x82c>
   849f0:	3d10      	subs	r5, #16
   849f2:	2d10      	cmp	r5, #16
   849f4:	f04f 0c01 	mov.w	ip, #1
   849f8:	4613      	mov	r3, r2
   849fa:	4648      	mov	r0, r9
   849fc:	dcee      	bgt.n	849dc <_vfiprintf_r+0x750>
   849fe:	462c      	mov	r4, r5
   84a00:	4661      	mov	r1, ip
   84a02:	4635      	mov	r5, r6
   84a04:	4606      	mov	r6, r0
   84a06:	4422      	add	r2, r4
   84a08:	2907      	cmp	r1, #7
   84a0a:	9215      	str	r2, [sp, #84]	; 0x54
   84a0c:	6035      	str	r5, [r6, #0]
   84a0e:	6074      	str	r4, [r6, #4]
   84a10:	9114      	str	r1, [sp, #80]	; 0x50
   84a12:	f300 80c1 	bgt.w	84b98 <_vfiprintf_r+0x90c>
   84a16:	3608      	adds	r6, #8
   84a18:	3101      	adds	r1, #1
   84a1a:	9d05      	ldr	r5, [sp, #20]
   84a1c:	2907      	cmp	r1, #7
   84a1e:	442a      	add	r2, r5
   84a20:	9215      	str	r2, [sp, #84]	; 0x54
   84a22:	6037      	str	r7, [r6, #0]
   84a24:	6075      	str	r5, [r6, #4]
   84a26:	9114      	str	r1, [sp, #80]	; 0x50
   84a28:	f340 80c1 	ble.w	84bae <_vfiprintf_r+0x922>
   84a2c:	2a00      	cmp	r2, #0
   84a2e:	f040 8130 	bne.w	84c92 <_vfiprintf_r+0xa06>
   84a32:	9214      	str	r2, [sp, #80]	; 0x50
   84a34:	464e      	mov	r6, r9
   84a36:	f01a 0f04 	tst.w	sl, #4
   84a3a:	f000 808b 	beq.w	84b54 <_vfiprintf_r+0x8c8>
   84a3e:	9d04      	ldr	r5, [sp, #16]
   84a40:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84a44:	ebcb 0405 	rsb	r4, fp, r5
   84a48:	2c00      	cmp	r4, #0
   84a4a:	f340 8083 	ble.w	84b54 <_vfiprintf_r+0x8c8>
   84a4e:	2c10      	cmp	r4, #16
   84a50:	f340 821e 	ble.w	84e90 <_vfiprintf_r+0xc04>
   84a54:	9914      	ldr	r1, [sp, #80]	; 0x50
   84a56:	4d32      	ldr	r5, [pc, #200]	; (84b20 <_vfiprintf_r+0x894>)
   84a58:	2710      	movs	r7, #16
   84a5a:	f8dd a018 	ldr.w	sl, [sp, #24]
   84a5e:	f8dd b008 	ldr.w	fp, [sp, #8]
   84a62:	e005      	b.n	84a70 <_vfiprintf_r+0x7e4>
   84a64:	1c88      	adds	r0, r1, #2
   84a66:	3608      	adds	r6, #8
   84a68:	4619      	mov	r1, r3
   84a6a:	3c10      	subs	r4, #16
   84a6c:	2c10      	cmp	r4, #16
   84a6e:	dd10      	ble.n	84a92 <_vfiprintf_r+0x806>
   84a70:	1c4b      	adds	r3, r1, #1
   84a72:	3210      	adds	r2, #16
   84a74:	2b07      	cmp	r3, #7
   84a76:	9215      	str	r2, [sp, #84]	; 0x54
   84a78:	e886 00a0 	stmia.w	r6, {r5, r7}
   84a7c:	9314      	str	r3, [sp, #80]	; 0x50
   84a7e:	ddf1      	ble.n	84a64 <_vfiprintf_r+0x7d8>
   84a80:	2a00      	cmp	r2, #0
   84a82:	d17d      	bne.n	84b80 <_vfiprintf_r+0x8f4>
   84a84:	3c10      	subs	r4, #16
   84a86:	2c10      	cmp	r4, #16
   84a88:	f04f 0001 	mov.w	r0, #1
   84a8c:	4611      	mov	r1, r2
   84a8e:	464e      	mov	r6, r9
   84a90:	dcee      	bgt.n	84a70 <_vfiprintf_r+0x7e4>
   84a92:	4422      	add	r2, r4
   84a94:	2807      	cmp	r0, #7
   84a96:	9215      	str	r2, [sp, #84]	; 0x54
   84a98:	6035      	str	r5, [r6, #0]
   84a9a:	6074      	str	r4, [r6, #4]
   84a9c:	9014      	str	r0, [sp, #80]	; 0x50
   84a9e:	dd59      	ble.n	84b54 <_vfiprintf_r+0x8c8>
   84aa0:	2a00      	cmp	r2, #0
   84aa2:	d14f      	bne.n	84b44 <_vfiprintf_r+0x8b8>
   84aa4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84aa6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84aaa:	9d04      	ldr	r5, [sp, #16]
   84aac:	45ab      	cmp	fp, r5
   84aae:	bfac      	ite	ge
   84ab0:	445c      	addge	r4, fp
   84ab2:	1964      	addlt	r4, r4, r5
   84ab4:	9409      	str	r4, [sp, #36]	; 0x24
   84ab6:	e05e      	b.n	84b76 <_vfiprintf_r+0x8ea>
   84ab8:	4620      	mov	r0, r4
   84aba:	9902      	ldr	r1, [sp, #8]
   84abc:	aa13      	add	r2, sp, #76	; 0x4c
   84abe:	f7ff fba9 	bl	84214 <__sprint_r.part.0>
   84ac2:	2800      	cmp	r0, #0
   84ac4:	d135      	bne.n	84b32 <_vfiprintf_r+0x8a6>
   84ac6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84ac8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84aca:	f103 0c01 	add.w	ip, r3, #1
   84ace:	4648      	mov	r0, r9
   84ad0:	e781      	b.n	849d6 <_vfiprintf_r+0x74a>
   84ad2:	08e0      	lsrs	r0, r4, #3
   84ad4:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   84ad8:	f004 0207 	and.w	r2, r4, #7
   84adc:	08e9      	lsrs	r1, r5, #3
   84ade:	3230      	adds	r2, #48	; 0x30
   84ae0:	ea50 0b01 	orrs.w	fp, r0, r1
   84ae4:	461f      	mov	r7, r3
   84ae6:	701a      	strb	r2, [r3, #0]
   84ae8:	4604      	mov	r4, r0
   84aea:	460d      	mov	r5, r1
   84aec:	f103 33ff 	add.w	r3, r3, #4294967295
   84af0:	d1ef      	bne.n	84ad2 <_vfiprintf_r+0x846>
   84af2:	f01a 0f01 	tst.w	sl, #1
   84af6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   84afa:	4639      	mov	r1, r7
   84afc:	f000 80b9 	beq.w	84c72 <_vfiprintf_r+0x9e6>
   84b00:	2a30      	cmp	r2, #48	; 0x30
   84b02:	f43f acf4 	beq.w	844ee <_vfiprintf_r+0x262>
   84b06:	461f      	mov	r7, r3
   84b08:	ebc7 0509 	rsb	r5, r7, r9
   84b0c:	2330      	movs	r3, #48	; 0x30
   84b0e:	9505      	str	r5, [sp, #20]
   84b10:	f801 3c01 	strb.w	r3, [r1, #-1]
   84b14:	e4ee      	b.n	844f4 <_vfiprintf_r+0x268>
   84b16:	bf00      	nop
   84b18:	00089040 	.word	0x00089040
   84b1c:	0008906c 	.word	0x0008906c
   84b20:	0008907c 	.word	0x0008907c
   84b24:	9b15      	ldr	r3, [sp, #84]	; 0x54
   84b26:	b123      	cbz	r3, 84b32 <_vfiprintf_r+0x8a6>
   84b28:	9806      	ldr	r0, [sp, #24]
   84b2a:	9902      	ldr	r1, [sp, #8]
   84b2c:	aa13      	add	r2, sp, #76	; 0x4c
   84b2e:	f7ff fb71 	bl	84214 <__sprint_r.part.0>
   84b32:	9c02      	ldr	r4, [sp, #8]
   84b34:	89a3      	ldrh	r3, [r4, #12]
   84b36:	065b      	lsls	r3, r3, #25
   84b38:	f53f ac98 	bmi.w	8446c <_vfiprintf_r+0x1e0>
   84b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
   84b3e:	b031      	add	sp, #196	; 0xc4
   84b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84b44:	9806      	ldr	r0, [sp, #24]
   84b46:	9902      	ldr	r1, [sp, #8]
   84b48:	aa13      	add	r2, sp, #76	; 0x4c
   84b4a:	f7ff fb63 	bl	84214 <__sprint_r.part.0>
   84b4e:	2800      	cmp	r0, #0
   84b50:	d1ef      	bne.n	84b32 <_vfiprintf_r+0x8a6>
   84b52:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84b54:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84b56:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84b5a:	9d04      	ldr	r5, [sp, #16]
   84b5c:	45ab      	cmp	fp, r5
   84b5e:	bfac      	ite	ge
   84b60:	445c      	addge	r4, fp
   84b62:	1964      	addlt	r4, r4, r5
   84b64:	9409      	str	r4, [sp, #36]	; 0x24
   84b66:	b132      	cbz	r2, 84b76 <_vfiprintf_r+0x8ea>
   84b68:	9806      	ldr	r0, [sp, #24]
   84b6a:	9902      	ldr	r1, [sp, #8]
   84b6c:	aa13      	add	r2, sp, #76	; 0x4c
   84b6e:	f7ff fb51 	bl	84214 <__sprint_r.part.0>
   84b72:	2800      	cmp	r0, #0
   84b74:	d1dd      	bne.n	84b32 <_vfiprintf_r+0x8a6>
   84b76:	2000      	movs	r0, #0
   84b78:	9014      	str	r0, [sp, #80]	; 0x50
   84b7a:	464e      	mov	r6, r9
   84b7c:	f7ff bbb9 	b.w	842f2 <_vfiprintf_r+0x66>
   84b80:	4650      	mov	r0, sl
   84b82:	4659      	mov	r1, fp
   84b84:	aa13      	add	r2, sp, #76	; 0x4c
   84b86:	f7ff fb45 	bl	84214 <__sprint_r.part.0>
   84b8a:	2800      	cmp	r0, #0
   84b8c:	d1d1      	bne.n	84b32 <_vfiprintf_r+0x8a6>
   84b8e:	9914      	ldr	r1, [sp, #80]	; 0x50
   84b90:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84b92:	1c48      	adds	r0, r1, #1
   84b94:	464e      	mov	r6, r9
   84b96:	e768      	b.n	84a6a <_vfiprintf_r+0x7de>
   84b98:	2a00      	cmp	r2, #0
   84b9a:	f040 80f7 	bne.w	84d8c <_vfiprintf_r+0xb00>
   84b9e:	9c05      	ldr	r4, [sp, #20]
   84ba0:	2301      	movs	r3, #1
   84ba2:	9720      	str	r7, [sp, #128]	; 0x80
   84ba4:	9421      	str	r4, [sp, #132]	; 0x84
   84ba6:	9415      	str	r4, [sp, #84]	; 0x54
   84ba8:	4622      	mov	r2, r4
   84baa:	9314      	str	r3, [sp, #80]	; 0x50
   84bac:	464e      	mov	r6, r9
   84bae:	3608      	adds	r6, #8
   84bb0:	e741      	b.n	84a36 <_vfiprintf_r+0x7aa>
   84bb2:	9d04      	ldr	r5, [sp, #16]
   84bb4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84bb8:	ebcb 0405 	rsb	r4, fp, r5
   84bbc:	2c00      	cmp	r4, #0
   84bbe:	f77f aef7 	ble.w	849b0 <_vfiprintf_r+0x724>
   84bc2:	2c10      	cmp	r4, #16
   84bc4:	4da6      	ldr	r5, [pc, #664]	; (84e60 <_vfiprintf_r+0xbd4>)
   84bc6:	f340 8170 	ble.w	84eaa <_vfiprintf_r+0xc1e>
   84bca:	4629      	mov	r1, r5
   84bcc:	f04f 0b10 	mov.w	fp, #16
   84bd0:	4625      	mov	r5, r4
   84bd2:	4664      	mov	r4, ip
   84bd4:	46b4      	mov	ip, r6
   84bd6:	460e      	mov	r6, r1
   84bd8:	e006      	b.n	84be8 <_vfiprintf_r+0x95c>
   84bda:	1c98      	adds	r0, r3, #2
   84bdc:	f10c 0c08 	add.w	ip, ip, #8
   84be0:	460b      	mov	r3, r1
   84be2:	3d10      	subs	r5, #16
   84be4:	2d10      	cmp	r5, #16
   84be6:	dd0f      	ble.n	84c08 <_vfiprintf_r+0x97c>
   84be8:	1c59      	adds	r1, r3, #1
   84bea:	3210      	adds	r2, #16
   84bec:	2907      	cmp	r1, #7
   84bee:	9215      	str	r2, [sp, #84]	; 0x54
   84bf0:	e88c 0840 	stmia.w	ip, {r6, fp}
   84bf4:	9114      	str	r1, [sp, #80]	; 0x50
   84bf6:	ddf0      	ble.n	84bda <_vfiprintf_r+0x94e>
   84bf8:	b9ba      	cbnz	r2, 84c2a <_vfiprintf_r+0x99e>
   84bfa:	3d10      	subs	r5, #16
   84bfc:	2d10      	cmp	r5, #16
   84bfe:	f04f 0001 	mov.w	r0, #1
   84c02:	4613      	mov	r3, r2
   84c04:	46cc      	mov	ip, r9
   84c06:	dcef      	bgt.n	84be8 <_vfiprintf_r+0x95c>
   84c08:	4633      	mov	r3, r6
   84c0a:	4666      	mov	r6, ip
   84c0c:	46a4      	mov	ip, r4
   84c0e:	462c      	mov	r4, r5
   84c10:	461d      	mov	r5, r3
   84c12:	4422      	add	r2, r4
   84c14:	2807      	cmp	r0, #7
   84c16:	9215      	str	r2, [sp, #84]	; 0x54
   84c18:	6035      	str	r5, [r6, #0]
   84c1a:	6074      	str	r4, [r6, #4]
   84c1c:	9014      	str	r0, [sp, #80]	; 0x50
   84c1e:	f300 80af 	bgt.w	84d80 <_vfiprintf_r+0xaf4>
   84c22:	3608      	adds	r6, #8
   84c24:	1c41      	adds	r1, r0, #1
   84c26:	4603      	mov	r3, r0
   84c28:	e6c2      	b.n	849b0 <_vfiprintf_r+0x724>
   84c2a:	9806      	ldr	r0, [sp, #24]
   84c2c:	9902      	ldr	r1, [sp, #8]
   84c2e:	aa13      	add	r2, sp, #76	; 0x4c
   84c30:	f7ff faf0 	bl	84214 <__sprint_r.part.0>
   84c34:	2800      	cmp	r0, #0
   84c36:	f47f af7c 	bne.w	84b32 <_vfiprintf_r+0x8a6>
   84c3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84c3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84c3e:	1c58      	adds	r0, r3, #1
   84c40:	46cc      	mov	ip, r9
   84c42:	e7ce      	b.n	84be2 <_vfiprintf_r+0x956>
   84c44:	2a00      	cmp	r2, #0
   84c46:	d179      	bne.n	84d3c <_vfiprintf_r+0xab0>
   84c48:	4619      	mov	r1, r3
   84c4a:	464e      	mov	r6, r9
   84c4c:	4613      	mov	r3, r2
   84c4e:	e69c      	b.n	8498a <_vfiprintf_r+0x6fe>
   84c50:	2a00      	cmp	r2, #0
   84c52:	f040 8084 	bne.w	84d5e <_vfiprintf_r+0xad2>
   84c56:	2101      	movs	r1, #1
   84c58:	4613      	mov	r3, r2
   84c5a:	464e      	mov	r6, r9
   84c5c:	e6a4      	b.n	849a8 <_vfiprintf_r+0x71c>
   84c5e:	464f      	mov	r7, r9
   84c60:	e448      	b.n	844f4 <_vfiprintf_r+0x268>
   84c62:	2d00      	cmp	r5, #0
   84c64:	bf08      	it	eq
   84c66:	2c0a      	cmpeq	r4, #10
   84c68:	d246      	bcs.n	84cf8 <_vfiprintf_r+0xa6c>
   84c6a:	3430      	adds	r4, #48	; 0x30
   84c6c:	af30      	add	r7, sp, #192	; 0xc0
   84c6e:	f807 4d41 	strb.w	r4, [r7, #-65]!
   84c72:	ebc7 0309 	rsb	r3, r7, r9
   84c76:	9305      	str	r3, [sp, #20]
   84c78:	e43c      	b.n	844f4 <_vfiprintf_r+0x268>
   84c7a:	2302      	movs	r3, #2
   84c7c:	e417      	b.n	844ae <_vfiprintf_r+0x222>
   84c7e:	2a00      	cmp	r2, #0
   84c80:	f040 80af 	bne.w	84de2 <_vfiprintf_r+0xb56>
   84c84:	4613      	mov	r3, r2
   84c86:	2101      	movs	r1, #1
   84c88:	464e      	mov	r6, r9
   84c8a:	e66d      	b.n	84968 <_vfiprintf_r+0x6dc>
   84c8c:	4644      	mov	r4, r8
   84c8e:	f7ff bb58 	b.w	84342 <_vfiprintf_r+0xb6>
   84c92:	9806      	ldr	r0, [sp, #24]
   84c94:	9902      	ldr	r1, [sp, #8]
   84c96:	aa13      	add	r2, sp, #76	; 0x4c
   84c98:	f7ff fabc 	bl	84214 <__sprint_r.part.0>
   84c9c:	2800      	cmp	r0, #0
   84c9e:	f47f af48 	bne.w	84b32 <_vfiprintf_r+0x8a6>
   84ca2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84ca4:	464e      	mov	r6, r9
   84ca6:	e6c6      	b.n	84a36 <_vfiprintf_r+0x7aa>
   84ca8:	9d08      	ldr	r5, [sp, #32]
   84caa:	682c      	ldr	r4, [r5, #0]
   84cac:	3504      	adds	r5, #4
   84cae:	9508      	str	r5, [sp, #32]
   84cb0:	2500      	movs	r5, #0
   84cb2:	f7ff bbfc 	b.w	844ae <_vfiprintf_r+0x222>
   84cb6:	9d08      	ldr	r5, [sp, #32]
   84cb8:	2301      	movs	r3, #1
   84cba:	682c      	ldr	r4, [r5, #0]
   84cbc:	3504      	adds	r5, #4
   84cbe:	9508      	str	r5, [sp, #32]
   84cc0:	2500      	movs	r5, #0
   84cc2:	f7ff bbf4 	b.w	844ae <_vfiprintf_r+0x222>
   84cc6:	9d08      	ldr	r5, [sp, #32]
   84cc8:	682c      	ldr	r4, [r5, #0]
   84cca:	3504      	adds	r5, #4
   84ccc:	9508      	str	r5, [sp, #32]
   84cce:	2500      	movs	r5, #0
   84cd0:	e525      	b.n	8471e <_vfiprintf_r+0x492>
   84cd2:	9d08      	ldr	r5, [sp, #32]
   84cd4:	682c      	ldr	r4, [r5, #0]
   84cd6:	3504      	adds	r5, #4
   84cd8:	9508      	str	r5, [sp, #32]
   84cda:	17e5      	asrs	r5, r4, #31
   84cdc:	4622      	mov	r2, r4
   84cde:	462b      	mov	r3, r5
   84ce0:	e48e      	b.n	84600 <_vfiprintf_r+0x374>
   84ce2:	9806      	ldr	r0, [sp, #24]
   84ce4:	9902      	ldr	r1, [sp, #8]
   84ce6:	aa13      	add	r2, sp, #76	; 0x4c
   84ce8:	f7ff fa94 	bl	84214 <__sprint_r.part.0>
   84cec:	2800      	cmp	r0, #0
   84cee:	f47f af20 	bne.w	84b32 <_vfiprintf_r+0x8a6>
   84cf2:	464e      	mov	r6, r9
   84cf4:	f7ff bb9a 	b.w	8442c <_vfiprintf_r+0x1a0>
   84cf8:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   84cfc:	9603      	str	r6, [sp, #12]
   84cfe:	465e      	mov	r6, fp
   84d00:	46e3      	mov	fp, ip
   84d02:	4620      	mov	r0, r4
   84d04:	4629      	mov	r1, r5
   84d06:	220a      	movs	r2, #10
   84d08:	2300      	movs	r3, #0
   84d0a:	f003 fdd1 	bl	888b0 <__aeabi_uldivmod>
   84d0e:	3230      	adds	r2, #48	; 0x30
   84d10:	7032      	strb	r2, [r6, #0]
   84d12:	4620      	mov	r0, r4
   84d14:	4629      	mov	r1, r5
   84d16:	220a      	movs	r2, #10
   84d18:	2300      	movs	r3, #0
   84d1a:	f003 fdc9 	bl	888b0 <__aeabi_uldivmod>
   84d1e:	4604      	mov	r4, r0
   84d20:	460d      	mov	r5, r1
   84d22:	ea54 0005 	orrs.w	r0, r4, r5
   84d26:	4637      	mov	r7, r6
   84d28:	f106 36ff 	add.w	r6, r6, #4294967295
   84d2c:	d1e9      	bne.n	84d02 <_vfiprintf_r+0xa76>
   84d2e:	ebc7 0309 	rsb	r3, r7, r9
   84d32:	46dc      	mov	ip, fp
   84d34:	9e03      	ldr	r6, [sp, #12]
   84d36:	9305      	str	r3, [sp, #20]
   84d38:	f7ff bbdc 	b.w	844f4 <_vfiprintf_r+0x268>
   84d3c:	9806      	ldr	r0, [sp, #24]
   84d3e:	9902      	ldr	r1, [sp, #8]
   84d40:	aa13      	add	r2, sp, #76	; 0x4c
   84d42:	f8cd c004 	str.w	ip, [sp, #4]
   84d46:	f7ff fa65 	bl	84214 <__sprint_r.part.0>
   84d4a:	f8dd c004 	ldr.w	ip, [sp, #4]
   84d4e:	2800      	cmp	r0, #0
   84d50:	f47f aeef 	bne.w	84b32 <_vfiprintf_r+0x8a6>
   84d54:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84d56:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84d58:	1c59      	adds	r1, r3, #1
   84d5a:	464e      	mov	r6, r9
   84d5c:	e615      	b.n	8498a <_vfiprintf_r+0x6fe>
   84d5e:	9806      	ldr	r0, [sp, #24]
   84d60:	9902      	ldr	r1, [sp, #8]
   84d62:	aa13      	add	r2, sp, #76	; 0x4c
   84d64:	f8cd c004 	str.w	ip, [sp, #4]
   84d68:	f7ff fa54 	bl	84214 <__sprint_r.part.0>
   84d6c:	f8dd c004 	ldr.w	ip, [sp, #4]
   84d70:	2800      	cmp	r0, #0
   84d72:	f47f aede 	bne.w	84b32 <_vfiprintf_r+0x8a6>
   84d76:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84d78:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84d7a:	1c59      	adds	r1, r3, #1
   84d7c:	464e      	mov	r6, r9
   84d7e:	e613      	b.n	849a8 <_vfiprintf_r+0x71c>
   84d80:	2a00      	cmp	r2, #0
   84d82:	d156      	bne.n	84e32 <_vfiprintf_r+0xba6>
   84d84:	2101      	movs	r1, #1
   84d86:	4613      	mov	r3, r2
   84d88:	464e      	mov	r6, r9
   84d8a:	e611      	b.n	849b0 <_vfiprintf_r+0x724>
   84d8c:	9806      	ldr	r0, [sp, #24]
   84d8e:	9902      	ldr	r1, [sp, #8]
   84d90:	aa13      	add	r2, sp, #76	; 0x4c
   84d92:	f7ff fa3f 	bl	84214 <__sprint_r.part.0>
   84d96:	2800      	cmp	r0, #0
   84d98:	f47f aecb 	bne.w	84b32 <_vfiprintf_r+0x8a6>
   84d9c:	9914      	ldr	r1, [sp, #80]	; 0x50
   84d9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84da0:	3101      	adds	r1, #1
   84da2:	464e      	mov	r6, r9
   84da4:	e639      	b.n	84a1a <_vfiprintf_r+0x78e>
   84da6:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   84daa:	4264      	negs	r4, r4
   84dac:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   84db0:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   84db4:	f8cd b01c 	str.w	fp, [sp, #28]
   84db8:	f8cd c014 	str.w	ip, [sp, #20]
   84dbc:	2301      	movs	r3, #1
   84dbe:	f7ff bb7e 	b.w	844be <_vfiprintf_r+0x232>
   84dc2:	f01a 0f10 	tst.w	sl, #16
   84dc6:	d11d      	bne.n	84e04 <_vfiprintf_r+0xb78>
   84dc8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   84dcc:	d058      	beq.n	84e80 <_vfiprintf_r+0xbf4>
   84dce:	9d08      	ldr	r5, [sp, #32]
   84dd0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   84dd4:	682b      	ldr	r3, [r5, #0]
   84dd6:	3504      	adds	r5, #4
   84dd8:	9508      	str	r5, [sp, #32]
   84dda:	f8a3 b000 	strh.w	fp, [r3]
   84dde:	f7ff ba88 	b.w	842f2 <_vfiprintf_r+0x66>
   84de2:	9806      	ldr	r0, [sp, #24]
   84de4:	9902      	ldr	r1, [sp, #8]
   84de6:	aa13      	add	r2, sp, #76	; 0x4c
   84de8:	f8cd c004 	str.w	ip, [sp, #4]
   84dec:	f7ff fa12 	bl	84214 <__sprint_r.part.0>
   84df0:	f8dd c004 	ldr.w	ip, [sp, #4]
   84df4:	2800      	cmp	r0, #0
   84df6:	f47f ae9c 	bne.w	84b32 <_vfiprintf_r+0x8a6>
   84dfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84dfc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84dfe:	1c59      	adds	r1, r3, #1
   84e00:	464e      	mov	r6, r9
   84e02:	e5b1      	b.n	84968 <_vfiprintf_r+0x6dc>
   84e04:	f8dd b020 	ldr.w	fp, [sp, #32]
   84e08:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84e0a:	f8db 3000 	ldr.w	r3, [fp]
   84e0e:	f10b 0b04 	add.w	fp, fp, #4
   84e12:	f8cd b020 	str.w	fp, [sp, #32]
   84e16:	601c      	str	r4, [r3, #0]
   84e18:	f7ff ba6b 	b.w	842f2 <_vfiprintf_r+0x66>
   84e1c:	9408      	str	r4, [sp, #32]
   84e1e:	f7fd ff27 	bl	82c70 <strlen>
   84e22:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   84e26:	9005      	str	r0, [sp, #20]
   84e28:	9407      	str	r4, [sp, #28]
   84e2a:	f04f 0c00 	mov.w	ip, #0
   84e2e:	f7ff bb61 	b.w	844f4 <_vfiprintf_r+0x268>
   84e32:	9806      	ldr	r0, [sp, #24]
   84e34:	9902      	ldr	r1, [sp, #8]
   84e36:	aa13      	add	r2, sp, #76	; 0x4c
   84e38:	f8cd c004 	str.w	ip, [sp, #4]
   84e3c:	f7ff f9ea 	bl	84214 <__sprint_r.part.0>
   84e40:	f8dd c004 	ldr.w	ip, [sp, #4]
   84e44:	2800      	cmp	r0, #0
   84e46:	f47f ae74 	bne.w	84b32 <_vfiprintf_r+0x8a6>
   84e4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84e4c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84e4e:	1c59      	adds	r1, r3, #1
   84e50:	464e      	mov	r6, r9
   84e52:	e5ad      	b.n	849b0 <_vfiprintf_r+0x724>
   84e54:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84e56:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84e58:	3301      	adds	r3, #1
   84e5a:	4d02      	ldr	r5, [pc, #8]	; (84e64 <_vfiprintf_r+0xbd8>)
   84e5c:	f7ff bb9a 	b.w	84594 <_vfiprintf_r+0x308>
   84e60:	0008906c 	.word	0x0008906c
   84e64:	0008907c 	.word	0x0008907c
   84e68:	f1bc 0f06 	cmp.w	ip, #6
   84e6c:	bf34      	ite	cc
   84e6e:	4663      	movcc	r3, ip
   84e70:	2306      	movcs	r3, #6
   84e72:	9408      	str	r4, [sp, #32]
   84e74:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   84e78:	9305      	str	r3, [sp, #20]
   84e7a:	9403      	str	r4, [sp, #12]
   84e7c:	4f16      	ldr	r7, [pc, #88]	; (84ed8 <_vfiprintf_r+0xc4c>)
   84e7e:	e472      	b.n	84766 <_vfiprintf_r+0x4da>
   84e80:	9c08      	ldr	r4, [sp, #32]
   84e82:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84e84:	6823      	ldr	r3, [r4, #0]
   84e86:	3404      	adds	r4, #4
   84e88:	9408      	str	r4, [sp, #32]
   84e8a:	601d      	str	r5, [r3, #0]
   84e8c:	f7ff ba31 	b.w	842f2 <_vfiprintf_r+0x66>
   84e90:	9814      	ldr	r0, [sp, #80]	; 0x50
   84e92:	4d12      	ldr	r5, [pc, #72]	; (84edc <_vfiprintf_r+0xc50>)
   84e94:	3001      	adds	r0, #1
   84e96:	e5fc      	b.n	84a92 <_vfiprintf_r+0x806>
   84e98:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   84e9c:	f8cd c014 	str.w	ip, [sp, #20]
   84ea0:	9507      	str	r5, [sp, #28]
   84ea2:	9408      	str	r4, [sp, #32]
   84ea4:	4684      	mov	ip, r0
   84ea6:	f7ff bb25 	b.w	844f4 <_vfiprintf_r+0x268>
   84eaa:	4608      	mov	r0, r1
   84eac:	e6b1      	b.n	84c12 <_vfiprintf_r+0x986>
   84eae:	46a0      	mov	r8, r4
   84eb0:	2500      	movs	r5, #0
   84eb2:	f7ff ba5a 	b.w	8436a <_vfiprintf_r+0xde>
   84eb6:	f8dd b020 	ldr.w	fp, [sp, #32]
   84eba:	f898 3001 	ldrb.w	r3, [r8, #1]
   84ebe:	f8db 5000 	ldr.w	r5, [fp]
   84ec2:	f10b 0204 	add.w	r2, fp, #4
   84ec6:	2d00      	cmp	r5, #0
   84ec8:	9208      	str	r2, [sp, #32]
   84eca:	46a0      	mov	r8, r4
   84ecc:	f6bf aa4b 	bge.w	84366 <_vfiprintf_r+0xda>
   84ed0:	f04f 35ff 	mov.w	r5, #4294967295
   84ed4:	f7ff ba47 	b.w	84366 <_vfiprintf_r+0xda>
   84ed8:	00089054 	.word	0x00089054
   84edc:	0008907c 	.word	0x0008907c

00084ee0 <__sbprintf>:
   84ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84ee4:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   84ee6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   84eea:	4688      	mov	r8, r1
   84eec:	9719      	str	r7, [sp, #100]	; 0x64
   84eee:	f8d8 701c 	ldr.w	r7, [r8, #28]
   84ef2:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   84ef6:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   84efa:	9707      	str	r7, [sp, #28]
   84efc:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   84f00:	ac1a      	add	r4, sp, #104	; 0x68
   84f02:	f44f 6580 	mov.w	r5, #1024	; 0x400
   84f06:	f02a 0a02 	bic.w	sl, sl, #2
   84f0a:	2600      	movs	r6, #0
   84f0c:	4669      	mov	r1, sp
   84f0e:	9400      	str	r4, [sp, #0]
   84f10:	9404      	str	r4, [sp, #16]
   84f12:	9502      	str	r5, [sp, #8]
   84f14:	9505      	str	r5, [sp, #20]
   84f16:	f8ad a00c 	strh.w	sl, [sp, #12]
   84f1a:	f8ad 900e 	strh.w	r9, [sp, #14]
   84f1e:	9709      	str	r7, [sp, #36]	; 0x24
   84f20:	9606      	str	r6, [sp, #24]
   84f22:	4605      	mov	r5, r0
   84f24:	f7ff f9b2 	bl	8428c <_vfiprintf_r>
   84f28:	1e04      	subs	r4, r0, #0
   84f2a:	db07      	blt.n	84f3c <__sbprintf+0x5c>
   84f2c:	4628      	mov	r0, r5
   84f2e:	4669      	mov	r1, sp
   84f30:	f001 f936 	bl	861a0 <_fflush_r>
   84f34:	42b0      	cmp	r0, r6
   84f36:	bf18      	it	ne
   84f38:	f04f 34ff 	movne.w	r4, #4294967295
   84f3c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   84f40:	065b      	lsls	r3, r3, #25
   84f42:	d505      	bpl.n	84f50 <__sbprintf+0x70>
   84f44:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   84f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84f4c:	f8a8 300c 	strh.w	r3, [r8, #12]
   84f50:	4620      	mov	r0, r4
   84f52:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   84f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84f5a:	bf00      	nop

00084f5c <__swbuf_r>:
   84f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84f5e:	460d      	mov	r5, r1
   84f60:	4614      	mov	r4, r2
   84f62:	4607      	mov	r7, r0
   84f64:	b110      	cbz	r0, 84f6c <__swbuf_r+0x10>
   84f66:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84f68:	2b00      	cmp	r3, #0
   84f6a:	d048      	beq.n	84ffe <__swbuf_r+0xa2>
   84f6c:	89a2      	ldrh	r2, [r4, #12]
   84f6e:	69a0      	ldr	r0, [r4, #24]
   84f70:	b293      	uxth	r3, r2
   84f72:	60a0      	str	r0, [r4, #8]
   84f74:	0718      	lsls	r0, r3, #28
   84f76:	d538      	bpl.n	84fea <__swbuf_r+0x8e>
   84f78:	6926      	ldr	r6, [r4, #16]
   84f7a:	2e00      	cmp	r6, #0
   84f7c:	d035      	beq.n	84fea <__swbuf_r+0x8e>
   84f7e:	0499      	lsls	r1, r3, #18
   84f80:	b2ed      	uxtb	r5, r5
   84f82:	d515      	bpl.n	84fb0 <__swbuf_r+0x54>
   84f84:	6823      	ldr	r3, [r4, #0]
   84f86:	6962      	ldr	r2, [r4, #20]
   84f88:	1b9e      	subs	r6, r3, r6
   84f8a:	4296      	cmp	r6, r2
   84f8c:	da1c      	bge.n	84fc8 <__swbuf_r+0x6c>
   84f8e:	3601      	adds	r6, #1
   84f90:	68a2      	ldr	r2, [r4, #8]
   84f92:	1c59      	adds	r1, r3, #1
   84f94:	3a01      	subs	r2, #1
   84f96:	60a2      	str	r2, [r4, #8]
   84f98:	6021      	str	r1, [r4, #0]
   84f9a:	701d      	strb	r5, [r3, #0]
   84f9c:	6963      	ldr	r3, [r4, #20]
   84f9e:	42b3      	cmp	r3, r6
   84fa0:	d01a      	beq.n	84fd8 <__swbuf_r+0x7c>
   84fa2:	89a3      	ldrh	r3, [r4, #12]
   84fa4:	07db      	lsls	r3, r3, #31
   84fa6:	d501      	bpl.n	84fac <__swbuf_r+0x50>
   84fa8:	2d0a      	cmp	r5, #10
   84faa:	d015      	beq.n	84fd8 <__swbuf_r+0x7c>
   84fac:	4628      	mov	r0, r5
   84fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84fb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84fb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84fb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   84fba:	6663      	str	r3, [r4, #100]	; 0x64
   84fbc:	6823      	ldr	r3, [r4, #0]
   84fbe:	81a2      	strh	r2, [r4, #12]
   84fc0:	6962      	ldr	r2, [r4, #20]
   84fc2:	1b9e      	subs	r6, r3, r6
   84fc4:	4296      	cmp	r6, r2
   84fc6:	dbe2      	blt.n	84f8e <__swbuf_r+0x32>
   84fc8:	4638      	mov	r0, r7
   84fca:	4621      	mov	r1, r4
   84fcc:	f001 f8e8 	bl	861a0 <_fflush_r>
   84fd0:	b940      	cbnz	r0, 84fe4 <__swbuf_r+0x88>
   84fd2:	6823      	ldr	r3, [r4, #0]
   84fd4:	2601      	movs	r6, #1
   84fd6:	e7db      	b.n	84f90 <__swbuf_r+0x34>
   84fd8:	4638      	mov	r0, r7
   84fda:	4621      	mov	r1, r4
   84fdc:	f001 f8e0 	bl	861a0 <_fflush_r>
   84fe0:	2800      	cmp	r0, #0
   84fe2:	d0e3      	beq.n	84fac <__swbuf_r+0x50>
   84fe4:	f04f 30ff 	mov.w	r0, #4294967295
   84fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84fea:	4638      	mov	r0, r7
   84fec:	4621      	mov	r1, r4
   84fee:	f000 f809 	bl	85004 <__swsetup_r>
   84ff2:	2800      	cmp	r0, #0
   84ff4:	d1f6      	bne.n	84fe4 <__swbuf_r+0x88>
   84ff6:	89a2      	ldrh	r2, [r4, #12]
   84ff8:	6926      	ldr	r6, [r4, #16]
   84ffa:	b293      	uxth	r3, r2
   84ffc:	e7bf      	b.n	84f7e <__swbuf_r+0x22>
   84ffe:	f001 f8eb 	bl	861d8 <__sinit>
   85002:	e7b3      	b.n	84f6c <__swbuf_r+0x10>

00085004 <__swsetup_r>:
   85004:	4b2f      	ldr	r3, [pc, #188]	; (850c4 <__swsetup_r+0xc0>)
   85006:	b570      	push	{r4, r5, r6, lr}
   85008:	4606      	mov	r6, r0
   8500a:	6818      	ldr	r0, [r3, #0]
   8500c:	460c      	mov	r4, r1
   8500e:	b110      	cbz	r0, 85016 <__swsetup_r+0x12>
   85010:	6b82      	ldr	r2, [r0, #56]	; 0x38
   85012:	2a00      	cmp	r2, #0
   85014:	d036      	beq.n	85084 <__swsetup_r+0x80>
   85016:	89a5      	ldrh	r5, [r4, #12]
   85018:	b2ab      	uxth	r3, r5
   8501a:	0719      	lsls	r1, r3, #28
   8501c:	d50c      	bpl.n	85038 <__swsetup_r+0x34>
   8501e:	6922      	ldr	r2, [r4, #16]
   85020:	b1aa      	cbz	r2, 8504e <__swsetup_r+0x4a>
   85022:	f013 0101 	ands.w	r1, r3, #1
   85026:	d01e      	beq.n	85066 <__swsetup_r+0x62>
   85028:	6963      	ldr	r3, [r4, #20]
   8502a:	2100      	movs	r1, #0
   8502c:	425b      	negs	r3, r3
   8502e:	61a3      	str	r3, [r4, #24]
   85030:	60a1      	str	r1, [r4, #8]
   85032:	b1f2      	cbz	r2, 85072 <__swsetup_r+0x6e>
   85034:	2000      	movs	r0, #0
   85036:	bd70      	pop	{r4, r5, r6, pc}
   85038:	06da      	lsls	r2, r3, #27
   8503a:	d53a      	bpl.n	850b2 <__swsetup_r+0xae>
   8503c:	075b      	lsls	r3, r3, #29
   8503e:	d424      	bmi.n	8508a <__swsetup_r+0x86>
   85040:	6922      	ldr	r2, [r4, #16]
   85042:	f045 0308 	orr.w	r3, r5, #8
   85046:	81a3      	strh	r3, [r4, #12]
   85048:	b29b      	uxth	r3, r3
   8504a:	2a00      	cmp	r2, #0
   8504c:	d1e9      	bne.n	85022 <__swsetup_r+0x1e>
   8504e:	f403 7120 	and.w	r1, r3, #640	; 0x280
   85052:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   85056:	d0e4      	beq.n	85022 <__swsetup_r+0x1e>
   85058:	4630      	mov	r0, r6
   8505a:	4621      	mov	r1, r4
   8505c:	f001 fc8a 	bl	86974 <__smakebuf_r>
   85060:	89a3      	ldrh	r3, [r4, #12]
   85062:	6922      	ldr	r2, [r4, #16]
   85064:	e7dd      	b.n	85022 <__swsetup_r+0x1e>
   85066:	0798      	lsls	r0, r3, #30
   85068:	bf58      	it	pl
   8506a:	6961      	ldrpl	r1, [r4, #20]
   8506c:	60a1      	str	r1, [r4, #8]
   8506e:	2a00      	cmp	r2, #0
   85070:	d1e0      	bne.n	85034 <__swsetup_r+0x30>
   85072:	89a3      	ldrh	r3, [r4, #12]
   85074:	061a      	lsls	r2, r3, #24
   85076:	d5dd      	bpl.n	85034 <__swsetup_r+0x30>
   85078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8507c:	81a3      	strh	r3, [r4, #12]
   8507e:	f04f 30ff 	mov.w	r0, #4294967295
   85082:	bd70      	pop	{r4, r5, r6, pc}
   85084:	f001 f8a8 	bl	861d8 <__sinit>
   85088:	e7c5      	b.n	85016 <__swsetup_r+0x12>
   8508a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8508c:	b149      	cbz	r1, 850a2 <__swsetup_r+0x9e>
   8508e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85092:	4299      	cmp	r1, r3
   85094:	d003      	beq.n	8509e <__swsetup_r+0x9a>
   85096:	4630      	mov	r0, r6
   85098:	f001 f9e2 	bl	86460 <_free_r>
   8509c:	89a5      	ldrh	r5, [r4, #12]
   8509e:	2300      	movs	r3, #0
   850a0:	6323      	str	r3, [r4, #48]	; 0x30
   850a2:	6922      	ldr	r2, [r4, #16]
   850a4:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   850a8:	2100      	movs	r1, #0
   850aa:	b2ad      	uxth	r5, r5
   850ac:	6022      	str	r2, [r4, #0]
   850ae:	6061      	str	r1, [r4, #4]
   850b0:	e7c7      	b.n	85042 <__swsetup_r+0x3e>
   850b2:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   850b6:	2309      	movs	r3, #9
   850b8:	6033      	str	r3, [r6, #0]
   850ba:	f04f 30ff 	mov.w	r0, #4294967295
   850be:	81a5      	strh	r5, [r4, #12]
   850c0:	bd70      	pop	{r4, r5, r6, pc}
   850c2:	bf00      	nop
   850c4:	200705b8 	.word	0x200705b8

000850c8 <register_fini>:
   850c8:	4b02      	ldr	r3, [pc, #8]	; (850d4 <register_fini+0xc>)
   850ca:	b113      	cbz	r3, 850d2 <register_fini+0xa>
   850cc:	4802      	ldr	r0, [pc, #8]	; (850d8 <register_fini+0x10>)
   850ce:	f000 b805 	b.w	850dc <atexit>
   850d2:	4770      	bx	lr
   850d4:	00000000 	.word	0x00000000
   850d8:	000862d5 	.word	0x000862d5

000850dc <atexit>:
   850dc:	4601      	mov	r1, r0
   850de:	2000      	movs	r0, #0
   850e0:	4602      	mov	r2, r0
   850e2:	4603      	mov	r3, r0
   850e4:	f002 be3e 	b.w	87d64 <__register_exitproc>

000850e8 <quorem>:
   850e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   850ec:	6903      	ldr	r3, [r0, #16]
   850ee:	690d      	ldr	r5, [r1, #16]
   850f0:	b083      	sub	sp, #12
   850f2:	429d      	cmp	r5, r3
   850f4:	4683      	mov	fp, r0
   850f6:	f300 808c 	bgt.w	85212 <quorem+0x12a>
   850fa:	3d01      	subs	r5, #1
   850fc:	f101 0414 	add.w	r4, r1, #20
   85100:	f100 0a14 	add.w	sl, r0, #20
   85104:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   85108:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
   8510c:	3201      	adds	r2, #1
   8510e:	fbb3 f8f2 	udiv	r8, r3, r2
   85112:	00aa      	lsls	r2, r5, #2
   85114:	4691      	mov	r9, r2
   85116:	9200      	str	r2, [sp, #0]
   85118:	4452      	add	r2, sl
   8511a:	44a1      	add	r9, r4
   8511c:	9201      	str	r2, [sp, #4]
   8511e:	f1b8 0f00 	cmp.w	r8, #0
   85122:	d03e      	beq.n	851a2 <quorem+0xba>
   85124:	2600      	movs	r6, #0
   85126:	4630      	mov	r0, r6
   85128:	4622      	mov	r2, r4
   8512a:	4653      	mov	r3, sl
   8512c:	468c      	mov	ip, r1
   8512e:	f852 7b04 	ldr.w	r7, [r2], #4
   85132:	6819      	ldr	r1, [r3, #0]
   85134:	fa1f fe87 	uxth.w	lr, r7
   85138:	0c3f      	lsrs	r7, r7, #16
   8513a:	fb0e 6e08 	mla	lr, lr, r8, r6
   8513e:	fb07 f608 	mul.w	r6, r7, r8
   85142:	eb06 461e 	add.w	r6, r6, lr, lsr #16
   85146:	fa1f fe8e 	uxth.w	lr, lr
   8514a:	ebce 0e00 	rsb	lr, lr, r0
   8514e:	b28f      	uxth	r7, r1
   85150:	b2b0      	uxth	r0, r6
   85152:	4477      	add	r7, lr
   85154:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
   85158:	eb00 4027 	add.w	r0, r0, r7, asr #16
   8515c:	b2bf      	uxth	r7, r7
   8515e:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
   85162:	4591      	cmp	r9, r2
   85164:	f843 7b04 	str.w	r7, [r3], #4
   85168:	ea4f 4020 	mov.w	r0, r0, asr #16
   8516c:	ea4f 4616 	mov.w	r6, r6, lsr #16
   85170:	d2dd      	bcs.n	8512e <quorem+0x46>
   85172:	9a00      	ldr	r2, [sp, #0]
   85174:	4661      	mov	r1, ip
   85176:	f85a 3002 	ldr.w	r3, [sl, r2]
   8517a:	b993      	cbnz	r3, 851a2 <quorem+0xba>
   8517c:	9a01      	ldr	r2, [sp, #4]
   8517e:	1f13      	subs	r3, r2, #4
   85180:	459a      	cmp	sl, r3
   85182:	d20c      	bcs.n	8519e <quorem+0xb6>
   85184:	f852 3c04 	ldr.w	r3, [r2, #-4]
   85188:	b94b      	cbnz	r3, 8519e <quorem+0xb6>
   8518a:	f1a2 0308 	sub.w	r3, r2, #8
   8518e:	e002      	b.n	85196 <quorem+0xae>
   85190:	681a      	ldr	r2, [r3, #0]
   85192:	3b04      	subs	r3, #4
   85194:	b91a      	cbnz	r2, 8519e <quorem+0xb6>
   85196:	459a      	cmp	sl, r3
   85198:	f105 35ff 	add.w	r5, r5, #4294967295
   8519c:	d3f8      	bcc.n	85190 <quorem+0xa8>
   8519e:	f8cb 5010 	str.w	r5, [fp, #16]
   851a2:	4658      	mov	r0, fp
   851a4:	f002 f9ca 	bl	8753c <__mcmp>
   851a8:	2800      	cmp	r0, #0
   851aa:	db2e      	blt.n	8520a <quorem+0x122>
   851ac:	f108 0801 	add.w	r8, r8, #1
   851b0:	4653      	mov	r3, sl
   851b2:	2200      	movs	r2, #0
   851b4:	f854 6b04 	ldr.w	r6, [r4], #4
   851b8:	6818      	ldr	r0, [r3, #0]
   851ba:	b2b1      	uxth	r1, r6
   851bc:	1a51      	subs	r1, r2, r1
   851be:	b287      	uxth	r7, r0
   851c0:	0c36      	lsrs	r6, r6, #16
   851c2:	4439      	add	r1, r7
   851c4:	ebc6 4010 	rsb	r0, r6, r0, lsr #16
   851c8:	eb00 4221 	add.w	r2, r0, r1, asr #16
   851cc:	b289      	uxth	r1, r1
   851ce:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   851d2:	45a1      	cmp	r9, r4
   851d4:	f843 1b04 	str.w	r1, [r3], #4
   851d8:	ea4f 4222 	mov.w	r2, r2, asr #16
   851dc:	d2ea      	bcs.n	851b4 <quorem+0xcc>
   851de:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   851e2:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
   851e6:	b982      	cbnz	r2, 8520a <quorem+0x122>
   851e8:	1f1a      	subs	r2, r3, #4
   851ea:	4592      	cmp	sl, r2
   851ec:	d20b      	bcs.n	85206 <quorem+0x11e>
   851ee:	f853 2c04 	ldr.w	r2, [r3, #-4]
   851f2:	b942      	cbnz	r2, 85206 <quorem+0x11e>
   851f4:	3b08      	subs	r3, #8
   851f6:	e002      	b.n	851fe <quorem+0x116>
   851f8:	681a      	ldr	r2, [r3, #0]
   851fa:	3b04      	subs	r3, #4
   851fc:	b91a      	cbnz	r2, 85206 <quorem+0x11e>
   851fe:	459a      	cmp	sl, r3
   85200:	f105 35ff 	add.w	r5, r5, #4294967295
   85204:	d3f8      	bcc.n	851f8 <quorem+0x110>
   85206:	f8cb 5010 	str.w	r5, [fp, #16]
   8520a:	4640      	mov	r0, r8
   8520c:	b003      	add	sp, #12
   8520e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85212:	2000      	movs	r0, #0
   85214:	b003      	add	sp, #12
   85216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8521a:	bf00      	nop
   8521c:	0000      	movs	r0, r0
	...

00085220 <_dtoa_r>:
   85220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85224:	6c01      	ldr	r1, [r0, #64]	; 0x40
   85226:	b09b      	sub	sp, #108	; 0x6c
   85228:	4604      	mov	r4, r0
   8522a:	4692      	mov	sl, r2
   8522c:	469b      	mov	fp, r3
   8522e:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   85230:	b141      	cbz	r1, 85244 <_dtoa_r+0x24>
   85232:	6c43      	ldr	r3, [r0, #68]	; 0x44
   85234:	2201      	movs	r2, #1
   85236:	409a      	lsls	r2, r3
   85238:	604b      	str	r3, [r1, #4]
   8523a:	608a      	str	r2, [r1, #8]
   8523c:	f001 ff88 	bl	87150 <_Bfree>
   85240:	2300      	movs	r3, #0
   85242:	6423      	str	r3, [r4, #64]	; 0x40
   85244:	f1bb 0f00 	cmp.w	fp, #0
   85248:	46d9      	mov	r9, fp
   8524a:	db33      	blt.n	852b4 <_dtoa_r+0x94>
   8524c:	2300      	movs	r3, #0
   8524e:	602b      	str	r3, [r5, #0]
   85250:	4ba5      	ldr	r3, [pc, #660]	; (854e8 <_dtoa_r+0x2c8>)
   85252:	461a      	mov	r2, r3
   85254:	ea09 0303 	and.w	r3, r9, r3
   85258:	4293      	cmp	r3, r2
   8525a:	d014      	beq.n	85286 <_dtoa_r+0x66>
   8525c:	4650      	mov	r0, sl
   8525e:	4659      	mov	r1, fp
   85260:	2200      	movs	r2, #0
   85262:	2300      	movs	r3, #0
   85264:	f003 faca 	bl	887fc <__aeabi_dcmpeq>
   85268:	4680      	mov	r8, r0
   8526a:	b348      	cbz	r0, 852c0 <_dtoa_r+0xa0>
   8526c:	9e26      	ldr	r6, [sp, #152]	; 0x98
   8526e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   85270:	2301      	movs	r3, #1
   85272:	6033      	str	r3, [r6, #0]
   85274:	2d00      	cmp	r5, #0
   85276:	f000 80ca 	beq.w	8540e <_dtoa_r+0x1ee>
   8527a:	489c      	ldr	r0, [pc, #624]	; (854ec <_dtoa_r+0x2cc>)
   8527c:	6028      	str	r0, [r5, #0]
   8527e:	3801      	subs	r0, #1
   85280:	b01b      	add	sp, #108	; 0x6c
   85282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85286:	9d26      	ldr	r5, [sp, #152]	; 0x98
   85288:	f242 730f 	movw	r3, #9999	; 0x270f
   8528c:	602b      	str	r3, [r5, #0]
   8528e:	f1ba 0f00 	cmp.w	sl, #0
   85292:	f000 80a5 	beq.w	853e0 <_dtoa_r+0x1c0>
   85296:	4896      	ldr	r0, [pc, #600]	; (854f0 <_dtoa_r+0x2d0>)
   85298:	9e28      	ldr	r6, [sp, #160]	; 0xa0
   8529a:	2e00      	cmp	r6, #0
   8529c:	d0f0      	beq.n	85280 <_dtoa_r+0x60>
   8529e:	78c3      	ldrb	r3, [r0, #3]
   852a0:	2b00      	cmp	r3, #0
   852a2:	f000 80b6 	beq.w	85412 <_dtoa_r+0x1f2>
   852a6:	f100 0308 	add.w	r3, r0, #8
   852aa:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   852ac:	602b      	str	r3, [r5, #0]
   852ae:	b01b      	add	sp, #108	; 0x6c
   852b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   852b4:	2301      	movs	r3, #1
   852b6:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
   852ba:	602b      	str	r3, [r5, #0]
   852bc:	46cb      	mov	fp, r9
   852be:	e7c7      	b.n	85250 <_dtoa_r+0x30>
   852c0:	aa19      	add	r2, sp, #100	; 0x64
   852c2:	ab18      	add	r3, sp, #96	; 0x60
   852c4:	e88d 000c 	stmia.w	sp, {r2, r3}
   852c8:	4620      	mov	r0, r4
   852ca:	4652      	mov	r2, sl
   852cc:	465b      	mov	r3, fp
   852ce:	f002 f9c5 	bl	8765c <__d2b>
   852d2:	ea5f 5519 	movs.w	r5, r9, lsr #20
   852d6:	900a      	str	r0, [sp, #40]	; 0x28
   852d8:	f040 808b 	bne.w	853f2 <_dtoa_r+0x1d2>
   852dc:	9f18      	ldr	r7, [sp, #96]	; 0x60
   852de:	9d19      	ldr	r5, [sp, #100]	; 0x64
   852e0:	f46f 6382 	mvn.w	r3, #1040	; 0x410
   852e4:	443d      	add	r5, r7
   852e6:	429d      	cmp	r5, r3
   852e8:	f2c0 8295 	blt.w	85816 <_dtoa_r+0x5f6>
   852ec:	331f      	adds	r3, #31
   852ee:	f205 4212 	addw	r2, r5, #1042	; 0x412
   852f2:	1b5b      	subs	r3, r3, r5
   852f4:	fa09 f303 	lsl.w	r3, r9, r3
   852f8:	fa2a f202 	lsr.w	r2, sl, r2
   852fc:	ea43 0002 	orr.w	r0, r3, r2
   85300:	f002 ff9e 	bl	88240 <__aeabi_ui2d>
   85304:	2601      	movs	r6, #1
   85306:	3d01      	subs	r5, #1
   85308:	46b8      	mov	r8, r7
   8530a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   8530e:	9616      	str	r6, [sp, #88]	; 0x58
   85310:	2200      	movs	r2, #0
   85312:	4b78      	ldr	r3, [pc, #480]	; (854f4 <_dtoa_r+0x2d4>)
   85314:	f002 fe56 	bl	87fc4 <__aeabi_dsub>
   85318:	a36d      	add	r3, pc, #436	; (adr r3, 854d0 <_dtoa_r+0x2b0>)
   8531a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8531e:	f003 f805 	bl	8832c <__aeabi_dmul>
   85322:	a36d      	add	r3, pc, #436	; (adr r3, 854d8 <_dtoa_r+0x2b8>)
   85324:	e9d3 2300 	ldrd	r2, r3, [r3]
   85328:	f002 fe4e 	bl	87fc8 <__adddf3>
   8532c:	4606      	mov	r6, r0
   8532e:	4628      	mov	r0, r5
   85330:	460f      	mov	r7, r1
   85332:	f002 ff95 	bl	88260 <__aeabi_i2d>
   85336:	a36a      	add	r3, pc, #424	; (adr r3, 854e0 <_dtoa_r+0x2c0>)
   85338:	e9d3 2300 	ldrd	r2, r3, [r3]
   8533c:	f002 fff6 	bl	8832c <__aeabi_dmul>
   85340:	4602      	mov	r2, r0
   85342:	460b      	mov	r3, r1
   85344:	4630      	mov	r0, r6
   85346:	4639      	mov	r1, r7
   85348:	f002 fe3e 	bl	87fc8 <__adddf3>
   8534c:	4606      	mov	r6, r0
   8534e:	460f      	mov	r7, r1
   85350:	f003 fa86 	bl	88860 <__aeabi_d2iz>
   85354:	4639      	mov	r1, r7
   85356:	9007      	str	r0, [sp, #28]
   85358:	2200      	movs	r2, #0
   8535a:	4630      	mov	r0, r6
   8535c:	2300      	movs	r3, #0
   8535e:	f003 fa57 	bl	88810 <__aeabi_dcmplt>
   85362:	2800      	cmp	r0, #0
   85364:	f040 8229 	bne.w	857ba <_dtoa_r+0x59a>
   85368:	9e07      	ldr	r6, [sp, #28]
   8536a:	2e16      	cmp	r6, #22
   8536c:	f200 8222 	bhi.w	857b4 <_dtoa_r+0x594>
   85370:	4961      	ldr	r1, [pc, #388]	; (854f8 <_dtoa_r+0x2d8>)
   85372:	4652      	mov	r2, sl
   85374:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
   85378:	465b      	mov	r3, fp
   8537a:	e9d1 0100 	ldrd	r0, r1, [r1]
   8537e:	f003 fa65 	bl	8884c <__aeabi_dcmpgt>
   85382:	2800      	cmp	r0, #0
   85384:	f000 824c 	beq.w	85820 <_dtoa_r+0x600>
   85388:	3e01      	subs	r6, #1
   8538a:	9607      	str	r6, [sp, #28]
   8538c:	2600      	movs	r6, #0
   8538e:	960e      	str	r6, [sp, #56]	; 0x38
   85390:	ebc5 0508 	rsb	r5, r5, r8
   85394:	3d01      	subs	r5, #1
   85396:	9506      	str	r5, [sp, #24]
   85398:	f100 8226 	bmi.w	857e8 <_dtoa_r+0x5c8>
   8539c:	2500      	movs	r5, #0
   8539e:	9508      	str	r5, [sp, #32]
   853a0:	9e07      	ldr	r6, [sp, #28]
   853a2:	2e00      	cmp	r6, #0
   853a4:	f2c0 8217 	blt.w	857d6 <_dtoa_r+0x5b6>
   853a8:	9d06      	ldr	r5, [sp, #24]
   853aa:	960d      	str	r6, [sp, #52]	; 0x34
   853ac:	4435      	add	r5, r6
   853ae:	2600      	movs	r6, #0
   853b0:	9506      	str	r5, [sp, #24]
   853b2:	960c      	str	r6, [sp, #48]	; 0x30
   853b4:	9d24      	ldr	r5, [sp, #144]	; 0x90
   853b6:	2d09      	cmp	r5, #9
   853b8:	d82d      	bhi.n	85416 <_dtoa_r+0x1f6>
   853ba:	2d05      	cmp	r5, #5
   853bc:	bfc4      	itt	gt
   853be:	3d04      	subgt	r5, #4
   853c0:	9524      	strgt	r5, [sp, #144]	; 0x90
   853c2:	9e24      	ldr	r6, [sp, #144]	; 0x90
   853c4:	bfc8      	it	gt
   853c6:	2500      	movgt	r5, #0
   853c8:	f1a6 0302 	sub.w	r3, r6, #2
   853cc:	bfd8      	it	le
   853ce:	2501      	movle	r5, #1
   853d0:	2b03      	cmp	r3, #3
   853d2:	d822      	bhi.n	8541a <_dtoa_r+0x1fa>
   853d4:	e8df f013 	tbh	[pc, r3, lsl #1]
   853d8:	029e03b7 	.word	0x029e03b7
   853dc:	049a03c0 	.word	0x049a03c0
   853e0:	4a46      	ldr	r2, [pc, #280]	; (854fc <_dtoa_r+0x2dc>)
   853e2:	4b43      	ldr	r3, [pc, #268]	; (854f0 <_dtoa_r+0x2d0>)
   853e4:	f3c9 0013 	ubfx	r0, r9, #0, #20
   853e8:	2800      	cmp	r0, #0
   853ea:	bf0c      	ite	eq
   853ec:	4610      	moveq	r0, r2
   853ee:	4618      	movne	r0, r3
   853f0:	e752      	b.n	85298 <_dtoa_r+0x78>
   853f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   853f6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   853fa:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   853fe:	4650      	mov	r0, sl
   85400:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   85404:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   85408:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   8540c:	e780      	b.n	85310 <_dtoa_r+0xf0>
   8540e:	483c      	ldr	r0, [pc, #240]	; (85500 <_dtoa_r+0x2e0>)
   85410:	e736      	b.n	85280 <_dtoa_r+0x60>
   85412:	1cc3      	adds	r3, r0, #3
   85414:	e749      	b.n	852aa <_dtoa_r+0x8a>
   85416:	2500      	movs	r5, #0
   85418:	9524      	str	r5, [sp, #144]	; 0x90
   8541a:	2500      	movs	r5, #0
   8541c:	6465      	str	r5, [r4, #68]	; 0x44
   8541e:	4629      	mov	r1, r5
   85420:	4620      	mov	r0, r4
   85422:	f001 fe6f 	bl	87104 <_Balloc>
   85426:	f04f 39ff 	mov.w	r9, #4294967295
   8542a:	2601      	movs	r6, #1
   8542c:	9009      	str	r0, [sp, #36]	; 0x24
   8542e:	9525      	str	r5, [sp, #148]	; 0x94
   85430:	6420      	str	r0, [r4, #64]	; 0x40
   85432:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   85436:	960b      	str	r6, [sp, #44]	; 0x2c
   85438:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8543a:	2b00      	cmp	r3, #0
   8543c:	f2c0 80d2 	blt.w	855e4 <_dtoa_r+0x3c4>
   85440:	9e07      	ldr	r6, [sp, #28]
   85442:	2e0e      	cmp	r6, #14
   85444:	f300 80ce 	bgt.w	855e4 <_dtoa_r+0x3c4>
   85448:	4b2b      	ldr	r3, [pc, #172]	; (854f8 <_dtoa_r+0x2d8>)
   8544a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   8544e:	e9d3 0100 	ldrd	r0, r1, [r3]
   85452:	e9cd 0104 	strd	r0, r1, [sp, #16]
   85456:	9925      	ldr	r1, [sp, #148]	; 0x94
   85458:	2900      	cmp	r1, #0
   8545a:	f2c0 8380 	blt.w	85b5e <_dtoa_r+0x93e>
   8545e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   85462:	4659      	mov	r1, fp
   85464:	4650      	mov	r0, sl
   85466:	f003 f88b 	bl	88580 <__aeabi_ddiv>
   8546a:	f003 f9f9 	bl	88860 <__aeabi_d2iz>
   8546e:	4605      	mov	r5, r0
   85470:	f002 fef6 	bl	88260 <__aeabi_i2d>
   85474:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   85478:	f002 ff58 	bl	8832c <__aeabi_dmul>
   8547c:	4602      	mov	r2, r0
   8547e:	460b      	mov	r3, r1
   85480:	4650      	mov	r0, sl
   85482:	4659      	mov	r1, fp
   85484:	f002 fd9e 	bl	87fc4 <__aeabi_dsub>
   85488:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8548a:	f105 0330 	add.w	r3, r5, #48	; 0x30
   8548e:	f1b9 0f01 	cmp.w	r9, #1
   85492:	4606      	mov	r6, r0
   85494:	460f      	mov	r7, r1
   85496:	7013      	strb	r3, [r2, #0]
   85498:	f102 0b01 	add.w	fp, r2, #1
   8549c:	d064      	beq.n	85568 <_dtoa_r+0x348>
   8549e:	2200      	movs	r2, #0
   854a0:	4b18      	ldr	r3, [pc, #96]	; (85504 <_dtoa_r+0x2e4>)
   854a2:	f002 ff43 	bl	8832c <__aeabi_dmul>
   854a6:	2200      	movs	r2, #0
   854a8:	2300      	movs	r3, #0
   854aa:	4606      	mov	r6, r0
   854ac:	460f      	mov	r7, r1
   854ae:	f003 f9a5 	bl	887fc <__aeabi_dcmpeq>
   854b2:	2800      	cmp	r0, #0
   854b4:	f040 8081 	bne.w	855ba <_dtoa_r+0x39a>
   854b8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   854bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
   854be:	44c8      	add	r8, r9
   854c0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   854c4:	f105 0902 	add.w	r9, r5, #2
   854c8:	9403      	str	r4, [sp, #12]
   854ca:	e028      	b.n	8551e <_dtoa_r+0x2fe>
   854cc:	f3af 8000 	nop.w
   854d0:	636f4361 	.word	0x636f4361
   854d4:	3fd287a7 	.word	0x3fd287a7
   854d8:	8b60c8b3 	.word	0x8b60c8b3
   854dc:	3fc68a28 	.word	0x3fc68a28
   854e0:	509f79fb 	.word	0x509f79fb
   854e4:	3fd34413 	.word	0x3fd34413
   854e8:	7ff00000 	.word	0x7ff00000
   854ec:	00088f39 	.word	0x00088f39
   854f0:	00089098 	.word	0x00089098
   854f4:	3ff80000 	.word	0x3ff80000
   854f8:	000890a8 	.word	0x000890a8
   854fc:	0008908c 	.word	0x0008908c
   85500:	00088f38 	.word	0x00088f38
   85504:	40240000 	.word	0x40240000
   85508:	f002 ff10 	bl	8832c <__aeabi_dmul>
   8550c:	2200      	movs	r2, #0
   8550e:	2300      	movs	r3, #0
   85510:	4606      	mov	r6, r0
   85512:	460f      	mov	r7, r1
   85514:	f003 f972 	bl	887fc <__aeabi_dcmpeq>
   85518:	2800      	cmp	r0, #0
   8551a:	f040 83c1 	bne.w	85ca0 <_dtoa_r+0xa80>
   8551e:	4652      	mov	r2, sl
   85520:	465b      	mov	r3, fp
   85522:	4630      	mov	r0, r6
   85524:	4639      	mov	r1, r7
   85526:	f003 f82b 	bl	88580 <__aeabi_ddiv>
   8552a:	f003 f999 	bl	88860 <__aeabi_d2iz>
   8552e:	4605      	mov	r5, r0
   85530:	f002 fe96 	bl	88260 <__aeabi_i2d>
   85534:	4652      	mov	r2, sl
   85536:	465b      	mov	r3, fp
   85538:	f002 fef8 	bl	8832c <__aeabi_dmul>
   8553c:	4602      	mov	r2, r0
   8553e:	460b      	mov	r3, r1
   85540:	4630      	mov	r0, r6
   85542:	4639      	mov	r1, r7
   85544:	f002 fd3e 	bl	87fc4 <__aeabi_dsub>
   85548:	f105 0e30 	add.w	lr, r5, #48	; 0x30
   8554c:	45c1      	cmp	r9, r8
   8554e:	f809 ec01 	strb.w	lr, [r9, #-1]
   85552:	464c      	mov	r4, r9
   85554:	4606      	mov	r6, r0
   85556:	460f      	mov	r7, r1
   85558:	f04f 0200 	mov.w	r2, #0
   8555c:	4ba7      	ldr	r3, [pc, #668]	; (857fc <_dtoa_r+0x5dc>)
   8555e:	f109 0901 	add.w	r9, r9, #1
   85562:	d1d1      	bne.n	85508 <_dtoa_r+0x2e8>
   85564:	46a3      	mov	fp, r4
   85566:	9c03      	ldr	r4, [sp, #12]
   85568:	4632      	mov	r2, r6
   8556a:	463b      	mov	r3, r7
   8556c:	4630      	mov	r0, r6
   8556e:	4639      	mov	r1, r7
   85570:	f002 fd2a 	bl	87fc8 <__adddf3>
   85574:	4606      	mov	r6, r0
   85576:	460f      	mov	r7, r1
   85578:	4632      	mov	r2, r6
   8557a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8557e:	463b      	mov	r3, r7
   85580:	f003 f946 	bl	88810 <__aeabi_dcmplt>
   85584:	b940      	cbnz	r0, 85598 <_dtoa_r+0x378>
   85586:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8558a:	4632      	mov	r2, r6
   8558c:	463b      	mov	r3, r7
   8558e:	f003 f935 	bl	887fc <__aeabi_dcmpeq>
   85592:	b190      	cbz	r0, 855ba <_dtoa_r+0x39a>
   85594:	07eb      	lsls	r3, r5, #31
   85596:	d510      	bpl.n	855ba <_dtoa_r+0x39a>
   85598:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
   8559c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8559e:	e005      	b.n	855ac <_dtoa_r+0x38c>
   855a0:	429a      	cmp	r2, r3
   855a2:	f000 8429 	beq.w	85df8 <_dtoa_r+0xbd8>
   855a6:	f813 5c01 	ldrb.w	r5, [r3, #-1]
   855aa:	469b      	mov	fp, r3
   855ac:	2d39      	cmp	r5, #57	; 0x39
   855ae:	f10b 33ff 	add.w	r3, fp, #4294967295
   855b2:	d0f5      	beq.n	855a0 <_dtoa_r+0x380>
   855b4:	1c6a      	adds	r2, r5, #1
   855b6:	b2d2      	uxtb	r2, r2
   855b8:	701a      	strb	r2, [r3, #0]
   855ba:	4620      	mov	r0, r4
   855bc:	990a      	ldr	r1, [sp, #40]	; 0x28
   855be:	f001 fdc7 	bl	87150 <_Bfree>
   855c2:	9e07      	ldr	r6, [sp, #28]
   855c4:	9d26      	ldr	r5, [sp, #152]	; 0x98
   855c6:	1c73      	adds	r3, r6, #1
   855c8:	9e28      	ldr	r6, [sp, #160]	; 0xa0
   855ca:	2200      	movs	r2, #0
   855cc:	f88b 2000 	strb.w	r2, [fp]
   855d0:	602b      	str	r3, [r5, #0]
   855d2:	2e00      	cmp	r6, #0
   855d4:	f000 8325 	beq.w	85c22 <_dtoa_r+0xa02>
   855d8:	9809      	ldr	r0, [sp, #36]	; 0x24
   855da:	f8c6 b000 	str.w	fp, [r6]
   855de:	b01b      	add	sp, #108	; 0x6c
   855e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   855e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   855e6:	2d00      	cmp	r5, #0
   855e8:	f000 8103 	beq.w	857f2 <_dtoa_r+0x5d2>
   855ec:	9e24      	ldr	r6, [sp, #144]	; 0x90
   855ee:	2e01      	cmp	r6, #1
   855f0:	f340 82dc 	ble.w	85bac <_dtoa_r+0x98c>
   855f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   855f6:	f109 37ff 	add.w	r7, r9, #4294967295
   855fa:	42be      	cmp	r6, r7
   855fc:	f2c0 8389 	blt.w	85d12 <_dtoa_r+0xaf2>
   85600:	1bf7      	subs	r7, r6, r7
   85602:	f1b9 0f00 	cmp.w	r9, #0
   85606:	f2c0 8487 	blt.w	85f18 <_dtoa_r+0xcf8>
   8560a:	9d08      	ldr	r5, [sp, #32]
   8560c:	464b      	mov	r3, r9
   8560e:	9e08      	ldr	r6, [sp, #32]
   85610:	4620      	mov	r0, r4
   85612:	441e      	add	r6, r3
   85614:	9608      	str	r6, [sp, #32]
   85616:	9e06      	ldr	r6, [sp, #24]
   85618:	2101      	movs	r1, #1
   8561a:	441e      	add	r6, r3
   8561c:	9606      	str	r6, [sp, #24]
   8561e:	f001 fe39 	bl	87294 <__i2b>
   85622:	4606      	mov	r6, r0
   85624:	b165      	cbz	r5, 85640 <_dtoa_r+0x420>
   85626:	9806      	ldr	r0, [sp, #24]
   85628:	2800      	cmp	r0, #0
   8562a:	dd09      	ble.n	85640 <_dtoa_r+0x420>
   8562c:	4603      	mov	r3, r0
   8562e:	9908      	ldr	r1, [sp, #32]
   85630:	42ab      	cmp	r3, r5
   85632:	bfa8      	it	ge
   85634:	462b      	movge	r3, r5
   85636:	1ac9      	subs	r1, r1, r3
   85638:	1ac0      	subs	r0, r0, r3
   8563a:	9108      	str	r1, [sp, #32]
   8563c:	1aed      	subs	r5, r5, r3
   8563e:	9006      	str	r0, [sp, #24]
   85640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85642:	2a00      	cmp	r2, #0
   85644:	dd1d      	ble.n	85682 <_dtoa_r+0x462>
   85646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85648:	2b00      	cmp	r3, #0
   8564a:	f000 8358 	beq.w	85cfe <_dtoa_r+0xade>
   8564e:	2f00      	cmp	r7, #0
   85650:	dd11      	ble.n	85676 <_dtoa_r+0x456>
   85652:	4631      	mov	r1, r6
   85654:	463a      	mov	r2, r7
   85656:	4620      	mov	r0, r4
   85658:	f001 fec4 	bl	873e4 <__pow5mult>
   8565c:	4606      	mov	r6, r0
   8565e:	4631      	mov	r1, r6
   85660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85662:	4620      	mov	r0, r4
   85664:	f001 fe20 	bl	872a8 <__multiply>
   85668:	990a      	ldr	r1, [sp, #40]	; 0x28
   8566a:	4680      	mov	r8, r0
   8566c:	4620      	mov	r0, r4
   8566e:	f001 fd6f 	bl	87150 <_Bfree>
   85672:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   85676:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
   8567a:	ebbe 0207 	subs.w	r2, lr, r7
   8567e:	f040 828f 	bne.w	85ba0 <_dtoa_r+0x980>
   85682:	4620      	mov	r0, r4
   85684:	2101      	movs	r1, #1
   85686:	f001 fe05 	bl	87294 <__i2b>
   8568a:	4680      	mov	r8, r0
   8568c:	980d      	ldr	r0, [sp, #52]	; 0x34
   8568e:	2800      	cmp	r0, #0
   85690:	dd05      	ble.n	8569e <_dtoa_r+0x47e>
   85692:	4641      	mov	r1, r8
   85694:	4620      	mov	r0, r4
   85696:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85698:	f001 fea4 	bl	873e4 <__pow5mult>
   8569c:	4680      	mov	r8, r0
   8569e:	9924      	ldr	r1, [sp, #144]	; 0x90
   856a0:	2901      	cmp	r1, #1
   856a2:	f340 82c1 	ble.w	85c28 <_dtoa_r+0xa08>
   856a6:	2700      	movs	r7, #0
   856a8:	980d      	ldr	r0, [sp, #52]	; 0x34
   856aa:	2800      	cmp	r0, #0
   856ac:	f040 82af 	bne.w	85c0e <_dtoa_r+0x9ee>
   856b0:	2001      	movs	r0, #1
   856b2:	9b06      	ldr	r3, [sp, #24]
   856b4:	4403      	add	r3, r0
   856b6:	f013 031f 	ands.w	r3, r3, #31
   856ba:	f000 80a1 	beq.w	85800 <_dtoa_r+0x5e0>
   856be:	f1c3 0220 	rsb	r2, r3, #32
   856c2:	2a04      	cmp	r2, #4
   856c4:	f340 84b7 	ble.w	86036 <_dtoa_r+0xe16>
   856c8:	9908      	ldr	r1, [sp, #32]
   856ca:	9a06      	ldr	r2, [sp, #24]
   856cc:	f1c3 031c 	rsb	r3, r3, #28
   856d0:	4419      	add	r1, r3
   856d2:	441a      	add	r2, r3
   856d4:	9108      	str	r1, [sp, #32]
   856d6:	441d      	add	r5, r3
   856d8:	9206      	str	r2, [sp, #24]
   856da:	9908      	ldr	r1, [sp, #32]
   856dc:	2900      	cmp	r1, #0
   856de:	dd05      	ble.n	856ec <_dtoa_r+0x4cc>
   856e0:	990a      	ldr	r1, [sp, #40]	; 0x28
   856e2:	9a08      	ldr	r2, [sp, #32]
   856e4:	4620      	mov	r0, r4
   856e6:	f001 fecb 	bl	87480 <__lshift>
   856ea:	900a      	str	r0, [sp, #40]	; 0x28
   856ec:	9a06      	ldr	r2, [sp, #24]
   856ee:	2a00      	cmp	r2, #0
   856f0:	dd04      	ble.n	856fc <_dtoa_r+0x4dc>
   856f2:	4641      	mov	r1, r8
   856f4:	4620      	mov	r0, r4
   856f6:	f001 fec3 	bl	87480 <__lshift>
   856fa:	4680      	mov	r8, r0
   856fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   856fe:	2b00      	cmp	r3, #0
   85700:	f040 826a 	bne.w	85bd8 <_dtoa_r+0x9b8>
   85704:	f1b9 0f00 	cmp.w	r9, #0
   85708:	f340 82a6 	ble.w	85c58 <_dtoa_r+0xa38>
   8570c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   8570e:	2800      	cmp	r0, #0
   85710:	f040 8088 	bne.w	85824 <_dtoa_r+0x604>
   85714:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85716:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   85718:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   8571c:	e006      	b.n	8572c <_dtoa_r+0x50c>
   8571e:	4639      	mov	r1, r7
   85720:	4620      	mov	r0, r4
   85722:	220a      	movs	r2, #10
   85724:	2300      	movs	r3, #0
   85726:	f001 fd1d 	bl	87164 <__multadd>
   8572a:	4607      	mov	r7, r0
   8572c:	4638      	mov	r0, r7
   8572e:	4641      	mov	r1, r8
   85730:	f7ff fcda 	bl	850e8 <quorem>
   85734:	3030      	adds	r0, #48	; 0x30
   85736:	f80b 0005 	strb.w	r0, [fp, r5]
   8573a:	3501      	adds	r5, #1
   8573c:	45a9      	cmp	r9, r5
   8573e:	dcee      	bgt.n	8571e <_dtoa_r+0x4fe>
   85740:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   85744:	4682      	mov	sl, r0
   85746:	970a      	str	r7, [sp, #40]	; 0x28
   85748:	f1b9 0f01 	cmp.w	r9, #1
   8574c:	bfac      	ite	ge
   8574e:	44cb      	addge	fp, r9
   85750:	f10b 0b01 	addlt.w	fp, fp, #1
   85754:	2500      	movs	r5, #0
   85756:	990a      	ldr	r1, [sp, #40]	; 0x28
   85758:	2201      	movs	r2, #1
   8575a:	4620      	mov	r0, r4
   8575c:	f001 fe90 	bl	87480 <__lshift>
   85760:	4641      	mov	r1, r8
   85762:	900a      	str	r0, [sp, #40]	; 0x28
   85764:	f001 feea 	bl	8753c <__mcmp>
   85768:	2800      	cmp	r0, #0
   8576a:	f340 8309 	ble.w	85d80 <_dtoa_r+0xb60>
   8576e:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   85772:	9909      	ldr	r1, [sp, #36]	; 0x24
   85774:	e005      	b.n	85782 <_dtoa_r+0x562>
   85776:	4299      	cmp	r1, r3
   85778:	f000 828b 	beq.w	85c92 <_dtoa_r+0xa72>
   8577c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   85780:	469b      	mov	fp, r3
   85782:	2a39      	cmp	r2, #57	; 0x39
   85784:	f10b 33ff 	add.w	r3, fp, #4294967295
   85788:	d0f5      	beq.n	85776 <_dtoa_r+0x556>
   8578a:	3201      	adds	r2, #1
   8578c:	701a      	strb	r2, [r3, #0]
   8578e:	4641      	mov	r1, r8
   85790:	4620      	mov	r0, r4
   85792:	f001 fcdd 	bl	87150 <_Bfree>
   85796:	2e00      	cmp	r6, #0
   85798:	f43f af0f 	beq.w	855ba <_dtoa_r+0x39a>
   8579c:	b12d      	cbz	r5, 857aa <_dtoa_r+0x58a>
   8579e:	42b5      	cmp	r5, r6
   857a0:	d003      	beq.n	857aa <_dtoa_r+0x58a>
   857a2:	4629      	mov	r1, r5
   857a4:	4620      	mov	r0, r4
   857a6:	f001 fcd3 	bl	87150 <_Bfree>
   857aa:	4631      	mov	r1, r6
   857ac:	4620      	mov	r0, r4
   857ae:	f001 fccf 	bl	87150 <_Bfree>
   857b2:	e702      	b.n	855ba <_dtoa_r+0x39a>
   857b4:	2601      	movs	r6, #1
   857b6:	960e      	str	r6, [sp, #56]	; 0x38
   857b8:	e5ea      	b.n	85390 <_dtoa_r+0x170>
   857ba:	9807      	ldr	r0, [sp, #28]
   857bc:	f002 fd50 	bl	88260 <__aeabi_i2d>
   857c0:	4632      	mov	r2, r6
   857c2:	463b      	mov	r3, r7
   857c4:	f003 f81a 	bl	887fc <__aeabi_dcmpeq>
   857c8:	2800      	cmp	r0, #0
   857ca:	f47f adcd 	bne.w	85368 <_dtoa_r+0x148>
   857ce:	9e07      	ldr	r6, [sp, #28]
   857d0:	3e01      	subs	r6, #1
   857d2:	9607      	str	r6, [sp, #28]
   857d4:	e5c8      	b.n	85368 <_dtoa_r+0x148>
   857d6:	9e07      	ldr	r6, [sp, #28]
   857d8:	9d08      	ldr	r5, [sp, #32]
   857da:	1bad      	subs	r5, r5, r6
   857dc:	9508      	str	r5, [sp, #32]
   857de:	4275      	negs	r5, r6
   857e0:	2600      	movs	r6, #0
   857e2:	950c      	str	r5, [sp, #48]	; 0x30
   857e4:	960d      	str	r6, [sp, #52]	; 0x34
   857e6:	e5e5      	b.n	853b4 <_dtoa_r+0x194>
   857e8:	426d      	negs	r5, r5
   857ea:	2600      	movs	r6, #0
   857ec:	9508      	str	r5, [sp, #32]
   857ee:	9606      	str	r6, [sp, #24]
   857f0:	e5d6      	b.n	853a0 <_dtoa_r+0x180>
   857f2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   857f4:	9d08      	ldr	r5, [sp, #32]
   857f6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   857f8:	e714      	b.n	85624 <_dtoa_r+0x404>
   857fa:	bf00      	nop
   857fc:	40240000 	.word	0x40240000
   85800:	231c      	movs	r3, #28
   85802:	f8dd e020 	ldr.w	lr, [sp, #32]
   85806:	9806      	ldr	r0, [sp, #24]
   85808:	449e      	add	lr, r3
   8580a:	4418      	add	r0, r3
   8580c:	f8cd e020 	str.w	lr, [sp, #32]
   85810:	441d      	add	r5, r3
   85812:	9006      	str	r0, [sp, #24]
   85814:	e761      	b.n	856da <_dtoa_r+0x4ba>
   85816:	48a7      	ldr	r0, [pc, #668]	; (85ab4 <_dtoa_r+0x894>)
   85818:	1b40      	subs	r0, r0, r5
   8581a:	fa0a f000 	lsl.w	r0, sl, r0
   8581e:	e56f      	b.n	85300 <_dtoa_r+0xe0>
   85820:	900e      	str	r0, [sp, #56]	; 0x38
   85822:	e5b5      	b.n	85390 <_dtoa_r+0x170>
   85824:	2d00      	cmp	r5, #0
   85826:	dd05      	ble.n	85834 <_dtoa_r+0x614>
   85828:	4631      	mov	r1, r6
   8582a:	462a      	mov	r2, r5
   8582c:	4620      	mov	r0, r4
   8582e:	f001 fe27 	bl	87480 <__lshift>
   85832:	4606      	mov	r6, r0
   85834:	2f00      	cmp	r7, #0
   85836:	f040 82e9 	bne.w	85e0c <_dtoa_r+0xbec>
   8583a:	4637      	mov	r7, r6
   8583c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8583e:	9809      	ldr	r0, [sp, #36]	; 0x24
   85840:	444d      	add	r5, r9
   85842:	9508      	str	r5, [sp, #32]
   85844:	f00a 0501 	and.w	r5, sl, #1
   85848:	950b      	str	r5, [sp, #44]	; 0x2c
   8584a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8584e:	1c45      	adds	r5, r0, #1
   85850:	e00a      	b.n	85868 <_dtoa_r+0x648>
   85852:	f001 fc87 	bl	87164 <__multadd>
   85856:	4639      	mov	r1, r7
   85858:	4606      	mov	r6, r0
   8585a:	220a      	movs	r2, #10
   8585c:	4620      	mov	r0, r4
   8585e:	2300      	movs	r3, #0
   85860:	f001 fc80 	bl	87164 <__multadd>
   85864:	4607      	mov	r7, r0
   85866:	3501      	adds	r5, #1
   85868:	4641      	mov	r1, r8
   8586a:	4648      	mov	r0, r9
   8586c:	f7ff fc3c 	bl	850e8 <quorem>
   85870:	4631      	mov	r1, r6
   85872:	4683      	mov	fp, r0
   85874:	4648      	mov	r0, r9
   85876:	f001 fe61 	bl	8753c <__mcmp>
   8587a:	4641      	mov	r1, r8
   8587c:	9003      	str	r0, [sp, #12]
   8587e:	463a      	mov	r2, r7
   85880:	4620      	mov	r0, r4
   85882:	f001 fe7f 	bl	87584 <__mdiff>
   85886:	68c2      	ldr	r2, [r0, #12]
   85888:	1e69      	subs	r1, r5, #1
   8588a:	4603      	mov	r3, r0
   8588c:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
   85890:	9106      	str	r1, [sp, #24]
   85892:	2a00      	cmp	r2, #0
   85894:	f040 8193 	bne.w	85bbe <_dtoa_r+0x99e>
   85898:	4619      	mov	r1, r3
   8589a:	4648      	mov	r0, r9
   8589c:	9302      	str	r3, [sp, #8]
   8589e:	f001 fe4d 	bl	8753c <__mcmp>
   858a2:	9b02      	ldr	r3, [sp, #8]
   858a4:	4602      	mov	r2, r0
   858a6:	4619      	mov	r1, r3
   858a8:	4620      	mov	r0, r4
   858aa:	9202      	str	r2, [sp, #8]
   858ac:	f001 fc50 	bl	87150 <_Bfree>
   858b0:	9a02      	ldr	r2, [sp, #8]
   858b2:	b92a      	cbnz	r2, 858c0 <_dtoa_r+0x6a0>
   858b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   858b6:	b91b      	cbnz	r3, 858c0 <_dtoa_r+0x6a0>
   858b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   858ba:	2800      	cmp	r0, #0
   858bc:	f000 8393 	beq.w	85fe6 <_dtoa_r+0xdc6>
   858c0:	9b03      	ldr	r3, [sp, #12]
   858c2:	2b00      	cmp	r3, #0
   858c4:	f2c0 8234 	blt.w	85d30 <_dtoa_r+0xb10>
   858c8:	d105      	bne.n	858d6 <_dtoa_r+0x6b6>
   858ca:	9824      	ldr	r0, [sp, #144]	; 0x90
   858cc:	b918      	cbnz	r0, 858d6 <_dtoa_r+0x6b6>
   858ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
   858d0:	2900      	cmp	r1, #0
   858d2:	f000 822d 	beq.w	85d30 <_dtoa_r+0xb10>
   858d6:	2a00      	cmp	r2, #0
   858d8:	f300 82ac 	bgt.w	85e34 <_dtoa_r+0xc14>
   858dc:	f8dd e020 	ldr.w	lr, [sp, #32]
   858e0:	f805 ac01 	strb.w	sl, [r5, #-1]
   858e4:	4575      	cmp	r5, lr
   858e6:	46ab      	mov	fp, r5
   858e8:	f000 82b4 	beq.w	85e54 <_dtoa_r+0xc34>
   858ec:	4649      	mov	r1, r9
   858ee:	220a      	movs	r2, #10
   858f0:	2300      	movs	r3, #0
   858f2:	4620      	mov	r0, r4
   858f4:	f001 fc36 	bl	87164 <__multadd>
   858f8:	42be      	cmp	r6, r7
   858fa:	4681      	mov	r9, r0
   858fc:	4631      	mov	r1, r6
   858fe:	4620      	mov	r0, r4
   85900:	f04f 020a 	mov.w	r2, #10
   85904:	f04f 0300 	mov.w	r3, #0
   85908:	d1a3      	bne.n	85852 <_dtoa_r+0x632>
   8590a:	f001 fc2b 	bl	87164 <__multadd>
   8590e:	4606      	mov	r6, r0
   85910:	4607      	mov	r7, r0
   85912:	e7a8      	b.n	85866 <_dtoa_r+0x646>
   85914:	2600      	movs	r6, #0
   85916:	960b      	str	r6, [sp, #44]	; 0x2c
   85918:	9e07      	ldr	r6, [sp, #28]
   8591a:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
   8591e:	44b6      	add	lr, r6
   85920:	f10e 0901 	add.w	r9, lr, #1
   85924:	f1b9 0f00 	cmp.w	r9, #0
   85928:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
   8592c:	464e      	mov	r6, r9
   8592e:	f340 8150 	ble.w	85bd2 <_dtoa_r+0x9b2>
   85932:	2100      	movs	r1, #0
   85934:	2e17      	cmp	r6, #23
   85936:	6461      	str	r1, [r4, #68]	; 0x44
   85938:	d90a      	bls.n	85950 <_dtoa_r+0x730>
   8593a:	2201      	movs	r2, #1
   8593c:	2304      	movs	r3, #4
   8593e:	005b      	lsls	r3, r3, #1
   85940:	f103 0014 	add.w	r0, r3, #20
   85944:	42b0      	cmp	r0, r6
   85946:	4611      	mov	r1, r2
   85948:	f102 0201 	add.w	r2, r2, #1
   8594c:	d9f7      	bls.n	8593e <_dtoa_r+0x71e>
   8594e:	6461      	str	r1, [r4, #68]	; 0x44
   85950:	4620      	mov	r0, r4
   85952:	f001 fbd7 	bl	87104 <_Balloc>
   85956:	2e0e      	cmp	r6, #14
   85958:	9009      	str	r0, [sp, #36]	; 0x24
   8595a:	6420      	str	r0, [r4, #64]	; 0x40
   8595c:	f63f ad6c 	bhi.w	85438 <_dtoa_r+0x218>
   85960:	2d00      	cmp	r5, #0
   85962:	f43f ad69 	beq.w	85438 <_dtoa_r+0x218>
   85966:	9d07      	ldr	r5, [sp, #28]
   85968:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
   8596c:	2d00      	cmp	r5, #0
   8596e:	f340 821c 	ble.w	85daa <_dtoa_r+0xb8a>
   85972:	4b51      	ldr	r3, [pc, #324]	; (85ab8 <_dtoa_r+0x898>)
   85974:	f005 020f 	and.w	r2, r5, #15
   85978:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8597c:	112d      	asrs	r5, r5, #4
   8597e:	e9d3 6700 	ldrd	r6, r7, [r3]
   85982:	06eb      	lsls	r3, r5, #27
   85984:	f140 81cd 	bpl.w	85d22 <_dtoa_r+0xb02>
   85988:	4b4c      	ldr	r3, [pc, #304]	; (85abc <_dtoa_r+0x89c>)
   8598a:	4650      	mov	r0, sl
   8598c:	4659      	mov	r1, fp
   8598e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   85992:	f002 fdf5 	bl	88580 <__aeabi_ddiv>
   85996:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8599a:	f005 050f 	and.w	r5, r5, #15
   8599e:	f04f 0803 	mov.w	r8, #3
   859a2:	b18d      	cbz	r5, 859c8 <_dtoa_r+0x7a8>
   859a4:	f8df a114 	ldr.w	sl, [pc, #276]	; 85abc <_dtoa_r+0x89c>
   859a8:	4630      	mov	r0, r6
   859aa:	4639      	mov	r1, r7
   859ac:	07ee      	lsls	r6, r5, #31
   859ae:	d505      	bpl.n	859bc <_dtoa_r+0x79c>
   859b0:	e9da 2300 	ldrd	r2, r3, [sl]
   859b4:	f108 0801 	add.w	r8, r8, #1
   859b8:	f002 fcb8 	bl	8832c <__aeabi_dmul>
   859bc:	106d      	asrs	r5, r5, #1
   859be:	f10a 0a08 	add.w	sl, sl, #8
   859c2:	d1f3      	bne.n	859ac <_dtoa_r+0x78c>
   859c4:	4606      	mov	r6, r0
   859c6:	460f      	mov	r7, r1
   859c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   859cc:	4632      	mov	r2, r6
   859ce:	463b      	mov	r3, r7
   859d0:	f002 fdd6 	bl	88580 <__aeabi_ddiv>
   859d4:	4682      	mov	sl, r0
   859d6:	468b      	mov	fp, r1
   859d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   859da:	b145      	cbz	r5, 859ee <_dtoa_r+0x7ce>
   859dc:	4650      	mov	r0, sl
   859de:	4659      	mov	r1, fp
   859e0:	2200      	movs	r2, #0
   859e2:	4b37      	ldr	r3, [pc, #220]	; (85ac0 <_dtoa_r+0x8a0>)
   859e4:	f002 ff14 	bl	88810 <__aeabi_dcmplt>
   859e8:	2800      	cmp	r0, #0
   859ea:	f040 82aa 	bne.w	85f42 <_dtoa_r+0xd22>
   859ee:	4640      	mov	r0, r8
   859f0:	f002 fc36 	bl	88260 <__aeabi_i2d>
   859f4:	4652      	mov	r2, sl
   859f6:	465b      	mov	r3, fp
   859f8:	f002 fc98 	bl	8832c <__aeabi_dmul>
   859fc:	2200      	movs	r2, #0
   859fe:	4b31      	ldr	r3, [pc, #196]	; (85ac4 <_dtoa_r+0x8a4>)
   85a00:	f002 fae2 	bl	87fc8 <__adddf3>
   85a04:	4606      	mov	r6, r0
   85a06:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   85a0a:	f1b9 0f00 	cmp.w	r9, #0
   85a0e:	f000 815a 	beq.w	85cc6 <_dtoa_r+0xaa6>
   85a12:	9d07      	ldr	r5, [sp, #28]
   85a14:	46c8      	mov	r8, r9
   85a16:	9517      	str	r5, [sp, #92]	; 0x5c
   85a18:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85a1a:	2d00      	cmp	r5, #0
   85a1c:	f000 8223 	beq.w	85e66 <_dtoa_r+0xc46>
   85a20:	4b25      	ldr	r3, [pc, #148]	; (85ab8 <_dtoa_r+0x898>)
   85a22:	2000      	movs	r0, #0
   85a24:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   85a28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   85a2c:	4926      	ldr	r1, [pc, #152]	; (85ac8 <_dtoa_r+0x8a8>)
   85a2e:	f002 fda7 	bl	88580 <__aeabi_ddiv>
   85a32:	4632      	mov	r2, r6
   85a34:	463b      	mov	r3, r7
   85a36:	f002 fac5 	bl	87fc4 <__aeabi_dsub>
   85a3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   85a3e:	4659      	mov	r1, fp
   85a40:	4650      	mov	r0, sl
   85a42:	f002 ff0d 	bl	88860 <__aeabi_d2iz>
   85a46:	4605      	mov	r5, r0
   85a48:	f002 fc0a 	bl	88260 <__aeabi_i2d>
   85a4c:	4602      	mov	r2, r0
   85a4e:	460b      	mov	r3, r1
   85a50:	4650      	mov	r0, sl
   85a52:	4659      	mov	r1, fp
   85a54:	f002 fab6 	bl	87fc4 <__aeabi_dsub>
   85a58:	3530      	adds	r5, #48	; 0x30
   85a5a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   85a5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   85a60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   85a64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   85a68:	b2ed      	uxtb	r5, r5
   85a6a:	7035      	strb	r5, [r6, #0]
   85a6c:	f106 0b01 	add.w	fp, r6, #1
   85a70:	f002 feec 	bl	8884c <__aeabi_dcmpgt>
   85a74:	2800      	cmp	r0, #0
   85a76:	f040 82ab 	bne.w	85fd0 <_dtoa_r+0xdb0>
   85a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   85a7e:	2000      	movs	r0, #0
   85a80:	490f      	ldr	r1, [pc, #60]	; (85ac0 <_dtoa_r+0x8a0>)
   85a82:	f002 fa9f 	bl	87fc4 <__aeabi_dsub>
   85a86:	4602      	mov	r2, r0
   85a88:	460b      	mov	r3, r1
   85a8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   85a8e:	f002 fedd 	bl	8884c <__aeabi_dcmpgt>
   85a92:	2800      	cmp	r0, #0
   85a94:	f040 82a2 	bne.w	85fdc <_dtoa_r+0xdbc>
   85a98:	f1b8 0f01 	cmp.w	r8, #1
   85a9c:	f340 8181 	ble.w	85da2 <_dtoa_r+0xb82>
   85aa0:	44b0      	add	r8, r6
   85aa2:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
   85aa6:	46a2      	mov	sl, r4
   85aa8:	46c1      	mov	r9, r8
   85aaa:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   85aae:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
   85ab2:	e019      	b.n	85ae8 <_dtoa_r+0x8c8>
   85ab4:	fffffbee 	.word	0xfffffbee
   85ab8:	000890a8 	.word	0x000890a8
   85abc:	00089170 	.word	0x00089170
   85ac0:	3ff00000 	.word	0x3ff00000
   85ac4:	401c0000 	.word	0x401c0000
   85ac8:	3fe00000 	.word	0x3fe00000
   85acc:	2000      	movs	r0, #0
   85ace:	49a8      	ldr	r1, [pc, #672]	; (85d70 <_dtoa_r+0xb50>)
   85ad0:	f002 fa78 	bl	87fc4 <__aeabi_dsub>
   85ad4:	4622      	mov	r2, r4
   85ad6:	462b      	mov	r3, r5
   85ad8:	f002 fe9a 	bl	88810 <__aeabi_dcmplt>
   85adc:	2800      	cmp	r0, #0
   85ade:	f040 827b 	bne.w	85fd8 <_dtoa_r+0xdb8>
   85ae2:	45cb      	cmp	fp, r9
   85ae4:	f000 815a 	beq.w	85d9c <_dtoa_r+0xb7c>
   85ae8:	4620      	mov	r0, r4
   85aea:	4629      	mov	r1, r5
   85aec:	2200      	movs	r2, #0
   85aee:	4ba1      	ldr	r3, [pc, #644]	; (85d74 <_dtoa_r+0xb54>)
   85af0:	f002 fc1c 	bl	8832c <__aeabi_dmul>
   85af4:	2200      	movs	r2, #0
   85af6:	4b9f      	ldr	r3, [pc, #636]	; (85d74 <_dtoa_r+0xb54>)
   85af8:	4604      	mov	r4, r0
   85afa:	460d      	mov	r5, r1
   85afc:	4630      	mov	r0, r6
   85afe:	4639      	mov	r1, r7
   85b00:	f002 fc14 	bl	8832c <__aeabi_dmul>
   85b04:	460f      	mov	r7, r1
   85b06:	4606      	mov	r6, r0
   85b08:	f002 feaa 	bl	88860 <__aeabi_d2iz>
   85b0c:	4680      	mov	r8, r0
   85b0e:	f002 fba7 	bl	88260 <__aeabi_i2d>
   85b12:	4602      	mov	r2, r0
   85b14:	460b      	mov	r3, r1
   85b16:	4630      	mov	r0, r6
   85b18:	4639      	mov	r1, r7
   85b1a:	f002 fa53 	bl	87fc4 <__aeabi_dsub>
   85b1e:	f108 0830 	add.w	r8, r8, #48	; 0x30
   85b22:	fa5f f888 	uxtb.w	r8, r8
   85b26:	4622      	mov	r2, r4
   85b28:	462b      	mov	r3, r5
   85b2a:	f80b 8b01 	strb.w	r8, [fp], #1
   85b2e:	4606      	mov	r6, r0
   85b30:	460f      	mov	r7, r1
   85b32:	f002 fe6d 	bl	88810 <__aeabi_dcmplt>
   85b36:	4632      	mov	r2, r6
   85b38:	463b      	mov	r3, r7
   85b3a:	2800      	cmp	r0, #0
   85b3c:	d0c6      	beq.n	85acc <_dtoa_r+0x8ac>
   85b3e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   85b40:	4654      	mov	r4, sl
   85b42:	9607      	str	r6, [sp, #28]
   85b44:	e539      	b.n	855ba <_dtoa_r+0x39a>
   85b46:	2600      	movs	r6, #0
   85b48:	960b      	str	r6, [sp, #44]	; 0x2c
   85b4a:	9825      	ldr	r0, [sp, #148]	; 0x94
   85b4c:	2800      	cmp	r0, #0
   85b4e:	dd3c      	ble.n	85bca <_dtoa_r+0x9aa>
   85b50:	4606      	mov	r6, r0
   85b52:	900f      	str	r0, [sp, #60]	; 0x3c
   85b54:	4681      	mov	r9, r0
   85b56:	e6ec      	b.n	85932 <_dtoa_r+0x712>
   85b58:	2601      	movs	r6, #1
   85b5a:	960b      	str	r6, [sp, #44]	; 0x2c
   85b5c:	e7f5      	b.n	85b4a <_dtoa_r+0x92a>
   85b5e:	f1b9 0f00 	cmp.w	r9, #0
   85b62:	f73f ac7c 	bgt.w	8545e <_dtoa_r+0x23e>
   85b66:	f040 80c6 	bne.w	85cf6 <_dtoa_r+0xad6>
   85b6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   85b6e:	2200      	movs	r2, #0
   85b70:	4b81      	ldr	r3, [pc, #516]	; (85d78 <_dtoa_r+0xb58>)
   85b72:	f002 fbdb 	bl	8832c <__aeabi_dmul>
   85b76:	4652      	mov	r2, sl
   85b78:	465b      	mov	r3, fp
   85b7a:	f002 fe5d 	bl	88838 <__aeabi_dcmpge>
   85b7e:	46c8      	mov	r8, r9
   85b80:	464e      	mov	r6, r9
   85b82:	2800      	cmp	r0, #0
   85b84:	d07c      	beq.n	85c80 <_dtoa_r+0xa60>
   85b86:	9d25      	ldr	r5, [sp, #148]	; 0x94
   85b88:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   85b8c:	43ed      	mvns	r5, r5
   85b8e:	9507      	str	r5, [sp, #28]
   85b90:	4641      	mov	r1, r8
   85b92:	4620      	mov	r0, r4
   85b94:	f001 fadc 	bl	87150 <_Bfree>
   85b98:	2e00      	cmp	r6, #0
   85b9a:	f47f ae06 	bne.w	857aa <_dtoa_r+0x58a>
   85b9e:	e50c      	b.n	855ba <_dtoa_r+0x39a>
   85ba0:	990a      	ldr	r1, [sp, #40]	; 0x28
   85ba2:	4620      	mov	r0, r4
   85ba4:	f001 fc1e 	bl	873e4 <__pow5mult>
   85ba8:	900a      	str	r0, [sp, #40]	; 0x28
   85baa:	e56a      	b.n	85682 <_dtoa_r+0x462>
   85bac:	9d16      	ldr	r5, [sp, #88]	; 0x58
   85bae:	2d00      	cmp	r5, #0
   85bb0:	f000 81b8 	beq.w	85f24 <_dtoa_r+0xd04>
   85bb4:	f203 4333 	addw	r3, r3, #1075	; 0x433
   85bb8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85bba:	9d08      	ldr	r5, [sp, #32]
   85bbc:	e527      	b.n	8560e <_dtoa_r+0x3ee>
   85bbe:	4601      	mov	r1, r0
   85bc0:	4620      	mov	r0, r4
   85bc2:	f001 fac5 	bl	87150 <_Bfree>
   85bc6:	2201      	movs	r2, #1
   85bc8:	e67a      	b.n	858c0 <_dtoa_r+0x6a0>
   85bca:	2601      	movs	r6, #1
   85bcc:	9625      	str	r6, [sp, #148]	; 0x94
   85bce:	960f      	str	r6, [sp, #60]	; 0x3c
   85bd0:	46b1      	mov	r9, r6
   85bd2:	2100      	movs	r1, #0
   85bd4:	6461      	str	r1, [r4, #68]	; 0x44
   85bd6:	e6bb      	b.n	85950 <_dtoa_r+0x730>
   85bd8:	980a      	ldr	r0, [sp, #40]	; 0x28
   85bda:	4641      	mov	r1, r8
   85bdc:	f001 fcae 	bl	8753c <__mcmp>
   85be0:	2800      	cmp	r0, #0
   85be2:	f6bf ad8f 	bge.w	85704 <_dtoa_r+0x4e4>
   85be6:	f8dd e01c 	ldr.w	lr, [sp, #28]
   85bea:	990a      	ldr	r1, [sp, #40]	; 0x28
   85bec:	f10e 3eff 	add.w	lr, lr, #4294967295
   85bf0:	4620      	mov	r0, r4
   85bf2:	220a      	movs	r2, #10
   85bf4:	2300      	movs	r3, #0
   85bf6:	f8cd e01c 	str.w	lr, [sp, #28]
   85bfa:	f001 fab3 	bl	87164 <__multadd>
   85bfe:	900a      	str	r0, [sp, #40]	; 0x28
   85c00:	980b      	ldr	r0, [sp, #44]	; 0x2c
   85c02:	2800      	cmp	r0, #0
   85c04:	f040 8209 	bne.w	8601a <_dtoa_r+0xdfa>
   85c08:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   85c0c:	e57a      	b.n	85704 <_dtoa_r+0x4e4>
   85c0e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   85c12:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   85c16:	6918      	ldr	r0, [r3, #16]
   85c18:	f001 faee 	bl	871f8 <__hi0bits>
   85c1c:	f1c0 0020 	rsb	r0, r0, #32
   85c20:	e547      	b.n	856b2 <_dtoa_r+0x492>
   85c22:	9809      	ldr	r0, [sp, #36]	; 0x24
   85c24:	f7ff bb2c 	b.w	85280 <_dtoa_r+0x60>
   85c28:	f1ba 0f00 	cmp.w	sl, #0
   85c2c:	f47f ad3b 	bne.w	856a6 <_dtoa_r+0x486>
   85c30:	f3cb 0313 	ubfx	r3, fp, #0, #20
   85c34:	2b00      	cmp	r3, #0
   85c36:	f040 817c 	bne.w	85f32 <_dtoa_r+0xd12>
   85c3a:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   85c3e:	0d3f      	lsrs	r7, r7, #20
   85c40:	053f      	lsls	r7, r7, #20
   85c42:	2f00      	cmp	r7, #0
   85c44:	f43f ad30 	beq.w	856a8 <_dtoa_r+0x488>
   85c48:	9a08      	ldr	r2, [sp, #32]
   85c4a:	9b06      	ldr	r3, [sp, #24]
   85c4c:	3201      	adds	r2, #1
   85c4e:	3301      	adds	r3, #1
   85c50:	9208      	str	r2, [sp, #32]
   85c52:	9306      	str	r3, [sp, #24]
   85c54:	2701      	movs	r7, #1
   85c56:	e527      	b.n	856a8 <_dtoa_r+0x488>
   85c58:	9924      	ldr	r1, [sp, #144]	; 0x90
   85c5a:	2902      	cmp	r1, #2
   85c5c:	f77f ad56 	ble.w	8570c <_dtoa_r+0x4ec>
   85c60:	f1b9 0f00 	cmp.w	r9, #0
   85c64:	d18f      	bne.n	85b86 <_dtoa_r+0x966>
   85c66:	4641      	mov	r1, r8
   85c68:	464b      	mov	r3, r9
   85c6a:	2205      	movs	r2, #5
   85c6c:	4620      	mov	r0, r4
   85c6e:	f001 fa79 	bl	87164 <__multadd>
   85c72:	4680      	mov	r8, r0
   85c74:	4641      	mov	r1, r8
   85c76:	980a      	ldr	r0, [sp, #40]	; 0x28
   85c78:	f001 fc60 	bl	8753c <__mcmp>
   85c7c:	2800      	cmp	r0, #0
   85c7e:	dd82      	ble.n	85b86 <_dtoa_r+0x966>
   85c80:	9d07      	ldr	r5, [sp, #28]
   85c82:	2331      	movs	r3, #49	; 0x31
   85c84:	3501      	adds	r5, #1
   85c86:	9507      	str	r5, [sp, #28]
   85c88:	9d09      	ldr	r5, [sp, #36]	; 0x24
   85c8a:	702b      	strb	r3, [r5, #0]
   85c8c:	f105 0b01 	add.w	fp, r5, #1
   85c90:	e77e      	b.n	85b90 <_dtoa_r+0x970>
   85c92:	9807      	ldr	r0, [sp, #28]
   85c94:	9909      	ldr	r1, [sp, #36]	; 0x24
   85c96:	2331      	movs	r3, #49	; 0x31
   85c98:	3001      	adds	r0, #1
   85c9a:	9007      	str	r0, [sp, #28]
   85c9c:	700b      	strb	r3, [r1, #0]
   85c9e:	e576      	b.n	8578e <_dtoa_r+0x56e>
   85ca0:	46a3      	mov	fp, r4
   85ca2:	9c03      	ldr	r4, [sp, #12]
   85ca4:	e489      	b.n	855ba <_dtoa_r+0x39a>
   85ca6:	4640      	mov	r0, r8
   85ca8:	f002 fada 	bl	88260 <__aeabi_i2d>
   85cac:	4602      	mov	r2, r0
   85cae:	460b      	mov	r3, r1
   85cb0:	4650      	mov	r0, sl
   85cb2:	4659      	mov	r1, fp
   85cb4:	f002 fb3a 	bl	8832c <__aeabi_dmul>
   85cb8:	2200      	movs	r2, #0
   85cba:	4b30      	ldr	r3, [pc, #192]	; (85d7c <_dtoa_r+0xb5c>)
   85cbc:	f002 f984 	bl	87fc8 <__adddf3>
   85cc0:	4606      	mov	r6, r0
   85cc2:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   85cc6:	4650      	mov	r0, sl
   85cc8:	4659      	mov	r1, fp
   85cca:	2200      	movs	r2, #0
   85ccc:	4b2a      	ldr	r3, [pc, #168]	; (85d78 <_dtoa_r+0xb58>)
   85cce:	f002 f979 	bl	87fc4 <__aeabi_dsub>
   85cd2:	4632      	mov	r2, r6
   85cd4:	463b      	mov	r3, r7
   85cd6:	4682      	mov	sl, r0
   85cd8:	468b      	mov	fp, r1
   85cda:	f002 fdb7 	bl	8884c <__aeabi_dcmpgt>
   85cde:	2800      	cmp	r0, #0
   85ce0:	f040 80bd 	bne.w	85e5e <_dtoa_r+0xc3e>
   85ce4:	4632      	mov	r2, r6
   85ce6:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   85cea:	4650      	mov	r0, sl
   85cec:	4659      	mov	r1, fp
   85cee:	f002 fd8f 	bl	88810 <__aeabi_dcmplt>
   85cf2:	2800      	cmp	r0, #0
   85cf4:	d055      	beq.n	85da2 <_dtoa_r+0xb82>
   85cf6:	f04f 0800 	mov.w	r8, #0
   85cfa:	4646      	mov	r6, r8
   85cfc:	e743      	b.n	85b86 <_dtoa_r+0x966>
   85cfe:	990a      	ldr	r1, [sp, #40]	; 0x28
   85d00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85d02:	4620      	mov	r0, r4
   85d04:	f001 fb6e 	bl	873e4 <__pow5mult>
   85d08:	900a      	str	r0, [sp, #40]	; 0x28
   85d0a:	e4ba      	b.n	85682 <_dtoa_r+0x462>
   85d0c:	2601      	movs	r6, #1
   85d0e:	960b      	str	r6, [sp, #44]	; 0x2c
   85d10:	e602      	b.n	85918 <_dtoa_r+0x6f8>
   85d12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   85d14:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   85d16:	1b7b      	subs	r3, r7, r5
   85d18:	441e      	add	r6, r3
   85d1a:	970c      	str	r7, [sp, #48]	; 0x30
   85d1c:	960d      	str	r6, [sp, #52]	; 0x34
   85d1e:	2700      	movs	r7, #0
   85d20:	e46f      	b.n	85602 <_dtoa_r+0x3e2>
   85d22:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   85d26:	f04f 0802 	mov.w	r8, #2
   85d2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   85d2e:	e638      	b.n	859a2 <_dtoa_r+0x782>
   85d30:	2a00      	cmp	r2, #0
   85d32:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   85d36:	46d9      	mov	r9, fp
   85d38:	dd11      	ble.n	85d5e <_dtoa_r+0xb3e>
   85d3a:	990a      	ldr	r1, [sp, #40]	; 0x28
   85d3c:	2201      	movs	r2, #1
   85d3e:	4620      	mov	r0, r4
   85d40:	f001 fb9e 	bl	87480 <__lshift>
   85d44:	4641      	mov	r1, r8
   85d46:	900a      	str	r0, [sp, #40]	; 0x28
   85d48:	f001 fbf8 	bl	8753c <__mcmp>
   85d4c:	2800      	cmp	r0, #0
   85d4e:	f340 815d 	ble.w	8600c <_dtoa_r+0xdec>
   85d52:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   85d56:	f000 811b 	beq.w	85f90 <_dtoa_r+0xd70>
   85d5a:	f109 0a31 	add.w	sl, r9, #49	; 0x31
   85d5e:	9b06      	ldr	r3, [sp, #24]
   85d60:	4635      	mov	r5, r6
   85d62:	f883 a000 	strb.w	sl, [r3]
   85d66:	f103 0b01 	add.w	fp, r3, #1
   85d6a:	463e      	mov	r6, r7
   85d6c:	e50f      	b.n	8578e <_dtoa_r+0x56e>
   85d6e:	bf00      	nop
   85d70:	3ff00000 	.word	0x3ff00000
   85d74:	40240000 	.word	0x40240000
   85d78:	40140000 	.word	0x40140000
   85d7c:	401c0000 	.word	0x401c0000
   85d80:	d103      	bne.n	85d8a <_dtoa_r+0xb6a>
   85d82:	f01a 0f01 	tst.w	sl, #1
   85d86:	f47f acf2 	bne.w	8576e <_dtoa_r+0x54e>
   85d8a:	465b      	mov	r3, fp
   85d8c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   85d90:	469b      	mov	fp, r3
   85d92:	2a30      	cmp	r2, #48	; 0x30
   85d94:	f103 33ff 	add.w	r3, r3, #4294967295
   85d98:	d0f8      	beq.n	85d8c <_dtoa_r+0xb6c>
   85d9a:	e4f8      	b.n	8578e <_dtoa_r+0x56e>
   85d9c:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   85da0:	4654      	mov	r4, sl
   85da2:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   85da6:	f7ff bb47 	b.w	85438 <_dtoa_r+0x218>
   85daa:	9e07      	ldr	r6, [sp, #28]
   85dac:	4275      	negs	r5, r6
   85dae:	2d00      	cmp	r5, #0
   85db0:	f000 80c2 	beq.w	85f38 <_dtoa_r+0xd18>
   85db4:	4ba3      	ldr	r3, [pc, #652]	; (86044 <_dtoa_r+0xe24>)
   85db6:	f005 020f 	and.w	r2, r5, #15
   85dba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   85dc2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   85dc6:	f002 fab1 	bl	8832c <__aeabi_dmul>
   85dca:	112d      	asrs	r5, r5, #4
   85dcc:	4682      	mov	sl, r0
   85dce:	468b      	mov	fp, r1
   85dd0:	f000 812e 	beq.w	86030 <_dtoa_r+0xe10>
   85dd4:	4e9c      	ldr	r6, [pc, #624]	; (86048 <_dtoa_r+0xe28>)
   85dd6:	f04f 0802 	mov.w	r8, #2
   85dda:	07ea      	lsls	r2, r5, #31
   85ddc:	d505      	bpl.n	85dea <_dtoa_r+0xbca>
   85dde:	e9d6 2300 	ldrd	r2, r3, [r6]
   85de2:	f108 0801 	add.w	r8, r8, #1
   85de6:	f002 faa1 	bl	8832c <__aeabi_dmul>
   85dea:	106d      	asrs	r5, r5, #1
   85dec:	f106 0608 	add.w	r6, r6, #8
   85df0:	d1f3      	bne.n	85dda <_dtoa_r+0xbba>
   85df2:	4682      	mov	sl, r0
   85df4:	468b      	mov	fp, r1
   85df6:	e5ef      	b.n	859d8 <_dtoa_r+0x7b8>
   85df8:	9e07      	ldr	r6, [sp, #28]
   85dfa:	9d09      	ldr	r5, [sp, #36]	; 0x24
   85dfc:	2230      	movs	r2, #48	; 0x30
   85dfe:	702a      	strb	r2, [r5, #0]
   85e00:	3601      	adds	r6, #1
   85e02:	2231      	movs	r2, #49	; 0x31
   85e04:	9607      	str	r6, [sp, #28]
   85e06:	701a      	strb	r2, [r3, #0]
   85e08:	f7ff bbd7 	b.w	855ba <_dtoa_r+0x39a>
   85e0c:	6871      	ldr	r1, [r6, #4]
   85e0e:	4620      	mov	r0, r4
   85e10:	f001 f978 	bl	87104 <_Balloc>
   85e14:	6933      	ldr	r3, [r6, #16]
   85e16:	4605      	mov	r5, r0
   85e18:	1c9a      	adds	r2, r3, #2
   85e1a:	0092      	lsls	r2, r2, #2
   85e1c:	f106 010c 	add.w	r1, r6, #12
   85e20:	300c      	adds	r0, #12
   85e22:	f7fc fdb7 	bl	82994 <memcpy>
   85e26:	4620      	mov	r0, r4
   85e28:	4629      	mov	r1, r5
   85e2a:	2201      	movs	r2, #1
   85e2c:	f001 fb28 	bl	87480 <__lshift>
   85e30:	4607      	mov	r7, r0
   85e32:	e503      	b.n	8583c <_dtoa_r+0x61c>
   85e34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   85e38:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   85e3c:	f000 80a8 	beq.w	85f90 <_dtoa_r+0xd70>
   85e40:	9d06      	ldr	r5, [sp, #24]
   85e42:	f10a 0301 	add.w	r3, sl, #1
   85e46:	702b      	strb	r3, [r5, #0]
   85e48:	4635      	mov	r5, r6
   85e4a:	9e06      	ldr	r6, [sp, #24]
   85e4c:	f106 0b01 	add.w	fp, r6, #1
   85e50:	463e      	mov	r6, r7
   85e52:	e49c      	b.n	8578e <_dtoa_r+0x56e>
   85e54:	4635      	mov	r5, r6
   85e56:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   85e5a:	463e      	mov	r6, r7
   85e5c:	e47b      	b.n	85756 <_dtoa_r+0x536>
   85e5e:	f04f 0800 	mov.w	r8, #0
   85e62:	4646      	mov	r6, r8
   85e64:	e70c      	b.n	85c80 <_dtoa_r+0xa60>
   85e66:	4977      	ldr	r1, [pc, #476]	; (86044 <_dtoa_r+0xe24>)
   85e68:	f108 35ff 	add.w	r5, r8, #4294967295
   85e6c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   85e70:	4632      	mov	r2, r6
   85e72:	463b      	mov	r3, r7
   85e74:	e9d1 0100 	ldrd	r0, r1, [r1]
   85e78:	9510      	str	r5, [sp, #64]	; 0x40
   85e7a:	f002 fa57 	bl	8832c <__aeabi_dmul>
   85e7e:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   85e82:	4659      	mov	r1, fp
   85e84:	4650      	mov	r0, sl
   85e86:	f002 fceb 	bl	88860 <__aeabi_d2iz>
   85e8a:	4605      	mov	r5, r0
   85e8c:	f002 f9e8 	bl	88260 <__aeabi_i2d>
   85e90:	4602      	mov	r2, r0
   85e92:	460b      	mov	r3, r1
   85e94:	4650      	mov	r0, sl
   85e96:	4659      	mov	r1, fp
   85e98:	f002 f894 	bl	87fc4 <__aeabi_dsub>
   85e9c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   85ea0:	3530      	adds	r5, #48	; 0x30
   85ea2:	f1b8 0f01 	cmp.w	r8, #1
   85ea6:	4606      	mov	r6, r0
   85ea8:	460f      	mov	r7, r1
   85eaa:	f88e 5000 	strb.w	r5, [lr]
   85eae:	f10e 0b01 	add.w	fp, lr, #1
   85eb2:	d01e      	beq.n	85ef2 <_dtoa_r+0xcd2>
   85eb4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   85eb6:	1e6b      	subs	r3, r5, #1
   85eb8:	eb03 0a08 	add.w	sl, r3, r8
   85ebc:	2200      	movs	r2, #0
   85ebe:	4b63      	ldr	r3, [pc, #396]	; (8604c <_dtoa_r+0xe2c>)
   85ec0:	f002 fa34 	bl	8832c <__aeabi_dmul>
   85ec4:	460f      	mov	r7, r1
   85ec6:	4606      	mov	r6, r0
   85ec8:	f002 fcca 	bl	88860 <__aeabi_d2iz>
   85ecc:	4680      	mov	r8, r0
   85ece:	f002 f9c7 	bl	88260 <__aeabi_i2d>
   85ed2:	f108 0830 	add.w	r8, r8, #48	; 0x30
   85ed6:	4602      	mov	r2, r0
   85ed8:	460b      	mov	r3, r1
   85eda:	4630      	mov	r0, r6
   85edc:	4639      	mov	r1, r7
   85ede:	f002 f871 	bl	87fc4 <__aeabi_dsub>
   85ee2:	f805 8f01 	strb.w	r8, [r5, #1]!
   85ee6:	4555      	cmp	r5, sl
   85ee8:	d1e8      	bne.n	85ebc <_dtoa_r+0xc9c>
   85eea:	9d10      	ldr	r5, [sp, #64]	; 0x40
   85eec:	4606      	mov	r6, r0
   85eee:	460f      	mov	r7, r1
   85ef0:	44ab      	add	fp, r5
   85ef2:	2200      	movs	r2, #0
   85ef4:	4b56      	ldr	r3, [pc, #344]	; (86050 <_dtoa_r+0xe30>)
   85ef6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   85efa:	f002 f865 	bl	87fc8 <__adddf3>
   85efe:	4632      	mov	r2, r6
   85f00:	463b      	mov	r3, r7
   85f02:	f002 fc85 	bl	88810 <__aeabi_dcmplt>
   85f06:	2800      	cmp	r0, #0
   85f08:	d04d      	beq.n	85fa6 <_dtoa_r+0xd86>
   85f0a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   85f0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   85f0e:	9607      	str	r6, [sp, #28]
   85f10:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
   85f14:	f7ff bb4a 	b.w	855ac <_dtoa_r+0x38c>
   85f18:	9e08      	ldr	r6, [sp, #32]
   85f1a:	2300      	movs	r3, #0
   85f1c:	ebc9 0506 	rsb	r5, r9, r6
   85f20:	f7ff bb75 	b.w	8560e <_dtoa_r+0x3ee>
   85f24:	9b18      	ldr	r3, [sp, #96]	; 0x60
   85f26:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85f28:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   85f2c:	9d08      	ldr	r5, [sp, #32]
   85f2e:	f7ff bb6e 	b.w	8560e <_dtoa_r+0x3ee>
   85f32:	4657      	mov	r7, sl
   85f34:	f7ff bbb8 	b.w	856a8 <_dtoa_r+0x488>
   85f38:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   85f3c:	f04f 0802 	mov.w	r8, #2
   85f40:	e54a      	b.n	859d8 <_dtoa_r+0x7b8>
   85f42:	f1b9 0f00 	cmp.w	r9, #0
   85f46:	f43f aeae 	beq.w	85ca6 <_dtoa_r+0xa86>
   85f4a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   85f4c:	2e00      	cmp	r6, #0
   85f4e:	f77f af28 	ble.w	85da2 <_dtoa_r+0xb82>
   85f52:	2200      	movs	r2, #0
   85f54:	4b3d      	ldr	r3, [pc, #244]	; (8604c <_dtoa_r+0xe2c>)
   85f56:	4650      	mov	r0, sl
   85f58:	4659      	mov	r1, fp
   85f5a:	f002 f9e7 	bl	8832c <__aeabi_dmul>
   85f5e:	4682      	mov	sl, r0
   85f60:	f108 0001 	add.w	r0, r8, #1
   85f64:	468b      	mov	fp, r1
   85f66:	f002 f97b 	bl	88260 <__aeabi_i2d>
   85f6a:	4602      	mov	r2, r0
   85f6c:	460b      	mov	r3, r1
   85f6e:	4650      	mov	r0, sl
   85f70:	4659      	mov	r1, fp
   85f72:	f002 f9db 	bl	8832c <__aeabi_dmul>
   85f76:	2200      	movs	r2, #0
   85f78:	4b36      	ldr	r3, [pc, #216]	; (86054 <_dtoa_r+0xe34>)
   85f7a:	f002 f825 	bl	87fc8 <__adddf3>
   85f7e:	9d07      	ldr	r5, [sp, #28]
   85f80:	4606      	mov	r6, r0
   85f82:	3d01      	subs	r5, #1
   85f84:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   85f88:	9517      	str	r5, [sp, #92]	; 0x5c
   85f8a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   85f8e:	e543      	b.n	85a18 <_dtoa_r+0x7f8>
   85f90:	4635      	mov	r5, r6
   85f92:	9b06      	ldr	r3, [sp, #24]
   85f94:	9e06      	ldr	r6, [sp, #24]
   85f96:	2239      	movs	r2, #57	; 0x39
   85f98:	7032      	strb	r2, [r6, #0]
   85f9a:	f103 0b01 	add.w	fp, r3, #1
   85f9e:	463e      	mov	r6, r7
   85fa0:	9909      	ldr	r1, [sp, #36]	; 0x24
   85fa2:	f7ff bbee 	b.w	85782 <_dtoa_r+0x562>
   85fa6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   85faa:	2000      	movs	r0, #0
   85fac:	4928      	ldr	r1, [pc, #160]	; (86050 <_dtoa_r+0xe30>)
   85fae:	f002 f809 	bl	87fc4 <__aeabi_dsub>
   85fb2:	4632      	mov	r2, r6
   85fb4:	463b      	mov	r3, r7
   85fb6:	f002 fc49 	bl	8884c <__aeabi_dcmpgt>
   85fba:	2800      	cmp	r0, #0
   85fbc:	f43f aef1 	beq.w	85da2 <_dtoa_r+0xb82>
   85fc0:	465b      	mov	r3, fp
   85fc2:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   85fc6:	469b      	mov	fp, r3
   85fc8:	2a30      	cmp	r2, #48	; 0x30
   85fca:	f103 33ff 	add.w	r3, r3, #4294967295
   85fce:	d0f8      	beq.n	85fc2 <_dtoa_r+0xda2>
   85fd0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   85fd2:	9507      	str	r5, [sp, #28]
   85fd4:	f7ff baf1 	b.w	855ba <_dtoa_r+0x39a>
   85fd8:	4645      	mov	r5, r8
   85fda:	4654      	mov	r4, sl
   85fdc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   85fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
   85fe0:	9607      	str	r6, [sp, #28]
   85fe2:	f7ff bae3 	b.w	855ac <_dtoa_r+0x38c>
   85fe6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   85fea:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   85fee:	d0cf      	beq.n	85f90 <_dtoa_r+0xd70>
   85ff0:	9b03      	ldr	r3, [sp, #12]
   85ff2:	4635      	mov	r5, r6
   85ff4:	2b00      	cmp	r3, #0
   85ff6:	9e06      	ldr	r6, [sp, #24]
   85ff8:	bfc8      	it	gt
   85ffa:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
   85ffe:	f886 a000 	strb.w	sl, [r6]
   86002:	f106 0b01 	add.w	fp, r6, #1
   86006:	463e      	mov	r6, r7
   86008:	f7ff bbc1 	b.w	8578e <_dtoa_r+0x56e>
   8600c:	f47f aea7 	bne.w	85d5e <_dtoa_r+0xb3e>
   86010:	f01a 0f01 	tst.w	sl, #1
   86014:	f43f aea3 	beq.w	85d5e <_dtoa_r+0xb3e>
   86018:	e69b      	b.n	85d52 <_dtoa_r+0xb32>
   8601a:	4631      	mov	r1, r6
   8601c:	4620      	mov	r0, r4
   8601e:	220a      	movs	r2, #10
   86020:	2300      	movs	r3, #0
   86022:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   86026:	f001 f89d 	bl	87164 <__multadd>
   8602a:	4606      	mov	r6, r0
   8602c:	f7ff bb6a 	b.w	85704 <_dtoa_r+0x4e4>
   86030:	f04f 0802 	mov.w	r8, #2
   86034:	e4d0      	b.n	859d8 <_dtoa_r+0x7b8>
   86036:	f43f ab50 	beq.w	856da <_dtoa_r+0x4ba>
   8603a:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   8603e:	f7ff bbe0 	b.w	85802 <_dtoa_r+0x5e2>
   86042:	bf00      	nop
   86044:	000890a8 	.word	0x000890a8
   86048:	00089170 	.word	0x00089170
   8604c:	40240000 	.word	0x40240000
   86050:	3fe00000 	.word	0x3fe00000
   86054:	401c0000 	.word	0x401c0000

00086058 <__sflush_r>:
   86058:	898b      	ldrh	r3, [r1, #12]
   8605a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8605e:	b29a      	uxth	r2, r3
   86060:	460d      	mov	r5, r1
   86062:	0711      	lsls	r1, r2, #28
   86064:	4680      	mov	r8, r0
   86066:	d43c      	bmi.n	860e2 <__sflush_r+0x8a>
   86068:	686a      	ldr	r2, [r5, #4]
   8606a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8606e:	2a00      	cmp	r2, #0
   86070:	81ab      	strh	r3, [r5, #12]
   86072:	dd59      	ble.n	86128 <__sflush_r+0xd0>
   86074:	6aac      	ldr	r4, [r5, #40]	; 0x28
   86076:	2c00      	cmp	r4, #0
   86078:	d04b      	beq.n	86112 <__sflush_r+0xba>
   8607a:	b29b      	uxth	r3, r3
   8607c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   86080:	2100      	movs	r1, #0
   86082:	b292      	uxth	r2, r2
   86084:	f8d8 6000 	ldr.w	r6, [r8]
   86088:	f8c8 1000 	str.w	r1, [r8]
   8608c:	2a00      	cmp	r2, #0
   8608e:	d04f      	beq.n	86130 <__sflush_r+0xd8>
   86090:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   86092:	075f      	lsls	r7, r3, #29
   86094:	d505      	bpl.n	860a2 <__sflush_r+0x4a>
   86096:	6869      	ldr	r1, [r5, #4]
   86098:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8609a:	1a52      	subs	r2, r2, r1
   8609c:	b10b      	cbz	r3, 860a2 <__sflush_r+0x4a>
   8609e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   860a0:	1ad2      	subs	r2, r2, r3
   860a2:	4640      	mov	r0, r8
   860a4:	69e9      	ldr	r1, [r5, #28]
   860a6:	2300      	movs	r3, #0
   860a8:	47a0      	blx	r4
   860aa:	1c44      	adds	r4, r0, #1
   860ac:	d04a      	beq.n	86144 <__sflush_r+0xec>
   860ae:	89ab      	ldrh	r3, [r5, #12]
   860b0:	692a      	ldr	r2, [r5, #16]
   860b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   860b6:	b29b      	uxth	r3, r3
   860b8:	2100      	movs	r1, #0
   860ba:	602a      	str	r2, [r5, #0]
   860bc:	04da      	lsls	r2, r3, #19
   860be:	81ab      	strh	r3, [r5, #12]
   860c0:	6069      	str	r1, [r5, #4]
   860c2:	d44c      	bmi.n	8615e <__sflush_r+0x106>
   860c4:	6b29      	ldr	r1, [r5, #48]	; 0x30
   860c6:	f8c8 6000 	str.w	r6, [r8]
   860ca:	b311      	cbz	r1, 86112 <__sflush_r+0xba>
   860cc:	f105 0340 	add.w	r3, r5, #64	; 0x40
   860d0:	4299      	cmp	r1, r3
   860d2:	d002      	beq.n	860da <__sflush_r+0x82>
   860d4:	4640      	mov	r0, r8
   860d6:	f000 f9c3 	bl	86460 <_free_r>
   860da:	2000      	movs	r0, #0
   860dc:	6328      	str	r0, [r5, #48]	; 0x30
   860de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   860e2:	692e      	ldr	r6, [r5, #16]
   860e4:	b1ae      	cbz	r6, 86112 <__sflush_r+0xba>
   860e6:	0791      	lsls	r1, r2, #30
   860e8:	682c      	ldr	r4, [r5, #0]
   860ea:	bf0c      	ite	eq
   860ec:	696b      	ldreq	r3, [r5, #20]
   860ee:	2300      	movne	r3, #0
   860f0:	602e      	str	r6, [r5, #0]
   860f2:	1ba4      	subs	r4, r4, r6
   860f4:	60ab      	str	r3, [r5, #8]
   860f6:	e00a      	b.n	8610e <__sflush_r+0xb6>
   860f8:	4632      	mov	r2, r6
   860fa:	4623      	mov	r3, r4
   860fc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   860fe:	4640      	mov	r0, r8
   86100:	69e9      	ldr	r1, [r5, #28]
   86102:	47b8      	blx	r7
   86104:	2800      	cmp	r0, #0
   86106:	ebc0 0404 	rsb	r4, r0, r4
   8610a:	4406      	add	r6, r0
   8610c:	dd04      	ble.n	86118 <__sflush_r+0xc0>
   8610e:	2c00      	cmp	r4, #0
   86110:	dcf2      	bgt.n	860f8 <__sflush_r+0xa0>
   86112:	2000      	movs	r0, #0
   86114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86118:	89ab      	ldrh	r3, [r5, #12]
   8611a:	f04f 30ff 	mov.w	r0, #4294967295
   8611e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   86122:	81ab      	strh	r3, [r5, #12]
   86124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86128:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8612a:	2a00      	cmp	r2, #0
   8612c:	dca2      	bgt.n	86074 <__sflush_r+0x1c>
   8612e:	e7f0      	b.n	86112 <__sflush_r+0xba>
   86130:	2301      	movs	r3, #1
   86132:	4640      	mov	r0, r8
   86134:	69e9      	ldr	r1, [r5, #28]
   86136:	47a0      	blx	r4
   86138:	1c43      	adds	r3, r0, #1
   8613a:	4602      	mov	r2, r0
   8613c:	d01e      	beq.n	8617c <__sflush_r+0x124>
   8613e:	89ab      	ldrh	r3, [r5, #12]
   86140:	6aac      	ldr	r4, [r5, #40]	; 0x28
   86142:	e7a6      	b.n	86092 <__sflush_r+0x3a>
   86144:	f8d8 3000 	ldr.w	r3, [r8]
   86148:	b95b      	cbnz	r3, 86162 <__sflush_r+0x10a>
   8614a:	89aa      	ldrh	r2, [r5, #12]
   8614c:	6929      	ldr	r1, [r5, #16]
   8614e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   86152:	b292      	uxth	r2, r2
   86154:	606b      	str	r3, [r5, #4]
   86156:	04d3      	lsls	r3, r2, #19
   86158:	81aa      	strh	r2, [r5, #12]
   8615a:	6029      	str	r1, [r5, #0]
   8615c:	d5b2      	bpl.n	860c4 <__sflush_r+0x6c>
   8615e:	6528      	str	r0, [r5, #80]	; 0x50
   86160:	e7b0      	b.n	860c4 <__sflush_r+0x6c>
   86162:	2b1d      	cmp	r3, #29
   86164:	d001      	beq.n	8616a <__sflush_r+0x112>
   86166:	2b16      	cmp	r3, #22
   86168:	d113      	bne.n	86192 <__sflush_r+0x13a>
   8616a:	89a9      	ldrh	r1, [r5, #12]
   8616c:	692b      	ldr	r3, [r5, #16]
   8616e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   86172:	2200      	movs	r2, #0
   86174:	81a9      	strh	r1, [r5, #12]
   86176:	602b      	str	r3, [r5, #0]
   86178:	606a      	str	r2, [r5, #4]
   8617a:	e7a3      	b.n	860c4 <__sflush_r+0x6c>
   8617c:	f8d8 3000 	ldr.w	r3, [r8]
   86180:	2b00      	cmp	r3, #0
   86182:	d0dc      	beq.n	8613e <__sflush_r+0xe6>
   86184:	2b1d      	cmp	r3, #29
   86186:	d001      	beq.n	8618c <__sflush_r+0x134>
   86188:	2b16      	cmp	r3, #22
   8618a:	d1c5      	bne.n	86118 <__sflush_r+0xc0>
   8618c:	f8c8 6000 	str.w	r6, [r8]
   86190:	e7bf      	b.n	86112 <__sflush_r+0xba>
   86192:	89ab      	ldrh	r3, [r5, #12]
   86194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   86198:	81ab      	strh	r3, [r5, #12]
   8619a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8619e:	bf00      	nop

000861a0 <_fflush_r>:
   861a0:	b510      	push	{r4, lr}
   861a2:	4604      	mov	r4, r0
   861a4:	b082      	sub	sp, #8
   861a6:	b108      	cbz	r0, 861ac <_fflush_r+0xc>
   861a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   861aa:	b153      	cbz	r3, 861c2 <_fflush_r+0x22>
   861ac:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   861b0:	b908      	cbnz	r0, 861b6 <_fflush_r+0x16>
   861b2:	b002      	add	sp, #8
   861b4:	bd10      	pop	{r4, pc}
   861b6:	4620      	mov	r0, r4
   861b8:	b002      	add	sp, #8
   861ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   861be:	f7ff bf4b 	b.w	86058 <__sflush_r>
   861c2:	9101      	str	r1, [sp, #4]
   861c4:	f000 f808 	bl	861d8 <__sinit>
   861c8:	9901      	ldr	r1, [sp, #4]
   861ca:	e7ef      	b.n	861ac <_fflush_r+0xc>

000861cc <_cleanup_r>:
   861cc:	4901      	ldr	r1, [pc, #4]	; (861d4 <_cleanup_r+0x8>)
   861ce:	f000 bb9f 	b.w	86910 <_fwalk>
   861d2:	bf00      	nop
   861d4:	00087f11 	.word	0x00087f11

000861d8 <__sinit>:
   861d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   861dc:	6b84      	ldr	r4, [r0, #56]	; 0x38
   861de:	b083      	sub	sp, #12
   861e0:	4607      	mov	r7, r0
   861e2:	2c00      	cmp	r4, #0
   861e4:	d165      	bne.n	862b2 <__sinit+0xda>
   861e6:	687d      	ldr	r5, [r7, #4]
   861e8:	4833      	ldr	r0, [pc, #204]	; (862b8 <__sinit+0xe0>)
   861ea:	2304      	movs	r3, #4
   861ec:	2103      	movs	r1, #3
   861ee:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   861f2:	63f8      	str	r0, [r7, #60]	; 0x3c
   861f4:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   861f8:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   861fc:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   86200:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   86204:	81ab      	strh	r3, [r5, #12]
   86206:	602c      	str	r4, [r5, #0]
   86208:	606c      	str	r4, [r5, #4]
   8620a:	60ac      	str	r4, [r5, #8]
   8620c:	666c      	str	r4, [r5, #100]	; 0x64
   8620e:	81ec      	strh	r4, [r5, #14]
   86210:	612c      	str	r4, [r5, #16]
   86212:	616c      	str	r4, [r5, #20]
   86214:	61ac      	str	r4, [r5, #24]
   86216:	4621      	mov	r1, r4
   86218:	2208      	movs	r2, #8
   8621a:	f7fc fc31 	bl	82a80 <memset>
   8621e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 862bc <__sinit+0xe4>
   86222:	68be      	ldr	r6, [r7, #8]
   86224:	f8df a098 	ldr.w	sl, [pc, #152]	; 862c0 <__sinit+0xe8>
   86228:	f8df 9098 	ldr.w	r9, [pc, #152]	; 862c4 <__sinit+0xec>
   8622c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 862c8 <__sinit+0xf0>
   86230:	2301      	movs	r3, #1
   86232:	2209      	movs	r2, #9
   86234:	61ed      	str	r5, [r5, #28]
   86236:	f8c5 b020 	str.w	fp, [r5, #32]
   8623a:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8623e:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   86242:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   86246:	4621      	mov	r1, r4
   86248:	81f3      	strh	r3, [r6, #14]
   8624a:	81b2      	strh	r2, [r6, #12]
   8624c:	6034      	str	r4, [r6, #0]
   8624e:	6074      	str	r4, [r6, #4]
   86250:	60b4      	str	r4, [r6, #8]
   86252:	6674      	str	r4, [r6, #100]	; 0x64
   86254:	6134      	str	r4, [r6, #16]
   86256:	6174      	str	r4, [r6, #20]
   86258:	61b4      	str	r4, [r6, #24]
   8625a:	2208      	movs	r2, #8
   8625c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   86260:	9301      	str	r3, [sp, #4]
   86262:	f7fc fc0d 	bl	82a80 <memset>
   86266:	68fd      	ldr	r5, [r7, #12]
   86268:	2012      	movs	r0, #18
   8626a:	2202      	movs	r2, #2
   8626c:	61f6      	str	r6, [r6, #28]
   8626e:	f8c6 b020 	str.w	fp, [r6, #32]
   86272:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   86276:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   8627a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   8627e:	4621      	mov	r1, r4
   86280:	81a8      	strh	r0, [r5, #12]
   86282:	81ea      	strh	r2, [r5, #14]
   86284:	602c      	str	r4, [r5, #0]
   86286:	606c      	str	r4, [r5, #4]
   86288:	60ac      	str	r4, [r5, #8]
   8628a:	666c      	str	r4, [r5, #100]	; 0x64
   8628c:	612c      	str	r4, [r5, #16]
   8628e:	616c      	str	r4, [r5, #20]
   86290:	61ac      	str	r4, [r5, #24]
   86292:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   86296:	2208      	movs	r2, #8
   86298:	f7fc fbf2 	bl	82a80 <memset>
   8629c:	9b01      	ldr	r3, [sp, #4]
   8629e:	61ed      	str	r5, [r5, #28]
   862a0:	f8c5 b020 	str.w	fp, [r5, #32]
   862a4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   862a8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   862ac:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   862b0:	63bb      	str	r3, [r7, #56]	; 0x38
   862b2:	b003      	add	sp, #12
   862b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   862b8:	000861cd 	.word	0x000861cd
   862bc:	00087b4d 	.word	0x00087b4d
   862c0:	00087b71 	.word	0x00087b71
   862c4:	00087ba9 	.word	0x00087ba9
   862c8:	00087bc9 	.word	0x00087bc9

000862cc <__sfp_lock_acquire>:
   862cc:	4770      	bx	lr
   862ce:	bf00      	nop

000862d0 <__sfp_lock_release>:
   862d0:	4770      	bx	lr
   862d2:	bf00      	nop

000862d4 <__libc_fini_array>:
   862d4:	b538      	push	{r3, r4, r5, lr}
   862d6:	4d09      	ldr	r5, [pc, #36]	; (862fc <__libc_fini_array+0x28>)
   862d8:	4c09      	ldr	r4, [pc, #36]	; (86300 <__libc_fini_array+0x2c>)
   862da:	1b64      	subs	r4, r4, r5
   862dc:	10a4      	asrs	r4, r4, #2
   862de:	bf18      	it	ne
   862e0:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   862e4:	d005      	beq.n	862f2 <__libc_fini_array+0x1e>
   862e6:	3c01      	subs	r4, #1
   862e8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   862ec:	4798      	blx	r3
   862ee:	2c00      	cmp	r4, #0
   862f0:	d1f9      	bne.n	862e6 <__libc_fini_array+0x12>
   862f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   862f6:	f002 bf5f 	b.w	891b8 <_fini>
   862fa:	bf00      	nop
   862fc:	000891c4 	.word	0x000891c4
   86300:	000891c8 	.word	0x000891c8

00086304 <_fputwc_r>:
   86304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86308:	8993      	ldrh	r3, [r2, #12]
   8630a:	460f      	mov	r7, r1
   8630c:	0499      	lsls	r1, r3, #18
   8630e:	b082      	sub	sp, #8
   86310:	4614      	mov	r4, r2
   86312:	4680      	mov	r8, r0
   86314:	d406      	bmi.n	86324 <_fputwc_r+0x20>
   86316:	6e52      	ldr	r2, [r2, #100]	; 0x64
   86318:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8631c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   86320:	81a3      	strh	r3, [r4, #12]
   86322:	6662      	str	r2, [r4, #100]	; 0x64
   86324:	f000 fb1c 	bl	86960 <__locale_mb_cur_max>
   86328:	2801      	cmp	r0, #1
   8632a:	d03e      	beq.n	863aa <_fputwc_r+0xa6>
   8632c:	463a      	mov	r2, r7
   8632e:	4640      	mov	r0, r8
   86330:	a901      	add	r1, sp, #4
   86332:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   86336:	f001 fccb 	bl	87cd0 <_wcrtomb_r>
   8633a:	1c42      	adds	r2, r0, #1
   8633c:	4606      	mov	r6, r0
   8633e:	d02d      	beq.n	8639c <_fputwc_r+0x98>
   86340:	2800      	cmp	r0, #0
   86342:	d03a      	beq.n	863ba <_fputwc_r+0xb6>
   86344:	f89d 1004 	ldrb.w	r1, [sp, #4]
   86348:	2500      	movs	r5, #0
   8634a:	e009      	b.n	86360 <_fputwc_r+0x5c>
   8634c:	6823      	ldr	r3, [r4, #0]
   8634e:	7019      	strb	r1, [r3, #0]
   86350:	6823      	ldr	r3, [r4, #0]
   86352:	3301      	adds	r3, #1
   86354:	6023      	str	r3, [r4, #0]
   86356:	3501      	adds	r5, #1
   86358:	42b5      	cmp	r5, r6
   8635a:	d22e      	bcs.n	863ba <_fputwc_r+0xb6>
   8635c:	ab01      	add	r3, sp, #4
   8635e:	5ce9      	ldrb	r1, [r5, r3]
   86360:	68a3      	ldr	r3, [r4, #8]
   86362:	3b01      	subs	r3, #1
   86364:	2b00      	cmp	r3, #0
   86366:	60a3      	str	r3, [r4, #8]
   86368:	daf0      	bge.n	8634c <_fputwc_r+0x48>
   8636a:	69a2      	ldr	r2, [r4, #24]
   8636c:	4293      	cmp	r3, r2
   8636e:	db06      	blt.n	8637e <_fputwc_r+0x7a>
   86370:	6823      	ldr	r3, [r4, #0]
   86372:	7019      	strb	r1, [r3, #0]
   86374:	6823      	ldr	r3, [r4, #0]
   86376:	7819      	ldrb	r1, [r3, #0]
   86378:	3301      	adds	r3, #1
   8637a:	290a      	cmp	r1, #10
   8637c:	d1ea      	bne.n	86354 <_fputwc_r+0x50>
   8637e:	4640      	mov	r0, r8
   86380:	4622      	mov	r2, r4
   86382:	f7fe fdeb 	bl	84f5c <__swbuf_r>
   86386:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   8638a:	4258      	negs	r0, r3
   8638c:	4158      	adcs	r0, r3
   8638e:	2800      	cmp	r0, #0
   86390:	d0e1      	beq.n	86356 <_fputwc_r+0x52>
   86392:	f04f 30ff 	mov.w	r0, #4294967295
   86396:	b002      	add	sp, #8
   86398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8639c:	89a3      	ldrh	r3, [r4, #12]
   8639e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   863a2:	81a3      	strh	r3, [r4, #12]
   863a4:	b002      	add	sp, #8
   863a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   863aa:	1e7b      	subs	r3, r7, #1
   863ac:	2bfe      	cmp	r3, #254	; 0xfe
   863ae:	d8bd      	bhi.n	8632c <_fputwc_r+0x28>
   863b0:	b2f9      	uxtb	r1, r7
   863b2:	4606      	mov	r6, r0
   863b4:	f88d 1004 	strb.w	r1, [sp, #4]
   863b8:	e7c6      	b.n	86348 <_fputwc_r+0x44>
   863ba:	4638      	mov	r0, r7
   863bc:	b002      	add	sp, #8
   863be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   863c2:	bf00      	nop

000863c4 <_malloc_trim_r>:
   863c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   863c6:	4d23      	ldr	r5, [pc, #140]	; (86454 <_malloc_trim_r+0x90>)
   863c8:	460f      	mov	r7, r1
   863ca:	4604      	mov	r4, r0
   863cc:	f000 fe96 	bl	870fc <__malloc_lock>
   863d0:	68ab      	ldr	r3, [r5, #8]
   863d2:	685e      	ldr	r6, [r3, #4]
   863d4:	f026 0603 	bic.w	r6, r6, #3
   863d8:	1bf1      	subs	r1, r6, r7
   863da:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   863de:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   863e2:	f021 010f 	bic.w	r1, r1, #15
   863e6:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   863ea:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   863ee:	db07      	blt.n	86400 <_malloc_trim_r+0x3c>
   863f0:	4620      	mov	r0, r4
   863f2:	2100      	movs	r1, #0
   863f4:	f001 fb98 	bl	87b28 <_sbrk_r>
   863f8:	68ab      	ldr	r3, [r5, #8]
   863fa:	4433      	add	r3, r6
   863fc:	4298      	cmp	r0, r3
   863fe:	d004      	beq.n	8640a <_malloc_trim_r+0x46>
   86400:	4620      	mov	r0, r4
   86402:	f000 fe7d 	bl	87100 <__malloc_unlock>
   86406:	2000      	movs	r0, #0
   86408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8640a:	4620      	mov	r0, r4
   8640c:	4279      	negs	r1, r7
   8640e:	f001 fb8b 	bl	87b28 <_sbrk_r>
   86412:	3001      	adds	r0, #1
   86414:	d00d      	beq.n	86432 <_malloc_trim_r+0x6e>
   86416:	4b10      	ldr	r3, [pc, #64]	; (86458 <_malloc_trim_r+0x94>)
   86418:	68aa      	ldr	r2, [r5, #8]
   8641a:	6819      	ldr	r1, [r3, #0]
   8641c:	1bf6      	subs	r6, r6, r7
   8641e:	f046 0601 	orr.w	r6, r6, #1
   86422:	4620      	mov	r0, r4
   86424:	1bc9      	subs	r1, r1, r7
   86426:	6056      	str	r6, [r2, #4]
   86428:	6019      	str	r1, [r3, #0]
   8642a:	f000 fe69 	bl	87100 <__malloc_unlock>
   8642e:	2001      	movs	r0, #1
   86430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86432:	4620      	mov	r0, r4
   86434:	2100      	movs	r1, #0
   86436:	f001 fb77 	bl	87b28 <_sbrk_r>
   8643a:	68ab      	ldr	r3, [r5, #8]
   8643c:	1ac2      	subs	r2, r0, r3
   8643e:	2a0f      	cmp	r2, #15
   86440:	ddde      	ble.n	86400 <_malloc_trim_r+0x3c>
   86442:	4d06      	ldr	r5, [pc, #24]	; (8645c <_malloc_trim_r+0x98>)
   86444:	4904      	ldr	r1, [pc, #16]	; (86458 <_malloc_trim_r+0x94>)
   86446:	682d      	ldr	r5, [r5, #0]
   86448:	f042 0201 	orr.w	r2, r2, #1
   8644c:	1b40      	subs	r0, r0, r5
   8644e:	605a      	str	r2, [r3, #4]
   86450:	6008      	str	r0, [r1, #0]
   86452:	e7d5      	b.n	86400 <_malloc_trim_r+0x3c>
   86454:	20070618 	.word	0x20070618
   86458:	20078d2c 	.word	0x20078d2c
   8645c:	20070a24 	.word	0x20070a24

00086460 <_free_r>:
   86460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86464:	460d      	mov	r5, r1
   86466:	4606      	mov	r6, r0
   86468:	2900      	cmp	r1, #0
   8646a:	d055      	beq.n	86518 <_free_r+0xb8>
   8646c:	f000 fe46 	bl	870fc <__malloc_lock>
   86470:	f855 1c04 	ldr.w	r1, [r5, #-4]
   86474:	f8df c170 	ldr.w	ip, [pc, #368]	; 865e8 <_free_r+0x188>
   86478:	f1a5 0408 	sub.w	r4, r5, #8
   8647c:	f021 0301 	bic.w	r3, r1, #1
   86480:	18e2      	adds	r2, r4, r3
   86482:	f8dc 0008 	ldr.w	r0, [ip, #8]
   86486:	6857      	ldr	r7, [r2, #4]
   86488:	4290      	cmp	r0, r2
   8648a:	f027 0703 	bic.w	r7, r7, #3
   8648e:	d068      	beq.n	86562 <_free_r+0x102>
   86490:	f011 0101 	ands.w	r1, r1, #1
   86494:	6057      	str	r7, [r2, #4]
   86496:	d032      	beq.n	864fe <_free_r+0x9e>
   86498:	2100      	movs	r1, #0
   8649a:	19d0      	adds	r0, r2, r7
   8649c:	6840      	ldr	r0, [r0, #4]
   8649e:	07c0      	lsls	r0, r0, #31
   864a0:	d406      	bmi.n	864b0 <_free_r+0x50>
   864a2:	443b      	add	r3, r7
   864a4:	6890      	ldr	r0, [r2, #8]
   864a6:	2900      	cmp	r1, #0
   864a8:	d04d      	beq.n	86546 <_free_r+0xe6>
   864aa:	68d2      	ldr	r2, [r2, #12]
   864ac:	60c2      	str	r2, [r0, #12]
   864ae:	6090      	str	r0, [r2, #8]
   864b0:	f043 0201 	orr.w	r2, r3, #1
   864b4:	6062      	str	r2, [r4, #4]
   864b6:	50e3      	str	r3, [r4, r3]
   864b8:	b9e1      	cbnz	r1, 864f4 <_free_r+0x94>
   864ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   864be:	d32d      	bcc.n	8651c <_free_r+0xbc>
   864c0:	0a5a      	lsrs	r2, r3, #9
   864c2:	2a04      	cmp	r2, #4
   864c4:	d869      	bhi.n	8659a <_free_r+0x13a>
   864c6:	0998      	lsrs	r0, r3, #6
   864c8:	3038      	adds	r0, #56	; 0x38
   864ca:	0041      	lsls	r1, r0, #1
   864cc:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   864d0:	f8dc 2008 	ldr.w	r2, [ip, #8]
   864d4:	4944      	ldr	r1, [pc, #272]	; (865e8 <_free_r+0x188>)
   864d6:	4562      	cmp	r2, ip
   864d8:	d065      	beq.n	865a6 <_free_r+0x146>
   864da:	6851      	ldr	r1, [r2, #4]
   864dc:	f021 0103 	bic.w	r1, r1, #3
   864e0:	428b      	cmp	r3, r1
   864e2:	d202      	bcs.n	864ea <_free_r+0x8a>
   864e4:	6892      	ldr	r2, [r2, #8]
   864e6:	4594      	cmp	ip, r2
   864e8:	d1f7      	bne.n	864da <_free_r+0x7a>
   864ea:	68d3      	ldr	r3, [r2, #12]
   864ec:	60e3      	str	r3, [r4, #12]
   864ee:	60a2      	str	r2, [r4, #8]
   864f0:	609c      	str	r4, [r3, #8]
   864f2:	60d4      	str	r4, [r2, #12]
   864f4:	4630      	mov	r0, r6
   864f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   864fa:	f000 be01 	b.w	87100 <__malloc_unlock>
   864fe:	f855 5c08 	ldr.w	r5, [r5, #-8]
   86502:	f10c 0808 	add.w	r8, ip, #8
   86506:	1b64      	subs	r4, r4, r5
   86508:	68a0      	ldr	r0, [r4, #8]
   8650a:	442b      	add	r3, r5
   8650c:	4540      	cmp	r0, r8
   8650e:	d042      	beq.n	86596 <_free_r+0x136>
   86510:	68e5      	ldr	r5, [r4, #12]
   86512:	60c5      	str	r5, [r0, #12]
   86514:	60a8      	str	r0, [r5, #8]
   86516:	e7c0      	b.n	8649a <_free_r+0x3a>
   86518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8651c:	08db      	lsrs	r3, r3, #3
   8651e:	109a      	asrs	r2, r3, #2
   86520:	2001      	movs	r0, #1
   86522:	4090      	lsls	r0, r2
   86524:	f8dc 1004 	ldr.w	r1, [ip, #4]
   86528:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   8652c:	689a      	ldr	r2, [r3, #8]
   8652e:	4301      	orrs	r1, r0
   86530:	60a2      	str	r2, [r4, #8]
   86532:	60e3      	str	r3, [r4, #12]
   86534:	f8cc 1004 	str.w	r1, [ip, #4]
   86538:	4630      	mov	r0, r6
   8653a:	609c      	str	r4, [r3, #8]
   8653c:	60d4      	str	r4, [r2, #12]
   8653e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86542:	f000 bddd 	b.w	87100 <__malloc_unlock>
   86546:	4d29      	ldr	r5, [pc, #164]	; (865ec <_free_r+0x18c>)
   86548:	42a8      	cmp	r0, r5
   8654a:	d1ae      	bne.n	864aa <_free_r+0x4a>
   8654c:	f043 0201 	orr.w	r2, r3, #1
   86550:	f8cc 4014 	str.w	r4, [ip, #20]
   86554:	f8cc 4010 	str.w	r4, [ip, #16]
   86558:	60e0      	str	r0, [r4, #12]
   8655a:	60a0      	str	r0, [r4, #8]
   8655c:	6062      	str	r2, [r4, #4]
   8655e:	50e3      	str	r3, [r4, r3]
   86560:	e7c8      	b.n	864f4 <_free_r+0x94>
   86562:	441f      	add	r7, r3
   86564:	07cb      	lsls	r3, r1, #31
   86566:	d407      	bmi.n	86578 <_free_r+0x118>
   86568:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8656c:	1a64      	subs	r4, r4, r1
   8656e:	68e3      	ldr	r3, [r4, #12]
   86570:	68a2      	ldr	r2, [r4, #8]
   86572:	440f      	add	r7, r1
   86574:	60d3      	str	r3, [r2, #12]
   86576:	609a      	str	r2, [r3, #8]
   86578:	4b1d      	ldr	r3, [pc, #116]	; (865f0 <_free_r+0x190>)
   8657a:	f047 0201 	orr.w	r2, r7, #1
   8657e:	681b      	ldr	r3, [r3, #0]
   86580:	6062      	str	r2, [r4, #4]
   86582:	429f      	cmp	r7, r3
   86584:	f8cc 4008 	str.w	r4, [ip, #8]
   86588:	d3b4      	bcc.n	864f4 <_free_r+0x94>
   8658a:	4b1a      	ldr	r3, [pc, #104]	; (865f4 <_free_r+0x194>)
   8658c:	4630      	mov	r0, r6
   8658e:	6819      	ldr	r1, [r3, #0]
   86590:	f7ff ff18 	bl	863c4 <_malloc_trim_r>
   86594:	e7ae      	b.n	864f4 <_free_r+0x94>
   86596:	2101      	movs	r1, #1
   86598:	e77f      	b.n	8649a <_free_r+0x3a>
   8659a:	2a14      	cmp	r2, #20
   8659c:	d80b      	bhi.n	865b6 <_free_r+0x156>
   8659e:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   865a2:	0041      	lsls	r1, r0, #1
   865a4:	e792      	b.n	864cc <_free_r+0x6c>
   865a6:	1080      	asrs	r0, r0, #2
   865a8:	2501      	movs	r5, #1
   865aa:	4085      	lsls	r5, r0
   865ac:	6848      	ldr	r0, [r1, #4]
   865ae:	4613      	mov	r3, r2
   865b0:	4328      	orrs	r0, r5
   865b2:	6048      	str	r0, [r1, #4]
   865b4:	e79a      	b.n	864ec <_free_r+0x8c>
   865b6:	2a54      	cmp	r2, #84	; 0x54
   865b8:	d803      	bhi.n	865c2 <_free_r+0x162>
   865ba:	0b18      	lsrs	r0, r3, #12
   865bc:	306e      	adds	r0, #110	; 0x6e
   865be:	0041      	lsls	r1, r0, #1
   865c0:	e784      	b.n	864cc <_free_r+0x6c>
   865c2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   865c6:	d803      	bhi.n	865d0 <_free_r+0x170>
   865c8:	0bd8      	lsrs	r0, r3, #15
   865ca:	3077      	adds	r0, #119	; 0x77
   865cc:	0041      	lsls	r1, r0, #1
   865ce:	e77d      	b.n	864cc <_free_r+0x6c>
   865d0:	f240 5154 	movw	r1, #1364	; 0x554
   865d4:	428a      	cmp	r2, r1
   865d6:	d803      	bhi.n	865e0 <_free_r+0x180>
   865d8:	0c98      	lsrs	r0, r3, #18
   865da:	307c      	adds	r0, #124	; 0x7c
   865dc:	0041      	lsls	r1, r0, #1
   865de:	e775      	b.n	864cc <_free_r+0x6c>
   865e0:	21fc      	movs	r1, #252	; 0xfc
   865e2:	207e      	movs	r0, #126	; 0x7e
   865e4:	e772      	b.n	864cc <_free_r+0x6c>
   865e6:	bf00      	nop
   865e8:	20070618 	.word	0x20070618
   865ec:	20070620 	.word	0x20070620
   865f0:	20070a20 	.word	0x20070a20
   865f4:	20078d28 	.word	0x20078d28

000865f8 <__sfvwrite_r>:
   865f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   865fc:	6893      	ldr	r3, [r2, #8]
   865fe:	b083      	sub	sp, #12
   86600:	4616      	mov	r6, r2
   86602:	4681      	mov	r9, r0
   86604:	460c      	mov	r4, r1
   86606:	b32b      	cbz	r3, 86654 <__sfvwrite_r+0x5c>
   86608:	898b      	ldrh	r3, [r1, #12]
   8660a:	0719      	lsls	r1, r3, #28
   8660c:	d526      	bpl.n	8665c <__sfvwrite_r+0x64>
   8660e:	6922      	ldr	r2, [r4, #16]
   86610:	b322      	cbz	r2, 8665c <__sfvwrite_r+0x64>
   86612:	f003 0202 	and.w	r2, r3, #2
   86616:	b292      	uxth	r2, r2
   86618:	6835      	ldr	r5, [r6, #0]
   8661a:	2a00      	cmp	r2, #0
   8661c:	d02c      	beq.n	86678 <__sfvwrite_r+0x80>
   8661e:	f04f 0a00 	mov.w	sl, #0
   86622:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 8690c <__sfvwrite_r+0x314>
   86626:	46d0      	mov	r8, sl
   86628:	45d8      	cmp	r8, fp
   8662a:	bf34      	ite	cc
   8662c:	4643      	movcc	r3, r8
   8662e:	465b      	movcs	r3, fp
   86630:	4652      	mov	r2, sl
   86632:	4648      	mov	r0, r9
   86634:	f1b8 0f00 	cmp.w	r8, #0
   86638:	d04f      	beq.n	866da <__sfvwrite_r+0xe2>
   8663a:	69e1      	ldr	r1, [r4, #28]
   8663c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8663e:	47b8      	blx	r7
   86640:	2800      	cmp	r0, #0
   86642:	dd56      	ble.n	866f2 <__sfvwrite_r+0xfa>
   86644:	68b3      	ldr	r3, [r6, #8]
   86646:	4482      	add	sl, r0
   86648:	1a1b      	subs	r3, r3, r0
   8664a:	ebc0 0808 	rsb	r8, r0, r8
   8664e:	60b3      	str	r3, [r6, #8]
   86650:	2b00      	cmp	r3, #0
   86652:	d1e9      	bne.n	86628 <__sfvwrite_r+0x30>
   86654:	2000      	movs	r0, #0
   86656:	b003      	add	sp, #12
   86658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8665c:	4648      	mov	r0, r9
   8665e:	4621      	mov	r1, r4
   86660:	f7fe fcd0 	bl	85004 <__swsetup_r>
   86664:	2800      	cmp	r0, #0
   86666:	f040 8148 	bne.w	868fa <__sfvwrite_r+0x302>
   8666a:	89a3      	ldrh	r3, [r4, #12]
   8666c:	6835      	ldr	r5, [r6, #0]
   8666e:	f003 0202 	and.w	r2, r3, #2
   86672:	b292      	uxth	r2, r2
   86674:	2a00      	cmp	r2, #0
   86676:	d1d2      	bne.n	8661e <__sfvwrite_r+0x26>
   86678:	f013 0a01 	ands.w	sl, r3, #1
   8667c:	d142      	bne.n	86704 <__sfvwrite_r+0x10c>
   8667e:	46d0      	mov	r8, sl
   86680:	f1b8 0f00 	cmp.w	r8, #0
   86684:	d023      	beq.n	866ce <__sfvwrite_r+0xd6>
   86686:	059a      	lsls	r2, r3, #22
   86688:	68a7      	ldr	r7, [r4, #8]
   8668a:	d576      	bpl.n	8677a <__sfvwrite_r+0x182>
   8668c:	45b8      	cmp	r8, r7
   8668e:	f0c0 80a4 	bcc.w	867da <__sfvwrite_r+0x1e2>
   86692:	f413 6f90 	tst.w	r3, #1152	; 0x480
   86696:	f040 80b2 	bne.w	867fe <__sfvwrite_r+0x206>
   8669a:	6820      	ldr	r0, [r4, #0]
   8669c:	46bb      	mov	fp, r7
   8669e:	4651      	mov	r1, sl
   866a0:	465a      	mov	r2, fp
   866a2:	f000 fcc5 	bl	87030 <memmove>
   866a6:	68a2      	ldr	r2, [r4, #8]
   866a8:	6821      	ldr	r1, [r4, #0]
   866aa:	1bd2      	subs	r2, r2, r7
   866ac:	eb01 030b 	add.w	r3, r1, fp
   866b0:	60a2      	str	r2, [r4, #8]
   866b2:	6023      	str	r3, [r4, #0]
   866b4:	4642      	mov	r2, r8
   866b6:	68b3      	ldr	r3, [r6, #8]
   866b8:	4492      	add	sl, r2
   866ba:	1a9b      	subs	r3, r3, r2
   866bc:	ebc2 0808 	rsb	r8, r2, r8
   866c0:	60b3      	str	r3, [r6, #8]
   866c2:	2b00      	cmp	r3, #0
   866c4:	d0c6      	beq.n	86654 <__sfvwrite_r+0x5c>
   866c6:	89a3      	ldrh	r3, [r4, #12]
   866c8:	f1b8 0f00 	cmp.w	r8, #0
   866cc:	d1db      	bne.n	86686 <__sfvwrite_r+0x8e>
   866ce:	f8d5 a000 	ldr.w	sl, [r5]
   866d2:	f8d5 8004 	ldr.w	r8, [r5, #4]
   866d6:	3508      	adds	r5, #8
   866d8:	e7d2      	b.n	86680 <__sfvwrite_r+0x88>
   866da:	f8d5 a000 	ldr.w	sl, [r5]
   866de:	f8d5 8004 	ldr.w	r8, [r5, #4]
   866e2:	3508      	adds	r5, #8
   866e4:	e7a0      	b.n	86628 <__sfvwrite_r+0x30>
   866e6:	4648      	mov	r0, r9
   866e8:	4621      	mov	r1, r4
   866ea:	f7ff fd59 	bl	861a0 <_fflush_r>
   866ee:	2800      	cmp	r0, #0
   866f0:	d059      	beq.n	867a6 <__sfvwrite_r+0x1ae>
   866f2:	89a3      	ldrh	r3, [r4, #12]
   866f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   866f8:	f04f 30ff 	mov.w	r0, #4294967295
   866fc:	81a3      	strh	r3, [r4, #12]
   866fe:	b003      	add	sp, #12
   86700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86704:	4692      	mov	sl, r2
   86706:	9201      	str	r2, [sp, #4]
   86708:	4693      	mov	fp, r2
   8670a:	4690      	mov	r8, r2
   8670c:	f1b8 0f00 	cmp.w	r8, #0
   86710:	d02b      	beq.n	8676a <__sfvwrite_r+0x172>
   86712:	9f01      	ldr	r7, [sp, #4]
   86714:	2f00      	cmp	r7, #0
   86716:	d064      	beq.n	867e2 <__sfvwrite_r+0x1ea>
   86718:	6820      	ldr	r0, [r4, #0]
   8671a:	6921      	ldr	r1, [r4, #16]
   8671c:	45c2      	cmp	sl, r8
   8671e:	bf34      	ite	cc
   86720:	4653      	movcc	r3, sl
   86722:	4643      	movcs	r3, r8
   86724:	4288      	cmp	r0, r1
   86726:	461f      	mov	r7, r3
   86728:	f8d4 c008 	ldr.w	ip, [r4, #8]
   8672c:	6962      	ldr	r2, [r4, #20]
   8672e:	d903      	bls.n	86738 <__sfvwrite_r+0x140>
   86730:	4494      	add	ip, r2
   86732:	4563      	cmp	r3, ip
   86734:	f300 80ae 	bgt.w	86894 <__sfvwrite_r+0x29c>
   86738:	4293      	cmp	r3, r2
   8673a:	db36      	blt.n	867aa <__sfvwrite_r+0x1b2>
   8673c:	4613      	mov	r3, r2
   8673e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   86740:	4648      	mov	r0, r9
   86742:	69e1      	ldr	r1, [r4, #28]
   86744:	465a      	mov	r2, fp
   86746:	47b8      	blx	r7
   86748:	1e07      	subs	r7, r0, #0
   8674a:	ddd2      	ble.n	866f2 <__sfvwrite_r+0xfa>
   8674c:	ebba 0a07 	subs.w	sl, sl, r7
   86750:	d03a      	beq.n	867c8 <__sfvwrite_r+0x1d0>
   86752:	68b3      	ldr	r3, [r6, #8]
   86754:	44bb      	add	fp, r7
   86756:	1bdb      	subs	r3, r3, r7
   86758:	ebc7 0808 	rsb	r8, r7, r8
   8675c:	60b3      	str	r3, [r6, #8]
   8675e:	2b00      	cmp	r3, #0
   86760:	f43f af78 	beq.w	86654 <__sfvwrite_r+0x5c>
   86764:	f1b8 0f00 	cmp.w	r8, #0
   86768:	d1d3      	bne.n	86712 <__sfvwrite_r+0x11a>
   8676a:	2700      	movs	r7, #0
   8676c:	f8d5 b000 	ldr.w	fp, [r5]
   86770:	f8d5 8004 	ldr.w	r8, [r5, #4]
   86774:	9701      	str	r7, [sp, #4]
   86776:	3508      	adds	r5, #8
   86778:	e7c8      	b.n	8670c <__sfvwrite_r+0x114>
   8677a:	6820      	ldr	r0, [r4, #0]
   8677c:	6923      	ldr	r3, [r4, #16]
   8677e:	4298      	cmp	r0, r3
   86780:	d802      	bhi.n	86788 <__sfvwrite_r+0x190>
   86782:	6963      	ldr	r3, [r4, #20]
   86784:	4598      	cmp	r8, r3
   86786:	d272      	bcs.n	8686e <__sfvwrite_r+0x276>
   86788:	45b8      	cmp	r8, r7
   8678a:	bf38      	it	cc
   8678c:	4647      	movcc	r7, r8
   8678e:	463a      	mov	r2, r7
   86790:	4651      	mov	r1, sl
   86792:	f000 fc4d 	bl	87030 <memmove>
   86796:	68a3      	ldr	r3, [r4, #8]
   86798:	6822      	ldr	r2, [r4, #0]
   8679a:	1bdb      	subs	r3, r3, r7
   8679c:	443a      	add	r2, r7
   8679e:	60a3      	str	r3, [r4, #8]
   867a0:	6022      	str	r2, [r4, #0]
   867a2:	2b00      	cmp	r3, #0
   867a4:	d09f      	beq.n	866e6 <__sfvwrite_r+0xee>
   867a6:	463a      	mov	r2, r7
   867a8:	e785      	b.n	866b6 <__sfvwrite_r+0xbe>
   867aa:	461a      	mov	r2, r3
   867ac:	4659      	mov	r1, fp
   867ae:	9300      	str	r3, [sp, #0]
   867b0:	f000 fc3e 	bl	87030 <memmove>
   867b4:	9b00      	ldr	r3, [sp, #0]
   867b6:	68a1      	ldr	r1, [r4, #8]
   867b8:	6822      	ldr	r2, [r4, #0]
   867ba:	1ac9      	subs	r1, r1, r3
   867bc:	ebba 0a07 	subs.w	sl, sl, r7
   867c0:	4413      	add	r3, r2
   867c2:	60a1      	str	r1, [r4, #8]
   867c4:	6023      	str	r3, [r4, #0]
   867c6:	d1c4      	bne.n	86752 <__sfvwrite_r+0x15a>
   867c8:	4648      	mov	r0, r9
   867ca:	4621      	mov	r1, r4
   867cc:	f7ff fce8 	bl	861a0 <_fflush_r>
   867d0:	2800      	cmp	r0, #0
   867d2:	d18e      	bne.n	866f2 <__sfvwrite_r+0xfa>
   867d4:	f8cd a004 	str.w	sl, [sp, #4]
   867d8:	e7bb      	b.n	86752 <__sfvwrite_r+0x15a>
   867da:	6820      	ldr	r0, [r4, #0]
   867dc:	4647      	mov	r7, r8
   867de:	46c3      	mov	fp, r8
   867e0:	e75d      	b.n	8669e <__sfvwrite_r+0xa6>
   867e2:	4658      	mov	r0, fp
   867e4:	210a      	movs	r1, #10
   867e6:	4642      	mov	r2, r8
   867e8:	f000 fbd8 	bl	86f9c <memchr>
   867ec:	2800      	cmp	r0, #0
   867ee:	d07f      	beq.n	868f0 <__sfvwrite_r+0x2f8>
   867f0:	f100 0a01 	add.w	sl, r0, #1
   867f4:	2701      	movs	r7, #1
   867f6:	ebcb 0a0a 	rsb	sl, fp, sl
   867fa:	9701      	str	r7, [sp, #4]
   867fc:	e78c      	b.n	86718 <__sfvwrite_r+0x120>
   867fe:	6822      	ldr	r2, [r4, #0]
   86800:	6921      	ldr	r1, [r4, #16]
   86802:	6967      	ldr	r7, [r4, #20]
   86804:	ebc1 0c02 	rsb	ip, r1, r2
   86808:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8680c:	f10c 0201 	add.w	r2, ip, #1
   86810:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   86814:	4442      	add	r2, r8
   86816:	107f      	asrs	r7, r7, #1
   86818:	4297      	cmp	r7, r2
   8681a:	bf34      	ite	cc
   8681c:	4617      	movcc	r7, r2
   8681e:	463a      	movcs	r2, r7
   86820:	055b      	lsls	r3, r3, #21
   86822:	d54f      	bpl.n	868c4 <__sfvwrite_r+0x2cc>
   86824:	4611      	mov	r1, r2
   86826:	4648      	mov	r0, r9
   86828:	f8cd c000 	str.w	ip, [sp]
   8682c:	f000 f91a 	bl	86a64 <_malloc_r>
   86830:	f8dd c000 	ldr.w	ip, [sp]
   86834:	4683      	mov	fp, r0
   86836:	2800      	cmp	r0, #0
   86838:	d062      	beq.n	86900 <__sfvwrite_r+0x308>
   8683a:	4662      	mov	r2, ip
   8683c:	6921      	ldr	r1, [r4, #16]
   8683e:	f8cd c000 	str.w	ip, [sp]
   86842:	f7fc f8a7 	bl	82994 <memcpy>
   86846:	89a2      	ldrh	r2, [r4, #12]
   86848:	f8dd c000 	ldr.w	ip, [sp]
   8684c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   86850:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   86854:	81a2      	strh	r2, [r4, #12]
   86856:	eb0b 000c 	add.w	r0, fp, ip
   8685a:	ebcc 0207 	rsb	r2, ip, r7
   8685e:	f8c4 b010 	str.w	fp, [r4, #16]
   86862:	6167      	str	r7, [r4, #20]
   86864:	6020      	str	r0, [r4, #0]
   86866:	60a2      	str	r2, [r4, #8]
   86868:	4647      	mov	r7, r8
   8686a:	46c3      	mov	fp, r8
   8686c:	e717      	b.n	8669e <__sfvwrite_r+0xa6>
   8686e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   86872:	4590      	cmp	r8, r2
   86874:	bf38      	it	cc
   86876:	4642      	movcc	r2, r8
   86878:	fb92 f2f3 	sdiv	r2, r2, r3
   8687c:	fb02 f303 	mul.w	r3, r2, r3
   86880:	6a67      	ldr	r7, [r4, #36]	; 0x24
   86882:	4648      	mov	r0, r9
   86884:	69e1      	ldr	r1, [r4, #28]
   86886:	4652      	mov	r2, sl
   86888:	47b8      	blx	r7
   8688a:	2800      	cmp	r0, #0
   8688c:	f77f af31 	ble.w	866f2 <__sfvwrite_r+0xfa>
   86890:	4602      	mov	r2, r0
   86892:	e710      	b.n	866b6 <__sfvwrite_r+0xbe>
   86894:	4662      	mov	r2, ip
   86896:	4659      	mov	r1, fp
   86898:	f8cd c000 	str.w	ip, [sp]
   8689c:	f000 fbc8 	bl	87030 <memmove>
   868a0:	f8dd c000 	ldr.w	ip, [sp]
   868a4:	6823      	ldr	r3, [r4, #0]
   868a6:	4648      	mov	r0, r9
   868a8:	4463      	add	r3, ip
   868aa:	6023      	str	r3, [r4, #0]
   868ac:	4621      	mov	r1, r4
   868ae:	f8cd c000 	str.w	ip, [sp]
   868b2:	f7ff fc75 	bl	861a0 <_fflush_r>
   868b6:	f8dd c000 	ldr.w	ip, [sp]
   868ba:	2800      	cmp	r0, #0
   868bc:	f47f af19 	bne.w	866f2 <__sfvwrite_r+0xfa>
   868c0:	4667      	mov	r7, ip
   868c2:	e743      	b.n	8674c <__sfvwrite_r+0x154>
   868c4:	4648      	mov	r0, r9
   868c6:	f8cd c000 	str.w	ip, [sp]
   868ca:	f000 ff25 	bl	87718 <_realloc_r>
   868ce:	f8dd c000 	ldr.w	ip, [sp]
   868d2:	4683      	mov	fp, r0
   868d4:	2800      	cmp	r0, #0
   868d6:	d1be      	bne.n	86856 <__sfvwrite_r+0x25e>
   868d8:	4648      	mov	r0, r9
   868da:	6921      	ldr	r1, [r4, #16]
   868dc:	f7ff fdc0 	bl	86460 <_free_r>
   868e0:	89a3      	ldrh	r3, [r4, #12]
   868e2:	220c      	movs	r2, #12
   868e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   868e8:	b29b      	uxth	r3, r3
   868ea:	f8c9 2000 	str.w	r2, [r9]
   868ee:	e701      	b.n	866f4 <__sfvwrite_r+0xfc>
   868f0:	2701      	movs	r7, #1
   868f2:	f108 0a01 	add.w	sl, r8, #1
   868f6:	9701      	str	r7, [sp, #4]
   868f8:	e70e      	b.n	86718 <__sfvwrite_r+0x120>
   868fa:	f04f 30ff 	mov.w	r0, #4294967295
   868fe:	e6aa      	b.n	86656 <__sfvwrite_r+0x5e>
   86900:	230c      	movs	r3, #12
   86902:	f8c9 3000 	str.w	r3, [r9]
   86906:	89a3      	ldrh	r3, [r4, #12]
   86908:	e6f4      	b.n	866f4 <__sfvwrite_r+0xfc>
   8690a:	bf00      	nop
   8690c:	7ffffc00 	.word	0x7ffffc00

00086910 <_fwalk>:
   86910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86914:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   86918:	4688      	mov	r8, r1
   8691a:	d019      	beq.n	86950 <_fwalk+0x40>
   8691c:	2600      	movs	r6, #0
   8691e:	687d      	ldr	r5, [r7, #4]
   86920:	68bc      	ldr	r4, [r7, #8]
   86922:	3d01      	subs	r5, #1
   86924:	d40e      	bmi.n	86944 <_fwalk+0x34>
   86926:	89a3      	ldrh	r3, [r4, #12]
   86928:	3d01      	subs	r5, #1
   8692a:	2b01      	cmp	r3, #1
   8692c:	d906      	bls.n	8693c <_fwalk+0x2c>
   8692e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   86932:	4620      	mov	r0, r4
   86934:	3301      	adds	r3, #1
   86936:	d001      	beq.n	8693c <_fwalk+0x2c>
   86938:	47c0      	blx	r8
   8693a:	4306      	orrs	r6, r0
   8693c:	1c6b      	adds	r3, r5, #1
   8693e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   86942:	d1f0      	bne.n	86926 <_fwalk+0x16>
   86944:	683f      	ldr	r7, [r7, #0]
   86946:	2f00      	cmp	r7, #0
   86948:	d1e9      	bne.n	8691e <_fwalk+0xe>
   8694a:	4630      	mov	r0, r6
   8694c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86950:	463e      	mov	r6, r7
   86952:	4630      	mov	r0, r6
   86954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00086958 <__locale_charset>:
   86958:	4800      	ldr	r0, [pc, #0]	; (8695c <__locale_charset+0x4>)
   8695a:	4770      	bx	lr
   8695c:	200705f4 	.word	0x200705f4

00086960 <__locale_mb_cur_max>:
   86960:	4b01      	ldr	r3, [pc, #4]	; (86968 <__locale_mb_cur_max+0x8>)
   86962:	6818      	ldr	r0, [r3, #0]
   86964:	4770      	bx	lr
   86966:	bf00      	nop
   86968:	20070614 	.word	0x20070614

0008696c <_localeconv_r>:
   8696c:	4800      	ldr	r0, [pc, #0]	; (86970 <_localeconv_r+0x4>)
   8696e:	4770      	bx	lr
   86970:	200705bc 	.word	0x200705bc

00086974 <__smakebuf_r>:
   86974:	b5f0      	push	{r4, r5, r6, r7, lr}
   86976:	898b      	ldrh	r3, [r1, #12]
   86978:	b091      	sub	sp, #68	; 0x44
   8697a:	b29a      	uxth	r2, r3
   8697c:	0796      	lsls	r6, r2, #30
   8697e:	460c      	mov	r4, r1
   86980:	4605      	mov	r5, r0
   86982:	d437      	bmi.n	869f4 <__smakebuf_r+0x80>
   86984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86988:	2900      	cmp	r1, #0
   8698a:	db17      	blt.n	869bc <__smakebuf_r+0x48>
   8698c:	aa01      	add	r2, sp, #4
   8698e:	f001 fac7 	bl	87f20 <_fstat_r>
   86992:	2800      	cmp	r0, #0
   86994:	db10      	blt.n	869b8 <__smakebuf_r+0x44>
   86996:	9b02      	ldr	r3, [sp, #8]
   86998:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   8699c:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   869a0:	424f      	negs	r7, r1
   869a2:	414f      	adcs	r7, r1
   869a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   869a8:	d02c      	beq.n	86a04 <__smakebuf_r+0x90>
   869aa:	89a3      	ldrh	r3, [r4, #12]
   869ac:	f44f 6680 	mov.w	r6, #1024	; 0x400
   869b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   869b4:	81a3      	strh	r3, [r4, #12]
   869b6:	e00b      	b.n	869d0 <__smakebuf_r+0x5c>
   869b8:	89a3      	ldrh	r3, [r4, #12]
   869ba:	b29a      	uxth	r2, r3
   869bc:	f012 0f80 	tst.w	r2, #128	; 0x80
   869c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   869c4:	81a3      	strh	r3, [r4, #12]
   869c6:	bf14      	ite	ne
   869c8:	2640      	movne	r6, #64	; 0x40
   869ca:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   869ce:	2700      	movs	r7, #0
   869d0:	4628      	mov	r0, r5
   869d2:	4631      	mov	r1, r6
   869d4:	f000 f846 	bl	86a64 <_malloc_r>
   869d8:	89a3      	ldrh	r3, [r4, #12]
   869da:	2800      	cmp	r0, #0
   869dc:	d029      	beq.n	86a32 <__smakebuf_r+0xbe>
   869de:	4a1b      	ldr	r2, [pc, #108]	; (86a4c <__smakebuf_r+0xd8>)
   869e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   869e4:	63ea      	str	r2, [r5, #60]	; 0x3c
   869e6:	81a3      	strh	r3, [r4, #12]
   869e8:	6020      	str	r0, [r4, #0]
   869ea:	6120      	str	r0, [r4, #16]
   869ec:	6166      	str	r6, [r4, #20]
   869ee:	b9a7      	cbnz	r7, 86a1a <__smakebuf_r+0xa6>
   869f0:	b011      	add	sp, #68	; 0x44
   869f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   869f4:	f101 0343 	add.w	r3, r1, #67	; 0x43
   869f8:	2201      	movs	r2, #1
   869fa:	600b      	str	r3, [r1, #0]
   869fc:	610b      	str	r3, [r1, #16]
   869fe:	614a      	str	r2, [r1, #20]
   86a00:	b011      	add	sp, #68	; 0x44
   86a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86a04:	4a12      	ldr	r2, [pc, #72]	; (86a50 <__smakebuf_r+0xdc>)
   86a06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   86a08:	4293      	cmp	r3, r2
   86a0a:	d1ce      	bne.n	869aa <__smakebuf_r+0x36>
   86a0c:	89a3      	ldrh	r3, [r4, #12]
   86a0e:	f44f 6680 	mov.w	r6, #1024	; 0x400
   86a12:	4333      	orrs	r3, r6
   86a14:	81a3      	strh	r3, [r4, #12]
   86a16:	64e6      	str	r6, [r4, #76]	; 0x4c
   86a18:	e7da      	b.n	869d0 <__smakebuf_r+0x5c>
   86a1a:	4628      	mov	r0, r5
   86a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86a20:	f001 fa92 	bl	87f48 <_isatty_r>
   86a24:	2800      	cmp	r0, #0
   86a26:	d0e3      	beq.n	869f0 <__smakebuf_r+0x7c>
   86a28:	89a3      	ldrh	r3, [r4, #12]
   86a2a:	f043 0301 	orr.w	r3, r3, #1
   86a2e:	81a3      	strh	r3, [r4, #12]
   86a30:	e7de      	b.n	869f0 <__smakebuf_r+0x7c>
   86a32:	059a      	lsls	r2, r3, #22
   86a34:	d4dc      	bmi.n	869f0 <__smakebuf_r+0x7c>
   86a36:	f104 0243 	add.w	r2, r4, #67	; 0x43
   86a3a:	f043 0302 	orr.w	r3, r3, #2
   86a3e:	2101      	movs	r1, #1
   86a40:	81a3      	strh	r3, [r4, #12]
   86a42:	6022      	str	r2, [r4, #0]
   86a44:	6122      	str	r2, [r4, #16]
   86a46:	6161      	str	r1, [r4, #20]
   86a48:	e7d2      	b.n	869f0 <__smakebuf_r+0x7c>
   86a4a:	bf00      	nop
   86a4c:	000861cd 	.word	0x000861cd
   86a50:	00087ba9 	.word	0x00087ba9

00086a54 <malloc>:
   86a54:	4b02      	ldr	r3, [pc, #8]	; (86a60 <malloc+0xc>)
   86a56:	4601      	mov	r1, r0
   86a58:	6818      	ldr	r0, [r3, #0]
   86a5a:	f000 b803 	b.w	86a64 <_malloc_r>
   86a5e:	bf00      	nop
   86a60:	200705b8 	.word	0x200705b8

00086a64 <_malloc_r>:
   86a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86a68:	f101 050b 	add.w	r5, r1, #11
   86a6c:	2d16      	cmp	r5, #22
   86a6e:	b083      	sub	sp, #12
   86a70:	4606      	mov	r6, r0
   86a72:	d927      	bls.n	86ac4 <_malloc_r+0x60>
   86a74:	f035 0507 	bics.w	r5, r5, #7
   86a78:	d427      	bmi.n	86aca <_malloc_r+0x66>
   86a7a:	42a9      	cmp	r1, r5
   86a7c:	d825      	bhi.n	86aca <_malloc_r+0x66>
   86a7e:	4630      	mov	r0, r6
   86a80:	f000 fb3c 	bl	870fc <__malloc_lock>
   86a84:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   86a88:	d226      	bcs.n	86ad8 <_malloc_r+0x74>
   86a8a:	4fc1      	ldr	r7, [pc, #772]	; (86d90 <_malloc_r+0x32c>)
   86a8c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   86a90:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   86a94:	68dc      	ldr	r4, [r3, #12]
   86a96:	429c      	cmp	r4, r3
   86a98:	f000 81d2 	beq.w	86e40 <_malloc_r+0x3dc>
   86a9c:	6863      	ldr	r3, [r4, #4]
   86a9e:	68e2      	ldr	r2, [r4, #12]
   86aa0:	f023 0303 	bic.w	r3, r3, #3
   86aa4:	4423      	add	r3, r4
   86aa6:	6858      	ldr	r0, [r3, #4]
   86aa8:	68a1      	ldr	r1, [r4, #8]
   86aaa:	f040 0501 	orr.w	r5, r0, #1
   86aae:	60ca      	str	r2, [r1, #12]
   86ab0:	4630      	mov	r0, r6
   86ab2:	6091      	str	r1, [r2, #8]
   86ab4:	605d      	str	r5, [r3, #4]
   86ab6:	f000 fb23 	bl	87100 <__malloc_unlock>
   86aba:	3408      	adds	r4, #8
   86abc:	4620      	mov	r0, r4
   86abe:	b003      	add	sp, #12
   86ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86ac4:	2510      	movs	r5, #16
   86ac6:	42a9      	cmp	r1, r5
   86ac8:	d9d9      	bls.n	86a7e <_malloc_r+0x1a>
   86aca:	2400      	movs	r4, #0
   86acc:	230c      	movs	r3, #12
   86ace:	4620      	mov	r0, r4
   86ad0:	6033      	str	r3, [r6, #0]
   86ad2:	b003      	add	sp, #12
   86ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86ad8:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   86adc:	f000 8089 	beq.w	86bf2 <_malloc_r+0x18e>
   86ae0:	f1bc 0f04 	cmp.w	ip, #4
   86ae4:	f200 8160 	bhi.w	86da8 <_malloc_r+0x344>
   86ae8:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   86aec:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   86af0:	ea4f 014c 	mov.w	r1, ip, lsl #1
   86af4:	4fa6      	ldr	r7, [pc, #664]	; (86d90 <_malloc_r+0x32c>)
   86af6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   86afa:	68cc      	ldr	r4, [r1, #12]
   86afc:	42a1      	cmp	r1, r4
   86afe:	d105      	bne.n	86b0c <_malloc_r+0xa8>
   86b00:	e00c      	b.n	86b1c <_malloc_r+0xb8>
   86b02:	2b00      	cmp	r3, #0
   86b04:	da79      	bge.n	86bfa <_malloc_r+0x196>
   86b06:	68e4      	ldr	r4, [r4, #12]
   86b08:	42a1      	cmp	r1, r4
   86b0a:	d007      	beq.n	86b1c <_malloc_r+0xb8>
   86b0c:	6862      	ldr	r2, [r4, #4]
   86b0e:	f022 0203 	bic.w	r2, r2, #3
   86b12:	1b53      	subs	r3, r2, r5
   86b14:	2b0f      	cmp	r3, #15
   86b16:	ddf4      	ble.n	86b02 <_malloc_r+0x9e>
   86b18:	f10c 3cff 	add.w	ip, ip, #4294967295
   86b1c:	f10c 0c01 	add.w	ip, ip, #1
   86b20:	4b9b      	ldr	r3, [pc, #620]	; (86d90 <_malloc_r+0x32c>)
   86b22:	693c      	ldr	r4, [r7, #16]
   86b24:	f103 0e08 	add.w	lr, r3, #8
   86b28:	4574      	cmp	r4, lr
   86b2a:	f000 817e 	beq.w	86e2a <_malloc_r+0x3c6>
   86b2e:	6861      	ldr	r1, [r4, #4]
   86b30:	f021 0103 	bic.w	r1, r1, #3
   86b34:	1b4a      	subs	r2, r1, r5
   86b36:	2a0f      	cmp	r2, #15
   86b38:	f300 8164 	bgt.w	86e04 <_malloc_r+0x3a0>
   86b3c:	2a00      	cmp	r2, #0
   86b3e:	f8c3 e014 	str.w	lr, [r3, #20]
   86b42:	f8c3 e010 	str.w	lr, [r3, #16]
   86b46:	da69      	bge.n	86c1c <_malloc_r+0x1b8>
   86b48:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   86b4c:	f080 813a 	bcs.w	86dc4 <_malloc_r+0x360>
   86b50:	08c9      	lsrs	r1, r1, #3
   86b52:	108a      	asrs	r2, r1, #2
   86b54:	f04f 0801 	mov.w	r8, #1
   86b58:	fa08 f802 	lsl.w	r8, r8, r2
   86b5c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   86b60:	685a      	ldr	r2, [r3, #4]
   86b62:	6888      	ldr	r0, [r1, #8]
   86b64:	ea48 0202 	orr.w	r2, r8, r2
   86b68:	60a0      	str	r0, [r4, #8]
   86b6a:	60e1      	str	r1, [r4, #12]
   86b6c:	605a      	str	r2, [r3, #4]
   86b6e:	608c      	str	r4, [r1, #8]
   86b70:	60c4      	str	r4, [r0, #12]
   86b72:	ea4f 03ac 	mov.w	r3, ip, asr #2
   86b76:	2001      	movs	r0, #1
   86b78:	4098      	lsls	r0, r3
   86b7a:	4290      	cmp	r0, r2
   86b7c:	d85b      	bhi.n	86c36 <_malloc_r+0x1d2>
   86b7e:	4202      	tst	r2, r0
   86b80:	d106      	bne.n	86b90 <_malloc_r+0x12c>
   86b82:	f02c 0c03 	bic.w	ip, ip, #3
   86b86:	0040      	lsls	r0, r0, #1
   86b88:	4202      	tst	r2, r0
   86b8a:	f10c 0c04 	add.w	ip, ip, #4
   86b8e:	d0fa      	beq.n	86b86 <_malloc_r+0x122>
   86b90:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   86b94:	4644      	mov	r4, r8
   86b96:	46e1      	mov	r9, ip
   86b98:	68e3      	ldr	r3, [r4, #12]
   86b9a:	429c      	cmp	r4, r3
   86b9c:	d107      	bne.n	86bae <_malloc_r+0x14a>
   86b9e:	e146      	b.n	86e2e <_malloc_r+0x3ca>
   86ba0:	2a00      	cmp	r2, #0
   86ba2:	f280 8157 	bge.w	86e54 <_malloc_r+0x3f0>
   86ba6:	68db      	ldr	r3, [r3, #12]
   86ba8:	429c      	cmp	r4, r3
   86baa:	f000 8140 	beq.w	86e2e <_malloc_r+0x3ca>
   86bae:	6859      	ldr	r1, [r3, #4]
   86bb0:	f021 0103 	bic.w	r1, r1, #3
   86bb4:	1b4a      	subs	r2, r1, r5
   86bb6:	2a0f      	cmp	r2, #15
   86bb8:	ddf2      	ble.n	86ba0 <_malloc_r+0x13c>
   86bba:	461c      	mov	r4, r3
   86bbc:	f854 cf08 	ldr.w	ip, [r4, #8]!
   86bc0:	68d9      	ldr	r1, [r3, #12]
   86bc2:	f045 0901 	orr.w	r9, r5, #1
   86bc6:	f042 0801 	orr.w	r8, r2, #1
   86bca:	441d      	add	r5, r3
   86bcc:	f8c3 9004 	str.w	r9, [r3, #4]
   86bd0:	4630      	mov	r0, r6
   86bd2:	f8cc 100c 	str.w	r1, [ip, #12]
   86bd6:	f8c1 c008 	str.w	ip, [r1, #8]
   86bda:	617d      	str	r5, [r7, #20]
   86bdc:	613d      	str	r5, [r7, #16]
   86bde:	f8c5 e00c 	str.w	lr, [r5, #12]
   86be2:	f8c5 e008 	str.w	lr, [r5, #8]
   86be6:	f8c5 8004 	str.w	r8, [r5, #4]
   86bea:	50aa      	str	r2, [r5, r2]
   86bec:	f000 fa88 	bl	87100 <__malloc_unlock>
   86bf0:	e764      	b.n	86abc <_malloc_r+0x58>
   86bf2:	217e      	movs	r1, #126	; 0x7e
   86bf4:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   86bf8:	e77c      	b.n	86af4 <_malloc_r+0x90>
   86bfa:	4422      	add	r2, r4
   86bfc:	6850      	ldr	r0, [r2, #4]
   86bfe:	68e3      	ldr	r3, [r4, #12]
   86c00:	68a1      	ldr	r1, [r4, #8]
   86c02:	f040 0501 	orr.w	r5, r0, #1
   86c06:	60cb      	str	r3, [r1, #12]
   86c08:	4630      	mov	r0, r6
   86c0a:	6099      	str	r1, [r3, #8]
   86c0c:	6055      	str	r5, [r2, #4]
   86c0e:	f000 fa77 	bl	87100 <__malloc_unlock>
   86c12:	3408      	adds	r4, #8
   86c14:	4620      	mov	r0, r4
   86c16:	b003      	add	sp, #12
   86c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86c1c:	4421      	add	r1, r4
   86c1e:	684b      	ldr	r3, [r1, #4]
   86c20:	4630      	mov	r0, r6
   86c22:	f043 0301 	orr.w	r3, r3, #1
   86c26:	604b      	str	r3, [r1, #4]
   86c28:	f000 fa6a 	bl	87100 <__malloc_unlock>
   86c2c:	3408      	adds	r4, #8
   86c2e:	4620      	mov	r0, r4
   86c30:	b003      	add	sp, #12
   86c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86c36:	68bc      	ldr	r4, [r7, #8]
   86c38:	6863      	ldr	r3, [r4, #4]
   86c3a:	f023 0903 	bic.w	r9, r3, #3
   86c3e:	45a9      	cmp	r9, r5
   86c40:	d304      	bcc.n	86c4c <_malloc_r+0x1e8>
   86c42:	ebc5 0309 	rsb	r3, r5, r9
   86c46:	2b0f      	cmp	r3, #15
   86c48:	f300 8091 	bgt.w	86d6e <_malloc_r+0x30a>
   86c4c:	4b51      	ldr	r3, [pc, #324]	; (86d94 <_malloc_r+0x330>)
   86c4e:	4a52      	ldr	r2, [pc, #328]	; (86d98 <_malloc_r+0x334>)
   86c50:	6819      	ldr	r1, [r3, #0]
   86c52:	6813      	ldr	r3, [r2, #0]
   86c54:	eb05 0a01 	add.w	sl, r5, r1
   86c58:	3301      	adds	r3, #1
   86c5a:	eb04 0b09 	add.w	fp, r4, r9
   86c5e:	f000 8161 	beq.w	86f24 <_malloc_r+0x4c0>
   86c62:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   86c66:	f10a 0a0f 	add.w	sl, sl, #15
   86c6a:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   86c6e:	f02a 0a0f 	bic.w	sl, sl, #15
   86c72:	4630      	mov	r0, r6
   86c74:	4651      	mov	r1, sl
   86c76:	9201      	str	r2, [sp, #4]
   86c78:	f000 ff56 	bl	87b28 <_sbrk_r>
   86c7c:	f1b0 3fff 	cmp.w	r0, #4294967295
   86c80:	4680      	mov	r8, r0
   86c82:	9a01      	ldr	r2, [sp, #4]
   86c84:	f000 8101 	beq.w	86e8a <_malloc_r+0x426>
   86c88:	4583      	cmp	fp, r0
   86c8a:	f200 80fb 	bhi.w	86e84 <_malloc_r+0x420>
   86c8e:	f8df c114 	ldr.w	ip, [pc, #276]	; 86da4 <_malloc_r+0x340>
   86c92:	45c3      	cmp	fp, r8
   86c94:	f8dc 3000 	ldr.w	r3, [ip]
   86c98:	4453      	add	r3, sl
   86c9a:	f8cc 3000 	str.w	r3, [ip]
   86c9e:	f000 814a 	beq.w	86f36 <_malloc_r+0x4d2>
   86ca2:	6812      	ldr	r2, [r2, #0]
   86ca4:	493c      	ldr	r1, [pc, #240]	; (86d98 <_malloc_r+0x334>)
   86ca6:	3201      	adds	r2, #1
   86ca8:	bf1b      	ittet	ne
   86caa:	ebcb 0b08 	rsbne	fp, fp, r8
   86cae:	445b      	addne	r3, fp
   86cb0:	f8c1 8000 	streq.w	r8, [r1]
   86cb4:	f8cc 3000 	strne.w	r3, [ip]
   86cb8:	f018 0307 	ands.w	r3, r8, #7
   86cbc:	f000 8114 	beq.w	86ee8 <_malloc_r+0x484>
   86cc0:	f1c3 0208 	rsb	r2, r3, #8
   86cc4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   86cc8:	4490      	add	r8, r2
   86cca:	3308      	adds	r3, #8
   86ccc:	44c2      	add	sl, r8
   86cce:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   86cd2:	ebca 0a03 	rsb	sl, sl, r3
   86cd6:	4651      	mov	r1, sl
   86cd8:	4630      	mov	r0, r6
   86cda:	f8cd c004 	str.w	ip, [sp, #4]
   86cde:	f000 ff23 	bl	87b28 <_sbrk_r>
   86ce2:	1c43      	adds	r3, r0, #1
   86ce4:	f8dd c004 	ldr.w	ip, [sp, #4]
   86ce8:	f000 8135 	beq.w	86f56 <_malloc_r+0x4f2>
   86cec:	ebc8 0200 	rsb	r2, r8, r0
   86cf0:	4452      	add	r2, sl
   86cf2:	f042 0201 	orr.w	r2, r2, #1
   86cf6:	f8dc 3000 	ldr.w	r3, [ip]
   86cfa:	42bc      	cmp	r4, r7
   86cfc:	4453      	add	r3, sl
   86cfe:	f8c7 8008 	str.w	r8, [r7, #8]
   86d02:	f8cc 3000 	str.w	r3, [ip]
   86d06:	f8c8 2004 	str.w	r2, [r8, #4]
   86d0a:	f8df a098 	ldr.w	sl, [pc, #152]	; 86da4 <_malloc_r+0x340>
   86d0e:	d015      	beq.n	86d3c <_malloc_r+0x2d8>
   86d10:	f1b9 0f0f 	cmp.w	r9, #15
   86d14:	f240 80eb 	bls.w	86eee <_malloc_r+0x48a>
   86d18:	6861      	ldr	r1, [r4, #4]
   86d1a:	f1a9 020c 	sub.w	r2, r9, #12
   86d1e:	f022 0207 	bic.w	r2, r2, #7
   86d22:	f001 0101 	and.w	r1, r1, #1
   86d26:	ea42 0e01 	orr.w	lr, r2, r1
   86d2a:	2005      	movs	r0, #5
   86d2c:	18a1      	adds	r1, r4, r2
   86d2e:	2a0f      	cmp	r2, #15
   86d30:	f8c4 e004 	str.w	lr, [r4, #4]
   86d34:	6048      	str	r0, [r1, #4]
   86d36:	6088      	str	r0, [r1, #8]
   86d38:	f200 8111 	bhi.w	86f5e <_malloc_r+0x4fa>
   86d3c:	4a17      	ldr	r2, [pc, #92]	; (86d9c <_malloc_r+0x338>)
   86d3e:	68bc      	ldr	r4, [r7, #8]
   86d40:	6811      	ldr	r1, [r2, #0]
   86d42:	428b      	cmp	r3, r1
   86d44:	bf88      	it	hi
   86d46:	6013      	strhi	r3, [r2, #0]
   86d48:	4a15      	ldr	r2, [pc, #84]	; (86da0 <_malloc_r+0x33c>)
   86d4a:	6811      	ldr	r1, [r2, #0]
   86d4c:	428b      	cmp	r3, r1
   86d4e:	bf88      	it	hi
   86d50:	6013      	strhi	r3, [r2, #0]
   86d52:	6862      	ldr	r2, [r4, #4]
   86d54:	f022 0203 	bic.w	r2, r2, #3
   86d58:	4295      	cmp	r5, r2
   86d5a:	ebc5 0302 	rsb	r3, r5, r2
   86d5e:	d801      	bhi.n	86d64 <_malloc_r+0x300>
   86d60:	2b0f      	cmp	r3, #15
   86d62:	dc04      	bgt.n	86d6e <_malloc_r+0x30a>
   86d64:	4630      	mov	r0, r6
   86d66:	f000 f9cb 	bl	87100 <__malloc_unlock>
   86d6a:	2400      	movs	r4, #0
   86d6c:	e6a6      	b.n	86abc <_malloc_r+0x58>
   86d6e:	f045 0201 	orr.w	r2, r5, #1
   86d72:	f043 0301 	orr.w	r3, r3, #1
   86d76:	4425      	add	r5, r4
   86d78:	6062      	str	r2, [r4, #4]
   86d7a:	4630      	mov	r0, r6
   86d7c:	60bd      	str	r5, [r7, #8]
   86d7e:	606b      	str	r3, [r5, #4]
   86d80:	f000 f9be 	bl	87100 <__malloc_unlock>
   86d84:	3408      	adds	r4, #8
   86d86:	4620      	mov	r0, r4
   86d88:	b003      	add	sp, #12
   86d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86d8e:	bf00      	nop
   86d90:	20070618 	.word	0x20070618
   86d94:	20078d28 	.word	0x20078d28
   86d98:	20070a24 	.word	0x20070a24
   86d9c:	20078d24 	.word	0x20078d24
   86da0:	20078d20 	.word	0x20078d20
   86da4:	20078d2c 	.word	0x20078d2c
   86da8:	f1bc 0f14 	cmp.w	ip, #20
   86dac:	d961      	bls.n	86e72 <_malloc_r+0x40e>
   86dae:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   86db2:	f200 808f 	bhi.w	86ed4 <_malloc_r+0x470>
   86db6:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   86dba:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   86dbe:	ea4f 014c 	mov.w	r1, ip, lsl #1
   86dc2:	e697      	b.n	86af4 <_malloc_r+0x90>
   86dc4:	0a4b      	lsrs	r3, r1, #9
   86dc6:	2b04      	cmp	r3, #4
   86dc8:	d958      	bls.n	86e7c <_malloc_r+0x418>
   86dca:	2b14      	cmp	r3, #20
   86dcc:	f200 80ad 	bhi.w	86f2a <_malloc_r+0x4c6>
   86dd0:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   86dd4:	0050      	lsls	r0, r2, #1
   86dd6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   86dda:	6883      	ldr	r3, [r0, #8]
   86ddc:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 86f98 <_malloc_r+0x534>
   86de0:	4283      	cmp	r3, r0
   86de2:	f000 808a 	beq.w	86efa <_malloc_r+0x496>
   86de6:	685a      	ldr	r2, [r3, #4]
   86de8:	f022 0203 	bic.w	r2, r2, #3
   86dec:	4291      	cmp	r1, r2
   86dee:	d202      	bcs.n	86df6 <_malloc_r+0x392>
   86df0:	689b      	ldr	r3, [r3, #8]
   86df2:	4298      	cmp	r0, r3
   86df4:	d1f7      	bne.n	86de6 <_malloc_r+0x382>
   86df6:	68d9      	ldr	r1, [r3, #12]
   86df8:	687a      	ldr	r2, [r7, #4]
   86dfa:	60e1      	str	r1, [r4, #12]
   86dfc:	60a3      	str	r3, [r4, #8]
   86dfe:	608c      	str	r4, [r1, #8]
   86e00:	60dc      	str	r4, [r3, #12]
   86e02:	e6b6      	b.n	86b72 <_malloc_r+0x10e>
   86e04:	f045 0701 	orr.w	r7, r5, #1
   86e08:	f042 0101 	orr.w	r1, r2, #1
   86e0c:	4425      	add	r5, r4
   86e0e:	6067      	str	r7, [r4, #4]
   86e10:	4630      	mov	r0, r6
   86e12:	615d      	str	r5, [r3, #20]
   86e14:	611d      	str	r5, [r3, #16]
   86e16:	f8c5 e00c 	str.w	lr, [r5, #12]
   86e1a:	f8c5 e008 	str.w	lr, [r5, #8]
   86e1e:	6069      	str	r1, [r5, #4]
   86e20:	50aa      	str	r2, [r5, r2]
   86e22:	3408      	adds	r4, #8
   86e24:	f000 f96c 	bl	87100 <__malloc_unlock>
   86e28:	e648      	b.n	86abc <_malloc_r+0x58>
   86e2a:	685a      	ldr	r2, [r3, #4]
   86e2c:	e6a1      	b.n	86b72 <_malloc_r+0x10e>
   86e2e:	f109 0901 	add.w	r9, r9, #1
   86e32:	f019 0f03 	tst.w	r9, #3
   86e36:	f104 0408 	add.w	r4, r4, #8
   86e3a:	f47f aead 	bne.w	86b98 <_malloc_r+0x134>
   86e3e:	e02d      	b.n	86e9c <_malloc_r+0x438>
   86e40:	f104 0308 	add.w	r3, r4, #8
   86e44:	6964      	ldr	r4, [r4, #20]
   86e46:	42a3      	cmp	r3, r4
   86e48:	bf08      	it	eq
   86e4a:	f10c 0c02 	addeq.w	ip, ip, #2
   86e4e:	f43f ae67 	beq.w	86b20 <_malloc_r+0xbc>
   86e52:	e623      	b.n	86a9c <_malloc_r+0x38>
   86e54:	4419      	add	r1, r3
   86e56:	6848      	ldr	r0, [r1, #4]
   86e58:	461c      	mov	r4, r3
   86e5a:	f854 2f08 	ldr.w	r2, [r4, #8]!
   86e5e:	68db      	ldr	r3, [r3, #12]
   86e60:	f040 0501 	orr.w	r5, r0, #1
   86e64:	604d      	str	r5, [r1, #4]
   86e66:	4630      	mov	r0, r6
   86e68:	60d3      	str	r3, [r2, #12]
   86e6a:	609a      	str	r2, [r3, #8]
   86e6c:	f000 f948 	bl	87100 <__malloc_unlock>
   86e70:	e624      	b.n	86abc <_malloc_r+0x58>
   86e72:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   86e76:	ea4f 014c 	mov.w	r1, ip, lsl #1
   86e7a:	e63b      	b.n	86af4 <_malloc_r+0x90>
   86e7c:	098a      	lsrs	r2, r1, #6
   86e7e:	3238      	adds	r2, #56	; 0x38
   86e80:	0050      	lsls	r0, r2, #1
   86e82:	e7a8      	b.n	86dd6 <_malloc_r+0x372>
   86e84:	42bc      	cmp	r4, r7
   86e86:	f43f af02 	beq.w	86c8e <_malloc_r+0x22a>
   86e8a:	68bc      	ldr	r4, [r7, #8]
   86e8c:	6862      	ldr	r2, [r4, #4]
   86e8e:	f022 0203 	bic.w	r2, r2, #3
   86e92:	e761      	b.n	86d58 <_malloc_r+0x2f4>
   86e94:	f8d8 8000 	ldr.w	r8, [r8]
   86e98:	4598      	cmp	r8, r3
   86e9a:	d17a      	bne.n	86f92 <_malloc_r+0x52e>
   86e9c:	f01c 0f03 	tst.w	ip, #3
   86ea0:	f1a8 0308 	sub.w	r3, r8, #8
   86ea4:	f10c 3cff 	add.w	ip, ip, #4294967295
   86ea8:	d1f4      	bne.n	86e94 <_malloc_r+0x430>
   86eaa:	687b      	ldr	r3, [r7, #4]
   86eac:	ea23 0300 	bic.w	r3, r3, r0
   86eb0:	607b      	str	r3, [r7, #4]
   86eb2:	0040      	lsls	r0, r0, #1
   86eb4:	4298      	cmp	r0, r3
   86eb6:	f63f aebe 	bhi.w	86c36 <_malloc_r+0x1d2>
   86eba:	2800      	cmp	r0, #0
   86ebc:	f43f aebb 	beq.w	86c36 <_malloc_r+0x1d2>
   86ec0:	4203      	tst	r3, r0
   86ec2:	46cc      	mov	ip, r9
   86ec4:	f47f ae64 	bne.w	86b90 <_malloc_r+0x12c>
   86ec8:	0040      	lsls	r0, r0, #1
   86eca:	4203      	tst	r3, r0
   86ecc:	f10c 0c04 	add.w	ip, ip, #4
   86ed0:	d0fa      	beq.n	86ec8 <_malloc_r+0x464>
   86ed2:	e65d      	b.n	86b90 <_malloc_r+0x12c>
   86ed4:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   86ed8:	d819      	bhi.n	86f0e <_malloc_r+0x4aa>
   86eda:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   86ede:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   86ee2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   86ee6:	e605      	b.n	86af4 <_malloc_r+0x90>
   86ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   86eec:	e6ee      	b.n	86ccc <_malloc_r+0x268>
   86eee:	2301      	movs	r3, #1
   86ef0:	f8c8 3004 	str.w	r3, [r8, #4]
   86ef4:	4644      	mov	r4, r8
   86ef6:	2200      	movs	r2, #0
   86ef8:	e72e      	b.n	86d58 <_malloc_r+0x2f4>
   86efa:	1092      	asrs	r2, r2, #2
   86efc:	2001      	movs	r0, #1
   86efe:	4090      	lsls	r0, r2
   86f00:	f8d8 2004 	ldr.w	r2, [r8, #4]
   86f04:	4619      	mov	r1, r3
   86f06:	4302      	orrs	r2, r0
   86f08:	f8c8 2004 	str.w	r2, [r8, #4]
   86f0c:	e775      	b.n	86dfa <_malloc_r+0x396>
   86f0e:	f240 5354 	movw	r3, #1364	; 0x554
   86f12:	459c      	cmp	ip, r3
   86f14:	d81b      	bhi.n	86f4e <_malloc_r+0x4ea>
   86f16:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   86f1a:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   86f1e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   86f22:	e5e7      	b.n	86af4 <_malloc_r+0x90>
   86f24:	f10a 0a10 	add.w	sl, sl, #16
   86f28:	e6a3      	b.n	86c72 <_malloc_r+0x20e>
   86f2a:	2b54      	cmp	r3, #84	; 0x54
   86f2c:	d81f      	bhi.n	86f6e <_malloc_r+0x50a>
   86f2e:	0b0a      	lsrs	r2, r1, #12
   86f30:	326e      	adds	r2, #110	; 0x6e
   86f32:	0050      	lsls	r0, r2, #1
   86f34:	e74f      	b.n	86dd6 <_malloc_r+0x372>
   86f36:	f3cb 010b 	ubfx	r1, fp, #0, #12
   86f3a:	2900      	cmp	r1, #0
   86f3c:	f47f aeb1 	bne.w	86ca2 <_malloc_r+0x23e>
   86f40:	eb0a 0109 	add.w	r1, sl, r9
   86f44:	68ba      	ldr	r2, [r7, #8]
   86f46:	f041 0101 	orr.w	r1, r1, #1
   86f4a:	6051      	str	r1, [r2, #4]
   86f4c:	e6f6      	b.n	86d3c <_malloc_r+0x2d8>
   86f4e:	21fc      	movs	r1, #252	; 0xfc
   86f50:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   86f54:	e5ce      	b.n	86af4 <_malloc_r+0x90>
   86f56:	2201      	movs	r2, #1
   86f58:	f04f 0a00 	mov.w	sl, #0
   86f5c:	e6cb      	b.n	86cf6 <_malloc_r+0x292>
   86f5e:	f104 0108 	add.w	r1, r4, #8
   86f62:	4630      	mov	r0, r6
   86f64:	f7ff fa7c 	bl	86460 <_free_r>
   86f68:	f8da 3000 	ldr.w	r3, [sl]
   86f6c:	e6e6      	b.n	86d3c <_malloc_r+0x2d8>
   86f6e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   86f72:	d803      	bhi.n	86f7c <_malloc_r+0x518>
   86f74:	0bca      	lsrs	r2, r1, #15
   86f76:	3277      	adds	r2, #119	; 0x77
   86f78:	0050      	lsls	r0, r2, #1
   86f7a:	e72c      	b.n	86dd6 <_malloc_r+0x372>
   86f7c:	f240 5254 	movw	r2, #1364	; 0x554
   86f80:	4293      	cmp	r3, r2
   86f82:	d803      	bhi.n	86f8c <_malloc_r+0x528>
   86f84:	0c8a      	lsrs	r2, r1, #18
   86f86:	327c      	adds	r2, #124	; 0x7c
   86f88:	0050      	lsls	r0, r2, #1
   86f8a:	e724      	b.n	86dd6 <_malloc_r+0x372>
   86f8c:	20fc      	movs	r0, #252	; 0xfc
   86f8e:	227e      	movs	r2, #126	; 0x7e
   86f90:	e721      	b.n	86dd6 <_malloc_r+0x372>
   86f92:	687b      	ldr	r3, [r7, #4]
   86f94:	e78d      	b.n	86eb2 <_malloc_r+0x44e>
   86f96:	bf00      	nop
   86f98:	20070618 	.word	0x20070618

00086f9c <memchr>:
   86f9c:	0783      	lsls	r3, r0, #30
   86f9e:	b470      	push	{r4, r5, r6}
   86fa0:	b2c9      	uxtb	r1, r1
   86fa2:	d040      	beq.n	87026 <memchr+0x8a>
   86fa4:	1e54      	subs	r4, r2, #1
   86fa6:	b32a      	cbz	r2, 86ff4 <memchr+0x58>
   86fa8:	7803      	ldrb	r3, [r0, #0]
   86faa:	428b      	cmp	r3, r1
   86fac:	d023      	beq.n	86ff6 <memchr+0x5a>
   86fae:	1c43      	adds	r3, r0, #1
   86fb0:	e004      	b.n	86fbc <memchr+0x20>
   86fb2:	b1fc      	cbz	r4, 86ff4 <memchr+0x58>
   86fb4:	7805      	ldrb	r5, [r0, #0]
   86fb6:	4614      	mov	r4, r2
   86fb8:	428d      	cmp	r5, r1
   86fba:	d01c      	beq.n	86ff6 <memchr+0x5a>
   86fbc:	f013 0f03 	tst.w	r3, #3
   86fc0:	4618      	mov	r0, r3
   86fc2:	f104 32ff 	add.w	r2, r4, #4294967295
   86fc6:	f103 0301 	add.w	r3, r3, #1
   86fca:	d1f2      	bne.n	86fb2 <memchr+0x16>
   86fcc:	2c03      	cmp	r4, #3
   86fce:	d814      	bhi.n	86ffa <memchr+0x5e>
   86fd0:	1e65      	subs	r5, r4, #1
   86fd2:	b354      	cbz	r4, 8702a <memchr+0x8e>
   86fd4:	7803      	ldrb	r3, [r0, #0]
   86fd6:	428b      	cmp	r3, r1
   86fd8:	d00d      	beq.n	86ff6 <memchr+0x5a>
   86fda:	1c42      	adds	r2, r0, #1
   86fdc:	2300      	movs	r3, #0
   86fde:	e002      	b.n	86fe6 <memchr+0x4a>
   86fe0:	7804      	ldrb	r4, [r0, #0]
   86fe2:	428c      	cmp	r4, r1
   86fe4:	d007      	beq.n	86ff6 <memchr+0x5a>
   86fe6:	42ab      	cmp	r3, r5
   86fe8:	4610      	mov	r0, r2
   86fea:	f103 0301 	add.w	r3, r3, #1
   86fee:	f102 0201 	add.w	r2, r2, #1
   86ff2:	d1f5      	bne.n	86fe0 <memchr+0x44>
   86ff4:	2000      	movs	r0, #0
   86ff6:	bc70      	pop	{r4, r5, r6}
   86ff8:	4770      	bx	lr
   86ffa:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   86ffe:	4603      	mov	r3, r0
   87000:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   87004:	681a      	ldr	r2, [r3, #0]
   87006:	4618      	mov	r0, r3
   87008:	4072      	eors	r2, r6
   8700a:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   8700e:	ea25 0202 	bic.w	r2, r5, r2
   87012:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   87016:	f103 0304 	add.w	r3, r3, #4
   8701a:	d1d9      	bne.n	86fd0 <memchr+0x34>
   8701c:	3c04      	subs	r4, #4
   8701e:	2c03      	cmp	r4, #3
   87020:	4618      	mov	r0, r3
   87022:	d8ef      	bhi.n	87004 <memchr+0x68>
   87024:	e7d4      	b.n	86fd0 <memchr+0x34>
   87026:	4614      	mov	r4, r2
   87028:	e7d0      	b.n	86fcc <memchr+0x30>
   8702a:	4620      	mov	r0, r4
   8702c:	e7e3      	b.n	86ff6 <memchr+0x5a>
   8702e:	bf00      	nop

00087030 <memmove>:
   87030:	4288      	cmp	r0, r1
   87032:	b4f0      	push	{r4, r5, r6, r7}
   87034:	d910      	bls.n	87058 <memmove+0x28>
   87036:	188c      	adds	r4, r1, r2
   87038:	42a0      	cmp	r0, r4
   8703a:	d20d      	bcs.n	87058 <memmove+0x28>
   8703c:	1885      	adds	r5, r0, r2
   8703e:	1e53      	subs	r3, r2, #1
   87040:	b142      	cbz	r2, 87054 <memmove+0x24>
   87042:	4621      	mov	r1, r4
   87044:	462a      	mov	r2, r5
   87046:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   8704a:	3b01      	subs	r3, #1
   8704c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   87050:	1c5c      	adds	r4, r3, #1
   87052:	d1f8      	bne.n	87046 <memmove+0x16>
   87054:	bcf0      	pop	{r4, r5, r6, r7}
   87056:	4770      	bx	lr
   87058:	2a0f      	cmp	r2, #15
   8705a:	d944      	bls.n	870e6 <memmove+0xb6>
   8705c:	ea40 0301 	orr.w	r3, r0, r1
   87060:	079b      	lsls	r3, r3, #30
   87062:	d144      	bne.n	870ee <memmove+0xbe>
   87064:	f1a2 0710 	sub.w	r7, r2, #16
   87068:	093f      	lsrs	r7, r7, #4
   8706a:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   8706e:	3610      	adds	r6, #16
   87070:	460c      	mov	r4, r1
   87072:	4603      	mov	r3, r0
   87074:	6825      	ldr	r5, [r4, #0]
   87076:	3310      	adds	r3, #16
   87078:	f843 5c10 	str.w	r5, [r3, #-16]
   8707c:	6865      	ldr	r5, [r4, #4]
   8707e:	3410      	adds	r4, #16
   87080:	f843 5c0c 	str.w	r5, [r3, #-12]
   87084:	f854 5c08 	ldr.w	r5, [r4, #-8]
   87088:	f843 5c08 	str.w	r5, [r3, #-8]
   8708c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   87090:	f843 5c04 	str.w	r5, [r3, #-4]
   87094:	42b3      	cmp	r3, r6
   87096:	d1ed      	bne.n	87074 <memmove+0x44>
   87098:	1c7b      	adds	r3, r7, #1
   8709a:	f002 0c0f 	and.w	ip, r2, #15
   8709e:	011b      	lsls	r3, r3, #4
   870a0:	f1bc 0f03 	cmp.w	ip, #3
   870a4:	4419      	add	r1, r3
   870a6:	4403      	add	r3, r0
   870a8:	d923      	bls.n	870f2 <memmove+0xc2>
   870aa:	460e      	mov	r6, r1
   870ac:	461d      	mov	r5, r3
   870ae:	4664      	mov	r4, ip
   870b0:	f856 7b04 	ldr.w	r7, [r6], #4
   870b4:	3c04      	subs	r4, #4
   870b6:	2c03      	cmp	r4, #3
   870b8:	f845 7b04 	str.w	r7, [r5], #4
   870bc:	d8f8      	bhi.n	870b0 <memmove+0x80>
   870be:	f1ac 0404 	sub.w	r4, ip, #4
   870c2:	f024 0403 	bic.w	r4, r4, #3
   870c6:	3404      	adds	r4, #4
   870c8:	f002 0203 	and.w	r2, r2, #3
   870cc:	4423      	add	r3, r4
   870ce:	4421      	add	r1, r4
   870d0:	2a00      	cmp	r2, #0
   870d2:	d0bf      	beq.n	87054 <memmove+0x24>
   870d4:	441a      	add	r2, r3
   870d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   870da:	f803 4b01 	strb.w	r4, [r3], #1
   870de:	4293      	cmp	r3, r2
   870e0:	d1f9      	bne.n	870d6 <memmove+0xa6>
   870e2:	bcf0      	pop	{r4, r5, r6, r7}
   870e4:	4770      	bx	lr
   870e6:	4603      	mov	r3, r0
   870e8:	2a00      	cmp	r2, #0
   870ea:	d1f3      	bne.n	870d4 <memmove+0xa4>
   870ec:	e7b2      	b.n	87054 <memmove+0x24>
   870ee:	4603      	mov	r3, r0
   870f0:	e7f0      	b.n	870d4 <memmove+0xa4>
   870f2:	4662      	mov	r2, ip
   870f4:	2a00      	cmp	r2, #0
   870f6:	d1ed      	bne.n	870d4 <memmove+0xa4>
   870f8:	e7ac      	b.n	87054 <memmove+0x24>
   870fa:	bf00      	nop

000870fc <__malloc_lock>:
   870fc:	4770      	bx	lr
   870fe:	bf00      	nop

00087100 <__malloc_unlock>:
   87100:	4770      	bx	lr
   87102:	bf00      	nop

00087104 <_Balloc>:
   87104:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   87106:	b570      	push	{r4, r5, r6, lr}
   87108:	4605      	mov	r5, r0
   8710a:	460c      	mov	r4, r1
   8710c:	b14a      	cbz	r2, 87122 <_Balloc+0x1e>
   8710e:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   87112:	b180      	cbz	r0, 87136 <_Balloc+0x32>
   87114:	6801      	ldr	r1, [r0, #0]
   87116:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   8711a:	2200      	movs	r2, #0
   8711c:	6102      	str	r2, [r0, #16]
   8711e:	60c2      	str	r2, [r0, #12]
   87120:	bd70      	pop	{r4, r5, r6, pc}
   87122:	2221      	movs	r2, #33	; 0x21
   87124:	2104      	movs	r1, #4
   87126:	f000 fe71 	bl	87e0c <_calloc_r>
   8712a:	64e8      	str	r0, [r5, #76]	; 0x4c
   8712c:	4602      	mov	r2, r0
   8712e:	2800      	cmp	r0, #0
   87130:	d1ed      	bne.n	8710e <_Balloc+0xa>
   87132:	2000      	movs	r0, #0
   87134:	bd70      	pop	{r4, r5, r6, pc}
   87136:	2101      	movs	r1, #1
   87138:	fa01 f604 	lsl.w	r6, r1, r4
   8713c:	1d72      	adds	r2, r6, #5
   8713e:	4628      	mov	r0, r5
   87140:	0092      	lsls	r2, r2, #2
   87142:	f000 fe63 	bl	87e0c <_calloc_r>
   87146:	2800      	cmp	r0, #0
   87148:	d0f3      	beq.n	87132 <_Balloc+0x2e>
   8714a:	6044      	str	r4, [r0, #4]
   8714c:	6086      	str	r6, [r0, #8]
   8714e:	e7e4      	b.n	8711a <_Balloc+0x16>

00087150 <_Bfree>:
   87150:	b131      	cbz	r1, 87160 <_Bfree+0x10>
   87152:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   87154:	684a      	ldr	r2, [r1, #4]
   87156:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8715a:	6008      	str	r0, [r1, #0]
   8715c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   87160:	4770      	bx	lr
   87162:	bf00      	nop

00087164 <__multadd>:
   87164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   87168:	690f      	ldr	r7, [r1, #16]
   8716a:	b083      	sub	sp, #12
   8716c:	4688      	mov	r8, r1
   8716e:	4681      	mov	r9, r0
   87170:	f101 0514 	add.w	r5, r1, #20
   87174:	2400      	movs	r4, #0
   87176:	682e      	ldr	r6, [r5, #0]
   87178:	3401      	adds	r4, #1
   8717a:	b2b1      	uxth	r1, r6
   8717c:	0c36      	lsrs	r6, r6, #16
   8717e:	fb02 3301 	mla	r3, r2, r1, r3
   87182:	fb02 f606 	mul.w	r6, r2, r6
   87186:	b299      	uxth	r1, r3
   87188:	eb06 4313 	add.w	r3, r6, r3, lsr #16
   8718c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   87190:	42a7      	cmp	r7, r4
   87192:	f845 1b04 	str.w	r1, [r5], #4
   87196:	ea4f 4313 	mov.w	r3, r3, lsr #16
   8719a:	dcec      	bgt.n	87176 <__multadd+0x12>
   8719c:	b14b      	cbz	r3, 871b2 <__multadd+0x4e>
   8719e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   871a2:	4297      	cmp	r7, r2
   871a4:	da09      	bge.n	871ba <__multadd+0x56>
   871a6:	eb08 0287 	add.w	r2, r8, r7, lsl #2
   871aa:	3701      	adds	r7, #1
   871ac:	6153      	str	r3, [r2, #20]
   871ae:	f8c8 7010 	str.w	r7, [r8, #16]
   871b2:	4640      	mov	r0, r8
   871b4:	b003      	add	sp, #12
   871b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   871ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
   871be:	4648      	mov	r0, r9
   871c0:	3101      	adds	r1, #1
   871c2:	9301      	str	r3, [sp, #4]
   871c4:	f7ff ff9e 	bl	87104 <_Balloc>
   871c8:	f8d8 2010 	ldr.w	r2, [r8, #16]
   871cc:	f108 010c 	add.w	r1, r8, #12
   871d0:	3202      	adds	r2, #2
   871d2:	4604      	mov	r4, r0
   871d4:	0092      	lsls	r2, r2, #2
   871d6:	300c      	adds	r0, #12
   871d8:	f7fb fbdc 	bl	82994 <memcpy>
   871dc:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
   871e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
   871e4:	9b01      	ldr	r3, [sp, #4]
   871e6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   871ea:	f8c8 0000 	str.w	r0, [r8]
   871ee:	f842 8021 	str.w	r8, [r2, r1, lsl #2]
   871f2:	46a0      	mov	r8, r4
   871f4:	e7d7      	b.n	871a6 <__multadd+0x42>
   871f6:	bf00      	nop

000871f8 <__hi0bits>:
   871f8:	0c03      	lsrs	r3, r0, #16
   871fa:	041b      	lsls	r3, r3, #16
   871fc:	b9b3      	cbnz	r3, 8722c <__hi0bits+0x34>
   871fe:	0400      	lsls	r0, r0, #16
   87200:	2310      	movs	r3, #16
   87202:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   87206:	bf04      	itt	eq
   87208:	0200      	lsleq	r0, r0, #8
   8720a:	3308      	addeq	r3, #8
   8720c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   87210:	bf04      	itt	eq
   87212:	0100      	lsleq	r0, r0, #4
   87214:	3304      	addeq	r3, #4
   87216:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   8721a:	bf04      	itt	eq
   8721c:	0080      	lsleq	r0, r0, #2
   8721e:	3302      	addeq	r3, #2
   87220:	2800      	cmp	r0, #0
   87222:	db07      	blt.n	87234 <__hi0bits+0x3c>
   87224:	0042      	lsls	r2, r0, #1
   87226:	d403      	bmi.n	87230 <__hi0bits+0x38>
   87228:	2020      	movs	r0, #32
   8722a:	4770      	bx	lr
   8722c:	2300      	movs	r3, #0
   8722e:	e7e8      	b.n	87202 <__hi0bits+0xa>
   87230:	1c58      	adds	r0, r3, #1
   87232:	4770      	bx	lr
   87234:	4618      	mov	r0, r3
   87236:	4770      	bx	lr

00087238 <__lo0bits>:
   87238:	6803      	ldr	r3, [r0, #0]
   8723a:	f013 0207 	ands.w	r2, r3, #7
   8723e:	d007      	beq.n	87250 <__lo0bits+0x18>
   87240:	07d9      	lsls	r1, r3, #31
   87242:	d420      	bmi.n	87286 <__lo0bits+0x4e>
   87244:	079a      	lsls	r2, r3, #30
   87246:	d420      	bmi.n	8728a <__lo0bits+0x52>
   87248:	089b      	lsrs	r3, r3, #2
   8724a:	6003      	str	r3, [r0, #0]
   8724c:	2002      	movs	r0, #2
   8724e:	4770      	bx	lr
   87250:	b299      	uxth	r1, r3
   87252:	b909      	cbnz	r1, 87258 <__lo0bits+0x20>
   87254:	0c1b      	lsrs	r3, r3, #16
   87256:	2210      	movs	r2, #16
   87258:	f013 0fff 	tst.w	r3, #255	; 0xff
   8725c:	bf04      	itt	eq
   8725e:	0a1b      	lsreq	r3, r3, #8
   87260:	3208      	addeq	r2, #8
   87262:	0719      	lsls	r1, r3, #28
   87264:	bf04      	itt	eq
   87266:	091b      	lsreq	r3, r3, #4
   87268:	3204      	addeq	r2, #4
   8726a:	0799      	lsls	r1, r3, #30
   8726c:	bf04      	itt	eq
   8726e:	089b      	lsreq	r3, r3, #2
   87270:	3202      	addeq	r2, #2
   87272:	07d9      	lsls	r1, r3, #31
   87274:	d404      	bmi.n	87280 <__lo0bits+0x48>
   87276:	085b      	lsrs	r3, r3, #1
   87278:	d101      	bne.n	8727e <__lo0bits+0x46>
   8727a:	2020      	movs	r0, #32
   8727c:	4770      	bx	lr
   8727e:	3201      	adds	r2, #1
   87280:	6003      	str	r3, [r0, #0]
   87282:	4610      	mov	r0, r2
   87284:	4770      	bx	lr
   87286:	2000      	movs	r0, #0
   87288:	4770      	bx	lr
   8728a:	085b      	lsrs	r3, r3, #1
   8728c:	6003      	str	r3, [r0, #0]
   8728e:	2001      	movs	r0, #1
   87290:	4770      	bx	lr
   87292:	bf00      	nop

00087294 <__i2b>:
   87294:	b510      	push	{r4, lr}
   87296:	460c      	mov	r4, r1
   87298:	2101      	movs	r1, #1
   8729a:	f7ff ff33 	bl	87104 <_Balloc>
   8729e:	2201      	movs	r2, #1
   872a0:	6144      	str	r4, [r0, #20]
   872a2:	6102      	str	r2, [r0, #16]
   872a4:	bd10      	pop	{r4, pc}
   872a6:	bf00      	nop

000872a8 <__multiply>:
   872a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   872ac:	690d      	ldr	r5, [r1, #16]
   872ae:	f8d2 9010 	ldr.w	r9, [r2, #16]
   872b2:	b085      	sub	sp, #20
   872b4:	454d      	cmp	r5, r9
   872b6:	460c      	mov	r4, r1
   872b8:	4692      	mov	sl, r2
   872ba:	da04      	bge.n	872c6 <__multiply+0x1e>
   872bc:	462a      	mov	r2, r5
   872be:	4654      	mov	r4, sl
   872c0:	464d      	mov	r5, r9
   872c2:	468a      	mov	sl, r1
   872c4:	4691      	mov	r9, r2
   872c6:	68a3      	ldr	r3, [r4, #8]
   872c8:	eb05 0709 	add.w	r7, r5, r9
   872cc:	6861      	ldr	r1, [r4, #4]
   872ce:	429f      	cmp	r7, r3
   872d0:	bfc8      	it	gt
   872d2:	3101      	addgt	r1, #1
   872d4:	f7ff ff16 	bl	87104 <_Balloc>
   872d8:	f100 0614 	add.w	r6, r0, #20
   872dc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
   872e0:	4546      	cmp	r6, r8
   872e2:	9001      	str	r0, [sp, #4]
   872e4:	d205      	bcs.n	872f2 <__multiply+0x4a>
   872e6:	4633      	mov	r3, r6
   872e8:	2000      	movs	r0, #0
   872ea:	f843 0b04 	str.w	r0, [r3], #4
   872ee:	4598      	cmp	r8, r3
   872f0:	d8fb      	bhi.n	872ea <__multiply+0x42>
   872f2:	f10a 0c14 	add.w	ip, sl, #20
   872f6:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
   872fa:	3414      	adds	r4, #20
   872fc:	45cc      	cmp	ip, r9
   872fe:	9400      	str	r4, [sp, #0]
   87300:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   87304:	d25b      	bcs.n	873be <__multiply+0x116>
   87306:	f8cd 8008 	str.w	r8, [sp, #8]
   8730a:	9703      	str	r7, [sp, #12]
   8730c:	46c8      	mov	r8, r9
   8730e:	f85c 3b04 	ldr.w	r3, [ip], #4
   87312:	b29c      	uxth	r4, r3
   87314:	b324      	cbz	r4, 87360 <__multiply+0xb8>
   87316:	9a00      	ldr	r2, [sp, #0]
   87318:	4633      	mov	r3, r6
   8731a:	f04f 0900 	mov.w	r9, #0
   8731e:	e000      	b.n	87322 <__multiply+0x7a>
   87320:	460b      	mov	r3, r1
   87322:	f852 7b04 	ldr.w	r7, [r2], #4
   87326:	6819      	ldr	r1, [r3, #0]
   87328:	fa1f fb87 	uxth.w	fp, r7
   8732c:	fa1f fa81 	uxth.w	sl, r1
   87330:	0c38      	lsrs	r0, r7, #16
   87332:	0c09      	lsrs	r1, r1, #16
   87334:	fb04 aa0b 	mla	sl, r4, fp, sl
   87338:	fb04 1000 	mla	r0, r4, r0, r1
   8733c:	44d1      	add	r9, sl
   8733e:	eb00 4019 	add.w	r0, r0, r9, lsr #16
   87342:	fa1f f989 	uxth.w	r9, r9
   87346:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
   8734a:	4619      	mov	r1, r3
   8734c:	4295      	cmp	r5, r2
   8734e:	ea4f 4910 	mov.w	r9, r0, lsr #16
   87352:	f841 7b04 	str.w	r7, [r1], #4
   87356:	d8e3      	bhi.n	87320 <__multiply+0x78>
   87358:	f8c3 9004 	str.w	r9, [r3, #4]
   8735c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
   87360:	ea5f 4913 	movs.w	r9, r3, lsr #16
   87364:	d024      	beq.n	873b0 <__multiply+0x108>
   87366:	f8d6 a000 	ldr.w	sl, [r6]
   8736a:	9b00      	ldr	r3, [sp, #0]
   8736c:	4650      	mov	r0, sl
   8736e:	4631      	mov	r1, r6
   87370:	f04f 0b00 	mov.w	fp, #0
   87374:	e000      	b.n	87378 <__multiply+0xd0>
   87376:	4611      	mov	r1, r2
   87378:	881a      	ldrh	r2, [r3, #0]
   8737a:	0c00      	lsrs	r0, r0, #16
   8737c:	fb09 0002 	mla	r0, r9, r2, r0
   87380:	fa1f fa8a 	uxth.w	sl, sl
   87384:	4483      	add	fp, r0
   87386:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
   8738a:	460a      	mov	r2, r1
   8738c:	f842 0b04 	str.w	r0, [r2], #4
   87390:	f853 7b04 	ldr.w	r7, [r3], #4
   87394:	6848      	ldr	r0, [r1, #4]
   87396:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   8739a:	b284      	uxth	r4, r0
   8739c:	fb09 4a0a 	mla	sl, r9, sl, r4
   873a0:	429d      	cmp	r5, r3
   873a2:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
   873a6:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
   873aa:	d8e4      	bhi.n	87376 <__multiply+0xce>
   873ac:	f8c1 a004 	str.w	sl, [r1, #4]
   873b0:	45e0      	cmp	r8, ip
   873b2:	f106 0604 	add.w	r6, r6, #4
   873b6:	d8aa      	bhi.n	8730e <__multiply+0x66>
   873b8:	f8dd 8008 	ldr.w	r8, [sp, #8]
   873bc:	9f03      	ldr	r7, [sp, #12]
   873be:	2f00      	cmp	r7, #0
   873c0:	dd0a      	ble.n	873d8 <__multiply+0x130>
   873c2:	f858 3c04 	ldr.w	r3, [r8, #-4]
   873c6:	f1a8 0804 	sub.w	r8, r8, #4
   873ca:	b11b      	cbz	r3, 873d4 <__multiply+0x12c>
   873cc:	e004      	b.n	873d8 <__multiply+0x130>
   873ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   873d2:	b90b      	cbnz	r3, 873d8 <__multiply+0x130>
   873d4:	3f01      	subs	r7, #1
   873d6:	d1fa      	bne.n	873ce <__multiply+0x126>
   873d8:	9b01      	ldr	r3, [sp, #4]
   873da:	4618      	mov	r0, r3
   873dc:	611f      	str	r7, [r3, #16]
   873de:	b005      	add	sp, #20
   873e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000873e4 <__pow5mult>:
   873e4:	f012 0303 	ands.w	r3, r2, #3
   873e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   873ec:	4614      	mov	r4, r2
   873ee:	4607      	mov	r7, r0
   873f0:	460e      	mov	r6, r1
   873f2:	d12c      	bne.n	8744e <__pow5mult+0x6a>
   873f4:	10a4      	asrs	r4, r4, #2
   873f6:	d01c      	beq.n	87432 <__pow5mult+0x4e>
   873f8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   873fa:	2d00      	cmp	r5, #0
   873fc:	d030      	beq.n	87460 <__pow5mult+0x7c>
   873fe:	f04f 0800 	mov.w	r8, #0
   87402:	e004      	b.n	8740e <__pow5mult+0x2a>
   87404:	1064      	asrs	r4, r4, #1
   87406:	d014      	beq.n	87432 <__pow5mult+0x4e>
   87408:	6828      	ldr	r0, [r5, #0]
   8740a:	b1a8      	cbz	r0, 87438 <__pow5mult+0x54>
   8740c:	4605      	mov	r5, r0
   8740e:	07e3      	lsls	r3, r4, #31
   87410:	d5f8      	bpl.n	87404 <__pow5mult+0x20>
   87412:	4638      	mov	r0, r7
   87414:	4631      	mov	r1, r6
   87416:	462a      	mov	r2, r5
   87418:	f7ff ff46 	bl	872a8 <__multiply>
   8741c:	b1ae      	cbz	r6, 8744a <__pow5mult+0x66>
   8741e:	6872      	ldr	r2, [r6, #4]
   87420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   87422:	1064      	asrs	r4, r4, #1
   87424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   87428:	6031      	str	r1, [r6, #0]
   8742a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   8742e:	4606      	mov	r6, r0
   87430:	d1ea      	bne.n	87408 <__pow5mult+0x24>
   87432:	4630      	mov	r0, r6
   87434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87438:	4638      	mov	r0, r7
   8743a:	4629      	mov	r1, r5
   8743c:	462a      	mov	r2, r5
   8743e:	f7ff ff33 	bl	872a8 <__multiply>
   87442:	6028      	str	r0, [r5, #0]
   87444:	f8c0 8000 	str.w	r8, [r0]
   87448:	e7e0      	b.n	8740c <__pow5mult+0x28>
   8744a:	4606      	mov	r6, r0
   8744c:	e7da      	b.n	87404 <__pow5mult+0x20>
   8744e:	4a0b      	ldr	r2, [pc, #44]	; (8747c <__pow5mult+0x98>)
   87450:	3b01      	subs	r3, #1
   87452:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   87456:	2300      	movs	r3, #0
   87458:	f7ff fe84 	bl	87164 <__multadd>
   8745c:	4606      	mov	r6, r0
   8745e:	e7c9      	b.n	873f4 <__pow5mult+0x10>
   87460:	2101      	movs	r1, #1
   87462:	4638      	mov	r0, r7
   87464:	f7ff fe4e 	bl	87104 <_Balloc>
   87468:	f240 2171 	movw	r1, #625	; 0x271
   8746c:	2201      	movs	r2, #1
   8746e:	2300      	movs	r3, #0
   87470:	6141      	str	r1, [r0, #20]
   87472:	6102      	str	r2, [r0, #16]
   87474:	4605      	mov	r5, r0
   87476:	64b8      	str	r0, [r7, #72]	; 0x48
   87478:	6003      	str	r3, [r0, #0]
   8747a:	e7c0      	b.n	873fe <__pow5mult+0x1a>
   8747c:	00089198 	.word	0x00089198

00087480 <__lshift>:
   87480:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87484:	690b      	ldr	r3, [r1, #16]
   87486:	ea4f 1a62 	mov.w	sl, r2, asr #5
   8748a:	eb0a 0903 	add.w	r9, sl, r3
   8748e:	688b      	ldr	r3, [r1, #8]
   87490:	f109 0601 	add.w	r6, r9, #1
   87494:	429e      	cmp	r6, r3
   87496:	460f      	mov	r7, r1
   87498:	4693      	mov	fp, r2
   8749a:	4680      	mov	r8, r0
   8749c:	6849      	ldr	r1, [r1, #4]
   8749e:	dd04      	ble.n	874aa <__lshift+0x2a>
   874a0:	005b      	lsls	r3, r3, #1
   874a2:	429e      	cmp	r6, r3
   874a4:	f101 0101 	add.w	r1, r1, #1
   874a8:	dcfa      	bgt.n	874a0 <__lshift+0x20>
   874aa:	4640      	mov	r0, r8
   874ac:	f7ff fe2a 	bl	87104 <_Balloc>
   874b0:	f1ba 0f00 	cmp.w	sl, #0
   874b4:	f100 0414 	add.w	r4, r0, #20
   874b8:	dd09      	ble.n	874ce <__lshift+0x4e>
   874ba:	2300      	movs	r3, #0
   874bc:	461a      	mov	r2, r3
   874be:	4625      	mov	r5, r4
   874c0:	3301      	adds	r3, #1
   874c2:	4553      	cmp	r3, sl
   874c4:	f845 2b04 	str.w	r2, [r5], #4
   874c8:	d1fa      	bne.n	874c0 <__lshift+0x40>
   874ca:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   874ce:	693a      	ldr	r2, [r7, #16]
   874d0:	f107 0314 	add.w	r3, r7, #20
   874d4:	f01b 0b1f 	ands.w	fp, fp, #31
   874d8:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   874dc:	d021      	beq.n	87522 <__lshift+0xa2>
   874de:	f1cb 0a20 	rsb	sl, fp, #32
   874e2:	2200      	movs	r2, #0
   874e4:	e000      	b.n	874e8 <__lshift+0x68>
   874e6:	462c      	mov	r4, r5
   874e8:	6819      	ldr	r1, [r3, #0]
   874ea:	4625      	mov	r5, r4
   874ec:	fa01 f10b 	lsl.w	r1, r1, fp
   874f0:	430a      	orrs	r2, r1
   874f2:	f845 2b04 	str.w	r2, [r5], #4
   874f6:	f853 2b04 	ldr.w	r2, [r3], #4
   874fa:	4563      	cmp	r3, ip
   874fc:	fa22 f20a 	lsr.w	r2, r2, sl
   87500:	d3f1      	bcc.n	874e6 <__lshift+0x66>
   87502:	6062      	str	r2, [r4, #4]
   87504:	b10a      	cbz	r2, 8750a <__lshift+0x8a>
   87506:	f109 0602 	add.w	r6, r9, #2
   8750a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8750e:	687a      	ldr	r2, [r7, #4]
   87510:	3e01      	subs	r6, #1
   87512:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   87516:	6106      	str	r6, [r0, #16]
   87518:	6039      	str	r1, [r7, #0]
   8751a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8751e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87522:	f853 2b04 	ldr.w	r2, [r3], #4
   87526:	459c      	cmp	ip, r3
   87528:	f844 2b04 	str.w	r2, [r4], #4
   8752c:	d9ed      	bls.n	8750a <__lshift+0x8a>
   8752e:	f853 2b04 	ldr.w	r2, [r3], #4
   87532:	459c      	cmp	ip, r3
   87534:	f844 2b04 	str.w	r2, [r4], #4
   87538:	d8f3      	bhi.n	87522 <__lshift+0xa2>
   8753a:	e7e6      	b.n	8750a <__lshift+0x8a>

0008753c <__mcmp>:
   8753c:	6902      	ldr	r2, [r0, #16]
   8753e:	690b      	ldr	r3, [r1, #16]
   87540:	b410      	push	{r4}
   87542:	1ad2      	subs	r2, r2, r3
   87544:	d115      	bne.n	87572 <__mcmp+0x36>
   87546:	009b      	lsls	r3, r3, #2
   87548:	3014      	adds	r0, #20
   8754a:	3114      	adds	r1, #20
   8754c:	4419      	add	r1, r3
   8754e:	4403      	add	r3, r0
   87550:	e001      	b.n	87556 <__mcmp+0x1a>
   87552:	4298      	cmp	r0, r3
   87554:	d211      	bcs.n	8757a <__mcmp+0x3e>
   87556:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   8755a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   8755e:	42a2      	cmp	r2, r4
   87560:	d0f7      	beq.n	87552 <__mcmp+0x16>
   87562:	4294      	cmp	r4, r2
   87564:	bf94      	ite	ls
   87566:	2001      	movls	r0, #1
   87568:	f04f 30ff 	movhi.w	r0, #4294967295
   8756c:	f85d 4b04 	ldr.w	r4, [sp], #4
   87570:	4770      	bx	lr
   87572:	4610      	mov	r0, r2
   87574:	f85d 4b04 	ldr.w	r4, [sp], #4
   87578:	4770      	bx	lr
   8757a:	2000      	movs	r0, #0
   8757c:	f85d 4b04 	ldr.w	r4, [sp], #4
   87580:	4770      	bx	lr
   87582:	bf00      	nop

00087584 <__mdiff>:
   87584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   87588:	460d      	mov	r5, r1
   8758a:	4604      	mov	r4, r0
   8758c:	4611      	mov	r1, r2
   8758e:	4628      	mov	r0, r5
   87590:	4616      	mov	r6, r2
   87592:	f7ff ffd3 	bl	8753c <__mcmp>
   87596:	1e07      	subs	r7, r0, #0
   87598:	d056      	beq.n	87648 <__mdiff+0xc4>
   8759a:	db4f      	blt.n	8763c <__mdiff+0xb8>
   8759c:	f04f 0900 	mov.w	r9, #0
   875a0:	6869      	ldr	r1, [r5, #4]
   875a2:	4620      	mov	r0, r4
   875a4:	f7ff fdae 	bl	87104 <_Balloc>
   875a8:	692f      	ldr	r7, [r5, #16]
   875aa:	6932      	ldr	r2, [r6, #16]
   875ac:	3514      	adds	r5, #20
   875ae:	3614      	adds	r6, #20
   875b0:	f8c0 900c 	str.w	r9, [r0, #12]
   875b4:	f100 0314 	add.w	r3, r0, #20
   875b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   875bc:	eb06 0882 	add.w	r8, r6, r2, lsl #2
   875c0:	2100      	movs	r1, #0
   875c2:	f855 4b04 	ldr.w	r4, [r5], #4
   875c6:	f856 2b04 	ldr.w	r2, [r6], #4
   875ca:	fa1f fa84 	uxth.w	sl, r4
   875ce:	448a      	add	sl, r1
   875d0:	fa1f f982 	uxth.w	r9, r2
   875d4:	0c11      	lsrs	r1, r2, #16
   875d6:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
   875da:	ebc9 020a 	rsb	r2, r9, sl
   875de:	eb01 4122 	add.w	r1, r1, r2, asr #16
   875e2:	b292      	uxth	r2, r2
   875e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   875e8:	45b0      	cmp	r8, r6
   875ea:	f843 2b04 	str.w	r2, [r3], #4
   875ee:	ea4f 4121 	mov.w	r1, r1, asr #16
   875f2:	462c      	mov	r4, r5
   875f4:	d8e5      	bhi.n	875c2 <__mdiff+0x3e>
   875f6:	45ac      	cmp	ip, r5
   875f8:	4698      	mov	r8, r3
   875fa:	d915      	bls.n	87628 <__mdiff+0xa4>
   875fc:	f854 6b04 	ldr.w	r6, [r4], #4
   87600:	b2b2      	uxth	r2, r6
   87602:	4411      	add	r1, r2
   87604:	0c36      	lsrs	r6, r6, #16
   87606:	eb06 4621 	add.w	r6, r6, r1, asr #16
   8760a:	b289      	uxth	r1, r1
   8760c:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   87610:	45a4      	cmp	ip, r4
   87612:	f843 2b04 	str.w	r2, [r3], #4
   87616:	ea4f 4126 	mov.w	r1, r6, asr #16
   8761a:	d8ef      	bhi.n	875fc <__mdiff+0x78>
   8761c:	43eb      	mvns	r3, r5
   8761e:	4463      	add	r3, ip
   87620:	f023 0303 	bic.w	r3, r3, #3
   87624:	3304      	adds	r3, #4
   87626:	4443      	add	r3, r8
   87628:	3b04      	subs	r3, #4
   8762a:	b922      	cbnz	r2, 87636 <__mdiff+0xb2>
   8762c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   87630:	3f01      	subs	r7, #1
   87632:	2a00      	cmp	r2, #0
   87634:	d0fa      	beq.n	8762c <__mdiff+0xa8>
   87636:	6107      	str	r7, [r0, #16]
   87638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8763c:	462b      	mov	r3, r5
   8763e:	f04f 0901 	mov.w	r9, #1
   87642:	4635      	mov	r5, r6
   87644:	461e      	mov	r6, r3
   87646:	e7ab      	b.n	875a0 <__mdiff+0x1c>
   87648:	4620      	mov	r0, r4
   8764a:	4639      	mov	r1, r7
   8764c:	f7ff fd5a 	bl	87104 <_Balloc>
   87650:	2301      	movs	r3, #1
   87652:	6147      	str	r7, [r0, #20]
   87654:	6103      	str	r3, [r0, #16]
   87656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8765a:	bf00      	nop

0008765c <__d2b>:
   8765c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   87660:	2101      	movs	r1, #1
   87662:	b083      	sub	sp, #12
   87664:	461d      	mov	r5, r3
   87666:	f3c3 560a 	ubfx	r6, r3, #20, #11
   8766a:	4614      	mov	r4, r2
   8766c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   8766e:	f7ff fd49 	bl	87104 <_Balloc>
   87672:	f3c5 0313 	ubfx	r3, r5, #0, #20
   87676:	4680      	mov	r8, r0
   87678:	b10e      	cbz	r6, 8767e <__d2b+0x22>
   8767a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8767e:	9301      	str	r3, [sp, #4]
   87680:	b324      	cbz	r4, 876cc <__d2b+0x70>
   87682:	a802      	add	r0, sp, #8
   87684:	f840 4d08 	str.w	r4, [r0, #-8]!
   87688:	4668      	mov	r0, sp
   8768a:	f7ff fdd5 	bl	87238 <__lo0bits>
   8768e:	2800      	cmp	r0, #0
   87690:	d135      	bne.n	876fe <__d2b+0xa2>
   87692:	e89d 000c 	ldmia.w	sp, {r2, r3}
   87696:	f8c8 2014 	str.w	r2, [r8, #20]
   8769a:	2b00      	cmp	r3, #0
   8769c:	bf0c      	ite	eq
   8769e:	2401      	moveq	r4, #1
   876a0:	2402      	movne	r4, #2
   876a2:	f8c8 3018 	str.w	r3, [r8, #24]
   876a6:	f8c8 4010 	str.w	r4, [r8, #16]
   876aa:	b9de      	cbnz	r6, 876e4 <__d2b+0x88>
   876ac:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   876b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   876b4:	6038      	str	r0, [r7, #0]
   876b6:	6918      	ldr	r0, [r3, #16]
   876b8:	f7ff fd9e 	bl	871f8 <__hi0bits>
   876bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   876be:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
   876c2:	6018      	str	r0, [r3, #0]
   876c4:	4640      	mov	r0, r8
   876c6:	b003      	add	sp, #12
   876c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   876cc:	a801      	add	r0, sp, #4
   876ce:	f7ff fdb3 	bl	87238 <__lo0bits>
   876d2:	9b01      	ldr	r3, [sp, #4]
   876d4:	2401      	movs	r4, #1
   876d6:	3020      	adds	r0, #32
   876d8:	f8c8 3014 	str.w	r3, [r8, #20]
   876dc:	f8c8 4010 	str.w	r4, [r8, #16]
   876e0:	2e00      	cmp	r6, #0
   876e2:	d0e3      	beq.n	876ac <__d2b+0x50>
   876e4:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
   876e8:	eb09 0300 	add.w	r3, r9, r0
   876ec:	603b      	str	r3, [r7, #0]
   876ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   876f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   876f4:	6018      	str	r0, [r3, #0]
   876f6:	4640      	mov	r0, r8
   876f8:	b003      	add	sp, #12
   876fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   876fe:	9b01      	ldr	r3, [sp, #4]
   87700:	f1c0 0120 	rsb	r1, r0, #32
   87704:	fa03 f101 	lsl.w	r1, r3, r1
   87708:	40c3      	lsrs	r3, r0
   8770a:	9a00      	ldr	r2, [sp, #0]
   8770c:	9301      	str	r3, [sp, #4]
   8770e:	430a      	orrs	r2, r1
   87710:	f8c8 2014 	str.w	r2, [r8, #20]
   87714:	e7c1      	b.n	8769a <__d2b+0x3e>
   87716:	bf00      	nop

00087718 <_realloc_r>:
   87718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8771c:	460c      	mov	r4, r1
   8771e:	b083      	sub	sp, #12
   87720:	4690      	mov	r8, r2
   87722:	4681      	mov	r9, r0
   87724:	2900      	cmp	r1, #0
   87726:	f000 80ba 	beq.w	8789e <_realloc_r+0x186>
   8772a:	f7ff fce7 	bl	870fc <__malloc_lock>
   8772e:	f108 060b 	add.w	r6, r8, #11
   87732:	f854 3c04 	ldr.w	r3, [r4, #-4]
   87736:	2e16      	cmp	r6, #22
   87738:	f023 0503 	bic.w	r5, r3, #3
   8773c:	f1a4 0708 	sub.w	r7, r4, #8
   87740:	d84b      	bhi.n	877da <_realloc_r+0xc2>
   87742:	2110      	movs	r1, #16
   87744:	460e      	mov	r6, r1
   87746:	45b0      	cmp	r8, r6
   87748:	d84c      	bhi.n	877e4 <_realloc_r+0xcc>
   8774a:	428d      	cmp	r5, r1
   8774c:	da51      	bge.n	877f2 <_realloc_r+0xda>
   8774e:	f8df b384 	ldr.w	fp, [pc, #900]	; 87ad4 <_realloc_r+0x3bc>
   87752:	1978      	adds	r0, r7, r5
   87754:	f8db e008 	ldr.w	lr, [fp, #8]
   87758:	4586      	cmp	lr, r0
   8775a:	f000 80a6 	beq.w	878aa <_realloc_r+0x192>
   8775e:	6842      	ldr	r2, [r0, #4]
   87760:	f022 0c01 	bic.w	ip, r2, #1
   87764:	4484      	add	ip, r0
   87766:	f8dc c004 	ldr.w	ip, [ip, #4]
   8776a:	f01c 0f01 	tst.w	ip, #1
   8776e:	d054      	beq.n	8781a <_realloc_r+0x102>
   87770:	2200      	movs	r2, #0
   87772:	4610      	mov	r0, r2
   87774:	07db      	lsls	r3, r3, #31
   87776:	d46f      	bmi.n	87858 <_realloc_r+0x140>
   87778:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8777c:	ebc3 0a07 	rsb	sl, r3, r7
   87780:	f8da 3004 	ldr.w	r3, [sl, #4]
   87784:	f023 0303 	bic.w	r3, r3, #3
   87788:	442b      	add	r3, r5
   8778a:	2800      	cmp	r0, #0
   8778c:	d062      	beq.n	87854 <_realloc_r+0x13c>
   8778e:	4570      	cmp	r0, lr
   87790:	f000 80e9 	beq.w	87966 <_realloc_r+0x24e>
   87794:	eb02 0e03 	add.w	lr, r2, r3
   87798:	458e      	cmp	lr, r1
   8779a:	db5b      	blt.n	87854 <_realloc_r+0x13c>
   8779c:	68c3      	ldr	r3, [r0, #12]
   8779e:	6882      	ldr	r2, [r0, #8]
   877a0:	46d0      	mov	r8, sl
   877a2:	60d3      	str	r3, [r2, #12]
   877a4:	609a      	str	r2, [r3, #8]
   877a6:	f858 1f08 	ldr.w	r1, [r8, #8]!
   877aa:	f8da 300c 	ldr.w	r3, [sl, #12]
   877ae:	1f2a      	subs	r2, r5, #4
   877b0:	2a24      	cmp	r2, #36	; 0x24
   877b2:	60cb      	str	r3, [r1, #12]
   877b4:	6099      	str	r1, [r3, #8]
   877b6:	f200 8123 	bhi.w	87a00 <_realloc_r+0x2e8>
   877ba:	2a13      	cmp	r2, #19
   877bc:	f240 80b0 	bls.w	87920 <_realloc_r+0x208>
   877c0:	6823      	ldr	r3, [r4, #0]
   877c2:	2a1b      	cmp	r2, #27
   877c4:	f8ca 3008 	str.w	r3, [sl, #8]
   877c8:	6863      	ldr	r3, [r4, #4]
   877ca:	f8ca 300c 	str.w	r3, [sl, #12]
   877ce:	f200 812b 	bhi.w	87a28 <_realloc_r+0x310>
   877d2:	3408      	adds	r4, #8
   877d4:	f10a 0310 	add.w	r3, sl, #16
   877d8:	e0a3      	b.n	87922 <_realloc_r+0x20a>
   877da:	f026 0607 	bic.w	r6, r6, #7
   877de:	2e00      	cmp	r6, #0
   877e0:	4631      	mov	r1, r6
   877e2:	dab0      	bge.n	87746 <_realloc_r+0x2e>
   877e4:	230c      	movs	r3, #12
   877e6:	2000      	movs	r0, #0
   877e8:	f8c9 3000 	str.w	r3, [r9]
   877ec:	b003      	add	sp, #12
   877ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   877f2:	46a0      	mov	r8, r4
   877f4:	1baa      	subs	r2, r5, r6
   877f6:	2a0f      	cmp	r2, #15
   877f8:	f003 0301 	and.w	r3, r3, #1
   877fc:	d81a      	bhi.n	87834 <_realloc_r+0x11c>
   877fe:	432b      	orrs	r3, r5
   87800:	607b      	str	r3, [r7, #4]
   87802:	443d      	add	r5, r7
   87804:	686b      	ldr	r3, [r5, #4]
   87806:	f043 0301 	orr.w	r3, r3, #1
   8780a:	606b      	str	r3, [r5, #4]
   8780c:	4648      	mov	r0, r9
   8780e:	f7ff fc77 	bl	87100 <__malloc_unlock>
   87812:	4640      	mov	r0, r8
   87814:	b003      	add	sp, #12
   87816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8781a:	f022 0203 	bic.w	r2, r2, #3
   8781e:	eb02 0c05 	add.w	ip, r2, r5
   87822:	458c      	cmp	ip, r1
   87824:	dba6      	blt.n	87774 <_realloc_r+0x5c>
   87826:	68c2      	ldr	r2, [r0, #12]
   87828:	6881      	ldr	r1, [r0, #8]
   8782a:	46a0      	mov	r8, r4
   8782c:	60ca      	str	r2, [r1, #12]
   8782e:	4665      	mov	r5, ip
   87830:	6091      	str	r1, [r2, #8]
   87832:	e7df      	b.n	877f4 <_realloc_r+0xdc>
   87834:	19b9      	adds	r1, r7, r6
   87836:	4333      	orrs	r3, r6
   87838:	f042 0001 	orr.w	r0, r2, #1
   8783c:	607b      	str	r3, [r7, #4]
   8783e:	440a      	add	r2, r1
   87840:	6048      	str	r0, [r1, #4]
   87842:	6853      	ldr	r3, [r2, #4]
   87844:	3108      	adds	r1, #8
   87846:	f043 0301 	orr.w	r3, r3, #1
   8784a:	6053      	str	r3, [r2, #4]
   8784c:	4648      	mov	r0, r9
   8784e:	f7fe fe07 	bl	86460 <_free_r>
   87852:	e7db      	b.n	8780c <_realloc_r+0xf4>
   87854:	428b      	cmp	r3, r1
   87856:	da33      	bge.n	878c0 <_realloc_r+0x1a8>
   87858:	4641      	mov	r1, r8
   8785a:	4648      	mov	r0, r9
   8785c:	f7ff f902 	bl	86a64 <_malloc_r>
   87860:	4680      	mov	r8, r0
   87862:	2800      	cmp	r0, #0
   87864:	d0d2      	beq.n	8780c <_realloc_r+0xf4>
   87866:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8786a:	f1a0 0108 	sub.w	r1, r0, #8
   8786e:	f023 0201 	bic.w	r2, r3, #1
   87872:	443a      	add	r2, r7
   87874:	4291      	cmp	r1, r2
   87876:	f000 80bc 	beq.w	879f2 <_realloc_r+0x2da>
   8787a:	1f2a      	subs	r2, r5, #4
   8787c:	2a24      	cmp	r2, #36	; 0x24
   8787e:	d86e      	bhi.n	8795e <_realloc_r+0x246>
   87880:	2a13      	cmp	r2, #19
   87882:	d842      	bhi.n	8790a <_realloc_r+0x1f2>
   87884:	4603      	mov	r3, r0
   87886:	4622      	mov	r2, r4
   87888:	6811      	ldr	r1, [r2, #0]
   8788a:	6019      	str	r1, [r3, #0]
   8788c:	6851      	ldr	r1, [r2, #4]
   8788e:	6059      	str	r1, [r3, #4]
   87890:	6892      	ldr	r2, [r2, #8]
   87892:	609a      	str	r2, [r3, #8]
   87894:	4621      	mov	r1, r4
   87896:	4648      	mov	r0, r9
   87898:	f7fe fde2 	bl	86460 <_free_r>
   8789c:	e7b6      	b.n	8780c <_realloc_r+0xf4>
   8789e:	4611      	mov	r1, r2
   878a0:	b003      	add	sp, #12
   878a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   878a6:	f7ff b8dd 	b.w	86a64 <_malloc_r>
   878aa:	f8de 2004 	ldr.w	r2, [lr, #4]
   878ae:	f106 0c10 	add.w	ip, r6, #16
   878b2:	f022 0203 	bic.w	r2, r2, #3
   878b6:	1950      	adds	r0, r2, r5
   878b8:	4560      	cmp	r0, ip
   878ba:	da3d      	bge.n	87938 <_realloc_r+0x220>
   878bc:	4670      	mov	r0, lr
   878be:	e759      	b.n	87774 <_realloc_r+0x5c>
   878c0:	46d0      	mov	r8, sl
   878c2:	f858 0f08 	ldr.w	r0, [r8, #8]!
   878c6:	f8da 100c 	ldr.w	r1, [sl, #12]
   878ca:	1f2a      	subs	r2, r5, #4
   878cc:	2a24      	cmp	r2, #36	; 0x24
   878ce:	60c1      	str	r1, [r0, #12]
   878d0:	6088      	str	r0, [r1, #8]
   878d2:	f200 80a0 	bhi.w	87a16 <_realloc_r+0x2fe>
   878d6:	2a13      	cmp	r2, #19
   878d8:	f240 809b 	bls.w	87a12 <_realloc_r+0x2fa>
   878dc:	6821      	ldr	r1, [r4, #0]
   878de:	2a1b      	cmp	r2, #27
   878e0:	f8ca 1008 	str.w	r1, [sl, #8]
   878e4:	6861      	ldr	r1, [r4, #4]
   878e6:	f8ca 100c 	str.w	r1, [sl, #12]
   878ea:	f200 80b2 	bhi.w	87a52 <_realloc_r+0x33a>
   878ee:	3408      	adds	r4, #8
   878f0:	f10a 0210 	add.w	r2, sl, #16
   878f4:	6821      	ldr	r1, [r4, #0]
   878f6:	461d      	mov	r5, r3
   878f8:	6011      	str	r1, [r2, #0]
   878fa:	6861      	ldr	r1, [r4, #4]
   878fc:	4657      	mov	r7, sl
   878fe:	6051      	str	r1, [r2, #4]
   87900:	68a3      	ldr	r3, [r4, #8]
   87902:	6093      	str	r3, [r2, #8]
   87904:	f8da 3004 	ldr.w	r3, [sl, #4]
   87908:	e774      	b.n	877f4 <_realloc_r+0xdc>
   8790a:	6823      	ldr	r3, [r4, #0]
   8790c:	2a1b      	cmp	r2, #27
   8790e:	6003      	str	r3, [r0, #0]
   87910:	6863      	ldr	r3, [r4, #4]
   87912:	6043      	str	r3, [r0, #4]
   87914:	d862      	bhi.n	879dc <_realloc_r+0x2c4>
   87916:	f100 0308 	add.w	r3, r0, #8
   8791a:	f104 0208 	add.w	r2, r4, #8
   8791e:	e7b3      	b.n	87888 <_realloc_r+0x170>
   87920:	4643      	mov	r3, r8
   87922:	6822      	ldr	r2, [r4, #0]
   87924:	4675      	mov	r5, lr
   87926:	601a      	str	r2, [r3, #0]
   87928:	6862      	ldr	r2, [r4, #4]
   8792a:	4657      	mov	r7, sl
   8792c:	605a      	str	r2, [r3, #4]
   8792e:	68a2      	ldr	r2, [r4, #8]
   87930:	609a      	str	r2, [r3, #8]
   87932:	f8da 3004 	ldr.w	r3, [sl, #4]
   87936:	e75d      	b.n	877f4 <_realloc_r+0xdc>
   87938:	1b83      	subs	r3, r0, r6
   8793a:	4437      	add	r7, r6
   8793c:	f043 0301 	orr.w	r3, r3, #1
   87940:	f8cb 7008 	str.w	r7, [fp, #8]
   87944:	607b      	str	r3, [r7, #4]
   87946:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8794a:	4648      	mov	r0, r9
   8794c:	f003 0301 	and.w	r3, r3, #1
   87950:	431e      	orrs	r6, r3
   87952:	f844 6c04 	str.w	r6, [r4, #-4]
   87956:	f7ff fbd3 	bl	87100 <__malloc_unlock>
   8795a:	4620      	mov	r0, r4
   8795c:	e75a      	b.n	87814 <_realloc_r+0xfc>
   8795e:	4621      	mov	r1, r4
   87960:	f7ff fb66 	bl	87030 <memmove>
   87964:	e796      	b.n	87894 <_realloc_r+0x17c>
   87966:	eb02 0c03 	add.w	ip, r2, r3
   8796a:	f106 0210 	add.w	r2, r6, #16
   8796e:	4594      	cmp	ip, r2
   87970:	f6ff af70 	blt.w	87854 <_realloc_r+0x13c>
   87974:	4657      	mov	r7, sl
   87976:	f857 1f08 	ldr.w	r1, [r7, #8]!
   8797a:	f8da 300c 	ldr.w	r3, [sl, #12]
   8797e:	1f2a      	subs	r2, r5, #4
   87980:	2a24      	cmp	r2, #36	; 0x24
   87982:	60cb      	str	r3, [r1, #12]
   87984:	6099      	str	r1, [r3, #8]
   87986:	f200 8086 	bhi.w	87a96 <_realloc_r+0x37e>
   8798a:	2a13      	cmp	r2, #19
   8798c:	d977      	bls.n	87a7e <_realloc_r+0x366>
   8798e:	6823      	ldr	r3, [r4, #0]
   87990:	2a1b      	cmp	r2, #27
   87992:	f8ca 3008 	str.w	r3, [sl, #8]
   87996:	6863      	ldr	r3, [r4, #4]
   87998:	f8ca 300c 	str.w	r3, [sl, #12]
   8799c:	f200 8084 	bhi.w	87aa8 <_realloc_r+0x390>
   879a0:	3408      	adds	r4, #8
   879a2:	f10a 0310 	add.w	r3, sl, #16
   879a6:	6822      	ldr	r2, [r4, #0]
   879a8:	601a      	str	r2, [r3, #0]
   879aa:	6862      	ldr	r2, [r4, #4]
   879ac:	605a      	str	r2, [r3, #4]
   879ae:	68a2      	ldr	r2, [r4, #8]
   879b0:	609a      	str	r2, [r3, #8]
   879b2:	ebc6 020c 	rsb	r2, r6, ip
   879b6:	eb0a 0306 	add.w	r3, sl, r6
   879ba:	f042 0201 	orr.w	r2, r2, #1
   879be:	f8cb 3008 	str.w	r3, [fp, #8]
   879c2:	605a      	str	r2, [r3, #4]
   879c4:	f8da 3004 	ldr.w	r3, [sl, #4]
   879c8:	4648      	mov	r0, r9
   879ca:	f003 0301 	and.w	r3, r3, #1
   879ce:	431e      	orrs	r6, r3
   879d0:	f8ca 6004 	str.w	r6, [sl, #4]
   879d4:	f7ff fb94 	bl	87100 <__malloc_unlock>
   879d8:	4638      	mov	r0, r7
   879da:	e71b      	b.n	87814 <_realloc_r+0xfc>
   879dc:	68a3      	ldr	r3, [r4, #8]
   879de:	2a24      	cmp	r2, #36	; 0x24
   879e0:	6083      	str	r3, [r0, #8]
   879e2:	68e3      	ldr	r3, [r4, #12]
   879e4:	60c3      	str	r3, [r0, #12]
   879e6:	d02b      	beq.n	87a40 <_realloc_r+0x328>
   879e8:	f100 0310 	add.w	r3, r0, #16
   879ec:	f104 0210 	add.w	r2, r4, #16
   879f0:	e74a      	b.n	87888 <_realloc_r+0x170>
   879f2:	f850 2c04 	ldr.w	r2, [r0, #-4]
   879f6:	46a0      	mov	r8, r4
   879f8:	f022 0203 	bic.w	r2, r2, #3
   879fc:	4415      	add	r5, r2
   879fe:	e6f9      	b.n	877f4 <_realloc_r+0xdc>
   87a00:	4621      	mov	r1, r4
   87a02:	4640      	mov	r0, r8
   87a04:	4675      	mov	r5, lr
   87a06:	4657      	mov	r7, sl
   87a08:	f7ff fb12 	bl	87030 <memmove>
   87a0c:	f8da 3004 	ldr.w	r3, [sl, #4]
   87a10:	e6f0      	b.n	877f4 <_realloc_r+0xdc>
   87a12:	4642      	mov	r2, r8
   87a14:	e76e      	b.n	878f4 <_realloc_r+0x1dc>
   87a16:	4621      	mov	r1, r4
   87a18:	4640      	mov	r0, r8
   87a1a:	461d      	mov	r5, r3
   87a1c:	4657      	mov	r7, sl
   87a1e:	f7ff fb07 	bl	87030 <memmove>
   87a22:	f8da 3004 	ldr.w	r3, [sl, #4]
   87a26:	e6e5      	b.n	877f4 <_realloc_r+0xdc>
   87a28:	68a3      	ldr	r3, [r4, #8]
   87a2a:	2a24      	cmp	r2, #36	; 0x24
   87a2c:	f8ca 3010 	str.w	r3, [sl, #16]
   87a30:	68e3      	ldr	r3, [r4, #12]
   87a32:	f8ca 3014 	str.w	r3, [sl, #20]
   87a36:	d018      	beq.n	87a6a <_realloc_r+0x352>
   87a38:	3410      	adds	r4, #16
   87a3a:	f10a 0318 	add.w	r3, sl, #24
   87a3e:	e770      	b.n	87922 <_realloc_r+0x20a>
   87a40:	6922      	ldr	r2, [r4, #16]
   87a42:	f100 0318 	add.w	r3, r0, #24
   87a46:	6102      	str	r2, [r0, #16]
   87a48:	6961      	ldr	r1, [r4, #20]
   87a4a:	f104 0218 	add.w	r2, r4, #24
   87a4e:	6141      	str	r1, [r0, #20]
   87a50:	e71a      	b.n	87888 <_realloc_r+0x170>
   87a52:	68a1      	ldr	r1, [r4, #8]
   87a54:	2a24      	cmp	r2, #36	; 0x24
   87a56:	f8ca 1010 	str.w	r1, [sl, #16]
   87a5a:	68e1      	ldr	r1, [r4, #12]
   87a5c:	f8ca 1014 	str.w	r1, [sl, #20]
   87a60:	d00f      	beq.n	87a82 <_realloc_r+0x36a>
   87a62:	3410      	adds	r4, #16
   87a64:	f10a 0218 	add.w	r2, sl, #24
   87a68:	e744      	b.n	878f4 <_realloc_r+0x1dc>
   87a6a:	6922      	ldr	r2, [r4, #16]
   87a6c:	f10a 0320 	add.w	r3, sl, #32
   87a70:	f8ca 2018 	str.w	r2, [sl, #24]
   87a74:	6962      	ldr	r2, [r4, #20]
   87a76:	3418      	adds	r4, #24
   87a78:	f8ca 201c 	str.w	r2, [sl, #28]
   87a7c:	e751      	b.n	87922 <_realloc_r+0x20a>
   87a7e:	463b      	mov	r3, r7
   87a80:	e791      	b.n	879a6 <_realloc_r+0x28e>
   87a82:	6921      	ldr	r1, [r4, #16]
   87a84:	f10a 0220 	add.w	r2, sl, #32
   87a88:	f8ca 1018 	str.w	r1, [sl, #24]
   87a8c:	6961      	ldr	r1, [r4, #20]
   87a8e:	3418      	adds	r4, #24
   87a90:	f8ca 101c 	str.w	r1, [sl, #28]
   87a94:	e72e      	b.n	878f4 <_realloc_r+0x1dc>
   87a96:	4621      	mov	r1, r4
   87a98:	4638      	mov	r0, r7
   87a9a:	f8cd c004 	str.w	ip, [sp, #4]
   87a9e:	f7ff fac7 	bl	87030 <memmove>
   87aa2:	f8dd c004 	ldr.w	ip, [sp, #4]
   87aa6:	e784      	b.n	879b2 <_realloc_r+0x29a>
   87aa8:	68a3      	ldr	r3, [r4, #8]
   87aaa:	2a24      	cmp	r2, #36	; 0x24
   87aac:	f8ca 3010 	str.w	r3, [sl, #16]
   87ab0:	68e3      	ldr	r3, [r4, #12]
   87ab2:	f8ca 3014 	str.w	r3, [sl, #20]
   87ab6:	d003      	beq.n	87ac0 <_realloc_r+0x3a8>
   87ab8:	3410      	adds	r4, #16
   87aba:	f10a 0318 	add.w	r3, sl, #24
   87abe:	e772      	b.n	879a6 <_realloc_r+0x28e>
   87ac0:	6922      	ldr	r2, [r4, #16]
   87ac2:	f10a 0320 	add.w	r3, sl, #32
   87ac6:	f8ca 2018 	str.w	r2, [sl, #24]
   87aca:	6962      	ldr	r2, [r4, #20]
   87acc:	3418      	adds	r4, #24
   87ace:	f8ca 201c 	str.w	r2, [sl, #28]
   87ad2:	e768      	b.n	879a6 <_realloc_r+0x28e>
   87ad4:	20070618 	.word	0x20070618

00087ad8 <__fpclassifyd>:
   87ad8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   87adc:	b410      	push	{r4}
   87ade:	d008      	beq.n	87af2 <__fpclassifyd+0x1a>
   87ae0:	4a0f      	ldr	r2, [pc, #60]	; (87b20 <__fpclassifyd+0x48>)
   87ae2:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
   87ae6:	4294      	cmp	r4, r2
   87ae8:	d80a      	bhi.n	87b00 <__fpclassifyd+0x28>
   87aea:	2004      	movs	r0, #4
   87aec:	f85d 4b04 	ldr.w	r4, [sp], #4
   87af0:	4770      	bx	lr
   87af2:	2800      	cmp	r0, #0
   87af4:	bf0c      	ite	eq
   87af6:	2002      	moveq	r0, #2
   87af8:	2003      	movne	r0, #3
   87afa:	f85d 4b04 	ldr.w	r4, [sp], #4
   87afe:	4770      	bx	lr
   87b00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   87b04:	d201      	bcs.n	87b0a <__fpclassifyd+0x32>
   87b06:	2003      	movs	r0, #3
   87b08:	e7f7      	b.n	87afa <__fpclassifyd+0x22>
   87b0a:	4a06      	ldr	r2, [pc, #24]	; (87b24 <__fpclassifyd+0x4c>)
   87b0c:	4293      	cmp	r3, r2
   87b0e:	d001      	beq.n	87b14 <__fpclassifyd+0x3c>
   87b10:	2000      	movs	r0, #0
   87b12:	e7f2      	b.n	87afa <__fpclassifyd+0x22>
   87b14:	f1d0 0001 	rsbs	r0, r0, #1
   87b18:	bf38      	it	cc
   87b1a:	2000      	movcc	r0, #0
   87b1c:	e7ed      	b.n	87afa <__fpclassifyd+0x22>
   87b1e:	bf00      	nop
   87b20:	7fdfffff 	.word	0x7fdfffff
   87b24:	7ff00000 	.word	0x7ff00000

00087b28 <_sbrk_r>:
   87b28:	b538      	push	{r3, r4, r5, lr}
   87b2a:	4c07      	ldr	r4, [pc, #28]	; (87b48 <_sbrk_r+0x20>)
   87b2c:	2300      	movs	r3, #0
   87b2e:	4605      	mov	r5, r0
   87b30:	4608      	mov	r0, r1
   87b32:	6023      	str	r3, [r4, #0]
   87b34:	f7fa fe8e 	bl	82854 <_sbrk>
   87b38:	1c43      	adds	r3, r0, #1
   87b3a:	d000      	beq.n	87b3e <_sbrk_r+0x16>
   87b3c:	bd38      	pop	{r3, r4, r5, pc}
   87b3e:	6823      	ldr	r3, [r4, #0]
   87b40:	2b00      	cmp	r3, #0
   87b42:	d0fb      	beq.n	87b3c <_sbrk_r+0x14>
   87b44:	602b      	str	r3, [r5, #0]
   87b46:	bd38      	pop	{r3, r4, r5, pc}
   87b48:	20078d90 	.word	0x20078d90

00087b4c <__sread>:
   87b4c:	b510      	push	{r4, lr}
   87b4e:	460c      	mov	r4, r1
   87b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   87b54:	f000 fa1e 	bl	87f94 <_read_r>
   87b58:	2800      	cmp	r0, #0
   87b5a:	db03      	blt.n	87b64 <__sread+0x18>
   87b5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   87b5e:	4403      	add	r3, r0
   87b60:	6523      	str	r3, [r4, #80]	; 0x50
   87b62:	bd10      	pop	{r4, pc}
   87b64:	89a3      	ldrh	r3, [r4, #12]
   87b66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   87b6a:	81a3      	strh	r3, [r4, #12]
   87b6c:	bd10      	pop	{r4, pc}
   87b6e:	bf00      	nop

00087b70 <__swrite>:
   87b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87b74:	460c      	mov	r4, r1
   87b76:	8989      	ldrh	r1, [r1, #12]
   87b78:	461d      	mov	r5, r3
   87b7a:	05cb      	lsls	r3, r1, #23
   87b7c:	4616      	mov	r6, r2
   87b7e:	4607      	mov	r7, r0
   87b80:	d506      	bpl.n	87b90 <__swrite+0x20>
   87b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   87b86:	2200      	movs	r2, #0
   87b88:	2302      	movs	r3, #2
   87b8a:	f000 f9ef 	bl	87f6c <_lseek_r>
   87b8e:	89a1      	ldrh	r1, [r4, #12]
   87b90:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   87b94:	81a1      	strh	r1, [r4, #12]
   87b96:	4638      	mov	r0, r7
   87b98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   87b9c:	4632      	mov	r2, r6
   87b9e:	462b      	mov	r3, r5
   87ba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   87ba4:	f000 b8ca 	b.w	87d3c <_write_r>

00087ba8 <__sseek>:
   87ba8:	b510      	push	{r4, lr}
   87baa:	460c      	mov	r4, r1
   87bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   87bb0:	f000 f9dc 	bl	87f6c <_lseek_r>
   87bb4:	89a3      	ldrh	r3, [r4, #12]
   87bb6:	1c42      	adds	r2, r0, #1
   87bb8:	bf0e      	itee	eq
   87bba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   87bbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   87bc2:	6520      	strne	r0, [r4, #80]	; 0x50
   87bc4:	81a3      	strh	r3, [r4, #12]
   87bc6:	bd10      	pop	{r4, pc}

00087bc8 <__sclose>:
   87bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   87bcc:	f000 b94e 	b.w	87e6c <_close_r>

00087bd0 <__ssprint_r>:
   87bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87bd4:	6894      	ldr	r4, [r2, #8]
   87bd6:	b083      	sub	sp, #12
   87bd8:	4692      	mov	sl, r2
   87bda:	4680      	mov	r8, r0
   87bdc:	460d      	mov	r5, r1
   87bde:	6816      	ldr	r6, [r2, #0]
   87be0:	2c00      	cmp	r4, #0
   87be2:	d06f      	beq.n	87cc4 <__ssprint_r+0xf4>
   87be4:	f04f 0b00 	mov.w	fp, #0
   87be8:	6808      	ldr	r0, [r1, #0]
   87bea:	688b      	ldr	r3, [r1, #8]
   87bec:	465c      	mov	r4, fp
   87bee:	2c00      	cmp	r4, #0
   87bf0:	d043      	beq.n	87c7a <__ssprint_r+0xaa>
   87bf2:	429c      	cmp	r4, r3
   87bf4:	461f      	mov	r7, r3
   87bf6:	d345      	bcc.n	87c84 <__ssprint_r+0xb4>
   87bf8:	89ab      	ldrh	r3, [r5, #12]
   87bfa:	f413 6f90 	tst.w	r3, #1152	; 0x480
   87bfe:	d044      	beq.n	87c8a <__ssprint_r+0xba>
   87c00:	696f      	ldr	r7, [r5, #20]
   87c02:	6929      	ldr	r1, [r5, #16]
   87c04:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   87c08:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   87c0c:	ebc1 0900 	rsb	r9, r1, r0
   87c10:	1c62      	adds	r2, r4, #1
   87c12:	107f      	asrs	r7, r7, #1
   87c14:	444a      	add	r2, r9
   87c16:	4297      	cmp	r7, r2
   87c18:	bf34      	ite	cc
   87c1a:	4617      	movcc	r7, r2
   87c1c:	463a      	movcs	r2, r7
   87c1e:	055b      	lsls	r3, r3, #21
   87c20:	d535      	bpl.n	87c8e <__ssprint_r+0xbe>
   87c22:	4611      	mov	r1, r2
   87c24:	4640      	mov	r0, r8
   87c26:	f7fe ff1d 	bl	86a64 <_malloc_r>
   87c2a:	2800      	cmp	r0, #0
   87c2c:	d039      	beq.n	87ca2 <__ssprint_r+0xd2>
   87c2e:	6929      	ldr	r1, [r5, #16]
   87c30:	464a      	mov	r2, r9
   87c32:	9001      	str	r0, [sp, #4]
   87c34:	f7fa feae 	bl	82994 <memcpy>
   87c38:	89aa      	ldrh	r2, [r5, #12]
   87c3a:	9b01      	ldr	r3, [sp, #4]
   87c3c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   87c40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   87c44:	81aa      	strh	r2, [r5, #12]
   87c46:	ebc9 0207 	rsb	r2, r9, r7
   87c4a:	eb03 0009 	add.w	r0, r3, r9
   87c4e:	616f      	str	r7, [r5, #20]
   87c50:	612b      	str	r3, [r5, #16]
   87c52:	6028      	str	r0, [r5, #0]
   87c54:	60aa      	str	r2, [r5, #8]
   87c56:	4627      	mov	r7, r4
   87c58:	46a1      	mov	r9, r4
   87c5a:	464a      	mov	r2, r9
   87c5c:	4659      	mov	r1, fp
   87c5e:	f7ff f9e7 	bl	87030 <memmove>
   87c62:	f8da 2008 	ldr.w	r2, [sl, #8]
   87c66:	68ab      	ldr	r3, [r5, #8]
   87c68:	6828      	ldr	r0, [r5, #0]
   87c6a:	1bdb      	subs	r3, r3, r7
   87c6c:	4448      	add	r0, r9
   87c6e:	1b14      	subs	r4, r2, r4
   87c70:	60ab      	str	r3, [r5, #8]
   87c72:	6028      	str	r0, [r5, #0]
   87c74:	f8ca 4008 	str.w	r4, [sl, #8]
   87c78:	b324      	cbz	r4, 87cc4 <__ssprint_r+0xf4>
   87c7a:	f8d6 b000 	ldr.w	fp, [r6]
   87c7e:	6874      	ldr	r4, [r6, #4]
   87c80:	3608      	adds	r6, #8
   87c82:	e7b4      	b.n	87bee <__ssprint_r+0x1e>
   87c84:	4627      	mov	r7, r4
   87c86:	46a1      	mov	r9, r4
   87c88:	e7e7      	b.n	87c5a <__ssprint_r+0x8a>
   87c8a:	46b9      	mov	r9, r7
   87c8c:	e7e5      	b.n	87c5a <__ssprint_r+0x8a>
   87c8e:	4640      	mov	r0, r8
   87c90:	f7ff fd42 	bl	87718 <_realloc_r>
   87c94:	4603      	mov	r3, r0
   87c96:	2800      	cmp	r0, #0
   87c98:	d1d5      	bne.n	87c46 <__ssprint_r+0x76>
   87c9a:	4640      	mov	r0, r8
   87c9c:	6929      	ldr	r1, [r5, #16]
   87c9e:	f7fe fbdf 	bl	86460 <_free_r>
   87ca2:	89aa      	ldrh	r2, [r5, #12]
   87ca4:	230c      	movs	r3, #12
   87ca6:	f8c8 3000 	str.w	r3, [r8]
   87caa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   87cae:	2300      	movs	r3, #0
   87cb0:	f04f 30ff 	mov.w	r0, #4294967295
   87cb4:	81aa      	strh	r2, [r5, #12]
   87cb6:	f8ca 3008 	str.w	r3, [sl, #8]
   87cba:	f8ca 3004 	str.w	r3, [sl, #4]
   87cbe:	b003      	add	sp, #12
   87cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87cc4:	4620      	mov	r0, r4
   87cc6:	f8ca 4004 	str.w	r4, [sl, #4]
   87cca:	b003      	add	sp, #12
   87ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00087cd0 <_wcrtomb_r>:
   87cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87cd4:	461e      	mov	r6, r3
   87cd6:	b086      	sub	sp, #24
   87cd8:	460c      	mov	r4, r1
   87cda:	4605      	mov	r5, r0
   87cdc:	4617      	mov	r7, r2
   87cde:	4b0f      	ldr	r3, [pc, #60]	; (87d1c <_wcrtomb_r+0x4c>)
   87ce0:	b191      	cbz	r1, 87d08 <_wcrtomb_r+0x38>
   87ce2:	f8d3 8000 	ldr.w	r8, [r3]
   87ce6:	f7fe fe37 	bl	86958 <__locale_charset>
   87cea:	9600      	str	r6, [sp, #0]
   87cec:	4603      	mov	r3, r0
   87cee:	4621      	mov	r1, r4
   87cf0:	463a      	mov	r2, r7
   87cf2:	4628      	mov	r0, r5
   87cf4:	47c0      	blx	r8
   87cf6:	1c43      	adds	r3, r0, #1
   87cf8:	d103      	bne.n	87d02 <_wcrtomb_r+0x32>
   87cfa:	2200      	movs	r2, #0
   87cfc:	238a      	movs	r3, #138	; 0x8a
   87cfe:	6032      	str	r2, [r6, #0]
   87d00:	602b      	str	r3, [r5, #0]
   87d02:	b006      	add	sp, #24
   87d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87d08:	681f      	ldr	r7, [r3, #0]
   87d0a:	f7fe fe25 	bl	86958 <__locale_charset>
   87d0e:	9600      	str	r6, [sp, #0]
   87d10:	4603      	mov	r3, r0
   87d12:	4622      	mov	r2, r4
   87d14:	4628      	mov	r0, r5
   87d16:	a903      	add	r1, sp, #12
   87d18:	47b8      	blx	r7
   87d1a:	e7ec      	b.n	87cf6 <_wcrtomb_r+0x26>
   87d1c:	20070a28 	.word	0x20070a28

00087d20 <__ascii_wctomb>:
   87d20:	b121      	cbz	r1, 87d2c <__ascii_wctomb+0xc>
   87d22:	2aff      	cmp	r2, #255	; 0xff
   87d24:	d804      	bhi.n	87d30 <__ascii_wctomb+0x10>
   87d26:	700a      	strb	r2, [r1, #0]
   87d28:	2001      	movs	r0, #1
   87d2a:	4770      	bx	lr
   87d2c:	4608      	mov	r0, r1
   87d2e:	4770      	bx	lr
   87d30:	238a      	movs	r3, #138	; 0x8a
   87d32:	6003      	str	r3, [r0, #0]
   87d34:	f04f 30ff 	mov.w	r0, #4294967295
   87d38:	4770      	bx	lr
   87d3a:	bf00      	nop

00087d3c <_write_r>:
   87d3c:	b570      	push	{r4, r5, r6, lr}
   87d3e:	4c08      	ldr	r4, [pc, #32]	; (87d60 <_write_r+0x24>)
   87d40:	4606      	mov	r6, r0
   87d42:	2500      	movs	r5, #0
   87d44:	4608      	mov	r0, r1
   87d46:	4611      	mov	r1, r2
   87d48:	461a      	mov	r2, r3
   87d4a:	6025      	str	r5, [r4, #0]
   87d4c:	f7fa f966 	bl	8201c <_write>
   87d50:	1c43      	adds	r3, r0, #1
   87d52:	d000      	beq.n	87d56 <_write_r+0x1a>
   87d54:	bd70      	pop	{r4, r5, r6, pc}
   87d56:	6823      	ldr	r3, [r4, #0]
   87d58:	2b00      	cmp	r3, #0
   87d5a:	d0fb      	beq.n	87d54 <_write_r+0x18>
   87d5c:	6033      	str	r3, [r6, #0]
   87d5e:	bd70      	pop	{r4, r5, r6, pc}
   87d60:	20078d90 	.word	0x20078d90

00087d64 <__register_exitproc>:
   87d64:	b5f0      	push	{r4, r5, r6, r7, lr}
   87d66:	4c27      	ldr	r4, [pc, #156]	; (87e04 <__register_exitproc+0xa0>)
   87d68:	b085      	sub	sp, #20
   87d6a:	6826      	ldr	r6, [r4, #0]
   87d6c:	4607      	mov	r7, r0
   87d6e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   87d72:	2c00      	cmp	r4, #0
   87d74:	d040      	beq.n	87df8 <__register_exitproc+0x94>
   87d76:	6865      	ldr	r5, [r4, #4]
   87d78:	2d1f      	cmp	r5, #31
   87d7a:	dd1e      	ble.n	87dba <__register_exitproc+0x56>
   87d7c:	4822      	ldr	r0, [pc, #136]	; (87e08 <__register_exitproc+0xa4>)
   87d7e:	b918      	cbnz	r0, 87d88 <__register_exitproc+0x24>
   87d80:	f04f 30ff 	mov.w	r0, #4294967295
   87d84:	b005      	add	sp, #20
   87d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87d88:	f44f 70c8 	mov.w	r0, #400	; 0x190
   87d8c:	9103      	str	r1, [sp, #12]
   87d8e:	9202      	str	r2, [sp, #8]
   87d90:	9301      	str	r3, [sp, #4]
   87d92:	f7fe fe5f 	bl	86a54 <malloc>
   87d96:	9903      	ldr	r1, [sp, #12]
   87d98:	4604      	mov	r4, r0
   87d9a:	9a02      	ldr	r2, [sp, #8]
   87d9c:	9b01      	ldr	r3, [sp, #4]
   87d9e:	2800      	cmp	r0, #0
   87da0:	d0ee      	beq.n	87d80 <__register_exitproc+0x1c>
   87da2:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   87da6:	2000      	movs	r0, #0
   87da8:	6025      	str	r5, [r4, #0]
   87daa:	6060      	str	r0, [r4, #4]
   87dac:	4605      	mov	r5, r0
   87dae:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   87db2:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   87db6:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   87dba:	b93f      	cbnz	r7, 87dcc <__register_exitproc+0x68>
   87dbc:	1c6b      	adds	r3, r5, #1
   87dbe:	2000      	movs	r0, #0
   87dc0:	3502      	adds	r5, #2
   87dc2:	6063      	str	r3, [r4, #4]
   87dc4:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   87dc8:	b005      	add	sp, #20
   87dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87dcc:	2601      	movs	r6, #1
   87dce:	40ae      	lsls	r6, r5
   87dd0:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   87dd4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   87dd8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   87ddc:	2f02      	cmp	r7, #2
   87dde:	ea42 0206 	orr.w	r2, r2, r6
   87de2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   87de6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   87dea:	d1e7      	bne.n	87dbc <__register_exitproc+0x58>
   87dec:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   87df0:	431e      	orrs	r6, r3
   87df2:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   87df6:	e7e1      	b.n	87dbc <__register_exitproc+0x58>
   87df8:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   87dfc:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   87e00:	e7b9      	b.n	87d76 <__register_exitproc+0x12>
   87e02:	bf00      	nop
   87e04:	00089008 	.word	0x00089008
   87e08:	00086a55 	.word	0x00086a55

00087e0c <_calloc_r>:
   87e0c:	b510      	push	{r4, lr}
   87e0e:	fb02 f101 	mul.w	r1, r2, r1
   87e12:	f7fe fe27 	bl	86a64 <_malloc_r>
   87e16:	4604      	mov	r4, r0
   87e18:	b168      	cbz	r0, 87e36 <_calloc_r+0x2a>
   87e1a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   87e1e:	f022 0203 	bic.w	r2, r2, #3
   87e22:	3a04      	subs	r2, #4
   87e24:	2a24      	cmp	r2, #36	; 0x24
   87e26:	d818      	bhi.n	87e5a <_calloc_r+0x4e>
   87e28:	2a13      	cmp	r2, #19
   87e2a:	d806      	bhi.n	87e3a <_calloc_r+0x2e>
   87e2c:	4603      	mov	r3, r0
   87e2e:	2200      	movs	r2, #0
   87e30:	601a      	str	r2, [r3, #0]
   87e32:	605a      	str	r2, [r3, #4]
   87e34:	609a      	str	r2, [r3, #8]
   87e36:	4620      	mov	r0, r4
   87e38:	bd10      	pop	{r4, pc}
   87e3a:	2300      	movs	r3, #0
   87e3c:	2a1b      	cmp	r2, #27
   87e3e:	6003      	str	r3, [r0, #0]
   87e40:	6043      	str	r3, [r0, #4]
   87e42:	d90f      	bls.n	87e64 <_calloc_r+0x58>
   87e44:	2a24      	cmp	r2, #36	; 0x24
   87e46:	6083      	str	r3, [r0, #8]
   87e48:	60c3      	str	r3, [r0, #12]
   87e4a:	bf05      	ittet	eq
   87e4c:	6103      	streq	r3, [r0, #16]
   87e4e:	6143      	streq	r3, [r0, #20]
   87e50:	f100 0310 	addne.w	r3, r0, #16
   87e54:	f100 0318 	addeq.w	r3, r0, #24
   87e58:	e7e9      	b.n	87e2e <_calloc_r+0x22>
   87e5a:	2100      	movs	r1, #0
   87e5c:	f7fa fe10 	bl	82a80 <memset>
   87e60:	4620      	mov	r0, r4
   87e62:	bd10      	pop	{r4, pc}
   87e64:	f100 0308 	add.w	r3, r0, #8
   87e68:	e7e1      	b.n	87e2e <_calloc_r+0x22>
   87e6a:	bf00      	nop

00087e6c <_close_r>:
   87e6c:	b538      	push	{r3, r4, r5, lr}
   87e6e:	4c07      	ldr	r4, [pc, #28]	; (87e8c <_close_r+0x20>)
   87e70:	2300      	movs	r3, #0
   87e72:	4605      	mov	r5, r0
   87e74:	4608      	mov	r0, r1
   87e76:	6023      	str	r3, [r4, #0]
   87e78:	f7fa fd06 	bl	82888 <_close>
   87e7c:	1c43      	adds	r3, r0, #1
   87e7e:	d000      	beq.n	87e82 <_close_r+0x16>
   87e80:	bd38      	pop	{r3, r4, r5, pc}
   87e82:	6823      	ldr	r3, [r4, #0]
   87e84:	2b00      	cmp	r3, #0
   87e86:	d0fb      	beq.n	87e80 <_close_r+0x14>
   87e88:	602b      	str	r3, [r5, #0]
   87e8a:	bd38      	pop	{r3, r4, r5, pc}
   87e8c:	20078d90 	.word	0x20078d90

00087e90 <_fclose_r>:
   87e90:	b570      	push	{r4, r5, r6, lr}
   87e92:	460c      	mov	r4, r1
   87e94:	4605      	mov	r5, r0
   87e96:	b131      	cbz	r1, 87ea6 <_fclose_r+0x16>
   87e98:	b110      	cbz	r0, 87ea0 <_fclose_r+0x10>
   87e9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87e9c:	2b00      	cmp	r3, #0
   87e9e:	d02f      	beq.n	87f00 <_fclose_r+0x70>
   87ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87ea4:	b90b      	cbnz	r3, 87eaa <_fclose_r+0x1a>
   87ea6:	2000      	movs	r0, #0
   87ea8:	bd70      	pop	{r4, r5, r6, pc}
   87eaa:	4628      	mov	r0, r5
   87eac:	4621      	mov	r1, r4
   87eae:	f7fe f977 	bl	861a0 <_fflush_r>
   87eb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   87eb4:	4606      	mov	r6, r0
   87eb6:	b133      	cbz	r3, 87ec6 <_fclose_r+0x36>
   87eb8:	4628      	mov	r0, r5
   87eba:	69e1      	ldr	r1, [r4, #28]
   87ebc:	4798      	blx	r3
   87ebe:	2800      	cmp	r0, #0
   87ec0:	bfb8      	it	lt
   87ec2:	f04f 36ff 	movlt.w	r6, #4294967295
   87ec6:	89a3      	ldrh	r3, [r4, #12]
   87ec8:	061b      	lsls	r3, r3, #24
   87eca:	d41c      	bmi.n	87f06 <_fclose_r+0x76>
   87ecc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   87ece:	b141      	cbz	r1, 87ee2 <_fclose_r+0x52>
   87ed0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   87ed4:	4299      	cmp	r1, r3
   87ed6:	d002      	beq.n	87ede <_fclose_r+0x4e>
   87ed8:	4628      	mov	r0, r5
   87eda:	f7fe fac1 	bl	86460 <_free_r>
   87ede:	2300      	movs	r3, #0
   87ee0:	6323      	str	r3, [r4, #48]	; 0x30
   87ee2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   87ee4:	b121      	cbz	r1, 87ef0 <_fclose_r+0x60>
   87ee6:	4628      	mov	r0, r5
   87ee8:	f7fe faba 	bl	86460 <_free_r>
   87eec:	2300      	movs	r3, #0
   87eee:	6463      	str	r3, [r4, #68]	; 0x44
   87ef0:	f7fe f9ec 	bl	862cc <__sfp_lock_acquire>
   87ef4:	2300      	movs	r3, #0
   87ef6:	81a3      	strh	r3, [r4, #12]
   87ef8:	f7fe f9ea 	bl	862d0 <__sfp_lock_release>
   87efc:	4630      	mov	r0, r6
   87efe:	bd70      	pop	{r4, r5, r6, pc}
   87f00:	f7fe f96a 	bl	861d8 <__sinit>
   87f04:	e7cc      	b.n	87ea0 <_fclose_r+0x10>
   87f06:	4628      	mov	r0, r5
   87f08:	6921      	ldr	r1, [r4, #16]
   87f0a:	f7fe faa9 	bl	86460 <_free_r>
   87f0e:	e7dd      	b.n	87ecc <_fclose_r+0x3c>

00087f10 <fclose>:
   87f10:	4b02      	ldr	r3, [pc, #8]	; (87f1c <fclose+0xc>)
   87f12:	4601      	mov	r1, r0
   87f14:	6818      	ldr	r0, [r3, #0]
   87f16:	f7ff bfbb 	b.w	87e90 <_fclose_r>
   87f1a:	bf00      	nop
   87f1c:	200705b8 	.word	0x200705b8

00087f20 <_fstat_r>:
   87f20:	b538      	push	{r3, r4, r5, lr}
   87f22:	4c08      	ldr	r4, [pc, #32]	; (87f44 <_fstat_r+0x24>)
   87f24:	2300      	movs	r3, #0
   87f26:	4605      	mov	r5, r0
   87f28:	4608      	mov	r0, r1
   87f2a:	4611      	mov	r1, r2
   87f2c:	6023      	str	r3, [r4, #0]
   87f2e:	f7fa fcaf 	bl	82890 <_fstat>
   87f32:	1c43      	adds	r3, r0, #1
   87f34:	d000      	beq.n	87f38 <_fstat_r+0x18>
   87f36:	bd38      	pop	{r3, r4, r5, pc}
   87f38:	6823      	ldr	r3, [r4, #0]
   87f3a:	2b00      	cmp	r3, #0
   87f3c:	d0fb      	beq.n	87f36 <_fstat_r+0x16>
   87f3e:	602b      	str	r3, [r5, #0]
   87f40:	bd38      	pop	{r3, r4, r5, pc}
   87f42:	bf00      	nop
   87f44:	20078d90 	.word	0x20078d90

00087f48 <_isatty_r>:
   87f48:	b538      	push	{r3, r4, r5, lr}
   87f4a:	4c07      	ldr	r4, [pc, #28]	; (87f68 <_isatty_r+0x20>)
   87f4c:	2300      	movs	r3, #0
   87f4e:	4605      	mov	r5, r0
   87f50:	4608      	mov	r0, r1
   87f52:	6023      	str	r3, [r4, #0]
   87f54:	f7fa fca2 	bl	8289c <_isatty>
   87f58:	1c43      	adds	r3, r0, #1
   87f5a:	d000      	beq.n	87f5e <_isatty_r+0x16>
   87f5c:	bd38      	pop	{r3, r4, r5, pc}
   87f5e:	6823      	ldr	r3, [r4, #0]
   87f60:	2b00      	cmp	r3, #0
   87f62:	d0fb      	beq.n	87f5c <_isatty_r+0x14>
   87f64:	602b      	str	r3, [r5, #0]
   87f66:	bd38      	pop	{r3, r4, r5, pc}
   87f68:	20078d90 	.word	0x20078d90

00087f6c <_lseek_r>:
   87f6c:	b570      	push	{r4, r5, r6, lr}
   87f6e:	4c08      	ldr	r4, [pc, #32]	; (87f90 <_lseek_r+0x24>)
   87f70:	4606      	mov	r6, r0
   87f72:	2500      	movs	r5, #0
   87f74:	4608      	mov	r0, r1
   87f76:	4611      	mov	r1, r2
   87f78:	461a      	mov	r2, r3
   87f7a:	6025      	str	r5, [r4, #0]
   87f7c:	f7fa fc90 	bl	828a0 <_lseek>
   87f80:	1c43      	adds	r3, r0, #1
   87f82:	d000      	beq.n	87f86 <_lseek_r+0x1a>
   87f84:	bd70      	pop	{r4, r5, r6, pc}
   87f86:	6823      	ldr	r3, [r4, #0]
   87f88:	2b00      	cmp	r3, #0
   87f8a:	d0fb      	beq.n	87f84 <_lseek_r+0x18>
   87f8c:	6033      	str	r3, [r6, #0]
   87f8e:	bd70      	pop	{r4, r5, r6, pc}
   87f90:	20078d90 	.word	0x20078d90

00087f94 <_read_r>:
   87f94:	b570      	push	{r4, r5, r6, lr}
   87f96:	4c08      	ldr	r4, [pc, #32]	; (87fb8 <_read_r+0x24>)
   87f98:	4606      	mov	r6, r0
   87f9a:	2500      	movs	r5, #0
   87f9c:	4608      	mov	r0, r1
   87f9e:	4611      	mov	r1, r2
   87fa0:	461a      	mov	r2, r3
   87fa2:	6025      	str	r5, [r4, #0]
   87fa4:	f7f8 f950 	bl	80248 <_read>
   87fa8:	1c43      	adds	r3, r0, #1
   87faa:	d000      	beq.n	87fae <_read_r+0x1a>
   87fac:	bd70      	pop	{r4, r5, r6, pc}
   87fae:	6823      	ldr	r3, [r4, #0]
   87fb0:	2b00      	cmp	r3, #0
   87fb2:	d0fb      	beq.n	87fac <_read_r+0x18>
   87fb4:	6033      	str	r3, [r6, #0]
   87fb6:	bd70      	pop	{r4, r5, r6, pc}
   87fb8:	20078d90 	.word	0x20078d90

00087fbc <__aeabi_drsub>:
   87fbc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   87fc0:	e002      	b.n	87fc8 <__adddf3>
   87fc2:	bf00      	nop

00087fc4 <__aeabi_dsub>:
   87fc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00087fc8 <__adddf3>:
   87fc8:	b530      	push	{r4, r5, lr}
   87fca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   87fce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   87fd2:	ea94 0f05 	teq	r4, r5
   87fd6:	bf08      	it	eq
   87fd8:	ea90 0f02 	teqeq	r0, r2
   87fdc:	bf1f      	itttt	ne
   87fde:	ea54 0c00 	orrsne.w	ip, r4, r0
   87fe2:	ea55 0c02 	orrsne.w	ip, r5, r2
   87fe6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   87fea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   87fee:	f000 80e2 	beq.w	881b6 <__adddf3+0x1ee>
   87ff2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   87ff6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   87ffa:	bfb8      	it	lt
   87ffc:	426d      	neglt	r5, r5
   87ffe:	dd0c      	ble.n	8801a <__adddf3+0x52>
   88000:	442c      	add	r4, r5
   88002:	ea80 0202 	eor.w	r2, r0, r2
   88006:	ea81 0303 	eor.w	r3, r1, r3
   8800a:	ea82 0000 	eor.w	r0, r2, r0
   8800e:	ea83 0101 	eor.w	r1, r3, r1
   88012:	ea80 0202 	eor.w	r2, r0, r2
   88016:	ea81 0303 	eor.w	r3, r1, r3
   8801a:	2d36      	cmp	r5, #54	; 0x36
   8801c:	bf88      	it	hi
   8801e:	bd30      	pophi	{r4, r5, pc}
   88020:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   88024:	ea4f 3101 	mov.w	r1, r1, lsl #12
   88028:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8802c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   88030:	d002      	beq.n	88038 <__adddf3+0x70>
   88032:	4240      	negs	r0, r0
   88034:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   88038:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8803c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   88040:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   88044:	d002      	beq.n	8804c <__adddf3+0x84>
   88046:	4252      	negs	r2, r2
   88048:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8804c:	ea94 0f05 	teq	r4, r5
   88050:	f000 80a7 	beq.w	881a2 <__adddf3+0x1da>
   88054:	f1a4 0401 	sub.w	r4, r4, #1
   88058:	f1d5 0e20 	rsbs	lr, r5, #32
   8805c:	db0d      	blt.n	8807a <__adddf3+0xb2>
   8805e:	fa02 fc0e 	lsl.w	ip, r2, lr
   88062:	fa22 f205 	lsr.w	r2, r2, r5
   88066:	1880      	adds	r0, r0, r2
   88068:	f141 0100 	adc.w	r1, r1, #0
   8806c:	fa03 f20e 	lsl.w	r2, r3, lr
   88070:	1880      	adds	r0, r0, r2
   88072:	fa43 f305 	asr.w	r3, r3, r5
   88076:	4159      	adcs	r1, r3
   88078:	e00e      	b.n	88098 <__adddf3+0xd0>
   8807a:	f1a5 0520 	sub.w	r5, r5, #32
   8807e:	f10e 0e20 	add.w	lr, lr, #32
   88082:	2a01      	cmp	r2, #1
   88084:	fa03 fc0e 	lsl.w	ip, r3, lr
   88088:	bf28      	it	cs
   8808a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8808e:	fa43 f305 	asr.w	r3, r3, r5
   88092:	18c0      	adds	r0, r0, r3
   88094:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   88098:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8809c:	d507      	bpl.n	880ae <__adddf3+0xe6>
   8809e:	f04f 0e00 	mov.w	lr, #0
   880a2:	f1dc 0c00 	rsbs	ip, ip, #0
   880a6:	eb7e 0000 	sbcs.w	r0, lr, r0
   880aa:	eb6e 0101 	sbc.w	r1, lr, r1
   880ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   880b2:	d31b      	bcc.n	880ec <__adddf3+0x124>
   880b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   880b8:	d30c      	bcc.n	880d4 <__adddf3+0x10c>
   880ba:	0849      	lsrs	r1, r1, #1
   880bc:	ea5f 0030 	movs.w	r0, r0, rrx
   880c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   880c4:	f104 0401 	add.w	r4, r4, #1
   880c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   880cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   880d0:	f080 809a 	bcs.w	88208 <__adddf3+0x240>
   880d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   880d8:	bf08      	it	eq
   880da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   880de:	f150 0000 	adcs.w	r0, r0, #0
   880e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   880e6:	ea41 0105 	orr.w	r1, r1, r5
   880ea:	bd30      	pop	{r4, r5, pc}
   880ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   880f0:	4140      	adcs	r0, r0
   880f2:	eb41 0101 	adc.w	r1, r1, r1
   880f6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   880fa:	f1a4 0401 	sub.w	r4, r4, #1
   880fe:	d1e9      	bne.n	880d4 <__adddf3+0x10c>
   88100:	f091 0f00 	teq	r1, #0
   88104:	bf04      	itt	eq
   88106:	4601      	moveq	r1, r0
   88108:	2000      	moveq	r0, #0
   8810a:	fab1 f381 	clz	r3, r1
   8810e:	bf08      	it	eq
   88110:	3320      	addeq	r3, #32
   88112:	f1a3 030b 	sub.w	r3, r3, #11
   88116:	f1b3 0220 	subs.w	r2, r3, #32
   8811a:	da0c      	bge.n	88136 <__adddf3+0x16e>
   8811c:	320c      	adds	r2, #12
   8811e:	dd08      	ble.n	88132 <__adddf3+0x16a>
   88120:	f102 0c14 	add.w	ip, r2, #20
   88124:	f1c2 020c 	rsb	r2, r2, #12
   88128:	fa01 f00c 	lsl.w	r0, r1, ip
   8812c:	fa21 f102 	lsr.w	r1, r1, r2
   88130:	e00c      	b.n	8814c <__adddf3+0x184>
   88132:	f102 0214 	add.w	r2, r2, #20
   88136:	bfd8      	it	le
   88138:	f1c2 0c20 	rsble	ip, r2, #32
   8813c:	fa01 f102 	lsl.w	r1, r1, r2
   88140:	fa20 fc0c 	lsr.w	ip, r0, ip
   88144:	bfdc      	itt	le
   88146:	ea41 010c 	orrle.w	r1, r1, ip
   8814a:	4090      	lslle	r0, r2
   8814c:	1ae4      	subs	r4, r4, r3
   8814e:	bfa2      	ittt	ge
   88150:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   88154:	4329      	orrge	r1, r5
   88156:	bd30      	popge	{r4, r5, pc}
   88158:	ea6f 0404 	mvn.w	r4, r4
   8815c:	3c1f      	subs	r4, #31
   8815e:	da1c      	bge.n	8819a <__adddf3+0x1d2>
   88160:	340c      	adds	r4, #12
   88162:	dc0e      	bgt.n	88182 <__adddf3+0x1ba>
   88164:	f104 0414 	add.w	r4, r4, #20
   88168:	f1c4 0220 	rsb	r2, r4, #32
   8816c:	fa20 f004 	lsr.w	r0, r0, r4
   88170:	fa01 f302 	lsl.w	r3, r1, r2
   88174:	ea40 0003 	orr.w	r0, r0, r3
   88178:	fa21 f304 	lsr.w	r3, r1, r4
   8817c:	ea45 0103 	orr.w	r1, r5, r3
   88180:	bd30      	pop	{r4, r5, pc}
   88182:	f1c4 040c 	rsb	r4, r4, #12
   88186:	f1c4 0220 	rsb	r2, r4, #32
   8818a:	fa20 f002 	lsr.w	r0, r0, r2
   8818e:	fa01 f304 	lsl.w	r3, r1, r4
   88192:	ea40 0003 	orr.w	r0, r0, r3
   88196:	4629      	mov	r1, r5
   88198:	bd30      	pop	{r4, r5, pc}
   8819a:	fa21 f004 	lsr.w	r0, r1, r4
   8819e:	4629      	mov	r1, r5
   881a0:	bd30      	pop	{r4, r5, pc}
   881a2:	f094 0f00 	teq	r4, #0
   881a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   881aa:	bf06      	itte	eq
   881ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   881b0:	3401      	addeq	r4, #1
   881b2:	3d01      	subne	r5, #1
   881b4:	e74e      	b.n	88054 <__adddf3+0x8c>
   881b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   881ba:	bf18      	it	ne
   881bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   881c0:	d029      	beq.n	88216 <__adddf3+0x24e>
   881c2:	ea94 0f05 	teq	r4, r5
   881c6:	bf08      	it	eq
   881c8:	ea90 0f02 	teqeq	r0, r2
   881cc:	d005      	beq.n	881da <__adddf3+0x212>
   881ce:	ea54 0c00 	orrs.w	ip, r4, r0
   881d2:	bf04      	itt	eq
   881d4:	4619      	moveq	r1, r3
   881d6:	4610      	moveq	r0, r2
   881d8:	bd30      	pop	{r4, r5, pc}
   881da:	ea91 0f03 	teq	r1, r3
   881de:	bf1e      	ittt	ne
   881e0:	2100      	movne	r1, #0
   881e2:	2000      	movne	r0, #0
   881e4:	bd30      	popne	{r4, r5, pc}
   881e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   881ea:	d105      	bne.n	881f8 <__adddf3+0x230>
   881ec:	0040      	lsls	r0, r0, #1
   881ee:	4149      	adcs	r1, r1
   881f0:	bf28      	it	cs
   881f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   881f6:	bd30      	pop	{r4, r5, pc}
   881f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   881fc:	bf3c      	itt	cc
   881fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   88202:	bd30      	popcc	{r4, r5, pc}
   88204:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   88208:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8820c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   88210:	f04f 0000 	mov.w	r0, #0
   88214:	bd30      	pop	{r4, r5, pc}
   88216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8821a:	bf1a      	itte	ne
   8821c:	4619      	movne	r1, r3
   8821e:	4610      	movne	r0, r2
   88220:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   88224:	bf1c      	itt	ne
   88226:	460b      	movne	r3, r1
   88228:	4602      	movne	r2, r0
   8822a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8822e:	bf06      	itte	eq
   88230:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   88234:	ea91 0f03 	teqeq	r1, r3
   88238:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8823c:	bd30      	pop	{r4, r5, pc}
   8823e:	bf00      	nop

00088240 <__aeabi_ui2d>:
   88240:	f090 0f00 	teq	r0, #0
   88244:	bf04      	itt	eq
   88246:	2100      	moveq	r1, #0
   88248:	4770      	bxeq	lr
   8824a:	b530      	push	{r4, r5, lr}
   8824c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   88250:	f104 0432 	add.w	r4, r4, #50	; 0x32
   88254:	f04f 0500 	mov.w	r5, #0
   88258:	f04f 0100 	mov.w	r1, #0
   8825c:	e750      	b.n	88100 <__adddf3+0x138>
   8825e:	bf00      	nop

00088260 <__aeabi_i2d>:
   88260:	f090 0f00 	teq	r0, #0
   88264:	bf04      	itt	eq
   88266:	2100      	moveq	r1, #0
   88268:	4770      	bxeq	lr
   8826a:	b530      	push	{r4, r5, lr}
   8826c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   88270:	f104 0432 	add.w	r4, r4, #50	; 0x32
   88274:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   88278:	bf48      	it	mi
   8827a:	4240      	negmi	r0, r0
   8827c:	f04f 0100 	mov.w	r1, #0
   88280:	e73e      	b.n	88100 <__adddf3+0x138>
   88282:	bf00      	nop

00088284 <__aeabi_f2d>:
   88284:	0042      	lsls	r2, r0, #1
   88286:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8828a:	ea4f 0131 	mov.w	r1, r1, rrx
   8828e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   88292:	bf1f      	itttt	ne
   88294:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   88298:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8829c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   882a0:	4770      	bxne	lr
   882a2:	f092 0f00 	teq	r2, #0
   882a6:	bf14      	ite	ne
   882a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   882ac:	4770      	bxeq	lr
   882ae:	b530      	push	{r4, r5, lr}
   882b0:	f44f 7460 	mov.w	r4, #896	; 0x380
   882b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   882b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   882bc:	e720      	b.n	88100 <__adddf3+0x138>
   882be:	bf00      	nop

000882c0 <__aeabi_ul2d>:
   882c0:	ea50 0201 	orrs.w	r2, r0, r1
   882c4:	bf08      	it	eq
   882c6:	4770      	bxeq	lr
   882c8:	b530      	push	{r4, r5, lr}
   882ca:	f04f 0500 	mov.w	r5, #0
   882ce:	e00a      	b.n	882e6 <__aeabi_l2d+0x16>

000882d0 <__aeabi_l2d>:
   882d0:	ea50 0201 	orrs.w	r2, r0, r1
   882d4:	bf08      	it	eq
   882d6:	4770      	bxeq	lr
   882d8:	b530      	push	{r4, r5, lr}
   882da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   882de:	d502      	bpl.n	882e6 <__aeabi_l2d+0x16>
   882e0:	4240      	negs	r0, r0
   882e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   882e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   882ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
   882ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   882f2:	f43f aedc 	beq.w	880ae <__adddf3+0xe6>
   882f6:	f04f 0203 	mov.w	r2, #3
   882fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   882fe:	bf18      	it	ne
   88300:	3203      	addne	r2, #3
   88302:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   88306:	bf18      	it	ne
   88308:	3203      	addne	r2, #3
   8830a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8830e:	f1c2 0320 	rsb	r3, r2, #32
   88312:	fa00 fc03 	lsl.w	ip, r0, r3
   88316:	fa20 f002 	lsr.w	r0, r0, r2
   8831a:	fa01 fe03 	lsl.w	lr, r1, r3
   8831e:	ea40 000e 	orr.w	r0, r0, lr
   88322:	fa21 f102 	lsr.w	r1, r1, r2
   88326:	4414      	add	r4, r2
   88328:	e6c1      	b.n	880ae <__adddf3+0xe6>
   8832a:	bf00      	nop

0008832c <__aeabi_dmul>:
   8832c:	b570      	push	{r4, r5, r6, lr}
   8832e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   88332:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   88336:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8833a:	bf1d      	ittte	ne
   8833c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   88340:	ea94 0f0c 	teqne	r4, ip
   88344:	ea95 0f0c 	teqne	r5, ip
   88348:	f000 f8de 	bleq	88508 <__aeabi_dmul+0x1dc>
   8834c:	442c      	add	r4, r5
   8834e:	ea81 0603 	eor.w	r6, r1, r3
   88352:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   88356:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8835a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8835e:	bf18      	it	ne
   88360:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   88364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   88368:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8836c:	d038      	beq.n	883e0 <__aeabi_dmul+0xb4>
   8836e:	fba0 ce02 	umull	ip, lr, r0, r2
   88372:	f04f 0500 	mov.w	r5, #0
   88376:	fbe1 e502 	umlal	lr, r5, r1, r2
   8837a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8837e:	fbe0 e503 	umlal	lr, r5, r0, r3
   88382:	f04f 0600 	mov.w	r6, #0
   88386:	fbe1 5603 	umlal	r5, r6, r1, r3
   8838a:	f09c 0f00 	teq	ip, #0
   8838e:	bf18      	it	ne
   88390:	f04e 0e01 	orrne.w	lr, lr, #1
   88394:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   88398:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8839c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   883a0:	d204      	bcs.n	883ac <__aeabi_dmul+0x80>
   883a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   883a6:	416d      	adcs	r5, r5
   883a8:	eb46 0606 	adc.w	r6, r6, r6
   883ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   883b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   883b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   883b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   883bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   883c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   883c4:	bf88      	it	hi
   883c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   883ca:	d81e      	bhi.n	8840a <__aeabi_dmul+0xde>
   883cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   883d0:	bf08      	it	eq
   883d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   883d6:	f150 0000 	adcs.w	r0, r0, #0
   883da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   883de:	bd70      	pop	{r4, r5, r6, pc}
   883e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   883e4:	ea46 0101 	orr.w	r1, r6, r1
   883e8:	ea40 0002 	orr.w	r0, r0, r2
   883ec:	ea81 0103 	eor.w	r1, r1, r3
   883f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   883f4:	bfc2      	ittt	gt
   883f6:	ebd4 050c 	rsbsgt	r5, r4, ip
   883fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   883fe:	bd70      	popgt	{r4, r5, r6, pc}
   88400:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   88404:	f04f 0e00 	mov.w	lr, #0
   88408:	3c01      	subs	r4, #1
   8840a:	f300 80ab 	bgt.w	88564 <__aeabi_dmul+0x238>
   8840e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   88412:	bfde      	ittt	le
   88414:	2000      	movle	r0, #0
   88416:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8841a:	bd70      	pople	{r4, r5, r6, pc}
   8841c:	f1c4 0400 	rsb	r4, r4, #0
   88420:	3c20      	subs	r4, #32
   88422:	da35      	bge.n	88490 <__aeabi_dmul+0x164>
   88424:	340c      	adds	r4, #12
   88426:	dc1b      	bgt.n	88460 <__aeabi_dmul+0x134>
   88428:	f104 0414 	add.w	r4, r4, #20
   8842c:	f1c4 0520 	rsb	r5, r4, #32
   88430:	fa00 f305 	lsl.w	r3, r0, r5
   88434:	fa20 f004 	lsr.w	r0, r0, r4
   88438:	fa01 f205 	lsl.w	r2, r1, r5
   8843c:	ea40 0002 	orr.w	r0, r0, r2
   88440:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   88444:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   88448:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8844c:	fa21 f604 	lsr.w	r6, r1, r4
   88450:	eb42 0106 	adc.w	r1, r2, r6
   88454:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   88458:	bf08      	it	eq
   8845a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8845e:	bd70      	pop	{r4, r5, r6, pc}
   88460:	f1c4 040c 	rsb	r4, r4, #12
   88464:	f1c4 0520 	rsb	r5, r4, #32
   88468:	fa00 f304 	lsl.w	r3, r0, r4
   8846c:	fa20 f005 	lsr.w	r0, r0, r5
   88470:	fa01 f204 	lsl.w	r2, r1, r4
   88474:	ea40 0002 	orr.w	r0, r0, r2
   88478:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8847c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   88480:	f141 0100 	adc.w	r1, r1, #0
   88484:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   88488:	bf08      	it	eq
   8848a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8848e:	bd70      	pop	{r4, r5, r6, pc}
   88490:	f1c4 0520 	rsb	r5, r4, #32
   88494:	fa00 f205 	lsl.w	r2, r0, r5
   88498:	ea4e 0e02 	orr.w	lr, lr, r2
   8849c:	fa20 f304 	lsr.w	r3, r0, r4
   884a0:	fa01 f205 	lsl.w	r2, r1, r5
   884a4:	ea43 0302 	orr.w	r3, r3, r2
   884a8:	fa21 f004 	lsr.w	r0, r1, r4
   884ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   884b0:	fa21 f204 	lsr.w	r2, r1, r4
   884b4:	ea20 0002 	bic.w	r0, r0, r2
   884b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   884bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   884c0:	bf08      	it	eq
   884c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   884c6:	bd70      	pop	{r4, r5, r6, pc}
   884c8:	f094 0f00 	teq	r4, #0
   884cc:	d10f      	bne.n	884ee <__aeabi_dmul+0x1c2>
   884ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   884d2:	0040      	lsls	r0, r0, #1
   884d4:	eb41 0101 	adc.w	r1, r1, r1
   884d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   884dc:	bf08      	it	eq
   884de:	3c01      	subeq	r4, #1
   884e0:	d0f7      	beq.n	884d2 <__aeabi_dmul+0x1a6>
   884e2:	ea41 0106 	orr.w	r1, r1, r6
   884e6:	f095 0f00 	teq	r5, #0
   884ea:	bf18      	it	ne
   884ec:	4770      	bxne	lr
   884ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   884f2:	0052      	lsls	r2, r2, #1
   884f4:	eb43 0303 	adc.w	r3, r3, r3
   884f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   884fc:	bf08      	it	eq
   884fe:	3d01      	subeq	r5, #1
   88500:	d0f7      	beq.n	884f2 <__aeabi_dmul+0x1c6>
   88502:	ea43 0306 	orr.w	r3, r3, r6
   88506:	4770      	bx	lr
   88508:	ea94 0f0c 	teq	r4, ip
   8850c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   88510:	bf18      	it	ne
   88512:	ea95 0f0c 	teqne	r5, ip
   88516:	d00c      	beq.n	88532 <__aeabi_dmul+0x206>
   88518:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8851c:	bf18      	it	ne
   8851e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   88522:	d1d1      	bne.n	884c8 <__aeabi_dmul+0x19c>
   88524:	ea81 0103 	eor.w	r1, r1, r3
   88528:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8852c:	f04f 0000 	mov.w	r0, #0
   88530:	bd70      	pop	{r4, r5, r6, pc}
   88532:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   88536:	bf06      	itte	eq
   88538:	4610      	moveq	r0, r2
   8853a:	4619      	moveq	r1, r3
   8853c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   88540:	d019      	beq.n	88576 <__aeabi_dmul+0x24a>
   88542:	ea94 0f0c 	teq	r4, ip
   88546:	d102      	bne.n	8854e <__aeabi_dmul+0x222>
   88548:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8854c:	d113      	bne.n	88576 <__aeabi_dmul+0x24a>
   8854e:	ea95 0f0c 	teq	r5, ip
   88552:	d105      	bne.n	88560 <__aeabi_dmul+0x234>
   88554:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   88558:	bf1c      	itt	ne
   8855a:	4610      	movne	r0, r2
   8855c:	4619      	movne	r1, r3
   8855e:	d10a      	bne.n	88576 <__aeabi_dmul+0x24a>
   88560:	ea81 0103 	eor.w	r1, r1, r3
   88564:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   88568:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8856c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   88570:	f04f 0000 	mov.w	r0, #0
   88574:	bd70      	pop	{r4, r5, r6, pc}
   88576:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8857a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8857e:	bd70      	pop	{r4, r5, r6, pc}

00088580 <__aeabi_ddiv>:
   88580:	b570      	push	{r4, r5, r6, lr}
   88582:	f04f 0cff 	mov.w	ip, #255	; 0xff
   88586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8858a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8858e:	bf1d      	ittte	ne
   88590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   88594:	ea94 0f0c 	teqne	r4, ip
   88598:	ea95 0f0c 	teqne	r5, ip
   8859c:	f000 f8a7 	bleq	886ee <__aeabi_ddiv+0x16e>
   885a0:	eba4 0405 	sub.w	r4, r4, r5
   885a4:	ea81 0e03 	eor.w	lr, r1, r3
   885a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   885ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   885b0:	f000 8088 	beq.w	886c4 <__aeabi_ddiv+0x144>
   885b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   885b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   885bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   885c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   885c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   885c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   885cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   885d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   885d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   885d8:	429d      	cmp	r5, r3
   885da:	bf08      	it	eq
   885dc:	4296      	cmpeq	r6, r2
   885de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   885e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   885e6:	d202      	bcs.n	885ee <__aeabi_ddiv+0x6e>
   885e8:	085b      	lsrs	r3, r3, #1
   885ea:	ea4f 0232 	mov.w	r2, r2, rrx
   885ee:	1ab6      	subs	r6, r6, r2
   885f0:	eb65 0503 	sbc.w	r5, r5, r3
   885f4:	085b      	lsrs	r3, r3, #1
   885f6:	ea4f 0232 	mov.w	r2, r2, rrx
   885fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   885fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   88602:	ebb6 0e02 	subs.w	lr, r6, r2
   88606:	eb75 0e03 	sbcs.w	lr, r5, r3
   8860a:	bf22      	ittt	cs
   8860c:	1ab6      	subcs	r6, r6, r2
   8860e:	4675      	movcs	r5, lr
   88610:	ea40 000c 	orrcs.w	r0, r0, ip
   88614:	085b      	lsrs	r3, r3, #1
   88616:	ea4f 0232 	mov.w	r2, r2, rrx
   8861a:	ebb6 0e02 	subs.w	lr, r6, r2
   8861e:	eb75 0e03 	sbcs.w	lr, r5, r3
   88622:	bf22      	ittt	cs
   88624:	1ab6      	subcs	r6, r6, r2
   88626:	4675      	movcs	r5, lr
   88628:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8862c:	085b      	lsrs	r3, r3, #1
   8862e:	ea4f 0232 	mov.w	r2, r2, rrx
   88632:	ebb6 0e02 	subs.w	lr, r6, r2
   88636:	eb75 0e03 	sbcs.w	lr, r5, r3
   8863a:	bf22      	ittt	cs
   8863c:	1ab6      	subcs	r6, r6, r2
   8863e:	4675      	movcs	r5, lr
   88640:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   88644:	085b      	lsrs	r3, r3, #1
   88646:	ea4f 0232 	mov.w	r2, r2, rrx
   8864a:	ebb6 0e02 	subs.w	lr, r6, r2
   8864e:	eb75 0e03 	sbcs.w	lr, r5, r3
   88652:	bf22      	ittt	cs
   88654:	1ab6      	subcs	r6, r6, r2
   88656:	4675      	movcs	r5, lr
   88658:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8865c:	ea55 0e06 	orrs.w	lr, r5, r6
   88660:	d018      	beq.n	88694 <__aeabi_ddiv+0x114>
   88662:	ea4f 1505 	mov.w	r5, r5, lsl #4
   88666:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8866a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8866e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   88672:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   88676:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8867a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8867e:	d1c0      	bne.n	88602 <__aeabi_ddiv+0x82>
   88680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88684:	d10b      	bne.n	8869e <__aeabi_ddiv+0x11e>
   88686:	ea41 0100 	orr.w	r1, r1, r0
   8868a:	f04f 0000 	mov.w	r0, #0
   8868e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   88692:	e7b6      	b.n	88602 <__aeabi_ddiv+0x82>
   88694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88698:	bf04      	itt	eq
   8869a:	4301      	orreq	r1, r0
   8869c:	2000      	moveq	r0, #0
   8869e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   886a2:	bf88      	it	hi
   886a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   886a8:	f63f aeaf 	bhi.w	8840a <__aeabi_dmul+0xde>
   886ac:	ebb5 0c03 	subs.w	ip, r5, r3
   886b0:	bf04      	itt	eq
   886b2:	ebb6 0c02 	subseq.w	ip, r6, r2
   886b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   886ba:	f150 0000 	adcs.w	r0, r0, #0
   886be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   886c2:	bd70      	pop	{r4, r5, r6, pc}
   886c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   886c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   886cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   886d0:	bfc2      	ittt	gt
   886d2:	ebd4 050c 	rsbsgt	r5, r4, ip
   886d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   886da:	bd70      	popgt	{r4, r5, r6, pc}
   886dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   886e0:	f04f 0e00 	mov.w	lr, #0
   886e4:	3c01      	subs	r4, #1
   886e6:	e690      	b.n	8840a <__aeabi_dmul+0xde>
   886e8:	ea45 0e06 	orr.w	lr, r5, r6
   886ec:	e68d      	b.n	8840a <__aeabi_dmul+0xde>
   886ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   886f2:	ea94 0f0c 	teq	r4, ip
   886f6:	bf08      	it	eq
   886f8:	ea95 0f0c 	teqeq	r5, ip
   886fc:	f43f af3b 	beq.w	88576 <__aeabi_dmul+0x24a>
   88700:	ea94 0f0c 	teq	r4, ip
   88704:	d10a      	bne.n	8871c <__aeabi_ddiv+0x19c>
   88706:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8870a:	f47f af34 	bne.w	88576 <__aeabi_dmul+0x24a>
   8870e:	ea95 0f0c 	teq	r5, ip
   88712:	f47f af25 	bne.w	88560 <__aeabi_dmul+0x234>
   88716:	4610      	mov	r0, r2
   88718:	4619      	mov	r1, r3
   8871a:	e72c      	b.n	88576 <__aeabi_dmul+0x24a>
   8871c:	ea95 0f0c 	teq	r5, ip
   88720:	d106      	bne.n	88730 <__aeabi_ddiv+0x1b0>
   88722:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   88726:	f43f aefd 	beq.w	88524 <__aeabi_dmul+0x1f8>
   8872a:	4610      	mov	r0, r2
   8872c:	4619      	mov	r1, r3
   8872e:	e722      	b.n	88576 <__aeabi_dmul+0x24a>
   88730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   88734:	bf18      	it	ne
   88736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8873a:	f47f aec5 	bne.w	884c8 <__aeabi_dmul+0x19c>
   8873e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   88742:	f47f af0d 	bne.w	88560 <__aeabi_dmul+0x234>
   88746:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8874a:	f47f aeeb 	bne.w	88524 <__aeabi_dmul+0x1f8>
   8874e:	e712      	b.n	88576 <__aeabi_dmul+0x24a>

00088750 <__gedf2>:
   88750:	f04f 3cff 	mov.w	ip, #4294967295
   88754:	e006      	b.n	88764 <__cmpdf2+0x4>
   88756:	bf00      	nop

00088758 <__ledf2>:
   88758:	f04f 0c01 	mov.w	ip, #1
   8875c:	e002      	b.n	88764 <__cmpdf2+0x4>
   8875e:	bf00      	nop

00088760 <__cmpdf2>:
   88760:	f04f 0c01 	mov.w	ip, #1
   88764:	f84d cd04 	str.w	ip, [sp, #-4]!
   88768:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8876c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88770:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   88774:	bf18      	it	ne
   88776:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8877a:	d01b      	beq.n	887b4 <__cmpdf2+0x54>
   8877c:	b001      	add	sp, #4
   8877e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   88782:	bf0c      	ite	eq
   88784:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   88788:	ea91 0f03 	teqne	r1, r3
   8878c:	bf02      	ittt	eq
   8878e:	ea90 0f02 	teqeq	r0, r2
   88792:	2000      	moveq	r0, #0
   88794:	4770      	bxeq	lr
   88796:	f110 0f00 	cmn.w	r0, #0
   8879a:	ea91 0f03 	teq	r1, r3
   8879e:	bf58      	it	pl
   887a0:	4299      	cmppl	r1, r3
   887a2:	bf08      	it	eq
   887a4:	4290      	cmpeq	r0, r2
   887a6:	bf2c      	ite	cs
   887a8:	17d8      	asrcs	r0, r3, #31
   887aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   887ae:	f040 0001 	orr.w	r0, r0, #1
   887b2:	4770      	bx	lr
   887b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   887b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   887bc:	d102      	bne.n	887c4 <__cmpdf2+0x64>
   887be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   887c2:	d107      	bne.n	887d4 <__cmpdf2+0x74>
   887c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   887c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   887cc:	d1d6      	bne.n	8877c <__cmpdf2+0x1c>
   887ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   887d2:	d0d3      	beq.n	8877c <__cmpdf2+0x1c>
   887d4:	f85d 0b04 	ldr.w	r0, [sp], #4
   887d8:	4770      	bx	lr
   887da:	bf00      	nop

000887dc <__aeabi_cdrcmple>:
   887dc:	4684      	mov	ip, r0
   887de:	4610      	mov	r0, r2
   887e0:	4662      	mov	r2, ip
   887e2:	468c      	mov	ip, r1
   887e4:	4619      	mov	r1, r3
   887e6:	4663      	mov	r3, ip
   887e8:	e000      	b.n	887ec <__aeabi_cdcmpeq>
   887ea:	bf00      	nop

000887ec <__aeabi_cdcmpeq>:
   887ec:	b501      	push	{r0, lr}
   887ee:	f7ff ffb7 	bl	88760 <__cmpdf2>
   887f2:	2800      	cmp	r0, #0
   887f4:	bf48      	it	mi
   887f6:	f110 0f00 	cmnmi.w	r0, #0
   887fa:	bd01      	pop	{r0, pc}

000887fc <__aeabi_dcmpeq>:
   887fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   88800:	f7ff fff4 	bl	887ec <__aeabi_cdcmpeq>
   88804:	bf0c      	ite	eq
   88806:	2001      	moveq	r0, #1
   88808:	2000      	movne	r0, #0
   8880a:	f85d fb08 	ldr.w	pc, [sp], #8
   8880e:	bf00      	nop

00088810 <__aeabi_dcmplt>:
   88810:	f84d ed08 	str.w	lr, [sp, #-8]!
   88814:	f7ff ffea 	bl	887ec <__aeabi_cdcmpeq>
   88818:	bf34      	ite	cc
   8881a:	2001      	movcc	r0, #1
   8881c:	2000      	movcs	r0, #0
   8881e:	f85d fb08 	ldr.w	pc, [sp], #8
   88822:	bf00      	nop

00088824 <__aeabi_dcmple>:
   88824:	f84d ed08 	str.w	lr, [sp, #-8]!
   88828:	f7ff ffe0 	bl	887ec <__aeabi_cdcmpeq>
   8882c:	bf94      	ite	ls
   8882e:	2001      	movls	r0, #1
   88830:	2000      	movhi	r0, #0
   88832:	f85d fb08 	ldr.w	pc, [sp], #8
   88836:	bf00      	nop

00088838 <__aeabi_dcmpge>:
   88838:	f84d ed08 	str.w	lr, [sp, #-8]!
   8883c:	f7ff ffce 	bl	887dc <__aeabi_cdrcmple>
   88840:	bf94      	ite	ls
   88842:	2001      	movls	r0, #1
   88844:	2000      	movhi	r0, #0
   88846:	f85d fb08 	ldr.w	pc, [sp], #8
   8884a:	bf00      	nop

0008884c <__aeabi_dcmpgt>:
   8884c:	f84d ed08 	str.w	lr, [sp, #-8]!
   88850:	f7ff ffc4 	bl	887dc <__aeabi_cdrcmple>
   88854:	bf34      	ite	cc
   88856:	2001      	movcc	r0, #1
   88858:	2000      	movcs	r0, #0
   8885a:	f85d fb08 	ldr.w	pc, [sp], #8
   8885e:	bf00      	nop

00088860 <__aeabi_d2iz>:
   88860:	ea4f 0241 	mov.w	r2, r1, lsl #1
   88864:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   88868:	d215      	bcs.n	88896 <__aeabi_d2iz+0x36>
   8886a:	d511      	bpl.n	88890 <__aeabi_d2iz+0x30>
   8886c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   88870:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   88874:	d912      	bls.n	8889c <__aeabi_d2iz+0x3c>
   88876:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8887a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8887e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   88882:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   88886:	fa23 f002 	lsr.w	r0, r3, r2
   8888a:	bf18      	it	ne
   8888c:	4240      	negne	r0, r0
   8888e:	4770      	bx	lr
   88890:	f04f 0000 	mov.w	r0, #0
   88894:	4770      	bx	lr
   88896:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8889a:	d105      	bne.n	888a8 <__aeabi_d2iz+0x48>
   8889c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   888a0:	bf08      	it	eq
   888a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   888a6:	4770      	bx	lr
   888a8:	f04f 0000 	mov.w	r0, #0
   888ac:	4770      	bx	lr
   888ae:	bf00      	nop

000888b0 <__aeabi_uldivmod>:
   888b0:	b94b      	cbnz	r3, 888c6 <__aeabi_uldivmod+0x16>
   888b2:	b942      	cbnz	r2, 888c6 <__aeabi_uldivmod+0x16>
   888b4:	2900      	cmp	r1, #0
   888b6:	bf08      	it	eq
   888b8:	2800      	cmpeq	r0, #0
   888ba:	d002      	beq.n	888c2 <__aeabi_uldivmod+0x12>
   888bc:	f04f 31ff 	mov.w	r1, #4294967295
   888c0:	4608      	mov	r0, r1
   888c2:	f000 b83b 	b.w	8893c <__aeabi_idiv0>
   888c6:	b082      	sub	sp, #8
   888c8:	46ec      	mov	ip, sp
   888ca:	e92d 5000 	stmdb	sp!, {ip, lr}
   888ce:	f000 f81d 	bl	8890c <__gnu_uldivmod_helper>
   888d2:	f8dd e004 	ldr.w	lr, [sp, #4]
   888d6:	b002      	add	sp, #8
   888d8:	bc0c      	pop	{r2, r3}
   888da:	4770      	bx	lr

000888dc <__gnu_ldivmod_helper>:
   888dc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   888e0:	9e08      	ldr	r6, [sp, #32]
   888e2:	4614      	mov	r4, r2
   888e4:	461d      	mov	r5, r3
   888e6:	4680      	mov	r8, r0
   888e8:	4689      	mov	r9, r1
   888ea:	f000 f829 	bl	88940 <__divdi3>
   888ee:	fb04 f301 	mul.w	r3, r4, r1
   888f2:	fba4 ab00 	umull	sl, fp, r4, r0
   888f6:	fb00 3205 	mla	r2, r0, r5, r3
   888fa:	4493      	add	fp, r2
   888fc:	ebb8 080a 	subs.w	r8, r8, sl
   88900:	eb69 090b 	sbc.w	r9, r9, fp
   88904:	e9c6 8900 	strd	r8, r9, [r6]
   88908:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0008890c <__gnu_uldivmod_helper>:
   8890c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   88910:	9e08      	ldr	r6, [sp, #32]
   88912:	4614      	mov	r4, r2
   88914:	461d      	mov	r5, r3
   88916:	4680      	mov	r8, r0
   88918:	4689      	mov	r9, r1
   8891a:	f000 f961 	bl	88be0 <__udivdi3>
   8891e:	fb00 f505 	mul.w	r5, r0, r5
   88922:	fba0 ab04 	umull	sl, fp, r0, r4
   88926:	fb04 5401 	mla	r4, r4, r1, r5
   8892a:	44a3      	add	fp, r4
   8892c:	ebb8 080a 	subs.w	r8, r8, sl
   88930:	eb69 090b 	sbc.w	r9, r9, fp
   88934:	e9c6 8900 	strd	r8, r9, [r6]
   88938:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0008893c <__aeabi_idiv0>:
   8893c:	4770      	bx	lr
   8893e:	bf00      	nop

00088940 <__divdi3>:
   88940:	2900      	cmp	r1, #0
   88942:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   88946:	f2c0 80a1 	blt.w	88a8c <__divdi3+0x14c>
   8894a:	2400      	movs	r4, #0
   8894c:	2b00      	cmp	r3, #0
   8894e:	f2c0 8098 	blt.w	88a82 <__divdi3+0x142>
   88952:	4615      	mov	r5, r2
   88954:	4606      	mov	r6, r0
   88956:	460f      	mov	r7, r1
   88958:	2b00      	cmp	r3, #0
   8895a:	d13f      	bne.n	889dc <__divdi3+0x9c>
   8895c:	428a      	cmp	r2, r1
   8895e:	d958      	bls.n	88a12 <__divdi3+0xd2>
   88960:	fab2 f382 	clz	r3, r2
   88964:	b14b      	cbz	r3, 8897a <__divdi3+0x3a>
   88966:	f1c3 0220 	rsb	r2, r3, #32
   8896a:	fa01 f703 	lsl.w	r7, r1, r3
   8896e:	fa20 f202 	lsr.w	r2, r0, r2
   88972:	409d      	lsls	r5, r3
   88974:	fa00 f603 	lsl.w	r6, r0, r3
   88978:	4317      	orrs	r7, r2
   8897a:	0c29      	lsrs	r1, r5, #16
   8897c:	fbb7 f2f1 	udiv	r2, r7, r1
   88980:	fb01 7712 	mls	r7, r1, r2, r7
   88984:	b2a8      	uxth	r0, r5
   88986:	fb00 f302 	mul.w	r3, r0, r2
   8898a:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   8898e:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   88992:	42bb      	cmp	r3, r7
   88994:	d909      	bls.n	889aa <__divdi3+0x6a>
   88996:	197f      	adds	r7, r7, r5
   88998:	f102 3cff 	add.w	ip, r2, #4294967295
   8899c:	f080 8105 	bcs.w	88baa <__divdi3+0x26a>
   889a0:	42bb      	cmp	r3, r7
   889a2:	f240 8102 	bls.w	88baa <__divdi3+0x26a>
   889a6:	3a02      	subs	r2, #2
   889a8:	442f      	add	r7, r5
   889aa:	1aff      	subs	r7, r7, r3
   889ac:	fbb7 f3f1 	udiv	r3, r7, r1
   889b0:	fb01 7113 	mls	r1, r1, r3, r7
   889b4:	fb00 f003 	mul.w	r0, r0, r3
   889b8:	b2b6      	uxth	r6, r6
   889ba:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   889be:	4288      	cmp	r0, r1
   889c0:	d908      	bls.n	889d4 <__divdi3+0x94>
   889c2:	1949      	adds	r1, r1, r5
   889c4:	f103 37ff 	add.w	r7, r3, #4294967295
   889c8:	f080 80f1 	bcs.w	88bae <__divdi3+0x26e>
   889cc:	4288      	cmp	r0, r1
   889ce:	f240 80ee 	bls.w	88bae <__divdi3+0x26e>
   889d2:	3b02      	subs	r3, #2
   889d4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   889d8:	2300      	movs	r3, #0
   889da:	e003      	b.n	889e4 <__divdi3+0xa4>
   889dc:	428b      	cmp	r3, r1
   889de:	d90a      	bls.n	889f6 <__divdi3+0xb6>
   889e0:	2300      	movs	r3, #0
   889e2:	461a      	mov	r2, r3
   889e4:	4610      	mov	r0, r2
   889e6:	4619      	mov	r1, r3
   889e8:	b114      	cbz	r4, 889f0 <__divdi3+0xb0>
   889ea:	4240      	negs	r0, r0
   889ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   889f0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   889f4:	4770      	bx	lr
   889f6:	fab3 f883 	clz	r8, r3
   889fa:	f1b8 0f00 	cmp.w	r8, #0
   889fe:	f040 8088 	bne.w	88b12 <__divdi3+0x1d2>
   88a02:	428b      	cmp	r3, r1
   88a04:	d302      	bcc.n	88a0c <__divdi3+0xcc>
   88a06:	4282      	cmp	r2, r0
   88a08:	f200 80e2 	bhi.w	88bd0 <__divdi3+0x290>
   88a0c:	2300      	movs	r3, #0
   88a0e:	2201      	movs	r2, #1
   88a10:	e7e8      	b.n	889e4 <__divdi3+0xa4>
   88a12:	b912      	cbnz	r2, 88a1a <__divdi3+0xda>
   88a14:	2301      	movs	r3, #1
   88a16:	fbb3 f5f2 	udiv	r5, r3, r2
   88a1a:	fab5 f285 	clz	r2, r5
   88a1e:	2a00      	cmp	r2, #0
   88a20:	d13a      	bne.n	88a98 <__divdi3+0x158>
   88a22:	1b7f      	subs	r7, r7, r5
   88a24:	0c28      	lsrs	r0, r5, #16
   88a26:	fa1f fc85 	uxth.w	ip, r5
   88a2a:	2301      	movs	r3, #1
   88a2c:	fbb7 f1f0 	udiv	r1, r7, r0
   88a30:	fb00 7711 	mls	r7, r0, r1, r7
   88a34:	fb0c f201 	mul.w	r2, ip, r1
   88a38:	ea4f 4816 	mov.w	r8, r6, lsr #16
   88a3c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   88a40:	42ba      	cmp	r2, r7
   88a42:	d907      	bls.n	88a54 <__divdi3+0x114>
   88a44:	197f      	adds	r7, r7, r5
   88a46:	f101 38ff 	add.w	r8, r1, #4294967295
   88a4a:	d202      	bcs.n	88a52 <__divdi3+0x112>
   88a4c:	42ba      	cmp	r2, r7
   88a4e:	f200 80c4 	bhi.w	88bda <__divdi3+0x29a>
   88a52:	4641      	mov	r1, r8
   88a54:	1abf      	subs	r7, r7, r2
   88a56:	fbb7 f2f0 	udiv	r2, r7, r0
   88a5a:	fb00 7012 	mls	r0, r0, r2, r7
   88a5e:	fb0c fc02 	mul.w	ip, ip, r2
   88a62:	b2b6      	uxth	r6, r6
   88a64:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   88a68:	4584      	cmp	ip, r0
   88a6a:	d907      	bls.n	88a7c <__divdi3+0x13c>
   88a6c:	1940      	adds	r0, r0, r5
   88a6e:	f102 37ff 	add.w	r7, r2, #4294967295
   88a72:	d202      	bcs.n	88a7a <__divdi3+0x13a>
   88a74:	4584      	cmp	ip, r0
   88a76:	f200 80ae 	bhi.w	88bd6 <__divdi3+0x296>
   88a7a:	463a      	mov	r2, r7
   88a7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   88a80:	e7b0      	b.n	889e4 <__divdi3+0xa4>
   88a82:	43e4      	mvns	r4, r4
   88a84:	4252      	negs	r2, r2
   88a86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   88a8a:	e762      	b.n	88952 <__divdi3+0x12>
   88a8c:	4240      	negs	r0, r0
   88a8e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   88a92:	f04f 34ff 	mov.w	r4, #4294967295
   88a96:	e759      	b.n	8894c <__divdi3+0xc>
   88a98:	4095      	lsls	r5, r2
   88a9a:	f1c2 0920 	rsb	r9, r2, #32
   88a9e:	fa27 f109 	lsr.w	r1, r7, r9
   88aa2:	fa26 f909 	lsr.w	r9, r6, r9
   88aa6:	4097      	lsls	r7, r2
   88aa8:	0c28      	lsrs	r0, r5, #16
   88aaa:	fbb1 f8f0 	udiv	r8, r1, r0
   88aae:	fb00 1118 	mls	r1, r0, r8, r1
   88ab2:	fa1f fc85 	uxth.w	ip, r5
   88ab6:	fb0c f308 	mul.w	r3, ip, r8
   88aba:	ea49 0907 	orr.w	r9, r9, r7
   88abe:	ea4f 4719 	mov.w	r7, r9, lsr #16
   88ac2:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   88ac6:	428b      	cmp	r3, r1
   88ac8:	fa06 f602 	lsl.w	r6, r6, r2
   88acc:	d908      	bls.n	88ae0 <__divdi3+0x1a0>
   88ace:	1949      	adds	r1, r1, r5
   88ad0:	f108 32ff 	add.w	r2, r8, #4294967295
   88ad4:	d27a      	bcs.n	88bcc <__divdi3+0x28c>
   88ad6:	428b      	cmp	r3, r1
   88ad8:	d978      	bls.n	88bcc <__divdi3+0x28c>
   88ada:	f1a8 0802 	sub.w	r8, r8, #2
   88ade:	4429      	add	r1, r5
   88ae0:	1ac9      	subs	r1, r1, r3
   88ae2:	fbb1 f3f0 	udiv	r3, r1, r0
   88ae6:	fb00 1713 	mls	r7, r0, r3, r1
   88aea:	fb0c f203 	mul.w	r2, ip, r3
   88aee:	fa1f f989 	uxth.w	r9, r9
   88af2:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   88af6:	42ba      	cmp	r2, r7
   88af8:	d907      	bls.n	88b0a <__divdi3+0x1ca>
   88afa:	197f      	adds	r7, r7, r5
   88afc:	f103 31ff 	add.w	r1, r3, #4294967295
   88b00:	d260      	bcs.n	88bc4 <__divdi3+0x284>
   88b02:	42ba      	cmp	r2, r7
   88b04:	d95e      	bls.n	88bc4 <__divdi3+0x284>
   88b06:	3b02      	subs	r3, #2
   88b08:	442f      	add	r7, r5
   88b0a:	1abf      	subs	r7, r7, r2
   88b0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   88b10:	e78c      	b.n	88a2c <__divdi3+0xec>
   88b12:	f1c8 0220 	rsb	r2, r8, #32
   88b16:	fa25 f102 	lsr.w	r1, r5, r2
   88b1a:	fa03 fc08 	lsl.w	ip, r3, r8
   88b1e:	fa27 f302 	lsr.w	r3, r7, r2
   88b22:	fa20 f202 	lsr.w	r2, r0, r2
   88b26:	fa07 f708 	lsl.w	r7, r7, r8
   88b2a:	ea41 0c0c 	orr.w	ip, r1, ip
   88b2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
   88b32:	fbb3 f1f9 	udiv	r1, r3, r9
   88b36:	fb09 3311 	mls	r3, r9, r1, r3
   88b3a:	fa1f fa8c 	uxth.w	sl, ip
   88b3e:	fb0a fb01 	mul.w	fp, sl, r1
   88b42:	4317      	orrs	r7, r2
   88b44:	0c3a      	lsrs	r2, r7, #16
   88b46:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   88b4a:	459b      	cmp	fp, r3
   88b4c:	fa05 f008 	lsl.w	r0, r5, r8
   88b50:	d908      	bls.n	88b64 <__divdi3+0x224>
   88b52:	eb13 030c 	adds.w	r3, r3, ip
   88b56:	f101 32ff 	add.w	r2, r1, #4294967295
   88b5a:	d235      	bcs.n	88bc8 <__divdi3+0x288>
   88b5c:	459b      	cmp	fp, r3
   88b5e:	d933      	bls.n	88bc8 <__divdi3+0x288>
   88b60:	3902      	subs	r1, #2
   88b62:	4463      	add	r3, ip
   88b64:	ebcb 0303 	rsb	r3, fp, r3
   88b68:	fbb3 f2f9 	udiv	r2, r3, r9
   88b6c:	fb09 3312 	mls	r3, r9, r2, r3
   88b70:	fb0a fa02 	mul.w	sl, sl, r2
   88b74:	b2bf      	uxth	r7, r7
   88b76:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   88b7a:	45ba      	cmp	sl, r7
   88b7c:	d908      	bls.n	88b90 <__divdi3+0x250>
   88b7e:	eb17 070c 	adds.w	r7, r7, ip
   88b82:	f102 33ff 	add.w	r3, r2, #4294967295
   88b86:	d21b      	bcs.n	88bc0 <__divdi3+0x280>
   88b88:	45ba      	cmp	sl, r7
   88b8a:	d919      	bls.n	88bc0 <__divdi3+0x280>
   88b8c:	3a02      	subs	r2, #2
   88b8e:	4467      	add	r7, ip
   88b90:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   88b94:	fba5 0100 	umull	r0, r1, r5, r0
   88b98:	ebca 0707 	rsb	r7, sl, r7
   88b9c:	428f      	cmp	r7, r1
   88b9e:	f04f 0300 	mov.w	r3, #0
   88ba2:	d30a      	bcc.n	88bba <__divdi3+0x27a>
   88ba4:	d005      	beq.n	88bb2 <__divdi3+0x272>
   88ba6:	462a      	mov	r2, r5
   88ba8:	e71c      	b.n	889e4 <__divdi3+0xa4>
   88baa:	4662      	mov	r2, ip
   88bac:	e6fd      	b.n	889aa <__divdi3+0x6a>
   88bae:	463b      	mov	r3, r7
   88bb0:	e710      	b.n	889d4 <__divdi3+0x94>
   88bb2:	fa06 f608 	lsl.w	r6, r6, r8
   88bb6:	4286      	cmp	r6, r0
   88bb8:	d2f5      	bcs.n	88ba6 <__divdi3+0x266>
   88bba:	1e6a      	subs	r2, r5, #1
   88bbc:	2300      	movs	r3, #0
   88bbe:	e711      	b.n	889e4 <__divdi3+0xa4>
   88bc0:	461a      	mov	r2, r3
   88bc2:	e7e5      	b.n	88b90 <__divdi3+0x250>
   88bc4:	460b      	mov	r3, r1
   88bc6:	e7a0      	b.n	88b0a <__divdi3+0x1ca>
   88bc8:	4611      	mov	r1, r2
   88bca:	e7cb      	b.n	88b64 <__divdi3+0x224>
   88bcc:	4690      	mov	r8, r2
   88bce:	e787      	b.n	88ae0 <__divdi3+0x1a0>
   88bd0:	4643      	mov	r3, r8
   88bd2:	4642      	mov	r2, r8
   88bd4:	e706      	b.n	889e4 <__divdi3+0xa4>
   88bd6:	3a02      	subs	r2, #2
   88bd8:	e750      	b.n	88a7c <__divdi3+0x13c>
   88bda:	3902      	subs	r1, #2
   88bdc:	442f      	add	r7, r5
   88bde:	e739      	b.n	88a54 <__divdi3+0x114>

00088be0 <__udivdi3>:
   88be0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   88be4:	4614      	mov	r4, r2
   88be6:	4605      	mov	r5, r0
   88be8:	460e      	mov	r6, r1
   88bea:	2b00      	cmp	r3, #0
   88bec:	d143      	bne.n	88c76 <__udivdi3+0x96>
   88bee:	428a      	cmp	r2, r1
   88bf0:	d953      	bls.n	88c9a <__udivdi3+0xba>
   88bf2:	fab2 f782 	clz	r7, r2
   88bf6:	b157      	cbz	r7, 88c0e <__udivdi3+0x2e>
   88bf8:	f1c7 0620 	rsb	r6, r7, #32
   88bfc:	fa20 f606 	lsr.w	r6, r0, r6
   88c00:	fa01 f307 	lsl.w	r3, r1, r7
   88c04:	fa02 f407 	lsl.w	r4, r2, r7
   88c08:	fa00 f507 	lsl.w	r5, r0, r7
   88c0c:	431e      	orrs	r6, r3
   88c0e:	0c21      	lsrs	r1, r4, #16
   88c10:	fbb6 f2f1 	udiv	r2, r6, r1
   88c14:	fb01 6612 	mls	r6, r1, r2, r6
   88c18:	b2a0      	uxth	r0, r4
   88c1a:	fb00 f302 	mul.w	r3, r0, r2
   88c1e:	0c2f      	lsrs	r7, r5, #16
   88c20:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   88c24:	42b3      	cmp	r3, r6
   88c26:	d909      	bls.n	88c3c <__udivdi3+0x5c>
   88c28:	1936      	adds	r6, r6, r4
   88c2a:	f102 37ff 	add.w	r7, r2, #4294967295
   88c2e:	f080 80fd 	bcs.w	88e2c <__udivdi3+0x24c>
   88c32:	42b3      	cmp	r3, r6
   88c34:	f240 80fa 	bls.w	88e2c <__udivdi3+0x24c>
   88c38:	3a02      	subs	r2, #2
   88c3a:	4426      	add	r6, r4
   88c3c:	1af6      	subs	r6, r6, r3
   88c3e:	fbb6 f3f1 	udiv	r3, r6, r1
   88c42:	fb01 6113 	mls	r1, r1, r3, r6
   88c46:	fb00 f003 	mul.w	r0, r0, r3
   88c4a:	b2ad      	uxth	r5, r5
   88c4c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   88c50:	4288      	cmp	r0, r1
   88c52:	d908      	bls.n	88c66 <__udivdi3+0x86>
   88c54:	1909      	adds	r1, r1, r4
   88c56:	f103 36ff 	add.w	r6, r3, #4294967295
   88c5a:	f080 80e9 	bcs.w	88e30 <__udivdi3+0x250>
   88c5e:	4288      	cmp	r0, r1
   88c60:	f240 80e6 	bls.w	88e30 <__udivdi3+0x250>
   88c64:	3b02      	subs	r3, #2
   88c66:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   88c6a:	2300      	movs	r3, #0
   88c6c:	4610      	mov	r0, r2
   88c6e:	4619      	mov	r1, r3
   88c70:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   88c74:	4770      	bx	lr
   88c76:	428b      	cmp	r3, r1
   88c78:	d84c      	bhi.n	88d14 <__udivdi3+0x134>
   88c7a:	fab3 f683 	clz	r6, r3
   88c7e:	2e00      	cmp	r6, #0
   88c80:	d14f      	bne.n	88d22 <__udivdi3+0x142>
   88c82:	428b      	cmp	r3, r1
   88c84:	d302      	bcc.n	88c8c <__udivdi3+0xac>
   88c86:	4282      	cmp	r2, r0
   88c88:	f200 80dd 	bhi.w	88e46 <__udivdi3+0x266>
   88c8c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   88c90:	2300      	movs	r3, #0
   88c92:	2201      	movs	r2, #1
   88c94:	4610      	mov	r0, r2
   88c96:	4619      	mov	r1, r3
   88c98:	4770      	bx	lr
   88c9a:	b912      	cbnz	r2, 88ca2 <__udivdi3+0xc2>
   88c9c:	2401      	movs	r4, #1
   88c9e:	fbb4 f4f2 	udiv	r4, r4, r2
   88ca2:	fab4 f284 	clz	r2, r4
   88ca6:	2a00      	cmp	r2, #0
   88ca8:	f040 8082 	bne.w	88db0 <__udivdi3+0x1d0>
   88cac:	1b09      	subs	r1, r1, r4
   88cae:	0c26      	lsrs	r6, r4, #16
   88cb0:	b2a7      	uxth	r7, r4
   88cb2:	2301      	movs	r3, #1
   88cb4:	fbb1 f0f6 	udiv	r0, r1, r6
   88cb8:	fb06 1110 	mls	r1, r6, r0, r1
   88cbc:	fb07 f200 	mul.w	r2, r7, r0
   88cc0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   88cc4:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   88cc8:	428a      	cmp	r2, r1
   88cca:	d907      	bls.n	88cdc <__udivdi3+0xfc>
   88ccc:	1909      	adds	r1, r1, r4
   88cce:	f100 3cff 	add.w	ip, r0, #4294967295
   88cd2:	d202      	bcs.n	88cda <__udivdi3+0xfa>
   88cd4:	428a      	cmp	r2, r1
   88cd6:	f200 80c8 	bhi.w	88e6a <__udivdi3+0x28a>
   88cda:	4660      	mov	r0, ip
   88cdc:	1a89      	subs	r1, r1, r2
   88cde:	fbb1 f2f6 	udiv	r2, r1, r6
   88ce2:	fb06 1112 	mls	r1, r6, r2, r1
   88ce6:	fb07 f702 	mul.w	r7, r7, r2
   88cea:	b2ad      	uxth	r5, r5
   88cec:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   88cf0:	42af      	cmp	r7, r5
   88cf2:	d908      	bls.n	88d06 <__udivdi3+0x126>
   88cf4:	192c      	adds	r4, r5, r4
   88cf6:	f102 31ff 	add.w	r1, r2, #4294967295
   88cfa:	f080 809b 	bcs.w	88e34 <__udivdi3+0x254>
   88cfe:	42a7      	cmp	r7, r4
   88d00:	f240 8098 	bls.w	88e34 <__udivdi3+0x254>
   88d04:	3a02      	subs	r2, #2
   88d06:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   88d0a:	4610      	mov	r0, r2
   88d0c:	4619      	mov	r1, r3
   88d0e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   88d12:	4770      	bx	lr
   88d14:	2300      	movs	r3, #0
   88d16:	461a      	mov	r2, r3
   88d18:	4610      	mov	r0, r2
   88d1a:	4619      	mov	r1, r3
   88d1c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   88d20:	4770      	bx	lr
   88d22:	f1c6 0520 	rsb	r5, r6, #32
   88d26:	fa22 f705 	lsr.w	r7, r2, r5
   88d2a:	fa03 f406 	lsl.w	r4, r3, r6
   88d2e:	fa21 f305 	lsr.w	r3, r1, r5
   88d32:	fa01 fb06 	lsl.w	fp, r1, r6
   88d36:	fa20 f505 	lsr.w	r5, r0, r5
   88d3a:	433c      	orrs	r4, r7
   88d3c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   88d40:	fbb3 fcf8 	udiv	ip, r3, r8
   88d44:	fb08 331c 	mls	r3, r8, ip, r3
   88d48:	fa1f f984 	uxth.w	r9, r4
   88d4c:	fb09 fa0c 	mul.w	sl, r9, ip
   88d50:	ea45 0b0b 	orr.w	fp, r5, fp
   88d54:	ea4f 451b 	mov.w	r5, fp, lsr #16
   88d58:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   88d5c:	459a      	cmp	sl, r3
   88d5e:	fa02 f206 	lsl.w	r2, r2, r6
   88d62:	d904      	bls.n	88d6e <__udivdi3+0x18e>
   88d64:	191b      	adds	r3, r3, r4
   88d66:	f10c 35ff 	add.w	r5, ip, #4294967295
   88d6a:	d36f      	bcc.n	88e4c <__udivdi3+0x26c>
   88d6c:	46ac      	mov	ip, r5
   88d6e:	ebca 0303 	rsb	r3, sl, r3
   88d72:	fbb3 f5f8 	udiv	r5, r3, r8
   88d76:	fb08 3315 	mls	r3, r8, r5, r3
   88d7a:	fb09 f905 	mul.w	r9, r9, r5
   88d7e:	fa1f fb8b 	uxth.w	fp, fp
   88d82:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   88d86:	45b9      	cmp	r9, r7
   88d88:	d904      	bls.n	88d94 <__udivdi3+0x1b4>
   88d8a:	193f      	adds	r7, r7, r4
   88d8c:	f105 33ff 	add.w	r3, r5, #4294967295
   88d90:	d362      	bcc.n	88e58 <__udivdi3+0x278>
   88d92:	461d      	mov	r5, r3
   88d94:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   88d98:	fbac 2302 	umull	r2, r3, ip, r2
   88d9c:	ebc9 0707 	rsb	r7, r9, r7
   88da0:	429f      	cmp	r7, r3
   88da2:	f04f 0500 	mov.w	r5, #0
   88da6:	d34a      	bcc.n	88e3e <__udivdi3+0x25e>
   88da8:	d046      	beq.n	88e38 <__udivdi3+0x258>
   88daa:	4662      	mov	r2, ip
   88dac:	462b      	mov	r3, r5
   88dae:	e75d      	b.n	88c6c <__udivdi3+0x8c>
   88db0:	4094      	lsls	r4, r2
   88db2:	f1c2 0920 	rsb	r9, r2, #32
   88db6:	fa21 fc09 	lsr.w	ip, r1, r9
   88dba:	4091      	lsls	r1, r2
   88dbc:	fa20 f909 	lsr.w	r9, r0, r9
   88dc0:	0c26      	lsrs	r6, r4, #16
   88dc2:	fbbc f8f6 	udiv	r8, ip, r6
   88dc6:	fb06 cc18 	mls	ip, r6, r8, ip
   88dca:	b2a7      	uxth	r7, r4
   88dcc:	fb07 f308 	mul.w	r3, r7, r8
   88dd0:	ea49 0901 	orr.w	r9, r9, r1
   88dd4:	ea4f 4119 	mov.w	r1, r9, lsr #16
   88dd8:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   88ddc:	4563      	cmp	r3, ip
   88dde:	fa00 f502 	lsl.w	r5, r0, r2
   88de2:	d909      	bls.n	88df8 <__udivdi3+0x218>
   88de4:	eb1c 0c04 	adds.w	ip, ip, r4
   88de8:	f108 32ff 	add.w	r2, r8, #4294967295
   88dec:	d23b      	bcs.n	88e66 <__udivdi3+0x286>
   88dee:	4563      	cmp	r3, ip
   88df0:	d939      	bls.n	88e66 <__udivdi3+0x286>
   88df2:	f1a8 0802 	sub.w	r8, r8, #2
   88df6:	44a4      	add	ip, r4
   88df8:	ebc3 0c0c 	rsb	ip, r3, ip
   88dfc:	fbbc f3f6 	udiv	r3, ip, r6
   88e00:	fb06 c113 	mls	r1, r6, r3, ip
   88e04:	fb07 f203 	mul.w	r2, r7, r3
   88e08:	fa1f f989 	uxth.w	r9, r9
   88e0c:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   88e10:	428a      	cmp	r2, r1
   88e12:	d907      	bls.n	88e24 <__udivdi3+0x244>
   88e14:	1909      	adds	r1, r1, r4
   88e16:	f103 30ff 	add.w	r0, r3, #4294967295
   88e1a:	d222      	bcs.n	88e62 <__udivdi3+0x282>
   88e1c:	428a      	cmp	r2, r1
   88e1e:	d920      	bls.n	88e62 <__udivdi3+0x282>
   88e20:	3b02      	subs	r3, #2
   88e22:	4421      	add	r1, r4
   88e24:	1a89      	subs	r1, r1, r2
   88e26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   88e2a:	e743      	b.n	88cb4 <__udivdi3+0xd4>
   88e2c:	463a      	mov	r2, r7
   88e2e:	e705      	b.n	88c3c <__udivdi3+0x5c>
   88e30:	4633      	mov	r3, r6
   88e32:	e718      	b.n	88c66 <__udivdi3+0x86>
   88e34:	460a      	mov	r2, r1
   88e36:	e766      	b.n	88d06 <__udivdi3+0x126>
   88e38:	40b0      	lsls	r0, r6
   88e3a:	4290      	cmp	r0, r2
   88e3c:	d2b5      	bcs.n	88daa <__udivdi3+0x1ca>
   88e3e:	f10c 32ff 	add.w	r2, ip, #4294967295
   88e42:	2300      	movs	r3, #0
   88e44:	e712      	b.n	88c6c <__udivdi3+0x8c>
   88e46:	4633      	mov	r3, r6
   88e48:	4632      	mov	r2, r6
   88e4a:	e70f      	b.n	88c6c <__udivdi3+0x8c>
   88e4c:	459a      	cmp	sl, r3
   88e4e:	d98d      	bls.n	88d6c <__udivdi3+0x18c>
   88e50:	f1ac 0c02 	sub.w	ip, ip, #2
   88e54:	4423      	add	r3, r4
   88e56:	e78a      	b.n	88d6e <__udivdi3+0x18e>
   88e58:	45b9      	cmp	r9, r7
   88e5a:	d99a      	bls.n	88d92 <__udivdi3+0x1b2>
   88e5c:	3d02      	subs	r5, #2
   88e5e:	4427      	add	r7, r4
   88e60:	e798      	b.n	88d94 <__udivdi3+0x1b4>
   88e62:	4603      	mov	r3, r0
   88e64:	e7de      	b.n	88e24 <__udivdi3+0x244>
   88e66:	4690      	mov	r8, r2
   88e68:	e7c6      	b.n	88df8 <__udivdi3+0x218>
   88e6a:	3802      	subs	r0, #2
   88e6c:	4421      	add	r1, r4
   88e6e:	e735      	b.n	88cdc <__udivdi3+0xfc>
   88e70:	69636572 	.word	0x69636572
   88e74:	64657665 	.word	0x64657665
   88e78:	0000000a 	.word	0x0000000a
   88e7c:	62203631 	.word	0x62203631
   88e80:	72617469 	.word	0x72617469
   88e84:	20317820 	.word	0x20317820
   88e88:	2064253a 	.word	0x2064253a
   88e8c:	0000000a 	.word	0x0000000a
   88e90:	62203631 	.word	0x62203631
   88e94:	72617469 	.word	0x72617469
   88e98:	20317920 	.word	0x20317920
   88e9c:	2064253a 	.word	0x2064253a
   88ea0:	0000000a 	.word	0x0000000a
   88ea4:	62203631 	.word	0x62203631
   88ea8:	72617469 	.word	0x72617469
   88eac:	20327820 	.word	0x20327820
   88eb0:	2064253a 	.word	0x2064253a
   88eb4:	0000000a 	.word	0x0000000a
   88eb8:	62203631 	.word	0x62203631
   88ebc:	72617469 	.word	0x72617469
   88ec0:	20327920 	.word	0x20327920
   88ec4:	2064253a 	.word	0x2064253a
   88ec8:	0000000a 	.word	0x0000000a
   88ecc:	09097325 	.word	0x09097325
   88ed0:	25096325 	.word	0x25096325
   88ed4:	75250975 	.word	0x75250975
   88ed8:	0d752509 	.word	0x0d752509
   88edc:	0000000a 	.word	0x0000000a
   88ee0:	454c4449 	.word	0x454c4449
   88ee4:	00000000 	.word	0x00000000
   88ee8:	00000a0d 	.word	0x00000a0d
   88eec:	20726d54 	.word	0x20726d54
   88ef0:	00637653 	.word	0x00637653
   88ef4:	73206e69 	.word	0x73206e69
   88ef8:	0a646e65 	.word	0x0a646e65
   88efc:	00000000 	.word	0x00000000
   88f00:	2056414e 	.word	0x2056414e
   88f04:	4b434150 	.word	0x4b434150
   88f08:	00000000 	.word	0x00000000
   88f0c:	49595254 	.word	0x49595254
   88f10:	5420474e 	.word	0x5420474e
   88f14:	4553204f 	.word	0x4553204f
   88f18:	000a444e 	.word	0x000a444e
   88f1c:	656e6f64 	.word	0x656e6f64
   88f20:	6e657320 	.word	0x6e657320
   88f24:	676e6964 	.word	0x676e6964
   88f28:	76616e20 	.word	0x76616e20
   88f2c:	0000000a 	.word	0x0000000a
   88f30:	20424150 	.word	0x20424150
   88f34:	4b434150 	.word	0x4b434150
   88f38:	00000030 	.word	0x00000030
   88f3c:	656e6f64 	.word	0x656e6f64
   88f40:	6e657320 	.word	0x6e657320
   88f44:	676e6964 	.word	0x676e6964
   88f48:	62617020 	.word	0x62617020
   88f4c:	0000000a 	.word	0x0000000a
   88f50:	72617453 	.word	0x72617453
   88f54:	666f2074 	.word	0x666f2074
   88f58:	63657220 	.word	0x63657220
   88f5c:	65766965 	.word	0x65766965
   88f60:	0000000a 	.word	0x0000000a
   88f64:	69595254 	.word	0x69595254
   88f68:	7420676e 	.word	0x7420676e
   88f6c:	6572206f 	.word	0x6572206f
   88f70:	76696563 	.word	0x76696563
   88f74:	616e2065 	.word	0x616e2065
   88f78:	00000076 	.word	0x00000076
   88f7c:	656e6f64 	.word	0x656e6f64
   88f80:	6e657320 	.word	0x6e657320
   88f84:	676e6964 	.word	0x676e6964
   88f88:	00000000 	.word	0x00000000
   88f8c:	69595254 	.word	0x69595254
   88f90:	7420676e 	.word	0x7420676e
   88f94:	6572206f 	.word	0x6572206f
   88f98:	76696563 	.word	0x76696563
   88f9c:	61502065 	.word	0x61502065
   88fa0:	00000000 	.word	0x00000000
   88fa4:	4b434f53 	.word	0x4b434f53
   88fa8:	00005445 	.word	0x00005445
   88fac:	656a624f 	.word	0x656a624f
   88fb0:	203a7463 	.word	0x203a7463
   88fb4:	0a206425 	.word	0x0a206425
   88fb8:	00000000 	.word	0x00000000
   88fbc:	736f7078 	.word	0x736f7078
   88fc0:	6425203a 	.word	0x6425203a
   88fc4:	00000a20 	.word	0x00000a20
   88fc8:	736f7079 	.word	0x736f7079
   88fcc:	6425203a 	.word	0x6425203a
   88fd0:	00000a20 	.word	0x00000a20
   88fd4:	41555153 	.word	0x41555153
   88fd8:	00004552 	.word	0x00004552
   88fdc:	73616c47 	.word	0x73616c47
   88fe0:	00000073 	.word	0x00000073
   88fe4:	00584f42 	.word	0x00584f42
   88fe8:	72617453 	.word	0x72617453
   88fec:	666f2074 	.word	0x666f2074
   88ff0:	696e6920 	.word	0x696e6920
   88ff4:	000a746e 	.word	0x000a746e
   88ff8:	6976616e 	.word	0x6976616e
   88ffc:	69746167 	.word	0x69746167
   89000:	00006e6f 	.word	0x00006e6f
   89004:	00000043 	.word	0x00000043

00089008 <_global_impure_ptr>:
   89008:	20070190                                ... 

0008900c <zeroes.6763>:
   8900c:	30303030 30303030 30303030 30303030     0000000000000000
   8901c:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   8902c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   8903c:	00000000 33323130 37363534 62613938     ....0123456789ab
   8904c:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

0008905c <blanks.6762>:
   8905c:	20202020 20202020 20202020 20202020                     

0008906c <zeroes.6721>:
   8906c:	30303030 30303030 30303030 30303030     0000000000000000

0008907c <blanks.6720>:
   8907c:	20202020 20202020 20202020 20202020                     
   8908c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   8909c:	49534f50 00000058 0000002e              POSIX.......

000890a8 <__mprec_tens>:
   890a8:	00000000 3ff00000 00000000 40240000     .......?......$@
   890b8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   890c8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   890d8:	00000000 412e8480 00000000 416312d0     .......A......cA
   890e8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   890f8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   89108:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   89118:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   89128:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   89138:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   89148:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   89158:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   89168:	79d99db4 44ea7843                       ...yCx.D

00089170 <__mprec_bigtens>:
   89170:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   89180:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   89190:	7f73bf3c 75154fdd                       <.s..O.u

00089198 <p05.5269>:
   89198:	00000005 00000019 0000007d              ........}...

000891a4 <_init>:
   891a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   891a6:	bf00      	nop
   891a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   891aa:	bc08      	pop	{r3}
   891ac:	469e      	mov	lr, r3
   891ae:	4770      	bx	lr

000891b0 <__init_array_start>:
   891b0:	000850c9 	.word	0x000850c9

000891b4 <__frame_dummy_init_array_entry>:
   891b4:	00080119                                ....

000891b8 <_fini>:
   891b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   891ba:	bf00      	nop
   891bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   891be:	bc08      	pop	{r3}
   891c0:	469e      	mov	lr, r3
   891c2:	4770      	bx	lr

000891c4 <__fini_array_start>:
   891c4:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007018c 	.word	0x2007018c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <xFreeBytesRemaining>:
20070130:	00008000                                ....

20070134 <xNextTaskUnblockTime>:
20070134:	0000ffff                                ....

20070138 <packet_received_pab>:
	...
20070140:	20078ca0 00000003 00000002              ... ........

2007014c <packet_received_nav>:
	...
20070154:	20078ca4 00000005 00000003              ... ........

20070160 <packet_pab>:
	...
20070168:	20078c98 00000003 00000002              ... ........

20070174 <packet_nav>:
	...
2007017c:	20078c9c 00000001 00000003              ... ........

20070188 <g_interrupt_enabled>:
20070188:	00000001                                ....

2007018c <SystemCoreClock>:
2007018c:	003d0900                                ..=.

20070190 <impure_data>:
20070190:	00000000 2007047c 200704e4 2007054c     ....|.. ... L.. 
	...
200701c4:	00089004 00000000 00000000 00000000     ................
	...
20070238:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070248:	0005deec 0000000b 00000000 00000000     ................
	...

200705b8 <_impure_ptr>:
200705b8:	20070190                                ... 

200705bc <lconv>:
200705bc:	000890a4 00088fb8 00088fb8 00088fb8     ................
200705cc:	00088fb8 00088fb8 00088fb8 00088fb8     ................
200705dc:	00088fb8 00088fb8 ffffffff ffffffff     ................
200705ec:	ffffffff 0000ffff                       ........

200705f4 <lc_ctype_charset>:
200705f4:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070614 <__mb_cur_max>:
20070614:	00000001                                ....

20070618 <__malloc_av_>:
	...
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 
200709e0:	200709d8 200709d8 200709e0 200709e0     ... ... ... ... 
200709f0:	200709e8 200709e8 200709f0 200709f0     ... ... ... ... 
20070a00:	200709f8 200709f8 20070a00 20070a00     ... ... ... ... 
20070a10:	20070a08 20070a08 20070a10 20070a10     ... ... ... ... 

20070a20 <__malloc_trim_threshold>:
20070a20:	00020000                                ....

20070a24 <__malloc_sbrk_base>:
20070a24:	ffffffff                                ....

20070a28 <__wctomb>:
20070a28:	00087d21                                !}..
