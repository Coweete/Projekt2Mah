
implementation01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035e8  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000097c  20070000  000835e8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00008318  20070980  00083f68  0001097c  2**3
                  ALLOC
  3 .stack        00002000  20078c98  0008c280  0001097c  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0001097c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000109a5  2**0
                  CONTENTS, READONLY
  6 .debug_info   000134ad  00000000  00000000  00010a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000361f  00000000  00000000  00023ead  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000079ab  00000000  00000000  000274cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e10  00000000  00000000  0002ee77  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ea8  00000000  00000000  0002fc87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00009bd6  00000000  00000000  00030b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013dec  00000000  00000000  0003a705  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006876e  00000000  00000000  0004e4f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000217c  00000000  00000000  000b6c60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007ac98 	.word	0x2007ac98
   80004:	000809cd 	.word	0x000809cd
   80008:	000809c9 	.word	0x000809c9
   8000c:	000809c9 	.word	0x000809c9
   80010:	000809c9 	.word	0x000809c9
   80014:	000809c9 	.word	0x000809c9
   80018:	000809c9 	.word	0x000809c9
	...
   8002c:	00080ca5 	.word	0x00080ca5
   80030:	000809c9 	.word	0x000809c9
   80034:	00000000 	.word	0x00000000
   80038:	00080d21 	.word	0x00080d21
   8003c:	00080d5d 	.word	0x00080d5d
   80040:	000809c9 	.word	0x000809c9
   80044:	000809c9 	.word	0x000809c9
   80048:	000809c9 	.word	0x000809c9
   8004c:	000809c9 	.word	0x000809c9
   80050:	000809c9 	.word	0x000809c9
   80054:	000809c9 	.word	0x000809c9
   80058:	000809c9 	.word	0x000809c9
   8005c:	000809c9 	.word	0x000809c9
   80060:	000809c9 	.word	0x000809c9
   80064:	000809c9 	.word	0x000809c9
   80068:	00000000 	.word	0x00000000
   8006c:	000807d1 	.word	0x000807d1
   80070:	000807e5 	.word	0x000807e5
   80074:	000807f9 	.word	0x000807f9
   80078:	0008080d 	.word	0x0008080d
	...
   80084:	000821cd 	.word	0x000821cd
   80088:	000809c9 	.word	0x000809c9
   8008c:	000809c9 	.word	0x000809c9
   80090:	000809c9 	.word	0x000809c9
   80094:	000809c9 	.word	0x000809c9
   80098:	000809c9 	.word	0x000809c9
   8009c:	000809c9 	.word	0x000809c9
   800a0:	000809c9 	.word	0x000809c9
   800a4:	00000000 	.word	0x00000000
   800a8:	000809c9 	.word	0x000809c9
   800ac:	000809c9 	.word	0x000809c9
   800b0:	000809c9 	.word	0x000809c9
   800b4:	000809c9 	.word	0x000809c9
   800b8:	000809c9 	.word	0x000809c9
   800bc:	000809c9 	.word	0x000809c9
   800c0:	000809c9 	.word	0x000809c9
   800c4:	000809c9 	.word	0x000809c9
   800c8:	000809c9 	.word	0x000809c9
   800cc:	000809c9 	.word	0x000809c9
   800d0:	000809c9 	.word	0x000809c9
   800d4:	000809c9 	.word	0x000809c9
   800d8:	000809c9 	.word	0x000809c9
   800dc:	000809c9 	.word	0x000809c9
   800e0:	000809c9 	.word	0x000809c9
   800e4:	000809c9 	.word	0x000809c9
   800e8:	000809c9 	.word	0x000809c9
   800ec:	000809c9 	.word	0x000809c9
   800f0:	000809c9 	.word	0x000809c9

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070980 	.word	0x20070980
   80110:	00000000 	.word	0x00000000
   80114:	000835e8 	.word	0x000835e8

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	000835e8 	.word	0x000835e8
   8013c:	20070984 	.word	0x20070984
   80140:	000835e8 	.word	0x000835e8
   80144:	00000000 	.word	0x00000000

00080148 <delayInit>:

#include "asf.h"
#include "DelayFunctions.h"

void delayInit(void)		/* Initializes the timer used for delays */
{
   80148:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);
   8014a:	201b      	movs	r0, #27
   8014c:	4b08      	ldr	r3, [pc, #32]	; (80170 <delayInit+0x28>)
   8014e:	4798      	blx	r3
	tc_init(TC0,0,0);		 /* TC0, channel 0, TCLK1 och capturemode */
   80150:	4c08      	ldr	r4, [pc, #32]	; (80174 <delayInit+0x2c>)
   80152:	4620      	mov	r0, r4
   80154:	2100      	movs	r1, #0
   80156:	460a      	mov	r2, r1
   80158:	4b07      	ldr	r3, [pc, #28]	; (80178 <delayInit+0x30>)
   8015a:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   8015c:	4620      	mov	r0, r4
   8015e:	2100      	movs	r1, #0
   80160:	4b06      	ldr	r3, [pc, #24]	; (8017c <delayInit+0x34>)
   80162:	4798      	blx	r3
	tc_stop(TC0,0);			/* making sure the timer does not run  */
   80164:	4620      	mov	r0, r4
   80166:	2100      	movs	r1, #0
   80168:	4b05      	ldr	r3, [pc, #20]	; (80180 <delayInit+0x38>)
   8016a:	4798      	blx	r3
   8016c:	bd10      	pop	{r4, pc}
   8016e:	bf00      	nop
   80170:	00080909 	.word	0x00080909
   80174:	40080000 	.word	0x40080000
   80178:	00080961 	.word	0x00080961
   8017c:	0008097d 	.word	0x0008097d
   80180:	0008098d 	.word	0x0008098d

00080184 <delayMicroseconds>:
}


void delayMicroseconds(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   80184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80186:	4604      	mov	r4, r0
	tc_start(TC0,0);
   80188:	4809      	ldr	r0, [pc, #36]	; (801b0 <delayMicroseconds+0x2c>)
   8018a:	2100      	movs	r1, #0
   8018c:	4b09      	ldr	r3, [pc, #36]	; (801b4 <delayMicroseconds+0x30>)
   8018e:	4798      	blx	r3
	while (tc_read_cv(TC0,0) < us*42); /* Only works in newere version of ASF */
   80190:	272a      	movs	r7, #42	; 0x2a
   80192:	fb07 f704 	mul.w	r7, r7, r4
   80196:	4e06      	ldr	r6, [pc, #24]	; (801b0 <delayMicroseconds+0x2c>)
   80198:	2500      	movs	r5, #0
   8019a:	4c07      	ldr	r4, [pc, #28]	; (801b8 <delayMicroseconds+0x34>)
   8019c:	4630      	mov	r0, r6
   8019e:	4629      	mov	r1, r5
   801a0:	47a0      	blx	r4
   801a2:	42b8      	cmp	r0, r7
   801a4:	d3fa      	bcc.n	8019c <delayMicroseconds+0x18>
	tc_stop(TC0,0);
   801a6:	4802      	ldr	r0, [pc, #8]	; (801b0 <delayMicroseconds+0x2c>)
   801a8:	2100      	movs	r1, #0
   801aa:	4b04      	ldr	r3, [pc, #16]	; (801bc <delayMicroseconds+0x38>)
   801ac:	4798      	blx	r3
   801ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   801b0:	40080000 	.word	0x40080000
   801b4:	00080985 	.word	0x00080985
   801b8:	00080995 	.word	0x00080995
   801bc:	0008098d 	.word	0x0008098d

000801c0 <initMotor>:
int Kp = 4;
int angle=0;
int speed=1650;
int r_speed=0;
int l_speed=0;
void initMotor(void){
   801c0:	b470      	push	{r4, r5, r6}
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   801c2:	4a24      	ldr	r2, [pc, #144]	; (80254 <initMotor+0x94>)
   801c4:	2310      	movs	r3, #16
   801c6:	6113      	str	r3, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   801c8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   801cc:	2320      	movs	r3, #32
   801ce:	6113      	str	r3, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   801d0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   801d4:	4b20      	ldr	r3, [pc, #128]	; (80258 <initMotor+0x98>)
   801d6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   801da:	6119      	str	r1, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   801dc:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   801e0:	491e      	ldr	r1, [pc, #120]	; (8025c <initMotor+0x9c>)
   801e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   801e6:	610b      	str	r3, [r1, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   801e8:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   801ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   801f0:	614b      	str	r3, [r1, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   801f2:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   801f6:	4b1a      	ldr	r3, [pc, #104]	; (80260 <initMotor+0xa0>)
   801f8:	2402      	movs	r4, #2
   801fa:	615c      	str	r4, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   801fc:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80200:	2008      	movs	r0, #8
   80202:	6158      	str	r0, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80204:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80208:	f44f 7500 	mov.w	r5, #512	; 0x200
   8020c:	615d      	str	r5, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8020e:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80212:	f44f 6580 	mov.w	r5, #1024	; 0x400
   80216:	615d      	str	r5, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80218:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8021c:	2504      	movs	r5, #4
   8021e:	6155      	str	r5, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80220:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80224:	2601      	movs	r6, #1
   80226:	615e      	str	r6, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80228:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8022c:	615d      	str	r5, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8022e:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80232:	2540      	movs	r5, #64	; 0x40
   80234:	615d      	str	r5, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80236:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8023a:	2380      	movs	r3, #128	; 0x80
   8023c:	614b      	str	r3, [r1, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8023e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80242:	6154      	str	r4, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80244:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80248:	6150      	str	r0, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8024a:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		ioport_set_pin_dir(L2,IOPORT_DIR_INPUT);
		ioport_set_pin_dir(L3,IOPORT_DIR_INPUT);
		ioport_set_pin_dir(L4,IOPORT_DIR_INPUT);
		ioport_set_pin_dir(L5,IOPORT_DIR_INPUT);
		
}
   8024e:	bc70      	pop	{r4, r5, r6}
   80250:	4770      	bx	lr
   80252:	bf00      	nop
   80254:	400e1200 	.word	0x400e1200
   80258:	400e1000 	.word	0x400e1000
   8025c:	400e0e00 	.word	0x400e0e00
   80260:	400e1400 	.word	0x400e1400

00080264 <task_blink>:
#include <inttypes.h>
#include "task_blink.h"
//led pin
#define BlinkPib PIO_PB27_IDX

void task_blink(void *pvParameters){
   80264:	b5f0      	push	{r4, r5, r6, r7, lr}
   80266:	b083      	sub	sp, #12
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 100;
	xLastWakeTime = xTaskGetTickCount();
   80268:	4b0c      	ldr	r3, [pc, #48]	; (8029c <task_blink+0x38>)
   8026a:	4798      	blx	r3
   8026c:	f8ad 0006 	strh.w	r0, [sp, #6]
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80270:	4b0b      	ldr	r3, [pc, #44]	; (802a0 <task_blink+0x3c>)
   80272:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80276:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80278:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(BlinkPib,IOPORT_DIR_OUTPUT);
	uint8_t counter = 0;
   8027c:	2400      	movs	r4, #0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8027e:	461f      	mov	r7, r3
   80280:	4616      	mov	r6, r2
	while (1){
		ioport_set_pin_level(BlinkPib,counter);
		//vTaskDelay(xTimeIncrement);
		counter = ~counter;
		vTaskDelayUntil(&xLastWakeTime,xTimeIncrement);
   80282:	4d08      	ldr	r5, [pc, #32]	; (802a4 <task_blink+0x40>)
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   80284:	b10c      	cbz	r4, 8028a <task_blink+0x26>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80286:	633e      	str	r6, [r7, #48]	; 0x30
   80288:	e000      	b.n	8028c <task_blink+0x28>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8028a:	637e      	str	r6, [r7, #52]	; 0x34
	ioport_set_pin_dir(BlinkPib,IOPORT_DIR_OUTPUT);
	uint8_t counter = 0;
	while (1){
		ioport_set_pin_level(BlinkPib,counter);
		//vTaskDelay(xTimeIncrement);
		counter = ~counter;
   8028c:	43e4      	mvns	r4, r4
   8028e:	b2e4      	uxtb	r4, r4
		vTaskDelayUntil(&xLastWakeTime,xTimeIncrement);
   80290:	f10d 0006 	add.w	r0, sp, #6
   80294:	2164      	movs	r1, #100	; 0x64
   80296:	47a8      	blx	r5
	}
   80298:	e7f4      	b.n	80284 <task_blink+0x20>
   8029a:	bf00      	nop
   8029c:	00081759 	.word	0x00081759
   802a0:	400e1000 	.word	0x400e1000
   802a4:	000819ad 	.word	0x000819ad

000802a8 <pulseins>:
//DigitalPin 24
#define TriggerPin PIO_PA15_IDX

long sensordistance = 0;

int pulseins(){
   802a8:	b570      	push	{r4, r5, r6, lr}
	int state = 1;
	int flag = 0,clocktime;
   802aa:	2200      	movs	r2, #0
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   802ac:	4c11      	ldr	r4, [pc, #68]	; (802f4 <pulseins+0x4c>)
	while(state){
		if(ioport_get_pin_level(EchoPin) && !flag){
			tc_start(TC0,0);
   802ae:	4e12      	ldr	r6, [pc, #72]	; (802f8 <pulseins+0x50>)
   802b0:	4d12      	ldr	r5, [pc, #72]	; (802fc <pulseins+0x54>)
   802b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c

int pulseins(){
	int state = 1;
	int flag = 0,clocktime;
	while(state){
		if(ioport_get_pin_level(EchoPin) && !flag){
   802b4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   802b8:	d005      	beq.n	802c6 <pulseins+0x1e>
   802ba:	b95a      	cbnz	r2, 802d4 <pulseins+0x2c>
			tc_start(TC0,0);
   802bc:	4630      	mov	r0, r6
   802be:	2100      	movs	r1, #0
   802c0:	47a8      	blx	r5
			flag = 1;
   802c2:	2201      	movs	r2, #1
   802c4:	e006      	b.n	802d4 <pulseins+0x2c>
   802c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		}
		if(!ioport_get_pin_level(EchoPin) && flag)
   802c8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   802cc:	d1f1      	bne.n	802b2 <pulseins+0xa>
   802ce:	2a00      	cmp	r2, #0
   802d0:	d0ef      	beq.n	802b2 <pulseins+0xa>
   802d2:	e003      	b.n	802dc <pulseins+0x34>
   802d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   802d6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   802da:	d1ea      	bne.n	802b2 <pulseins+0xa>
		{
			clocktime = tc_read_cv(TC0,0);
   802dc:	4c06      	ldr	r4, [pc, #24]	; (802f8 <pulseins+0x50>)
   802de:	4620      	mov	r0, r4
   802e0:	2100      	movs	r1, #0
   802e2:	4b07      	ldr	r3, [pc, #28]	; (80300 <pulseins+0x58>)
   802e4:	4798      	blx	r3
   802e6:	4605      	mov	r5, r0
			tc_stop(TC0,0);
   802e8:	4620      	mov	r0, r4
   802ea:	2100      	movs	r1, #0
   802ec:	4b05      	ldr	r3, [pc, #20]	; (80304 <pulseins+0x5c>)
   802ee:	4798      	blx	r3
			flag = 0;
			state = 0;
		}
	}
	return clocktime;
}
   802f0:	4628      	mov	r0, r5
   802f2:	bd70      	pop	{r4, r5, r6, pc}
   802f4:	400e0e00 	.word	0x400e0e00
   802f8:	40080000 	.word	0x40080000
   802fc:	00080985 	.word	0x00080985
   80300:	00080995 	.word	0x00080995
   80304:	0008098d 	.word	0x0008098d

00080308 <init_sensor>:
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80308:	4b05      	ldr	r3, [pc, #20]	; (80320 <init_sensor+0x18>)
   8030a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8030e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80310:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80314:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80318:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8031a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   8031e:	4770      	bx	lr
   80320:	400e0e00 	.word	0x400e0e00
   80324:	00000000 	.word	0x00000000

00080328 <task_soundsensor>:
void init_sensor(){
	ioport_set_pin_dir(TriggerPin,IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(EchoPin,IOPORT_DIR_INPUT);
}

void task_soundsensor(void *pvParameters){
   80328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8032c:	b082      	sub	sp, #8
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 100;
	xLastWakeTime = xTaskGetTickCount();
   8032e:	4b1a      	ldr	r3, [pc, #104]	; (80398 <task_soundsensor+0x70>)
   80330:	4798      	blx	r3
   80332:	f8ad 0006 	strh.w	r0, [sp, #6]
	init_sensor();
   80336:	4b19      	ldr	r3, [pc, #100]	; (8039c <task_soundsensor+0x74>)
   80338:	4798      	blx	r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8033a:	4e19      	ldr	r6, [pc, #100]	; (803a0 <task_soundsensor+0x78>)
   8033c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   80340:	46ba      	mov	sl, r7
	
	 while (1){
		long duration;
		ioport_set_pin_level(TriggerPin,HIGH);
		delayMicroseconds(10000);
   80342:	f8df 9074 	ldr.w	r9, [pc, #116]	; 803b8 <task_soundsensor+0x90>
		ioport_set_pin_level(TriggerPin,LOW);
		duration = pulseins();
		sensordistance = (duration/42)/58.2;
   80346:	f8df 8074 	ldr.w	r8, [pc, #116]	; 803bc <task_soundsensor+0x94>
   8034a:	a511      	add	r5, pc, #68	; (adr r5, 80390 <task_soundsensor+0x68>)
   8034c:	e9d5 4500 	ldrd	r4, r5, [r5]
   80350:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
	init_sensor();
	
	 while (1){
		long duration;
		ioport_set_pin_level(TriggerPin,HIGH);
		delayMicroseconds(10000);
   80354:	f242 7010 	movw	r0, #10000	; 0x2710
   80358:	47c8      	blx	r9
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8035a:	6377      	str	r7, [r6, #52]	; 0x34
		ioport_set_pin_level(TriggerPin,LOW);
		duration = pulseins();
   8035c:	4b11      	ldr	r3, [pc, #68]	; (803a4 <task_soundsensor+0x7c>)
   8035e:	4798      	blx	r3
		sensordistance = (duration/42)/58.2;
   80360:	fb88 2300 	smull	r2, r3, r8, r0
   80364:	17c0      	asrs	r0, r0, #31
   80366:	ebc0 00e3 	rsb	r0, r0, r3, asr #3
   8036a:	4b0f      	ldr	r3, [pc, #60]	; (803a8 <task_soundsensor+0x80>)
   8036c:	4798      	blx	r3
   8036e:	4622      	mov	r2, r4
   80370:	462b      	mov	r3, r5
   80372:	f8df c04c 	ldr.w	ip, [pc, #76]	; 803c0 <task_soundsensor+0x98>
   80376:	47e0      	blx	ip
   80378:	4b0c      	ldr	r3, [pc, #48]	; (803ac <task_soundsensor+0x84>)
   8037a:	4798      	blx	r3
   8037c:	4b0c      	ldr	r3, [pc, #48]	; (803b0 <task_soundsensor+0x88>)
   8037e:	6018      	str	r0, [r3, #0]
		vTaskDelayUntil(&xLastWakeTime,xTimeIncrement);
   80380:	f10d 0006 	add.w	r0, sp, #6
   80384:	2164      	movs	r1, #100	; 0x64
   80386:	4b0b      	ldr	r3, [pc, #44]	; (803b4 <task_soundsensor+0x8c>)
   80388:	4798      	blx	r3
   8038a:	e7e1      	b.n	80350 <task_soundsensor+0x28>
   8038c:	f3af 8000 	nop.w
   80390:	9999999a 	.word	0x9999999a
   80394:	404d1999 	.word	0x404d1999
   80398:	00081759 	.word	0x00081759
   8039c:	00080309 	.word	0x00080309
   803a0:	400e0e00 	.word	0x400e0e00
   803a4:	000802a9 	.word	0x000802a9
   803a8:	0008256d 	.word	0x0008256d
   803ac:	00082a5d 	.word	0x00082a5d
   803b0:	2007099c 	.word	0x2007099c
   803b4:	000819ad 	.word	0x000819ad
   803b8:	00080185 	.word	0x00080185
   803bc:	30c30c31 	.word	0x30c30c31
   803c0:	0008288d 	.word	0x0008288d
   803c4:	f3af 8000 	nop.w

000803c8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   803c8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   803ca:	480e      	ldr	r0, [pc, #56]	; (80404 <sysclk_init+0x3c>)
   803cc:	4b0e      	ldr	r3, [pc, #56]	; (80408 <sysclk_init+0x40>)
   803ce:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   803d0:	2000      	movs	r0, #0
   803d2:	213e      	movs	r1, #62	; 0x3e
   803d4:	4b0d      	ldr	r3, [pc, #52]	; (8040c <sysclk_init+0x44>)
   803d6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   803d8:	4c0d      	ldr	r4, [pc, #52]	; (80410 <sysclk_init+0x48>)
   803da:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   803dc:	2800      	cmp	r0, #0
   803de:	d0fc      	beq.n	803da <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   803e0:	4b0c      	ldr	r3, [pc, #48]	; (80414 <sysclk_init+0x4c>)
   803e2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   803e4:	4a0c      	ldr	r2, [pc, #48]	; (80418 <sysclk_init+0x50>)
   803e6:	4b0d      	ldr	r3, [pc, #52]	; (8041c <sysclk_init+0x54>)
   803e8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   803ea:	4c0d      	ldr	r4, [pc, #52]	; (80420 <sysclk_init+0x58>)
   803ec:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   803ee:	2800      	cmp	r0, #0
   803f0:	d0fc      	beq.n	803ec <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   803f2:	2010      	movs	r0, #16
   803f4:	4b0b      	ldr	r3, [pc, #44]	; (80424 <sysclk_init+0x5c>)
   803f6:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   803f8:	4b0b      	ldr	r3, [pc, #44]	; (80428 <sysclk_init+0x60>)
   803fa:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   803fc:	4801      	ldr	r0, [pc, #4]	; (80404 <sysclk_init+0x3c>)
   803fe:	4b02      	ldr	r3, [pc, #8]	; (80408 <sysclk_init+0x40>)
   80400:	4798      	blx	r3
   80402:	bd10      	pop	{r4, pc}
   80404:	0501bd00 	.word	0x0501bd00
   80408:	200700a5 	.word	0x200700a5
   8040c:	00080885 	.word	0x00080885
   80410:	000808d9 	.word	0x000808d9
   80414:	000808e9 	.word	0x000808e9
   80418:	200d3f01 	.word	0x200d3f01
   8041c:	400e0600 	.word	0x400e0600
   80420:	000808f9 	.word	0x000808f9
   80424:	00080821 	.word	0x00080821
   80428:	00080a7d 	.word	0x00080a7d

0008042c <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   8042c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80430:	b083      	sub	sp, #12
   80432:	4605      	mov	r5, r0
	while (len) {
   80434:	4690      	mov	r8, r2
   80436:	2a00      	cmp	r2, #0
   80438:	d047      	beq.n	804ca <usart_serial_read_packet+0x9e>
   8043a:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8043c:	4f25      	ldr	r7, [pc, #148]	; (804d4 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   8043e:	4c26      	ldr	r4, [pc, #152]	; (804d8 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80440:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 804ec <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80444:	f8df b094 	ldr.w	fp, [pc, #148]	; 804dc <usart_serial_read_packet+0xb0>
   80448:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   8044c:	2300      	movs	r3, #0
   8044e:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80450:	4b22      	ldr	r3, [pc, #136]	; (804dc <usart_serial_read_packet+0xb0>)
   80452:	429d      	cmp	r5, r3
   80454:	d106      	bne.n	80464 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80456:	4658      	mov	r0, fp
   80458:	4649      	mov	r1, r9
   8045a:	4b21      	ldr	r3, [pc, #132]	; (804e0 <usart_serial_read_packet+0xb4>)
   8045c:	4798      	blx	r3
   8045e:	2800      	cmp	r0, #0
   80460:	d1f9      	bne.n	80456 <usart_serial_read_packet+0x2a>
   80462:	e019      	b.n	80498 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80464:	4b1f      	ldr	r3, [pc, #124]	; (804e4 <usart_serial_read_packet+0xb8>)
   80466:	429d      	cmp	r5, r3
   80468:	d109      	bne.n	8047e <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8046a:	4699      	mov	r9, r3
   8046c:	4648      	mov	r0, r9
   8046e:	a901      	add	r1, sp, #4
   80470:	47a0      	blx	r4
   80472:	2800      	cmp	r0, #0
   80474:	d1fa      	bne.n	8046c <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   80476:	9b01      	ldr	r3, [sp, #4]
   80478:	f806 3c01 	strb.w	r3, [r6, #-1]
   8047c:	e017      	b.n	804ae <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8047e:	4b1a      	ldr	r3, [pc, #104]	; (804e8 <usart_serial_read_packet+0xbc>)
   80480:	429d      	cmp	r5, r3
   80482:	d109      	bne.n	80498 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80484:	4699      	mov	r9, r3
   80486:	4648      	mov	r0, r9
   80488:	a901      	add	r1, sp, #4
   8048a:	47a0      	blx	r4
   8048c:	2800      	cmp	r0, #0
   8048e:	d1fa      	bne.n	80486 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80490:	9b01      	ldr	r3, [sp, #4]
   80492:	f806 3c01 	strb.w	r3, [r6, #-1]
   80496:	e014      	b.n	804c2 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80498:	4555      	cmp	r5, sl
   8049a:	d108      	bne.n	804ae <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   8049c:	4650      	mov	r0, sl
   8049e:	a901      	add	r1, sp, #4
   804a0:	47a0      	blx	r4
   804a2:	2800      	cmp	r0, #0
   804a4:	d1fa      	bne.n	8049c <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   804a6:	9b01      	ldr	r3, [sp, #4]
   804a8:	f806 3c01 	strb.w	r3, [r6, #-1]
   804ac:	e009      	b.n	804c2 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   804ae:	42bd      	cmp	r5, r7
   804b0:	d107      	bne.n	804c2 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   804b2:	4638      	mov	r0, r7
   804b4:	a901      	add	r1, sp, #4
   804b6:	47a0      	blx	r4
   804b8:	2800      	cmp	r0, #0
   804ba:	d1fa      	bne.n	804b2 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   804bc:	9b01      	ldr	r3, [sp, #4]
   804be:	f806 3c01 	strb.w	r3, [r6, #-1]
   804c2:	3601      	adds	r6, #1
   804c4:	f1b8 0801 	subs.w	r8, r8, #1
   804c8:	d1be      	bne.n	80448 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   804ca:	2000      	movs	r0, #0
   804cc:	b003      	add	sp, #12
   804ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   804d2:	bf00      	nop
   804d4:	400a4000 	.word	0x400a4000
   804d8:	000809b1 	.word	0x000809b1
   804dc:	400e0800 	.word	0x400e0800
   804e0:	0008099d 	.word	0x0008099d
   804e4:	40098000 	.word	0x40098000
   804e8:	4009c000 	.word	0x4009c000
   804ec:	400a0000 	.word	0x400a0000

000804f0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   804f0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   804f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804f6:	4b13      	ldr	r3, [pc, #76]	; (80544 <board_init+0x54>)
   804f8:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   804fa:	200b      	movs	r0, #11
   804fc:	4c12      	ldr	r4, [pc, #72]	; (80548 <board_init+0x58>)
   804fe:	47a0      	blx	r4
   80500:	200c      	movs	r0, #12
   80502:	47a0      	blx	r4
   80504:	200d      	movs	r0, #13
   80506:	47a0      	blx	r4
   80508:	200e      	movs	r0, #14
   8050a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8050c:	203b      	movs	r0, #59	; 0x3b
   8050e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80512:	4c0e      	ldr	r4, [pc, #56]	; (8054c <board_init+0x5c>)
   80514:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80516:	2055      	movs	r0, #85	; 0x55
   80518:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8051c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8051e:	2056      	movs	r0, #86	; 0x56
   80520:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80524:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80526:	2068      	movs	r0, #104	; 0x68
   80528:	4909      	ldr	r1, [pc, #36]	; (80550 <board_init+0x60>)
   8052a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8052c:	205c      	movs	r0, #92	; 0x5c
   8052e:	4909      	ldr	r1, [pc, #36]	; (80554 <board_init+0x64>)
   80530:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80532:	4809      	ldr	r0, [pc, #36]	; (80558 <board_init+0x68>)
   80534:	f44f 7140 	mov.w	r1, #768	; 0x300
   80538:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8053c:	4b07      	ldr	r3, [pc, #28]	; (8055c <board_init+0x6c>)
   8053e:	4798      	blx	r3
   80540:	bd10      	pop	{r4, pc}
   80542:	bf00      	nop
   80544:	400e1a50 	.word	0x400e1a50
   80548:	00080909 	.word	0x00080909
   8054c:	00080605 	.word	0x00080605
   80550:	28000079 	.word	0x28000079
   80554:	28000001 	.word	0x28000001
   80558:	400e0e00 	.word	0x400e0e00
   8055c:	000806d9 	.word	0x000806d9

00080560 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80560:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80562:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80566:	d016      	beq.n	80596 <pio_set_peripheral+0x36>
   80568:	d804      	bhi.n	80574 <pio_set_peripheral+0x14>
   8056a:	b1c1      	cbz	r1, 8059e <pio_set_peripheral+0x3e>
   8056c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80570:	d00a      	beq.n	80588 <pio_set_peripheral+0x28>
   80572:	e013      	b.n	8059c <pio_set_peripheral+0x3c>
   80574:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80578:	d011      	beq.n	8059e <pio_set_peripheral+0x3e>
   8057a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8057e:	d00e      	beq.n	8059e <pio_set_peripheral+0x3e>
   80580:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80584:	d10a      	bne.n	8059c <pio_set_peripheral+0x3c>
   80586:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80588:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8058a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8058c:	400b      	ands	r3, r1
   8058e:	ea23 0302 	bic.w	r3, r3, r2
   80592:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80594:	e002      	b.n	8059c <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80596:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80598:	4313      	orrs	r3, r2
   8059a:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8059c:	6042      	str	r2, [r0, #4]
   8059e:	4770      	bx	lr

000805a0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   805a0:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   805a2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   805a6:	bf14      	ite	ne
   805a8:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   805aa:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   805ac:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   805b0:	bf14      	ite	ne
   805b2:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   805b4:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   805b6:	f012 0f02 	tst.w	r2, #2
   805ba:	d002      	beq.n	805c2 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   805bc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   805c0:	e004      	b.n	805cc <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   805c2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   805c6:	bf18      	it	ne
   805c8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   805cc:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   805ce:	6001      	str	r1, [r0, #0]
   805d0:	4770      	bx	lr
   805d2:	bf00      	nop

000805d4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   805d4:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   805d6:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   805d8:	9c01      	ldr	r4, [sp, #4]
   805da:	b10c      	cbz	r4, 805e0 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   805dc:	6641      	str	r1, [r0, #100]	; 0x64
   805de:	e000      	b.n	805e2 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   805e0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   805e2:	b10b      	cbz	r3, 805e8 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   805e4:	6501      	str	r1, [r0, #80]	; 0x50
   805e6:	e000      	b.n	805ea <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   805e8:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   805ea:	b10a      	cbz	r2, 805f0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   805ec:	6301      	str	r1, [r0, #48]	; 0x30
   805ee:	e000      	b.n	805f2 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   805f0:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   805f2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   805f4:	6001      	str	r1, [r0, #0]
}
   805f6:	f85d 4b04 	ldr.w	r4, [sp], #4
   805fa:	4770      	bx	lr

000805fc <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   805fc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   805fe:	4770      	bx	lr

00080600 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80600:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80602:	4770      	bx	lr

00080604 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80604:	b570      	push	{r4, r5, r6, lr}
   80606:	b082      	sub	sp, #8
   80608:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8060a:	0944      	lsrs	r4, r0, #5
   8060c:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80610:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80614:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80616:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   8061a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8061e:	d030      	beq.n	80682 <pio_configure_pin+0x7e>
   80620:	d806      	bhi.n	80630 <pio_configure_pin+0x2c>
   80622:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80626:	d00a      	beq.n	8063e <pio_configure_pin+0x3a>
   80628:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   8062c:	d018      	beq.n	80660 <pio_configure_pin+0x5c>
   8062e:	e049      	b.n	806c4 <pio_configure_pin+0xc0>
   80630:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80634:	d030      	beq.n	80698 <pio_configure_pin+0x94>
   80636:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8063a:	d02d      	beq.n	80698 <pio_configure_pin+0x94>
   8063c:	e042      	b.n	806c4 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8063e:	f000 001f 	and.w	r0, r0, #31
   80642:	2401      	movs	r4, #1
   80644:	4084      	lsls	r4, r0
   80646:	4630      	mov	r0, r6
   80648:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8064c:	4622      	mov	r2, r4
   8064e:	4b1f      	ldr	r3, [pc, #124]	; (806cc <pio_configure_pin+0xc8>)
   80650:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80652:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80656:	bf14      	ite	ne
   80658:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8065a:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8065c:	2001      	movs	r0, #1
   8065e:	e032      	b.n	806c6 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80660:	f000 001f 	and.w	r0, r0, #31
   80664:	2401      	movs	r4, #1
   80666:	4084      	lsls	r4, r0
   80668:	4630      	mov	r0, r6
   8066a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8066e:	4622      	mov	r2, r4
   80670:	4b16      	ldr	r3, [pc, #88]	; (806cc <pio_configure_pin+0xc8>)
   80672:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80674:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80678:	bf14      	ite	ne
   8067a:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8067c:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8067e:	2001      	movs	r0, #1
   80680:	e021      	b.n	806c6 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80682:	f000 011f 	and.w	r1, r0, #31
   80686:	2401      	movs	r4, #1
   80688:	4630      	mov	r0, r6
   8068a:	fa04 f101 	lsl.w	r1, r4, r1
   8068e:	462a      	mov	r2, r5
   80690:	4b0f      	ldr	r3, [pc, #60]	; (806d0 <pio_configure_pin+0xcc>)
   80692:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80694:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80696:	e016      	b.n	806c6 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80698:	f000 011f 	and.w	r1, r0, #31
   8069c:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8069e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   806a2:	ea05 0304 	and.w	r3, r5, r4
   806a6:	9300      	str	r3, [sp, #0]
   806a8:	4630      	mov	r0, r6
   806aa:	fa04 f101 	lsl.w	r1, r4, r1
   806ae:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   806b2:	bf14      	ite	ne
   806b4:	2200      	movne	r2, #0
   806b6:	2201      	moveq	r2, #1
   806b8:	f3c5 0380 	ubfx	r3, r5, #2, #1
   806bc:	4d05      	ldr	r5, [pc, #20]	; (806d4 <pio_configure_pin+0xd0>)
   806be:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   806c0:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   806c2:	e000      	b.n	806c6 <pio_configure_pin+0xc2>

	default:
		return 0;
   806c4:	2000      	movs	r0, #0
	}

	return 1;
}
   806c6:	b002      	add	sp, #8
   806c8:	bd70      	pop	{r4, r5, r6, pc}
   806ca:	bf00      	nop
   806cc:	00080561 	.word	0x00080561
   806d0:	000805a1 	.word	0x000805a1
   806d4:	000805d5 	.word	0x000805d5

000806d8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   806d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   806da:	b083      	sub	sp, #12
   806dc:	4607      	mov	r7, r0
   806de:	460e      	mov	r6, r1
   806e0:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   806e2:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   806e6:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   806ea:	d026      	beq.n	8073a <pio_configure_pin_group+0x62>
   806ec:	d806      	bhi.n	806fc <pio_configure_pin_group+0x24>
   806ee:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   806f2:	d00a      	beq.n	8070a <pio_configure_pin_group+0x32>
   806f4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   806f8:	d013      	beq.n	80722 <pio_configure_pin_group+0x4a>
   806fa:	e034      	b.n	80766 <pio_configure_pin_group+0x8e>
   806fc:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80700:	d01f      	beq.n	80742 <pio_configure_pin_group+0x6a>
   80702:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80706:	d01c      	beq.n	80742 <pio_configure_pin_group+0x6a>
   80708:	e02d      	b.n	80766 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8070a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8070e:	4632      	mov	r2, r6
   80710:	4b16      	ldr	r3, [pc, #88]	; (8076c <pio_configure_pin_group+0x94>)
   80712:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80714:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80718:	bf14      	ite	ne
   8071a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8071c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8071e:	2001      	movs	r0, #1
   80720:	e022      	b.n	80768 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80722:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80726:	4632      	mov	r2, r6
   80728:	4b10      	ldr	r3, [pc, #64]	; (8076c <pio_configure_pin_group+0x94>)
   8072a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8072c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80730:	bf14      	ite	ne
   80732:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80734:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80736:	2001      	movs	r0, #1
   80738:	e016      	b.n	80768 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8073a:	4b0d      	ldr	r3, [pc, #52]	; (80770 <pio_configure_pin_group+0x98>)
   8073c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8073e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80740:	e012      	b.n	80768 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80742:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80746:	f005 0301 	and.w	r3, r5, #1
   8074a:	9300      	str	r3, [sp, #0]
   8074c:	4638      	mov	r0, r7
   8074e:	4631      	mov	r1, r6
   80750:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80754:	bf14      	ite	ne
   80756:	2200      	movne	r2, #0
   80758:	2201      	moveq	r2, #1
   8075a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8075e:	4c05      	ldr	r4, [pc, #20]	; (80774 <pio_configure_pin_group+0x9c>)
   80760:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80762:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80764:	e000      	b.n	80768 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80766:	2000      	movs	r0, #0
	}

	return 1;
}
   80768:	b003      	add	sp, #12
   8076a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8076c:	00080561 	.word	0x00080561
   80770:	000805a1 	.word	0x000805a1
   80774:	000805d5 	.word	0x000805d5

00080778 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8077c:	4604      	mov	r4, r0
   8077e:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80780:	4b10      	ldr	r3, [pc, #64]	; (807c4 <pio_handler_process+0x4c>)
   80782:	4798      	blx	r3
   80784:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80786:	4620      	mov	r0, r4
   80788:	4b0f      	ldr	r3, [pc, #60]	; (807c8 <pio_handler_process+0x50>)
   8078a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8078c:	4005      	ands	r5, r0
   8078e:	d017      	beq.n	807c0 <pio_handler_process+0x48>
   80790:	4f0e      	ldr	r7, [pc, #56]	; (807cc <pio_handler_process+0x54>)
   80792:	f107 040c 	add.w	r4, r7, #12
   80796:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80798:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   8079c:	42b3      	cmp	r3, r6
   8079e:	d10a      	bne.n	807b6 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   807a0:	f854 1c08 	ldr.w	r1, [r4, #-8]
   807a4:	4229      	tst	r1, r5
   807a6:	d006      	beq.n	807b6 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   807a8:	6823      	ldr	r3, [r4, #0]
   807aa:	4630      	mov	r0, r6
   807ac:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   807ae:	f854 3c08 	ldr.w	r3, [r4, #-8]
   807b2:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   807b6:	42bc      	cmp	r4, r7
   807b8:	d002      	beq.n	807c0 <pio_handler_process+0x48>
   807ba:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   807bc:	2d00      	cmp	r5, #0
   807be:	d1eb      	bne.n	80798 <pio_handler_process+0x20>
   807c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   807c4:	000805fd 	.word	0x000805fd
   807c8:	00080601 	.word	0x00080601
   807cc:	200709a0 	.word	0x200709a0

000807d0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   807d0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   807d2:	4802      	ldr	r0, [pc, #8]	; (807dc <PIOA_Handler+0xc>)
   807d4:	210b      	movs	r1, #11
   807d6:	4b02      	ldr	r3, [pc, #8]	; (807e0 <PIOA_Handler+0x10>)
   807d8:	4798      	blx	r3
   807da:	bd08      	pop	{r3, pc}
   807dc:	400e0e00 	.word	0x400e0e00
   807e0:	00080779 	.word	0x00080779

000807e4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   807e4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   807e6:	4802      	ldr	r0, [pc, #8]	; (807f0 <PIOB_Handler+0xc>)
   807e8:	210c      	movs	r1, #12
   807ea:	4b02      	ldr	r3, [pc, #8]	; (807f4 <PIOB_Handler+0x10>)
   807ec:	4798      	blx	r3
   807ee:	bd08      	pop	{r3, pc}
   807f0:	400e1000 	.word	0x400e1000
   807f4:	00080779 	.word	0x00080779

000807f8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   807f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   807fa:	4802      	ldr	r0, [pc, #8]	; (80804 <PIOC_Handler+0xc>)
   807fc:	210d      	movs	r1, #13
   807fe:	4b02      	ldr	r3, [pc, #8]	; (80808 <PIOC_Handler+0x10>)
   80800:	4798      	blx	r3
   80802:	bd08      	pop	{r3, pc}
   80804:	400e1200 	.word	0x400e1200
   80808:	00080779 	.word	0x00080779

0008080c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   8080c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8080e:	4802      	ldr	r0, [pc, #8]	; (80818 <PIOD_Handler+0xc>)
   80810:	210e      	movs	r1, #14
   80812:	4b02      	ldr	r3, [pc, #8]	; (8081c <PIOD_Handler+0x10>)
   80814:	4798      	blx	r3
   80816:	bd08      	pop	{r3, pc}
   80818:	400e1400 	.word	0x400e1400
   8081c:	00080779 	.word	0x00080779

00080820 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80820:	4b17      	ldr	r3, [pc, #92]	; (80880 <pmc_switch_mck_to_pllack+0x60>)
   80822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80824:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   80828:	4310      	orrs	r0, r2
   8082a:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8082c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8082e:	f013 0f08 	tst.w	r3, #8
   80832:	d109      	bne.n	80848 <pmc_switch_mck_to_pllack+0x28>
   80834:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80838:	4911      	ldr	r1, [pc, #68]	; (80880 <pmc_switch_mck_to_pllack+0x60>)
   8083a:	e001      	b.n	80840 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8083c:	3b01      	subs	r3, #1
   8083e:	d019      	beq.n	80874 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80840:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80842:	f012 0f08 	tst.w	r2, #8
   80846:	d0f9      	beq.n	8083c <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80848:	4b0d      	ldr	r3, [pc, #52]	; (80880 <pmc_switch_mck_to_pllack+0x60>)
   8084a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8084c:	f022 0203 	bic.w	r2, r2, #3
   80850:	f042 0202 	orr.w	r2, r2, #2
   80854:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80856:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80858:	f010 0008 	ands.w	r0, r0, #8
   8085c:	d10c      	bne.n	80878 <pmc_switch_mck_to_pllack+0x58>
   8085e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80862:	4907      	ldr	r1, [pc, #28]	; (80880 <pmc_switch_mck_to_pllack+0x60>)
   80864:	e001      	b.n	8086a <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80866:	3b01      	subs	r3, #1
   80868:	d008      	beq.n	8087c <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8086a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8086c:	f012 0f08 	tst.w	r2, #8
   80870:	d0f9      	beq.n	80866 <pmc_switch_mck_to_pllack+0x46>
   80872:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80874:	2001      	movs	r0, #1
   80876:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80878:	2000      	movs	r0, #0
   8087a:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8087c:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8087e:	4770      	bx	lr
   80880:	400e0600 	.word	0x400e0600

00080884 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80884:	b138      	cbz	r0, 80896 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80886:	4911      	ldr	r1, [pc, #68]	; (808cc <pmc_switch_mainck_to_xtal+0x48>)
   80888:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8088a:	4a11      	ldr	r2, [pc, #68]	; (808d0 <pmc_switch_mainck_to_xtal+0x4c>)
   8088c:	401a      	ands	r2, r3
   8088e:	4b11      	ldr	r3, [pc, #68]	; (808d4 <pmc_switch_mainck_to_xtal+0x50>)
   80890:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80892:	620b      	str	r3, [r1, #32]
   80894:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80896:	4a0d      	ldr	r2, [pc, #52]	; (808cc <pmc_switch_mainck_to_xtal+0x48>)
   80898:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8089a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8089e:	f023 0303 	bic.w	r3, r3, #3
   808a2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   808a6:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   808aa:	0209      	lsls	r1, r1, #8
   808ac:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   808ae:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   808b0:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   808b2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   808b4:	f013 0f01 	tst.w	r3, #1
   808b8:	d0fb      	beq.n	808b2 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   808ba:	4a04      	ldr	r2, [pc, #16]	; (808cc <pmc_switch_mainck_to_xtal+0x48>)
   808bc:	6a13      	ldr	r3, [r2, #32]
   808be:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   808c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   808c6:	6213      	str	r3, [r2, #32]
   808c8:	4770      	bx	lr
   808ca:	bf00      	nop
   808cc:	400e0600 	.word	0x400e0600
   808d0:	fec8fffc 	.word	0xfec8fffc
   808d4:	01370002 	.word	0x01370002

000808d8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   808d8:	4b02      	ldr	r3, [pc, #8]	; (808e4 <pmc_osc_is_ready_mainck+0xc>)
   808da:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   808dc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   808e0:	4770      	bx	lr
   808e2:	bf00      	nop
   808e4:	400e0600 	.word	0x400e0600

000808e8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   808e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   808ec:	4b01      	ldr	r3, [pc, #4]	; (808f4 <pmc_disable_pllack+0xc>)
   808ee:	629a      	str	r2, [r3, #40]	; 0x28
   808f0:	4770      	bx	lr
   808f2:	bf00      	nop
   808f4:	400e0600 	.word	0x400e0600

000808f8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   808f8:	4b02      	ldr	r3, [pc, #8]	; (80904 <pmc_is_locked_pllack+0xc>)
   808fa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   808fc:	f000 0002 	and.w	r0, r0, #2
   80900:	4770      	bx	lr
   80902:	bf00      	nop
   80904:	400e0600 	.word	0x400e0600

00080908 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80908:	282c      	cmp	r0, #44	; 0x2c
   8090a:	d820      	bhi.n	8094e <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   8090c:	281f      	cmp	r0, #31
   8090e:	d80d      	bhi.n	8092c <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80910:	4b12      	ldr	r3, [pc, #72]	; (8095c <pmc_enable_periph_clk+0x54>)
   80912:	699a      	ldr	r2, [r3, #24]
   80914:	2301      	movs	r3, #1
   80916:	4083      	lsls	r3, r0
   80918:	401a      	ands	r2, r3
   8091a:	4293      	cmp	r3, r2
   8091c:	d019      	beq.n	80952 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   8091e:	2301      	movs	r3, #1
   80920:	fa03 f000 	lsl.w	r0, r3, r0
   80924:	4b0d      	ldr	r3, [pc, #52]	; (8095c <pmc_enable_periph_clk+0x54>)
   80926:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80928:	2000      	movs	r0, #0
   8092a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8092c:	4b0b      	ldr	r3, [pc, #44]	; (8095c <pmc_enable_periph_clk+0x54>)
   8092e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   80932:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80934:	2301      	movs	r3, #1
   80936:	4083      	lsls	r3, r0
   80938:	401a      	ands	r2, r3
   8093a:	4293      	cmp	r3, r2
   8093c:	d00b      	beq.n	80956 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   8093e:	2301      	movs	r3, #1
   80940:	fa03 f000 	lsl.w	r0, r3, r0
   80944:	4b05      	ldr	r3, [pc, #20]	; (8095c <pmc_enable_periph_clk+0x54>)
   80946:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   8094a:	2000      	movs	r0, #0
   8094c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8094e:	2001      	movs	r0, #1
   80950:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80952:	2000      	movs	r0, #0
   80954:	4770      	bx	lr
   80956:	2000      	movs	r0, #0
}
   80958:	4770      	bx	lr
   8095a:	bf00      	nop
   8095c:	400e0600 	.word	0x400e0600

00080960 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80960:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80962:	0189      	lsls	r1, r1, #6
   80964:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80966:	2402      	movs	r4, #2
   80968:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   8096a:	f04f 31ff 	mov.w	r1, #4294967295
   8096e:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80970:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80972:	605a      	str	r2, [r3, #4]
}
   80974:	f85d 4b04 	ldr.w	r4, [sp], #4
   80978:	4770      	bx	lr
   8097a:	bf00      	nop

0008097c <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   8097c:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   80980:	4770      	bx	lr
   80982:	bf00      	nop

00080984 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80984:	0189      	lsls	r1, r1, #6
   80986:	2305      	movs	r3, #5
   80988:	5043      	str	r3, [r0, r1]
   8098a:	4770      	bx	lr

0008098c <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   8098c:	0189      	lsls	r1, r1, #6
   8098e:	2302      	movs	r3, #2
   80990:	5043      	str	r3, [r0, r1]
   80992:	4770      	bx	lr

00080994 <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   80994:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80998:	6908      	ldr	r0, [r1, #16]
}
   8099a:	4770      	bx	lr

0008099c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8099c:	6943      	ldr	r3, [r0, #20]
   8099e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   809a2:	bf1d      	ittte	ne
   809a4:	6983      	ldrne	r3, [r0, #24]
   809a6:	700b      	strbne	r3, [r1, #0]
	return 0;
   809a8:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   809aa:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   809ac:	4770      	bx	lr
   809ae:	bf00      	nop

000809b0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   809b0:	6943      	ldr	r3, [r0, #20]
   809b2:	f013 0f01 	tst.w	r3, #1
   809b6:	d005      	beq.n	809c4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   809b8:	6983      	ldr	r3, [r0, #24]
   809ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
   809be:	600b      	str	r3, [r1, #0]

	return 0;
   809c0:	2000      	movs	r0, #0
   809c2:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   809c4:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   809c6:	4770      	bx	lr

000809c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   809c8:	e7fe      	b.n	809c8 <Dummy_Handler>
   809ca:	bf00      	nop

000809cc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   809cc:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   809ce:	4b1e      	ldr	r3, [pc, #120]	; (80a48 <Reset_Handler+0x7c>)
   809d0:	4a1e      	ldr	r2, [pc, #120]	; (80a4c <Reset_Handler+0x80>)
   809d2:	429a      	cmp	r2, r3
   809d4:	d003      	beq.n	809de <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   809d6:	4b1e      	ldr	r3, [pc, #120]	; (80a50 <Reset_Handler+0x84>)
   809d8:	4a1b      	ldr	r2, [pc, #108]	; (80a48 <Reset_Handler+0x7c>)
   809da:	429a      	cmp	r2, r3
   809dc:	d304      	bcc.n	809e8 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   809de:	4b1d      	ldr	r3, [pc, #116]	; (80a54 <Reset_Handler+0x88>)
   809e0:	4a1d      	ldr	r2, [pc, #116]	; (80a58 <Reset_Handler+0x8c>)
   809e2:	429a      	cmp	r2, r3
   809e4:	d30f      	bcc.n	80a06 <Reset_Handler+0x3a>
   809e6:	e01a      	b.n	80a1e <Reset_Handler+0x52>
   809e8:	4b1c      	ldr	r3, [pc, #112]	; (80a5c <Reset_Handler+0x90>)
   809ea:	4c1d      	ldr	r4, [pc, #116]	; (80a60 <Reset_Handler+0x94>)
   809ec:	1ae4      	subs	r4, r4, r3
   809ee:	f024 0403 	bic.w	r4, r4, #3
   809f2:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   809f4:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   809f6:	4814      	ldr	r0, [pc, #80]	; (80a48 <Reset_Handler+0x7c>)
   809f8:	4914      	ldr	r1, [pc, #80]	; (80a4c <Reset_Handler+0x80>)
   809fa:	585a      	ldr	r2, [r3, r1]
   809fc:	501a      	str	r2, [r3, r0]
   809fe:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80a00:	42a3      	cmp	r3, r4
   80a02:	d1fa      	bne.n	809fa <Reset_Handler+0x2e>
   80a04:	e7eb      	b.n	809de <Reset_Handler+0x12>
   80a06:	4b17      	ldr	r3, [pc, #92]	; (80a64 <Reset_Handler+0x98>)
   80a08:	4917      	ldr	r1, [pc, #92]	; (80a68 <Reset_Handler+0x9c>)
   80a0a:	1ac9      	subs	r1, r1, r3
   80a0c:	f021 0103 	bic.w	r1, r1, #3
   80a10:	1d1a      	adds	r2, r3, #4
   80a12:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80a14:	2200      	movs	r2, #0
   80a16:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80a1a:	428b      	cmp	r3, r1
   80a1c:	d1fb      	bne.n	80a16 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80a1e:	4a13      	ldr	r2, [pc, #76]	; (80a6c <Reset_Handler+0xa0>)
   80a20:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80a24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80a28:	4911      	ldr	r1, [pc, #68]	; (80a70 <Reset_Handler+0xa4>)
   80a2a:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80a2c:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80a30:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80a34:	d203      	bcs.n	80a3e <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80a36:	688a      	ldr	r2, [r1, #8]
   80a38:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80a3c:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80a3e:	4b0d      	ldr	r3, [pc, #52]	; (80a74 <Reset_Handler+0xa8>)
   80a40:	4798      	blx	r3

	/* Branch to main function */
	main();
   80a42:	4b0d      	ldr	r3, [pc, #52]	; (80a78 <Reset_Handler+0xac>)
   80a44:	4798      	blx	r3
   80a46:	e7fe      	b.n	80a46 <Reset_Handler+0x7a>
   80a48:	20070000 	.word	0x20070000
   80a4c:	000835e8 	.word	0x000835e8
   80a50:	2007097c 	.word	0x2007097c
   80a54:	20078c98 	.word	0x20078c98
   80a58:	20070980 	.word	0x20070980
   80a5c:	20070004 	.word	0x20070004
   80a60:	2007097f 	.word	0x2007097f
   80a64:	2007097c 	.word	0x2007097c
   80a68:	20078c93 	.word	0x20078c93
   80a6c:	00080000 	.word	0x00080000
   80a70:	e000ed00 	.word	0xe000ed00
   80a74:	00082aad 	.word	0x00082aad
   80a78:	00082239 	.word	0x00082239

00080a7c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80a7c:	4b3e      	ldr	r3, [pc, #248]	; (80b78 <SystemCoreClockUpdate+0xfc>)
   80a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a80:	f003 0303 	and.w	r3, r3, #3
   80a84:	2b03      	cmp	r3, #3
   80a86:	d85f      	bhi.n	80b48 <SystemCoreClockUpdate+0xcc>
   80a88:	e8df f003 	tbb	[pc, r3]
   80a8c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80a90:	4b3a      	ldr	r3, [pc, #232]	; (80b7c <SystemCoreClockUpdate+0x100>)
   80a92:	695b      	ldr	r3, [r3, #20]
   80a94:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80a98:	bf14      	ite	ne
   80a9a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80a9e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80aa2:	4b37      	ldr	r3, [pc, #220]	; (80b80 <SystemCoreClockUpdate+0x104>)
   80aa4:	601a      	str	r2, [r3, #0]
   80aa6:	e04f      	b.n	80b48 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80aa8:	4b33      	ldr	r3, [pc, #204]	; (80b78 <SystemCoreClockUpdate+0xfc>)
   80aaa:	6a1b      	ldr	r3, [r3, #32]
   80aac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80ab0:	d003      	beq.n	80aba <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80ab2:	4a34      	ldr	r2, [pc, #208]	; (80b84 <SystemCoreClockUpdate+0x108>)
   80ab4:	4b32      	ldr	r3, [pc, #200]	; (80b80 <SystemCoreClockUpdate+0x104>)
   80ab6:	601a      	str	r2, [r3, #0]
   80ab8:	e046      	b.n	80b48 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80aba:	4a33      	ldr	r2, [pc, #204]	; (80b88 <SystemCoreClockUpdate+0x10c>)
   80abc:	4b30      	ldr	r3, [pc, #192]	; (80b80 <SystemCoreClockUpdate+0x104>)
   80abe:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80ac0:	4b2d      	ldr	r3, [pc, #180]	; (80b78 <SystemCoreClockUpdate+0xfc>)
   80ac2:	6a1b      	ldr	r3, [r3, #32]
   80ac4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ac8:	2b10      	cmp	r3, #16
   80aca:	d002      	beq.n	80ad2 <SystemCoreClockUpdate+0x56>
   80acc:	2b20      	cmp	r3, #32
   80ace:	d004      	beq.n	80ada <SystemCoreClockUpdate+0x5e>
   80ad0:	e03a      	b.n	80b48 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80ad2:	4a2e      	ldr	r2, [pc, #184]	; (80b8c <SystemCoreClockUpdate+0x110>)
   80ad4:	4b2a      	ldr	r3, [pc, #168]	; (80b80 <SystemCoreClockUpdate+0x104>)
   80ad6:	601a      	str	r2, [r3, #0]
				break;
   80ad8:	e036      	b.n	80b48 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80ada:	4a2a      	ldr	r2, [pc, #168]	; (80b84 <SystemCoreClockUpdate+0x108>)
   80adc:	4b28      	ldr	r3, [pc, #160]	; (80b80 <SystemCoreClockUpdate+0x104>)
   80ade:	601a      	str	r2, [r3, #0]
				break;
   80ae0:	e032      	b.n	80b48 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80ae2:	4b25      	ldr	r3, [pc, #148]	; (80b78 <SystemCoreClockUpdate+0xfc>)
   80ae4:	6a1b      	ldr	r3, [r3, #32]
   80ae6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80aea:	d003      	beq.n	80af4 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80aec:	4a25      	ldr	r2, [pc, #148]	; (80b84 <SystemCoreClockUpdate+0x108>)
   80aee:	4b24      	ldr	r3, [pc, #144]	; (80b80 <SystemCoreClockUpdate+0x104>)
   80af0:	601a      	str	r2, [r3, #0]
   80af2:	e012      	b.n	80b1a <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80af4:	4a24      	ldr	r2, [pc, #144]	; (80b88 <SystemCoreClockUpdate+0x10c>)
   80af6:	4b22      	ldr	r3, [pc, #136]	; (80b80 <SystemCoreClockUpdate+0x104>)
   80af8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80afa:	4b1f      	ldr	r3, [pc, #124]	; (80b78 <SystemCoreClockUpdate+0xfc>)
   80afc:	6a1b      	ldr	r3, [r3, #32]
   80afe:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b02:	2b10      	cmp	r3, #16
   80b04:	d002      	beq.n	80b0c <SystemCoreClockUpdate+0x90>
   80b06:	2b20      	cmp	r3, #32
   80b08:	d004      	beq.n	80b14 <SystemCoreClockUpdate+0x98>
   80b0a:	e006      	b.n	80b1a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80b0c:	4a1f      	ldr	r2, [pc, #124]	; (80b8c <SystemCoreClockUpdate+0x110>)
   80b0e:	4b1c      	ldr	r3, [pc, #112]	; (80b80 <SystemCoreClockUpdate+0x104>)
   80b10:	601a      	str	r2, [r3, #0]
				break;
   80b12:	e002      	b.n	80b1a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80b14:	4a1b      	ldr	r2, [pc, #108]	; (80b84 <SystemCoreClockUpdate+0x108>)
   80b16:	4b1a      	ldr	r3, [pc, #104]	; (80b80 <SystemCoreClockUpdate+0x104>)
   80b18:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80b1a:	4b17      	ldr	r3, [pc, #92]	; (80b78 <SystemCoreClockUpdate+0xfc>)
   80b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b1e:	f003 0303 	and.w	r3, r3, #3
   80b22:	2b02      	cmp	r3, #2
   80b24:	d10d      	bne.n	80b42 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80b26:	4b14      	ldr	r3, [pc, #80]	; (80b78 <SystemCoreClockUpdate+0xfc>)
   80b28:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80b2a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80b2c:	4b14      	ldr	r3, [pc, #80]	; (80b80 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80b2e:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80b32:	681a      	ldr	r2, [r3, #0]
   80b34:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80b38:	b2c9      	uxtb	r1, r1
   80b3a:	fbb2 f2f1 	udiv	r2, r2, r1
   80b3e:	601a      	str	r2, [r3, #0]
   80b40:	e002      	b.n	80b48 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80b42:	4a13      	ldr	r2, [pc, #76]	; (80b90 <SystemCoreClockUpdate+0x114>)
   80b44:	4b0e      	ldr	r3, [pc, #56]	; (80b80 <SystemCoreClockUpdate+0x104>)
   80b46:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80b48:	4b0b      	ldr	r3, [pc, #44]	; (80b78 <SystemCoreClockUpdate+0xfc>)
   80b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b50:	2b70      	cmp	r3, #112	; 0x70
   80b52:	d107      	bne.n	80b64 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80b54:	4b0a      	ldr	r3, [pc, #40]	; (80b80 <SystemCoreClockUpdate+0x104>)
   80b56:	681a      	ldr	r2, [r3, #0]
   80b58:	490e      	ldr	r1, [pc, #56]	; (80b94 <SystemCoreClockUpdate+0x118>)
   80b5a:	fba1 0202 	umull	r0, r2, r1, r2
   80b5e:	0852      	lsrs	r2, r2, #1
   80b60:	601a      	str	r2, [r3, #0]
   80b62:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80b64:	4b04      	ldr	r3, [pc, #16]	; (80b78 <SystemCoreClockUpdate+0xfc>)
   80b66:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80b68:	4b05      	ldr	r3, [pc, #20]	; (80b80 <SystemCoreClockUpdate+0x104>)
   80b6a:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80b6e:	681a      	ldr	r2, [r3, #0]
   80b70:	40ca      	lsrs	r2, r1
   80b72:	601a      	str	r2, [r3, #0]
   80b74:	4770      	bx	lr
   80b76:	bf00      	nop
   80b78:	400e0600 	.word	0x400e0600
   80b7c:	400e1a10 	.word	0x400e1a10
   80b80:	20070130 	.word	0x20070130
   80b84:	00b71b00 	.word	0x00b71b00
   80b88:	003d0900 	.word	0x003d0900
   80b8c:	007a1200 	.word	0x007a1200
   80b90:	0e4e1c00 	.word	0x0e4e1c00
   80b94:	aaaaaaab 	.word	0xaaaaaaab

00080b98 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80b98:	4b09      	ldr	r3, [pc, #36]	; (80bc0 <_sbrk+0x28>)
   80b9a:	681b      	ldr	r3, [r3, #0]
   80b9c:	b913      	cbnz	r3, 80ba4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80b9e:	4a09      	ldr	r2, [pc, #36]	; (80bc4 <_sbrk+0x2c>)
   80ba0:	4b07      	ldr	r3, [pc, #28]	; (80bc0 <_sbrk+0x28>)
   80ba2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80ba4:	4b06      	ldr	r3, [pc, #24]	; (80bc0 <_sbrk+0x28>)
   80ba6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80ba8:	181a      	adds	r2, r3, r0
   80baa:	4907      	ldr	r1, [pc, #28]	; (80bc8 <_sbrk+0x30>)
   80bac:	4291      	cmp	r1, r2
   80bae:	db04      	blt.n	80bba <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80bb0:	4610      	mov	r0, r2
   80bb2:	4a03      	ldr	r2, [pc, #12]	; (80bc0 <_sbrk+0x28>)
   80bb4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80bb6:	4618      	mov	r0, r3
   80bb8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80bba:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80bbe:	4770      	bx	lr
   80bc0:	20070a10 	.word	0x20070a10
   80bc4:	2007ac98 	.word	0x2007ac98
   80bc8:	20087ffc 	.word	0x20087ffc

00080bcc <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80bcc:	f100 0308 	add.w	r3, r0, #8
   80bd0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80bd6:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80bd8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   80bda:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80bdc:	2300      	movs	r3, #0
   80bde:	6003      	str	r3, [r0, #0]
   80be0:	4770      	bx	lr
   80be2:	bf00      	nop

00080be4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80be4:	2300      	movs	r3, #0
   80be6:	6103      	str	r3, [r0, #16]
   80be8:	4770      	bx	lr
   80bea:	bf00      	nop

00080bec <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80bec:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80bee:	685a      	ldr	r2, [r3, #4]
   80bf0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80bf2:	6842      	ldr	r2, [r0, #4]
   80bf4:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80bf6:	685a      	ldr	r2, [r3, #4]
   80bf8:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80bfa:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80bfc:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80bfe:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80c00:	6803      	ldr	r3, [r0, #0]
   80c02:	3301      	adds	r3, #1
   80c04:	6003      	str	r3, [r0, #0]
   80c06:	4770      	bx	lr

00080c08 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   80c08:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   80c0a:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80c10:	429c      	cmp	r4, r3
   80c12:	d101      	bne.n	80c18 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   80c14:	6903      	ldr	r3, [r0, #16]
   80c16:	e00c      	b.n	80c32 <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80c18:	f100 0308 	add.w	r3, r0, #8
   80c1c:	68c2      	ldr	r2, [r0, #12]
   80c1e:	8812      	ldrh	r2, [r2, #0]
   80c20:	b292      	uxth	r2, r2
   80c22:	4294      	cmp	r4, r2
   80c24:	d305      	bcc.n	80c32 <vListInsert+0x2a>
   80c26:	685b      	ldr	r3, [r3, #4]
   80c28:	685a      	ldr	r2, [r3, #4]
   80c2a:	8812      	ldrh	r2, [r2, #0]
   80c2c:	b292      	uxth	r2, r2
   80c2e:	4294      	cmp	r4, r2
   80c30:	d2f9      	bcs.n	80c26 <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80c32:	685a      	ldr	r2, [r3, #4]
   80c34:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80c36:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   80c38:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80c3a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80c3c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80c3e:	6803      	ldr	r3, [r0, #0]
   80c40:	3301      	adds	r3, #1
   80c42:	6003      	str	r3, [r0, #0]
}
   80c44:	f85d 4b04 	ldr.w	r4, [sp], #4
   80c48:	4770      	bx	lr
   80c4a:	bf00      	nop

00080c4c <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80c4c:	6843      	ldr	r3, [r0, #4]
   80c4e:	6882      	ldr	r2, [r0, #8]
   80c50:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80c52:	6883      	ldr	r3, [r0, #8]
   80c54:	6842      	ldr	r2, [r0, #4]
   80c56:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80c58:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80c5a:	685a      	ldr	r2, [r3, #4]
   80c5c:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80c5e:	bf04      	itt	eq
   80c60:	6882      	ldreq	r2, [r0, #8]
   80c62:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80c64:	2200      	movs	r2, #0
   80c66:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80c68:	681a      	ldr	r2, [r3, #0]
   80c6a:	3a01      	subs	r2, #1
   80c6c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80c6e:	6818      	ldr	r0, [r3, #0]
}
   80c70:	4770      	bx	lr
   80c72:	bf00      	nop

00080c74 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80c74:	4803      	ldr	r0, [pc, #12]	; (80c84 <prvPortStartFirstTask+0x10>)
   80c76:	6800      	ldr	r0, [r0, #0]
   80c78:	6800      	ldr	r0, [r0, #0]
   80c7a:	f380 8808 	msr	MSP, r0
   80c7e:	b662      	cpsie	i
   80c80:	df00      	svc	0
   80c82:	bf00      	nop
   80c84:	e000ed08 	.word	0xe000ed08

00080c88 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80c88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80c8c:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80c90:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   80c94:	2300      	movs	r3, #0
   80c96:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   80c9a:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   80c9e:	3840      	subs	r0, #64	; 0x40
   80ca0:	4770      	bx	lr
   80ca2:	bf00      	nop

00080ca4 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80ca4:	4b06      	ldr	r3, [pc, #24]	; (80cc0 <pxCurrentTCBConst2>)
   80ca6:	6819      	ldr	r1, [r3, #0]
   80ca8:	6808      	ldr	r0, [r1, #0]
   80caa:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80cae:	f380 8809 	msr	PSP, r0
   80cb2:	f04f 0000 	mov.w	r0, #0
   80cb6:	f380 8811 	msr	BASEPRI, r0
   80cba:	f04e 0e0d 	orr.w	lr, lr, #13
   80cbe:	4770      	bx	lr

00080cc0 <pxCurrentTCBConst2>:
   80cc0:	20078b40 	.word	0x20078b40

00080cc4 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80cc8:	4b01      	ldr	r3, [pc, #4]	; (80cd0 <vPortYieldFromISR+0xc>)
   80cca:	601a      	str	r2, [r3, #0]
   80ccc:	4770      	bx	lr
   80cce:	bf00      	nop
   80cd0:	e000ed04 	.word	0xe000ed04

00080cd4 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80cd4:	f3ef 8011 	mrs	r0, BASEPRI
   80cd8:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80cdc:	f381 8811 	msr	BASEPRI, r1
   80ce0:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80ce2:	2000      	movs	r0, #0

00080ce4 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   80ce4:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   80ce6:	4b03      	ldr	r3, [pc, #12]	; (80cf4 <vPortEnterCritical+0x10>)
   80ce8:	4798      	blx	r3
	uxCriticalNesting++;
   80cea:	4b03      	ldr	r3, [pc, #12]	; (80cf8 <vPortEnterCritical+0x14>)
   80cec:	681a      	ldr	r2, [r3, #0]
   80cee:	3201      	adds	r2, #1
   80cf0:	601a      	str	r2, [r3, #0]
   80cf2:	bd08      	pop	{r3, pc}
   80cf4:	00080cd5 	.word	0x00080cd5
   80cf8:	20070134 	.word	0x20070134

00080cfc <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80cfc:	f380 8811 	msr	BASEPRI, r0
   80d00:	4770      	bx	lr
   80d02:	bf00      	nop

00080d04 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   80d04:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   80d06:	4a04      	ldr	r2, [pc, #16]	; (80d18 <vPortExitCritical+0x14>)
   80d08:	6813      	ldr	r3, [r2, #0]
   80d0a:	3b01      	subs	r3, #1
   80d0c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   80d0e:	b913      	cbnz	r3, 80d16 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   80d10:	2000      	movs	r0, #0
   80d12:	4b02      	ldr	r3, [pc, #8]	; (80d1c <vPortExitCritical+0x18>)
   80d14:	4798      	blx	r3
   80d16:	bd08      	pop	{r3, pc}
   80d18:	20070134 	.word	0x20070134
   80d1c:	00080cfd 	.word	0x00080cfd

00080d20 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80d20:	f3ef 8009 	mrs	r0, PSP
   80d24:	4b0c      	ldr	r3, [pc, #48]	; (80d58 <pxCurrentTCBConst>)
   80d26:	681a      	ldr	r2, [r3, #0]
   80d28:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80d2c:	6010      	str	r0, [r2, #0]
   80d2e:	e92d 4008 	stmdb	sp!, {r3, lr}
   80d32:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80d36:	f380 8811 	msr	BASEPRI, r0
   80d3a:	f000 fec5 	bl	81ac8 <vTaskSwitchContext>
   80d3e:	f04f 0000 	mov.w	r0, #0
   80d42:	f380 8811 	msr	BASEPRI, r0
   80d46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80d4a:	6819      	ldr	r1, [r3, #0]
   80d4c:	6808      	ldr	r0, [r1, #0]
   80d4e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80d52:	f380 8809 	msr	PSP, r0
   80d56:	4770      	bx	lr

00080d58 <pxCurrentTCBConst>:
   80d58:	20078b40 	.word	0x20078b40

00080d5c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80d5c:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80d62:	4b05      	ldr	r3, [pc, #20]	; (80d78 <SysTick_Handler+0x1c>)
   80d64:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80d66:	4b05      	ldr	r3, [pc, #20]	; (80d7c <SysTick_Handler+0x20>)
   80d68:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80d6a:	4b05      	ldr	r3, [pc, #20]	; (80d80 <SysTick_Handler+0x24>)
   80d6c:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80d6e:	2000      	movs	r0, #0
   80d70:	4b04      	ldr	r3, [pc, #16]	; (80d84 <SysTick_Handler+0x28>)
   80d72:	4798      	blx	r3
   80d74:	bd08      	pop	{r3, pc}
   80d76:	bf00      	nop
   80d78:	e000ed04 	.word	0xe000ed04
   80d7c:	00080cd5 	.word	0x00080cd5
   80d80:	00081779 	.word	0x00081779
   80d84:	00080cfd 	.word	0x00080cfd

00080d88 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   80d88:	4a03      	ldr	r2, [pc, #12]	; (80d98 <vPortSetupTimerInterrupt+0x10>)
   80d8a:	4b04      	ldr	r3, [pc, #16]	; (80d9c <vPortSetupTimerInterrupt+0x14>)
   80d8c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   80d8e:	2207      	movs	r2, #7
   80d90:	3b04      	subs	r3, #4
   80d92:	601a      	str	r2, [r3, #0]
   80d94:	4770      	bx	lr
   80d96:	bf00      	nop
   80d98:	0001481f 	.word	0x0001481f
   80d9c:	e000e014 	.word	0xe000e014

00080da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   80da0:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80da2:	4b09      	ldr	r3, [pc, #36]	; (80dc8 <xPortStartScheduler+0x28>)
   80da4:	681a      	ldr	r2, [r3, #0]
   80da6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   80daa:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80dac:	681a      	ldr	r2, [r3, #0]
   80dae:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   80db2:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   80db4:	4b05      	ldr	r3, [pc, #20]	; (80dcc <xPortStartScheduler+0x2c>)
   80db6:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   80db8:	2400      	movs	r4, #0
   80dba:	4b05      	ldr	r3, [pc, #20]	; (80dd0 <xPortStartScheduler+0x30>)
   80dbc:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   80dbe:	4b05      	ldr	r3, [pc, #20]	; (80dd4 <xPortStartScheduler+0x34>)
   80dc0:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   80dc2:	4620      	mov	r0, r4
   80dc4:	bd10      	pop	{r4, pc}
   80dc6:	bf00      	nop
   80dc8:	e000ed20 	.word	0xe000ed20
   80dcc:	00080d89 	.word	0x00080d89
   80dd0:	20070134 	.word	0x20070134
   80dd4:	00080c75 	.word	0x00080c75

00080dd8 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   80dd8:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   80dda:	4a13      	ldr	r2, [pc, #76]	; (80e28 <prvInsertBlockIntoFreeList+0x50>)
   80ddc:	6813      	ldr	r3, [r2, #0]
   80dde:	4283      	cmp	r3, r0
   80de0:	d201      	bcs.n	80de6 <prvInsertBlockIntoFreeList+0xe>
   80de2:	461a      	mov	r2, r3
   80de4:	e7fa      	b.n	80ddc <prvInsertBlockIntoFreeList+0x4>
   80de6:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   80de8:	6854      	ldr	r4, [r2, #4]
   80dea:	1915      	adds	r5, r2, r4
   80dec:	4285      	cmp	r5, r0
   80dee:	d103      	bne.n	80df8 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   80df0:	6868      	ldr	r0, [r5, #4]
   80df2:	4404      	add	r4, r0
   80df4:	6054      	str	r4, [r2, #4]
   80df6:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   80df8:	6842      	ldr	r2, [r0, #4]
   80dfa:	1884      	adds	r4, r0, r2
   80dfc:	42a3      	cmp	r3, r4
   80dfe:	d10c      	bne.n	80e1a <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   80e00:	4c0a      	ldr	r4, [pc, #40]	; (80e2c <prvInsertBlockIntoFreeList+0x54>)
   80e02:	6824      	ldr	r4, [r4, #0]
   80e04:	429c      	cmp	r4, r3
   80e06:	d006      	beq.n	80e16 <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80e08:	685b      	ldr	r3, [r3, #4]
   80e0a:	441a      	add	r2, r3
   80e0c:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   80e0e:	680b      	ldr	r3, [r1, #0]
   80e10:	681b      	ldr	r3, [r3, #0]
   80e12:	6003      	str	r3, [r0, #0]
   80e14:	e002      	b.n	80e1c <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   80e16:	6003      	str	r3, [r0, #0]
   80e18:	e000      	b.n	80e1c <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   80e1a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   80e1c:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   80e1e:	bf18      	it	ne
   80e20:	6008      	strne	r0, [r1, #0]
	}
}
   80e22:	bc30      	pop	{r4, r5}
   80e24:	4770      	bx	lr
   80e26:	bf00      	nop
   80e28:	20078a1c 	.word	0x20078a1c
   80e2c:	20078a18 	.word	0x20078a18

00080e30 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   80e30:	b538      	push	{r3, r4, r5, lr}
   80e32:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   80e34:	4b28      	ldr	r3, [pc, #160]	; (80ed8 <pvPortMalloc+0xa8>)
   80e36:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   80e38:	4b28      	ldr	r3, [pc, #160]	; (80edc <pvPortMalloc+0xac>)
   80e3a:	681b      	ldr	r3, [r3, #0]
   80e3c:	b99b      	cbnz	r3, 80e66 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   80e3e:	4a28      	ldr	r2, [pc, #160]	; (80ee0 <pvPortMalloc+0xb0>)
   80e40:	4b28      	ldr	r3, [pc, #160]	; (80ee4 <pvPortMalloc+0xb4>)
   80e42:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80e44:	2100      	movs	r1, #0
   80e46:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   80e48:	f647 72f0 	movw	r2, #32752	; 0x7ff0
   80e4c:	1898      	adds	r0, r3, r2
   80e4e:	4d23      	ldr	r5, [pc, #140]	; (80edc <pvPortMalloc+0xac>)
   80e50:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   80e52:	f647 75f4 	movw	r5, #32756	; 0x7ff4
   80e56:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80e58:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   80e5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   80e5c:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   80e5e:	4b22      	ldr	r3, [pc, #136]	; (80ee8 <pvPortMalloc+0xb8>)
   80e60:	681a      	ldr	r2, [r3, #0]
   80e62:	3a10      	subs	r2, #16
   80e64:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   80e66:	2c00      	cmp	r4, #0
   80e68:	d02d      	beq.n	80ec6 <pvPortMalloc+0x96>
		{
			xWantedSize += heapSTRUCT_SIZE;
   80e6a:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80e6e:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80e72:	bf1c      	itt	ne
   80e74:	f022 0207 	bicne.w	r2, r2, #7
   80e78:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   80e7a:	1e51      	subs	r1, r2, #1
   80e7c:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   80e80:	4299      	cmp	r1, r3
   80e82:	d822      	bhi.n	80eca <pvPortMalloc+0x9a>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   80e84:	4916      	ldr	r1, [pc, #88]	; (80ee0 <pvPortMalloc+0xb0>)
   80e86:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80e88:	6863      	ldr	r3, [r4, #4]
   80e8a:	429a      	cmp	r2, r3
   80e8c:	d904      	bls.n	80e98 <pvPortMalloc+0x68>
   80e8e:	6823      	ldr	r3, [r4, #0]
   80e90:	b113      	cbz	r3, 80e98 <pvPortMalloc+0x68>
   80e92:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   80e94:	461c      	mov	r4, r3
   80e96:	e7f7      	b.n	80e88 <pvPortMalloc+0x58>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   80e98:	4b10      	ldr	r3, [pc, #64]	; (80edc <pvPortMalloc+0xac>)
   80e9a:	681b      	ldr	r3, [r3, #0]
   80e9c:	429c      	cmp	r4, r3
   80e9e:	d016      	beq.n	80ece <pvPortMalloc+0x9e>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   80ea0:	680d      	ldr	r5, [r1, #0]
   80ea2:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80ea4:	6823      	ldr	r3, [r4, #0]
   80ea6:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   80ea8:	6863      	ldr	r3, [r4, #4]
   80eaa:	1a9b      	subs	r3, r3, r2
   80eac:	2b20      	cmp	r3, #32
   80eae:	d904      	bls.n	80eba <pvPortMalloc+0x8a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   80eb0:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80eb2:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80eb4:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80eb6:	4b0d      	ldr	r3, [pc, #52]	; (80eec <pvPortMalloc+0xbc>)
   80eb8:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   80eba:	4b0b      	ldr	r3, [pc, #44]	; (80ee8 <pvPortMalloc+0xb8>)
   80ebc:	681a      	ldr	r2, [r3, #0]
   80ebe:	6861      	ldr	r1, [r4, #4]
   80ec0:	1a52      	subs	r2, r2, r1
   80ec2:	601a      	str	r2, [r3, #0]
   80ec4:	e004      	b.n	80ed0 <pvPortMalloc+0xa0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   80ec6:	2500      	movs	r5, #0
   80ec8:	e002      	b.n	80ed0 <pvPortMalloc+0xa0>
   80eca:	2500      	movs	r5, #0
   80ecc:	e000      	b.n	80ed0 <pvPortMalloc+0xa0>
   80ece:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   80ed0:	4b07      	ldr	r3, [pc, #28]	; (80ef0 <pvPortMalloc+0xc0>)
   80ed2:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   80ed4:	4628      	mov	r0, r5
   80ed6:	bd38      	pop	{r3, r4, r5, pc}
   80ed8:	00081749 	.word	0x00081749
   80edc:	20078a18 	.word	0x20078a18
   80ee0:	20078a1c 	.word	0x20078a1c
   80ee4:	20070a18 	.word	0x20070a18
   80ee8:	20070138 	.word	0x20070138
   80eec:	00080dd9 	.word	0x00080dd9
   80ef0:	000818a5 	.word	0x000818a5

00080ef4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   80ef4:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   80ef6:	4604      	mov	r4, r0
   80ef8:	b168      	cbz	r0, 80f16 <vPortFree+0x22>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   80efa:	4b07      	ldr	r3, [pc, #28]	; (80f18 <vPortFree+0x24>)
   80efc:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   80efe:	4b07      	ldr	r3, [pc, #28]	; (80f1c <vPortFree+0x28>)
   80f00:	6819      	ldr	r1, [r3, #0]
   80f02:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   80f06:	440a      	add	r2, r1
   80f08:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   80f0a:	f1a4 0010 	sub.w	r0, r4, #16
   80f0e:	4b04      	ldr	r3, [pc, #16]	; (80f20 <vPortFree+0x2c>)
   80f10:	4798      	blx	r3
		}
		xTaskResumeAll();
   80f12:	4b04      	ldr	r3, [pc, #16]	; (80f24 <vPortFree+0x30>)
   80f14:	4798      	blx	r3
   80f16:	bd10      	pop	{r4, pc}
   80f18:	00081749 	.word	0x00081749
   80f1c:	20070138 	.word	0x20070138
   80f20:	00080dd9 	.word	0x00080dd9
   80f24:	000818a5 	.word	0x000818a5

00080f28 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80f28:	b510      	push	{r4, lr}
   80f2a:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80f2c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80f2e:	b93b      	cbnz	r3, 80f40 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80f30:	6803      	ldr	r3, [r0, #0]
   80f32:	bb1b      	cbnz	r3, 80f7c <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80f34:	6840      	ldr	r0, [r0, #4]
   80f36:	4b13      	ldr	r3, [pc, #76]	; (80f84 <prvCopyDataToQueue+0x5c>)
   80f38:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80f3a:	2300      	movs	r3, #0
   80f3c:	6063      	str	r3, [r4, #4]
   80f3e:	e01d      	b.n	80f7c <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   80f40:	b96a      	cbnz	r2, 80f5e <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80f42:	6880      	ldr	r0, [r0, #8]
   80f44:	461a      	mov	r2, r3
   80f46:	4b10      	ldr	r3, [pc, #64]	; (80f88 <prvCopyDataToQueue+0x60>)
   80f48:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80f4a:	68a2      	ldr	r2, [r4, #8]
   80f4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80f4e:	4413      	add	r3, r2
   80f50:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80f52:	6862      	ldr	r2, [r4, #4]
   80f54:	4293      	cmp	r3, r2
   80f56:	d311      	bcc.n	80f7c <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80f58:	6823      	ldr	r3, [r4, #0]
   80f5a:	60a3      	str	r3, [r4, #8]
   80f5c:	e00e      	b.n	80f7c <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80f5e:	68c0      	ldr	r0, [r0, #12]
   80f60:	461a      	mov	r2, r3
   80f62:	4b09      	ldr	r3, [pc, #36]	; (80f88 <prvCopyDataToQueue+0x60>)
   80f64:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80f66:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80f68:	4252      	negs	r2, r2
   80f6a:	68e3      	ldr	r3, [r4, #12]
   80f6c:	4413      	add	r3, r2
   80f6e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80f70:	6821      	ldr	r1, [r4, #0]
   80f72:	428b      	cmp	r3, r1
   80f74:	d202      	bcs.n	80f7c <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80f76:	6863      	ldr	r3, [r4, #4]
   80f78:	441a      	add	r2, r3
   80f7a:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80f7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80f7e:	3301      	adds	r3, #1
   80f80:	63a3      	str	r3, [r4, #56]	; 0x38
   80f82:	bd10      	pop	{r4, pc}
   80f84:	00081df1 	.word	0x00081df1
   80f88:	00082afd 	.word	0x00082afd

00080f8c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80f8c:	b538      	push	{r3, r4, r5, lr}
   80f8e:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80f90:	6805      	ldr	r5, [r0, #0]
   80f92:	b15d      	cbz	r5, 80fac <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80f94:	6c02      	ldr	r2, [r0, #64]	; 0x40
   80f96:	68c4      	ldr	r4, [r0, #12]
   80f98:	4414      	add	r4, r2
   80f9a:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80f9c:	6840      	ldr	r0, [r0, #4]
   80f9e:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80fa0:	bf28      	it	cs
   80fa2:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   80fa4:	4608      	mov	r0, r1
   80fa6:	68d9      	ldr	r1, [r3, #12]
   80fa8:	4b01      	ldr	r3, [pc, #4]	; (80fb0 <prvCopyDataFromQueue+0x24>)
   80faa:	4798      	blx	r3
   80fac:	bd38      	pop	{r3, r4, r5, pc}
   80fae:	bf00      	nop
   80fb0:	00082afd 	.word	0x00082afd

00080fb4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   80fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80fb6:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   80fb8:	4b1d      	ldr	r3, [pc, #116]	; (81030 <prvUnlockQueue+0x7c>)
   80fba:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80fbc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80fbe:	2b00      	cmp	r3, #0
   80fc0:	dd12      	ble.n	80fe8 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80fc4:	b183      	cbz	r3, 80fe8 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80fc6:	f104 0624 	add.w	r6, r4, #36	; 0x24
   80fca:	4d1a      	ldr	r5, [pc, #104]	; (81034 <prvUnlockQueue+0x80>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80fcc:	4f1a      	ldr	r7, [pc, #104]	; (81038 <prvUnlockQueue+0x84>)
   80fce:	e001      	b.n	80fd4 <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80fd2:	b14b      	cbz	r3, 80fe8 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80fd4:	4630      	mov	r0, r6
   80fd6:	47a8      	blx	r5
   80fd8:	b100      	cbz	r0, 80fdc <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80fda:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   80fdc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80fde:	3b01      	subs	r3, #1
   80fe0:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80fe2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80fe4:	2b00      	cmp	r3, #0
   80fe6:	dcf3      	bgt.n	80fd0 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   80fe8:	f04f 33ff 	mov.w	r3, #4294967295
   80fec:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   80fee:	4b13      	ldr	r3, [pc, #76]	; (8103c <prvUnlockQueue+0x88>)
   80ff0:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   80ff2:	4b0f      	ldr	r3, [pc, #60]	; (81030 <prvUnlockQueue+0x7c>)
   80ff4:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80ff6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80ff8:	2b00      	cmp	r3, #0
   80ffa:	dd12      	ble.n	81022 <prvUnlockQueue+0x6e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80ffc:	6923      	ldr	r3, [r4, #16]
   80ffe:	b183      	cbz	r3, 81022 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81000:	f104 0610 	add.w	r6, r4, #16
   81004:	4d0b      	ldr	r5, [pc, #44]	; (81034 <prvUnlockQueue+0x80>)
				{
					vTaskMissedYield();
   81006:	4f0c      	ldr	r7, [pc, #48]	; (81038 <prvUnlockQueue+0x84>)
   81008:	e001      	b.n	8100e <prvUnlockQueue+0x5a>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8100a:	6923      	ldr	r3, [r4, #16]
   8100c:	b14b      	cbz	r3, 81022 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8100e:	4630      	mov	r0, r6
   81010:	47a8      	blx	r5
   81012:	b100      	cbz	r0, 81016 <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
   81014:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   81016:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81018:	3b01      	subs	r3, #1
   8101a:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   8101c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8101e:	2b00      	cmp	r3, #0
   81020:	dcf3      	bgt.n	8100a <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   81022:	f04f 33ff 	mov.w	r3, #4294967295
   81026:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   81028:	4b04      	ldr	r3, [pc, #16]	; (8103c <prvUnlockQueue+0x88>)
   8102a:	4798      	blx	r3
   8102c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8102e:	bf00      	nop
   81030:	00080ce5 	.word	0x00080ce5
   81034:	00081c05 	.word	0x00081c05
   81038:	00081d3d 	.word	0x00081d3d
   8103c:	00080d05 	.word	0x00080d05

00081040 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   81040:	b538      	push	{r3, r4, r5, lr}
   81042:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   81044:	4604      	mov	r4, r0
   81046:	b918      	cbnz	r0, 81050 <xQueueGenericReset+0x10>
   81048:	4b16      	ldr	r3, [pc, #88]	; (810a4 <xQueueGenericReset+0x64>)
   8104a:	4798      	blx	r3
   8104c:	bf00      	nop
   8104e:	e7fd      	b.n	8104c <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
   81050:	4b15      	ldr	r3, [pc, #84]	; (810a8 <xQueueGenericReset+0x68>)
   81052:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   81054:	6823      	ldr	r3, [r4, #0]
   81056:	6c22      	ldr	r2, [r4, #64]	; 0x40
   81058:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   8105a:	fb00 f002 	mul.w	r0, r0, r2
   8105e:	1819      	adds	r1, r3, r0
   81060:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   81062:	2100      	movs	r1, #0
   81064:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   81066:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   81068:	1a82      	subs	r2, r0, r2
   8106a:	4413      	add	r3, r2
   8106c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   8106e:	f04f 33ff 	mov.w	r3, #4294967295
   81072:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   81074:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   81076:	b955      	cbnz	r5, 8108e <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81078:	6923      	ldr	r3, [r4, #16]
   8107a:	b17b      	cbz	r3, 8109c <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   8107c:	f104 0010 	add.w	r0, r4, #16
   81080:	4b0a      	ldr	r3, [pc, #40]	; (810ac <xQueueGenericReset+0x6c>)
   81082:	4798      	blx	r3
   81084:	2801      	cmp	r0, #1
   81086:	d109      	bne.n	8109c <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   81088:	4b09      	ldr	r3, [pc, #36]	; (810b0 <xQueueGenericReset+0x70>)
   8108a:	4798      	blx	r3
   8108c:	e006      	b.n	8109c <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   8108e:	f104 0010 	add.w	r0, r4, #16
   81092:	4d08      	ldr	r5, [pc, #32]	; (810b4 <xQueueGenericReset+0x74>)
   81094:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   81096:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8109a:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   8109c:	4b06      	ldr	r3, [pc, #24]	; (810b8 <xQueueGenericReset+0x78>)
   8109e:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   810a0:	2001      	movs	r0, #1
   810a2:	bd38      	pop	{r3, r4, r5, pc}
   810a4:	00080cd5 	.word	0x00080cd5
   810a8:	00080ce5 	.word	0x00080ce5
   810ac:	00081c05 	.word	0x00081c05
   810b0:	00080cc5 	.word	0x00080cc5
   810b4:	00080bcd 	.word	0x00080bcd
   810b8:	00080d05 	.word	0x00080d05

000810bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   810bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   810be:	460d      	mov	r5, r1
   810c0:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   810c2:	4606      	mov	r6, r0
   810c4:	b188      	cbz	r0, 810ea <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   810c6:	2050      	movs	r0, #80	; 0x50
   810c8:	4b0e      	ldr	r3, [pc, #56]	; (81104 <xQueueGenericCreate+0x48>)
   810ca:	4798      	blx	r3
		if( pxNewQueue != NULL )
   810cc:	4604      	mov	r4, r0
   810ce:	b160      	cbz	r0, 810ea <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   810d0:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   810d4:	3001      	adds	r0, #1
   810d6:	4b0b      	ldr	r3, [pc, #44]	; (81104 <xQueueGenericCreate+0x48>)
   810d8:	4798      	blx	r3
   810da:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   810dc:	b940      	cbnz	r0, 810f0 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   810de:	4620      	mov	r0, r4
   810e0:	4b09      	ldr	r3, [pc, #36]	; (81108 <xQueueGenericCreate+0x4c>)
   810e2:	4798      	blx	r3
   810e4:	e001      	b.n	810ea <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   810e6:	bf00      	nop
   810e8:	e7fd      	b.n	810e6 <xQueueGenericCreate+0x2a>
   810ea:	4b08      	ldr	r3, [pc, #32]	; (8110c <xQueueGenericCreate+0x50>)
   810ec:	4798      	blx	r3
   810ee:	e7fa      	b.n	810e6 <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   810f0:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   810f2:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   810f4:	4620      	mov	r0, r4
   810f6:	2101      	movs	r1, #1
   810f8:	4b05      	ldr	r3, [pc, #20]	; (81110 <xQueueGenericCreate+0x54>)
   810fa:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   810fc:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   81100:	4620      	mov	r0, r4
   81102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81104:	00080e31 	.word	0x00080e31
   81108:	00080ef5 	.word	0x00080ef5
   8110c:	00080cd5 	.word	0x00080cd5
   81110:	00081041 	.word	0x00081041

00081114 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81118:	b085      	sub	sp, #20
   8111a:	468a      	mov	sl, r1
   8111c:	469b      	mov	fp, r3
   8111e:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   81122:	4604      	mov	r4, r0
   81124:	b918      	cbnz	r0, 8112e <xQueueGenericSend+0x1a>
   81126:	4b38      	ldr	r3, [pc, #224]	; (81208 <xQueueGenericSend+0xf4>)
   81128:	4798      	blx	r3
   8112a:	bf00      	nop
   8112c:	e7fd      	b.n	8112a <xQueueGenericSend+0x16>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8112e:	b909      	cbnz	r1, 81134 <xQueueGenericSend+0x20>
   81130:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81132:	b91b      	cbnz	r3, 8113c <xQueueGenericSend+0x28>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81134:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81136:	4e35      	ldr	r6, [pc, #212]	; (8120c <xQueueGenericSend+0xf8>)
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81138:	4d35      	ldr	r5, [pc, #212]	; (81210 <xQueueGenericSend+0xfc>)
   8113a:	e003      	b.n	81144 <xQueueGenericSend+0x30>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8113c:	4b32      	ldr	r3, [pc, #200]	; (81208 <xQueueGenericSend+0xf4>)
   8113e:	4798      	blx	r3
   81140:	bf00      	nop
   81142:	e7fd      	b.n	81140 <xQueueGenericSend+0x2c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81144:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81146:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81148:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8114a:	429a      	cmp	r2, r3
   8114c:	d212      	bcs.n	81174 <xQueueGenericSend+0x60>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   8114e:	4620      	mov	r0, r4
   81150:	4651      	mov	r1, sl
   81152:	465a      	mov	r2, fp
   81154:	4b2f      	ldr	r3, [pc, #188]	; (81214 <xQueueGenericSend+0x100>)
   81156:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81158:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8115a:	b13b      	cbz	r3, 8116c <xQueueGenericSend+0x58>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   8115c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81160:	4b2d      	ldr	r3, [pc, #180]	; (81218 <xQueueGenericSend+0x104>)
   81162:	4798      	blx	r3
   81164:	2801      	cmp	r0, #1
   81166:	d101      	bne.n	8116c <xQueueGenericSend+0x58>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   81168:	4b2c      	ldr	r3, [pc, #176]	; (8121c <xQueueGenericSend+0x108>)
   8116a:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   8116c:	4b28      	ldr	r3, [pc, #160]	; (81210 <xQueueGenericSend+0xfc>)
   8116e:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   81170:	2001      	movs	r0, #1
   81172:	e046      	b.n	81202 <xQueueGenericSend+0xee>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81174:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   81178:	b91b      	cbnz	r3, 81182 <xQueueGenericSend+0x6e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   8117a:	4b25      	ldr	r3, [pc, #148]	; (81210 <xQueueGenericSend+0xfc>)
   8117c:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   8117e:	2000      	movs	r0, #0
   81180:	e03f      	b.n	81202 <xQueueGenericSend+0xee>
				}
				else if( xEntryTimeSet == pdFALSE )
   81182:	b91f      	cbnz	r7, 8118c <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81184:	a802      	add	r0, sp, #8
   81186:	4b26      	ldr	r3, [pc, #152]	; (81220 <xQueueGenericSend+0x10c>)
   81188:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   8118a:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   8118c:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   8118e:	4b25      	ldr	r3, [pc, #148]	; (81224 <xQueueGenericSend+0x110>)
   81190:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81192:	47b0      	blx	r6
   81194:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81196:	f1b3 3fff 	cmp.w	r3, #4294967295
   8119a:	bf04      	itt	eq
   8119c:	2300      	moveq	r3, #0
   8119e:	6463      	streq	r3, [r4, #68]	; 0x44
   811a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   811a2:	f1b3 3fff 	cmp.w	r3, #4294967295
   811a6:	bf04      	itt	eq
   811a8:	2300      	moveq	r3, #0
   811aa:	64a3      	streq	r3, [r4, #72]	; 0x48
   811ac:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   811ae:	a802      	add	r0, sp, #8
   811b0:	f10d 0106 	add.w	r1, sp, #6
   811b4:	4b1c      	ldr	r3, [pc, #112]	; (81228 <xQueueGenericSend+0x114>)
   811b6:	4798      	blx	r3
   811b8:	b9e8      	cbnz	r0, 811f6 <xQueueGenericSend+0xe2>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   811ba:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   811bc:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   811c0:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   811c4:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   811c6:	45c1      	cmp	r9, r8
   811c8:	d10f      	bne.n	811ea <xQueueGenericSend+0xd6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   811ca:	f104 0010 	add.w	r0, r4, #16
   811ce:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   811d2:	4b16      	ldr	r3, [pc, #88]	; (8122c <xQueueGenericSend+0x118>)
   811d4:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   811d6:	4620      	mov	r0, r4
   811d8:	4b15      	ldr	r3, [pc, #84]	; (81230 <xQueueGenericSend+0x11c>)
   811da:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   811dc:	4b15      	ldr	r3, [pc, #84]	; (81234 <xQueueGenericSend+0x120>)
   811de:	4798      	blx	r3
   811e0:	2800      	cmp	r0, #0
   811e2:	d1af      	bne.n	81144 <xQueueGenericSend+0x30>
				{
					portYIELD_WITHIN_API();
   811e4:	4b0d      	ldr	r3, [pc, #52]	; (8121c <xQueueGenericSend+0x108>)
   811e6:	4798      	blx	r3
   811e8:	e7ac      	b.n	81144 <xQueueGenericSend+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   811ea:	4620      	mov	r0, r4
   811ec:	4b10      	ldr	r3, [pc, #64]	; (81230 <xQueueGenericSend+0x11c>)
   811ee:	4798      	blx	r3
				( void ) xTaskResumeAll();
   811f0:	4b10      	ldr	r3, [pc, #64]	; (81234 <xQueueGenericSend+0x120>)
   811f2:	4798      	blx	r3
   811f4:	e7a6      	b.n	81144 <xQueueGenericSend+0x30>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   811f6:	4620      	mov	r0, r4
   811f8:	4b0d      	ldr	r3, [pc, #52]	; (81230 <xQueueGenericSend+0x11c>)
   811fa:	4798      	blx	r3
			( void ) xTaskResumeAll();
   811fc:	4b0d      	ldr	r3, [pc, #52]	; (81234 <xQueueGenericSend+0x120>)
   811fe:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   81200:	2000      	movs	r0, #0
		}
	}
}
   81202:	b005      	add	sp, #20
   81204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81208:	00080cd5 	.word	0x00080cd5
   8120c:	00080ce5 	.word	0x00080ce5
   81210:	00080d05 	.word	0x00080d05
   81214:	00080f29 	.word	0x00080f29
   81218:	00081c05 	.word	0x00081c05
   8121c:	00080cc5 	.word	0x00080cc5
   81220:	00081c89 	.word	0x00081c89
   81224:	00081749 	.word	0x00081749
   81228:	00081cb1 	.word	0x00081cb1
   8122c:	00081b59 	.word	0x00081b59
   81230:	00080fb5 	.word	0x00080fb5
   81234:	000818a5 	.word	0x000818a5

00081238 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   81238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8123c:	460e      	mov	r6, r1
   8123e:	4615      	mov	r5, r2
   81240:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   81242:	4604      	mov	r4, r0
   81244:	b918      	cbnz	r0, 8124e <xQueueGenericSendFromISR+0x16>
   81246:	4b1c      	ldr	r3, [pc, #112]	; (812b8 <xQueueGenericSendFromISR+0x80>)
   81248:	4798      	blx	r3
   8124a:	bf00      	nop
   8124c:	e7fd      	b.n	8124a <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8124e:	b929      	cbnz	r1, 8125c <xQueueGenericSendFromISR+0x24>
   81250:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81252:	b11b      	cbz	r3, 8125c <xQueueGenericSendFromISR+0x24>
   81254:	4b18      	ldr	r3, [pc, #96]	; (812b8 <xQueueGenericSendFromISR+0x80>)
   81256:	4798      	blx	r3
   81258:	bf00      	nop
   8125a:	e7fd      	b.n	81258 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   8125c:	4b16      	ldr	r3, [pc, #88]	; (812b8 <xQueueGenericSendFromISR+0x80>)
   8125e:	4798      	blx	r3
   81260:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81262:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81264:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81266:	429a      	cmp	r2, r3
   81268:	d218      	bcs.n	8129c <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   8126a:	4620      	mov	r0, r4
   8126c:	4631      	mov	r1, r6
   8126e:	4642      	mov	r2, r8
   81270:	4b12      	ldr	r3, [pc, #72]	; (812bc <xQueueGenericSendFromISR+0x84>)
   81272:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   81274:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81276:	f1b3 3fff 	cmp.w	r3, #4294967295
   8127a:	d10a      	bne.n	81292 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8127c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8127e:	b17b      	cbz	r3, 812a0 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81280:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81284:	4b0e      	ldr	r3, [pc, #56]	; (812c0 <xQueueGenericSendFromISR+0x88>)
   81286:	4798      	blx	r3
   81288:	b160      	cbz	r0, 812a4 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   8128a:	b16d      	cbz	r5, 812a8 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   8128c:	2401      	movs	r4, #1
   8128e:	602c      	str	r4, [r5, #0]
   81290:	e00b      	b.n	812aa <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   81292:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81294:	3301      	adds	r3, #1
   81296:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   81298:	2401      	movs	r4, #1
   8129a:	e006      	b.n	812aa <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   8129c:	2400      	movs	r4, #0
   8129e:	e004      	b.n	812aa <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   812a0:	2401      	movs	r4, #1
   812a2:	e002      	b.n	812aa <xQueueGenericSendFromISR+0x72>
   812a4:	2401      	movs	r4, #1
   812a6:	e000      	b.n	812aa <xQueueGenericSendFromISR+0x72>
   812a8:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   812aa:	4638      	mov	r0, r7
   812ac:	4b05      	ldr	r3, [pc, #20]	; (812c4 <xQueueGenericSendFromISR+0x8c>)
   812ae:	4798      	blx	r3

	return xReturn;
}
   812b0:	4620      	mov	r0, r4
   812b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   812b6:	bf00      	nop
   812b8:	00080cd5 	.word	0x00080cd5
   812bc:	00080f29 	.word	0x00080f29
   812c0:	00081c05 	.word	0x00081c05
   812c4:	00080cfd 	.word	0x00080cfd

000812c8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   812c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   812cc:	b085      	sub	sp, #20
   812ce:	4689      	mov	r9, r1
   812d0:	469a      	mov	sl, r3
   812d2:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   812d6:	4604      	mov	r4, r0
   812d8:	b918      	cbnz	r0, 812e2 <xQueueGenericReceive+0x1a>
   812da:	4b46      	ldr	r3, [pc, #280]	; (813f4 <xQueueGenericReceive+0x12c>)
   812dc:	4798      	blx	r3
   812de:	bf00      	nop
   812e0:	e7fd      	b.n	812de <xQueueGenericReceive+0x16>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   812e2:	b909      	cbnz	r1, 812e8 <xQueueGenericReceive+0x20>
   812e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
   812e6:	b92b      	cbnz	r3, 812f4 <xQueueGenericReceive+0x2c>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   812e8:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   812ea:	4e43      	ldr	r6, [pc, #268]	; (813f8 <xQueueGenericReceive+0x130>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   812ec:	f8df b138 	ldr.w	fp, [pc, #312]	; 81428 <xQueueGenericReceive+0x160>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   812f0:	4d42      	ldr	r5, [pc, #264]	; (813fc <xQueueGenericReceive+0x134>)
   812f2:	e003      	b.n	812fc <xQueueGenericReceive+0x34>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   812f4:	4b3f      	ldr	r3, [pc, #252]	; (813f4 <xQueueGenericReceive+0x12c>)
   812f6:	4798      	blx	r3
   812f8:	bf00      	nop
   812fa:	e7fd      	b.n	812f8 <xQueueGenericReceive+0x30>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   812fc:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   812fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81300:	2b00      	cmp	r3, #0
   81302:	d028      	beq.n	81356 <xQueueGenericReceive+0x8e>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   81304:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   81306:	4620      	mov	r0, r4
   81308:	4649      	mov	r1, r9
   8130a:	4b3d      	ldr	r3, [pc, #244]	; (81400 <xQueueGenericReceive+0x138>)
   8130c:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   8130e:	f1ba 0f00 	cmp.w	sl, #0
   81312:	d112      	bne.n	8133a <xQueueGenericReceive+0x72>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   81314:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81316:	3b01      	subs	r3, #1
   81318:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8131a:	6823      	ldr	r3, [r4, #0]
   8131c:	b913      	cbnz	r3, 81324 <xQueueGenericReceive+0x5c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   8131e:	4b39      	ldr	r3, [pc, #228]	; (81404 <xQueueGenericReceive+0x13c>)
   81320:	4798      	blx	r3
   81322:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81324:	6923      	ldr	r3, [r4, #16]
   81326:	b193      	cbz	r3, 8134e <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81328:	f104 0010 	add.w	r0, r4, #16
   8132c:	4b36      	ldr	r3, [pc, #216]	; (81408 <xQueueGenericReceive+0x140>)
   8132e:	4798      	blx	r3
   81330:	2801      	cmp	r0, #1
   81332:	d10c      	bne.n	8134e <xQueueGenericReceive+0x86>
						{
							portYIELD_WITHIN_API();
   81334:	4b35      	ldr	r3, [pc, #212]	; (8140c <xQueueGenericReceive+0x144>)
   81336:	4798      	blx	r3
   81338:	e009      	b.n	8134e <xQueueGenericReceive+0x86>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   8133a:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8133c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8133e:	b133      	cbz	r3, 8134e <xQueueGenericReceive+0x86>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81340:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81344:	4b30      	ldr	r3, [pc, #192]	; (81408 <xQueueGenericReceive+0x140>)
   81346:	4798      	blx	r3
   81348:	b108      	cbz	r0, 8134e <xQueueGenericReceive+0x86>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   8134a:	4b30      	ldr	r3, [pc, #192]	; (8140c <xQueueGenericReceive+0x144>)
   8134c:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   8134e:	4b2b      	ldr	r3, [pc, #172]	; (813fc <xQueueGenericReceive+0x134>)
   81350:	4798      	blx	r3
				return pdPASS;
   81352:	2001      	movs	r0, #1
   81354:	e04b      	b.n	813ee <xQueueGenericReceive+0x126>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81356:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   8135a:	b91b      	cbnz	r3, 81364 <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   8135c:	4b27      	ldr	r3, [pc, #156]	; (813fc <xQueueGenericReceive+0x134>)
   8135e:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   81360:	2000      	movs	r0, #0
   81362:	e044      	b.n	813ee <xQueueGenericReceive+0x126>
				}
				else if( xEntryTimeSet == pdFALSE )
   81364:	b917      	cbnz	r7, 8136c <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81366:	a802      	add	r0, sp, #8
   81368:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   8136a:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   8136c:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   8136e:	4b28      	ldr	r3, [pc, #160]	; (81410 <xQueueGenericReceive+0x148>)
   81370:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81372:	47b0      	blx	r6
   81374:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81376:	f1b3 3fff 	cmp.w	r3, #4294967295
   8137a:	bf04      	itt	eq
   8137c:	2300      	moveq	r3, #0
   8137e:	6463      	streq	r3, [r4, #68]	; 0x44
   81380:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81382:	f1b3 3fff 	cmp.w	r3, #4294967295
   81386:	bf04      	itt	eq
   81388:	2300      	moveq	r3, #0
   8138a:	64a3      	streq	r3, [r4, #72]	; 0x48
   8138c:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   8138e:	a802      	add	r0, sp, #8
   81390:	f10d 0106 	add.w	r1, sp, #6
   81394:	4b1f      	ldr	r3, [pc, #124]	; (81414 <xQueueGenericReceive+0x14c>)
   81396:	4798      	blx	r3
   81398:	bb18      	cbnz	r0, 813e2 <xQueueGenericReceive+0x11a>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   8139a:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   8139c:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   813a0:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   813a2:	f1b8 0f00 	cmp.w	r8, #0
   813a6:	d116      	bne.n	813d6 <xQueueGenericReceive+0x10e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   813a8:	6823      	ldr	r3, [r4, #0]
   813aa:	b923      	cbnz	r3, 813b6 <xQueueGenericReceive+0xee>
					{
						portENTER_CRITICAL();
   813ac:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   813ae:	6860      	ldr	r0, [r4, #4]
   813b0:	4b19      	ldr	r3, [pc, #100]	; (81418 <xQueueGenericReceive+0x150>)
   813b2:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   813b4:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   813b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   813ba:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   813be:	4b17      	ldr	r3, [pc, #92]	; (8141c <xQueueGenericReceive+0x154>)
   813c0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   813c2:	4620      	mov	r0, r4
   813c4:	4b16      	ldr	r3, [pc, #88]	; (81420 <xQueueGenericReceive+0x158>)
   813c6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   813c8:	4b16      	ldr	r3, [pc, #88]	; (81424 <xQueueGenericReceive+0x15c>)
   813ca:	4798      	blx	r3
   813cc:	2800      	cmp	r0, #0
   813ce:	d195      	bne.n	812fc <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
   813d0:	4b0e      	ldr	r3, [pc, #56]	; (8140c <xQueueGenericReceive+0x144>)
   813d2:	4798      	blx	r3
   813d4:	e792      	b.n	812fc <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   813d6:	4620      	mov	r0, r4
   813d8:	4b11      	ldr	r3, [pc, #68]	; (81420 <xQueueGenericReceive+0x158>)
   813da:	4798      	blx	r3
				( void ) xTaskResumeAll();
   813dc:	4b11      	ldr	r3, [pc, #68]	; (81424 <xQueueGenericReceive+0x15c>)
   813de:	4798      	blx	r3
   813e0:	e78c      	b.n	812fc <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   813e2:	4620      	mov	r0, r4
   813e4:	4b0e      	ldr	r3, [pc, #56]	; (81420 <xQueueGenericReceive+0x158>)
   813e6:	4798      	blx	r3
			( void ) xTaskResumeAll();
   813e8:	4b0e      	ldr	r3, [pc, #56]	; (81424 <xQueueGenericReceive+0x15c>)
   813ea:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   813ec:	2000      	movs	r0, #0
		}
	}
}
   813ee:	b005      	add	sp, #20
   813f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   813f4:	00080cd5 	.word	0x00080cd5
   813f8:	00080ce5 	.word	0x00080ce5
   813fc:	00080d05 	.word	0x00080d05
   81400:	00080f8d 	.word	0x00080f8d
   81404:	00081d49 	.word	0x00081d49
   81408:	00081c05 	.word	0x00081c05
   8140c:	00080cc5 	.word	0x00080cc5
   81410:	00081749 	.word	0x00081749
   81414:	00081cb1 	.word	0x00081cb1
   81418:	00081d75 	.word	0x00081d75
   8141c:	00081b59 	.word	0x00081b59
   81420:	00080fb5 	.word	0x00080fb5
   81424:	000818a5 	.word	0x000818a5
   81428:	00081c89 	.word	0x00081c89

0008142c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   8142c:	b538      	push	{r3, r4, r5, lr}
   8142e:	4604      	mov	r4, r0
   81430:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   81432:	4b0d      	ldr	r3, [pc, #52]	; (81468 <vQueueWaitForMessageRestricted+0x3c>)
   81434:	4798      	blx	r3
   81436:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81438:	f1b3 3fff 	cmp.w	r3, #4294967295
   8143c:	bf04      	itt	eq
   8143e:	2300      	moveq	r3, #0
   81440:	6463      	streq	r3, [r4, #68]	; 0x44
   81442:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81444:	f1b3 3fff 	cmp.w	r3, #4294967295
   81448:	bf04      	itt	eq
   8144a:	2300      	moveq	r3, #0
   8144c:	64a3      	streq	r3, [r4, #72]	; 0x48
   8144e:	4b07      	ldr	r3, [pc, #28]	; (8146c <vQueueWaitForMessageRestricted+0x40>)
   81450:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   81452:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81454:	b923      	cbnz	r3, 81460 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81456:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8145a:	4629      	mov	r1, r5
   8145c:	4b04      	ldr	r3, [pc, #16]	; (81470 <vQueueWaitForMessageRestricted+0x44>)
   8145e:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   81460:	4620      	mov	r0, r4
   81462:	4b04      	ldr	r3, [pc, #16]	; (81474 <vQueueWaitForMessageRestricted+0x48>)
   81464:	4798      	blx	r3
   81466:	bd38      	pop	{r3, r4, r5, pc}
   81468:	00080ce5 	.word	0x00080ce5
   8146c:	00080d05 	.word	0x00080d05
   81470:	00081bbd 	.word	0x00081bbd
   81474:	00080fb5 	.word	0x00080fb5

00081478 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   81478:	b510      	push	{r4, lr}
   8147a:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   8147c:	4b0f      	ldr	r3, [pc, #60]	; (814bc <prvAddCurrentTaskToDelayedList+0x44>)
   8147e:	681b      	ldr	r3, [r3, #0]
   81480:	8098      	strh	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   81482:	4b0f      	ldr	r3, [pc, #60]	; (814c0 <prvAddCurrentTaskToDelayedList+0x48>)
   81484:	881b      	ldrh	r3, [r3, #0]
   81486:	b29b      	uxth	r3, r3
   81488:	4298      	cmp	r0, r3
   8148a:	d207      	bcs.n	8149c <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8148c:	4b0d      	ldr	r3, [pc, #52]	; (814c4 <prvAddCurrentTaskToDelayedList+0x4c>)
   8148e:	6818      	ldr	r0, [r3, #0]
   81490:	4b0a      	ldr	r3, [pc, #40]	; (814bc <prvAddCurrentTaskToDelayedList+0x44>)
   81492:	6819      	ldr	r1, [r3, #0]
   81494:	3104      	adds	r1, #4
   81496:	4b0c      	ldr	r3, [pc, #48]	; (814c8 <prvAddCurrentTaskToDelayedList+0x50>)
   81498:	4798      	blx	r3
   8149a:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8149c:	4b0b      	ldr	r3, [pc, #44]	; (814cc <prvAddCurrentTaskToDelayedList+0x54>)
   8149e:	6818      	ldr	r0, [r3, #0]
   814a0:	4b06      	ldr	r3, [pc, #24]	; (814bc <prvAddCurrentTaskToDelayedList+0x44>)
   814a2:	6819      	ldr	r1, [r3, #0]
   814a4:	3104      	adds	r1, #4
   814a6:	4b08      	ldr	r3, [pc, #32]	; (814c8 <prvAddCurrentTaskToDelayedList+0x50>)
   814a8:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   814aa:	4b09      	ldr	r3, [pc, #36]	; (814d0 <prvAddCurrentTaskToDelayedList+0x58>)
   814ac:	881b      	ldrh	r3, [r3, #0]
   814ae:	b29b      	uxth	r3, r3
   814b0:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   814b2:	bf3c      	itt	cc
   814b4:	4b06      	ldrcc	r3, [pc, #24]	; (814d0 <prvAddCurrentTaskToDelayedList+0x58>)
   814b6:	801c      	strhcc	r4, [r3, #0]
   814b8:	bd10      	pop	{r4, pc}
   814ba:	bf00      	nop
   814bc:	20078b40 	.word	0x20078b40
   814c0:	20078b5c 	.word	0x20078b5c
   814c4:	20078b60 	.word	0x20078b60
   814c8:	00080c09 	.word	0x00080c09
   814cc:	20078a3c 	.word	0x20078a3c
   814d0:	2007013c 	.word	0x2007013c

000814d4 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   814d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   814d8:	460e      	mov	r6, r1
   814da:	4617      	mov	r7, r2
   814dc:	469a      	mov	sl, r3
   814de:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   814e0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   814e4:	4681      	mov	r9, r0
   814e6:	b918      	cbnz	r0, 814f0 <xTaskGenericCreate+0x1c>
   814e8:	4b62      	ldr	r3, [pc, #392]	; (81674 <xTaskGenericCreate+0x1a0>)
   814ea:	4798      	blx	r3
   814ec:	bf00      	nop
   814ee:	e7fd      	b.n	814ec <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   814f0:	2d09      	cmp	r5, #9
   814f2:	d903      	bls.n	814fc <xTaskGenericCreate+0x28>
   814f4:	4b5f      	ldr	r3, [pc, #380]	; (81674 <xTaskGenericCreate+0x1a0>)
   814f6:	4798      	blx	r3
   814f8:	bf00      	nop
   814fa:	e7fd      	b.n	814f8 <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   814fc:	2050      	movs	r0, #80	; 0x50
   814fe:	4b5e      	ldr	r3, [pc, #376]	; (81678 <xTaskGenericCreate+0x1a4>)
   81500:	4798      	blx	r3

	if( pxNewTCB != NULL )
   81502:	4604      	mov	r4, r0
   81504:	2800      	cmp	r0, #0
   81506:	f000 80b1 	beq.w	8166c <xTaskGenericCreate+0x198>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   8150a:	f1b8 0f00 	cmp.w	r8, #0
   8150e:	f040 80a9 	bne.w	81664 <xTaskGenericCreate+0x190>
   81512:	00b8      	lsls	r0, r7, #2
   81514:	4b58      	ldr	r3, [pc, #352]	; (81678 <xTaskGenericCreate+0x1a4>)
   81516:	4798      	blx	r3
   81518:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   8151a:	b918      	cbnz	r0, 81524 <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   8151c:	4620      	mov	r0, r4
   8151e:	4b57      	ldr	r3, [pc, #348]	; (8167c <xTaskGenericCreate+0x1a8>)
   81520:	4798      	blx	r3
   81522:	e0a3      	b.n	8166c <xTaskGenericCreate+0x198>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   81524:	21a5      	movs	r1, #165	; 0xa5
   81526:	00ba      	lsls	r2, r7, #2
   81528:	4b55      	ldr	r3, [pc, #340]	; (81680 <xTaskGenericCreate+0x1ac>)
   8152a:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   8152c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   81530:	3f01      	subs	r7, #1
   81532:	6b23      	ldr	r3, [r4, #48]	; 0x30
   81534:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   81538:	f023 0b07 	bic.w	fp, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   8153c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   81540:	4631      	mov	r1, r6
   81542:	2210      	movs	r2, #16
   81544:	4b4f      	ldr	r3, [pc, #316]	; (81684 <xTaskGenericCreate+0x1b0>)
   81546:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   81548:	2300      	movs	r3, #0
   8154a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   8154e:	2d09      	cmp	r5, #9
   81550:	bf34      	ite	cc
   81552:	462e      	movcc	r6, r5
   81554:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   81556:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   81558:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   8155a:	1d27      	adds	r7, r4, #4
   8155c:	4638      	mov	r0, r7
   8155e:	f8df 8170 	ldr.w	r8, [pc, #368]	; 816d0 <xTaskGenericCreate+0x1fc>
   81562:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   81564:	f104 0018 	add.w	r0, r4, #24
   81568:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   8156a:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   8156c:	f1c6 060a 	rsb	r6, r6, #10
   81570:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   81572:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   81574:	4658      	mov	r0, fp
   81576:	4649      	mov	r1, r9
   81578:	4652      	mov	r2, sl
   8157a:	4b43      	ldr	r3, [pc, #268]	; (81688 <xTaskGenericCreate+0x1b4>)
   8157c:	4798      	blx	r3
   8157e:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   81580:	f010 0f07 	tst.w	r0, #7
   81584:	d003      	beq.n	8158e <xTaskGenericCreate+0xba>
   81586:	4b3b      	ldr	r3, [pc, #236]	; (81674 <xTaskGenericCreate+0x1a0>)
   81588:	4798      	blx	r3
   8158a:	bf00      	nop
   8158c:	e7fd      	b.n	8158a <xTaskGenericCreate+0xb6>

		if( ( void * ) pxCreatedTask != NULL )
   8158e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   81590:	b103      	cbz	r3, 81594 <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   81592:	601c      	str	r4, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   81594:	4b3d      	ldr	r3, [pc, #244]	; (8168c <xTaskGenericCreate+0x1b8>)
   81596:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   81598:	4b3d      	ldr	r3, [pc, #244]	; (81690 <xTaskGenericCreate+0x1bc>)
   8159a:	681a      	ldr	r2, [r3, #0]
   8159c:	3201      	adds	r2, #1
   8159e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   815a0:	4b3c      	ldr	r3, [pc, #240]	; (81694 <xTaskGenericCreate+0x1c0>)
   815a2:	681b      	ldr	r3, [r3, #0]
   815a4:	bb2b      	cbnz	r3, 815f2 <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   815a6:	4b3b      	ldr	r3, [pc, #236]	; (81694 <xTaskGenericCreate+0x1c0>)
   815a8:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   815aa:	4b39      	ldr	r3, [pc, #228]	; (81690 <xTaskGenericCreate+0x1bc>)
   815ac:	681b      	ldr	r3, [r3, #0]
   815ae:	2b01      	cmp	r3, #1
   815b0:	d129      	bne.n	81606 <xTaskGenericCreate+0x132>
   815b2:	4e39      	ldr	r6, [pc, #228]	; (81698 <xTaskGenericCreate+0x1c4>)
   815b4:	f106 09c8 	add.w	r9, r6, #200	; 0xc8
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   815b8:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8169c <xTaskGenericCreate+0x1c8>
   815bc:	4630      	mov	r0, r6
   815be:	47c0      	blx	r8
   815c0:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   815c2:	454e      	cmp	r6, r9
   815c4:	d1fa      	bne.n	815bc <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   815c6:	f8df 910c 	ldr.w	r9, [pc, #268]	; 816d4 <xTaskGenericCreate+0x200>
   815ca:	4648      	mov	r0, r9
   815cc:	4e33      	ldr	r6, [pc, #204]	; (8169c <xTaskGenericCreate+0x1c8>)
   815ce:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   815d0:	f8df 8104 	ldr.w	r8, [pc, #260]	; 816d8 <xTaskGenericCreate+0x204>
   815d4:	4640      	mov	r0, r8
   815d6:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   815d8:	4831      	ldr	r0, [pc, #196]	; (816a0 <xTaskGenericCreate+0x1cc>)
   815da:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   815dc:	4831      	ldr	r0, [pc, #196]	; (816a4 <xTaskGenericCreate+0x1d0>)
   815de:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   815e0:	4831      	ldr	r0, [pc, #196]	; (816a8 <xTaskGenericCreate+0x1d4>)
   815e2:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   815e4:	4b31      	ldr	r3, [pc, #196]	; (816ac <xTaskGenericCreate+0x1d8>)
   815e6:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   815ea:	4b31      	ldr	r3, [pc, #196]	; (816b0 <xTaskGenericCreate+0x1dc>)
   815ec:	f8c3 8000 	str.w	r8, [r3]
   815f0:	e009      	b.n	81606 <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   815f2:	4b30      	ldr	r3, [pc, #192]	; (816b4 <xTaskGenericCreate+0x1e0>)
   815f4:	681b      	ldr	r3, [r3, #0]
   815f6:	b933      	cbnz	r3, 81606 <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   815f8:	4b26      	ldr	r3, [pc, #152]	; (81694 <xTaskGenericCreate+0x1c0>)
   815fa:	681b      	ldr	r3, [r3, #0]
   815fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   815fe:	429d      	cmp	r5, r3
					{
						pxCurrentTCB = pxNewTCB;
   81600:	bf24      	itt	cs
   81602:	4b24      	ldrcs	r3, [pc, #144]	; (81694 <xTaskGenericCreate+0x1c0>)
   81604:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   81606:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81608:	4a2b      	ldr	r2, [pc, #172]	; (816b8 <xTaskGenericCreate+0x1e4>)
   8160a:	6812      	ldr	r2, [r2, #0]
   8160c:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   8160e:	bf84      	itt	hi
   81610:	4a29      	ldrhi	r2, [pc, #164]	; (816b8 <xTaskGenericCreate+0x1e4>)
   81612:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   81614:	4a29      	ldr	r2, [pc, #164]	; (816bc <xTaskGenericCreate+0x1e8>)
   81616:	6811      	ldr	r1, [r2, #0]
   81618:	6461      	str	r1, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   8161a:	3101      	adds	r1, #1
   8161c:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   8161e:	4a28      	ldr	r2, [pc, #160]	; (816c0 <xTaskGenericCreate+0x1ec>)
   81620:	6812      	ldr	r2, [r2, #0]
   81622:	4293      	cmp	r3, r2
   81624:	bf84      	itt	hi
   81626:	4a26      	ldrhi	r2, [pc, #152]	; (816c0 <xTaskGenericCreate+0x1ec>)
   81628:	6013      	strhi	r3, [r2, #0]
   8162a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8162e:	481a      	ldr	r0, [pc, #104]	; (81698 <xTaskGenericCreate+0x1c4>)
   81630:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81634:	4639      	mov	r1, r7
   81636:	4b23      	ldr	r3, [pc, #140]	; (816c4 <xTaskGenericCreate+0x1f0>)
   81638:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   8163a:	4b23      	ldr	r3, [pc, #140]	; (816c8 <xTaskGenericCreate+0x1f4>)
   8163c:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   8163e:	4b1d      	ldr	r3, [pc, #116]	; (816b4 <xTaskGenericCreate+0x1e0>)
   81640:	681b      	ldr	r3, [r3, #0]
   81642:	b14b      	cbz	r3, 81658 <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   81644:	4b13      	ldr	r3, [pc, #76]	; (81694 <xTaskGenericCreate+0x1c0>)
   81646:	681b      	ldr	r3, [r3, #0]
   81648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8164a:	429d      	cmp	r5, r3
   8164c:	d907      	bls.n	8165e <xTaskGenericCreate+0x18a>
			{
				portYIELD_WITHIN_API();
   8164e:	4b1f      	ldr	r3, [pc, #124]	; (816cc <xTaskGenericCreate+0x1f8>)
   81650:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   81652:	2001      	movs	r0, #1
   81654:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81658:	2001      	movs	r0, #1
   8165a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8165e:	2001      	movs	r0, #1
   81660:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81664:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
   81668:	4640      	mov	r0, r8
   8166a:	e75b      	b.n	81524 <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   8166c:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   81670:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81674:	00080cd5 	.word	0x00080cd5
   81678:	00080e31 	.word	0x00080e31
   8167c:	00080ef5 	.word	0x00080ef5
   81680:	00082be9 	.word	0x00082be9
   81684:	00082c7d 	.word	0x00082c7d
   81688:	00080c89 	.word	0x00080c89
   8168c:	00080ce5 	.word	0x00080ce5
   81690:	20078b80 	.word	0x20078b80
   81694:	20078b40 	.word	0x20078b40
   81698:	20078a74 	.word	0x20078a74
   8169c:	00080bcd 	.word	0x00080bcd
   816a0:	20078b44 	.word	0x20078b44
   816a4:	20078a48 	.word	0x20078a48
   816a8:	20078a28 	.word	0x20078a28
   816ac:	20078a3c 	.word	0x20078a3c
   816b0:	20078b60 	.word	0x20078b60
   816b4:	20078a40 	.word	0x20078a40
   816b8:	20078b84 	.word	0x20078b84
   816bc:	20078b64 	.word	0x20078b64
   816c0:	20078a70 	.word	0x20078a70
   816c4:	00080bed 	.word	0x00080bed
   816c8:	00080d05 	.word	0x00080d05
   816cc:	00080cc5 	.word	0x00080cc5
   816d0:	00080be5 	.word	0x00080be5
   816d4:	20078b68 	.word	0x20078b68
   816d8:	20078a5c 	.word	0x20078a5c

000816dc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   816dc:	b510      	push	{r4, lr}
   816de:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   816e0:	2300      	movs	r3, #0
   816e2:	9300      	str	r3, [sp, #0]
   816e4:	9301      	str	r3, [sp, #4]
   816e6:	9302      	str	r3, [sp, #8]
   816e8:	9303      	str	r3, [sp, #12]
   816ea:	480f      	ldr	r0, [pc, #60]	; (81728 <vTaskStartScheduler+0x4c>)
   816ec:	490f      	ldr	r1, [pc, #60]	; (8172c <vTaskStartScheduler+0x50>)
   816ee:	f44f 7280 	mov.w	r2, #256	; 0x100
   816f2:	4c0f      	ldr	r4, [pc, #60]	; (81730 <vTaskStartScheduler+0x54>)
   816f4:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   816f6:	2801      	cmp	r0, #1
   816f8:	d10e      	bne.n	81718 <vTaskStartScheduler+0x3c>
		{
			xReturn = xTimerCreateTimerTask();
   816fa:	4b0e      	ldr	r3, [pc, #56]	; (81734 <vTaskStartScheduler+0x58>)
   816fc:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   816fe:	2801      	cmp	r0, #1
   81700:	d10a      	bne.n	81718 <vTaskStartScheduler+0x3c>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   81702:	4b0d      	ldr	r3, [pc, #52]	; (81738 <vTaskStartScheduler+0x5c>)
   81704:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   81706:	2201      	movs	r2, #1
   81708:	4b0c      	ldr	r3, [pc, #48]	; (8173c <vTaskStartScheduler+0x60>)
   8170a:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   8170c:	2200      	movs	r2, #0
   8170e:	4b0c      	ldr	r3, [pc, #48]	; (81740 <vTaskStartScheduler+0x64>)
   81710:	801a      	strh	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   81712:	4b0c      	ldr	r3, [pc, #48]	; (81744 <vTaskStartScheduler+0x68>)
   81714:	4798      	blx	r3
   81716:	e004      	b.n	81722 <vTaskStartScheduler+0x46>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   81718:	b918      	cbnz	r0, 81722 <vTaskStartScheduler+0x46>
   8171a:	4b07      	ldr	r3, [pc, #28]	; (81738 <vTaskStartScheduler+0x5c>)
   8171c:	4798      	blx	r3
   8171e:	bf00      	nop
   81720:	e7fd      	b.n	8171e <vTaskStartScheduler+0x42>
}
   81722:	b004      	add	sp, #16
   81724:	bd10      	pop	{r4, pc}
   81726:	bf00      	nop
   81728:	00081a45 	.word	0x00081a45
   8172c:	00083594 	.word	0x00083594
   81730:	000814d5 	.word	0x000814d5
   81734:	00081eed 	.word	0x00081eed
   81738:	00080cd5 	.word	0x00080cd5
   8173c:	20078a40 	.word	0x20078a40
   81740:	20078b5c 	.word	0x20078b5c
   81744:	00080da1 	.word	0x00080da1

00081748 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   81748:	4b02      	ldr	r3, [pc, #8]	; (81754 <vTaskSuspendAll+0xc>)
   8174a:	681a      	ldr	r2, [r3, #0]
   8174c:	3201      	adds	r2, #1
   8174e:	601a      	str	r2, [r3, #0]
   81750:	4770      	bx	lr
   81752:	bf00      	nop
   81754:	20078b3c 	.word	0x20078b3c

00081758 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   81758:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   8175a:	4b04      	ldr	r3, [pc, #16]	; (8176c <xTaskGetTickCount+0x14>)
   8175c:	4798      	blx	r3
	{
		xTicks = xTickCount;
   8175e:	4b04      	ldr	r3, [pc, #16]	; (81770 <xTaskGetTickCount+0x18>)
   81760:	881c      	ldrh	r4, [r3, #0]
   81762:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   81764:	4b03      	ldr	r3, [pc, #12]	; (81774 <xTaskGetTickCount+0x1c>)
   81766:	4798      	blx	r3

	return xTicks;
}
   81768:	4620      	mov	r0, r4
   8176a:	bd10      	pop	{r4, pc}
   8176c:	00080ce5 	.word	0x00080ce5
   81770:	20078b5c 	.word	0x20078b5c
   81774:	00080d05 	.word	0x00080d05

00081778 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8177c:	4b3d      	ldr	r3, [pc, #244]	; (81874 <vTaskIncrementTick+0xfc>)
   8177e:	681b      	ldr	r3, [r3, #0]
   81780:	2b00      	cmp	r3, #0
   81782:	d171      	bne.n	81868 <vTaskIncrementTick+0xf0>
	{
		++xTickCount;
   81784:	4b3c      	ldr	r3, [pc, #240]	; (81878 <vTaskIncrementTick+0x100>)
   81786:	881a      	ldrh	r2, [r3, #0]
   81788:	3201      	adds	r2, #1
   8178a:	b292      	uxth	r2, r2
   8178c:	801a      	strh	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   8178e:	881b      	ldrh	r3, [r3, #0]
   81790:	b29b      	uxth	r3, r3
   81792:	bb03      	cbnz	r3, 817d6 <vTaskIncrementTick+0x5e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81794:	4b39      	ldr	r3, [pc, #228]	; (8187c <vTaskIncrementTick+0x104>)
   81796:	681b      	ldr	r3, [r3, #0]
   81798:	681b      	ldr	r3, [r3, #0]
   8179a:	b11b      	cbz	r3, 817a4 <vTaskIncrementTick+0x2c>
   8179c:	4b38      	ldr	r3, [pc, #224]	; (81880 <vTaskIncrementTick+0x108>)
   8179e:	4798      	blx	r3
   817a0:	bf00      	nop
   817a2:	e7fd      	b.n	817a0 <vTaskIncrementTick+0x28>

			pxTemp = pxDelayedTaskList;
   817a4:	4b35      	ldr	r3, [pc, #212]	; (8187c <vTaskIncrementTick+0x104>)
   817a6:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   817a8:	4a36      	ldr	r2, [pc, #216]	; (81884 <vTaskIncrementTick+0x10c>)
   817aa:	6810      	ldr	r0, [r2, #0]
   817ac:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   817ae:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   817b0:	4a35      	ldr	r2, [pc, #212]	; (81888 <vTaskIncrementTick+0x110>)
   817b2:	6811      	ldr	r1, [r2, #0]
   817b4:	3101      	adds	r1, #1
   817b6:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   817b8:	681b      	ldr	r3, [r3, #0]
   817ba:	681b      	ldr	r3, [r3, #0]
   817bc:	b923      	cbnz	r3, 817c8 <vTaskIncrementTick+0x50>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   817be:	f64f 72ff 	movw	r2, #65535	; 0xffff
   817c2:	4b32      	ldr	r3, [pc, #200]	; (8188c <vTaskIncrementTick+0x114>)
   817c4:	801a      	strh	r2, [r3, #0]
   817c6:	e006      	b.n	817d6 <vTaskIncrementTick+0x5e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   817c8:	4b2c      	ldr	r3, [pc, #176]	; (8187c <vTaskIncrementTick+0x104>)
   817ca:	681b      	ldr	r3, [r3, #0]
   817cc:	68db      	ldr	r3, [r3, #12]
   817ce:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   817d0:	889a      	ldrh	r2, [r3, #4]
   817d2:	4b2e      	ldr	r3, [pc, #184]	; (8188c <vTaskIncrementTick+0x114>)
   817d4:	801a      	strh	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   817d6:	4b28      	ldr	r3, [pc, #160]	; (81878 <vTaskIncrementTick+0x100>)
   817d8:	881a      	ldrh	r2, [r3, #0]
   817da:	b292      	uxth	r2, r2
   817dc:	4b2b      	ldr	r3, [pc, #172]	; (8188c <vTaskIncrementTick+0x114>)
   817de:	881b      	ldrh	r3, [r3, #0]
   817e0:	b29b      	uxth	r3, r3
   817e2:	429a      	cmp	r2, r3
   817e4:	d344      	bcc.n	81870 <vTaskIncrementTick+0xf8>
   817e6:	4b25      	ldr	r3, [pc, #148]	; (8187c <vTaskIncrementTick+0x104>)
   817e8:	681b      	ldr	r3, [r3, #0]
   817ea:	681b      	ldr	r3, [r3, #0]
   817ec:	b153      	cbz	r3, 81804 <vTaskIncrementTick+0x8c>
   817ee:	4b23      	ldr	r3, [pc, #140]	; (8187c <vTaskIncrementTick+0x104>)
   817f0:	681b      	ldr	r3, [r3, #0]
   817f2:	68db      	ldr	r3, [r3, #12]
   817f4:	68dc      	ldr	r4, [r3, #12]
   817f6:	88a3      	ldrh	r3, [r4, #4]
   817f8:	4a1f      	ldr	r2, [pc, #124]	; (81878 <vTaskIncrementTick+0x100>)
   817fa:	8812      	ldrh	r2, [r2, #0]
   817fc:	b292      	uxth	r2, r2
   817fe:	4293      	cmp	r3, r2
   81800:	d914      	bls.n	8182c <vTaskIncrementTick+0xb4>
   81802:	e00f      	b.n	81824 <vTaskIncrementTick+0xac>
   81804:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81808:	4b20      	ldr	r3, [pc, #128]	; (8188c <vTaskIncrementTick+0x114>)
   8180a:	801a      	strh	r2, [r3, #0]
   8180c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81810:	4b1a      	ldr	r3, [pc, #104]	; (8187c <vTaskIncrementTick+0x104>)
   81812:	681b      	ldr	r3, [r3, #0]
   81814:	68db      	ldr	r3, [r3, #12]
   81816:	68dc      	ldr	r4, [r3, #12]
   81818:	88a3      	ldrh	r3, [r4, #4]
   8181a:	4a17      	ldr	r2, [pc, #92]	; (81878 <vTaskIncrementTick+0x100>)
   8181c:	8812      	ldrh	r2, [r2, #0]
   8181e:	b292      	uxth	r2, r2
   81820:	4293      	cmp	r3, r2
   81822:	d907      	bls.n	81834 <vTaskIncrementTick+0xbc>
   81824:	4a19      	ldr	r2, [pc, #100]	; (8188c <vTaskIncrementTick+0x114>)
   81826:	8013      	strh	r3, [r2, #0]
   81828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8182c:	4e18      	ldr	r6, [pc, #96]	; (81890 <vTaskIncrementTick+0x118>)
   8182e:	4f19      	ldr	r7, [pc, #100]	; (81894 <vTaskIncrementTick+0x11c>)
   81830:	f8df 806c 	ldr.w	r8, [pc, #108]	; 818a0 <vTaskIncrementTick+0x128>
   81834:	1d25      	adds	r5, r4, #4
   81836:	4628      	mov	r0, r5
   81838:	47b0      	blx	r6
   8183a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   8183c:	b113      	cbz	r3, 81844 <vTaskIncrementTick+0xcc>
   8183e:	f104 0018 	add.w	r0, r4, #24
   81842:	47b0      	blx	r6
   81844:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81846:	683a      	ldr	r2, [r7, #0]
   81848:	4293      	cmp	r3, r2
   8184a:	bf88      	it	hi
   8184c:	603b      	strhi	r3, [r7, #0]
   8184e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   81852:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   81856:	4629      	mov	r1, r5
   81858:	4b0f      	ldr	r3, [pc, #60]	; (81898 <vTaskIncrementTick+0x120>)
   8185a:	4798      	blx	r3
   8185c:	4b07      	ldr	r3, [pc, #28]	; (8187c <vTaskIncrementTick+0x104>)
   8185e:	681b      	ldr	r3, [r3, #0]
   81860:	681b      	ldr	r3, [r3, #0]
   81862:	2b00      	cmp	r3, #0
   81864:	d1d4      	bne.n	81810 <vTaskIncrementTick+0x98>
   81866:	e7cd      	b.n	81804 <vTaskIncrementTick+0x8c>
	}
	else
	{
		++uxMissedTicks;
   81868:	4b0c      	ldr	r3, [pc, #48]	; (8189c <vTaskIncrementTick+0x124>)
   8186a:	681a      	ldr	r2, [r3, #0]
   8186c:	3201      	adds	r2, #1
   8186e:	601a      	str	r2, [r3, #0]
   81870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81874:	20078b3c 	.word	0x20078b3c
   81878:	20078b5c 	.word	0x20078b5c
   8187c:	20078a3c 	.word	0x20078a3c
   81880:	00080cd5 	.word	0x00080cd5
   81884:	20078b60 	.word	0x20078b60
   81888:	20078b58 	.word	0x20078b58
   8188c:	2007013c 	.word	0x2007013c
   81890:	00080c4d 	.word	0x00080c4d
   81894:	20078a70 	.word	0x20078a70
   81898:	00080bed 	.word	0x00080bed
   8189c:	20078a24 	.word	0x20078a24
   818a0:	20078a74 	.word	0x20078a74

000818a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   818a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   818a8:	4b31      	ldr	r3, [pc, #196]	; (81970 <xTaskResumeAll+0xcc>)
   818aa:	681b      	ldr	r3, [r3, #0]
   818ac:	b91b      	cbnz	r3, 818b6 <xTaskResumeAll+0x12>
   818ae:	4b31      	ldr	r3, [pc, #196]	; (81974 <xTaskResumeAll+0xd0>)
   818b0:	4798      	blx	r3
   818b2:	bf00      	nop
   818b4:	e7fd      	b.n	818b2 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   818b6:	4b30      	ldr	r3, [pc, #192]	; (81978 <xTaskResumeAll+0xd4>)
   818b8:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   818ba:	4b2d      	ldr	r3, [pc, #180]	; (81970 <xTaskResumeAll+0xcc>)
   818bc:	681a      	ldr	r2, [r3, #0]
   818be:	3a01      	subs	r2, #1
   818c0:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   818c2:	681b      	ldr	r3, [r3, #0]
   818c4:	2b00      	cmp	r3, #0
   818c6:	d148      	bne.n	8195a <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   818c8:	4b2c      	ldr	r3, [pc, #176]	; (8197c <xTaskResumeAll+0xd8>)
   818ca:	681b      	ldr	r3, [r3, #0]
   818cc:	2b00      	cmp	r3, #0
   818ce:	d046      	beq.n	8195e <xTaskResumeAll+0xba>
   818d0:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   818d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 819a8 <xTaskResumeAll+0x104>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   818d6:	4f2a      	ldr	r7, [pc, #168]	; (81980 <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   818d8:	4e2a      	ldr	r6, [pc, #168]	; (81984 <xTaskResumeAll+0xe0>)
   818da:	e01d      	b.n	81918 <xTaskResumeAll+0x74>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   818dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
   818e0:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   818e2:	f104 0018 	add.w	r0, r4, #24
   818e6:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   818e8:	f104 0904 	add.w	r9, r4, #4
   818ec:	4648      	mov	r0, r9
   818ee:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   818f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   818f2:	6832      	ldr	r2, [r6, #0]
   818f4:	4293      	cmp	r3, r2
   818f6:	bf88      	it	hi
   818f8:	6033      	strhi	r3, [r6, #0]
   818fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   818fe:	4822      	ldr	r0, [pc, #136]	; (81988 <xTaskResumeAll+0xe4>)
   81900:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81904:	4649      	mov	r1, r9
   81906:	4b21      	ldr	r3, [pc, #132]	; (8198c <xTaskResumeAll+0xe8>)
   81908:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8190a:	4b21      	ldr	r3, [pc, #132]	; (81990 <xTaskResumeAll+0xec>)
   8190c:	681b      	ldr	r3, [r3, #0]
   8190e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   81912:	429a      	cmp	r2, r3
   81914:	bf28      	it	cs
   81916:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81918:	f8d8 3000 	ldr.w	r3, [r8]
   8191c:	2b00      	cmp	r3, #0
   8191e:	d1dd      	bne.n	818dc <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81920:	4b1c      	ldr	r3, [pc, #112]	; (81994 <xTaskResumeAll+0xf0>)
   81922:	681b      	ldr	r3, [r3, #0]
   81924:	b163      	cbz	r3, 81940 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81926:	4b1b      	ldr	r3, [pc, #108]	; (81994 <xTaskResumeAll+0xf0>)
   81928:	681b      	ldr	r3, [r3, #0]
   8192a:	b17b      	cbz	r3, 8194c <xTaskResumeAll+0xa8>
					{
						vTaskIncrementTick();
   8192c:	4d1a      	ldr	r5, [pc, #104]	; (81998 <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
   8192e:	4c19      	ldr	r4, [pc, #100]	; (81994 <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   81930:	47a8      	blx	r5
						--uxMissedTicks;
   81932:	6823      	ldr	r3, [r4, #0]
   81934:	3b01      	subs	r3, #1
   81936:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81938:	6823      	ldr	r3, [r4, #0]
   8193a:	2b00      	cmp	r3, #0
   8193c:	d1f8      	bne.n	81930 <xTaskResumeAll+0x8c>
   8193e:	e005      	b.n	8194c <xTaskResumeAll+0xa8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81940:	2d01      	cmp	r5, #1
   81942:	d003      	beq.n	8194c <xTaskResumeAll+0xa8>
   81944:	4b15      	ldr	r3, [pc, #84]	; (8199c <xTaskResumeAll+0xf8>)
   81946:	681b      	ldr	r3, [r3, #0]
   81948:	2b01      	cmp	r3, #1
   8194a:	d10a      	bne.n	81962 <xTaskResumeAll+0xbe>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   8194c:	2200      	movs	r2, #0
   8194e:	4b13      	ldr	r3, [pc, #76]	; (8199c <xTaskResumeAll+0xf8>)
   81950:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   81952:	4b13      	ldr	r3, [pc, #76]	; (819a0 <xTaskResumeAll+0xfc>)
   81954:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   81956:	2401      	movs	r4, #1
   81958:	e004      	b.n	81964 <xTaskResumeAll+0xc0>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8195a:	2400      	movs	r4, #0
   8195c:	e002      	b.n	81964 <xTaskResumeAll+0xc0>
   8195e:	2400      	movs	r4, #0
   81960:	e000      	b.n	81964 <xTaskResumeAll+0xc0>
   81962:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   81964:	4b0f      	ldr	r3, [pc, #60]	; (819a4 <xTaskResumeAll+0x100>)
   81966:	4798      	blx	r3

	return xAlreadyYielded;
}
   81968:	4620      	mov	r0, r4
   8196a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8196e:	bf00      	nop
   81970:	20078b3c 	.word	0x20078b3c
   81974:	00080cd5 	.word	0x00080cd5
   81978:	00080ce5 	.word	0x00080ce5
   8197c:	20078b80 	.word	0x20078b80
   81980:	00080c4d 	.word	0x00080c4d
   81984:	20078a70 	.word	0x20078a70
   81988:	20078a74 	.word	0x20078a74
   8198c:	00080bed 	.word	0x00080bed
   81990:	20078b40 	.word	0x20078b40
   81994:	20078a24 	.word	0x20078a24
   81998:	00081779 	.word	0x00081779
   8199c:	20078b7c 	.word	0x20078b7c
   819a0:	00080cc5 	.word	0x00080cc5
   819a4:	00080d05 	.word	0x00080d05
   819a8:	20078b44 	.word	0x20078b44

000819ac <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   819ac:	b538      	push	{r3, r4, r5, lr}
   819ae:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   819b0:	4605      	mov	r5, r0
   819b2:	b918      	cbnz	r0, 819bc <vTaskDelayUntil+0x10>
   819b4:	4b1b      	ldr	r3, [pc, #108]	; (81a24 <vTaskDelayUntil+0x78>)
   819b6:	4798      	blx	r3
   819b8:	bf00      	nop
   819ba:	e7fd      	b.n	819b8 <vTaskDelayUntil+0xc>
		configASSERT( ( xTimeIncrement > 0U ) );
   819bc:	b919      	cbnz	r1, 819c6 <vTaskDelayUntil+0x1a>
   819be:	4b19      	ldr	r3, [pc, #100]	; (81a24 <vTaskDelayUntil+0x78>)
   819c0:	4798      	blx	r3
   819c2:	bf00      	nop
   819c4:	e7fd      	b.n	819c2 <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   819c6:	4b18      	ldr	r3, [pc, #96]	; (81a28 <vTaskDelayUntil+0x7c>)
   819c8:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   819ca:	882b      	ldrh	r3, [r5, #0]
   819cc:	441c      	add	r4, r3
   819ce:	b2a4      	uxth	r4, r4

			if( xTickCount < *pxPreviousWakeTime )
   819d0:	4a16      	ldr	r2, [pc, #88]	; (81a2c <vTaskDelayUntil+0x80>)
   819d2:	8812      	ldrh	r2, [r2, #0]
   819d4:	b292      	uxth	r2, r2
   819d6:	4293      	cmp	r3, r2
   819d8:	d908      	bls.n	819ec <vTaskDelayUntil+0x40>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   819da:	42a3      	cmp	r3, r4
   819dc:	d91e      	bls.n	81a1c <vTaskDelayUntil+0x70>
   819de:	4b13      	ldr	r3, [pc, #76]	; (81a2c <vTaskDelayUntil+0x80>)
   819e0:	881b      	ldrh	r3, [r3, #0]
   819e2:	b29b      	uxth	r3, r3
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   819e4:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   819e6:	429c      	cmp	r4, r3
   819e8:	d910      	bls.n	81a0c <vTaskDelayUntil+0x60>
   819ea:	e007      	b.n	819fc <vTaskDelayUntil+0x50>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   819ec:	42a3      	cmp	r3, r4
   819ee:	d813      	bhi.n	81a18 <vTaskDelayUntil+0x6c>
   819f0:	4b0e      	ldr	r3, [pc, #56]	; (81a2c <vTaskDelayUntil+0x80>)
   819f2:	881b      	ldrh	r3, [r3, #0]
   819f4:	b29b      	uxth	r3, r3
   819f6:	429c      	cmp	r4, r3
   819f8:	d80e      	bhi.n	81a18 <vTaskDelayUntil+0x6c>
   819fa:	e00f      	b.n	81a1c <vTaskDelayUntil+0x70>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   819fc:	4b0c      	ldr	r3, [pc, #48]	; (81a30 <vTaskDelayUntil+0x84>)
   819fe:	6818      	ldr	r0, [r3, #0]
   81a00:	3004      	adds	r0, #4
   81a02:	4b0c      	ldr	r3, [pc, #48]	; (81a34 <vTaskDelayUntil+0x88>)
   81a04:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   81a06:	4620      	mov	r0, r4
   81a08:	4b0b      	ldr	r3, [pc, #44]	; (81a38 <vTaskDelayUntil+0x8c>)
   81a0a:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   81a0c:	4b0b      	ldr	r3, [pc, #44]	; (81a3c <vTaskDelayUntil+0x90>)
   81a0e:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   81a10:	b930      	cbnz	r0, 81a20 <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
   81a12:	4b0b      	ldr	r3, [pc, #44]	; (81a40 <vTaskDelayUntil+0x94>)
   81a14:	4798      	blx	r3
   81a16:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81a18:	802c      	strh	r4, [r5, #0]
   81a1a:	e7ef      	b.n	819fc <vTaskDelayUntil+0x50>
   81a1c:	802c      	strh	r4, [r5, #0]
   81a1e:	e7f5      	b.n	81a0c <vTaskDelayUntil+0x60>
   81a20:	bd38      	pop	{r3, r4, r5, pc}
   81a22:	bf00      	nop
   81a24:	00080cd5 	.word	0x00080cd5
   81a28:	00081749 	.word	0x00081749
   81a2c:	20078b5c 	.word	0x20078b5c
   81a30:	20078b40 	.word	0x20078b40
   81a34:	00080c4d 	.word	0x00080c4d
   81a38:	00081479 	.word	0x00081479
   81a3c:	000818a5 	.word	0x000818a5
   81a40:	00080cc5 	.word	0x00080cc5

00081a44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   81a44:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81a46:	4d15      	ldr	r5, [pc, #84]	; (81a9c <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81a48:	4e15      	ldr	r6, [pc, #84]	; (81aa0 <prvIdleTask+0x5c>)
			{
				taskYIELD();
   81a4a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 81ac4 <prvIdleTask+0x80>
   81a4e:	e01c      	b.n	81a8a <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81a50:	4b14      	ldr	r3, [pc, #80]	; (81aa4 <prvIdleTask+0x60>)
   81a52:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81a54:	4b14      	ldr	r3, [pc, #80]	; (81aa8 <prvIdleTask+0x64>)
   81a56:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
   81a58:	4b14      	ldr	r3, [pc, #80]	; (81aac <prvIdleTask+0x68>)
   81a5a:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   81a5c:	b1ac      	cbz	r4, 81a8a <prvIdleTask+0x46>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   81a5e:	4b14      	ldr	r3, [pc, #80]	; (81ab0 <prvIdleTask+0x6c>)
   81a60:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81a62:	4b11      	ldr	r3, [pc, #68]	; (81aa8 <prvIdleTask+0x64>)
   81a64:	68db      	ldr	r3, [r3, #12]
   81a66:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81a68:	1d20      	adds	r0, r4, #4
   81a6a:	4b12      	ldr	r3, [pc, #72]	; (81ab4 <prvIdleTask+0x70>)
   81a6c:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   81a6e:	4b12      	ldr	r3, [pc, #72]	; (81ab8 <prvIdleTask+0x74>)
   81a70:	681a      	ldr	r2, [r3, #0]
   81a72:	3a01      	subs	r2, #1
   81a74:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   81a76:	682b      	ldr	r3, [r5, #0]
   81a78:	3b01      	subs	r3, #1
   81a7a:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   81a7c:	4b0f      	ldr	r3, [pc, #60]	; (81abc <prvIdleTask+0x78>)
   81a7e:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81a80:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81a82:	4f0f      	ldr	r7, [pc, #60]	; (81ac0 <prvIdleTask+0x7c>)
   81a84:	47b8      	blx	r7
		vPortFree( pxTCB );
   81a86:	4620      	mov	r0, r4
   81a88:	47b8      	blx	r7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81a8a:	682b      	ldr	r3, [r5, #0]
   81a8c:	2b00      	cmp	r3, #0
   81a8e:	d1df      	bne.n	81a50 <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81a90:	6833      	ldr	r3, [r6, #0]
   81a92:	2b01      	cmp	r3, #1
   81a94:	d9f9      	bls.n	81a8a <prvIdleTask+0x46>
			{
				taskYIELD();
   81a96:	47c0      	blx	r8
   81a98:	e7f7      	b.n	81a8a <prvIdleTask+0x46>
   81a9a:	bf00      	nop
   81a9c:	20078a44 	.word	0x20078a44
   81aa0:	20078a74 	.word	0x20078a74
   81aa4:	00081749 	.word	0x00081749
   81aa8:	20078a48 	.word	0x20078a48
   81aac:	000818a5 	.word	0x000818a5
   81ab0:	00080ce5 	.word	0x00080ce5
   81ab4:	00080c4d 	.word	0x00080c4d
   81ab8:	20078b80 	.word	0x20078b80
   81abc:	00080d05 	.word	0x00080d05
   81ac0:	00080ef5 	.word	0x00080ef5
   81ac4:	00080cc5 	.word	0x00080cc5

00081ac8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81ac8:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81aca:	4b1d      	ldr	r3, [pc, #116]	; (81b40 <vTaskSwitchContext+0x78>)
   81acc:	681b      	ldr	r3, [r3, #0]
   81ace:	b95b      	cbnz	r3, 81ae8 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81ad0:	4b1c      	ldr	r3, [pc, #112]	; (81b44 <vTaskSwitchContext+0x7c>)
   81ad2:	681b      	ldr	r3, [r3, #0]
   81ad4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81ad8:	009b      	lsls	r3, r3, #2
   81ada:	4a1b      	ldr	r2, [pc, #108]	; (81b48 <vTaskSwitchContext+0x80>)
   81adc:	58d3      	ldr	r3, [r2, r3]
   81ade:	b9cb      	cbnz	r3, 81b14 <vTaskSwitchContext+0x4c>
   81ae0:	4b18      	ldr	r3, [pc, #96]	; (81b44 <vTaskSwitchContext+0x7c>)
   81ae2:	681b      	ldr	r3, [r3, #0]
   81ae4:	b953      	cbnz	r3, 81afc <vTaskSwitchContext+0x34>
   81ae6:	e005      	b.n	81af4 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81ae8:	2201      	movs	r2, #1
   81aea:	4b18      	ldr	r3, [pc, #96]	; (81b4c <vTaskSwitchContext+0x84>)
   81aec:	601a      	str	r2, [r3, #0]
   81aee:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81af0:	681a      	ldr	r2, [r3, #0]
   81af2:	b92a      	cbnz	r2, 81b00 <vTaskSwitchContext+0x38>
   81af4:	4b16      	ldr	r3, [pc, #88]	; (81b50 <vTaskSwitchContext+0x88>)
   81af6:	4798      	blx	r3
   81af8:	bf00      	nop
   81afa:	e7fd      	b.n	81af8 <vTaskSwitchContext+0x30>
   81afc:	4b11      	ldr	r3, [pc, #68]	; (81b44 <vTaskSwitchContext+0x7c>)
   81afe:	4912      	ldr	r1, [pc, #72]	; (81b48 <vTaskSwitchContext+0x80>)
   81b00:	681a      	ldr	r2, [r3, #0]
   81b02:	3a01      	subs	r2, #1
   81b04:	601a      	str	r2, [r3, #0]
   81b06:	681a      	ldr	r2, [r3, #0]
   81b08:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81b0c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   81b10:	2a00      	cmp	r2, #0
   81b12:	d0ed      	beq.n	81af0 <vTaskSwitchContext+0x28>
   81b14:	4b0b      	ldr	r3, [pc, #44]	; (81b44 <vTaskSwitchContext+0x7c>)
   81b16:	681b      	ldr	r3, [r3, #0]
   81b18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81b1c:	4a0a      	ldr	r2, [pc, #40]	; (81b48 <vTaskSwitchContext+0x80>)
   81b1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81b22:	685a      	ldr	r2, [r3, #4]
   81b24:	6852      	ldr	r2, [r2, #4]
   81b26:	605a      	str	r2, [r3, #4]
   81b28:	f103 0108 	add.w	r1, r3, #8
   81b2c:	428a      	cmp	r2, r1
   81b2e:	bf04      	itt	eq
   81b30:	6852      	ldreq	r2, [r2, #4]
   81b32:	605a      	streq	r2, [r3, #4]
   81b34:	685b      	ldr	r3, [r3, #4]
   81b36:	68da      	ldr	r2, [r3, #12]
   81b38:	4b06      	ldr	r3, [pc, #24]	; (81b54 <vTaskSwitchContext+0x8c>)
   81b3a:	601a      	str	r2, [r3, #0]
   81b3c:	bd08      	pop	{r3, pc}
   81b3e:	bf00      	nop
   81b40:	20078b3c 	.word	0x20078b3c
   81b44:	20078a70 	.word	0x20078a70
   81b48:	20078a74 	.word	0x20078a74
   81b4c:	20078b7c 	.word	0x20078b7c
   81b50:	00080cd5 	.word	0x00080cd5
   81b54:	20078b40 	.word	0x20078b40

00081b58 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   81b58:	b538      	push	{r3, r4, r5, lr}
   81b5a:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   81b5c:	b918      	cbnz	r0, 81b66 <vTaskPlaceOnEventList+0xe>
   81b5e:	4b0f      	ldr	r3, [pc, #60]	; (81b9c <vTaskPlaceOnEventList+0x44>)
   81b60:	4798      	blx	r3
   81b62:	bf00      	nop
   81b64:	e7fd      	b.n	81b62 <vTaskPlaceOnEventList+0xa>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81b66:	4d0e      	ldr	r5, [pc, #56]	; (81ba0 <vTaskPlaceOnEventList+0x48>)
   81b68:	6829      	ldr	r1, [r5, #0]
   81b6a:	3118      	adds	r1, #24
   81b6c:	4b0d      	ldr	r3, [pc, #52]	; (81ba4 <vTaskPlaceOnEventList+0x4c>)
   81b6e:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81b70:	6828      	ldr	r0, [r5, #0]
   81b72:	3004      	adds	r0, #4
   81b74:	4b0c      	ldr	r3, [pc, #48]	; (81ba8 <vTaskPlaceOnEventList+0x50>)
   81b76:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   81b78:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81b7c:	429c      	cmp	r4, r3
   81b7e:	d105      	bne.n	81b8c <vTaskPlaceOnEventList+0x34>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81b80:	6829      	ldr	r1, [r5, #0]
   81b82:	480a      	ldr	r0, [pc, #40]	; (81bac <vTaskPlaceOnEventList+0x54>)
   81b84:	3104      	adds	r1, #4
   81b86:	4b0a      	ldr	r3, [pc, #40]	; (81bb0 <vTaskPlaceOnEventList+0x58>)
   81b88:	4798      	blx	r3
   81b8a:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   81b8c:	4b09      	ldr	r3, [pc, #36]	; (81bb4 <vTaskPlaceOnEventList+0x5c>)
   81b8e:	8818      	ldrh	r0, [r3, #0]
   81b90:	4420      	add	r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81b92:	b280      	uxth	r0, r0
   81b94:	4b08      	ldr	r3, [pc, #32]	; (81bb8 <vTaskPlaceOnEventList+0x60>)
   81b96:	4798      	blx	r3
   81b98:	bd38      	pop	{r3, r4, r5, pc}
   81b9a:	bf00      	nop
   81b9c:	00080cd5 	.word	0x00080cd5
   81ba0:	20078b40 	.word	0x20078b40
   81ba4:	00080c09 	.word	0x00080c09
   81ba8:	00080c4d 	.word	0x00080c4d
   81bac:	20078a28 	.word	0x20078a28
   81bb0:	00080bed 	.word	0x00080bed
   81bb4:	20078b5c 	.word	0x20078b5c
   81bb8:	00081479 	.word	0x00081479

00081bbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   81bbc:	b538      	push	{r3, r4, r5, lr}
   81bbe:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   81bc0:	b918      	cbnz	r0, 81bca <vTaskPlaceOnEventListRestricted+0xe>
   81bc2:	4b0a      	ldr	r3, [pc, #40]	; (81bec <vTaskPlaceOnEventListRestricted+0x30>)
   81bc4:	4798      	blx	r3
   81bc6:	bf00      	nop
   81bc8:	e7fd      	b.n	81bc6 <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81bca:	4c09      	ldr	r4, [pc, #36]	; (81bf0 <vTaskPlaceOnEventListRestricted+0x34>)
   81bcc:	6821      	ldr	r1, [r4, #0]
   81bce:	3118      	adds	r1, #24
   81bd0:	4b08      	ldr	r3, [pc, #32]	; (81bf4 <vTaskPlaceOnEventListRestricted+0x38>)
   81bd2:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81bd4:	6820      	ldr	r0, [r4, #0]
   81bd6:	3004      	adds	r0, #4
   81bd8:	4b07      	ldr	r3, [pc, #28]	; (81bf8 <vTaskPlaceOnEventListRestricted+0x3c>)
   81bda:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   81bdc:	4b07      	ldr	r3, [pc, #28]	; (81bfc <vTaskPlaceOnEventListRestricted+0x40>)
   81bde:	8818      	ldrh	r0, [r3, #0]
   81be0:	4428      	add	r0, r5
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   81be2:	b280      	uxth	r0, r0
   81be4:	4b06      	ldr	r3, [pc, #24]	; (81c00 <vTaskPlaceOnEventListRestricted+0x44>)
   81be6:	4798      	blx	r3
   81be8:	bd38      	pop	{r3, r4, r5, pc}
   81bea:	bf00      	nop
   81bec:	00080cd5 	.word	0x00080cd5
   81bf0:	20078b40 	.word	0x20078b40
   81bf4:	00080bed 	.word	0x00080bed
   81bf8:	00080c4d 	.word	0x00080c4d
   81bfc:	20078b5c 	.word	0x20078b5c
   81c00:	00081479 	.word	0x00081479

00081c04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   81c04:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81c06:	68c3      	ldr	r3, [r0, #12]
   81c08:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81c0a:	b91c      	cbnz	r4, 81c14 <xTaskRemoveFromEventList+0x10>
   81c0c:	4b16      	ldr	r3, [pc, #88]	; (81c68 <xTaskRemoveFromEventList+0x64>)
   81c0e:	4798      	blx	r3
   81c10:	bf00      	nop
   81c12:	e7fd      	b.n	81c10 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81c14:	f104 0518 	add.w	r5, r4, #24
   81c18:	4628      	mov	r0, r5
   81c1a:	4b14      	ldr	r3, [pc, #80]	; (81c6c <xTaskRemoveFromEventList+0x68>)
   81c1c:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81c1e:	4b14      	ldr	r3, [pc, #80]	; (81c70 <xTaskRemoveFromEventList+0x6c>)
   81c20:	681b      	ldr	r3, [r3, #0]
   81c22:	b99b      	cbnz	r3, 81c4c <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81c24:	1d25      	adds	r5, r4, #4
   81c26:	4628      	mov	r0, r5
   81c28:	4b10      	ldr	r3, [pc, #64]	; (81c6c <xTaskRemoveFromEventList+0x68>)
   81c2a:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81c2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81c2e:	4a11      	ldr	r2, [pc, #68]	; (81c74 <xTaskRemoveFromEventList+0x70>)
   81c30:	6812      	ldr	r2, [r2, #0]
   81c32:	4293      	cmp	r3, r2
   81c34:	bf84      	itt	hi
   81c36:	4a0f      	ldrhi	r2, [pc, #60]	; (81c74 <xTaskRemoveFromEventList+0x70>)
   81c38:	6013      	strhi	r3, [r2, #0]
   81c3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81c3e:	480e      	ldr	r0, [pc, #56]	; (81c78 <xTaskRemoveFromEventList+0x74>)
   81c40:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81c44:	4629      	mov	r1, r5
   81c46:	4b0d      	ldr	r3, [pc, #52]	; (81c7c <xTaskRemoveFromEventList+0x78>)
   81c48:	4798      	blx	r3
   81c4a:	e003      	b.n	81c54 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81c4c:	480c      	ldr	r0, [pc, #48]	; (81c80 <xTaskRemoveFromEventList+0x7c>)
   81c4e:	4629      	mov	r1, r5
   81c50:	4b0a      	ldr	r3, [pc, #40]	; (81c7c <xTaskRemoveFromEventList+0x78>)
   81c52:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81c54:	4b0b      	ldr	r3, [pc, #44]	; (81c84 <xTaskRemoveFromEventList+0x80>)
   81c56:	681b      	ldr	r3, [r3, #0]
   81c58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   81c5c:	4298      	cmp	r0, r3
   81c5e:	bf34      	ite	cc
   81c60:	2000      	movcc	r0, #0
   81c62:	2001      	movcs	r0, #1
   81c64:	bd38      	pop	{r3, r4, r5, pc}
   81c66:	bf00      	nop
   81c68:	00080cd5 	.word	0x00080cd5
   81c6c:	00080c4d 	.word	0x00080c4d
   81c70:	20078b3c 	.word	0x20078b3c
   81c74:	20078a70 	.word	0x20078a70
   81c78:	20078a74 	.word	0x20078a74
   81c7c:	00080bed 	.word	0x00080bed
   81c80:	20078b44 	.word	0x20078b44
   81c84:	20078b40 	.word	0x20078b40

00081c88 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   81c88:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   81c8a:	b918      	cbnz	r0, 81c94 <vTaskSetTimeOutState+0xc>
   81c8c:	4b05      	ldr	r3, [pc, #20]	; (81ca4 <vTaskSetTimeOutState+0x1c>)
   81c8e:	4798      	blx	r3
   81c90:	bf00      	nop
   81c92:	e7fd      	b.n	81c90 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81c94:	4a04      	ldr	r2, [pc, #16]	; (81ca8 <vTaskSetTimeOutState+0x20>)
   81c96:	6812      	ldr	r2, [r2, #0]
   81c98:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81c9a:	4a04      	ldr	r2, [pc, #16]	; (81cac <vTaskSetTimeOutState+0x24>)
   81c9c:	8812      	ldrh	r2, [r2, #0]
   81c9e:	8082      	strh	r2, [r0, #4]
   81ca0:	bd08      	pop	{r3, pc}
   81ca2:	bf00      	nop
   81ca4:	00080cd5 	.word	0x00080cd5
   81ca8:	20078b58 	.word	0x20078b58
   81cac:	20078b5c 	.word	0x20078b5c

00081cb0 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   81cb0:	b538      	push	{r3, r4, r5, lr}
   81cb2:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   81cb4:	4604      	mov	r4, r0
   81cb6:	b918      	cbnz	r0, 81cc0 <xTaskCheckForTimeOut+0x10>
   81cb8:	4b1a      	ldr	r3, [pc, #104]	; (81d24 <xTaskCheckForTimeOut+0x74>)
   81cba:	4798      	blx	r3
   81cbc:	bf00      	nop
   81cbe:	e7fd      	b.n	81cbc <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
   81cc0:	b919      	cbnz	r1, 81cca <xTaskCheckForTimeOut+0x1a>
   81cc2:	4b18      	ldr	r3, [pc, #96]	; (81d24 <xTaskCheckForTimeOut+0x74>)
   81cc4:	4798      	blx	r3
   81cc6:	bf00      	nop
   81cc8:	e7fd      	b.n	81cc6 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   81cca:	4b17      	ldr	r3, [pc, #92]	; (81d28 <xTaskCheckForTimeOut+0x78>)
   81ccc:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   81cce:	882b      	ldrh	r3, [r5, #0]
   81cd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81cd4:	4293      	cmp	r3, r2
   81cd6:	d01c      	beq.n	81d12 <xTaskCheckForTimeOut+0x62>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   81cd8:	4a14      	ldr	r2, [pc, #80]	; (81d2c <xTaskCheckForTimeOut+0x7c>)
   81cda:	6811      	ldr	r1, [r2, #0]
   81cdc:	6822      	ldr	r2, [r4, #0]
   81cde:	428a      	cmp	r2, r1
   81ce0:	d005      	beq.n	81cee <xTaskCheckForTimeOut+0x3e>
   81ce2:	4a13      	ldr	r2, [pc, #76]	; (81d30 <xTaskCheckForTimeOut+0x80>)
   81ce4:	8812      	ldrh	r2, [r2, #0]
   81ce6:	b292      	uxth	r2, r2
   81ce8:	88a1      	ldrh	r1, [r4, #4]
   81cea:	4291      	cmp	r1, r2
   81cec:	d913      	bls.n	81d16 <xTaskCheckForTimeOut+0x66>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   81cee:	4a10      	ldr	r2, [pc, #64]	; (81d30 <xTaskCheckForTimeOut+0x80>)
   81cf0:	8811      	ldrh	r1, [r2, #0]
   81cf2:	88a2      	ldrh	r2, [r4, #4]
   81cf4:	1a89      	subs	r1, r1, r2
   81cf6:	b289      	uxth	r1, r1
   81cf8:	428b      	cmp	r3, r1
   81cfa:	d90e      	bls.n	81d1a <xTaskCheckForTimeOut+0x6a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81cfc:	490c      	ldr	r1, [pc, #48]	; (81d30 <xTaskCheckForTimeOut+0x80>)
   81cfe:	8809      	ldrh	r1, [r1, #0]
   81d00:	b289      	uxth	r1, r1
   81d02:	1a52      	subs	r2, r2, r1
   81d04:	4413      	add	r3, r2
   81d06:	802b      	strh	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   81d08:	4620      	mov	r0, r4
   81d0a:	4b0a      	ldr	r3, [pc, #40]	; (81d34 <xTaskCheckForTimeOut+0x84>)
   81d0c:	4798      	blx	r3
			xReturn = pdFALSE;
   81d0e:	2400      	movs	r4, #0
   81d10:	e004      	b.n	81d1c <xTaskCheckForTimeOut+0x6c>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   81d12:	2400      	movs	r4, #0
   81d14:	e002      	b.n	81d1c <xTaskCheckForTimeOut+0x6c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   81d16:	2401      	movs	r4, #1
   81d18:	e000      	b.n	81d1c <xTaskCheckForTimeOut+0x6c>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   81d1a:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   81d1c:	4b06      	ldr	r3, [pc, #24]	; (81d38 <xTaskCheckForTimeOut+0x88>)
   81d1e:	4798      	blx	r3

	return xReturn;
}
   81d20:	4620      	mov	r0, r4
   81d22:	bd38      	pop	{r3, r4, r5, pc}
   81d24:	00080cd5 	.word	0x00080cd5
   81d28:	00080ce5 	.word	0x00080ce5
   81d2c:	20078b58 	.word	0x20078b58
   81d30:	20078b5c 	.word	0x20078b5c
   81d34:	00081c89 	.word	0x00081c89
   81d38:	00080d05 	.word	0x00080d05

00081d3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   81d3c:	2201      	movs	r2, #1
   81d3e:	4b01      	ldr	r3, [pc, #4]	; (81d44 <vTaskMissedYield+0x8>)
   81d40:	601a      	str	r2, [r3, #0]
   81d42:	4770      	bx	lr
   81d44:	20078b7c 	.word	0x20078b7c

00081d48 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81d48:	4b01      	ldr	r3, [pc, #4]	; (81d50 <xTaskGetCurrentTaskHandle+0x8>)
   81d4a:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81d4c:	4770      	bx	lr
   81d4e:	bf00      	nop
   81d50:	20078b40 	.word	0x20078b40

00081d54 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81d54:	4b05      	ldr	r3, [pc, #20]	; (81d6c <xTaskGetSchedulerState+0x18>)
   81d56:	681b      	ldr	r3, [r3, #0]
   81d58:	b133      	cbz	r3, 81d68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81d5a:	4b05      	ldr	r3, [pc, #20]	; (81d70 <xTaskGetSchedulerState+0x1c>)
   81d5c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   81d5e:	2b00      	cmp	r3, #0
   81d60:	bf14      	ite	ne
   81d62:	2002      	movne	r0, #2
   81d64:	2001      	moveq	r0, #1
   81d66:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   81d68:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   81d6a:	4770      	bx	lr
   81d6c:	20078a40 	.word	0x20078a40
   81d70:	20078b3c 	.word	0x20078b3c

00081d74 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81d74:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81d76:	4604      	mov	r4, r0
   81d78:	2800      	cmp	r0, #0
   81d7a:	d02e      	beq.n	81dda <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81d7c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   81d7e:	4a17      	ldr	r2, [pc, #92]	; (81ddc <vTaskPriorityInherit+0x68>)
   81d80:	6812      	ldr	r2, [r2, #0]
   81d82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81d84:	4293      	cmp	r3, r2
   81d86:	d228      	bcs.n	81dda <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81d88:	4a14      	ldr	r2, [pc, #80]	; (81ddc <vTaskPriorityInherit+0x68>)
   81d8a:	6812      	ldr	r2, [r2, #0]
   81d8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81d8e:	f1c2 020a 	rsb	r2, r2, #10
   81d92:	8302      	strh	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81d94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81d98:	4a11      	ldr	r2, [pc, #68]	; (81de0 <vTaskPriorityInherit+0x6c>)
   81d9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81d9e:	6942      	ldr	r2, [r0, #20]
   81da0:	429a      	cmp	r2, r3
   81da2:	d116      	bne.n	81dd2 <vTaskPriorityInherit+0x5e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81da4:	1d05      	adds	r5, r0, #4
   81da6:	4628      	mov	r0, r5
   81da8:	4b0e      	ldr	r3, [pc, #56]	; (81de4 <vTaskPriorityInherit+0x70>)
   81daa:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81dac:	4b0b      	ldr	r3, [pc, #44]	; (81ddc <vTaskPriorityInherit+0x68>)
   81dae:	681b      	ldr	r3, [r3, #0]
   81db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81db2:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   81db4:	4a0c      	ldr	r2, [pc, #48]	; (81de8 <vTaskPriorityInherit+0x74>)
   81db6:	6812      	ldr	r2, [r2, #0]
   81db8:	4293      	cmp	r3, r2
   81dba:	bf84      	itt	hi
   81dbc:	4a0a      	ldrhi	r2, [pc, #40]	; (81de8 <vTaskPriorityInherit+0x74>)
   81dbe:	6013      	strhi	r3, [r2, #0]
   81dc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81dc4:	4806      	ldr	r0, [pc, #24]	; (81de0 <vTaskPriorityInherit+0x6c>)
   81dc6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81dca:	4629      	mov	r1, r5
   81dcc:	4b07      	ldr	r3, [pc, #28]	; (81dec <vTaskPriorityInherit+0x78>)
   81dce:	4798      	blx	r3
   81dd0:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81dd2:	4b02      	ldr	r3, [pc, #8]	; (81ddc <vTaskPriorityInherit+0x68>)
   81dd4:	681b      	ldr	r3, [r3, #0]
   81dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81dd8:	62c3      	str	r3, [r0, #44]	; 0x2c
   81dda:	bd38      	pop	{r3, r4, r5, pc}
   81ddc:	20078b40 	.word	0x20078b40
   81de0:	20078a74 	.word	0x20078a74
   81de4:	00080c4d 	.word	0x00080c4d
   81de8:	20078a70 	.word	0x20078a70
   81dec:	00080bed 	.word	0x00080bed

00081df0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   81df0:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   81df2:	4604      	mov	r4, r0
   81df4:	b1d0      	cbz	r0, 81e2c <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81df6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   81df8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   81dfa:	429a      	cmp	r2, r3
   81dfc:	d016      	beq.n	81e2c <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81dfe:	1d05      	adds	r5, r0, #4
   81e00:	4628      	mov	r0, r5
   81e02:	4b0b      	ldr	r3, [pc, #44]	; (81e30 <vTaskPriorityDisinherit+0x40>)
   81e04:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   81e06:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   81e08:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   81e0a:	f1c3 020a 	rsb	r2, r3, #10
   81e0e:	8322      	strh	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   81e10:	4a08      	ldr	r2, [pc, #32]	; (81e34 <vTaskPriorityDisinherit+0x44>)
   81e12:	6812      	ldr	r2, [r2, #0]
   81e14:	4293      	cmp	r3, r2
   81e16:	bf84      	itt	hi
   81e18:	4a06      	ldrhi	r2, [pc, #24]	; (81e34 <vTaskPriorityDisinherit+0x44>)
   81e1a:	6013      	strhi	r3, [r2, #0]
   81e1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81e20:	4805      	ldr	r0, [pc, #20]	; (81e38 <vTaskPriorityDisinherit+0x48>)
   81e22:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81e26:	4629      	mov	r1, r5
   81e28:	4b04      	ldr	r3, [pc, #16]	; (81e3c <vTaskPriorityDisinherit+0x4c>)
   81e2a:	4798      	blx	r3
   81e2c:	bd38      	pop	{r3, r4, r5, pc}
   81e2e:	bf00      	nop
   81e30:	00080c4d 	.word	0x00080c4d
   81e34:	20078a70 	.word	0x20078a70
   81e38:	20078a74 	.word	0x20078a74
   81e3c:	00080bed 	.word	0x00080bed

00081e40 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81e40:	b510      	push	{r4, lr}
   81e42:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81e44:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81e46:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   81e48:	4291      	cmp	r1, r2
   81e4a:	d80b      	bhi.n	81e64 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   81e4c:	1ad3      	subs	r3, r2, r3
   81e4e:	8b01      	ldrh	r1, [r0, #24]
   81e50:	b29b      	uxth	r3, r3
   81e52:	4299      	cmp	r1, r3
   81e54:	d911      	bls.n	81e7a <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81e56:	4b0b      	ldr	r3, [pc, #44]	; (81e84 <prvInsertTimerInActiveList+0x44>)
   81e58:	6818      	ldr	r0, [r3, #0]
   81e5a:	1d21      	adds	r1, r4, #4
   81e5c:	4b0a      	ldr	r3, [pc, #40]	; (81e88 <prvInsertTimerInActiveList+0x48>)
   81e5e:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81e60:	2000      	movs	r0, #0
   81e62:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81e64:	429a      	cmp	r2, r3
   81e66:	d201      	bcs.n	81e6c <prvInsertTimerInActiveList+0x2c>
   81e68:	4299      	cmp	r1, r3
   81e6a:	d208      	bcs.n	81e7e <prvInsertTimerInActiveList+0x3e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81e6c:	4b07      	ldr	r3, [pc, #28]	; (81e8c <prvInsertTimerInActiveList+0x4c>)
   81e6e:	6818      	ldr	r0, [r3, #0]
   81e70:	1d21      	adds	r1, r4, #4
   81e72:	4b05      	ldr	r3, [pc, #20]	; (81e88 <prvInsertTimerInActiveList+0x48>)
   81e74:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81e76:	2000      	movs	r0, #0
   81e78:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81e7a:	2001      	movs	r0, #1
   81e7c:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   81e7e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   81e80:	bd10      	pop	{r4, pc}
   81e82:	bf00      	nop
   81e84:	20078bbc 	.word	0x20078bbc
   81e88:	00080c09 	.word	0x00080c09
   81e8c:	20078b88 	.word	0x20078b88

00081e90 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81e90:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81e92:	4b0d      	ldr	r3, [pc, #52]	; (81ec8 <prvCheckForValidListAndQueue+0x38>)
   81e94:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81e96:	4b0d      	ldr	r3, [pc, #52]	; (81ecc <prvCheckForValidListAndQueue+0x3c>)
   81e98:	681b      	ldr	r3, [r3, #0]
   81e9a:	b98b      	cbnz	r3, 81ec0 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   81e9c:	4d0c      	ldr	r5, [pc, #48]	; (81ed0 <prvCheckForValidListAndQueue+0x40>)
   81e9e:	4628      	mov	r0, r5
   81ea0:	4e0c      	ldr	r6, [pc, #48]	; (81ed4 <prvCheckForValidListAndQueue+0x44>)
   81ea2:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81ea4:	4c0c      	ldr	r4, [pc, #48]	; (81ed8 <prvCheckForValidListAndQueue+0x48>)
   81ea6:	4620      	mov	r0, r4
   81ea8:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81eaa:	4b0c      	ldr	r3, [pc, #48]	; (81edc <prvCheckForValidListAndQueue+0x4c>)
   81eac:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81eae:	4b0c      	ldr	r3, [pc, #48]	; (81ee0 <prvCheckForValidListAndQueue+0x50>)
   81eb0:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   81eb2:	2005      	movs	r0, #5
   81eb4:	210c      	movs	r1, #12
   81eb6:	2200      	movs	r2, #0
   81eb8:	4b0a      	ldr	r3, [pc, #40]	; (81ee4 <prvCheckForValidListAndQueue+0x54>)
   81eba:	4798      	blx	r3
   81ebc:	4b03      	ldr	r3, [pc, #12]	; (81ecc <prvCheckForValidListAndQueue+0x3c>)
   81ebe:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   81ec0:	4b09      	ldr	r3, [pc, #36]	; (81ee8 <prvCheckForValidListAndQueue+0x58>)
   81ec2:	4798      	blx	r3
   81ec4:	bd70      	pop	{r4, r5, r6, pc}
   81ec6:	bf00      	nop
   81ec8:	00080ce5 	.word	0x00080ce5
   81ecc:	20078bb8 	.word	0x20078bb8
   81ed0:	20078b8c 	.word	0x20078b8c
   81ed4:	00080bcd 	.word	0x00080bcd
   81ed8:	20078ba0 	.word	0x20078ba0
   81edc:	20078b88 	.word	0x20078b88
   81ee0:	20078bbc 	.word	0x20078bbc
   81ee4:	000810bd 	.word	0x000810bd
   81ee8:	00080d05 	.word	0x00080d05

00081eec <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   81eec:	b510      	push	{r4, lr}
   81eee:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   81ef0:	4b0b      	ldr	r3, [pc, #44]	; (81f20 <xTimerCreateTimerTask+0x34>)
   81ef2:	4798      	blx	r3

	if( xTimerQueue != NULL )
   81ef4:	4b0b      	ldr	r3, [pc, #44]	; (81f24 <xTimerCreateTimerTask+0x38>)
   81ef6:	681b      	ldr	r3, [r3, #0]
   81ef8:	b163      	cbz	r3, 81f14 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   81efa:	2309      	movs	r3, #9
   81efc:	9300      	str	r3, [sp, #0]
   81efe:	2300      	movs	r3, #0
   81f00:	9301      	str	r3, [sp, #4]
   81f02:	9302      	str	r3, [sp, #8]
   81f04:	9303      	str	r3, [sp, #12]
   81f06:	4808      	ldr	r0, [pc, #32]	; (81f28 <xTimerCreateTimerTask+0x3c>)
   81f08:	4908      	ldr	r1, [pc, #32]	; (81f2c <xTimerCreateTimerTask+0x40>)
   81f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
   81f0e:	4c08      	ldr	r4, [pc, #32]	; (81f30 <xTimerCreateTimerTask+0x44>)
   81f10:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   81f12:	b918      	cbnz	r0, 81f1c <xTimerCreateTimerTask+0x30>
   81f14:	4b07      	ldr	r3, [pc, #28]	; (81f34 <xTimerCreateTimerTask+0x48>)
   81f16:	4798      	blx	r3
   81f18:	bf00      	nop
   81f1a:	e7fd      	b.n	81f18 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   81f1c:	b004      	add	sp, #16
   81f1e:	bd10      	pop	{r4, pc}
   81f20:	00081e91 	.word	0x00081e91
   81f24:	20078bb8 	.word	0x20078bb8
   81f28:	0008204d 	.word	0x0008204d
   81f2c:	000835a0 	.word	0x000835a0
   81f30:	000814d5 	.word	0x000814d5
   81f34:	00080cd5 	.word	0x00080cd5

00081f38 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   81f38:	b510      	push	{r4, lr}
   81f3a:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   81f3c:	4c10      	ldr	r4, [pc, #64]	; (81f80 <xTimerGenericCommand+0x48>)
   81f3e:	6824      	ldr	r4, [r4, #0]
   81f40:	b1d4      	cbz	r4, 81f78 <xTimerGenericCommand+0x40>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   81f42:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81f44:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81f48:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   81f4a:	b973      	cbnz	r3, 81f6a <xTimerGenericCommand+0x32>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81f4c:	4b0d      	ldr	r3, [pc, #52]	; (81f84 <xTimerGenericCommand+0x4c>)
   81f4e:	4798      	blx	r3
   81f50:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81f52:	4b0b      	ldr	r3, [pc, #44]	; (81f80 <xTimerGenericCommand+0x48>)
   81f54:	6818      	ldr	r0, [r3, #0]
   81f56:	a901      	add	r1, sp, #4
   81f58:	bf07      	ittee	eq
   81f5a:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
   81f5e:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81f60:	2200      	movne	r2, #0
   81f62:	4613      	movne	r3, r2
   81f64:	4c08      	ldr	r4, [pc, #32]	; (81f88 <xTimerGenericCommand+0x50>)
   81f66:	47a0      	blx	r4
   81f68:	e007      	b.n	81f7a <xTimerGenericCommand+0x42>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81f6a:	4620      	mov	r0, r4
   81f6c:	a901      	add	r1, sp, #4
   81f6e:	461a      	mov	r2, r3
   81f70:	2300      	movs	r3, #0
   81f72:	4c06      	ldr	r4, [pc, #24]	; (81f8c <xTimerGenericCommand+0x54>)
   81f74:	47a0      	blx	r4
   81f76:	e000      	b.n	81f7a <xTimerGenericCommand+0x42>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   81f78:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   81f7a:	b004      	add	sp, #16
   81f7c:	bd10      	pop	{r4, pc}
   81f7e:	bf00      	nop
   81f80:	20078bb8 	.word	0x20078bb8
   81f84:	00081d55 	.word	0x00081d55
   81f88:	00081115 	.word	0x00081115
   81f8c:	00081239 	.word	0x00081239

00081f90 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81f94:	b082      	sub	sp, #8
   81f96:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   81f98:	4b24      	ldr	r3, [pc, #144]	; (8202c <prvSampleTimeNow+0x9c>)
   81f9a:	4798      	blx	r3
   81f9c:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   81f9e:	4b24      	ldr	r3, [pc, #144]	; (82030 <prvSampleTimeNow+0xa0>)
   81fa0:	881b      	ldrh	r3, [r3, #0]
   81fa2:	4283      	cmp	r3, r0
   81fa4:	d937      	bls.n	82016 <prvSampleTimeNow+0x86>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81fa6:	4e23      	ldr	r6, [pc, #140]	; (82034 <prvSampleTimeNow+0xa4>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81fa8:	4f23      	ldr	r7, [pc, #140]	; (82038 <prvSampleTimeNow+0xa8>)
   81faa:	e027      	b.n	81ffc <prvSampleTimeNow+0x6c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81fac:	68da      	ldr	r2, [r3, #12]
   81fae:	f8b2 a000 	ldrh.w	sl, [r2]
   81fb2:	fa1f fa8a 	uxth.w	sl, sl

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81fb6:	68db      	ldr	r3, [r3, #12]
   81fb8:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81fba:	1d25      	adds	r5, r4, #4
   81fbc:	4628      	mov	r0, r5
   81fbe:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81fc2:	4620      	mov	r0, r4
   81fc4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81fc6:	69e3      	ldr	r3, [r4, #28]
   81fc8:	2b01      	cmp	r3, #1
   81fca:	d117      	bne.n	81ffc <prvSampleTimeNow+0x6c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81fcc:	8b23      	ldrh	r3, [r4, #24]
   81fce:	4453      	add	r3, sl
   81fd0:	b29b      	uxth	r3, r3
			if( xReloadTime > xNextExpireTime )
   81fd2:	4553      	cmp	r3, sl
   81fd4:	d906      	bls.n	81fe4 <prvSampleTimeNow+0x54>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81fd6:	80a3      	strh	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81fd8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81fda:	6830      	ldr	r0, [r6, #0]
   81fdc:	4629      	mov	r1, r5
   81fde:	4b17      	ldr	r3, [pc, #92]	; (8203c <prvSampleTimeNow+0xac>)
   81fe0:	4798      	blx	r3
   81fe2:	e00b      	b.n	81ffc <prvSampleTimeNow+0x6c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81fe4:	2300      	movs	r3, #0
   81fe6:	9300      	str	r3, [sp, #0]
   81fe8:	4620      	mov	r0, r4
   81fea:	4619      	mov	r1, r3
   81fec:	4652      	mov	r2, sl
   81fee:	4c14      	ldr	r4, [pc, #80]	; (82040 <prvSampleTimeNow+0xb0>)
   81ff0:	47a0      	blx	r4
				configASSERT( xResult );
   81ff2:	b918      	cbnz	r0, 81ffc <prvSampleTimeNow+0x6c>
   81ff4:	4b13      	ldr	r3, [pc, #76]	; (82044 <prvSampleTimeNow+0xb4>)
   81ff6:	4798      	blx	r3
   81ff8:	bf00      	nop
   81ffa:	e7fd      	b.n	81ff8 <prvSampleTimeNow+0x68>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81ffc:	6833      	ldr	r3, [r6, #0]
   81ffe:	681a      	ldr	r2, [r3, #0]
   82000:	2a00      	cmp	r2, #0
   82002:	d1d3      	bne.n	81fac <prvSampleTimeNow+0x1c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   82004:	4a10      	ldr	r2, [pc, #64]	; (82048 <prvSampleTimeNow+0xb8>)
   82006:	6811      	ldr	r1, [r2, #0]
   82008:	480a      	ldr	r0, [pc, #40]	; (82034 <prvSampleTimeNow+0xa4>)
   8200a:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   8200c:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   8200e:	2301      	movs	r3, #1
   82010:	f8c9 3000 	str.w	r3, [r9]
   82014:	e002      	b.n	8201c <prvSampleTimeNow+0x8c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   82016:	2300      	movs	r3, #0
   82018:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   8201c:	4b04      	ldr	r3, [pc, #16]	; (82030 <prvSampleTimeNow+0xa0>)
   8201e:	f8a3 8000 	strh.w	r8, [r3]

	return xTimeNow;
}
   82022:	4640      	mov	r0, r8
   82024:	b002      	add	sp, #8
   82026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8202a:	bf00      	nop
   8202c:	00081759 	.word	0x00081759
   82030:	20078bb4 	.word	0x20078bb4
   82034:	20078b88 	.word	0x20078b88
   82038:	00080c4d 	.word	0x00080c4d
   8203c:	00080c09 	.word	0x00080c09
   82040:	00081f39 	.word	0x00081f39
   82044:	00080cd5 	.word	0x00080cd5
   82048:	20078bbc 	.word	0x20078bbc

0008204c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   8204c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82050:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   82052:	4d51      	ldr	r5, [pc, #324]	; (82198 <prvTimerTask+0x14c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   82054:	f8df 8170 	ldr.w	r8, [pc, #368]	; 821c8 <prvTimerTask+0x17c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   82058:	4b50      	ldr	r3, [pc, #320]	; (8219c <prvTimerTask+0x150>)
   8205a:	681b      	ldr	r3, [r3, #0]
   8205c:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   8205e:	2a00      	cmp	r2, #0
   82060:	f000 8090 	beq.w	82184 <prvTimerTask+0x138>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82064:	68db      	ldr	r3, [r3, #12]
   82066:	881e      	ldrh	r6, [r3, #0]
   82068:	b2b6      	uxth	r6, r6
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   8206a:	4b4d      	ldr	r3, [pc, #308]	; (821a0 <prvTimerTask+0x154>)
   8206c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8206e:	a803      	add	r0, sp, #12
   82070:	4b4c      	ldr	r3, [pc, #304]	; (821a4 <prvTimerTask+0x158>)
   82072:	4798      	blx	r3
   82074:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82076:	9b03      	ldr	r3, [sp, #12]
   82078:	2b00      	cmp	r3, #0
   8207a:	d132      	bne.n	820e2 <prvTimerTask+0x96>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   8207c:	4286      	cmp	r6, r0
   8207e:	d825      	bhi.n	820cc <prvTimerTask+0x80>
			{
				xTaskResumeAll();
   82080:	4b49      	ldr	r3, [pc, #292]	; (821a8 <prvTimerTask+0x15c>)
   82082:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82084:	4b45      	ldr	r3, [pc, #276]	; (8219c <prvTimerTask+0x150>)
   82086:	681b      	ldr	r3, [r3, #0]
   82088:	68db      	ldr	r3, [r3, #12]
   8208a:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   8208c:	1d20      	adds	r0, r4, #4
   8208e:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82090:	69e3      	ldr	r3, [r4, #28]
   82092:	2b01      	cmp	r3, #1
   82094:	d115      	bne.n	820c2 <prvTimerTask+0x76>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   82096:	8b21      	ldrh	r1, [r4, #24]
   82098:	4431      	add	r1, r6
   8209a:	4620      	mov	r0, r4
   8209c:	b289      	uxth	r1, r1
   8209e:	463a      	mov	r2, r7
   820a0:	4633      	mov	r3, r6
   820a2:	4f42      	ldr	r7, [pc, #264]	; (821ac <prvTimerTask+0x160>)
   820a4:	47b8      	blx	r7
   820a6:	2801      	cmp	r0, #1
   820a8:	d10b      	bne.n	820c2 <prvTimerTask+0x76>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   820aa:	2300      	movs	r3, #0
   820ac:	9300      	str	r3, [sp, #0]
   820ae:	4620      	mov	r0, r4
   820b0:	4619      	mov	r1, r3
   820b2:	4632      	mov	r2, r6
   820b4:	4e3e      	ldr	r6, [pc, #248]	; (821b0 <prvTimerTask+0x164>)
   820b6:	47b0      	blx	r6
			configASSERT( xResult );
   820b8:	b918      	cbnz	r0, 820c2 <prvTimerTask+0x76>
   820ba:	4b3e      	ldr	r3, [pc, #248]	; (821b4 <prvTimerTask+0x168>)
   820bc:	4798      	blx	r3
   820be:	bf00      	nop
   820c0:	e7fd      	b.n	820be <prvTimerTask+0x72>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   820c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   820c4:	4620      	mov	r0, r4
   820c6:	4798      	blx	r3
   820c8:	e00d      	b.n	820e6 <prvTimerTask+0x9a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   820ca:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   820cc:	1bf1      	subs	r1, r6, r7
   820ce:	6828      	ldr	r0, [r5, #0]
   820d0:	b289      	uxth	r1, r1
   820d2:	4b39      	ldr	r3, [pc, #228]	; (821b8 <prvTimerTask+0x16c>)
   820d4:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   820d6:	4b34      	ldr	r3, [pc, #208]	; (821a8 <prvTimerTask+0x15c>)
   820d8:	4798      	blx	r3
   820da:	b920      	cbnz	r0, 820e6 <prvTimerTask+0x9a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   820dc:	4b37      	ldr	r3, [pc, #220]	; (821bc <prvTimerTask+0x170>)
   820de:	4798      	blx	r3
   820e0:	e001      	b.n	820e6 <prvTimerTask+0x9a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   820e2:	4b31      	ldr	r3, [pc, #196]	; (821a8 <prvTimerTask+0x15c>)
   820e4:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   820e6:	a802      	add	r0, sp, #8
   820e8:	4b2e      	ldr	r3, [pc, #184]	; (821a4 <prvTimerTask+0x158>)
   820ea:	4798      	blx	r3
   820ec:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   820ee:	4e34      	ldr	r6, [pc, #208]	; (821c0 <prvTimerTask+0x174>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   820f0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 821ac <prvTimerTask+0x160>
   820f4:	e03e      	b.n	82174 <prvTimerTask+0x128>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   820f6:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   820f8:	b11c      	cbz	r4, 82102 <prvTimerTask+0xb6>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   820fa:	6961      	ldr	r1, [r4, #20]
   820fc:	b109      	cbz	r1, 82102 <prvTimerTask+0xb6>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   820fe:	1d20      	adds	r0, r4, #4
   82100:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   82102:	9903      	ldr	r1, [sp, #12]
   82104:	2902      	cmp	r1, #2
   82106:	d023      	beq.n	82150 <prvTimerTask+0x104>
   82108:	2903      	cmp	r1, #3
   8210a:	d030      	beq.n	8216e <prvTimerTask+0x122>
   8210c:	2900      	cmp	r1, #0
   8210e:	d131      	bne.n	82174 <prvTimerTask+0x128>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   82110:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   82114:	8b21      	ldrh	r1, [r4, #24]
   82116:	4419      	add	r1, r3
   82118:	4620      	mov	r0, r4
   8211a:	b289      	uxth	r1, r1
   8211c:	463a      	mov	r2, r7
   8211e:	47c8      	blx	r9
   82120:	2801      	cmp	r0, #1
   82122:	d127      	bne.n	82174 <prvTimerTask+0x128>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82124:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82126:	4620      	mov	r0, r4
   82128:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8212a:	69e3      	ldr	r3, [r4, #28]
   8212c:	2b01      	cmp	r3, #1
   8212e:	d121      	bne.n	82174 <prvTimerTask+0x128>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   82130:	8b22      	ldrh	r2, [r4, #24]
   82132:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   82136:	441a      	add	r2, r3
   82138:	2300      	movs	r3, #0
   8213a:	9300      	str	r3, [sp, #0]
   8213c:	4620      	mov	r0, r4
   8213e:	4619      	mov	r1, r3
   82140:	b292      	uxth	r2, r2
   82142:	4c1b      	ldr	r4, [pc, #108]	; (821b0 <prvTimerTask+0x164>)
   82144:	47a0      	blx	r4
						configASSERT( xResult );
   82146:	b9a8      	cbnz	r0, 82174 <prvTimerTask+0x128>
   82148:	4b1a      	ldr	r3, [pc, #104]	; (821b4 <prvTimerTask+0x168>)
   8214a:	4798      	blx	r3
   8214c:	bf00      	nop
   8214e:	e7fd      	b.n	8214c <prvTimerTask+0x100>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   82150:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   82154:	8323      	strh	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   82156:	b91b      	cbnz	r3, 82160 <prvTimerTask+0x114>
   82158:	4b16      	ldr	r3, [pc, #88]	; (821b4 <prvTimerTask+0x168>)
   8215a:	4798      	blx	r3
   8215c:	bf00      	nop
   8215e:	e7fd      	b.n	8215c <prvTimerTask+0x110>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82160:	18f9      	adds	r1, r7, r3
   82162:	4620      	mov	r0, r4
   82164:	b289      	uxth	r1, r1
   82166:	463a      	mov	r2, r7
   82168:	463b      	mov	r3, r7
   8216a:	47c8      	blx	r9
   8216c:	e002      	b.n	82174 <prvTimerTask+0x128>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   8216e:	4620      	mov	r0, r4
   82170:	4b14      	ldr	r3, [pc, #80]	; (821c4 <prvTimerTask+0x178>)
   82172:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82174:	6828      	ldr	r0, [r5, #0]
   82176:	a903      	add	r1, sp, #12
   82178:	2200      	movs	r2, #0
   8217a:	4613      	mov	r3, r2
   8217c:	47b0      	blx	r6
   8217e:	2800      	cmp	r0, #0
   82180:	d1b9      	bne.n	820f6 <prvTimerTask+0xaa>
   82182:	e769      	b.n	82058 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82184:	4b06      	ldr	r3, [pc, #24]	; (821a0 <prvTimerTask+0x154>)
   82186:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82188:	a803      	add	r0, sp, #12
   8218a:	4b06      	ldr	r3, [pc, #24]	; (821a4 <prvTimerTask+0x158>)
   8218c:	4798      	blx	r3
   8218e:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82190:	9b03      	ldr	r3, [sp, #12]
   82192:	2b00      	cmp	r3, #0
   82194:	d099      	beq.n	820ca <prvTimerTask+0x7e>
   82196:	e7a4      	b.n	820e2 <prvTimerTask+0x96>
   82198:	20078bb8 	.word	0x20078bb8
   8219c:	20078b88 	.word	0x20078b88
   821a0:	00081749 	.word	0x00081749
   821a4:	00081f91 	.word	0x00081f91
   821a8:	000818a5 	.word	0x000818a5
   821ac:	00081e41 	.word	0x00081e41
   821b0:	00081f39 	.word	0x00081f39
   821b4:	00080cd5 	.word	0x00080cd5
   821b8:	0008142d 	.word	0x0008142d
   821bc:	00080cc5 	.word	0x00080cc5
   821c0:	000812c9 	.word	0x000812c9
   821c4:	00080ef5 	.word	0x00080ef5
   821c8:	00080c4d 	.word	0x00080c4d

000821cc <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   821cc:	b500      	push	{lr}
   821ce:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   821d0:	4813      	ldr	r0, [pc, #76]	; (82220 <USART0_Handler+0x54>)
   821d2:	f10d 0107 	add.w	r1, sp, #7
   821d6:	2201      	movs	r2, #1
   821d8:	4b12      	ldr	r3, [pc, #72]	; (82224 <USART0_Handler+0x58>)
   821da:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   821dc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   821de:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   821e2:	2200      	movs	r2, #0
   821e4:	4b10      	ldr	r3, [pc, #64]	; (82228 <USART0_Handler+0x5c>)
   821e6:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   821e8:	4b10      	ldr	r3, [pc, #64]	; (8222c <USART0_Handler+0x60>)
   821ea:	781a      	ldrb	r2, [r3, #0]
   821ec:	3201      	adds	r2, #1
   821ee:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   821f0:	4b0f      	ldr	r3, [pc, #60]	; (82230 <USART0_Handler+0x64>)
   821f2:	781b      	ldrb	r3, [r3, #0]
   821f4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   821f8:	4a0e      	ldr	r2, [pc, #56]	; (82234 <USART0_Handler+0x68>)
   821fa:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   821fc:	2b9b      	cmp	r3, #155	; 0x9b
   821fe:	d103      	bne.n	82208 <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   82200:	2200      	movs	r2, #0
   82202:	4b0b      	ldr	r3, [pc, #44]	; (82230 <USART0_Handler+0x64>)
   82204:	701a      	strb	r2, [r3, #0]
   82206:	e002      	b.n	8220e <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   82208:	3301      	adds	r3, #1
   8220a:	4a09      	ldr	r2, [pc, #36]	; (82230 <USART0_Handler+0x64>)
   8220c:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   8220e:	2201      	movs	r2, #1
   82210:	4b05      	ldr	r3, [pc, #20]	; (82228 <USART0_Handler+0x5c>)
   82212:	701a      	strb	r2, [r3, #0]
   82214:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   82218:	b662      	cpsie	i
}
   8221a:	b003      	add	sp, #12
   8221c:	f85d fb04 	ldr.w	pc, [sp], #4
   82220:	40098000 	.word	0x40098000
   82224:	0008042d 	.word	0x0008042d
   82228:	2007012c 	.word	0x2007012c
   8222c:	20078c5d 	.word	0x20078c5d
   82230:	20078c5c 	.word	0x20078c5c
   82234:	20078bc0 	.word	0x20078bc0

00082238 <main>:
#include "Motor/Motorfunctions.h"
#include "Task/task_soundsensor.h"
#include "Task/task_blink.h"

int main (void)
{
   82238:	b500      	push	{lr}
   8223a:	b085      	sub	sp, #20
	//alla inits
	board_init();
   8223c:	4b16      	ldr	r3, [pc, #88]	; (82298 <main+0x60>)
   8223e:	4798      	blx	r3
	sysclk_init();
   82240:	4b16      	ldr	r3, [pc, #88]	; (8229c <main+0x64>)
   82242:	4798      	blx	r3
	init_sensor();
   82244:	4b16      	ldr	r3, [pc, #88]	; (822a0 <main+0x68>)
   82246:	4798      	blx	r3
	delayInit();
   82248:	4b16      	ldr	r3, [pc, #88]	; (822a4 <main+0x6c>)
   8224a:	4798      	blx	r3
	initMotor();
   8224c:	4b16      	ldr	r3, [pc, #88]	; (822a8 <main+0x70>)
   8224e:	4798      	blx	r3
   82250:	200b      	movs	r0, #11
   82252:	4c16      	ldr	r4, [pc, #88]	; (822ac <main+0x74>)
   82254:	47a0      	blx	r4
   82256:	200c      	movs	r0, #12
   82258:	47a0      	blx	r4
   8225a:	200d      	movs	r0, #13
   8225c:	47a0      	blx	r4
   8225e:	200e      	movs	r0, #14
   82260:	47a0      	blx	r4
	ioport_init();
	
	xTaskCreate(task_soundsensor,(const signed char* const) "Soundsensor",TASK_SOUNDSENSOR_STACK_SIZE,NULL,TASK_SOUNDSENSOR_STACK_PRIORITY,NULL);
   82262:	2302      	movs	r3, #2
   82264:	9300      	str	r3, [sp, #0]
   82266:	2400      	movs	r4, #0
   82268:	9401      	str	r4, [sp, #4]
   8226a:	9402      	str	r4, [sp, #8]
   8226c:	9403      	str	r4, [sp, #12]
   8226e:	4810      	ldr	r0, [pc, #64]	; (822b0 <main+0x78>)
   82270:	4910      	ldr	r1, [pc, #64]	; (822b4 <main+0x7c>)
   82272:	f44f 7280 	mov.w	r2, #256	; 0x100
   82276:	4623      	mov	r3, r4
   82278:	4d0f      	ldr	r5, [pc, #60]	; (822b8 <main+0x80>)
   8227a:	47a8      	blx	r5
	xTaskCreate(task_blink,(const signed char* const) "BlINK",TASK_BLINK_STACK_SIZE,NULL,TASK_BLINK_PRIORITY,NULL);
   8227c:	2301      	movs	r3, #1
   8227e:	9300      	str	r3, [sp, #0]
   82280:	9401      	str	r4, [sp, #4]
   82282:	9402      	str	r4, [sp, #8]
   82284:	9403      	str	r4, [sp, #12]
   82286:	480d      	ldr	r0, [pc, #52]	; (822bc <main+0x84>)
   82288:	490d      	ldr	r1, [pc, #52]	; (822c0 <main+0x88>)
   8228a:	f44f 7280 	mov.w	r2, #256	; 0x100
   8228e:	4623      	mov	r3, r4
   82290:	47a8      	blx	r5
	vTaskStartScheduler();
   82292:	4b0c      	ldr	r3, [pc, #48]	; (822c4 <main+0x8c>)
   82294:	4798      	blx	r3
   82296:	e7fe      	b.n	82296 <main+0x5e>
   82298:	000804f1 	.word	0x000804f1
   8229c:	000803c9 	.word	0x000803c9
   822a0:	00080309 	.word	0x00080309
   822a4:	00080149 	.word	0x00080149
   822a8:	000801c1 	.word	0x000801c1
   822ac:	00080909 	.word	0x00080909
   822b0:	00080329 	.word	0x00080329
   822b4:	000835a8 	.word	0x000835a8
   822b8:	000814d5 	.word	0x000814d5
   822bc:	00080265 	.word	0x00080265
   822c0:	000835b4 	.word	0x000835b4
   822c4:	000816dd 	.word	0x000816dd

000822c8 <__aeabi_drsub>:
   822c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   822cc:	e002      	b.n	822d4 <__adddf3>
   822ce:	bf00      	nop

000822d0 <__aeabi_dsub>:
   822d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000822d4 <__adddf3>:
   822d4:	b530      	push	{r4, r5, lr}
   822d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   822da:	ea4f 0543 	mov.w	r5, r3, lsl #1
   822de:	ea94 0f05 	teq	r4, r5
   822e2:	bf08      	it	eq
   822e4:	ea90 0f02 	teqeq	r0, r2
   822e8:	bf1f      	itttt	ne
   822ea:	ea54 0c00 	orrsne.w	ip, r4, r0
   822ee:	ea55 0c02 	orrsne.w	ip, r5, r2
   822f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   822f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   822fa:	f000 80e2 	beq.w	824c2 <__adddf3+0x1ee>
   822fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   82302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   82306:	bfb8      	it	lt
   82308:	426d      	neglt	r5, r5
   8230a:	dd0c      	ble.n	82326 <__adddf3+0x52>
   8230c:	442c      	add	r4, r5
   8230e:	ea80 0202 	eor.w	r2, r0, r2
   82312:	ea81 0303 	eor.w	r3, r1, r3
   82316:	ea82 0000 	eor.w	r0, r2, r0
   8231a:	ea83 0101 	eor.w	r1, r3, r1
   8231e:	ea80 0202 	eor.w	r2, r0, r2
   82322:	ea81 0303 	eor.w	r3, r1, r3
   82326:	2d36      	cmp	r5, #54	; 0x36
   82328:	bf88      	it	hi
   8232a:	bd30      	pophi	{r4, r5, pc}
   8232c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82330:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   82338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8233c:	d002      	beq.n	82344 <__adddf3+0x70>
   8233e:	4240      	negs	r0, r0
   82340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   82348:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8234c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   82350:	d002      	beq.n	82358 <__adddf3+0x84>
   82352:	4252      	negs	r2, r2
   82354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   82358:	ea94 0f05 	teq	r4, r5
   8235c:	f000 80a7 	beq.w	824ae <__adddf3+0x1da>
   82360:	f1a4 0401 	sub.w	r4, r4, #1
   82364:	f1d5 0e20 	rsbs	lr, r5, #32
   82368:	db0d      	blt.n	82386 <__adddf3+0xb2>
   8236a:	fa02 fc0e 	lsl.w	ip, r2, lr
   8236e:	fa22 f205 	lsr.w	r2, r2, r5
   82372:	1880      	adds	r0, r0, r2
   82374:	f141 0100 	adc.w	r1, r1, #0
   82378:	fa03 f20e 	lsl.w	r2, r3, lr
   8237c:	1880      	adds	r0, r0, r2
   8237e:	fa43 f305 	asr.w	r3, r3, r5
   82382:	4159      	adcs	r1, r3
   82384:	e00e      	b.n	823a4 <__adddf3+0xd0>
   82386:	f1a5 0520 	sub.w	r5, r5, #32
   8238a:	f10e 0e20 	add.w	lr, lr, #32
   8238e:	2a01      	cmp	r2, #1
   82390:	fa03 fc0e 	lsl.w	ip, r3, lr
   82394:	bf28      	it	cs
   82396:	f04c 0c02 	orrcs.w	ip, ip, #2
   8239a:	fa43 f305 	asr.w	r3, r3, r5
   8239e:	18c0      	adds	r0, r0, r3
   823a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   823a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   823a8:	d507      	bpl.n	823ba <__adddf3+0xe6>
   823aa:	f04f 0e00 	mov.w	lr, #0
   823ae:	f1dc 0c00 	rsbs	ip, ip, #0
   823b2:	eb7e 0000 	sbcs.w	r0, lr, r0
   823b6:	eb6e 0101 	sbc.w	r1, lr, r1
   823ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   823be:	d31b      	bcc.n	823f8 <__adddf3+0x124>
   823c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   823c4:	d30c      	bcc.n	823e0 <__adddf3+0x10c>
   823c6:	0849      	lsrs	r1, r1, #1
   823c8:	ea5f 0030 	movs.w	r0, r0, rrx
   823cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   823d0:	f104 0401 	add.w	r4, r4, #1
   823d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   823d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   823dc:	f080 809a 	bcs.w	82514 <__adddf3+0x240>
   823e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   823e4:	bf08      	it	eq
   823e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   823ea:	f150 0000 	adcs.w	r0, r0, #0
   823ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   823f2:	ea41 0105 	orr.w	r1, r1, r5
   823f6:	bd30      	pop	{r4, r5, pc}
   823f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   823fc:	4140      	adcs	r0, r0
   823fe:	eb41 0101 	adc.w	r1, r1, r1
   82402:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82406:	f1a4 0401 	sub.w	r4, r4, #1
   8240a:	d1e9      	bne.n	823e0 <__adddf3+0x10c>
   8240c:	f091 0f00 	teq	r1, #0
   82410:	bf04      	itt	eq
   82412:	4601      	moveq	r1, r0
   82414:	2000      	moveq	r0, #0
   82416:	fab1 f381 	clz	r3, r1
   8241a:	bf08      	it	eq
   8241c:	3320      	addeq	r3, #32
   8241e:	f1a3 030b 	sub.w	r3, r3, #11
   82422:	f1b3 0220 	subs.w	r2, r3, #32
   82426:	da0c      	bge.n	82442 <__adddf3+0x16e>
   82428:	320c      	adds	r2, #12
   8242a:	dd08      	ble.n	8243e <__adddf3+0x16a>
   8242c:	f102 0c14 	add.w	ip, r2, #20
   82430:	f1c2 020c 	rsb	r2, r2, #12
   82434:	fa01 f00c 	lsl.w	r0, r1, ip
   82438:	fa21 f102 	lsr.w	r1, r1, r2
   8243c:	e00c      	b.n	82458 <__adddf3+0x184>
   8243e:	f102 0214 	add.w	r2, r2, #20
   82442:	bfd8      	it	le
   82444:	f1c2 0c20 	rsble	ip, r2, #32
   82448:	fa01 f102 	lsl.w	r1, r1, r2
   8244c:	fa20 fc0c 	lsr.w	ip, r0, ip
   82450:	bfdc      	itt	le
   82452:	ea41 010c 	orrle.w	r1, r1, ip
   82456:	4090      	lslle	r0, r2
   82458:	1ae4      	subs	r4, r4, r3
   8245a:	bfa2      	ittt	ge
   8245c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   82460:	4329      	orrge	r1, r5
   82462:	bd30      	popge	{r4, r5, pc}
   82464:	ea6f 0404 	mvn.w	r4, r4
   82468:	3c1f      	subs	r4, #31
   8246a:	da1c      	bge.n	824a6 <__adddf3+0x1d2>
   8246c:	340c      	adds	r4, #12
   8246e:	dc0e      	bgt.n	8248e <__adddf3+0x1ba>
   82470:	f104 0414 	add.w	r4, r4, #20
   82474:	f1c4 0220 	rsb	r2, r4, #32
   82478:	fa20 f004 	lsr.w	r0, r0, r4
   8247c:	fa01 f302 	lsl.w	r3, r1, r2
   82480:	ea40 0003 	orr.w	r0, r0, r3
   82484:	fa21 f304 	lsr.w	r3, r1, r4
   82488:	ea45 0103 	orr.w	r1, r5, r3
   8248c:	bd30      	pop	{r4, r5, pc}
   8248e:	f1c4 040c 	rsb	r4, r4, #12
   82492:	f1c4 0220 	rsb	r2, r4, #32
   82496:	fa20 f002 	lsr.w	r0, r0, r2
   8249a:	fa01 f304 	lsl.w	r3, r1, r4
   8249e:	ea40 0003 	orr.w	r0, r0, r3
   824a2:	4629      	mov	r1, r5
   824a4:	bd30      	pop	{r4, r5, pc}
   824a6:	fa21 f004 	lsr.w	r0, r1, r4
   824aa:	4629      	mov	r1, r5
   824ac:	bd30      	pop	{r4, r5, pc}
   824ae:	f094 0f00 	teq	r4, #0
   824b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   824b6:	bf06      	itte	eq
   824b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   824bc:	3401      	addeq	r4, #1
   824be:	3d01      	subne	r5, #1
   824c0:	e74e      	b.n	82360 <__adddf3+0x8c>
   824c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   824c6:	bf18      	it	ne
   824c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   824cc:	d029      	beq.n	82522 <__adddf3+0x24e>
   824ce:	ea94 0f05 	teq	r4, r5
   824d2:	bf08      	it	eq
   824d4:	ea90 0f02 	teqeq	r0, r2
   824d8:	d005      	beq.n	824e6 <__adddf3+0x212>
   824da:	ea54 0c00 	orrs.w	ip, r4, r0
   824de:	bf04      	itt	eq
   824e0:	4619      	moveq	r1, r3
   824e2:	4610      	moveq	r0, r2
   824e4:	bd30      	pop	{r4, r5, pc}
   824e6:	ea91 0f03 	teq	r1, r3
   824ea:	bf1e      	ittt	ne
   824ec:	2100      	movne	r1, #0
   824ee:	2000      	movne	r0, #0
   824f0:	bd30      	popne	{r4, r5, pc}
   824f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   824f6:	d105      	bne.n	82504 <__adddf3+0x230>
   824f8:	0040      	lsls	r0, r0, #1
   824fa:	4149      	adcs	r1, r1
   824fc:	bf28      	it	cs
   824fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   82502:	bd30      	pop	{r4, r5, pc}
   82504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   82508:	bf3c      	itt	cc
   8250a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8250e:	bd30      	popcc	{r4, r5, pc}
   82510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   82518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8251c:	f04f 0000 	mov.w	r0, #0
   82520:	bd30      	pop	{r4, r5, pc}
   82522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82526:	bf1a      	itte	ne
   82528:	4619      	movne	r1, r3
   8252a:	4610      	movne	r0, r2
   8252c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   82530:	bf1c      	itt	ne
   82532:	460b      	movne	r3, r1
   82534:	4602      	movne	r2, r0
   82536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8253a:	bf06      	itte	eq
   8253c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   82540:	ea91 0f03 	teqeq	r1, r3
   82544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   82548:	bd30      	pop	{r4, r5, pc}
   8254a:	bf00      	nop

0008254c <__aeabi_ui2d>:
   8254c:	f090 0f00 	teq	r0, #0
   82550:	bf04      	itt	eq
   82552:	2100      	moveq	r1, #0
   82554:	4770      	bxeq	lr
   82556:	b530      	push	{r4, r5, lr}
   82558:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8255c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82560:	f04f 0500 	mov.w	r5, #0
   82564:	f04f 0100 	mov.w	r1, #0
   82568:	e750      	b.n	8240c <__adddf3+0x138>
   8256a:	bf00      	nop

0008256c <__aeabi_i2d>:
   8256c:	f090 0f00 	teq	r0, #0
   82570:	bf04      	itt	eq
   82572:	2100      	moveq	r1, #0
   82574:	4770      	bxeq	lr
   82576:	b530      	push	{r4, r5, lr}
   82578:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8257c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   82584:	bf48      	it	mi
   82586:	4240      	negmi	r0, r0
   82588:	f04f 0100 	mov.w	r1, #0
   8258c:	e73e      	b.n	8240c <__adddf3+0x138>
   8258e:	bf00      	nop

00082590 <__aeabi_f2d>:
   82590:	0042      	lsls	r2, r0, #1
   82592:	ea4f 01e2 	mov.w	r1, r2, asr #3
   82596:	ea4f 0131 	mov.w	r1, r1, rrx
   8259a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8259e:	bf1f      	itttt	ne
   825a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   825a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   825a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   825ac:	4770      	bxne	lr
   825ae:	f092 0f00 	teq	r2, #0
   825b2:	bf14      	ite	ne
   825b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   825b8:	4770      	bxeq	lr
   825ba:	b530      	push	{r4, r5, lr}
   825bc:	f44f 7460 	mov.w	r4, #896	; 0x380
   825c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   825c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   825c8:	e720      	b.n	8240c <__adddf3+0x138>
   825ca:	bf00      	nop

000825cc <__aeabi_ul2d>:
   825cc:	ea50 0201 	orrs.w	r2, r0, r1
   825d0:	bf08      	it	eq
   825d2:	4770      	bxeq	lr
   825d4:	b530      	push	{r4, r5, lr}
   825d6:	f04f 0500 	mov.w	r5, #0
   825da:	e00a      	b.n	825f2 <__aeabi_l2d+0x16>

000825dc <__aeabi_l2d>:
   825dc:	ea50 0201 	orrs.w	r2, r0, r1
   825e0:	bf08      	it	eq
   825e2:	4770      	bxeq	lr
   825e4:	b530      	push	{r4, r5, lr}
   825e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   825ea:	d502      	bpl.n	825f2 <__aeabi_l2d+0x16>
   825ec:	4240      	negs	r0, r0
   825ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   825f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   825f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   825fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   825fe:	f43f aedc 	beq.w	823ba <__adddf3+0xe6>
   82602:	f04f 0203 	mov.w	r2, #3
   82606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8260a:	bf18      	it	ne
   8260c:	3203      	addne	r2, #3
   8260e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82612:	bf18      	it	ne
   82614:	3203      	addne	r2, #3
   82616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8261a:	f1c2 0320 	rsb	r3, r2, #32
   8261e:	fa00 fc03 	lsl.w	ip, r0, r3
   82622:	fa20 f002 	lsr.w	r0, r0, r2
   82626:	fa01 fe03 	lsl.w	lr, r1, r3
   8262a:	ea40 000e 	orr.w	r0, r0, lr
   8262e:	fa21 f102 	lsr.w	r1, r1, r2
   82632:	4414      	add	r4, r2
   82634:	e6c1      	b.n	823ba <__adddf3+0xe6>
   82636:	bf00      	nop

00082638 <__aeabi_dmul>:
   82638:	b570      	push	{r4, r5, r6, lr}
   8263a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8263e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   82642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82646:	bf1d      	ittte	ne
   82648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8264c:	ea94 0f0c 	teqne	r4, ip
   82650:	ea95 0f0c 	teqne	r5, ip
   82654:	f000 f8de 	bleq	82814 <__aeabi_dmul+0x1dc>
   82658:	442c      	add	r4, r5
   8265a:	ea81 0603 	eor.w	r6, r1, r3
   8265e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   82662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   82666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8266a:	bf18      	it	ne
   8266c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   82670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82678:	d038      	beq.n	826ec <__aeabi_dmul+0xb4>
   8267a:	fba0 ce02 	umull	ip, lr, r0, r2
   8267e:	f04f 0500 	mov.w	r5, #0
   82682:	fbe1 e502 	umlal	lr, r5, r1, r2
   82686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8268a:	fbe0 e503 	umlal	lr, r5, r0, r3
   8268e:	f04f 0600 	mov.w	r6, #0
   82692:	fbe1 5603 	umlal	r5, r6, r1, r3
   82696:	f09c 0f00 	teq	ip, #0
   8269a:	bf18      	it	ne
   8269c:	f04e 0e01 	orrne.w	lr, lr, #1
   826a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   826a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   826a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   826ac:	d204      	bcs.n	826b8 <__aeabi_dmul+0x80>
   826ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   826b2:	416d      	adcs	r5, r5
   826b4:	eb46 0606 	adc.w	r6, r6, r6
   826b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   826bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   826c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   826c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   826c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   826cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   826d0:	bf88      	it	hi
   826d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   826d6:	d81e      	bhi.n	82716 <__aeabi_dmul+0xde>
   826d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   826dc:	bf08      	it	eq
   826de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   826e2:	f150 0000 	adcs.w	r0, r0, #0
   826e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   826ea:	bd70      	pop	{r4, r5, r6, pc}
   826ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   826f0:	ea46 0101 	orr.w	r1, r6, r1
   826f4:	ea40 0002 	orr.w	r0, r0, r2
   826f8:	ea81 0103 	eor.w	r1, r1, r3
   826fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   82700:	bfc2      	ittt	gt
   82702:	ebd4 050c 	rsbsgt	r5, r4, ip
   82706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8270a:	bd70      	popgt	{r4, r5, r6, pc}
   8270c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82710:	f04f 0e00 	mov.w	lr, #0
   82714:	3c01      	subs	r4, #1
   82716:	f300 80ab 	bgt.w	82870 <__aeabi_dmul+0x238>
   8271a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8271e:	bfde      	ittt	le
   82720:	2000      	movle	r0, #0
   82722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   82726:	bd70      	pople	{r4, r5, r6, pc}
   82728:	f1c4 0400 	rsb	r4, r4, #0
   8272c:	3c20      	subs	r4, #32
   8272e:	da35      	bge.n	8279c <__aeabi_dmul+0x164>
   82730:	340c      	adds	r4, #12
   82732:	dc1b      	bgt.n	8276c <__aeabi_dmul+0x134>
   82734:	f104 0414 	add.w	r4, r4, #20
   82738:	f1c4 0520 	rsb	r5, r4, #32
   8273c:	fa00 f305 	lsl.w	r3, r0, r5
   82740:	fa20 f004 	lsr.w	r0, r0, r4
   82744:	fa01 f205 	lsl.w	r2, r1, r5
   82748:	ea40 0002 	orr.w	r0, r0, r2
   8274c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   82750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   82758:	fa21 f604 	lsr.w	r6, r1, r4
   8275c:	eb42 0106 	adc.w	r1, r2, r6
   82760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82764:	bf08      	it	eq
   82766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8276a:	bd70      	pop	{r4, r5, r6, pc}
   8276c:	f1c4 040c 	rsb	r4, r4, #12
   82770:	f1c4 0520 	rsb	r5, r4, #32
   82774:	fa00 f304 	lsl.w	r3, r0, r4
   82778:	fa20 f005 	lsr.w	r0, r0, r5
   8277c:	fa01 f204 	lsl.w	r2, r1, r4
   82780:	ea40 0002 	orr.w	r0, r0, r2
   82784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8278c:	f141 0100 	adc.w	r1, r1, #0
   82790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82794:	bf08      	it	eq
   82796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8279a:	bd70      	pop	{r4, r5, r6, pc}
   8279c:	f1c4 0520 	rsb	r5, r4, #32
   827a0:	fa00 f205 	lsl.w	r2, r0, r5
   827a4:	ea4e 0e02 	orr.w	lr, lr, r2
   827a8:	fa20 f304 	lsr.w	r3, r0, r4
   827ac:	fa01 f205 	lsl.w	r2, r1, r5
   827b0:	ea43 0302 	orr.w	r3, r3, r2
   827b4:	fa21 f004 	lsr.w	r0, r1, r4
   827b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   827bc:	fa21 f204 	lsr.w	r2, r1, r4
   827c0:	ea20 0002 	bic.w	r0, r0, r2
   827c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   827c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   827cc:	bf08      	it	eq
   827ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   827d2:	bd70      	pop	{r4, r5, r6, pc}
   827d4:	f094 0f00 	teq	r4, #0
   827d8:	d10f      	bne.n	827fa <__aeabi_dmul+0x1c2>
   827da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   827de:	0040      	lsls	r0, r0, #1
   827e0:	eb41 0101 	adc.w	r1, r1, r1
   827e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   827e8:	bf08      	it	eq
   827ea:	3c01      	subeq	r4, #1
   827ec:	d0f7      	beq.n	827de <__aeabi_dmul+0x1a6>
   827ee:	ea41 0106 	orr.w	r1, r1, r6
   827f2:	f095 0f00 	teq	r5, #0
   827f6:	bf18      	it	ne
   827f8:	4770      	bxne	lr
   827fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   827fe:	0052      	lsls	r2, r2, #1
   82800:	eb43 0303 	adc.w	r3, r3, r3
   82804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   82808:	bf08      	it	eq
   8280a:	3d01      	subeq	r5, #1
   8280c:	d0f7      	beq.n	827fe <__aeabi_dmul+0x1c6>
   8280e:	ea43 0306 	orr.w	r3, r3, r6
   82812:	4770      	bx	lr
   82814:	ea94 0f0c 	teq	r4, ip
   82818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8281c:	bf18      	it	ne
   8281e:	ea95 0f0c 	teqne	r5, ip
   82822:	d00c      	beq.n	8283e <__aeabi_dmul+0x206>
   82824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82828:	bf18      	it	ne
   8282a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8282e:	d1d1      	bne.n	827d4 <__aeabi_dmul+0x19c>
   82830:	ea81 0103 	eor.w	r1, r1, r3
   82834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82838:	f04f 0000 	mov.w	r0, #0
   8283c:	bd70      	pop	{r4, r5, r6, pc}
   8283e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82842:	bf06      	itte	eq
   82844:	4610      	moveq	r0, r2
   82846:	4619      	moveq	r1, r3
   82848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8284c:	d019      	beq.n	82882 <__aeabi_dmul+0x24a>
   8284e:	ea94 0f0c 	teq	r4, ip
   82852:	d102      	bne.n	8285a <__aeabi_dmul+0x222>
   82854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   82858:	d113      	bne.n	82882 <__aeabi_dmul+0x24a>
   8285a:	ea95 0f0c 	teq	r5, ip
   8285e:	d105      	bne.n	8286c <__aeabi_dmul+0x234>
   82860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   82864:	bf1c      	itt	ne
   82866:	4610      	movne	r0, r2
   82868:	4619      	movne	r1, r3
   8286a:	d10a      	bne.n	82882 <__aeabi_dmul+0x24a>
   8286c:	ea81 0103 	eor.w	r1, r1, r3
   82870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   82878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8287c:	f04f 0000 	mov.w	r0, #0
   82880:	bd70      	pop	{r4, r5, r6, pc}
   82882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   82886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8288a:	bd70      	pop	{r4, r5, r6, pc}

0008288c <__aeabi_ddiv>:
   8288c:	b570      	push	{r4, r5, r6, lr}
   8288e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   82896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8289a:	bf1d      	ittte	ne
   8289c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   828a0:	ea94 0f0c 	teqne	r4, ip
   828a4:	ea95 0f0c 	teqne	r5, ip
   828a8:	f000 f8a7 	bleq	829fa <__aeabi_ddiv+0x16e>
   828ac:	eba4 0405 	sub.w	r4, r4, r5
   828b0:	ea81 0e03 	eor.w	lr, r1, r3
   828b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   828b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   828bc:	f000 8088 	beq.w	829d0 <__aeabi_ddiv+0x144>
   828c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   828c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   828c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   828cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   828d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   828d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   828d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   828dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   828e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   828e4:	429d      	cmp	r5, r3
   828e6:	bf08      	it	eq
   828e8:	4296      	cmpeq	r6, r2
   828ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   828ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
   828f2:	d202      	bcs.n	828fa <__aeabi_ddiv+0x6e>
   828f4:	085b      	lsrs	r3, r3, #1
   828f6:	ea4f 0232 	mov.w	r2, r2, rrx
   828fa:	1ab6      	subs	r6, r6, r2
   828fc:	eb65 0503 	sbc.w	r5, r5, r3
   82900:	085b      	lsrs	r3, r3, #1
   82902:	ea4f 0232 	mov.w	r2, r2, rrx
   82906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8290a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8290e:	ebb6 0e02 	subs.w	lr, r6, r2
   82912:	eb75 0e03 	sbcs.w	lr, r5, r3
   82916:	bf22      	ittt	cs
   82918:	1ab6      	subcs	r6, r6, r2
   8291a:	4675      	movcs	r5, lr
   8291c:	ea40 000c 	orrcs.w	r0, r0, ip
   82920:	085b      	lsrs	r3, r3, #1
   82922:	ea4f 0232 	mov.w	r2, r2, rrx
   82926:	ebb6 0e02 	subs.w	lr, r6, r2
   8292a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8292e:	bf22      	ittt	cs
   82930:	1ab6      	subcs	r6, r6, r2
   82932:	4675      	movcs	r5, lr
   82934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   82938:	085b      	lsrs	r3, r3, #1
   8293a:	ea4f 0232 	mov.w	r2, r2, rrx
   8293e:	ebb6 0e02 	subs.w	lr, r6, r2
   82942:	eb75 0e03 	sbcs.w	lr, r5, r3
   82946:	bf22      	ittt	cs
   82948:	1ab6      	subcs	r6, r6, r2
   8294a:	4675      	movcs	r5, lr
   8294c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   82950:	085b      	lsrs	r3, r3, #1
   82952:	ea4f 0232 	mov.w	r2, r2, rrx
   82956:	ebb6 0e02 	subs.w	lr, r6, r2
   8295a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8295e:	bf22      	ittt	cs
   82960:	1ab6      	subcs	r6, r6, r2
   82962:	4675      	movcs	r5, lr
   82964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   82968:	ea55 0e06 	orrs.w	lr, r5, r6
   8296c:	d018      	beq.n	829a0 <__aeabi_ddiv+0x114>
   8296e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   82972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   82976:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8297a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8297e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   82982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   82986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8298a:	d1c0      	bne.n	8290e <__aeabi_ddiv+0x82>
   8298c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82990:	d10b      	bne.n	829aa <__aeabi_ddiv+0x11e>
   82992:	ea41 0100 	orr.w	r1, r1, r0
   82996:	f04f 0000 	mov.w	r0, #0
   8299a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8299e:	e7b6      	b.n	8290e <__aeabi_ddiv+0x82>
   829a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   829a4:	bf04      	itt	eq
   829a6:	4301      	orreq	r1, r0
   829a8:	2000      	moveq	r0, #0
   829aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   829ae:	bf88      	it	hi
   829b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   829b4:	f63f aeaf 	bhi.w	82716 <__aeabi_dmul+0xde>
   829b8:	ebb5 0c03 	subs.w	ip, r5, r3
   829bc:	bf04      	itt	eq
   829be:	ebb6 0c02 	subseq.w	ip, r6, r2
   829c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   829c6:	f150 0000 	adcs.w	r0, r0, #0
   829ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   829ce:	bd70      	pop	{r4, r5, r6, pc}
   829d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   829d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   829d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   829dc:	bfc2      	ittt	gt
   829de:	ebd4 050c 	rsbsgt	r5, r4, ip
   829e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   829e6:	bd70      	popgt	{r4, r5, r6, pc}
   829e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   829ec:	f04f 0e00 	mov.w	lr, #0
   829f0:	3c01      	subs	r4, #1
   829f2:	e690      	b.n	82716 <__aeabi_dmul+0xde>
   829f4:	ea45 0e06 	orr.w	lr, r5, r6
   829f8:	e68d      	b.n	82716 <__aeabi_dmul+0xde>
   829fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   829fe:	ea94 0f0c 	teq	r4, ip
   82a02:	bf08      	it	eq
   82a04:	ea95 0f0c 	teqeq	r5, ip
   82a08:	f43f af3b 	beq.w	82882 <__aeabi_dmul+0x24a>
   82a0c:	ea94 0f0c 	teq	r4, ip
   82a10:	d10a      	bne.n	82a28 <__aeabi_ddiv+0x19c>
   82a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   82a16:	f47f af34 	bne.w	82882 <__aeabi_dmul+0x24a>
   82a1a:	ea95 0f0c 	teq	r5, ip
   82a1e:	f47f af25 	bne.w	8286c <__aeabi_dmul+0x234>
   82a22:	4610      	mov	r0, r2
   82a24:	4619      	mov	r1, r3
   82a26:	e72c      	b.n	82882 <__aeabi_dmul+0x24a>
   82a28:	ea95 0f0c 	teq	r5, ip
   82a2c:	d106      	bne.n	82a3c <__aeabi_ddiv+0x1b0>
   82a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   82a32:	f43f aefd 	beq.w	82830 <__aeabi_dmul+0x1f8>
   82a36:	4610      	mov	r0, r2
   82a38:	4619      	mov	r1, r3
   82a3a:	e722      	b.n	82882 <__aeabi_dmul+0x24a>
   82a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82a40:	bf18      	it	ne
   82a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82a46:	f47f aec5 	bne.w	827d4 <__aeabi_dmul+0x19c>
   82a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   82a4e:	f47f af0d 	bne.w	8286c <__aeabi_dmul+0x234>
   82a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   82a56:	f47f aeeb 	bne.w	82830 <__aeabi_dmul+0x1f8>
   82a5a:	e712      	b.n	82882 <__aeabi_dmul+0x24a>

00082a5c <__aeabi_d2iz>:
   82a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   82a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   82a64:	d215      	bcs.n	82a92 <__aeabi_d2iz+0x36>
   82a66:	d511      	bpl.n	82a8c <__aeabi_d2iz+0x30>
   82a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   82a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   82a70:	d912      	bls.n	82a98 <__aeabi_d2iz+0x3c>
   82a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   82a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   82a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   82a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82a82:	fa23 f002 	lsr.w	r0, r3, r2
   82a86:	bf18      	it	ne
   82a88:	4240      	negne	r0, r0
   82a8a:	4770      	bx	lr
   82a8c:	f04f 0000 	mov.w	r0, #0
   82a90:	4770      	bx	lr
   82a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   82a96:	d105      	bne.n	82aa4 <__aeabi_d2iz+0x48>
   82a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   82a9c:	bf08      	it	eq
   82a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   82aa2:	4770      	bx	lr
   82aa4:	f04f 0000 	mov.w	r0, #0
   82aa8:	4770      	bx	lr
   82aaa:	bf00      	nop

00082aac <__libc_init_array>:
   82aac:	b570      	push	{r4, r5, r6, lr}
   82aae:	4e0f      	ldr	r6, [pc, #60]	; (82aec <__libc_init_array+0x40>)
   82ab0:	4d0f      	ldr	r5, [pc, #60]	; (82af0 <__libc_init_array+0x44>)
   82ab2:	1b76      	subs	r6, r6, r5
   82ab4:	10b6      	asrs	r6, r6, #2
   82ab6:	d007      	beq.n	82ac8 <__libc_init_array+0x1c>
   82ab8:	3d04      	subs	r5, #4
   82aba:	2400      	movs	r4, #0
   82abc:	3401      	adds	r4, #1
   82abe:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82ac2:	4798      	blx	r3
   82ac4:	42a6      	cmp	r6, r4
   82ac6:	d1f9      	bne.n	82abc <__libc_init_array+0x10>
   82ac8:	4e0a      	ldr	r6, [pc, #40]	; (82af4 <__libc_init_array+0x48>)
   82aca:	4d0b      	ldr	r5, [pc, #44]	; (82af8 <__libc_init_array+0x4c>)
   82acc:	f000 fd7a 	bl	835c4 <_init>
   82ad0:	1b76      	subs	r6, r6, r5
   82ad2:	10b6      	asrs	r6, r6, #2
   82ad4:	d008      	beq.n	82ae8 <__libc_init_array+0x3c>
   82ad6:	3d04      	subs	r5, #4
   82ad8:	2400      	movs	r4, #0
   82ada:	3401      	adds	r4, #1
   82adc:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82ae0:	4798      	blx	r3
   82ae2:	42a6      	cmp	r6, r4
   82ae4:	d1f9      	bne.n	82ada <__libc_init_array+0x2e>
   82ae6:	bd70      	pop	{r4, r5, r6, pc}
   82ae8:	bd70      	pop	{r4, r5, r6, pc}
   82aea:	bf00      	nop
   82aec:	000835d0 	.word	0x000835d0
   82af0:	000835d0 	.word	0x000835d0
   82af4:	000835d8 	.word	0x000835d8
   82af8:	000835d0 	.word	0x000835d0

00082afc <memcpy>:
   82afc:	4684      	mov	ip, r0
   82afe:	ea41 0300 	orr.w	r3, r1, r0
   82b02:	f013 0303 	ands.w	r3, r3, #3
   82b06:	d149      	bne.n	82b9c <memcpy+0xa0>
   82b08:	3a40      	subs	r2, #64	; 0x40
   82b0a:	d323      	bcc.n	82b54 <memcpy+0x58>
   82b0c:	680b      	ldr	r3, [r1, #0]
   82b0e:	6003      	str	r3, [r0, #0]
   82b10:	684b      	ldr	r3, [r1, #4]
   82b12:	6043      	str	r3, [r0, #4]
   82b14:	688b      	ldr	r3, [r1, #8]
   82b16:	6083      	str	r3, [r0, #8]
   82b18:	68cb      	ldr	r3, [r1, #12]
   82b1a:	60c3      	str	r3, [r0, #12]
   82b1c:	690b      	ldr	r3, [r1, #16]
   82b1e:	6103      	str	r3, [r0, #16]
   82b20:	694b      	ldr	r3, [r1, #20]
   82b22:	6143      	str	r3, [r0, #20]
   82b24:	698b      	ldr	r3, [r1, #24]
   82b26:	6183      	str	r3, [r0, #24]
   82b28:	69cb      	ldr	r3, [r1, #28]
   82b2a:	61c3      	str	r3, [r0, #28]
   82b2c:	6a0b      	ldr	r3, [r1, #32]
   82b2e:	6203      	str	r3, [r0, #32]
   82b30:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82b32:	6243      	str	r3, [r0, #36]	; 0x24
   82b34:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82b36:	6283      	str	r3, [r0, #40]	; 0x28
   82b38:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82b3a:	62c3      	str	r3, [r0, #44]	; 0x2c
   82b3c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82b3e:	6303      	str	r3, [r0, #48]	; 0x30
   82b40:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82b42:	6343      	str	r3, [r0, #52]	; 0x34
   82b44:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82b46:	6383      	str	r3, [r0, #56]	; 0x38
   82b48:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82b4a:	63c3      	str	r3, [r0, #60]	; 0x3c
   82b4c:	3040      	adds	r0, #64	; 0x40
   82b4e:	3140      	adds	r1, #64	; 0x40
   82b50:	3a40      	subs	r2, #64	; 0x40
   82b52:	d2db      	bcs.n	82b0c <memcpy+0x10>
   82b54:	3230      	adds	r2, #48	; 0x30
   82b56:	d30b      	bcc.n	82b70 <memcpy+0x74>
   82b58:	680b      	ldr	r3, [r1, #0]
   82b5a:	6003      	str	r3, [r0, #0]
   82b5c:	684b      	ldr	r3, [r1, #4]
   82b5e:	6043      	str	r3, [r0, #4]
   82b60:	688b      	ldr	r3, [r1, #8]
   82b62:	6083      	str	r3, [r0, #8]
   82b64:	68cb      	ldr	r3, [r1, #12]
   82b66:	60c3      	str	r3, [r0, #12]
   82b68:	3010      	adds	r0, #16
   82b6a:	3110      	adds	r1, #16
   82b6c:	3a10      	subs	r2, #16
   82b6e:	d2f3      	bcs.n	82b58 <memcpy+0x5c>
   82b70:	320c      	adds	r2, #12
   82b72:	d305      	bcc.n	82b80 <memcpy+0x84>
   82b74:	f851 3b04 	ldr.w	r3, [r1], #4
   82b78:	f840 3b04 	str.w	r3, [r0], #4
   82b7c:	3a04      	subs	r2, #4
   82b7e:	d2f9      	bcs.n	82b74 <memcpy+0x78>
   82b80:	3204      	adds	r2, #4
   82b82:	d008      	beq.n	82b96 <memcpy+0x9a>
   82b84:	07d2      	lsls	r2, r2, #31
   82b86:	bf1c      	itt	ne
   82b88:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82b8c:	f800 3b01 	strbne.w	r3, [r0], #1
   82b90:	d301      	bcc.n	82b96 <memcpy+0x9a>
   82b92:	880b      	ldrh	r3, [r1, #0]
   82b94:	8003      	strh	r3, [r0, #0]
   82b96:	4660      	mov	r0, ip
   82b98:	4770      	bx	lr
   82b9a:	bf00      	nop
   82b9c:	2a08      	cmp	r2, #8
   82b9e:	d313      	bcc.n	82bc8 <memcpy+0xcc>
   82ba0:	078b      	lsls	r3, r1, #30
   82ba2:	d0b1      	beq.n	82b08 <memcpy+0xc>
   82ba4:	f010 0303 	ands.w	r3, r0, #3
   82ba8:	d0ae      	beq.n	82b08 <memcpy+0xc>
   82baa:	f1c3 0304 	rsb	r3, r3, #4
   82bae:	1ad2      	subs	r2, r2, r3
   82bb0:	07db      	lsls	r3, r3, #31
   82bb2:	bf1c      	itt	ne
   82bb4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82bb8:	f800 3b01 	strbne.w	r3, [r0], #1
   82bbc:	d3a4      	bcc.n	82b08 <memcpy+0xc>
   82bbe:	f831 3b02 	ldrh.w	r3, [r1], #2
   82bc2:	f820 3b02 	strh.w	r3, [r0], #2
   82bc6:	e79f      	b.n	82b08 <memcpy+0xc>
   82bc8:	3a04      	subs	r2, #4
   82bca:	d3d9      	bcc.n	82b80 <memcpy+0x84>
   82bcc:	3a01      	subs	r2, #1
   82bce:	f811 3b01 	ldrb.w	r3, [r1], #1
   82bd2:	f800 3b01 	strb.w	r3, [r0], #1
   82bd6:	d2f9      	bcs.n	82bcc <memcpy+0xd0>
   82bd8:	780b      	ldrb	r3, [r1, #0]
   82bda:	7003      	strb	r3, [r0, #0]
   82bdc:	784b      	ldrb	r3, [r1, #1]
   82bde:	7043      	strb	r3, [r0, #1]
   82be0:	788b      	ldrb	r3, [r1, #2]
   82be2:	7083      	strb	r3, [r0, #2]
   82be4:	4660      	mov	r0, ip
   82be6:	4770      	bx	lr

00082be8 <memset>:
   82be8:	b4f0      	push	{r4, r5, r6, r7}
   82bea:	0784      	lsls	r4, r0, #30
   82bec:	d043      	beq.n	82c76 <memset+0x8e>
   82bee:	1e54      	subs	r4, r2, #1
   82bf0:	2a00      	cmp	r2, #0
   82bf2:	d03e      	beq.n	82c72 <memset+0x8a>
   82bf4:	b2cd      	uxtb	r5, r1
   82bf6:	4603      	mov	r3, r0
   82bf8:	e003      	b.n	82c02 <memset+0x1a>
   82bfa:	1e62      	subs	r2, r4, #1
   82bfc:	2c00      	cmp	r4, #0
   82bfe:	d038      	beq.n	82c72 <memset+0x8a>
   82c00:	4614      	mov	r4, r2
   82c02:	f803 5b01 	strb.w	r5, [r3], #1
   82c06:	079a      	lsls	r2, r3, #30
   82c08:	d1f7      	bne.n	82bfa <memset+0x12>
   82c0a:	2c03      	cmp	r4, #3
   82c0c:	d92a      	bls.n	82c64 <memset+0x7c>
   82c0e:	b2cd      	uxtb	r5, r1
   82c10:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82c14:	2c0f      	cmp	r4, #15
   82c16:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82c1a:	d915      	bls.n	82c48 <memset+0x60>
   82c1c:	f1a4 0710 	sub.w	r7, r4, #16
   82c20:	093f      	lsrs	r7, r7, #4
   82c22:	f103 0610 	add.w	r6, r3, #16
   82c26:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   82c2a:	461a      	mov	r2, r3
   82c2c:	6015      	str	r5, [r2, #0]
   82c2e:	6055      	str	r5, [r2, #4]
   82c30:	6095      	str	r5, [r2, #8]
   82c32:	60d5      	str	r5, [r2, #12]
   82c34:	3210      	adds	r2, #16
   82c36:	42b2      	cmp	r2, r6
   82c38:	d1f8      	bne.n	82c2c <memset+0x44>
   82c3a:	f004 040f 	and.w	r4, r4, #15
   82c3e:	3701      	adds	r7, #1
   82c40:	2c03      	cmp	r4, #3
   82c42:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   82c46:	d90d      	bls.n	82c64 <memset+0x7c>
   82c48:	461e      	mov	r6, r3
   82c4a:	4622      	mov	r2, r4
   82c4c:	3a04      	subs	r2, #4
   82c4e:	2a03      	cmp	r2, #3
   82c50:	f846 5b04 	str.w	r5, [r6], #4
   82c54:	d8fa      	bhi.n	82c4c <memset+0x64>
   82c56:	1f22      	subs	r2, r4, #4
   82c58:	f022 0203 	bic.w	r2, r2, #3
   82c5c:	3204      	adds	r2, #4
   82c5e:	4413      	add	r3, r2
   82c60:	f004 0403 	and.w	r4, r4, #3
   82c64:	b12c      	cbz	r4, 82c72 <memset+0x8a>
   82c66:	b2c9      	uxtb	r1, r1
   82c68:	441c      	add	r4, r3
   82c6a:	f803 1b01 	strb.w	r1, [r3], #1
   82c6e:	42a3      	cmp	r3, r4
   82c70:	d1fb      	bne.n	82c6a <memset+0x82>
   82c72:	bcf0      	pop	{r4, r5, r6, r7}
   82c74:	4770      	bx	lr
   82c76:	4614      	mov	r4, r2
   82c78:	4603      	mov	r3, r0
   82c7a:	e7c6      	b.n	82c0a <memset+0x22>

00082c7c <strncpy>:
   82c7c:	ea40 0301 	orr.w	r3, r0, r1
   82c80:	079b      	lsls	r3, r3, #30
   82c82:	b470      	push	{r4, r5, r6}
   82c84:	d12a      	bne.n	82cdc <strncpy+0x60>
   82c86:	2a03      	cmp	r2, #3
   82c88:	d928      	bls.n	82cdc <strncpy+0x60>
   82c8a:	460c      	mov	r4, r1
   82c8c:	4603      	mov	r3, r0
   82c8e:	4621      	mov	r1, r4
   82c90:	f854 5b04 	ldr.w	r5, [r4], #4
   82c94:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   82c98:	ea26 0605 	bic.w	r6, r6, r5
   82c9c:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   82ca0:	d105      	bne.n	82cae <strncpy+0x32>
   82ca2:	3a04      	subs	r2, #4
   82ca4:	2a03      	cmp	r2, #3
   82ca6:	f843 5b04 	str.w	r5, [r3], #4
   82caa:	4621      	mov	r1, r4
   82cac:	d8ef      	bhi.n	82c8e <strncpy+0x12>
   82cae:	b19a      	cbz	r2, 82cd8 <strncpy+0x5c>
   82cb0:	780c      	ldrb	r4, [r1, #0]
   82cb2:	3a01      	subs	r2, #1
   82cb4:	701c      	strb	r4, [r3, #0]
   82cb6:	3301      	adds	r3, #1
   82cb8:	b13c      	cbz	r4, 82cca <strncpy+0x4e>
   82cba:	b16a      	cbz	r2, 82cd8 <strncpy+0x5c>
   82cbc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   82cc0:	3a01      	subs	r2, #1
   82cc2:	f803 4b01 	strb.w	r4, [r3], #1
   82cc6:	2c00      	cmp	r4, #0
   82cc8:	d1f7      	bne.n	82cba <strncpy+0x3e>
   82cca:	b12a      	cbz	r2, 82cd8 <strncpy+0x5c>
   82ccc:	441a      	add	r2, r3
   82cce:	2100      	movs	r1, #0
   82cd0:	f803 1b01 	strb.w	r1, [r3], #1
   82cd4:	4293      	cmp	r3, r2
   82cd6:	d1fb      	bne.n	82cd0 <strncpy+0x54>
   82cd8:	bc70      	pop	{r4, r5, r6}
   82cda:	4770      	bx	lr
   82cdc:	4603      	mov	r3, r0
   82cde:	e7e6      	b.n	82cae <strncpy+0x32>

00082ce0 <register_fini>:
   82ce0:	4b02      	ldr	r3, [pc, #8]	; (82cec <register_fini+0xc>)
   82ce2:	b113      	cbz	r3, 82cea <register_fini+0xa>
   82ce4:	4802      	ldr	r0, [pc, #8]	; (82cf0 <register_fini+0x10>)
   82ce6:	f000 b805 	b.w	82cf4 <atexit>
   82cea:	4770      	bx	lr
   82cec:	00000000 	.word	0x00000000
   82cf0:	00082d01 	.word	0x00082d01

00082cf4 <atexit>:
   82cf4:	4601      	mov	r1, r0
   82cf6:	2000      	movs	r0, #0
   82cf8:	4602      	mov	r2, r0
   82cfa:	4603      	mov	r3, r0
   82cfc:	f000 bbec 	b.w	834d8 <__register_exitproc>

00082d00 <__libc_fini_array>:
   82d00:	b538      	push	{r3, r4, r5, lr}
   82d02:	4d09      	ldr	r5, [pc, #36]	; (82d28 <__libc_fini_array+0x28>)
   82d04:	4c09      	ldr	r4, [pc, #36]	; (82d2c <__libc_fini_array+0x2c>)
   82d06:	1b64      	subs	r4, r4, r5
   82d08:	10a4      	asrs	r4, r4, #2
   82d0a:	bf18      	it	ne
   82d0c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82d10:	d005      	beq.n	82d1e <__libc_fini_array+0x1e>
   82d12:	3c01      	subs	r4, #1
   82d14:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82d18:	4798      	blx	r3
   82d1a:	2c00      	cmp	r4, #0
   82d1c:	d1f9      	bne.n	82d12 <__libc_fini_array+0x12>
   82d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82d22:	f000 bc59 	b.w	835d8 <_fini>
   82d26:	bf00      	nop
   82d28:	000835e4 	.word	0x000835e4
   82d2c:	000835e8 	.word	0x000835e8

00082d30 <_malloc_trim_r>:
   82d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82d32:	4d23      	ldr	r5, [pc, #140]	; (82dc0 <_malloc_trim_r+0x90>)
   82d34:	460f      	mov	r7, r1
   82d36:	4604      	mov	r4, r0
   82d38:	f000 fbb8 	bl	834ac <__malloc_lock>
   82d3c:	68ab      	ldr	r3, [r5, #8]
   82d3e:	685e      	ldr	r6, [r3, #4]
   82d40:	f026 0603 	bic.w	r6, r6, #3
   82d44:	1bf1      	subs	r1, r6, r7
   82d46:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82d4a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82d4e:	f021 010f 	bic.w	r1, r1, #15
   82d52:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   82d56:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   82d5a:	db07      	blt.n	82d6c <_malloc_trim_r+0x3c>
   82d5c:	4620      	mov	r0, r4
   82d5e:	2100      	movs	r1, #0
   82d60:	f000 fba8 	bl	834b4 <_sbrk_r>
   82d64:	68ab      	ldr	r3, [r5, #8]
   82d66:	4433      	add	r3, r6
   82d68:	4298      	cmp	r0, r3
   82d6a:	d004      	beq.n	82d76 <_malloc_trim_r+0x46>
   82d6c:	4620      	mov	r0, r4
   82d6e:	f000 fb9f 	bl	834b0 <__malloc_unlock>
   82d72:	2000      	movs	r0, #0
   82d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d76:	4620      	mov	r0, r4
   82d78:	4279      	negs	r1, r7
   82d7a:	f000 fb9b 	bl	834b4 <_sbrk_r>
   82d7e:	3001      	adds	r0, #1
   82d80:	d00d      	beq.n	82d9e <_malloc_trim_r+0x6e>
   82d82:	4b10      	ldr	r3, [pc, #64]	; (82dc4 <_malloc_trim_r+0x94>)
   82d84:	68aa      	ldr	r2, [r5, #8]
   82d86:	6819      	ldr	r1, [r3, #0]
   82d88:	1bf6      	subs	r6, r6, r7
   82d8a:	f046 0601 	orr.w	r6, r6, #1
   82d8e:	4620      	mov	r0, r4
   82d90:	1bc9      	subs	r1, r1, r7
   82d92:	6056      	str	r6, [r2, #4]
   82d94:	6019      	str	r1, [r3, #0]
   82d96:	f000 fb8b 	bl	834b0 <__malloc_unlock>
   82d9a:	2001      	movs	r0, #1
   82d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d9e:	4620      	mov	r0, r4
   82da0:	2100      	movs	r1, #0
   82da2:	f000 fb87 	bl	834b4 <_sbrk_r>
   82da6:	68ab      	ldr	r3, [r5, #8]
   82da8:	1ac2      	subs	r2, r0, r3
   82daa:	2a0f      	cmp	r2, #15
   82dac:	ddde      	ble.n	82d6c <_malloc_trim_r+0x3c>
   82dae:	4d06      	ldr	r5, [pc, #24]	; (82dc8 <_malloc_trim_r+0x98>)
   82db0:	4904      	ldr	r1, [pc, #16]	; (82dc4 <_malloc_trim_r+0x94>)
   82db2:	682d      	ldr	r5, [r5, #0]
   82db4:	f042 0201 	orr.w	r2, r2, #1
   82db8:	1b40      	subs	r0, r0, r5
   82dba:	605a      	str	r2, [r3, #4]
   82dbc:	6008      	str	r0, [r1, #0]
   82dbe:	e7d5      	b.n	82d6c <_malloc_trim_r+0x3c>
   82dc0:	2007056c 	.word	0x2007056c
   82dc4:	20078c6c 	.word	0x20078c6c
   82dc8:	20070978 	.word	0x20070978

00082dcc <_free_r>:
   82dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82dd0:	460d      	mov	r5, r1
   82dd2:	4606      	mov	r6, r0
   82dd4:	2900      	cmp	r1, #0
   82dd6:	d055      	beq.n	82e84 <_free_r+0xb8>
   82dd8:	f000 fb68 	bl	834ac <__malloc_lock>
   82ddc:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82de0:	f8df c170 	ldr.w	ip, [pc, #368]	; 82f54 <_free_r+0x188>
   82de4:	f1a5 0408 	sub.w	r4, r5, #8
   82de8:	f021 0301 	bic.w	r3, r1, #1
   82dec:	18e2      	adds	r2, r4, r3
   82dee:	f8dc 0008 	ldr.w	r0, [ip, #8]
   82df2:	6857      	ldr	r7, [r2, #4]
   82df4:	4290      	cmp	r0, r2
   82df6:	f027 0703 	bic.w	r7, r7, #3
   82dfa:	d068      	beq.n	82ece <_free_r+0x102>
   82dfc:	f011 0101 	ands.w	r1, r1, #1
   82e00:	6057      	str	r7, [r2, #4]
   82e02:	d032      	beq.n	82e6a <_free_r+0x9e>
   82e04:	2100      	movs	r1, #0
   82e06:	19d0      	adds	r0, r2, r7
   82e08:	6840      	ldr	r0, [r0, #4]
   82e0a:	07c0      	lsls	r0, r0, #31
   82e0c:	d406      	bmi.n	82e1c <_free_r+0x50>
   82e0e:	443b      	add	r3, r7
   82e10:	6890      	ldr	r0, [r2, #8]
   82e12:	2900      	cmp	r1, #0
   82e14:	d04d      	beq.n	82eb2 <_free_r+0xe6>
   82e16:	68d2      	ldr	r2, [r2, #12]
   82e18:	60c2      	str	r2, [r0, #12]
   82e1a:	6090      	str	r0, [r2, #8]
   82e1c:	f043 0201 	orr.w	r2, r3, #1
   82e20:	6062      	str	r2, [r4, #4]
   82e22:	50e3      	str	r3, [r4, r3]
   82e24:	b9e1      	cbnz	r1, 82e60 <_free_r+0x94>
   82e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82e2a:	d32d      	bcc.n	82e88 <_free_r+0xbc>
   82e2c:	0a5a      	lsrs	r2, r3, #9
   82e2e:	2a04      	cmp	r2, #4
   82e30:	d869      	bhi.n	82f06 <_free_r+0x13a>
   82e32:	0998      	lsrs	r0, r3, #6
   82e34:	3038      	adds	r0, #56	; 0x38
   82e36:	0041      	lsls	r1, r0, #1
   82e38:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82e3c:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82e40:	4944      	ldr	r1, [pc, #272]	; (82f54 <_free_r+0x188>)
   82e42:	4562      	cmp	r2, ip
   82e44:	d065      	beq.n	82f12 <_free_r+0x146>
   82e46:	6851      	ldr	r1, [r2, #4]
   82e48:	f021 0103 	bic.w	r1, r1, #3
   82e4c:	428b      	cmp	r3, r1
   82e4e:	d202      	bcs.n	82e56 <_free_r+0x8a>
   82e50:	6892      	ldr	r2, [r2, #8]
   82e52:	4594      	cmp	ip, r2
   82e54:	d1f7      	bne.n	82e46 <_free_r+0x7a>
   82e56:	68d3      	ldr	r3, [r2, #12]
   82e58:	60e3      	str	r3, [r4, #12]
   82e5a:	60a2      	str	r2, [r4, #8]
   82e5c:	609c      	str	r4, [r3, #8]
   82e5e:	60d4      	str	r4, [r2, #12]
   82e60:	4630      	mov	r0, r6
   82e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82e66:	f000 bb23 	b.w	834b0 <__malloc_unlock>
   82e6a:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82e6e:	f10c 0808 	add.w	r8, ip, #8
   82e72:	1b64      	subs	r4, r4, r5
   82e74:	68a0      	ldr	r0, [r4, #8]
   82e76:	442b      	add	r3, r5
   82e78:	4540      	cmp	r0, r8
   82e7a:	d042      	beq.n	82f02 <_free_r+0x136>
   82e7c:	68e5      	ldr	r5, [r4, #12]
   82e7e:	60c5      	str	r5, [r0, #12]
   82e80:	60a8      	str	r0, [r5, #8]
   82e82:	e7c0      	b.n	82e06 <_free_r+0x3a>
   82e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82e88:	08db      	lsrs	r3, r3, #3
   82e8a:	109a      	asrs	r2, r3, #2
   82e8c:	2001      	movs	r0, #1
   82e8e:	4090      	lsls	r0, r2
   82e90:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82e94:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82e98:	689a      	ldr	r2, [r3, #8]
   82e9a:	4301      	orrs	r1, r0
   82e9c:	60a2      	str	r2, [r4, #8]
   82e9e:	60e3      	str	r3, [r4, #12]
   82ea0:	f8cc 1004 	str.w	r1, [ip, #4]
   82ea4:	4630      	mov	r0, r6
   82ea6:	609c      	str	r4, [r3, #8]
   82ea8:	60d4      	str	r4, [r2, #12]
   82eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82eae:	f000 baff 	b.w	834b0 <__malloc_unlock>
   82eb2:	4d29      	ldr	r5, [pc, #164]	; (82f58 <_free_r+0x18c>)
   82eb4:	42a8      	cmp	r0, r5
   82eb6:	d1ae      	bne.n	82e16 <_free_r+0x4a>
   82eb8:	f043 0201 	orr.w	r2, r3, #1
   82ebc:	f8cc 4014 	str.w	r4, [ip, #20]
   82ec0:	f8cc 4010 	str.w	r4, [ip, #16]
   82ec4:	60e0      	str	r0, [r4, #12]
   82ec6:	60a0      	str	r0, [r4, #8]
   82ec8:	6062      	str	r2, [r4, #4]
   82eca:	50e3      	str	r3, [r4, r3]
   82ecc:	e7c8      	b.n	82e60 <_free_r+0x94>
   82ece:	441f      	add	r7, r3
   82ed0:	07cb      	lsls	r3, r1, #31
   82ed2:	d407      	bmi.n	82ee4 <_free_r+0x118>
   82ed4:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82ed8:	1a64      	subs	r4, r4, r1
   82eda:	68e3      	ldr	r3, [r4, #12]
   82edc:	68a2      	ldr	r2, [r4, #8]
   82ede:	440f      	add	r7, r1
   82ee0:	60d3      	str	r3, [r2, #12]
   82ee2:	609a      	str	r2, [r3, #8]
   82ee4:	4b1d      	ldr	r3, [pc, #116]	; (82f5c <_free_r+0x190>)
   82ee6:	f047 0201 	orr.w	r2, r7, #1
   82eea:	681b      	ldr	r3, [r3, #0]
   82eec:	6062      	str	r2, [r4, #4]
   82eee:	429f      	cmp	r7, r3
   82ef0:	f8cc 4008 	str.w	r4, [ip, #8]
   82ef4:	d3b4      	bcc.n	82e60 <_free_r+0x94>
   82ef6:	4b1a      	ldr	r3, [pc, #104]	; (82f60 <_free_r+0x194>)
   82ef8:	4630      	mov	r0, r6
   82efa:	6819      	ldr	r1, [r3, #0]
   82efc:	f7ff ff18 	bl	82d30 <_malloc_trim_r>
   82f00:	e7ae      	b.n	82e60 <_free_r+0x94>
   82f02:	2101      	movs	r1, #1
   82f04:	e77f      	b.n	82e06 <_free_r+0x3a>
   82f06:	2a14      	cmp	r2, #20
   82f08:	d80b      	bhi.n	82f22 <_free_r+0x156>
   82f0a:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   82f0e:	0041      	lsls	r1, r0, #1
   82f10:	e792      	b.n	82e38 <_free_r+0x6c>
   82f12:	1080      	asrs	r0, r0, #2
   82f14:	2501      	movs	r5, #1
   82f16:	4085      	lsls	r5, r0
   82f18:	6848      	ldr	r0, [r1, #4]
   82f1a:	4613      	mov	r3, r2
   82f1c:	4328      	orrs	r0, r5
   82f1e:	6048      	str	r0, [r1, #4]
   82f20:	e79a      	b.n	82e58 <_free_r+0x8c>
   82f22:	2a54      	cmp	r2, #84	; 0x54
   82f24:	d803      	bhi.n	82f2e <_free_r+0x162>
   82f26:	0b18      	lsrs	r0, r3, #12
   82f28:	306e      	adds	r0, #110	; 0x6e
   82f2a:	0041      	lsls	r1, r0, #1
   82f2c:	e784      	b.n	82e38 <_free_r+0x6c>
   82f2e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82f32:	d803      	bhi.n	82f3c <_free_r+0x170>
   82f34:	0bd8      	lsrs	r0, r3, #15
   82f36:	3077      	adds	r0, #119	; 0x77
   82f38:	0041      	lsls	r1, r0, #1
   82f3a:	e77d      	b.n	82e38 <_free_r+0x6c>
   82f3c:	f240 5154 	movw	r1, #1364	; 0x554
   82f40:	428a      	cmp	r2, r1
   82f42:	d803      	bhi.n	82f4c <_free_r+0x180>
   82f44:	0c98      	lsrs	r0, r3, #18
   82f46:	307c      	adds	r0, #124	; 0x7c
   82f48:	0041      	lsls	r1, r0, #1
   82f4a:	e775      	b.n	82e38 <_free_r+0x6c>
   82f4c:	21fc      	movs	r1, #252	; 0xfc
   82f4e:	207e      	movs	r0, #126	; 0x7e
   82f50:	e772      	b.n	82e38 <_free_r+0x6c>
   82f52:	bf00      	nop
   82f54:	2007056c 	.word	0x2007056c
   82f58:	20070574 	.word	0x20070574
   82f5c:	20070974 	.word	0x20070974
   82f60:	20078c68 	.word	0x20078c68

00082f64 <malloc>:
   82f64:	4b02      	ldr	r3, [pc, #8]	; (82f70 <malloc+0xc>)
   82f66:	4601      	mov	r1, r0
   82f68:	6818      	ldr	r0, [r3, #0]
   82f6a:	f000 b803 	b.w	82f74 <_malloc_r>
   82f6e:	bf00      	nop
   82f70:	20070568 	.word	0x20070568

00082f74 <_malloc_r>:
   82f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82f78:	f101 050b 	add.w	r5, r1, #11
   82f7c:	2d16      	cmp	r5, #22
   82f7e:	b083      	sub	sp, #12
   82f80:	4606      	mov	r6, r0
   82f82:	d927      	bls.n	82fd4 <_malloc_r+0x60>
   82f84:	f035 0507 	bics.w	r5, r5, #7
   82f88:	d427      	bmi.n	82fda <_malloc_r+0x66>
   82f8a:	42a9      	cmp	r1, r5
   82f8c:	d825      	bhi.n	82fda <_malloc_r+0x66>
   82f8e:	4630      	mov	r0, r6
   82f90:	f000 fa8c 	bl	834ac <__malloc_lock>
   82f94:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82f98:	d226      	bcs.n	82fe8 <_malloc_r+0x74>
   82f9a:	4fc1      	ldr	r7, [pc, #772]	; (832a0 <_malloc_r+0x32c>)
   82f9c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   82fa0:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82fa4:	68dc      	ldr	r4, [r3, #12]
   82fa6:	429c      	cmp	r4, r3
   82fa8:	f000 81d2 	beq.w	83350 <_malloc_r+0x3dc>
   82fac:	6863      	ldr	r3, [r4, #4]
   82fae:	68e2      	ldr	r2, [r4, #12]
   82fb0:	f023 0303 	bic.w	r3, r3, #3
   82fb4:	4423      	add	r3, r4
   82fb6:	6858      	ldr	r0, [r3, #4]
   82fb8:	68a1      	ldr	r1, [r4, #8]
   82fba:	f040 0501 	orr.w	r5, r0, #1
   82fbe:	60ca      	str	r2, [r1, #12]
   82fc0:	4630      	mov	r0, r6
   82fc2:	6091      	str	r1, [r2, #8]
   82fc4:	605d      	str	r5, [r3, #4]
   82fc6:	f000 fa73 	bl	834b0 <__malloc_unlock>
   82fca:	3408      	adds	r4, #8
   82fcc:	4620      	mov	r0, r4
   82fce:	b003      	add	sp, #12
   82fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82fd4:	2510      	movs	r5, #16
   82fd6:	42a9      	cmp	r1, r5
   82fd8:	d9d9      	bls.n	82f8e <_malloc_r+0x1a>
   82fda:	2400      	movs	r4, #0
   82fdc:	230c      	movs	r3, #12
   82fde:	4620      	mov	r0, r4
   82fe0:	6033      	str	r3, [r6, #0]
   82fe2:	b003      	add	sp, #12
   82fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82fe8:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82fec:	f000 8089 	beq.w	83102 <_malloc_r+0x18e>
   82ff0:	f1bc 0f04 	cmp.w	ip, #4
   82ff4:	f200 8160 	bhi.w	832b8 <_malloc_r+0x344>
   82ff8:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82ffc:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   83000:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83004:	4fa6      	ldr	r7, [pc, #664]	; (832a0 <_malloc_r+0x32c>)
   83006:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8300a:	68cc      	ldr	r4, [r1, #12]
   8300c:	42a1      	cmp	r1, r4
   8300e:	d105      	bne.n	8301c <_malloc_r+0xa8>
   83010:	e00c      	b.n	8302c <_malloc_r+0xb8>
   83012:	2b00      	cmp	r3, #0
   83014:	da79      	bge.n	8310a <_malloc_r+0x196>
   83016:	68e4      	ldr	r4, [r4, #12]
   83018:	42a1      	cmp	r1, r4
   8301a:	d007      	beq.n	8302c <_malloc_r+0xb8>
   8301c:	6862      	ldr	r2, [r4, #4]
   8301e:	f022 0203 	bic.w	r2, r2, #3
   83022:	1b53      	subs	r3, r2, r5
   83024:	2b0f      	cmp	r3, #15
   83026:	ddf4      	ble.n	83012 <_malloc_r+0x9e>
   83028:	f10c 3cff 	add.w	ip, ip, #4294967295
   8302c:	f10c 0c01 	add.w	ip, ip, #1
   83030:	4b9b      	ldr	r3, [pc, #620]	; (832a0 <_malloc_r+0x32c>)
   83032:	693c      	ldr	r4, [r7, #16]
   83034:	f103 0e08 	add.w	lr, r3, #8
   83038:	4574      	cmp	r4, lr
   8303a:	f000 817e 	beq.w	8333a <_malloc_r+0x3c6>
   8303e:	6861      	ldr	r1, [r4, #4]
   83040:	f021 0103 	bic.w	r1, r1, #3
   83044:	1b4a      	subs	r2, r1, r5
   83046:	2a0f      	cmp	r2, #15
   83048:	f300 8164 	bgt.w	83314 <_malloc_r+0x3a0>
   8304c:	2a00      	cmp	r2, #0
   8304e:	f8c3 e014 	str.w	lr, [r3, #20]
   83052:	f8c3 e010 	str.w	lr, [r3, #16]
   83056:	da69      	bge.n	8312c <_malloc_r+0x1b8>
   83058:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8305c:	f080 813a 	bcs.w	832d4 <_malloc_r+0x360>
   83060:	08c9      	lsrs	r1, r1, #3
   83062:	108a      	asrs	r2, r1, #2
   83064:	f04f 0801 	mov.w	r8, #1
   83068:	fa08 f802 	lsl.w	r8, r8, r2
   8306c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   83070:	685a      	ldr	r2, [r3, #4]
   83072:	6888      	ldr	r0, [r1, #8]
   83074:	ea48 0202 	orr.w	r2, r8, r2
   83078:	60a0      	str	r0, [r4, #8]
   8307a:	60e1      	str	r1, [r4, #12]
   8307c:	605a      	str	r2, [r3, #4]
   8307e:	608c      	str	r4, [r1, #8]
   83080:	60c4      	str	r4, [r0, #12]
   83082:	ea4f 03ac 	mov.w	r3, ip, asr #2
   83086:	2001      	movs	r0, #1
   83088:	4098      	lsls	r0, r3
   8308a:	4290      	cmp	r0, r2
   8308c:	d85b      	bhi.n	83146 <_malloc_r+0x1d2>
   8308e:	4202      	tst	r2, r0
   83090:	d106      	bne.n	830a0 <_malloc_r+0x12c>
   83092:	f02c 0c03 	bic.w	ip, ip, #3
   83096:	0040      	lsls	r0, r0, #1
   83098:	4202      	tst	r2, r0
   8309a:	f10c 0c04 	add.w	ip, ip, #4
   8309e:	d0fa      	beq.n	83096 <_malloc_r+0x122>
   830a0:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   830a4:	4644      	mov	r4, r8
   830a6:	46e1      	mov	r9, ip
   830a8:	68e3      	ldr	r3, [r4, #12]
   830aa:	429c      	cmp	r4, r3
   830ac:	d107      	bne.n	830be <_malloc_r+0x14a>
   830ae:	e146      	b.n	8333e <_malloc_r+0x3ca>
   830b0:	2a00      	cmp	r2, #0
   830b2:	f280 8157 	bge.w	83364 <_malloc_r+0x3f0>
   830b6:	68db      	ldr	r3, [r3, #12]
   830b8:	429c      	cmp	r4, r3
   830ba:	f000 8140 	beq.w	8333e <_malloc_r+0x3ca>
   830be:	6859      	ldr	r1, [r3, #4]
   830c0:	f021 0103 	bic.w	r1, r1, #3
   830c4:	1b4a      	subs	r2, r1, r5
   830c6:	2a0f      	cmp	r2, #15
   830c8:	ddf2      	ble.n	830b0 <_malloc_r+0x13c>
   830ca:	461c      	mov	r4, r3
   830cc:	f854 cf08 	ldr.w	ip, [r4, #8]!
   830d0:	68d9      	ldr	r1, [r3, #12]
   830d2:	f045 0901 	orr.w	r9, r5, #1
   830d6:	f042 0801 	orr.w	r8, r2, #1
   830da:	441d      	add	r5, r3
   830dc:	f8c3 9004 	str.w	r9, [r3, #4]
   830e0:	4630      	mov	r0, r6
   830e2:	f8cc 100c 	str.w	r1, [ip, #12]
   830e6:	f8c1 c008 	str.w	ip, [r1, #8]
   830ea:	617d      	str	r5, [r7, #20]
   830ec:	613d      	str	r5, [r7, #16]
   830ee:	f8c5 e00c 	str.w	lr, [r5, #12]
   830f2:	f8c5 e008 	str.w	lr, [r5, #8]
   830f6:	f8c5 8004 	str.w	r8, [r5, #4]
   830fa:	50aa      	str	r2, [r5, r2]
   830fc:	f000 f9d8 	bl	834b0 <__malloc_unlock>
   83100:	e764      	b.n	82fcc <_malloc_r+0x58>
   83102:	217e      	movs	r1, #126	; 0x7e
   83104:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   83108:	e77c      	b.n	83004 <_malloc_r+0x90>
   8310a:	4422      	add	r2, r4
   8310c:	6850      	ldr	r0, [r2, #4]
   8310e:	68e3      	ldr	r3, [r4, #12]
   83110:	68a1      	ldr	r1, [r4, #8]
   83112:	f040 0501 	orr.w	r5, r0, #1
   83116:	60cb      	str	r3, [r1, #12]
   83118:	4630      	mov	r0, r6
   8311a:	6099      	str	r1, [r3, #8]
   8311c:	6055      	str	r5, [r2, #4]
   8311e:	f000 f9c7 	bl	834b0 <__malloc_unlock>
   83122:	3408      	adds	r4, #8
   83124:	4620      	mov	r0, r4
   83126:	b003      	add	sp, #12
   83128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8312c:	4421      	add	r1, r4
   8312e:	684b      	ldr	r3, [r1, #4]
   83130:	4630      	mov	r0, r6
   83132:	f043 0301 	orr.w	r3, r3, #1
   83136:	604b      	str	r3, [r1, #4]
   83138:	f000 f9ba 	bl	834b0 <__malloc_unlock>
   8313c:	3408      	adds	r4, #8
   8313e:	4620      	mov	r0, r4
   83140:	b003      	add	sp, #12
   83142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83146:	68bc      	ldr	r4, [r7, #8]
   83148:	6863      	ldr	r3, [r4, #4]
   8314a:	f023 0903 	bic.w	r9, r3, #3
   8314e:	45a9      	cmp	r9, r5
   83150:	d304      	bcc.n	8315c <_malloc_r+0x1e8>
   83152:	ebc5 0309 	rsb	r3, r5, r9
   83156:	2b0f      	cmp	r3, #15
   83158:	f300 8091 	bgt.w	8327e <_malloc_r+0x30a>
   8315c:	4b51      	ldr	r3, [pc, #324]	; (832a4 <_malloc_r+0x330>)
   8315e:	4a52      	ldr	r2, [pc, #328]	; (832a8 <_malloc_r+0x334>)
   83160:	6819      	ldr	r1, [r3, #0]
   83162:	6813      	ldr	r3, [r2, #0]
   83164:	eb05 0a01 	add.w	sl, r5, r1
   83168:	3301      	adds	r3, #1
   8316a:	eb04 0b09 	add.w	fp, r4, r9
   8316e:	f000 8161 	beq.w	83434 <_malloc_r+0x4c0>
   83172:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   83176:	f10a 0a0f 	add.w	sl, sl, #15
   8317a:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   8317e:	f02a 0a0f 	bic.w	sl, sl, #15
   83182:	4630      	mov	r0, r6
   83184:	4651      	mov	r1, sl
   83186:	9201      	str	r2, [sp, #4]
   83188:	f000 f994 	bl	834b4 <_sbrk_r>
   8318c:	f1b0 3fff 	cmp.w	r0, #4294967295
   83190:	4680      	mov	r8, r0
   83192:	9a01      	ldr	r2, [sp, #4]
   83194:	f000 8101 	beq.w	8339a <_malloc_r+0x426>
   83198:	4583      	cmp	fp, r0
   8319a:	f200 80fb 	bhi.w	83394 <_malloc_r+0x420>
   8319e:	f8df c114 	ldr.w	ip, [pc, #276]	; 832b4 <_malloc_r+0x340>
   831a2:	45c3      	cmp	fp, r8
   831a4:	f8dc 3000 	ldr.w	r3, [ip]
   831a8:	4453      	add	r3, sl
   831aa:	f8cc 3000 	str.w	r3, [ip]
   831ae:	f000 814a 	beq.w	83446 <_malloc_r+0x4d2>
   831b2:	6812      	ldr	r2, [r2, #0]
   831b4:	493c      	ldr	r1, [pc, #240]	; (832a8 <_malloc_r+0x334>)
   831b6:	3201      	adds	r2, #1
   831b8:	bf1b      	ittet	ne
   831ba:	ebcb 0b08 	rsbne	fp, fp, r8
   831be:	445b      	addne	r3, fp
   831c0:	f8c1 8000 	streq.w	r8, [r1]
   831c4:	f8cc 3000 	strne.w	r3, [ip]
   831c8:	f018 0307 	ands.w	r3, r8, #7
   831cc:	f000 8114 	beq.w	833f8 <_malloc_r+0x484>
   831d0:	f1c3 0208 	rsb	r2, r3, #8
   831d4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   831d8:	4490      	add	r8, r2
   831da:	3308      	adds	r3, #8
   831dc:	44c2      	add	sl, r8
   831de:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   831e2:	ebca 0a03 	rsb	sl, sl, r3
   831e6:	4651      	mov	r1, sl
   831e8:	4630      	mov	r0, r6
   831ea:	f8cd c004 	str.w	ip, [sp, #4]
   831ee:	f000 f961 	bl	834b4 <_sbrk_r>
   831f2:	1c43      	adds	r3, r0, #1
   831f4:	f8dd c004 	ldr.w	ip, [sp, #4]
   831f8:	f000 8135 	beq.w	83466 <_malloc_r+0x4f2>
   831fc:	ebc8 0200 	rsb	r2, r8, r0
   83200:	4452      	add	r2, sl
   83202:	f042 0201 	orr.w	r2, r2, #1
   83206:	f8dc 3000 	ldr.w	r3, [ip]
   8320a:	42bc      	cmp	r4, r7
   8320c:	4453      	add	r3, sl
   8320e:	f8c7 8008 	str.w	r8, [r7, #8]
   83212:	f8cc 3000 	str.w	r3, [ip]
   83216:	f8c8 2004 	str.w	r2, [r8, #4]
   8321a:	f8df a098 	ldr.w	sl, [pc, #152]	; 832b4 <_malloc_r+0x340>
   8321e:	d015      	beq.n	8324c <_malloc_r+0x2d8>
   83220:	f1b9 0f0f 	cmp.w	r9, #15
   83224:	f240 80eb 	bls.w	833fe <_malloc_r+0x48a>
   83228:	6861      	ldr	r1, [r4, #4]
   8322a:	f1a9 020c 	sub.w	r2, r9, #12
   8322e:	f022 0207 	bic.w	r2, r2, #7
   83232:	f001 0101 	and.w	r1, r1, #1
   83236:	ea42 0e01 	orr.w	lr, r2, r1
   8323a:	2005      	movs	r0, #5
   8323c:	18a1      	adds	r1, r4, r2
   8323e:	2a0f      	cmp	r2, #15
   83240:	f8c4 e004 	str.w	lr, [r4, #4]
   83244:	6048      	str	r0, [r1, #4]
   83246:	6088      	str	r0, [r1, #8]
   83248:	f200 8111 	bhi.w	8346e <_malloc_r+0x4fa>
   8324c:	4a17      	ldr	r2, [pc, #92]	; (832ac <_malloc_r+0x338>)
   8324e:	68bc      	ldr	r4, [r7, #8]
   83250:	6811      	ldr	r1, [r2, #0]
   83252:	428b      	cmp	r3, r1
   83254:	bf88      	it	hi
   83256:	6013      	strhi	r3, [r2, #0]
   83258:	4a15      	ldr	r2, [pc, #84]	; (832b0 <_malloc_r+0x33c>)
   8325a:	6811      	ldr	r1, [r2, #0]
   8325c:	428b      	cmp	r3, r1
   8325e:	bf88      	it	hi
   83260:	6013      	strhi	r3, [r2, #0]
   83262:	6862      	ldr	r2, [r4, #4]
   83264:	f022 0203 	bic.w	r2, r2, #3
   83268:	4295      	cmp	r5, r2
   8326a:	ebc5 0302 	rsb	r3, r5, r2
   8326e:	d801      	bhi.n	83274 <_malloc_r+0x300>
   83270:	2b0f      	cmp	r3, #15
   83272:	dc04      	bgt.n	8327e <_malloc_r+0x30a>
   83274:	4630      	mov	r0, r6
   83276:	f000 f91b 	bl	834b0 <__malloc_unlock>
   8327a:	2400      	movs	r4, #0
   8327c:	e6a6      	b.n	82fcc <_malloc_r+0x58>
   8327e:	f045 0201 	orr.w	r2, r5, #1
   83282:	f043 0301 	orr.w	r3, r3, #1
   83286:	4425      	add	r5, r4
   83288:	6062      	str	r2, [r4, #4]
   8328a:	4630      	mov	r0, r6
   8328c:	60bd      	str	r5, [r7, #8]
   8328e:	606b      	str	r3, [r5, #4]
   83290:	f000 f90e 	bl	834b0 <__malloc_unlock>
   83294:	3408      	adds	r4, #8
   83296:	4620      	mov	r0, r4
   83298:	b003      	add	sp, #12
   8329a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8329e:	bf00      	nop
   832a0:	2007056c 	.word	0x2007056c
   832a4:	20078c68 	.word	0x20078c68
   832a8:	20070978 	.word	0x20070978
   832ac:	20078c64 	.word	0x20078c64
   832b0:	20078c60 	.word	0x20078c60
   832b4:	20078c6c 	.word	0x20078c6c
   832b8:	f1bc 0f14 	cmp.w	ip, #20
   832bc:	d961      	bls.n	83382 <_malloc_r+0x40e>
   832be:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   832c2:	f200 808f 	bhi.w	833e4 <_malloc_r+0x470>
   832c6:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   832ca:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   832ce:	ea4f 014c 	mov.w	r1, ip, lsl #1
   832d2:	e697      	b.n	83004 <_malloc_r+0x90>
   832d4:	0a4b      	lsrs	r3, r1, #9
   832d6:	2b04      	cmp	r3, #4
   832d8:	d958      	bls.n	8338c <_malloc_r+0x418>
   832da:	2b14      	cmp	r3, #20
   832dc:	f200 80ad 	bhi.w	8343a <_malloc_r+0x4c6>
   832e0:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   832e4:	0050      	lsls	r0, r2, #1
   832e6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   832ea:	6883      	ldr	r3, [r0, #8]
   832ec:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 834a8 <_malloc_r+0x534>
   832f0:	4283      	cmp	r3, r0
   832f2:	f000 808a 	beq.w	8340a <_malloc_r+0x496>
   832f6:	685a      	ldr	r2, [r3, #4]
   832f8:	f022 0203 	bic.w	r2, r2, #3
   832fc:	4291      	cmp	r1, r2
   832fe:	d202      	bcs.n	83306 <_malloc_r+0x392>
   83300:	689b      	ldr	r3, [r3, #8]
   83302:	4298      	cmp	r0, r3
   83304:	d1f7      	bne.n	832f6 <_malloc_r+0x382>
   83306:	68d9      	ldr	r1, [r3, #12]
   83308:	687a      	ldr	r2, [r7, #4]
   8330a:	60e1      	str	r1, [r4, #12]
   8330c:	60a3      	str	r3, [r4, #8]
   8330e:	608c      	str	r4, [r1, #8]
   83310:	60dc      	str	r4, [r3, #12]
   83312:	e6b6      	b.n	83082 <_malloc_r+0x10e>
   83314:	f045 0701 	orr.w	r7, r5, #1
   83318:	f042 0101 	orr.w	r1, r2, #1
   8331c:	4425      	add	r5, r4
   8331e:	6067      	str	r7, [r4, #4]
   83320:	4630      	mov	r0, r6
   83322:	615d      	str	r5, [r3, #20]
   83324:	611d      	str	r5, [r3, #16]
   83326:	f8c5 e00c 	str.w	lr, [r5, #12]
   8332a:	f8c5 e008 	str.w	lr, [r5, #8]
   8332e:	6069      	str	r1, [r5, #4]
   83330:	50aa      	str	r2, [r5, r2]
   83332:	3408      	adds	r4, #8
   83334:	f000 f8bc 	bl	834b0 <__malloc_unlock>
   83338:	e648      	b.n	82fcc <_malloc_r+0x58>
   8333a:	685a      	ldr	r2, [r3, #4]
   8333c:	e6a1      	b.n	83082 <_malloc_r+0x10e>
   8333e:	f109 0901 	add.w	r9, r9, #1
   83342:	f019 0f03 	tst.w	r9, #3
   83346:	f104 0408 	add.w	r4, r4, #8
   8334a:	f47f aead 	bne.w	830a8 <_malloc_r+0x134>
   8334e:	e02d      	b.n	833ac <_malloc_r+0x438>
   83350:	f104 0308 	add.w	r3, r4, #8
   83354:	6964      	ldr	r4, [r4, #20]
   83356:	42a3      	cmp	r3, r4
   83358:	bf08      	it	eq
   8335a:	f10c 0c02 	addeq.w	ip, ip, #2
   8335e:	f43f ae67 	beq.w	83030 <_malloc_r+0xbc>
   83362:	e623      	b.n	82fac <_malloc_r+0x38>
   83364:	4419      	add	r1, r3
   83366:	6848      	ldr	r0, [r1, #4]
   83368:	461c      	mov	r4, r3
   8336a:	f854 2f08 	ldr.w	r2, [r4, #8]!
   8336e:	68db      	ldr	r3, [r3, #12]
   83370:	f040 0501 	orr.w	r5, r0, #1
   83374:	604d      	str	r5, [r1, #4]
   83376:	4630      	mov	r0, r6
   83378:	60d3      	str	r3, [r2, #12]
   8337a:	609a      	str	r2, [r3, #8]
   8337c:	f000 f898 	bl	834b0 <__malloc_unlock>
   83380:	e624      	b.n	82fcc <_malloc_r+0x58>
   83382:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   83386:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8338a:	e63b      	b.n	83004 <_malloc_r+0x90>
   8338c:	098a      	lsrs	r2, r1, #6
   8338e:	3238      	adds	r2, #56	; 0x38
   83390:	0050      	lsls	r0, r2, #1
   83392:	e7a8      	b.n	832e6 <_malloc_r+0x372>
   83394:	42bc      	cmp	r4, r7
   83396:	f43f af02 	beq.w	8319e <_malloc_r+0x22a>
   8339a:	68bc      	ldr	r4, [r7, #8]
   8339c:	6862      	ldr	r2, [r4, #4]
   8339e:	f022 0203 	bic.w	r2, r2, #3
   833a2:	e761      	b.n	83268 <_malloc_r+0x2f4>
   833a4:	f8d8 8000 	ldr.w	r8, [r8]
   833a8:	4598      	cmp	r8, r3
   833aa:	d17a      	bne.n	834a2 <_malloc_r+0x52e>
   833ac:	f01c 0f03 	tst.w	ip, #3
   833b0:	f1a8 0308 	sub.w	r3, r8, #8
   833b4:	f10c 3cff 	add.w	ip, ip, #4294967295
   833b8:	d1f4      	bne.n	833a4 <_malloc_r+0x430>
   833ba:	687b      	ldr	r3, [r7, #4]
   833bc:	ea23 0300 	bic.w	r3, r3, r0
   833c0:	607b      	str	r3, [r7, #4]
   833c2:	0040      	lsls	r0, r0, #1
   833c4:	4298      	cmp	r0, r3
   833c6:	f63f aebe 	bhi.w	83146 <_malloc_r+0x1d2>
   833ca:	2800      	cmp	r0, #0
   833cc:	f43f aebb 	beq.w	83146 <_malloc_r+0x1d2>
   833d0:	4203      	tst	r3, r0
   833d2:	46cc      	mov	ip, r9
   833d4:	f47f ae64 	bne.w	830a0 <_malloc_r+0x12c>
   833d8:	0040      	lsls	r0, r0, #1
   833da:	4203      	tst	r3, r0
   833dc:	f10c 0c04 	add.w	ip, ip, #4
   833e0:	d0fa      	beq.n	833d8 <_malloc_r+0x464>
   833e2:	e65d      	b.n	830a0 <_malloc_r+0x12c>
   833e4:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   833e8:	d819      	bhi.n	8341e <_malloc_r+0x4aa>
   833ea:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   833ee:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   833f2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   833f6:	e605      	b.n	83004 <_malloc_r+0x90>
   833f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   833fc:	e6ee      	b.n	831dc <_malloc_r+0x268>
   833fe:	2301      	movs	r3, #1
   83400:	f8c8 3004 	str.w	r3, [r8, #4]
   83404:	4644      	mov	r4, r8
   83406:	2200      	movs	r2, #0
   83408:	e72e      	b.n	83268 <_malloc_r+0x2f4>
   8340a:	1092      	asrs	r2, r2, #2
   8340c:	2001      	movs	r0, #1
   8340e:	4090      	lsls	r0, r2
   83410:	f8d8 2004 	ldr.w	r2, [r8, #4]
   83414:	4619      	mov	r1, r3
   83416:	4302      	orrs	r2, r0
   83418:	f8c8 2004 	str.w	r2, [r8, #4]
   8341c:	e775      	b.n	8330a <_malloc_r+0x396>
   8341e:	f240 5354 	movw	r3, #1364	; 0x554
   83422:	459c      	cmp	ip, r3
   83424:	d81b      	bhi.n	8345e <_malloc_r+0x4ea>
   83426:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   8342a:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   8342e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83432:	e5e7      	b.n	83004 <_malloc_r+0x90>
   83434:	f10a 0a10 	add.w	sl, sl, #16
   83438:	e6a3      	b.n	83182 <_malloc_r+0x20e>
   8343a:	2b54      	cmp	r3, #84	; 0x54
   8343c:	d81f      	bhi.n	8347e <_malloc_r+0x50a>
   8343e:	0b0a      	lsrs	r2, r1, #12
   83440:	326e      	adds	r2, #110	; 0x6e
   83442:	0050      	lsls	r0, r2, #1
   83444:	e74f      	b.n	832e6 <_malloc_r+0x372>
   83446:	f3cb 010b 	ubfx	r1, fp, #0, #12
   8344a:	2900      	cmp	r1, #0
   8344c:	f47f aeb1 	bne.w	831b2 <_malloc_r+0x23e>
   83450:	eb0a 0109 	add.w	r1, sl, r9
   83454:	68ba      	ldr	r2, [r7, #8]
   83456:	f041 0101 	orr.w	r1, r1, #1
   8345a:	6051      	str	r1, [r2, #4]
   8345c:	e6f6      	b.n	8324c <_malloc_r+0x2d8>
   8345e:	21fc      	movs	r1, #252	; 0xfc
   83460:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   83464:	e5ce      	b.n	83004 <_malloc_r+0x90>
   83466:	2201      	movs	r2, #1
   83468:	f04f 0a00 	mov.w	sl, #0
   8346c:	e6cb      	b.n	83206 <_malloc_r+0x292>
   8346e:	f104 0108 	add.w	r1, r4, #8
   83472:	4630      	mov	r0, r6
   83474:	f7ff fcaa 	bl	82dcc <_free_r>
   83478:	f8da 3000 	ldr.w	r3, [sl]
   8347c:	e6e6      	b.n	8324c <_malloc_r+0x2d8>
   8347e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   83482:	d803      	bhi.n	8348c <_malloc_r+0x518>
   83484:	0bca      	lsrs	r2, r1, #15
   83486:	3277      	adds	r2, #119	; 0x77
   83488:	0050      	lsls	r0, r2, #1
   8348a:	e72c      	b.n	832e6 <_malloc_r+0x372>
   8348c:	f240 5254 	movw	r2, #1364	; 0x554
   83490:	4293      	cmp	r3, r2
   83492:	d803      	bhi.n	8349c <_malloc_r+0x528>
   83494:	0c8a      	lsrs	r2, r1, #18
   83496:	327c      	adds	r2, #124	; 0x7c
   83498:	0050      	lsls	r0, r2, #1
   8349a:	e724      	b.n	832e6 <_malloc_r+0x372>
   8349c:	20fc      	movs	r0, #252	; 0xfc
   8349e:	227e      	movs	r2, #126	; 0x7e
   834a0:	e721      	b.n	832e6 <_malloc_r+0x372>
   834a2:	687b      	ldr	r3, [r7, #4]
   834a4:	e78d      	b.n	833c2 <_malloc_r+0x44e>
   834a6:	bf00      	nop
   834a8:	2007056c 	.word	0x2007056c

000834ac <__malloc_lock>:
   834ac:	4770      	bx	lr
   834ae:	bf00      	nop

000834b0 <__malloc_unlock>:
   834b0:	4770      	bx	lr
   834b2:	bf00      	nop

000834b4 <_sbrk_r>:
   834b4:	b538      	push	{r3, r4, r5, lr}
   834b6:	4c07      	ldr	r4, [pc, #28]	; (834d4 <_sbrk_r+0x20>)
   834b8:	2300      	movs	r3, #0
   834ba:	4605      	mov	r5, r0
   834bc:	4608      	mov	r0, r1
   834be:	6023      	str	r3, [r4, #0]
   834c0:	f7fd fb6a 	bl	80b98 <_sbrk>
   834c4:	1c43      	adds	r3, r0, #1
   834c6:	d000      	beq.n	834ca <_sbrk_r+0x16>
   834c8:	bd38      	pop	{r3, r4, r5, pc}
   834ca:	6823      	ldr	r3, [r4, #0]
   834cc:	2b00      	cmp	r3, #0
   834ce:	d0fb      	beq.n	834c8 <_sbrk_r+0x14>
   834d0:	602b      	str	r3, [r5, #0]
   834d2:	bd38      	pop	{r3, r4, r5, pc}
   834d4:	20078c94 	.word	0x20078c94

000834d8 <__register_exitproc>:
   834d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   834da:	4c27      	ldr	r4, [pc, #156]	; (83578 <__register_exitproc+0xa0>)
   834dc:	b085      	sub	sp, #20
   834de:	6826      	ldr	r6, [r4, #0]
   834e0:	4607      	mov	r7, r0
   834e2:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   834e6:	2c00      	cmp	r4, #0
   834e8:	d040      	beq.n	8356c <__register_exitproc+0x94>
   834ea:	6865      	ldr	r5, [r4, #4]
   834ec:	2d1f      	cmp	r5, #31
   834ee:	dd1e      	ble.n	8352e <__register_exitproc+0x56>
   834f0:	4822      	ldr	r0, [pc, #136]	; (8357c <__register_exitproc+0xa4>)
   834f2:	b918      	cbnz	r0, 834fc <__register_exitproc+0x24>
   834f4:	f04f 30ff 	mov.w	r0, #4294967295
   834f8:	b005      	add	sp, #20
   834fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   834fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83500:	9103      	str	r1, [sp, #12]
   83502:	9202      	str	r2, [sp, #8]
   83504:	9301      	str	r3, [sp, #4]
   83506:	f7ff fd2d 	bl	82f64 <malloc>
   8350a:	9903      	ldr	r1, [sp, #12]
   8350c:	4604      	mov	r4, r0
   8350e:	9a02      	ldr	r2, [sp, #8]
   83510:	9b01      	ldr	r3, [sp, #4]
   83512:	2800      	cmp	r0, #0
   83514:	d0ee      	beq.n	834f4 <__register_exitproc+0x1c>
   83516:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   8351a:	2000      	movs	r0, #0
   8351c:	6025      	str	r5, [r4, #0]
   8351e:	6060      	str	r0, [r4, #4]
   83520:	4605      	mov	r5, r0
   83522:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83526:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   8352a:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   8352e:	b93f      	cbnz	r7, 83540 <__register_exitproc+0x68>
   83530:	1c6b      	adds	r3, r5, #1
   83532:	2000      	movs	r0, #0
   83534:	3502      	adds	r5, #2
   83536:	6063      	str	r3, [r4, #4]
   83538:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   8353c:	b005      	add	sp, #20
   8353e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83540:	2601      	movs	r6, #1
   83542:	40ae      	lsls	r6, r5
   83544:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   83548:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   8354c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83550:	2f02      	cmp	r7, #2
   83552:	ea42 0206 	orr.w	r2, r2, r6
   83556:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8355a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   8355e:	d1e7      	bne.n	83530 <__register_exitproc+0x58>
   83560:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83564:	431e      	orrs	r6, r3
   83566:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   8356a:	e7e1      	b.n	83530 <__register_exitproc+0x58>
   8356c:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   83570:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83574:	e7b9      	b.n	834ea <__register_exitproc+0x12>
   83576:	bf00      	nop
   83578:	000835c0 	.word	0x000835c0
   8357c:	00082f65 	.word	0x00082f65
   83580:	09097325 	.word	0x09097325
   83584:	25096325 	.word	0x25096325
   83588:	75250975 	.word	0x75250975
   8358c:	0d752509 	.word	0x0d752509
   83590:	0000000a 	.word	0x0000000a
   83594:	454c4449 	.word	0x454c4449
   83598:	00000000 	.word	0x00000000
   8359c:	00000a0d 	.word	0x00000a0d
   835a0:	20726d54 	.word	0x20726d54
   835a4:	00637653 	.word	0x00637653
   835a8:	6e756f53 	.word	0x6e756f53
   835ac:	6e657364 	.word	0x6e657364
   835b0:	00726f73 	.word	0x00726f73
   835b4:	4e496c42 	.word	0x4e496c42
   835b8:	0000004b 	.word	0x0000004b
   835bc:	00000043 	.word	0x00000043

000835c0 <_global_impure_ptr>:
   835c0:	20070140                                @.. 

000835c4 <_init>:
   835c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   835c6:	bf00      	nop
   835c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   835ca:	bc08      	pop	{r3}
   835cc:	469e      	mov	lr, r3
   835ce:	4770      	bx	lr

000835d0 <__init_array_start>:
   835d0:	00082ce1 	.word	0x00082ce1

000835d4 <__frame_dummy_init_array_entry>:
   835d4:	00080119                                ....

000835d8 <_fini>:
   835d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   835da:	bf00      	nop
   835dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   835de:	bc08      	pop	{r3}
   835e0:	469e      	mov	lr, r3
   835e2:	4770      	bx	lr

000835e4 <__fini_array_start>:
   835e4:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900                                ..=.

20070134 <uxCriticalNesting>:
20070134:	aaaaaaaa                                ....

20070138 <xFreeBytesRemaining>:
20070138:	00008000                                ....

2007013c <xNextTaskUnblockTime>:
2007013c:	0000ffff                                ....

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	000835bc 00000000 00000000 00000000     .5..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <__malloc_av_>:
	...
20070574:	2007056c 2007056c 20070574 20070574     l.. l.. t.. t.. 
20070584:	2007057c 2007057c 20070584 20070584     |.. |.. ... ... 
20070594:	2007058c 2007058c 20070594 20070594     ... ... ... ... 
200705a4:	2007059c 2007059c 200705a4 200705a4     ... ... ... ... 
200705b4:	200705ac 200705ac 200705b4 200705b4     ... ... ... ... 
200705c4:	200705bc 200705bc 200705c4 200705c4     ... ... ... ... 
200705d4:	200705cc 200705cc 200705d4 200705d4     ... ... ... ... 
200705e4:	200705dc 200705dc 200705e4 200705e4     ... ... ... ... 
200705f4:	200705ec 200705ec 200705f4 200705f4     ... ... ... ... 
20070604:	200705fc 200705fc 20070604 20070604     ... ... ... ... 
20070614:	2007060c 2007060c 20070614 20070614     ... ... ... ... 
20070624:	2007061c 2007061c 20070624 20070624     ... ... $.. $.. 
20070634:	2007062c 2007062c 20070634 20070634     ,.. ,.. 4.. 4.. 
20070644:	2007063c 2007063c 20070644 20070644     <.. <.. D.. D.. 
20070654:	2007064c 2007064c 20070654 20070654     L.. L.. T.. T.. 
20070664:	2007065c 2007065c 20070664 20070664     \.. \.. d.. d.. 
20070674:	2007066c 2007066c 20070674 20070674     l.. l.. t.. t.. 
20070684:	2007067c 2007067c 20070684 20070684     |.. |.. ... ... 
20070694:	2007068c 2007068c 20070694 20070694     ... ... ... ... 
200706a4:	2007069c 2007069c 200706a4 200706a4     ... ... ... ... 
200706b4:	200706ac 200706ac 200706b4 200706b4     ... ... ... ... 
200706c4:	200706bc 200706bc 200706c4 200706c4     ... ... ... ... 
200706d4:	200706cc 200706cc 200706d4 200706d4     ... ... ... ... 
200706e4:	200706dc 200706dc 200706e4 200706e4     ... ... ... ... 
200706f4:	200706ec 200706ec 200706f4 200706f4     ... ... ... ... 
20070704:	200706fc 200706fc 20070704 20070704     ... ... ... ... 
20070714:	2007070c 2007070c 20070714 20070714     ... ... ... ... 
20070724:	2007071c 2007071c 20070724 20070724     ... ... $.. $.. 
20070734:	2007072c 2007072c 20070734 20070734     ,.. ,.. 4.. 4.. 
20070744:	2007073c 2007073c 20070744 20070744     <.. <.. D.. D.. 
20070754:	2007074c 2007074c 20070754 20070754     L.. L.. T.. T.. 
20070764:	2007075c 2007075c 20070764 20070764     \.. \.. d.. d.. 
20070774:	2007076c 2007076c 20070774 20070774     l.. l.. t.. t.. 
20070784:	2007077c 2007077c 20070784 20070784     |.. |.. ... ... 
20070794:	2007078c 2007078c 20070794 20070794     ... ... ... ... 
200707a4:	2007079c 2007079c 200707a4 200707a4     ... ... ... ... 
200707b4:	200707ac 200707ac 200707b4 200707b4     ... ... ... ... 
200707c4:	200707bc 200707bc 200707c4 200707c4     ... ... ... ... 
200707d4:	200707cc 200707cc 200707d4 200707d4     ... ... ... ... 
200707e4:	200707dc 200707dc 200707e4 200707e4     ... ... ... ... 
200707f4:	200707ec 200707ec 200707f4 200707f4     ... ... ... ... 
20070804:	200707fc 200707fc 20070804 20070804     ... ... ... ... 
20070814:	2007080c 2007080c 20070814 20070814     ... ... ... ... 
20070824:	2007081c 2007081c 20070824 20070824     ... ... $.. $.. 
20070834:	2007082c 2007082c 20070834 20070834     ,.. ,.. 4.. 4.. 
20070844:	2007083c 2007083c 20070844 20070844     <.. <.. D.. D.. 
20070854:	2007084c 2007084c 20070854 20070854     L.. L.. T.. T.. 
20070864:	2007085c 2007085c 20070864 20070864     \.. \.. d.. d.. 
20070874:	2007086c 2007086c 20070874 20070874     l.. l.. t.. t.. 
20070884:	2007087c 2007087c 20070884 20070884     |.. |.. ... ... 
20070894:	2007088c 2007088c 20070894 20070894     ... ... ... ... 
200708a4:	2007089c 2007089c 200708a4 200708a4     ... ... ... ... 
200708b4:	200708ac 200708ac 200708b4 200708b4     ... ... ... ... 
200708c4:	200708bc 200708bc 200708c4 200708c4     ... ... ... ... 
200708d4:	200708cc 200708cc 200708d4 200708d4     ... ... ... ... 
200708e4:	200708dc 200708dc 200708e4 200708e4     ... ... ... ... 
200708f4:	200708ec 200708ec 200708f4 200708f4     ... ... ... ... 
20070904:	200708fc 200708fc 20070904 20070904     ... ... ... ... 
20070914:	2007090c 2007090c 20070914 20070914     ... ... ... ... 
20070924:	2007091c 2007091c 20070924 20070924     ... ... $.. $.. 
20070934:	2007092c 2007092c 20070934 20070934     ,.. ,.. 4.. 4.. 
20070944:	2007093c 2007093c 20070944 20070944     <.. <.. D.. D.. 
20070954:	2007094c 2007094c 20070954 20070954     L.. L.. T.. T.. 
20070964:	2007095c 2007095c 20070964 20070964     \.. \.. d.. d.. 

20070974 <__malloc_trim_threshold>:
20070974:	00020000                                ....

20070978 <__malloc_sbrk_base>:
20070978:	ffffffff                                ....
