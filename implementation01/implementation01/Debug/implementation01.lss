
implementation01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004aac  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000098c  20070000  00084aac  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000832c  20070990  00085440  00010990  2**3
                  ALLOC
  3 .stack        00002004  20078cbc  0008d76c  00010990  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0001098c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000109b5  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001531e  00000000  00000000  00010a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b25  00000000  00000000  00025d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007fb8  00000000  00000000  00029853  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ea0  00000000  00000000  0003180b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ef0  00000000  00000000  000326ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000ac6b  00000000  00000000  0003359b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001656f  00000000  00000000  0003e206  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006897e  00000000  00000000  00054775  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002804  00000000  00000000  000bd0f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007acc0 	.word	0x2007acc0
   80004:	00080c15 	.word	0x00080c15
   80008:	00080c11 	.word	0x00080c11
   8000c:	00080c11 	.word	0x00080c11
   80010:	00080c11 	.word	0x00080c11
   80014:	00080c11 	.word	0x00080c11
   80018:	00080c11 	.word	0x00080c11
	...
   8002c:	00080f09 	.word	0x00080f09
   80030:	00080c11 	.word	0x00080c11
   80034:	00000000 	.word	0x00000000
   80038:	00080f85 	.word	0x00080f85
   8003c:	00080fc1 	.word	0x00080fc1
   80040:	00080c11 	.word	0x00080c11
   80044:	00080c11 	.word	0x00080c11
   80048:	00080c11 	.word	0x00080c11
   8004c:	00080c11 	.word	0x00080c11
   80050:	00080c11 	.word	0x00080c11
   80054:	00080c11 	.word	0x00080c11
   80058:	00080c11 	.word	0x00080c11
   8005c:	00080c11 	.word	0x00080c11
   80060:	00080c11 	.word	0x00080c11
   80064:	00080c11 	.word	0x00080c11
   80068:	00000000 	.word	0x00000000
   8006c:	000809bd 	.word	0x000809bd
   80070:	000809d1 	.word	0x000809d1
   80074:	000809e5 	.word	0x000809e5
   80078:	000809f9 	.word	0x000809f9
	...
   80084:	00082431 	.word	0x00082431
   80088:	00080c11 	.word	0x00080c11
   8008c:	00080c11 	.word	0x00080c11
   80090:	00080c11 	.word	0x00080c11
   80094:	00080c11 	.word	0x00080c11
   80098:	00080c11 	.word	0x00080c11
   8009c:	00080c11 	.word	0x00080c11
   800a0:	00080c11 	.word	0x00080c11
   800a4:	00000000 	.word	0x00000000
   800a8:	00080c11 	.word	0x00080c11
   800ac:	00080c11 	.word	0x00080c11
   800b0:	00080c11 	.word	0x00080c11
   800b4:	00080c11 	.word	0x00080c11
   800b8:	00080c11 	.word	0x00080c11
   800bc:	00080c11 	.word	0x00080c11
   800c0:	00080c11 	.word	0x00080c11
   800c4:	00080c11 	.word	0x00080c11
   800c8:	00080c11 	.word	0x00080c11
   800cc:	00080c11 	.word	0x00080c11
   800d0:	00080c11 	.word	0x00080c11
   800d4:	00080c11 	.word	0x00080c11
   800d8:	00080c11 	.word	0x00080c11
   800dc:	00080c11 	.word	0x00080c11
   800e0:	00080c11 	.word	0x00080c11
   800e4:	00080c11 	.word	0x00080c11
   800e8:	00080c11 	.word	0x00080c11
   800ec:	00080c11 	.word	0x00080c11
   800f0:	00080c11 	.word	0x00080c11

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070990 	.word	0x20070990
   80110:	00000000 	.word	0x00000000
   80114:	00084aac 	.word	0x00084aac

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00084aac 	.word	0x00084aac
   8013c:	20070994 	.word	0x20070994
   80140:	00084aac 	.word	0x00084aac
   80144:	00000000 	.word	0x00000000

00080148 <delayInit>:

#include "asf.h"
#include "DelayFunctions.h"

void delayInit(void)		/* Initializes the timer used for delays */
{
   80148:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);
   8014a:	201b      	movs	r0, #27
   8014c:	4b08      	ldr	r3, [pc, #32]	; (80170 <delayInit+0x28>)
   8014e:	4798      	blx	r3
	tc_init(TC0,0,0);		 /* TC0, channel 0, TCLK1 och capturemode */
   80150:	4c08      	ldr	r4, [pc, #32]	; (80174 <delayInit+0x2c>)
   80152:	4620      	mov	r0, r4
   80154:	2100      	movs	r1, #0
   80156:	460a      	mov	r2, r1
   80158:	4b07      	ldr	r3, [pc, #28]	; (80178 <delayInit+0x30>)
   8015a:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   8015c:	4620      	mov	r0, r4
   8015e:	2100      	movs	r1, #0
   80160:	4b06      	ldr	r3, [pc, #24]	; (8017c <delayInit+0x34>)
   80162:	4798      	blx	r3
	tc_stop(TC0,0);			/* making sure the timer does not run  */
   80164:	4620      	mov	r0, r4
   80166:	2100      	movs	r1, #0
   80168:	4b05      	ldr	r3, [pc, #20]	; (80180 <delayInit+0x38>)
   8016a:	4798      	blx	r3
   8016c:	bd10      	pop	{r4, pc}
   8016e:	bf00      	nop
   80170:	00080af5 	.word	0x00080af5
   80174:	40080000 	.word	0x40080000
   80178:	00080b4d 	.word	0x00080b4d
   8017c:	00080b69 	.word	0x00080b69
   80180:	00080b79 	.word	0x00080b79

00080184 <delayMicroseconds>:
}


void delayMicroseconds(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   80184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80186:	4604      	mov	r4, r0
	tc_start(TC0,0);
   80188:	4809      	ldr	r0, [pc, #36]	; (801b0 <delayMicroseconds+0x2c>)
   8018a:	2100      	movs	r1, #0
   8018c:	4b09      	ldr	r3, [pc, #36]	; (801b4 <delayMicroseconds+0x30>)
   8018e:	4798      	blx	r3
	while (tc_read_cv(TC0,0) < us*42); /* Only works in newere version of ASF */
   80190:	272a      	movs	r7, #42	; 0x2a
   80192:	fb07 f704 	mul.w	r7, r7, r4
   80196:	4e06      	ldr	r6, [pc, #24]	; (801b0 <delayMicroseconds+0x2c>)
   80198:	2500      	movs	r5, #0
   8019a:	4c07      	ldr	r4, [pc, #28]	; (801b8 <delayMicroseconds+0x34>)
   8019c:	4630      	mov	r0, r6
   8019e:	4629      	mov	r1, r5
   801a0:	47a0      	blx	r4
   801a2:	42b8      	cmp	r0, r7
   801a4:	d3fa      	bcc.n	8019c <delayMicroseconds+0x18>
	tc_stop(TC0,0);
   801a6:	4802      	ldr	r0, [pc, #8]	; (801b0 <delayMicroseconds+0x2c>)
   801a8:	2100      	movs	r1, #0
   801aa:	4b04      	ldr	r3, [pc, #16]	; (801bc <delayMicroseconds+0x38>)
   801ac:	4798      	blx	r3
   801ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   801b0:	40080000 	.word	0x40080000
   801b4:	00080b71 	.word	0x00080b71
   801b8:	00080b81 	.word	0x00080b81
   801bc:	00080b79 	.word	0x00080b79

000801c0 <pulseLeft>:
   801c0:	b538      	push	{r3, r4, r5, lr}
   801c2:	4c03      	ldr	r4, [pc, #12]	; (801d0 <pulseLeft+0x10>)
   801c4:	2510      	movs	r5, #16
   801c6:	6325      	str	r5, [r4, #48]	; 0x30
   801c8:	4b02      	ldr	r3, [pc, #8]	; (801d4 <pulseLeft+0x14>)
   801ca:	4798      	blx	r3
   801cc:	6365      	str	r5, [r4, #52]	; 0x34
   801ce:	bd38      	pop	{r3, r4, r5, pc}
   801d0:	400e1200 	.word	0x400e1200
   801d4:	00080185 	.word	0x00080185

000801d8 <pulseRight>:
   801d8:	b538      	push	{r3, r4, r5, lr}
   801da:	4c03      	ldr	r4, [pc, #12]	; (801e8 <pulseRight+0x10>)
   801dc:	2520      	movs	r5, #32
   801de:	6325      	str	r5, [r4, #48]	; 0x30
   801e0:	4b02      	ldr	r3, [pc, #8]	; (801ec <pulseRight+0x14>)
   801e2:	4798      	blx	r3
   801e4:	6365      	str	r5, [r4, #52]	; 0x34
   801e6:	bd38      	pop	{r3, r4, r5, pc}
   801e8:	400e1200 	.word	0x400e1200
   801ec:	00080185 	.word	0x00080185

000801f0 <moveForward>:
   801f0:	b510      	push	{r4, lr}
   801f2:	460c      	mov	r4, r1
   801f4:	4b04      	ldr	r3, [pc, #16]	; (80208 <moveForward+0x18>)
   801f6:	4798      	blx	r3
   801f8:	4620      	mov	r0, r4
   801fa:	4b04      	ldr	r3, [pc, #16]	; (8020c <moveForward+0x1c>)
   801fc:	4798      	blx	r3
   801fe:	f241 4082 	movw	r0, #5250	; 0x1482
   80202:	4b03      	ldr	r3, [pc, #12]	; (80210 <moveForward+0x20>)
   80204:	4798      	blx	r3
   80206:	bd10      	pop	{r4, pc}
   80208:	000801c1 	.word	0x000801c1
   8020c:	000801d9 	.word	0x000801d9
   80210:	00080185 	.word	0x00080185

00080214 <P_regulator>:
   80214:	b508      	push	{r3, lr}
   80216:	4b18      	ldr	r3, [pc, #96]	; (80278 <P_regulator+0x64>)
   80218:	681b      	ldr	r3, [r3, #0]
   8021a:	4a18      	ldr	r2, [pc, #96]	; (8027c <P_regulator+0x68>)
   8021c:	6013      	str	r3, [r2, #0]
   8021e:	4a18      	ldr	r2, [pc, #96]	; (80280 <P_regulator+0x6c>)
   80220:	6013      	str	r3, [r2, #0]
   80222:	1a41      	subs	r1, r0, r1
   80224:	2900      	cmp	r1, #0
   80226:	dd0a      	ble.n	8023e <P_regulator+0x2a>
   80228:	4a16      	ldr	r2, [pc, #88]	; (80284 <P_regulator+0x70>)
   8022a:	6812      	ldr	r2, [r2, #0]
   8022c:	fb02 f101 	mul.w	r1, r2, r1
   80230:	1a58      	subs	r0, r3, r1
   80232:	4a12      	ldr	r2, [pc, #72]	; (8027c <P_regulator+0x68>)
   80234:	6010      	str	r0, [r2, #0]
   80236:	4419      	add	r1, r3
   80238:	4a11      	ldr	r2, [pc, #68]	; (80280 <P_regulator+0x6c>)
   8023a:	6011      	str	r1, [r2, #0]
   8023c:	e00b      	b.n	80256 <P_regulator+0x42>
   8023e:	2900      	cmp	r1, #0
   80240:	da09      	bge.n	80256 <P_regulator+0x42>
   80242:	4a10      	ldr	r2, [pc, #64]	; (80284 <P_regulator+0x70>)
   80244:	6812      	ldr	r2, [r2, #0]
   80246:	fb02 f101 	mul.w	r1, r2, r1
   8024a:	1858      	adds	r0, r3, r1
   8024c:	4a0b      	ldr	r2, [pc, #44]	; (8027c <P_regulator+0x68>)
   8024e:	6010      	str	r0, [r2, #0]
   80250:	1a59      	subs	r1, r3, r1
   80252:	4a0b      	ldr	r2, [pc, #44]	; (80280 <P_regulator+0x6c>)
   80254:	6011      	str	r1, [r2, #0]
   80256:	4b0a      	ldr	r3, [pc, #40]	; (80280 <P_regulator+0x6c>)
   80258:	6818      	ldr	r0, [r3, #0]
   8025a:	4b08      	ldr	r3, [pc, #32]	; (8027c <P_regulator+0x68>)
   8025c:	6819      	ldr	r1, [r3, #0]
   8025e:	4b0a      	ldr	r3, [pc, #40]	; (80288 <P_regulator+0x74>)
   80260:	4798      	blx	r3
   80262:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80266:	4b09      	ldr	r3, [pc, #36]	; (8028c <P_regulator+0x78>)
   80268:	635a      	str	r2, [r3, #52]	; 0x34
   8026a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8026e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
   80272:	635a      	str	r2, [r3, #52]	; 0x34
   80274:	bd08      	pop	{r3, pc}
   80276:	bf00      	nop
   80278:	20070130 	.word	0x20070130
   8027c:	200709ac 	.word	0x200709ac
   80280:	200709b0 	.word	0x200709b0
   80284:	2007012c 	.word	0x2007012c
   80288:	000801f1 	.word	0x000801f1
   8028c:	400e1000 	.word	0x400e1000

00080290 <initMotor2>:
   80290:	b470      	push	{r4, r5, r6}
   80292:	4a24      	ldr	r2, [pc, #144]	; (80324 <initMotor2+0x94>)
   80294:	2310      	movs	r3, #16
   80296:	6113      	str	r3, [r2, #16]
   80298:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
   8029c:	2320      	movs	r3, #32
   8029e:	6113      	str	r3, [r2, #16]
   802a0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
   802a4:	4b20      	ldr	r3, [pc, #128]	; (80328 <initMotor2+0x98>)
   802a6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   802aa:	6119      	str	r1, [r3, #16]
   802ac:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
   802b0:	491e      	ldr	r1, [pc, #120]	; (8032c <initMotor2+0x9c>)
   802b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   802b6:	610b      	str	r3, [r1, #16]
   802b8:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
   802bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   802c0:	614b      	str	r3, [r1, #20]
   802c2:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
   802c6:	4b1a      	ldr	r3, [pc, #104]	; (80330 <initMotor2+0xa0>)
   802c8:	2402      	movs	r4, #2
   802ca:	615c      	str	r4, [r3, #20]
   802cc:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
   802d0:	2008      	movs	r0, #8
   802d2:	6158      	str	r0, [r3, #20]
   802d4:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
   802d8:	f44f 7500 	mov.w	r5, #512	; 0x200
   802dc:	615d      	str	r5, [r3, #20]
   802de:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
   802e2:	f44f 6580 	mov.w	r5, #1024	; 0x400
   802e6:	615d      	str	r5, [r3, #20]
   802e8:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
   802ec:	2504      	movs	r5, #4
   802ee:	6155      	str	r5, [r2, #20]
   802f0:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
   802f4:	2601      	movs	r6, #1
   802f6:	615e      	str	r6, [r3, #20]
   802f8:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
   802fc:	615d      	str	r5, [r3, #20]
   802fe:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
   80302:	2540      	movs	r5, #64	; 0x40
   80304:	615d      	str	r5, [r3, #20]
   80306:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
   8030a:	2380      	movs	r3, #128	; 0x80
   8030c:	614b      	str	r3, [r1, #20]
   8030e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
   80312:	6154      	str	r4, [r2, #20]
   80314:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
   80318:	6150      	str	r0, [r2, #20]
   8031a:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
   8031e:	bc70      	pop	{r4, r5, r6}
   80320:	4770      	bx	lr
   80322:	bf00      	nop
   80324:	400e1200 	.word	0x400e1200
   80328:	400e1000 	.word	0x400e1000
   8032c:	400e0e00 	.word	0x400e0e00
   80330:	400e1400 	.word	0x400e1400

00080334 <pulseLeft1>:
   80334:	b538      	push	{r3, r4, r5, lr}
   80336:	4c03      	ldr	r4, [pc, #12]	; (80344 <pulseLeft1+0x10>)
   80338:	2510      	movs	r5, #16
   8033a:	6325      	str	r5, [r4, #48]	; 0x30
   8033c:	4b02      	ldr	r3, [pc, #8]	; (80348 <pulseLeft1+0x14>)
   8033e:	4798      	blx	r3
   80340:	6365      	str	r5, [r4, #52]	; 0x34
   80342:	bd38      	pop	{r3, r4, r5, pc}
   80344:	400e1200 	.word	0x400e1200
   80348:	00080185 	.word	0x00080185

0008034c <pulseRight1>:
   8034c:	b538      	push	{r3, r4, r5, lr}
   8034e:	4c03      	ldr	r4, [pc, #12]	; (8035c <pulseRight1+0x10>)
   80350:	2520      	movs	r5, #32
   80352:	6325      	str	r5, [r4, #48]	; 0x30
   80354:	4b02      	ldr	r3, [pc, #8]	; (80360 <pulseRight1+0x14>)
   80356:	4798      	blx	r3
   80358:	6365      	str	r5, [r4, #52]	; 0x34
   8035a:	bd38      	pop	{r3, r4, r5, pc}
   8035c:	400e1200 	.word	0x400e1200
   80360:	00080185 	.word	0x00080185

00080364 <moveForward1>:
   80364:	b510      	push	{r4, lr}
   80366:	460c      	mov	r4, r1
   80368:	4b04      	ldr	r3, [pc, #16]	; (8037c <moveForward1+0x18>)
   8036a:	4798      	blx	r3
   8036c:	4620      	mov	r0, r4
   8036e:	4b04      	ldr	r3, [pc, #16]	; (80380 <moveForward1+0x1c>)
   80370:	4798      	blx	r3
   80372:	f241 4082 	movw	r0, #5250	; 0x1482
   80376:	4b03      	ldr	r3, [pc, #12]	; (80384 <moveForward1+0x20>)
   80378:	4798      	blx	r3
   8037a:	bd10      	pop	{r4, pc}
   8037c:	00080335 	.word	0x00080335
   80380:	0008034d 	.word	0x0008034d
   80384:	00080185 	.word	0x00080185

00080388 <task_motor>:
   80388:	b570      	push	{r4, r5, r6, lr}
   8038a:	b082      	sub	sp, #8
   8038c:	4b11      	ldr	r3, [pc, #68]	; (803d4 <task_motor+0x4c>)
   8038e:	4798      	blx	r3
   80390:	4b11      	ldr	r3, [pc, #68]	; (803d8 <task_motor+0x50>)
   80392:	4798      	blx	r3
   80394:	f8ad 0006 	strh.w	r0, [sp, #6]
   80398:	4e10      	ldr	r6, [pc, #64]	; (803dc <task_motor+0x54>)
   8039a:	4d11      	ldr	r5, [pc, #68]	; (803e0 <task_motor+0x58>)
   8039c:	4c11      	ldr	r4, [pc, #68]	; (803e4 <task_motor+0x5c>)
   8039e:	4630      	mov	r0, r6
   803a0:	47a8      	blx	r5
   803a2:	6823      	ldr	r3, [r4, #0]
   803a4:	2b1d      	cmp	r3, #29
   803a6:	dd05      	ble.n	803b4 <task_motor+0x2c>
   803a8:	4b0f      	ldr	r3, [pc, #60]	; (803e8 <task_motor+0x60>)
   803aa:	681a      	ldr	r2, [r3, #0]
   803ac:	4b0f      	ldr	r3, [pc, #60]	; (803ec <task_motor+0x64>)
   803ae:	681b      	ldr	r3, [r3, #0]
   803b0:	429a      	cmp	r2, r3
   803b2:	dd05      	ble.n	803c0 <task_motor+0x38>
   803b4:	f240 50dc 	movw	r0, #1500	; 0x5dc
   803b8:	4601      	mov	r1, r0
   803ba:	4b0d      	ldr	r3, [pc, #52]	; (803f0 <task_motor+0x68>)
   803bc:	4798      	blx	r3
   803be:	e003      	b.n	803c8 <task_motor+0x40>
   803c0:	2002      	movs	r0, #2
   803c2:	4601      	mov	r1, r0
   803c4:	4b0b      	ldr	r3, [pc, #44]	; (803f4 <task_motor+0x6c>)
   803c6:	4798      	blx	r3
   803c8:	f10d 0006 	add.w	r0, sp, #6
   803cc:	2164      	movs	r1, #100	; 0x64
   803ce:	4b0a      	ldr	r3, [pc, #40]	; (803f8 <task_motor+0x70>)
   803d0:	4798      	blx	r3
   803d2:	e7e4      	b.n	8039e <task_motor+0x16>
   803d4:	00080291 	.word	0x00080291
   803d8:	000819bd 	.word	0x000819bd
   803dc:	00084a20 	.word	0x00084a20
   803e0:	00083101 	.word	0x00083101
   803e4:	200709b4 	.word	0x200709b4
   803e8:	20070134 	.word	0x20070134
   803ec:	20070138 	.word	0x20070138
   803f0:	00080365 	.word	0x00080365
   803f4:	00080215 	.word	0x00080215
   803f8:	00081c11 	.word	0x00081c11

000803fc <pulseins>:
#define TriggerPin PIO_PC22_IDX
#define Channel2

long sensordistance = 0;

int pulseins(){
   803fc:	b570      	push	{r4, r5, r6, lr}
	int state = 1;
	int flag = 0,clocktime;
   803fe:	2200      	movs	r2, #0
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80400:	4c11      	ldr	r4, [pc, #68]	; (80448 <pulseins+0x4c>)
	while(state){
		if(ioport_get_pin_level(EchoPin) && !flag){
			tc_start(TC0,0);
   80402:	4e12      	ldr	r6, [pc, #72]	; (8044c <pulseins+0x50>)
   80404:	4d12      	ldr	r5, [pc, #72]	; (80450 <pulseins+0x54>)
   80406:	6be3      	ldr	r3, [r4, #60]	; 0x3c

int pulseins(){
	int state = 1;
	int flag = 0,clocktime;
	while(state){
		if(ioport_get_pin_level(EchoPin) && !flag){
   80408:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   8040c:	d005      	beq.n	8041a <pulseins+0x1e>
   8040e:	b95a      	cbnz	r2, 80428 <pulseins+0x2c>
			tc_start(TC0,0);
   80410:	4630      	mov	r0, r6
   80412:	2100      	movs	r1, #0
   80414:	47a8      	blx	r5
			flag = 1;
   80416:	2201      	movs	r2, #1
   80418:	e006      	b.n	80428 <pulseins+0x2c>
   8041a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		}
		if(!ioport_get_pin_level(EchoPin) && flag)
   8041c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80420:	d1f1      	bne.n	80406 <pulseins+0xa>
   80422:	2a00      	cmp	r2, #0
   80424:	d0ef      	beq.n	80406 <pulseins+0xa>
   80426:	e003      	b.n	80430 <pulseins+0x34>
   80428:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8042a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   8042e:	d1ea      	bne.n	80406 <pulseins+0xa>
		{
			clocktime = tc_read_cv(TC0,0);
   80430:	4c06      	ldr	r4, [pc, #24]	; (8044c <pulseins+0x50>)
   80432:	4620      	mov	r0, r4
   80434:	2100      	movs	r1, #0
   80436:	4b07      	ldr	r3, [pc, #28]	; (80454 <pulseins+0x58>)
   80438:	4798      	blx	r3
   8043a:	4605      	mov	r5, r0
			tc_stop(TC0,0);
   8043c:	4620      	mov	r0, r4
   8043e:	2100      	movs	r1, #0
   80440:	4b05      	ldr	r3, [pc, #20]	; (80458 <pulseins+0x5c>)
   80442:	4798      	blx	r3
			flag = 0;
			state = 0;
		}
	}
	return clocktime;
}
   80444:	4628      	mov	r0, r5
   80446:	bd70      	pop	{r4, r5, r6, pc}
   80448:	400e1200 	.word	0x400e1200
   8044c:	40080000 	.word	0x40080000
   80450:	00080b71 	.word	0x00080b71
   80454:	00080b81 	.word	0x00080b81
   80458:	00080b79 	.word	0x00080b79

0008045c <init_sensor>:
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8045c:	4b05      	ldr	r3, [pc, #20]	; (80474 <init_sensor+0x18>)
   8045e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80462:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80464:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80468:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8046c:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8046e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   80472:	4770      	bx	lr
   80474:	400e1200 	.word	0x400e1200

00080478 <task_soundsensor>:
void init_sensor(){
	ioport_set_pin_dir(TriggerPin,IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(EchoPin,IOPORT_DIR_INPUT);
}

void task_soundsensor(void *pvParameters){
   80478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8047c:	b082      	sub	sp, #8
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 100;
	xLastWakeTime = xTaskGetTickCount();
   8047e:	4b1a      	ldr	r3, [pc, #104]	; (804e8 <task_soundsensor+0x70>)
   80480:	4798      	blx	r3
   80482:	f8ad 0006 	strh.w	r0, [sp, #6]
	init_sensor();
   80486:	4b19      	ldr	r3, [pc, #100]	; (804ec <task_soundsensor+0x74>)
   80488:	4798      	blx	r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8048a:	4f19      	ldr	r7, [pc, #100]	; (804f0 <task_soundsensor+0x78>)
		long duration;
		ioport_set_pin_level(TriggerPin,HIGH);
		delayMicroseconds(10000);
		ioport_set_pin_level(TriggerPin,LOW);
		duration = pulseins();
		sensordistance = (duration/42)/58.2;
   8048c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80518 <task_soundsensor+0xa0>
   80490:	a513      	add	r5, pc, #76	; (adr r5, 804e0 <task_soundsensor+0x68>)
   80492:	e9d5 4500 	ldrd	r4, r5, [r5]
	const portTickType xTimeIncrement = 100;
	xLastWakeTime = xTaskGetTickCount();
	init_sensor();
	
	 while (1){
		 puts("Task SENSORRRRR");
   80496:	4817      	ldr	r0, [pc, #92]	; (804f4 <task_soundsensor+0x7c>)
   80498:	4b17      	ldr	r3, [pc, #92]	; (804f8 <task_soundsensor+0x80>)
   8049a:	4798      	blx	r3
   8049c:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
   804a0:	633e      	str	r6, [r7, #48]	; 0x30
		long duration;
		ioport_set_pin_level(TriggerPin,HIGH);
		delayMicroseconds(10000);
   804a2:	f242 7010 	movw	r0, #10000	; 0x2710
   804a6:	4b15      	ldr	r3, [pc, #84]	; (804fc <task_soundsensor+0x84>)
   804a8:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   804aa:	637e      	str	r6, [r7, #52]	; 0x34
		ioport_set_pin_level(TriggerPin,LOW);
		duration = pulseins();
   804ac:	4b14      	ldr	r3, [pc, #80]	; (80500 <task_soundsensor+0x88>)
   804ae:	4798      	blx	r3
		sensordistance = (duration/42)/58.2;
   804b0:	fb88 2300 	smull	r2, r3, r8, r0
   804b4:	17c0      	asrs	r0, r0, #31
   804b6:	ebc0 00e3 	rsb	r0, r0, r3, asr #3
   804ba:	4b12      	ldr	r3, [pc, #72]	; (80504 <task_soundsensor+0x8c>)
   804bc:	4798      	blx	r3
   804be:	4622      	mov	r2, r4
   804c0:	462b      	mov	r3, r5
   804c2:	4e11      	ldr	r6, [pc, #68]	; (80508 <task_soundsensor+0x90>)
   804c4:	47b0      	blx	r6
   804c6:	4b11      	ldr	r3, [pc, #68]	; (8050c <task_soundsensor+0x94>)
   804c8:	4798      	blx	r3
   804ca:	4b11      	ldr	r3, [pc, #68]	; (80510 <task_soundsensor+0x98>)
   804cc:	6018      	str	r0, [r3, #0]
		vTaskDelayUntil(&xLastWakeTime,xTimeIncrement);
   804ce:	f10d 0006 	add.w	r0, sp, #6
   804d2:	2164      	movs	r1, #100	; 0x64
   804d4:	4b0f      	ldr	r3, [pc, #60]	; (80514 <task_soundsensor+0x9c>)
   804d6:	4798      	blx	r3
   804d8:	e7dd      	b.n	80496 <task_soundsensor+0x1e>
   804da:	bf00      	nop
   804dc:	f3af 8000 	nop.w
   804e0:	9999999a 	.word	0x9999999a
   804e4:	404d1999 	.word	0x404d1999
   804e8:	000819bd 	.word	0x000819bd
   804ec:	0008045d 	.word	0x0008045d
   804f0:	400e1200 	.word	0x400e1200
   804f4:	00084a34 	.word	0x00084a34
   804f8:	00083101 	.word	0x00083101
   804fc:	00080185 	.word	0x00080185
   80500:	000803fd 	.word	0x000803fd
   80504:	00082991 	.word	0x00082991
   80508:	00082cb1 	.word	0x00082cb1
   8050c:	00082e81 	.word	0x00082e81
   80510:	200709b4 	.word	0x200709b4
   80514:	00081c11 	.word	0x00081c11
   80518:	30c30c31 	.word	0x30c30c31
   8051c:	f3af 8000 	nop.w

00080520 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80520:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80522:	480e      	ldr	r0, [pc, #56]	; (8055c <sysclk_init+0x3c>)
   80524:	4b0e      	ldr	r3, [pc, #56]	; (80560 <sysclk_init+0x40>)
   80526:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80528:	2000      	movs	r0, #0
   8052a:	213e      	movs	r1, #62	; 0x3e
   8052c:	4b0d      	ldr	r3, [pc, #52]	; (80564 <sysclk_init+0x44>)
   8052e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80530:	4c0d      	ldr	r4, [pc, #52]	; (80568 <sysclk_init+0x48>)
   80532:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80534:	2800      	cmp	r0, #0
   80536:	d0fc      	beq.n	80532 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80538:	4b0c      	ldr	r3, [pc, #48]	; (8056c <sysclk_init+0x4c>)
   8053a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8053c:	4a0c      	ldr	r2, [pc, #48]	; (80570 <sysclk_init+0x50>)
   8053e:	4b0d      	ldr	r3, [pc, #52]	; (80574 <sysclk_init+0x54>)
   80540:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80542:	4c0d      	ldr	r4, [pc, #52]	; (80578 <sysclk_init+0x58>)
   80544:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80546:	2800      	cmp	r0, #0
   80548:	d0fc      	beq.n	80544 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8054a:	2010      	movs	r0, #16
   8054c:	4b0b      	ldr	r3, [pc, #44]	; (8057c <sysclk_init+0x5c>)
   8054e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80550:	4b0b      	ldr	r3, [pc, #44]	; (80580 <sysclk_init+0x60>)
   80552:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80554:	4801      	ldr	r0, [pc, #4]	; (8055c <sysclk_init+0x3c>)
   80556:	4b02      	ldr	r3, [pc, #8]	; (80560 <sysclk_init+0x40>)
   80558:	4798      	blx	r3
   8055a:	bd10      	pop	{r4, pc}
   8055c:	0501bd00 	.word	0x0501bd00
   80560:	200700a5 	.word	0x200700a5
   80564:	00080a71 	.word	0x00080a71
   80568:	00080ac5 	.word	0x00080ac5
   8056c:	00080ad5 	.word	0x00080ad5
   80570:	200d3f01 	.word	0x200d3f01
   80574:	400e0600 	.word	0x400e0600
   80578:	00080ae5 	.word	0x00080ae5
   8057c:	00080a0d 	.word	0x00080a0d
   80580:	00080cc5 	.word	0x00080cc5

00080584 <usart_serial_read_packet>:
   80584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80588:	b083      	sub	sp, #12
   8058a:	4605      	mov	r5, r0
   8058c:	4690      	mov	r8, r2
   8058e:	2a00      	cmp	r2, #0
   80590:	d047      	beq.n	80622 <usart_serial_read_packet+0x9e>
   80592:	1c4e      	adds	r6, r1, #1
   80594:	4f25      	ldr	r7, [pc, #148]	; (8062c <usart_serial_read_packet+0xa8>)
   80596:	4c26      	ldr	r4, [pc, #152]	; (80630 <usart_serial_read_packet+0xac>)
   80598:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80644 <usart_serial_read_packet+0xc0>
   8059c:	f8df b094 	ldr.w	fp, [pc, #148]	; 80634 <usart_serial_read_packet+0xb0>
   805a0:	f106 39ff 	add.w	r9, r6, #4294967295
   805a4:	2300      	movs	r3, #0
   805a6:	9301      	str	r3, [sp, #4]
   805a8:	4b22      	ldr	r3, [pc, #136]	; (80634 <usart_serial_read_packet+0xb0>)
   805aa:	429d      	cmp	r5, r3
   805ac:	d106      	bne.n	805bc <usart_serial_read_packet+0x38>
   805ae:	4658      	mov	r0, fp
   805b0:	4649      	mov	r1, r9
   805b2:	4b21      	ldr	r3, [pc, #132]	; (80638 <usart_serial_read_packet+0xb4>)
   805b4:	4798      	blx	r3
   805b6:	2800      	cmp	r0, #0
   805b8:	d1f9      	bne.n	805ae <usart_serial_read_packet+0x2a>
   805ba:	e019      	b.n	805f0 <usart_serial_read_packet+0x6c>
   805bc:	4b1f      	ldr	r3, [pc, #124]	; (8063c <usart_serial_read_packet+0xb8>)
   805be:	429d      	cmp	r5, r3
   805c0:	d109      	bne.n	805d6 <usart_serial_read_packet+0x52>
   805c2:	4699      	mov	r9, r3
   805c4:	4648      	mov	r0, r9
   805c6:	a901      	add	r1, sp, #4
   805c8:	47a0      	blx	r4
   805ca:	2800      	cmp	r0, #0
   805cc:	d1fa      	bne.n	805c4 <usart_serial_read_packet+0x40>
   805ce:	9b01      	ldr	r3, [sp, #4]
   805d0:	f806 3c01 	strb.w	r3, [r6, #-1]
   805d4:	e017      	b.n	80606 <usart_serial_read_packet+0x82>
   805d6:	4b1a      	ldr	r3, [pc, #104]	; (80640 <usart_serial_read_packet+0xbc>)
   805d8:	429d      	cmp	r5, r3
   805da:	d109      	bne.n	805f0 <usart_serial_read_packet+0x6c>
   805dc:	4699      	mov	r9, r3
   805de:	4648      	mov	r0, r9
   805e0:	a901      	add	r1, sp, #4
   805e2:	47a0      	blx	r4
   805e4:	2800      	cmp	r0, #0
   805e6:	d1fa      	bne.n	805de <usart_serial_read_packet+0x5a>
   805e8:	9b01      	ldr	r3, [sp, #4]
   805ea:	f806 3c01 	strb.w	r3, [r6, #-1]
   805ee:	e014      	b.n	8061a <usart_serial_read_packet+0x96>
   805f0:	4555      	cmp	r5, sl
   805f2:	d108      	bne.n	80606 <usart_serial_read_packet+0x82>
   805f4:	4650      	mov	r0, sl
   805f6:	a901      	add	r1, sp, #4
   805f8:	47a0      	blx	r4
   805fa:	2800      	cmp	r0, #0
   805fc:	d1fa      	bne.n	805f4 <usart_serial_read_packet+0x70>
   805fe:	9b01      	ldr	r3, [sp, #4]
   80600:	f806 3c01 	strb.w	r3, [r6, #-1]
   80604:	e009      	b.n	8061a <usart_serial_read_packet+0x96>
   80606:	42bd      	cmp	r5, r7
   80608:	d107      	bne.n	8061a <usart_serial_read_packet+0x96>
   8060a:	4638      	mov	r0, r7
   8060c:	a901      	add	r1, sp, #4
   8060e:	47a0      	blx	r4
   80610:	2800      	cmp	r0, #0
   80612:	d1fa      	bne.n	8060a <usart_serial_read_packet+0x86>
   80614:	9b01      	ldr	r3, [sp, #4]
   80616:	f806 3c01 	strb.w	r3, [r6, #-1]
   8061a:	3601      	adds	r6, #1
   8061c:	f1b8 0801 	subs.w	r8, r8, #1
   80620:	d1be      	bne.n	805a0 <usart_serial_read_packet+0x1c>
   80622:	2000      	movs	r0, #0
   80624:	b003      	add	sp, #12
   80626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8062a:	bf00      	nop
   8062c:	400a4000 	.word	0x400a4000
   80630:	00080bf9 	.word	0x00080bf9
   80634:	400e0800 	.word	0x400e0800
   80638:	00080bd1 	.word	0x00080bd1
   8063c:	40098000 	.word	0x40098000
   80640:	4009c000 	.word	0x4009c000
   80644:	400a0000 	.word	0x400a0000

00080648 <_read>:
   80648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8064c:	460c      	mov	r4, r1
   8064e:	4690      	mov	r8, r2
   80650:	b960      	cbnz	r0, 8066c <_read+0x24>
   80652:	2a00      	cmp	r2, #0
   80654:	dd0e      	ble.n	80674 <_read+0x2c>
   80656:	188f      	adds	r7, r1, r2
   80658:	4e09      	ldr	r6, [pc, #36]	; (80680 <_read+0x38>)
   8065a:	4d0a      	ldr	r5, [pc, #40]	; (80684 <_read+0x3c>)
   8065c:	6830      	ldr	r0, [r6, #0]
   8065e:	4621      	mov	r1, r4
   80660:	682b      	ldr	r3, [r5, #0]
   80662:	4798      	blx	r3
   80664:	3401      	adds	r4, #1
   80666:	42bc      	cmp	r4, r7
   80668:	d1f8      	bne.n	8065c <_read+0x14>
   8066a:	e006      	b.n	8067a <_read+0x32>
   8066c:	f04f 30ff 	mov.w	r0, #4294967295
   80670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80674:	2000      	movs	r0, #0
   80676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8067a:	4640      	mov	r0, r8
   8067c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80680:	20078cb4 	.word	0x20078cb4
   80684:	20078cac 	.word	0x20078cac

00080688 <_write>:
   80688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8068c:	460e      	mov	r6, r1
   8068e:	4615      	mov	r5, r2
   80690:	3801      	subs	r0, #1
   80692:	2802      	cmp	r0, #2
   80694:	d80f      	bhi.n	806b6 <_write+0x2e>
   80696:	b192      	cbz	r2, 806be <_write+0x36>
   80698:	2400      	movs	r4, #0
   8069a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 806d8 <_write+0x50>
   8069e:	4f0d      	ldr	r7, [pc, #52]	; (806d4 <_write+0x4c>)
   806a0:	f8d8 0000 	ldr.w	r0, [r8]
   806a4:	5d31      	ldrb	r1, [r6, r4]
   806a6:	683b      	ldr	r3, [r7, #0]
   806a8:	4798      	blx	r3
   806aa:	2800      	cmp	r0, #0
   806ac:	db0a      	blt.n	806c4 <_write+0x3c>
   806ae:	3401      	adds	r4, #1
   806b0:	42a5      	cmp	r5, r4
   806b2:	d1f5      	bne.n	806a0 <_write+0x18>
   806b4:	e00a      	b.n	806cc <_write+0x44>
   806b6:	f04f 30ff 	mov.w	r0, #4294967295
   806ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   806be:	2000      	movs	r0, #0
   806c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   806c4:	f04f 30ff 	mov.w	r0, #4294967295
   806c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   806cc:	4620      	mov	r0, r4
   806ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   806d2:	bf00      	nop
   806d4:	20078cb0 	.word	0x20078cb0
   806d8:	20078cb4 	.word	0x20078cb4

000806dc <board_init>:
   806dc:	b510      	push	{r4, lr}
   806de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   806e2:	4b13      	ldr	r3, [pc, #76]	; (80730 <board_init+0x54>)
   806e4:	605a      	str	r2, [r3, #4]
   806e6:	200b      	movs	r0, #11
   806e8:	4c12      	ldr	r4, [pc, #72]	; (80734 <board_init+0x58>)
   806ea:	47a0      	blx	r4
   806ec:	200c      	movs	r0, #12
   806ee:	47a0      	blx	r4
   806f0:	200d      	movs	r0, #13
   806f2:	47a0      	blx	r4
   806f4:	200e      	movs	r0, #14
   806f6:	47a0      	blx	r4
   806f8:	203b      	movs	r0, #59	; 0x3b
   806fa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   806fe:	4c0e      	ldr	r4, [pc, #56]	; (80738 <board_init+0x5c>)
   80700:	47a0      	blx	r4
   80702:	2055      	movs	r0, #85	; 0x55
   80704:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80708:	47a0      	blx	r4
   8070a:	2056      	movs	r0, #86	; 0x56
   8070c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80710:	47a0      	blx	r4
   80712:	2068      	movs	r0, #104	; 0x68
   80714:	4909      	ldr	r1, [pc, #36]	; (8073c <board_init+0x60>)
   80716:	47a0      	blx	r4
   80718:	205c      	movs	r0, #92	; 0x5c
   8071a:	4909      	ldr	r1, [pc, #36]	; (80740 <board_init+0x64>)
   8071c:	47a0      	blx	r4
   8071e:	4809      	ldr	r0, [pc, #36]	; (80744 <board_init+0x68>)
   80720:	f44f 7140 	mov.w	r1, #768	; 0x300
   80724:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80728:	4b07      	ldr	r3, [pc, #28]	; (80748 <board_init+0x6c>)
   8072a:	4798      	blx	r3
   8072c:	bd10      	pop	{r4, pc}
   8072e:	bf00      	nop
   80730:	400e1a50 	.word	0x400e1a50
   80734:	00080af5 	.word	0x00080af5
   80738:	000807f1 	.word	0x000807f1
   8073c:	28000079 	.word	0x28000079
   80740:	28000001 	.word	0x28000001
   80744:	400e0e00 	.word	0x400e0e00
   80748:	000808c5 	.word	0x000808c5

0008074c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8074c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8074e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80752:	d016      	beq.n	80782 <pio_set_peripheral+0x36>
   80754:	d804      	bhi.n	80760 <pio_set_peripheral+0x14>
   80756:	b1c1      	cbz	r1, 8078a <pio_set_peripheral+0x3e>
   80758:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8075c:	d00a      	beq.n	80774 <pio_set_peripheral+0x28>
   8075e:	e013      	b.n	80788 <pio_set_peripheral+0x3c>
   80760:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80764:	d011      	beq.n	8078a <pio_set_peripheral+0x3e>
   80766:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8076a:	d00e      	beq.n	8078a <pio_set_peripheral+0x3e>
   8076c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80770:	d10a      	bne.n	80788 <pio_set_peripheral+0x3c>
   80772:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80774:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80776:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80778:	400b      	ands	r3, r1
   8077a:	ea23 0302 	bic.w	r3, r3, r2
   8077e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80780:	e002      	b.n	80788 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80782:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80784:	4313      	orrs	r3, r2
   80786:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80788:	6042      	str	r2, [r0, #4]
   8078a:	4770      	bx	lr

0008078c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8078c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8078e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80792:	bf14      	ite	ne
   80794:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80796:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80798:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8079c:	bf14      	ite	ne
   8079e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   807a0:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   807a2:	f012 0f02 	tst.w	r2, #2
   807a6:	d002      	beq.n	807ae <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   807a8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   807ac:	e004      	b.n	807b8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   807ae:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   807b2:	bf18      	it	ne
   807b4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   807b8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   807ba:	6001      	str	r1, [r0, #0]
   807bc:	4770      	bx	lr
   807be:	bf00      	nop

000807c0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   807c0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   807c2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   807c4:	9c01      	ldr	r4, [sp, #4]
   807c6:	b10c      	cbz	r4, 807cc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   807c8:	6641      	str	r1, [r0, #100]	; 0x64
   807ca:	e000      	b.n	807ce <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   807cc:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   807ce:	b10b      	cbz	r3, 807d4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   807d0:	6501      	str	r1, [r0, #80]	; 0x50
   807d2:	e000      	b.n	807d6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   807d4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   807d6:	b10a      	cbz	r2, 807dc <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   807d8:	6301      	str	r1, [r0, #48]	; 0x30
   807da:	e000      	b.n	807de <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   807dc:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   807de:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   807e0:	6001      	str	r1, [r0, #0]
}
   807e2:	f85d 4b04 	ldr.w	r4, [sp], #4
   807e6:	4770      	bx	lr

000807e8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   807e8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   807ea:	4770      	bx	lr

000807ec <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   807ec:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   807ee:	4770      	bx	lr

000807f0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   807f0:	b570      	push	{r4, r5, r6, lr}
   807f2:	b082      	sub	sp, #8
   807f4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   807f6:	0944      	lsrs	r4, r0, #5
   807f8:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   807fc:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80800:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80802:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80806:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8080a:	d030      	beq.n	8086e <pio_configure_pin+0x7e>
   8080c:	d806      	bhi.n	8081c <pio_configure_pin+0x2c>
   8080e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80812:	d00a      	beq.n	8082a <pio_configure_pin+0x3a>
   80814:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80818:	d018      	beq.n	8084c <pio_configure_pin+0x5c>
   8081a:	e049      	b.n	808b0 <pio_configure_pin+0xc0>
   8081c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80820:	d030      	beq.n	80884 <pio_configure_pin+0x94>
   80822:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80826:	d02d      	beq.n	80884 <pio_configure_pin+0x94>
   80828:	e042      	b.n	808b0 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8082a:	f000 001f 	and.w	r0, r0, #31
   8082e:	2401      	movs	r4, #1
   80830:	4084      	lsls	r4, r0
   80832:	4630      	mov	r0, r6
   80834:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80838:	4622      	mov	r2, r4
   8083a:	4b1f      	ldr	r3, [pc, #124]	; (808b8 <pio_configure_pin+0xc8>)
   8083c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8083e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80842:	bf14      	ite	ne
   80844:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80846:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80848:	2001      	movs	r0, #1
   8084a:	e032      	b.n	808b2 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8084c:	f000 001f 	and.w	r0, r0, #31
   80850:	2401      	movs	r4, #1
   80852:	4084      	lsls	r4, r0
   80854:	4630      	mov	r0, r6
   80856:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8085a:	4622      	mov	r2, r4
   8085c:	4b16      	ldr	r3, [pc, #88]	; (808b8 <pio_configure_pin+0xc8>)
   8085e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80860:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80864:	bf14      	ite	ne
   80866:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80868:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8086a:	2001      	movs	r0, #1
   8086c:	e021      	b.n	808b2 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8086e:	f000 011f 	and.w	r1, r0, #31
   80872:	2401      	movs	r4, #1
   80874:	4630      	mov	r0, r6
   80876:	fa04 f101 	lsl.w	r1, r4, r1
   8087a:	462a      	mov	r2, r5
   8087c:	4b0f      	ldr	r3, [pc, #60]	; (808bc <pio_configure_pin+0xcc>)
   8087e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80880:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80882:	e016      	b.n	808b2 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80884:	f000 011f 	and.w	r1, r0, #31
   80888:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8088a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8088e:	ea05 0304 	and.w	r3, r5, r4
   80892:	9300      	str	r3, [sp, #0]
   80894:	4630      	mov	r0, r6
   80896:	fa04 f101 	lsl.w	r1, r4, r1
   8089a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8089e:	bf14      	ite	ne
   808a0:	2200      	movne	r2, #0
   808a2:	2201      	moveq	r2, #1
   808a4:	f3c5 0380 	ubfx	r3, r5, #2, #1
   808a8:	4d05      	ldr	r5, [pc, #20]	; (808c0 <pio_configure_pin+0xd0>)
   808aa:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   808ac:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   808ae:	e000      	b.n	808b2 <pio_configure_pin+0xc2>

	default:
		return 0;
   808b0:	2000      	movs	r0, #0
	}

	return 1;
}
   808b2:	b002      	add	sp, #8
   808b4:	bd70      	pop	{r4, r5, r6, pc}
   808b6:	bf00      	nop
   808b8:	0008074d 	.word	0x0008074d
   808bc:	0008078d 	.word	0x0008078d
   808c0:	000807c1 	.word	0x000807c1

000808c4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   808c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   808c6:	b083      	sub	sp, #12
   808c8:	4607      	mov	r7, r0
   808ca:	460e      	mov	r6, r1
   808cc:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   808ce:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   808d2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   808d6:	d026      	beq.n	80926 <pio_configure_pin_group+0x62>
   808d8:	d806      	bhi.n	808e8 <pio_configure_pin_group+0x24>
   808da:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   808de:	d00a      	beq.n	808f6 <pio_configure_pin_group+0x32>
   808e0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   808e4:	d013      	beq.n	8090e <pio_configure_pin_group+0x4a>
   808e6:	e034      	b.n	80952 <pio_configure_pin_group+0x8e>
   808e8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   808ec:	d01f      	beq.n	8092e <pio_configure_pin_group+0x6a>
   808ee:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   808f2:	d01c      	beq.n	8092e <pio_configure_pin_group+0x6a>
   808f4:	e02d      	b.n	80952 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   808f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   808fa:	4632      	mov	r2, r6
   808fc:	4b16      	ldr	r3, [pc, #88]	; (80958 <pio_configure_pin_group+0x94>)
   808fe:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80900:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80904:	bf14      	ite	ne
   80906:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80908:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8090a:	2001      	movs	r0, #1
   8090c:	e022      	b.n	80954 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8090e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80912:	4632      	mov	r2, r6
   80914:	4b10      	ldr	r3, [pc, #64]	; (80958 <pio_configure_pin_group+0x94>)
   80916:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80918:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8091c:	bf14      	ite	ne
   8091e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80920:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80922:	2001      	movs	r0, #1
   80924:	e016      	b.n	80954 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80926:	4b0d      	ldr	r3, [pc, #52]	; (8095c <pio_configure_pin_group+0x98>)
   80928:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8092a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   8092c:	e012      	b.n	80954 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8092e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80932:	f005 0301 	and.w	r3, r5, #1
   80936:	9300      	str	r3, [sp, #0]
   80938:	4638      	mov	r0, r7
   8093a:	4631      	mov	r1, r6
   8093c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80940:	bf14      	ite	ne
   80942:	2200      	movne	r2, #0
   80944:	2201      	moveq	r2, #1
   80946:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8094a:	4c05      	ldr	r4, [pc, #20]	; (80960 <pio_configure_pin_group+0x9c>)
   8094c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8094e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80950:	e000      	b.n	80954 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80952:	2000      	movs	r0, #0
	}

	return 1;
}
   80954:	b003      	add	sp, #12
   80956:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80958:	0008074d 	.word	0x0008074d
   8095c:	0008078d 	.word	0x0008078d
   80960:	000807c1 	.word	0x000807c1

00080964 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80968:	4604      	mov	r4, r0
   8096a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8096c:	4b10      	ldr	r3, [pc, #64]	; (809b0 <pio_handler_process+0x4c>)
   8096e:	4798      	blx	r3
   80970:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80972:	4620      	mov	r0, r4
   80974:	4b0f      	ldr	r3, [pc, #60]	; (809b4 <pio_handler_process+0x50>)
   80976:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80978:	4005      	ands	r5, r0
   8097a:	d017      	beq.n	809ac <pio_handler_process+0x48>
   8097c:	4f0e      	ldr	r7, [pc, #56]	; (809b8 <pio_handler_process+0x54>)
   8097e:	f107 040c 	add.w	r4, r7, #12
   80982:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80984:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80988:	42b3      	cmp	r3, r6
   8098a:	d10a      	bne.n	809a2 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8098c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80990:	4229      	tst	r1, r5
   80992:	d006      	beq.n	809a2 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80994:	6823      	ldr	r3, [r4, #0]
   80996:	4630      	mov	r0, r6
   80998:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8099a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8099e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   809a2:	42bc      	cmp	r4, r7
   809a4:	d002      	beq.n	809ac <pio_handler_process+0x48>
   809a6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   809a8:	2d00      	cmp	r5, #0
   809aa:	d1eb      	bne.n	80984 <pio_handler_process+0x20>
   809ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   809b0:	000807e9 	.word	0x000807e9
   809b4:	000807ed 	.word	0x000807ed
   809b8:	200709b8 	.word	0x200709b8

000809bc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   809bc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   809be:	4802      	ldr	r0, [pc, #8]	; (809c8 <PIOA_Handler+0xc>)
   809c0:	210b      	movs	r1, #11
   809c2:	4b02      	ldr	r3, [pc, #8]	; (809cc <PIOA_Handler+0x10>)
   809c4:	4798      	blx	r3
   809c6:	bd08      	pop	{r3, pc}
   809c8:	400e0e00 	.word	0x400e0e00
   809cc:	00080965 	.word	0x00080965

000809d0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   809d0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   809d2:	4802      	ldr	r0, [pc, #8]	; (809dc <PIOB_Handler+0xc>)
   809d4:	210c      	movs	r1, #12
   809d6:	4b02      	ldr	r3, [pc, #8]	; (809e0 <PIOB_Handler+0x10>)
   809d8:	4798      	blx	r3
   809da:	bd08      	pop	{r3, pc}
   809dc:	400e1000 	.word	0x400e1000
   809e0:	00080965 	.word	0x00080965

000809e4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   809e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   809e6:	4802      	ldr	r0, [pc, #8]	; (809f0 <PIOC_Handler+0xc>)
   809e8:	210d      	movs	r1, #13
   809ea:	4b02      	ldr	r3, [pc, #8]	; (809f4 <PIOC_Handler+0x10>)
   809ec:	4798      	blx	r3
   809ee:	bd08      	pop	{r3, pc}
   809f0:	400e1200 	.word	0x400e1200
   809f4:	00080965 	.word	0x00080965

000809f8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   809f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   809fa:	4802      	ldr	r0, [pc, #8]	; (80a04 <PIOD_Handler+0xc>)
   809fc:	210e      	movs	r1, #14
   809fe:	4b02      	ldr	r3, [pc, #8]	; (80a08 <PIOD_Handler+0x10>)
   80a00:	4798      	blx	r3
   80a02:	bd08      	pop	{r3, pc}
   80a04:	400e1400 	.word	0x400e1400
   80a08:	00080965 	.word	0x00080965

00080a0c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80a0c:	4b17      	ldr	r3, [pc, #92]	; (80a6c <pmc_switch_mck_to_pllack+0x60>)
   80a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80a10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   80a14:	4310      	orrs	r0, r2
   80a16:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80a1a:	f013 0f08 	tst.w	r3, #8
   80a1e:	d109      	bne.n	80a34 <pmc_switch_mck_to_pllack+0x28>
   80a20:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80a24:	4911      	ldr	r1, [pc, #68]	; (80a6c <pmc_switch_mck_to_pllack+0x60>)
   80a26:	e001      	b.n	80a2c <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80a28:	3b01      	subs	r3, #1
   80a2a:	d019      	beq.n	80a60 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a2c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80a2e:	f012 0f08 	tst.w	r2, #8
   80a32:	d0f9      	beq.n	80a28 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80a34:	4b0d      	ldr	r3, [pc, #52]	; (80a6c <pmc_switch_mck_to_pllack+0x60>)
   80a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80a38:	f022 0203 	bic.w	r2, r2, #3
   80a3c:	f042 0202 	orr.w	r2, r2, #2
   80a40:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a42:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80a44:	f010 0008 	ands.w	r0, r0, #8
   80a48:	d10c      	bne.n	80a64 <pmc_switch_mck_to_pllack+0x58>
   80a4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80a4e:	4907      	ldr	r1, [pc, #28]	; (80a6c <pmc_switch_mck_to_pllack+0x60>)
   80a50:	e001      	b.n	80a56 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80a52:	3b01      	subs	r3, #1
   80a54:	d008      	beq.n	80a68 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a56:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80a58:	f012 0f08 	tst.w	r2, #8
   80a5c:	d0f9      	beq.n	80a52 <pmc_switch_mck_to_pllack+0x46>
   80a5e:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80a60:	2001      	movs	r0, #1
   80a62:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80a64:	2000      	movs	r0, #0
   80a66:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80a68:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80a6a:	4770      	bx	lr
   80a6c:	400e0600 	.word	0x400e0600

00080a70 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80a70:	b138      	cbz	r0, 80a82 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80a72:	4911      	ldr	r1, [pc, #68]	; (80ab8 <pmc_switch_mainck_to_xtal+0x48>)
   80a74:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80a76:	4a11      	ldr	r2, [pc, #68]	; (80abc <pmc_switch_mainck_to_xtal+0x4c>)
   80a78:	401a      	ands	r2, r3
   80a7a:	4b11      	ldr	r3, [pc, #68]	; (80ac0 <pmc_switch_mainck_to_xtal+0x50>)
   80a7c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80a7e:	620b      	str	r3, [r1, #32]
   80a80:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80a82:	4a0d      	ldr	r2, [pc, #52]	; (80ab8 <pmc_switch_mainck_to_xtal+0x48>)
   80a84:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80a86:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80a8a:	f023 0303 	bic.w	r3, r3, #3
   80a8e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80a92:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80a96:	0209      	lsls	r1, r1, #8
   80a98:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80a9a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80a9c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80a9e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80aa0:	f013 0f01 	tst.w	r3, #1
   80aa4:	d0fb      	beq.n	80a9e <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80aa6:	4a04      	ldr	r2, [pc, #16]	; (80ab8 <pmc_switch_mainck_to_xtal+0x48>)
   80aa8:	6a13      	ldr	r3, [r2, #32]
   80aaa:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80ab2:	6213      	str	r3, [r2, #32]
   80ab4:	4770      	bx	lr
   80ab6:	bf00      	nop
   80ab8:	400e0600 	.word	0x400e0600
   80abc:	fec8fffc 	.word	0xfec8fffc
   80ac0:	01370002 	.word	0x01370002

00080ac4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80ac4:	4b02      	ldr	r3, [pc, #8]	; (80ad0 <pmc_osc_is_ready_mainck+0xc>)
   80ac6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80ac8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80acc:	4770      	bx	lr
   80ace:	bf00      	nop
   80ad0:	400e0600 	.word	0x400e0600

00080ad4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80ad4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80ad8:	4b01      	ldr	r3, [pc, #4]	; (80ae0 <pmc_disable_pllack+0xc>)
   80ada:	629a      	str	r2, [r3, #40]	; 0x28
   80adc:	4770      	bx	lr
   80ade:	bf00      	nop
   80ae0:	400e0600 	.word	0x400e0600

00080ae4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80ae4:	4b02      	ldr	r3, [pc, #8]	; (80af0 <pmc_is_locked_pllack+0xc>)
   80ae6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80ae8:	f000 0002 	and.w	r0, r0, #2
   80aec:	4770      	bx	lr
   80aee:	bf00      	nop
   80af0:	400e0600 	.word	0x400e0600

00080af4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80af4:	282c      	cmp	r0, #44	; 0x2c
   80af6:	d820      	bhi.n	80b3a <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80af8:	281f      	cmp	r0, #31
   80afa:	d80d      	bhi.n	80b18 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80afc:	4b12      	ldr	r3, [pc, #72]	; (80b48 <pmc_enable_periph_clk+0x54>)
   80afe:	699a      	ldr	r2, [r3, #24]
   80b00:	2301      	movs	r3, #1
   80b02:	4083      	lsls	r3, r0
   80b04:	401a      	ands	r2, r3
   80b06:	4293      	cmp	r3, r2
   80b08:	d019      	beq.n	80b3e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80b0a:	2301      	movs	r3, #1
   80b0c:	fa03 f000 	lsl.w	r0, r3, r0
   80b10:	4b0d      	ldr	r3, [pc, #52]	; (80b48 <pmc_enable_periph_clk+0x54>)
   80b12:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80b14:	2000      	movs	r0, #0
   80b16:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80b18:	4b0b      	ldr	r3, [pc, #44]	; (80b48 <pmc_enable_periph_clk+0x54>)
   80b1a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   80b1e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80b20:	2301      	movs	r3, #1
   80b22:	4083      	lsls	r3, r0
   80b24:	401a      	ands	r2, r3
   80b26:	4293      	cmp	r3, r2
   80b28:	d00b      	beq.n	80b42 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80b2a:	2301      	movs	r3, #1
   80b2c:	fa03 f000 	lsl.w	r0, r3, r0
   80b30:	4b05      	ldr	r3, [pc, #20]	; (80b48 <pmc_enable_periph_clk+0x54>)
   80b32:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80b36:	2000      	movs	r0, #0
   80b38:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80b3a:	2001      	movs	r0, #1
   80b3c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80b3e:	2000      	movs	r0, #0
   80b40:	4770      	bx	lr
   80b42:	2000      	movs	r0, #0
}
   80b44:	4770      	bx	lr
   80b46:	bf00      	nop
   80b48:	400e0600 	.word	0x400e0600

00080b4c <tc_init>:
   80b4c:	b410      	push	{r4}
   80b4e:	0189      	lsls	r1, r1, #6
   80b50:	1843      	adds	r3, r0, r1
   80b52:	2402      	movs	r4, #2
   80b54:	5044      	str	r4, [r0, r1]
   80b56:	f04f 31ff 	mov.w	r1, #4294967295
   80b5a:	6299      	str	r1, [r3, #40]	; 0x28
   80b5c:	6a19      	ldr	r1, [r3, #32]
   80b5e:	605a      	str	r2, [r3, #4]
   80b60:	f85d 4b04 	ldr.w	r4, [sp], #4
   80b64:	4770      	bx	lr
   80b66:	bf00      	nop

00080b68 <tc_set_block_mode>:
   80b68:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   80b6c:	4770      	bx	lr
   80b6e:	bf00      	nop

00080b70 <tc_start>:
   80b70:	0189      	lsls	r1, r1, #6
   80b72:	2305      	movs	r3, #5
   80b74:	5043      	str	r3, [r0, r1]
   80b76:	4770      	bx	lr

00080b78 <tc_stop>:
   80b78:	0189      	lsls	r1, r1, #6
   80b7a:	2302      	movs	r3, #2
   80b7c:	5043      	str	r3, [r0, r1]
   80b7e:	4770      	bx	lr

00080b80 <tc_read_cv>:
   80b80:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80b84:	6908      	ldr	r0, [r1, #16]
   80b86:	4770      	bx	lr

00080b88 <uart_init>:
   80b88:	b410      	push	{r4}
   80b8a:	23ac      	movs	r3, #172	; 0xac
   80b8c:	6003      	str	r3, [r0, #0]
   80b8e:	680a      	ldr	r2, [r1, #0]
   80b90:	684b      	ldr	r3, [r1, #4]
   80b92:	fbb2 f3f3 	udiv	r3, r2, r3
   80b96:	091b      	lsrs	r3, r3, #4
   80b98:	1e5c      	subs	r4, r3, #1
   80b9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80b9e:	4294      	cmp	r4, r2
   80ba0:	d80a      	bhi.n	80bb8 <uart_init+0x30>
   80ba2:	6203      	str	r3, [r0, #32]
   80ba4:	688b      	ldr	r3, [r1, #8]
   80ba6:	6043      	str	r3, [r0, #4]
   80ba8:	f240 2302 	movw	r3, #514	; 0x202
   80bac:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
   80bb0:	2350      	movs	r3, #80	; 0x50
   80bb2:	6003      	str	r3, [r0, #0]
   80bb4:	2000      	movs	r0, #0
   80bb6:	e000      	b.n	80bba <uart_init+0x32>
   80bb8:	2001      	movs	r0, #1
   80bba:	f85d 4b04 	ldr.w	r4, [sp], #4
   80bbe:	4770      	bx	lr

00080bc0 <uart_write>:
   80bc0:	6943      	ldr	r3, [r0, #20]
   80bc2:	f013 0f02 	tst.w	r3, #2
   80bc6:	bf1a      	itte	ne
   80bc8:	61c1      	strne	r1, [r0, #28]
   80bca:	2000      	movne	r0, #0
   80bcc:	2001      	moveq	r0, #1
   80bce:	4770      	bx	lr

00080bd0 <uart_read>:
   80bd0:	6943      	ldr	r3, [r0, #20]
   80bd2:	f013 0f01 	tst.w	r3, #1
   80bd6:	bf1d      	ittte	ne
   80bd8:	6983      	ldrne	r3, [r0, #24]
   80bda:	700b      	strbne	r3, [r1, #0]
   80bdc:	2000      	movne	r0, #0
   80bde:	2001      	moveq	r0, #1
   80be0:	4770      	bx	lr
   80be2:	bf00      	nop

00080be4 <usart_write>:
   80be4:	6943      	ldr	r3, [r0, #20]
   80be6:	f013 0f02 	tst.w	r3, #2
   80bea:	bf1d      	ittte	ne
   80bec:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80bf0:	61c1      	strne	r1, [r0, #28]
   80bf2:	2000      	movne	r0, #0
   80bf4:	2001      	moveq	r0, #1
   80bf6:	4770      	bx	lr

00080bf8 <usart_read>:
   80bf8:	6943      	ldr	r3, [r0, #20]
   80bfa:	f013 0f01 	tst.w	r3, #1
   80bfe:	d005      	beq.n	80c0c <usart_read+0x14>
   80c00:	6983      	ldr	r3, [r0, #24]
   80c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80c06:	600b      	str	r3, [r1, #0]
   80c08:	2000      	movs	r0, #0
   80c0a:	4770      	bx	lr
   80c0c:	2001      	movs	r0, #1
   80c0e:	4770      	bx	lr

00080c10 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80c10:	e7fe      	b.n	80c10 <Dummy_Handler>
   80c12:	bf00      	nop

00080c14 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80c14:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80c16:	4b1e      	ldr	r3, [pc, #120]	; (80c90 <Reset_Handler+0x7c>)
   80c18:	4a1e      	ldr	r2, [pc, #120]	; (80c94 <Reset_Handler+0x80>)
   80c1a:	429a      	cmp	r2, r3
   80c1c:	d003      	beq.n	80c26 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80c1e:	4b1e      	ldr	r3, [pc, #120]	; (80c98 <Reset_Handler+0x84>)
   80c20:	4a1b      	ldr	r2, [pc, #108]	; (80c90 <Reset_Handler+0x7c>)
   80c22:	429a      	cmp	r2, r3
   80c24:	d304      	bcc.n	80c30 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80c26:	4b1d      	ldr	r3, [pc, #116]	; (80c9c <Reset_Handler+0x88>)
   80c28:	4a1d      	ldr	r2, [pc, #116]	; (80ca0 <Reset_Handler+0x8c>)
   80c2a:	429a      	cmp	r2, r3
   80c2c:	d30f      	bcc.n	80c4e <Reset_Handler+0x3a>
   80c2e:	e01a      	b.n	80c66 <Reset_Handler+0x52>
   80c30:	4b1c      	ldr	r3, [pc, #112]	; (80ca4 <Reset_Handler+0x90>)
   80c32:	4c1d      	ldr	r4, [pc, #116]	; (80ca8 <Reset_Handler+0x94>)
   80c34:	1ae4      	subs	r4, r4, r3
   80c36:	f024 0403 	bic.w	r4, r4, #3
   80c3a:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80c3c:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80c3e:	4814      	ldr	r0, [pc, #80]	; (80c90 <Reset_Handler+0x7c>)
   80c40:	4914      	ldr	r1, [pc, #80]	; (80c94 <Reset_Handler+0x80>)
   80c42:	585a      	ldr	r2, [r3, r1]
   80c44:	501a      	str	r2, [r3, r0]
   80c46:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80c48:	42a3      	cmp	r3, r4
   80c4a:	d1fa      	bne.n	80c42 <Reset_Handler+0x2e>
   80c4c:	e7eb      	b.n	80c26 <Reset_Handler+0x12>
   80c4e:	4b17      	ldr	r3, [pc, #92]	; (80cac <Reset_Handler+0x98>)
   80c50:	4917      	ldr	r1, [pc, #92]	; (80cb0 <Reset_Handler+0x9c>)
   80c52:	1ac9      	subs	r1, r1, r3
   80c54:	f021 0103 	bic.w	r1, r1, #3
   80c58:	1d1a      	adds	r2, r3, #4
   80c5a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80c5c:	2200      	movs	r2, #0
   80c5e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80c62:	428b      	cmp	r3, r1
   80c64:	d1fb      	bne.n	80c5e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80c66:	4a13      	ldr	r2, [pc, #76]	; (80cb4 <Reset_Handler+0xa0>)
   80c68:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80c6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80c70:	4911      	ldr	r1, [pc, #68]	; (80cb8 <Reset_Handler+0xa4>)
   80c72:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80c74:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80c78:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80c7c:	d203      	bcs.n	80c86 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80c7e:	688a      	ldr	r2, [r1, #8]
   80c80:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80c84:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80c86:	4b0d      	ldr	r3, [pc, #52]	; (80cbc <Reset_Handler+0xa8>)
   80c88:	4798      	blx	r3

	/* Branch to main function */
	main();
   80c8a:	4b0d      	ldr	r3, [pc, #52]	; (80cc0 <Reset_Handler+0xac>)
   80c8c:	4798      	blx	r3
   80c8e:	e7fe      	b.n	80c8e <Reset_Handler+0x7a>
   80c90:	20070000 	.word	0x20070000
   80c94:	00084aac 	.word	0x00084aac
   80c98:	2007098c 	.word	0x2007098c
   80c9c:	20078cbc 	.word	0x20078cbc
   80ca0:	20070990 	.word	0x20070990
   80ca4:	20070004 	.word	0x20070004
   80ca8:	2007098f 	.word	0x2007098f
   80cac:	2007098c 	.word	0x2007098c
   80cb0:	20078cb7 	.word	0x20078cb7
   80cb4:	00080000 	.word	0x00080000
   80cb8:	e000ed00 	.word	0xe000ed00
   80cbc:	00082ed1 	.word	0x00082ed1
   80cc0:	000825ed 	.word	0x000825ed

00080cc4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80cc4:	4b3e      	ldr	r3, [pc, #248]	; (80dc0 <SystemCoreClockUpdate+0xfc>)
   80cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80cc8:	f003 0303 	and.w	r3, r3, #3
   80ccc:	2b03      	cmp	r3, #3
   80cce:	d85f      	bhi.n	80d90 <SystemCoreClockUpdate+0xcc>
   80cd0:	e8df f003 	tbb	[pc, r3]
   80cd4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80cd8:	4b3a      	ldr	r3, [pc, #232]	; (80dc4 <SystemCoreClockUpdate+0x100>)
   80cda:	695b      	ldr	r3, [r3, #20]
   80cdc:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80ce0:	bf14      	ite	ne
   80ce2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80ce6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80cea:	4b37      	ldr	r3, [pc, #220]	; (80dc8 <SystemCoreClockUpdate+0x104>)
   80cec:	601a      	str	r2, [r3, #0]
   80cee:	e04f      	b.n	80d90 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80cf0:	4b33      	ldr	r3, [pc, #204]	; (80dc0 <SystemCoreClockUpdate+0xfc>)
   80cf2:	6a1b      	ldr	r3, [r3, #32]
   80cf4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80cf8:	d003      	beq.n	80d02 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80cfa:	4a34      	ldr	r2, [pc, #208]	; (80dcc <SystemCoreClockUpdate+0x108>)
   80cfc:	4b32      	ldr	r3, [pc, #200]	; (80dc8 <SystemCoreClockUpdate+0x104>)
   80cfe:	601a      	str	r2, [r3, #0]
   80d00:	e046      	b.n	80d90 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80d02:	4a33      	ldr	r2, [pc, #204]	; (80dd0 <SystemCoreClockUpdate+0x10c>)
   80d04:	4b30      	ldr	r3, [pc, #192]	; (80dc8 <SystemCoreClockUpdate+0x104>)
   80d06:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80d08:	4b2d      	ldr	r3, [pc, #180]	; (80dc0 <SystemCoreClockUpdate+0xfc>)
   80d0a:	6a1b      	ldr	r3, [r3, #32]
   80d0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80d10:	2b10      	cmp	r3, #16
   80d12:	d002      	beq.n	80d1a <SystemCoreClockUpdate+0x56>
   80d14:	2b20      	cmp	r3, #32
   80d16:	d004      	beq.n	80d22 <SystemCoreClockUpdate+0x5e>
   80d18:	e03a      	b.n	80d90 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80d1a:	4a2e      	ldr	r2, [pc, #184]	; (80dd4 <SystemCoreClockUpdate+0x110>)
   80d1c:	4b2a      	ldr	r3, [pc, #168]	; (80dc8 <SystemCoreClockUpdate+0x104>)
   80d1e:	601a      	str	r2, [r3, #0]
				break;
   80d20:	e036      	b.n	80d90 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80d22:	4a2a      	ldr	r2, [pc, #168]	; (80dcc <SystemCoreClockUpdate+0x108>)
   80d24:	4b28      	ldr	r3, [pc, #160]	; (80dc8 <SystemCoreClockUpdate+0x104>)
   80d26:	601a      	str	r2, [r3, #0]
				break;
   80d28:	e032      	b.n	80d90 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80d2a:	4b25      	ldr	r3, [pc, #148]	; (80dc0 <SystemCoreClockUpdate+0xfc>)
   80d2c:	6a1b      	ldr	r3, [r3, #32]
   80d2e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80d32:	d003      	beq.n	80d3c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80d34:	4a25      	ldr	r2, [pc, #148]	; (80dcc <SystemCoreClockUpdate+0x108>)
   80d36:	4b24      	ldr	r3, [pc, #144]	; (80dc8 <SystemCoreClockUpdate+0x104>)
   80d38:	601a      	str	r2, [r3, #0]
   80d3a:	e012      	b.n	80d62 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80d3c:	4a24      	ldr	r2, [pc, #144]	; (80dd0 <SystemCoreClockUpdate+0x10c>)
   80d3e:	4b22      	ldr	r3, [pc, #136]	; (80dc8 <SystemCoreClockUpdate+0x104>)
   80d40:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80d42:	4b1f      	ldr	r3, [pc, #124]	; (80dc0 <SystemCoreClockUpdate+0xfc>)
   80d44:	6a1b      	ldr	r3, [r3, #32]
   80d46:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80d4a:	2b10      	cmp	r3, #16
   80d4c:	d002      	beq.n	80d54 <SystemCoreClockUpdate+0x90>
   80d4e:	2b20      	cmp	r3, #32
   80d50:	d004      	beq.n	80d5c <SystemCoreClockUpdate+0x98>
   80d52:	e006      	b.n	80d62 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80d54:	4a1f      	ldr	r2, [pc, #124]	; (80dd4 <SystemCoreClockUpdate+0x110>)
   80d56:	4b1c      	ldr	r3, [pc, #112]	; (80dc8 <SystemCoreClockUpdate+0x104>)
   80d58:	601a      	str	r2, [r3, #0]
				break;
   80d5a:	e002      	b.n	80d62 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80d5c:	4a1b      	ldr	r2, [pc, #108]	; (80dcc <SystemCoreClockUpdate+0x108>)
   80d5e:	4b1a      	ldr	r3, [pc, #104]	; (80dc8 <SystemCoreClockUpdate+0x104>)
   80d60:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80d62:	4b17      	ldr	r3, [pc, #92]	; (80dc0 <SystemCoreClockUpdate+0xfc>)
   80d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80d66:	f003 0303 	and.w	r3, r3, #3
   80d6a:	2b02      	cmp	r3, #2
   80d6c:	d10d      	bne.n	80d8a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80d6e:	4b14      	ldr	r3, [pc, #80]	; (80dc0 <SystemCoreClockUpdate+0xfc>)
   80d70:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80d72:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80d74:	4b14      	ldr	r3, [pc, #80]	; (80dc8 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80d76:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80d7a:	681a      	ldr	r2, [r3, #0]
   80d7c:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80d80:	b2c9      	uxtb	r1, r1
   80d82:	fbb2 f2f1 	udiv	r2, r2, r1
   80d86:	601a      	str	r2, [r3, #0]
   80d88:	e002      	b.n	80d90 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80d8a:	4a13      	ldr	r2, [pc, #76]	; (80dd8 <SystemCoreClockUpdate+0x114>)
   80d8c:	4b0e      	ldr	r3, [pc, #56]	; (80dc8 <SystemCoreClockUpdate+0x104>)
   80d8e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80d90:	4b0b      	ldr	r3, [pc, #44]	; (80dc0 <SystemCoreClockUpdate+0xfc>)
   80d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80d94:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80d98:	2b70      	cmp	r3, #112	; 0x70
   80d9a:	d107      	bne.n	80dac <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80d9c:	4b0a      	ldr	r3, [pc, #40]	; (80dc8 <SystemCoreClockUpdate+0x104>)
   80d9e:	681a      	ldr	r2, [r3, #0]
   80da0:	490e      	ldr	r1, [pc, #56]	; (80ddc <SystemCoreClockUpdate+0x118>)
   80da2:	fba1 0202 	umull	r0, r2, r1, r2
   80da6:	0852      	lsrs	r2, r2, #1
   80da8:	601a      	str	r2, [r3, #0]
   80daa:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80dac:	4b04      	ldr	r3, [pc, #16]	; (80dc0 <SystemCoreClockUpdate+0xfc>)
   80dae:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80db0:	4b05      	ldr	r3, [pc, #20]	; (80dc8 <SystemCoreClockUpdate+0x104>)
   80db2:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80db6:	681a      	ldr	r2, [r3, #0]
   80db8:	40ca      	lsrs	r2, r1
   80dba:	601a      	str	r2, [r3, #0]
   80dbc:	4770      	bx	lr
   80dbe:	bf00      	nop
   80dc0:	400e0600 	.word	0x400e0600
   80dc4:	400e1a10 	.word	0x400e1a10
   80dc8:	20070140 	.word	0x20070140
   80dcc:	00b71b00 	.word	0x00b71b00
   80dd0:	003d0900 	.word	0x003d0900
   80dd4:	007a1200 	.word	0x007a1200
   80dd8:	0e4e1c00 	.word	0x0e4e1c00
   80ddc:	aaaaaaab 	.word	0xaaaaaaab

00080de0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80de0:	4b09      	ldr	r3, [pc, #36]	; (80e08 <_sbrk+0x28>)
   80de2:	681b      	ldr	r3, [r3, #0]
   80de4:	b913      	cbnz	r3, 80dec <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80de6:	4a09      	ldr	r2, [pc, #36]	; (80e0c <_sbrk+0x2c>)
   80de8:	4b07      	ldr	r3, [pc, #28]	; (80e08 <_sbrk+0x28>)
   80dea:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80dec:	4b06      	ldr	r3, [pc, #24]	; (80e08 <_sbrk+0x28>)
   80dee:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80df0:	181a      	adds	r2, r3, r0
   80df2:	4907      	ldr	r1, [pc, #28]	; (80e10 <_sbrk+0x30>)
   80df4:	4291      	cmp	r1, r2
   80df6:	db04      	blt.n	80e02 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80df8:	4610      	mov	r0, r2
   80dfa:	4a03      	ldr	r2, [pc, #12]	; (80e08 <_sbrk+0x28>)
   80dfc:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80dfe:	4618      	mov	r0, r3
   80e00:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80e02:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80e06:	4770      	bx	lr
   80e08:	20070a28 	.word	0x20070a28
   80e0c:	2007acc0 	.word	0x2007acc0
   80e10:	20087ffc 	.word	0x20087ffc

00080e14 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80e14:	f04f 30ff 	mov.w	r0, #4294967295
   80e18:	4770      	bx	lr
   80e1a:	bf00      	nop

00080e1c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80e20:	604b      	str	r3, [r1, #4]

	return 0;
}
   80e22:	2000      	movs	r0, #0
   80e24:	4770      	bx	lr
   80e26:	bf00      	nop

00080e28 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80e28:	2001      	movs	r0, #1
   80e2a:	4770      	bx	lr

00080e2c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80e2c:	2000      	movs	r0, #0
   80e2e:	4770      	bx	lr

00080e30 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80e30:	f100 0308 	add.w	r3, r0, #8
   80e34:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80e3a:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80e3c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   80e3e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80e40:	2300      	movs	r3, #0
   80e42:	6003      	str	r3, [r0, #0]
   80e44:	4770      	bx	lr
   80e46:	bf00      	nop

00080e48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80e48:	2300      	movs	r3, #0
   80e4a:	6103      	str	r3, [r0, #16]
   80e4c:	4770      	bx	lr
   80e4e:	bf00      	nop

00080e50 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80e50:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80e52:	685a      	ldr	r2, [r3, #4]
   80e54:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80e56:	6842      	ldr	r2, [r0, #4]
   80e58:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80e5a:	685a      	ldr	r2, [r3, #4]
   80e5c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80e5e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80e60:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80e62:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80e64:	6803      	ldr	r3, [r0, #0]
   80e66:	3301      	adds	r3, #1
   80e68:	6003      	str	r3, [r0, #0]
   80e6a:	4770      	bx	lr

00080e6c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   80e6c:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   80e6e:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80e70:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80e74:	429c      	cmp	r4, r3
   80e76:	d101      	bne.n	80e7c <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   80e78:	6903      	ldr	r3, [r0, #16]
   80e7a:	e00c      	b.n	80e96 <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80e7c:	f100 0308 	add.w	r3, r0, #8
   80e80:	68c2      	ldr	r2, [r0, #12]
   80e82:	8812      	ldrh	r2, [r2, #0]
   80e84:	b292      	uxth	r2, r2
   80e86:	4294      	cmp	r4, r2
   80e88:	d305      	bcc.n	80e96 <vListInsert+0x2a>
   80e8a:	685b      	ldr	r3, [r3, #4]
   80e8c:	685a      	ldr	r2, [r3, #4]
   80e8e:	8812      	ldrh	r2, [r2, #0]
   80e90:	b292      	uxth	r2, r2
   80e92:	4294      	cmp	r4, r2
   80e94:	d2f9      	bcs.n	80e8a <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80e96:	685a      	ldr	r2, [r3, #4]
   80e98:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80e9a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   80e9c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80e9e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80ea0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80ea2:	6803      	ldr	r3, [r0, #0]
   80ea4:	3301      	adds	r3, #1
   80ea6:	6003      	str	r3, [r0, #0]
}
   80ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
   80eac:	4770      	bx	lr
   80eae:	bf00      	nop

00080eb0 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80eb0:	6843      	ldr	r3, [r0, #4]
   80eb2:	6882      	ldr	r2, [r0, #8]
   80eb4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80eb6:	6883      	ldr	r3, [r0, #8]
   80eb8:	6842      	ldr	r2, [r0, #4]
   80eba:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80ebc:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80ebe:	685a      	ldr	r2, [r3, #4]
   80ec0:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80ec2:	bf04      	itt	eq
   80ec4:	6882      	ldreq	r2, [r0, #8]
   80ec6:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80ec8:	2200      	movs	r2, #0
   80eca:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80ecc:	681a      	ldr	r2, [r3, #0]
   80ece:	3a01      	subs	r2, #1
   80ed0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80ed2:	6818      	ldr	r0, [r3, #0]
}
   80ed4:	4770      	bx	lr
   80ed6:	bf00      	nop

00080ed8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80ed8:	4803      	ldr	r0, [pc, #12]	; (80ee8 <prvPortStartFirstTask+0x10>)
   80eda:	6800      	ldr	r0, [r0, #0]
   80edc:	6800      	ldr	r0, [r0, #0]
   80ede:	f380 8808 	msr	MSP, r0
   80ee2:	b662      	cpsie	i
   80ee4:	df00      	svc	0
   80ee6:	bf00      	nop
   80ee8:	e000ed08 	.word	0xe000ed08

00080eec <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80eec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80ef0:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80ef4:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   80ef8:	2300      	movs	r3, #0
   80efa:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   80efe:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   80f02:	3840      	subs	r0, #64	; 0x40
   80f04:	4770      	bx	lr
   80f06:	bf00      	nop

00080f08 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80f08:	4b06      	ldr	r3, [pc, #24]	; (80f24 <pxCurrentTCBConst2>)
   80f0a:	6819      	ldr	r1, [r3, #0]
   80f0c:	6808      	ldr	r0, [r1, #0]
   80f0e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80f12:	f380 8809 	msr	PSP, r0
   80f16:	f04f 0000 	mov.w	r0, #0
   80f1a:	f380 8811 	msr	BASEPRI, r0
   80f1e:	f04e 0e0d 	orr.w	lr, lr, #13
   80f22:	4770      	bx	lr

00080f24 <pxCurrentTCBConst2>:
   80f24:	20078b58 	.word	0x20078b58

00080f28 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80f2c:	4b01      	ldr	r3, [pc, #4]	; (80f34 <vPortYieldFromISR+0xc>)
   80f2e:	601a      	str	r2, [r3, #0]
   80f30:	4770      	bx	lr
   80f32:	bf00      	nop
   80f34:	e000ed04 	.word	0xe000ed04

00080f38 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80f38:	f3ef 8011 	mrs	r0, BASEPRI
   80f3c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80f40:	f381 8811 	msr	BASEPRI, r1
   80f44:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80f46:	2000      	movs	r0, #0

00080f48 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   80f48:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   80f4a:	4b03      	ldr	r3, [pc, #12]	; (80f58 <vPortEnterCritical+0x10>)
   80f4c:	4798      	blx	r3
	uxCriticalNesting++;
   80f4e:	4b03      	ldr	r3, [pc, #12]	; (80f5c <vPortEnterCritical+0x14>)
   80f50:	681a      	ldr	r2, [r3, #0]
   80f52:	3201      	adds	r2, #1
   80f54:	601a      	str	r2, [r3, #0]
   80f56:	bd08      	pop	{r3, pc}
   80f58:	00080f39 	.word	0x00080f39
   80f5c:	20070144 	.word	0x20070144

00080f60 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80f60:	f380 8811 	msr	BASEPRI, r0
   80f64:	4770      	bx	lr
   80f66:	bf00      	nop

00080f68 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   80f68:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   80f6a:	4a04      	ldr	r2, [pc, #16]	; (80f7c <vPortExitCritical+0x14>)
   80f6c:	6813      	ldr	r3, [r2, #0]
   80f6e:	3b01      	subs	r3, #1
   80f70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   80f72:	b913      	cbnz	r3, 80f7a <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   80f74:	2000      	movs	r0, #0
   80f76:	4b02      	ldr	r3, [pc, #8]	; (80f80 <vPortExitCritical+0x18>)
   80f78:	4798      	blx	r3
   80f7a:	bd08      	pop	{r3, pc}
   80f7c:	20070144 	.word	0x20070144
   80f80:	00080f61 	.word	0x00080f61

00080f84 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80f84:	f3ef 8009 	mrs	r0, PSP
   80f88:	4b0c      	ldr	r3, [pc, #48]	; (80fbc <pxCurrentTCBConst>)
   80f8a:	681a      	ldr	r2, [r3, #0]
   80f8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80f90:	6010      	str	r0, [r2, #0]
   80f92:	e92d 4008 	stmdb	sp!, {r3, lr}
   80f96:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80f9a:	f380 8811 	msr	BASEPRI, r0
   80f9e:	f000 fec5 	bl	81d2c <vTaskSwitchContext>
   80fa2:	f04f 0000 	mov.w	r0, #0
   80fa6:	f380 8811 	msr	BASEPRI, r0
   80faa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80fae:	6819      	ldr	r1, [r3, #0]
   80fb0:	6808      	ldr	r0, [r1, #0]
   80fb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80fb6:	f380 8809 	msr	PSP, r0
   80fba:	4770      	bx	lr

00080fbc <pxCurrentTCBConst>:
   80fbc:	20078b58 	.word	0x20078b58

00080fc0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80fc0:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80fc6:	4b05      	ldr	r3, [pc, #20]	; (80fdc <SysTick_Handler+0x1c>)
   80fc8:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80fca:	4b05      	ldr	r3, [pc, #20]	; (80fe0 <SysTick_Handler+0x20>)
   80fcc:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80fce:	4b05      	ldr	r3, [pc, #20]	; (80fe4 <SysTick_Handler+0x24>)
   80fd0:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80fd2:	2000      	movs	r0, #0
   80fd4:	4b04      	ldr	r3, [pc, #16]	; (80fe8 <SysTick_Handler+0x28>)
   80fd6:	4798      	blx	r3
   80fd8:	bd08      	pop	{r3, pc}
   80fda:	bf00      	nop
   80fdc:	e000ed04 	.word	0xe000ed04
   80fe0:	00080f39 	.word	0x00080f39
   80fe4:	000819dd 	.word	0x000819dd
   80fe8:	00080f61 	.word	0x00080f61

00080fec <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   80fec:	4a03      	ldr	r2, [pc, #12]	; (80ffc <vPortSetupTimerInterrupt+0x10>)
   80fee:	4b04      	ldr	r3, [pc, #16]	; (81000 <vPortSetupTimerInterrupt+0x14>)
   80ff0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   80ff2:	2207      	movs	r2, #7
   80ff4:	3b04      	subs	r3, #4
   80ff6:	601a      	str	r2, [r3, #0]
   80ff8:	4770      	bx	lr
   80ffa:	bf00      	nop
   80ffc:	0001481f 	.word	0x0001481f
   81000:	e000e014 	.word	0xe000e014

00081004 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   81004:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   81006:	4b09      	ldr	r3, [pc, #36]	; (8102c <xPortStartScheduler+0x28>)
   81008:	681a      	ldr	r2, [r3, #0]
   8100a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   8100e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   81010:	681a      	ldr	r2, [r3, #0]
   81012:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   81016:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   81018:	4b05      	ldr	r3, [pc, #20]	; (81030 <xPortStartScheduler+0x2c>)
   8101a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   8101c:	2400      	movs	r4, #0
   8101e:	4b05      	ldr	r3, [pc, #20]	; (81034 <xPortStartScheduler+0x30>)
   81020:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   81022:	4b05      	ldr	r3, [pc, #20]	; (81038 <xPortStartScheduler+0x34>)
   81024:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   81026:	4620      	mov	r0, r4
   81028:	bd10      	pop	{r4, pc}
   8102a:	bf00      	nop
   8102c:	e000ed20 	.word	0xe000ed20
   81030:	00080fed 	.word	0x00080fed
   81034:	20070144 	.word	0x20070144
   81038:	00080ed9 	.word	0x00080ed9

0008103c <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   8103c:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   8103e:	4a13      	ldr	r2, [pc, #76]	; (8108c <prvInsertBlockIntoFreeList+0x50>)
   81040:	6813      	ldr	r3, [r2, #0]
   81042:	4283      	cmp	r3, r0
   81044:	d201      	bcs.n	8104a <prvInsertBlockIntoFreeList+0xe>
   81046:	461a      	mov	r2, r3
   81048:	e7fa      	b.n	81040 <prvInsertBlockIntoFreeList+0x4>
   8104a:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   8104c:	6854      	ldr	r4, [r2, #4]
   8104e:	1915      	adds	r5, r2, r4
   81050:	4285      	cmp	r5, r0
   81052:	d103      	bne.n	8105c <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   81054:	6868      	ldr	r0, [r5, #4]
   81056:	4404      	add	r4, r0
   81058:	6054      	str	r4, [r2, #4]
   8105a:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   8105c:	6842      	ldr	r2, [r0, #4]
   8105e:	1884      	adds	r4, r0, r2
   81060:	42a3      	cmp	r3, r4
   81062:	d10c      	bne.n	8107e <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   81064:	4c0a      	ldr	r4, [pc, #40]	; (81090 <prvInsertBlockIntoFreeList+0x54>)
   81066:	6824      	ldr	r4, [r4, #0]
   81068:	429c      	cmp	r4, r3
   8106a:	d006      	beq.n	8107a <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   8106c:	685b      	ldr	r3, [r3, #4]
   8106e:	441a      	add	r2, r3
   81070:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   81072:	680b      	ldr	r3, [r1, #0]
   81074:	681b      	ldr	r3, [r3, #0]
   81076:	6003      	str	r3, [r0, #0]
   81078:	e002      	b.n	81080 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   8107a:	6003      	str	r3, [r0, #0]
   8107c:	e000      	b.n	81080 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   8107e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   81080:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   81082:	bf18      	it	ne
   81084:	6008      	strne	r0, [r1, #0]
	}
}
   81086:	bc30      	pop	{r4, r5}
   81088:	4770      	bx	lr
   8108a:	bf00      	nop
   8108c:	20078a34 	.word	0x20078a34
   81090:	20078a30 	.word	0x20078a30

00081094 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   81094:	b538      	push	{r3, r4, r5, lr}
   81096:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   81098:	4b28      	ldr	r3, [pc, #160]	; (8113c <pvPortMalloc+0xa8>)
   8109a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   8109c:	4b28      	ldr	r3, [pc, #160]	; (81140 <pvPortMalloc+0xac>)
   8109e:	681b      	ldr	r3, [r3, #0]
   810a0:	b99b      	cbnz	r3, 810ca <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   810a2:	4a28      	ldr	r2, [pc, #160]	; (81144 <pvPortMalloc+0xb0>)
   810a4:	4b28      	ldr	r3, [pc, #160]	; (81148 <pvPortMalloc+0xb4>)
   810a6:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   810a8:	2100      	movs	r1, #0
   810aa:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   810ac:	f647 72f0 	movw	r2, #32752	; 0x7ff0
   810b0:	1898      	adds	r0, r3, r2
   810b2:	4d23      	ldr	r5, [pc, #140]	; (81140 <pvPortMalloc+0xac>)
   810b4:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   810b6:	f647 75f4 	movw	r5, #32756	; 0x7ff4
   810ba:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   810bc:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   810be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   810c0:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   810c2:	4b22      	ldr	r3, [pc, #136]	; (8114c <pvPortMalloc+0xb8>)
   810c4:	681a      	ldr	r2, [r3, #0]
   810c6:	3a10      	subs	r2, #16
   810c8:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   810ca:	2c00      	cmp	r4, #0
   810cc:	d02d      	beq.n	8112a <pvPortMalloc+0x96>
		{
			xWantedSize += heapSTRUCT_SIZE;
   810ce:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   810d2:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   810d6:	bf1c      	itt	ne
   810d8:	f022 0207 	bicne.w	r2, r2, #7
   810dc:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   810de:	1e51      	subs	r1, r2, #1
   810e0:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   810e4:	4299      	cmp	r1, r3
   810e6:	d822      	bhi.n	8112e <pvPortMalloc+0x9a>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   810e8:	4916      	ldr	r1, [pc, #88]	; (81144 <pvPortMalloc+0xb0>)
   810ea:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   810ec:	6863      	ldr	r3, [r4, #4]
   810ee:	429a      	cmp	r2, r3
   810f0:	d904      	bls.n	810fc <pvPortMalloc+0x68>
   810f2:	6823      	ldr	r3, [r4, #0]
   810f4:	b113      	cbz	r3, 810fc <pvPortMalloc+0x68>
   810f6:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   810f8:	461c      	mov	r4, r3
   810fa:	e7f7      	b.n	810ec <pvPortMalloc+0x58>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   810fc:	4b10      	ldr	r3, [pc, #64]	; (81140 <pvPortMalloc+0xac>)
   810fe:	681b      	ldr	r3, [r3, #0]
   81100:	429c      	cmp	r4, r3
   81102:	d016      	beq.n	81132 <pvPortMalloc+0x9e>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   81104:	680d      	ldr	r5, [r1, #0]
   81106:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   81108:	6823      	ldr	r3, [r4, #0]
   8110a:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   8110c:	6863      	ldr	r3, [r4, #4]
   8110e:	1a9b      	subs	r3, r3, r2
   81110:	2b20      	cmp	r3, #32
   81112:	d904      	bls.n	8111e <pvPortMalloc+0x8a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   81114:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   81116:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   81118:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   8111a:	4b0d      	ldr	r3, [pc, #52]	; (81150 <pvPortMalloc+0xbc>)
   8111c:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   8111e:	4b0b      	ldr	r3, [pc, #44]	; (8114c <pvPortMalloc+0xb8>)
   81120:	681a      	ldr	r2, [r3, #0]
   81122:	6861      	ldr	r1, [r4, #4]
   81124:	1a52      	subs	r2, r2, r1
   81126:	601a      	str	r2, [r3, #0]
   81128:	e004      	b.n	81134 <pvPortMalloc+0xa0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   8112a:	2500      	movs	r5, #0
   8112c:	e002      	b.n	81134 <pvPortMalloc+0xa0>
   8112e:	2500      	movs	r5, #0
   81130:	e000      	b.n	81134 <pvPortMalloc+0xa0>
   81132:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   81134:	4b07      	ldr	r3, [pc, #28]	; (81154 <pvPortMalloc+0xc0>)
   81136:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   81138:	4628      	mov	r0, r5
   8113a:	bd38      	pop	{r3, r4, r5, pc}
   8113c:	000819ad 	.word	0x000819ad
   81140:	20078a30 	.word	0x20078a30
   81144:	20078a34 	.word	0x20078a34
   81148:	20070a30 	.word	0x20070a30
   8114c:	20070148 	.word	0x20070148
   81150:	0008103d 	.word	0x0008103d
   81154:	00081b09 	.word	0x00081b09

00081158 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   81158:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   8115a:	4604      	mov	r4, r0
   8115c:	b168      	cbz	r0, 8117a <vPortFree+0x22>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   8115e:	4b07      	ldr	r3, [pc, #28]	; (8117c <vPortFree+0x24>)
   81160:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   81162:	4b07      	ldr	r3, [pc, #28]	; (81180 <vPortFree+0x28>)
   81164:	6819      	ldr	r1, [r3, #0]
   81166:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   8116a:	440a      	add	r2, r1
   8116c:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   8116e:	f1a4 0010 	sub.w	r0, r4, #16
   81172:	4b04      	ldr	r3, [pc, #16]	; (81184 <vPortFree+0x2c>)
   81174:	4798      	blx	r3
		}
		xTaskResumeAll();
   81176:	4b04      	ldr	r3, [pc, #16]	; (81188 <vPortFree+0x30>)
   81178:	4798      	blx	r3
   8117a:	bd10      	pop	{r4, pc}
   8117c:	000819ad 	.word	0x000819ad
   81180:	20070148 	.word	0x20070148
   81184:	0008103d 	.word	0x0008103d
   81188:	00081b09 	.word	0x00081b09

0008118c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   8118c:	b510      	push	{r4, lr}
   8118e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   81190:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81192:	b93b      	cbnz	r3, 811a4 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81194:	6803      	ldr	r3, [r0, #0]
   81196:	bb1b      	cbnz	r3, 811e0 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   81198:	6840      	ldr	r0, [r0, #4]
   8119a:	4b13      	ldr	r3, [pc, #76]	; (811e8 <prvCopyDataToQueue+0x5c>)
   8119c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   8119e:	2300      	movs	r3, #0
   811a0:	6063      	str	r3, [r4, #4]
   811a2:	e01d      	b.n	811e0 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   811a4:	b96a      	cbnz	r2, 811c2 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   811a6:	6880      	ldr	r0, [r0, #8]
   811a8:	461a      	mov	r2, r3
   811aa:	4b10      	ldr	r3, [pc, #64]	; (811ec <prvCopyDataToQueue+0x60>)
   811ac:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   811ae:	68a2      	ldr	r2, [r4, #8]
   811b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   811b2:	4413      	add	r3, r2
   811b4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   811b6:	6862      	ldr	r2, [r4, #4]
   811b8:	4293      	cmp	r3, r2
   811ba:	d311      	bcc.n	811e0 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   811bc:	6823      	ldr	r3, [r4, #0]
   811be:	60a3      	str	r3, [r4, #8]
   811c0:	e00e      	b.n	811e0 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   811c2:	68c0      	ldr	r0, [r0, #12]
   811c4:	461a      	mov	r2, r3
   811c6:	4b09      	ldr	r3, [pc, #36]	; (811ec <prvCopyDataToQueue+0x60>)
   811c8:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   811ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
   811cc:	4252      	negs	r2, r2
   811ce:	68e3      	ldr	r3, [r4, #12]
   811d0:	4413      	add	r3, r2
   811d2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   811d4:	6821      	ldr	r1, [r4, #0]
   811d6:	428b      	cmp	r3, r1
   811d8:	d202      	bcs.n	811e0 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   811da:	6863      	ldr	r3, [r4, #4]
   811dc:	441a      	add	r2, r3
   811de:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   811e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   811e2:	3301      	adds	r3, #1
   811e4:	63a3      	str	r3, [r4, #56]	; 0x38
   811e6:	bd10      	pop	{r4, pc}
   811e8:	00082055 	.word	0x00082055
   811ec:	00082f21 	.word	0x00082f21

000811f0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   811f0:	b538      	push	{r3, r4, r5, lr}
   811f2:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   811f4:	6805      	ldr	r5, [r0, #0]
   811f6:	b15d      	cbz	r5, 81210 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   811f8:	6c02      	ldr	r2, [r0, #64]	; 0x40
   811fa:	68c4      	ldr	r4, [r0, #12]
   811fc:	4414      	add	r4, r2
   811fe:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   81200:	6840      	ldr	r0, [r0, #4]
   81202:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   81204:	bf28      	it	cs
   81206:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   81208:	4608      	mov	r0, r1
   8120a:	68d9      	ldr	r1, [r3, #12]
   8120c:	4b01      	ldr	r3, [pc, #4]	; (81214 <prvCopyDataFromQueue+0x24>)
   8120e:	4798      	blx	r3
   81210:	bd38      	pop	{r3, r4, r5, pc}
   81212:	bf00      	nop
   81214:	00082f21 	.word	0x00082f21

00081218 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   81218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8121a:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   8121c:	4b1d      	ldr	r3, [pc, #116]	; (81294 <prvUnlockQueue+0x7c>)
   8121e:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81220:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81222:	2b00      	cmp	r3, #0
   81224:	dd12      	ble.n	8124c <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81226:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81228:	b183      	cbz	r3, 8124c <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8122a:	f104 0624 	add.w	r6, r4, #36	; 0x24
   8122e:	4d1a      	ldr	r5, [pc, #104]	; (81298 <prvUnlockQueue+0x80>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81230:	4f1a      	ldr	r7, [pc, #104]	; (8129c <prvUnlockQueue+0x84>)
   81232:	e001      	b.n	81238 <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81234:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81236:	b14b      	cbz	r3, 8124c <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81238:	4630      	mov	r0, r6
   8123a:	47a8      	blx	r5
   8123c:	b100      	cbz	r0, 81240 <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   8123e:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   81240:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81242:	3b01      	subs	r3, #1
   81244:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81246:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81248:	2b00      	cmp	r3, #0
   8124a:	dcf3      	bgt.n	81234 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   8124c:	f04f 33ff 	mov.w	r3, #4294967295
   81250:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   81252:	4b13      	ldr	r3, [pc, #76]	; (812a0 <prvUnlockQueue+0x88>)
   81254:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   81256:	4b0f      	ldr	r3, [pc, #60]	; (81294 <prvUnlockQueue+0x7c>)
   81258:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   8125a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8125c:	2b00      	cmp	r3, #0
   8125e:	dd12      	ble.n	81286 <prvUnlockQueue+0x6e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81260:	6923      	ldr	r3, [r4, #16]
   81262:	b183      	cbz	r3, 81286 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81264:	f104 0610 	add.w	r6, r4, #16
   81268:	4d0b      	ldr	r5, [pc, #44]	; (81298 <prvUnlockQueue+0x80>)
				{
					vTaskMissedYield();
   8126a:	4f0c      	ldr	r7, [pc, #48]	; (8129c <prvUnlockQueue+0x84>)
   8126c:	e001      	b.n	81272 <prvUnlockQueue+0x5a>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8126e:	6923      	ldr	r3, [r4, #16]
   81270:	b14b      	cbz	r3, 81286 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81272:	4630      	mov	r0, r6
   81274:	47a8      	blx	r5
   81276:	b100      	cbz	r0, 8127a <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
   81278:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   8127a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8127c:	3b01      	subs	r3, #1
   8127e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81280:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81282:	2b00      	cmp	r3, #0
   81284:	dcf3      	bgt.n	8126e <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   81286:	f04f 33ff 	mov.w	r3, #4294967295
   8128a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   8128c:	4b04      	ldr	r3, [pc, #16]	; (812a0 <prvUnlockQueue+0x88>)
   8128e:	4798      	blx	r3
   81290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81292:	bf00      	nop
   81294:	00080f49 	.word	0x00080f49
   81298:	00081e69 	.word	0x00081e69
   8129c:	00081fa1 	.word	0x00081fa1
   812a0:	00080f69 	.word	0x00080f69

000812a4 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   812a4:	b538      	push	{r3, r4, r5, lr}
   812a6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   812a8:	4604      	mov	r4, r0
   812aa:	b918      	cbnz	r0, 812b4 <xQueueGenericReset+0x10>
   812ac:	4b16      	ldr	r3, [pc, #88]	; (81308 <xQueueGenericReset+0x64>)
   812ae:	4798      	blx	r3
   812b0:	bf00      	nop
   812b2:	e7fd      	b.n	812b0 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
   812b4:	4b15      	ldr	r3, [pc, #84]	; (8130c <xQueueGenericReset+0x68>)
   812b6:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   812b8:	6823      	ldr	r3, [r4, #0]
   812ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
   812bc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   812be:	fb00 f002 	mul.w	r0, r0, r2
   812c2:	1819      	adds	r1, r3, r0
   812c4:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   812c6:	2100      	movs	r1, #0
   812c8:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   812ca:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   812cc:	1a82      	subs	r2, r0, r2
   812ce:	4413      	add	r3, r2
   812d0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   812d2:	f04f 33ff 	mov.w	r3, #4294967295
   812d6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   812d8:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   812da:	b955      	cbnz	r5, 812f2 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   812dc:	6923      	ldr	r3, [r4, #16]
   812de:	b17b      	cbz	r3, 81300 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   812e0:	f104 0010 	add.w	r0, r4, #16
   812e4:	4b0a      	ldr	r3, [pc, #40]	; (81310 <xQueueGenericReset+0x6c>)
   812e6:	4798      	blx	r3
   812e8:	2801      	cmp	r0, #1
   812ea:	d109      	bne.n	81300 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   812ec:	4b09      	ldr	r3, [pc, #36]	; (81314 <xQueueGenericReset+0x70>)
   812ee:	4798      	blx	r3
   812f0:	e006      	b.n	81300 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   812f2:	f104 0010 	add.w	r0, r4, #16
   812f6:	4d08      	ldr	r5, [pc, #32]	; (81318 <xQueueGenericReset+0x74>)
   812f8:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   812fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
   812fe:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   81300:	4b06      	ldr	r3, [pc, #24]	; (8131c <xQueueGenericReset+0x78>)
   81302:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   81304:	2001      	movs	r0, #1
   81306:	bd38      	pop	{r3, r4, r5, pc}
   81308:	00080f39 	.word	0x00080f39
   8130c:	00080f49 	.word	0x00080f49
   81310:	00081e69 	.word	0x00081e69
   81314:	00080f29 	.word	0x00080f29
   81318:	00080e31 	.word	0x00080e31
   8131c:	00080f69 	.word	0x00080f69

00081320 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   81320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81322:	460d      	mov	r5, r1
   81324:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   81326:	4606      	mov	r6, r0
   81328:	b188      	cbz	r0, 8134e <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   8132a:	2050      	movs	r0, #80	; 0x50
   8132c:	4b0e      	ldr	r3, [pc, #56]	; (81368 <xQueueGenericCreate+0x48>)
   8132e:	4798      	blx	r3
		if( pxNewQueue != NULL )
   81330:	4604      	mov	r4, r0
   81332:	b160      	cbz	r0, 8134e <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   81334:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   81338:	3001      	adds	r0, #1
   8133a:	4b0b      	ldr	r3, [pc, #44]	; (81368 <xQueueGenericCreate+0x48>)
   8133c:	4798      	blx	r3
   8133e:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   81340:	b940      	cbnz	r0, 81354 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   81342:	4620      	mov	r0, r4
   81344:	4b09      	ldr	r3, [pc, #36]	; (8136c <xQueueGenericCreate+0x4c>)
   81346:	4798      	blx	r3
   81348:	e001      	b.n	8134e <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   8134a:	bf00      	nop
   8134c:	e7fd      	b.n	8134a <xQueueGenericCreate+0x2a>
   8134e:	4b08      	ldr	r3, [pc, #32]	; (81370 <xQueueGenericCreate+0x50>)
   81350:	4798      	blx	r3
   81352:	e7fa      	b.n	8134a <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   81354:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   81356:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   81358:	4620      	mov	r0, r4
   8135a:	2101      	movs	r1, #1
   8135c:	4b05      	ldr	r3, [pc, #20]	; (81374 <xQueueGenericCreate+0x54>)
   8135e:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   81360:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   81364:	4620      	mov	r0, r4
   81366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81368:	00081095 	.word	0x00081095
   8136c:	00081159 	.word	0x00081159
   81370:	00080f39 	.word	0x00080f39
   81374:	000812a5 	.word	0x000812a5

00081378 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8137c:	b085      	sub	sp, #20
   8137e:	468a      	mov	sl, r1
   81380:	469b      	mov	fp, r3
   81382:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   81386:	4604      	mov	r4, r0
   81388:	b918      	cbnz	r0, 81392 <xQueueGenericSend+0x1a>
   8138a:	4b38      	ldr	r3, [pc, #224]	; (8146c <xQueueGenericSend+0xf4>)
   8138c:	4798      	blx	r3
   8138e:	bf00      	nop
   81390:	e7fd      	b.n	8138e <xQueueGenericSend+0x16>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81392:	b909      	cbnz	r1, 81398 <xQueueGenericSend+0x20>
   81394:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81396:	b91b      	cbnz	r3, 813a0 <xQueueGenericSend+0x28>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81398:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   8139a:	4e35      	ldr	r6, [pc, #212]	; (81470 <xQueueGenericSend+0xf8>)
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   8139c:	4d35      	ldr	r5, [pc, #212]	; (81474 <xQueueGenericSend+0xfc>)
   8139e:	e003      	b.n	813a8 <xQueueGenericSend+0x30>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   813a0:	4b32      	ldr	r3, [pc, #200]	; (8146c <xQueueGenericSend+0xf4>)
   813a2:	4798      	blx	r3
   813a4:	bf00      	nop
   813a6:	e7fd      	b.n	813a4 <xQueueGenericSend+0x2c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   813a8:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   813aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   813ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   813ae:	429a      	cmp	r2, r3
   813b0:	d212      	bcs.n	813d8 <xQueueGenericSend+0x60>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   813b2:	4620      	mov	r0, r4
   813b4:	4651      	mov	r1, sl
   813b6:	465a      	mov	r2, fp
   813b8:	4b2f      	ldr	r3, [pc, #188]	; (81478 <xQueueGenericSend+0x100>)
   813ba:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   813bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   813be:	b13b      	cbz	r3, 813d0 <xQueueGenericSend+0x58>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   813c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   813c4:	4b2d      	ldr	r3, [pc, #180]	; (8147c <xQueueGenericSend+0x104>)
   813c6:	4798      	blx	r3
   813c8:	2801      	cmp	r0, #1
   813ca:	d101      	bne.n	813d0 <xQueueGenericSend+0x58>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   813cc:	4b2c      	ldr	r3, [pc, #176]	; (81480 <xQueueGenericSend+0x108>)
   813ce:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   813d0:	4b28      	ldr	r3, [pc, #160]	; (81474 <xQueueGenericSend+0xfc>)
   813d2:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   813d4:	2001      	movs	r0, #1
   813d6:	e046      	b.n	81466 <xQueueGenericSend+0xee>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   813d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   813dc:	b91b      	cbnz	r3, 813e6 <xQueueGenericSend+0x6e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   813de:	4b25      	ldr	r3, [pc, #148]	; (81474 <xQueueGenericSend+0xfc>)
   813e0:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   813e2:	2000      	movs	r0, #0
   813e4:	e03f      	b.n	81466 <xQueueGenericSend+0xee>
				}
				else if( xEntryTimeSet == pdFALSE )
   813e6:	b91f      	cbnz	r7, 813f0 <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   813e8:	a802      	add	r0, sp, #8
   813ea:	4b26      	ldr	r3, [pc, #152]	; (81484 <xQueueGenericSend+0x10c>)
   813ec:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   813ee:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   813f0:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   813f2:	4b25      	ldr	r3, [pc, #148]	; (81488 <xQueueGenericSend+0x110>)
   813f4:	4798      	blx	r3
		prvLockQueue( pxQueue );
   813f6:	47b0      	blx	r6
   813f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   813fa:	f1b3 3fff 	cmp.w	r3, #4294967295
   813fe:	bf04      	itt	eq
   81400:	2300      	moveq	r3, #0
   81402:	6463      	streq	r3, [r4, #68]	; 0x44
   81404:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81406:	f1b3 3fff 	cmp.w	r3, #4294967295
   8140a:	bf04      	itt	eq
   8140c:	2300      	moveq	r3, #0
   8140e:	64a3      	streq	r3, [r4, #72]	; 0x48
   81410:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81412:	a802      	add	r0, sp, #8
   81414:	f10d 0106 	add.w	r1, sp, #6
   81418:	4b1c      	ldr	r3, [pc, #112]	; (8148c <xQueueGenericSend+0x114>)
   8141a:	4798      	blx	r3
   8141c:	b9e8      	cbnz	r0, 8145a <xQueueGenericSend+0xe2>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   8141e:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   81420:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   81424:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   81428:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   8142a:	45c1      	cmp	r9, r8
   8142c:	d10f      	bne.n	8144e <xQueueGenericSend+0xd6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   8142e:	f104 0010 	add.w	r0, r4, #16
   81432:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   81436:	4b16      	ldr	r3, [pc, #88]	; (81490 <xQueueGenericSend+0x118>)
   81438:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   8143a:	4620      	mov	r0, r4
   8143c:	4b15      	ldr	r3, [pc, #84]	; (81494 <xQueueGenericSend+0x11c>)
   8143e:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   81440:	4b15      	ldr	r3, [pc, #84]	; (81498 <xQueueGenericSend+0x120>)
   81442:	4798      	blx	r3
   81444:	2800      	cmp	r0, #0
   81446:	d1af      	bne.n	813a8 <xQueueGenericSend+0x30>
				{
					portYIELD_WITHIN_API();
   81448:	4b0d      	ldr	r3, [pc, #52]	; (81480 <xQueueGenericSend+0x108>)
   8144a:	4798      	blx	r3
   8144c:	e7ac      	b.n	813a8 <xQueueGenericSend+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   8144e:	4620      	mov	r0, r4
   81450:	4b10      	ldr	r3, [pc, #64]	; (81494 <xQueueGenericSend+0x11c>)
   81452:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81454:	4b10      	ldr	r3, [pc, #64]	; (81498 <xQueueGenericSend+0x120>)
   81456:	4798      	blx	r3
   81458:	e7a6      	b.n	813a8 <xQueueGenericSend+0x30>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   8145a:	4620      	mov	r0, r4
   8145c:	4b0d      	ldr	r3, [pc, #52]	; (81494 <xQueueGenericSend+0x11c>)
   8145e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81460:	4b0d      	ldr	r3, [pc, #52]	; (81498 <xQueueGenericSend+0x120>)
   81462:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   81464:	2000      	movs	r0, #0
		}
	}
}
   81466:	b005      	add	sp, #20
   81468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8146c:	00080f39 	.word	0x00080f39
   81470:	00080f49 	.word	0x00080f49
   81474:	00080f69 	.word	0x00080f69
   81478:	0008118d 	.word	0x0008118d
   8147c:	00081e69 	.word	0x00081e69
   81480:	00080f29 	.word	0x00080f29
   81484:	00081eed 	.word	0x00081eed
   81488:	000819ad 	.word	0x000819ad
   8148c:	00081f15 	.word	0x00081f15
   81490:	00081dbd 	.word	0x00081dbd
   81494:	00081219 	.word	0x00081219
   81498:	00081b09 	.word	0x00081b09

0008149c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   8149c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   814a0:	460e      	mov	r6, r1
   814a2:	4615      	mov	r5, r2
   814a4:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   814a6:	4604      	mov	r4, r0
   814a8:	b918      	cbnz	r0, 814b2 <xQueueGenericSendFromISR+0x16>
   814aa:	4b1c      	ldr	r3, [pc, #112]	; (8151c <xQueueGenericSendFromISR+0x80>)
   814ac:	4798      	blx	r3
   814ae:	bf00      	nop
   814b0:	e7fd      	b.n	814ae <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   814b2:	b929      	cbnz	r1, 814c0 <xQueueGenericSendFromISR+0x24>
   814b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
   814b6:	b11b      	cbz	r3, 814c0 <xQueueGenericSendFromISR+0x24>
   814b8:	4b18      	ldr	r3, [pc, #96]	; (8151c <xQueueGenericSendFromISR+0x80>)
   814ba:	4798      	blx	r3
   814bc:	bf00      	nop
   814be:	e7fd      	b.n	814bc <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   814c0:	4b16      	ldr	r3, [pc, #88]	; (8151c <xQueueGenericSendFromISR+0x80>)
   814c2:	4798      	blx	r3
   814c4:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   814c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   814c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   814ca:	429a      	cmp	r2, r3
   814cc:	d218      	bcs.n	81500 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   814ce:	4620      	mov	r0, r4
   814d0:	4631      	mov	r1, r6
   814d2:	4642      	mov	r2, r8
   814d4:	4b12      	ldr	r3, [pc, #72]	; (81520 <xQueueGenericSendFromISR+0x84>)
   814d6:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   814d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   814da:	f1b3 3fff 	cmp.w	r3, #4294967295
   814de:	d10a      	bne.n	814f6 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   814e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   814e2:	b17b      	cbz	r3, 81504 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   814e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   814e8:	4b0e      	ldr	r3, [pc, #56]	; (81524 <xQueueGenericSendFromISR+0x88>)
   814ea:	4798      	blx	r3
   814ec:	b160      	cbz	r0, 81508 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   814ee:	b16d      	cbz	r5, 8150c <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   814f0:	2401      	movs	r4, #1
   814f2:	602c      	str	r4, [r5, #0]
   814f4:	e00b      	b.n	8150e <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   814f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   814f8:	3301      	adds	r3, #1
   814fa:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   814fc:	2401      	movs	r4, #1
   814fe:	e006      	b.n	8150e <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81500:	2400      	movs	r4, #0
   81502:	e004      	b.n	8150e <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   81504:	2401      	movs	r4, #1
   81506:	e002      	b.n	8150e <xQueueGenericSendFromISR+0x72>
   81508:	2401      	movs	r4, #1
   8150a:	e000      	b.n	8150e <xQueueGenericSendFromISR+0x72>
   8150c:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   8150e:	4638      	mov	r0, r7
   81510:	4b05      	ldr	r3, [pc, #20]	; (81528 <xQueueGenericSendFromISR+0x8c>)
   81512:	4798      	blx	r3

	return xReturn;
}
   81514:	4620      	mov	r0, r4
   81516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8151a:	bf00      	nop
   8151c:	00080f39 	.word	0x00080f39
   81520:	0008118d 	.word	0x0008118d
   81524:	00081e69 	.word	0x00081e69
   81528:	00080f61 	.word	0x00080f61

0008152c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   8152c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81530:	b085      	sub	sp, #20
   81532:	4689      	mov	r9, r1
   81534:	469a      	mov	sl, r3
   81536:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   8153a:	4604      	mov	r4, r0
   8153c:	b918      	cbnz	r0, 81546 <xQueueGenericReceive+0x1a>
   8153e:	4b46      	ldr	r3, [pc, #280]	; (81658 <xQueueGenericReceive+0x12c>)
   81540:	4798      	blx	r3
   81542:	bf00      	nop
   81544:	e7fd      	b.n	81542 <xQueueGenericReceive+0x16>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81546:	b909      	cbnz	r1, 8154c <xQueueGenericReceive+0x20>
   81548:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8154a:	b92b      	cbnz	r3, 81558 <xQueueGenericReceive+0x2c>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   8154c:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   8154e:	4e43      	ldr	r6, [pc, #268]	; (8165c <xQueueGenericReceive+0x130>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81550:	f8df b138 	ldr.w	fp, [pc, #312]	; 8168c <xQueueGenericReceive+0x160>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81554:	4d42      	ldr	r5, [pc, #264]	; (81660 <xQueueGenericReceive+0x134>)
   81556:	e003      	b.n	81560 <xQueueGenericReceive+0x34>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81558:	4b3f      	ldr	r3, [pc, #252]	; (81658 <xQueueGenericReceive+0x12c>)
   8155a:	4798      	blx	r3
   8155c:	bf00      	nop
   8155e:	e7fd      	b.n	8155c <xQueueGenericReceive+0x30>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81560:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   81562:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81564:	2b00      	cmp	r3, #0
   81566:	d028      	beq.n	815ba <xQueueGenericReceive+0x8e>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   81568:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   8156a:	4620      	mov	r0, r4
   8156c:	4649      	mov	r1, r9
   8156e:	4b3d      	ldr	r3, [pc, #244]	; (81664 <xQueueGenericReceive+0x138>)
   81570:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   81572:	f1ba 0f00 	cmp.w	sl, #0
   81576:	d112      	bne.n	8159e <xQueueGenericReceive+0x72>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   81578:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8157a:	3b01      	subs	r3, #1
   8157c:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8157e:	6823      	ldr	r3, [r4, #0]
   81580:	b913      	cbnz	r3, 81588 <xQueueGenericReceive+0x5c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   81582:	4b39      	ldr	r3, [pc, #228]	; (81668 <xQueueGenericReceive+0x13c>)
   81584:	4798      	blx	r3
   81586:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81588:	6923      	ldr	r3, [r4, #16]
   8158a:	b193      	cbz	r3, 815b2 <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   8158c:	f104 0010 	add.w	r0, r4, #16
   81590:	4b36      	ldr	r3, [pc, #216]	; (8166c <xQueueGenericReceive+0x140>)
   81592:	4798      	blx	r3
   81594:	2801      	cmp	r0, #1
   81596:	d10c      	bne.n	815b2 <xQueueGenericReceive+0x86>
						{
							portYIELD_WITHIN_API();
   81598:	4b35      	ldr	r3, [pc, #212]	; (81670 <xQueueGenericReceive+0x144>)
   8159a:	4798      	blx	r3
   8159c:	e009      	b.n	815b2 <xQueueGenericReceive+0x86>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   8159e:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   815a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   815a2:	b133      	cbz	r3, 815b2 <xQueueGenericReceive+0x86>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   815a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   815a8:	4b30      	ldr	r3, [pc, #192]	; (8166c <xQueueGenericReceive+0x140>)
   815aa:	4798      	blx	r3
   815ac:	b108      	cbz	r0, 815b2 <xQueueGenericReceive+0x86>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   815ae:	4b30      	ldr	r3, [pc, #192]	; (81670 <xQueueGenericReceive+0x144>)
   815b0:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   815b2:	4b2b      	ldr	r3, [pc, #172]	; (81660 <xQueueGenericReceive+0x134>)
   815b4:	4798      	blx	r3
				return pdPASS;
   815b6:	2001      	movs	r0, #1
   815b8:	e04b      	b.n	81652 <xQueueGenericReceive+0x126>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   815ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   815be:	b91b      	cbnz	r3, 815c8 <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   815c0:	4b27      	ldr	r3, [pc, #156]	; (81660 <xQueueGenericReceive+0x134>)
   815c2:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   815c4:	2000      	movs	r0, #0
   815c6:	e044      	b.n	81652 <xQueueGenericReceive+0x126>
				}
				else if( xEntryTimeSet == pdFALSE )
   815c8:	b917      	cbnz	r7, 815d0 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   815ca:	a802      	add	r0, sp, #8
   815cc:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   815ce:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   815d0:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   815d2:	4b28      	ldr	r3, [pc, #160]	; (81674 <xQueueGenericReceive+0x148>)
   815d4:	4798      	blx	r3
		prvLockQueue( pxQueue );
   815d6:	47b0      	blx	r6
   815d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   815da:	f1b3 3fff 	cmp.w	r3, #4294967295
   815de:	bf04      	itt	eq
   815e0:	2300      	moveq	r3, #0
   815e2:	6463      	streq	r3, [r4, #68]	; 0x44
   815e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   815e6:	f1b3 3fff 	cmp.w	r3, #4294967295
   815ea:	bf04      	itt	eq
   815ec:	2300      	moveq	r3, #0
   815ee:	64a3      	streq	r3, [r4, #72]	; 0x48
   815f0:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   815f2:	a802      	add	r0, sp, #8
   815f4:	f10d 0106 	add.w	r1, sp, #6
   815f8:	4b1f      	ldr	r3, [pc, #124]	; (81678 <xQueueGenericReceive+0x14c>)
   815fa:	4798      	blx	r3
   815fc:	bb18      	cbnz	r0, 81646 <xQueueGenericReceive+0x11a>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   815fe:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   81600:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   81604:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81606:	f1b8 0f00 	cmp.w	r8, #0
   8160a:	d116      	bne.n	8163a <xQueueGenericReceive+0x10e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8160c:	6823      	ldr	r3, [r4, #0]
   8160e:	b923      	cbnz	r3, 8161a <xQueueGenericReceive+0xee>
					{
						portENTER_CRITICAL();
   81610:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   81612:	6860      	ldr	r0, [r4, #4]
   81614:	4b19      	ldr	r3, [pc, #100]	; (8167c <xQueueGenericReceive+0x150>)
   81616:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   81618:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8161a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8161e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   81622:	4b17      	ldr	r3, [pc, #92]	; (81680 <xQueueGenericReceive+0x154>)
   81624:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   81626:	4620      	mov	r0, r4
   81628:	4b16      	ldr	r3, [pc, #88]	; (81684 <xQueueGenericReceive+0x158>)
   8162a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   8162c:	4b16      	ldr	r3, [pc, #88]	; (81688 <xQueueGenericReceive+0x15c>)
   8162e:	4798      	blx	r3
   81630:	2800      	cmp	r0, #0
   81632:	d195      	bne.n	81560 <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
   81634:	4b0e      	ldr	r3, [pc, #56]	; (81670 <xQueueGenericReceive+0x144>)
   81636:	4798      	blx	r3
   81638:	e792      	b.n	81560 <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   8163a:	4620      	mov	r0, r4
   8163c:	4b11      	ldr	r3, [pc, #68]	; (81684 <xQueueGenericReceive+0x158>)
   8163e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81640:	4b11      	ldr	r3, [pc, #68]	; (81688 <xQueueGenericReceive+0x15c>)
   81642:	4798      	blx	r3
   81644:	e78c      	b.n	81560 <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   81646:	4620      	mov	r0, r4
   81648:	4b0e      	ldr	r3, [pc, #56]	; (81684 <xQueueGenericReceive+0x158>)
   8164a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   8164c:	4b0e      	ldr	r3, [pc, #56]	; (81688 <xQueueGenericReceive+0x15c>)
   8164e:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   81650:	2000      	movs	r0, #0
		}
	}
}
   81652:	b005      	add	sp, #20
   81654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81658:	00080f39 	.word	0x00080f39
   8165c:	00080f49 	.word	0x00080f49
   81660:	00080f69 	.word	0x00080f69
   81664:	000811f1 	.word	0x000811f1
   81668:	00081fad 	.word	0x00081fad
   8166c:	00081e69 	.word	0x00081e69
   81670:	00080f29 	.word	0x00080f29
   81674:	000819ad 	.word	0x000819ad
   81678:	00081f15 	.word	0x00081f15
   8167c:	00081fd9 	.word	0x00081fd9
   81680:	00081dbd 	.word	0x00081dbd
   81684:	00081219 	.word	0x00081219
   81688:	00081b09 	.word	0x00081b09
   8168c:	00081eed 	.word	0x00081eed

00081690 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   81690:	b538      	push	{r3, r4, r5, lr}
   81692:	4604      	mov	r4, r0
   81694:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   81696:	4b0d      	ldr	r3, [pc, #52]	; (816cc <vQueueWaitForMessageRestricted+0x3c>)
   81698:	4798      	blx	r3
   8169a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8169c:	f1b3 3fff 	cmp.w	r3, #4294967295
   816a0:	bf04      	itt	eq
   816a2:	2300      	moveq	r3, #0
   816a4:	6463      	streq	r3, [r4, #68]	; 0x44
   816a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   816a8:	f1b3 3fff 	cmp.w	r3, #4294967295
   816ac:	bf04      	itt	eq
   816ae:	2300      	moveq	r3, #0
   816b0:	64a3      	streq	r3, [r4, #72]	; 0x48
   816b2:	4b07      	ldr	r3, [pc, #28]	; (816d0 <vQueueWaitForMessageRestricted+0x40>)
   816b4:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   816b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   816b8:	b923      	cbnz	r3, 816c4 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   816ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
   816be:	4629      	mov	r1, r5
   816c0:	4b04      	ldr	r3, [pc, #16]	; (816d4 <vQueueWaitForMessageRestricted+0x44>)
   816c2:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   816c4:	4620      	mov	r0, r4
   816c6:	4b04      	ldr	r3, [pc, #16]	; (816d8 <vQueueWaitForMessageRestricted+0x48>)
   816c8:	4798      	blx	r3
   816ca:	bd38      	pop	{r3, r4, r5, pc}
   816cc:	00080f49 	.word	0x00080f49
   816d0:	00080f69 	.word	0x00080f69
   816d4:	00081e21 	.word	0x00081e21
   816d8:	00081219 	.word	0x00081219

000816dc <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   816dc:	b510      	push	{r4, lr}
   816de:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   816e0:	4b0f      	ldr	r3, [pc, #60]	; (81720 <prvAddCurrentTaskToDelayedList+0x44>)
   816e2:	681b      	ldr	r3, [r3, #0]
   816e4:	8098      	strh	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   816e6:	4b0f      	ldr	r3, [pc, #60]	; (81724 <prvAddCurrentTaskToDelayedList+0x48>)
   816e8:	881b      	ldrh	r3, [r3, #0]
   816ea:	b29b      	uxth	r3, r3
   816ec:	4298      	cmp	r0, r3
   816ee:	d207      	bcs.n	81700 <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   816f0:	4b0d      	ldr	r3, [pc, #52]	; (81728 <prvAddCurrentTaskToDelayedList+0x4c>)
   816f2:	6818      	ldr	r0, [r3, #0]
   816f4:	4b0a      	ldr	r3, [pc, #40]	; (81720 <prvAddCurrentTaskToDelayedList+0x44>)
   816f6:	6819      	ldr	r1, [r3, #0]
   816f8:	3104      	adds	r1, #4
   816fa:	4b0c      	ldr	r3, [pc, #48]	; (8172c <prvAddCurrentTaskToDelayedList+0x50>)
   816fc:	4798      	blx	r3
   816fe:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81700:	4b0b      	ldr	r3, [pc, #44]	; (81730 <prvAddCurrentTaskToDelayedList+0x54>)
   81702:	6818      	ldr	r0, [r3, #0]
   81704:	4b06      	ldr	r3, [pc, #24]	; (81720 <prvAddCurrentTaskToDelayedList+0x44>)
   81706:	6819      	ldr	r1, [r3, #0]
   81708:	3104      	adds	r1, #4
   8170a:	4b08      	ldr	r3, [pc, #32]	; (8172c <prvAddCurrentTaskToDelayedList+0x50>)
   8170c:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   8170e:	4b09      	ldr	r3, [pc, #36]	; (81734 <prvAddCurrentTaskToDelayedList+0x58>)
   81710:	881b      	ldrh	r3, [r3, #0]
   81712:	b29b      	uxth	r3, r3
   81714:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   81716:	bf3c      	itt	cc
   81718:	4b06      	ldrcc	r3, [pc, #24]	; (81734 <prvAddCurrentTaskToDelayedList+0x58>)
   8171a:	801c      	strhcc	r4, [r3, #0]
   8171c:	bd10      	pop	{r4, pc}
   8171e:	bf00      	nop
   81720:	20078b58 	.word	0x20078b58
   81724:	20078b74 	.word	0x20078b74
   81728:	20078b78 	.word	0x20078b78
   8172c:	00080e6d 	.word	0x00080e6d
   81730:	20078a54 	.word	0x20078a54
   81734:	2007014c 	.word	0x2007014c

00081738 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   81738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8173c:	460e      	mov	r6, r1
   8173e:	4617      	mov	r7, r2
   81740:	469a      	mov	sl, r3
   81742:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   81744:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   81748:	4681      	mov	r9, r0
   8174a:	b918      	cbnz	r0, 81754 <xTaskGenericCreate+0x1c>
   8174c:	4b62      	ldr	r3, [pc, #392]	; (818d8 <xTaskGenericCreate+0x1a0>)
   8174e:	4798      	blx	r3
   81750:	bf00      	nop
   81752:	e7fd      	b.n	81750 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   81754:	2d09      	cmp	r5, #9
   81756:	d903      	bls.n	81760 <xTaskGenericCreate+0x28>
   81758:	4b5f      	ldr	r3, [pc, #380]	; (818d8 <xTaskGenericCreate+0x1a0>)
   8175a:	4798      	blx	r3
   8175c:	bf00      	nop
   8175e:	e7fd      	b.n	8175c <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   81760:	2050      	movs	r0, #80	; 0x50
   81762:	4b5e      	ldr	r3, [pc, #376]	; (818dc <xTaskGenericCreate+0x1a4>)
   81764:	4798      	blx	r3

	if( pxNewTCB != NULL )
   81766:	4604      	mov	r4, r0
   81768:	2800      	cmp	r0, #0
   8176a:	f000 80b1 	beq.w	818d0 <xTaskGenericCreate+0x198>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   8176e:	f1b8 0f00 	cmp.w	r8, #0
   81772:	f040 80a9 	bne.w	818c8 <xTaskGenericCreate+0x190>
   81776:	00b8      	lsls	r0, r7, #2
   81778:	4b58      	ldr	r3, [pc, #352]	; (818dc <xTaskGenericCreate+0x1a4>)
   8177a:	4798      	blx	r3
   8177c:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   8177e:	b918      	cbnz	r0, 81788 <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   81780:	4620      	mov	r0, r4
   81782:	4b57      	ldr	r3, [pc, #348]	; (818e0 <xTaskGenericCreate+0x1a8>)
   81784:	4798      	blx	r3
   81786:	e0a3      	b.n	818d0 <xTaskGenericCreate+0x198>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   81788:	21a5      	movs	r1, #165	; 0xa5
   8178a:	00ba      	lsls	r2, r7, #2
   8178c:	4b55      	ldr	r3, [pc, #340]	; (818e4 <xTaskGenericCreate+0x1ac>)
   8178e:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   81790:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   81794:	3f01      	subs	r7, #1
   81796:	6b23      	ldr	r3, [r4, #48]	; 0x30
   81798:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   8179c:	f023 0b07 	bic.w	fp, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   817a0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   817a4:	4631      	mov	r1, r6
   817a6:	2210      	movs	r2, #16
   817a8:	4b4f      	ldr	r3, [pc, #316]	; (818e8 <xTaskGenericCreate+0x1b0>)
   817aa:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   817ac:	2300      	movs	r3, #0
   817ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   817b2:	2d09      	cmp	r5, #9
   817b4:	bf34      	ite	cc
   817b6:	462e      	movcc	r6, r5
   817b8:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   817ba:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   817bc:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   817be:	1d27      	adds	r7, r4, #4
   817c0:	4638      	mov	r0, r7
   817c2:	f8df 8170 	ldr.w	r8, [pc, #368]	; 81934 <xTaskGenericCreate+0x1fc>
   817c6:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   817c8:	f104 0018 	add.w	r0, r4, #24
   817cc:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   817ce:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   817d0:	f1c6 060a 	rsb	r6, r6, #10
   817d4:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   817d6:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   817d8:	4658      	mov	r0, fp
   817da:	4649      	mov	r1, r9
   817dc:	4652      	mov	r2, sl
   817de:	4b43      	ldr	r3, [pc, #268]	; (818ec <xTaskGenericCreate+0x1b4>)
   817e0:	4798      	blx	r3
   817e2:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   817e4:	f010 0f07 	tst.w	r0, #7
   817e8:	d003      	beq.n	817f2 <xTaskGenericCreate+0xba>
   817ea:	4b3b      	ldr	r3, [pc, #236]	; (818d8 <xTaskGenericCreate+0x1a0>)
   817ec:	4798      	blx	r3
   817ee:	bf00      	nop
   817f0:	e7fd      	b.n	817ee <xTaskGenericCreate+0xb6>

		if( ( void * ) pxCreatedTask != NULL )
   817f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   817f4:	b103      	cbz	r3, 817f8 <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   817f6:	601c      	str	r4, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   817f8:	4b3d      	ldr	r3, [pc, #244]	; (818f0 <xTaskGenericCreate+0x1b8>)
   817fa:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   817fc:	4b3d      	ldr	r3, [pc, #244]	; (818f4 <xTaskGenericCreate+0x1bc>)
   817fe:	681a      	ldr	r2, [r3, #0]
   81800:	3201      	adds	r2, #1
   81802:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   81804:	4b3c      	ldr	r3, [pc, #240]	; (818f8 <xTaskGenericCreate+0x1c0>)
   81806:	681b      	ldr	r3, [r3, #0]
   81808:	bb2b      	cbnz	r3, 81856 <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   8180a:	4b3b      	ldr	r3, [pc, #236]	; (818f8 <xTaskGenericCreate+0x1c0>)
   8180c:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   8180e:	4b39      	ldr	r3, [pc, #228]	; (818f4 <xTaskGenericCreate+0x1bc>)
   81810:	681b      	ldr	r3, [r3, #0]
   81812:	2b01      	cmp	r3, #1
   81814:	d129      	bne.n	8186a <xTaskGenericCreate+0x132>
   81816:	4e39      	ldr	r6, [pc, #228]	; (818fc <xTaskGenericCreate+0x1c4>)
   81818:	f106 09c8 	add.w	r9, r6, #200	; 0xc8
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   8181c:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 81900 <xTaskGenericCreate+0x1c8>
   81820:	4630      	mov	r0, r6
   81822:	47c0      	blx	r8
   81824:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   81826:	454e      	cmp	r6, r9
   81828:	d1fa      	bne.n	81820 <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   8182a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 81938 <xTaskGenericCreate+0x200>
   8182e:	4648      	mov	r0, r9
   81830:	4e33      	ldr	r6, [pc, #204]	; (81900 <xTaskGenericCreate+0x1c8>)
   81832:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   81834:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8193c <xTaskGenericCreate+0x204>
   81838:	4640      	mov	r0, r8
   8183a:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   8183c:	4831      	ldr	r0, [pc, #196]	; (81904 <xTaskGenericCreate+0x1cc>)
   8183e:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   81840:	4831      	ldr	r0, [pc, #196]	; (81908 <xTaskGenericCreate+0x1d0>)
   81842:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   81844:	4831      	ldr	r0, [pc, #196]	; (8190c <xTaskGenericCreate+0x1d4>)
   81846:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   81848:	4b31      	ldr	r3, [pc, #196]	; (81910 <xTaskGenericCreate+0x1d8>)
   8184a:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   8184e:	4b31      	ldr	r3, [pc, #196]	; (81914 <xTaskGenericCreate+0x1dc>)
   81850:	f8c3 8000 	str.w	r8, [r3]
   81854:	e009      	b.n	8186a <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   81856:	4b30      	ldr	r3, [pc, #192]	; (81918 <xTaskGenericCreate+0x1e0>)
   81858:	681b      	ldr	r3, [r3, #0]
   8185a:	b933      	cbnz	r3, 8186a <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   8185c:	4b26      	ldr	r3, [pc, #152]	; (818f8 <xTaskGenericCreate+0x1c0>)
   8185e:	681b      	ldr	r3, [r3, #0]
   81860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81862:	429d      	cmp	r5, r3
					{
						pxCurrentTCB = pxNewTCB;
   81864:	bf24      	itt	cs
   81866:	4b24      	ldrcs	r3, [pc, #144]	; (818f8 <xTaskGenericCreate+0x1c0>)
   81868:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   8186a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8186c:	4a2b      	ldr	r2, [pc, #172]	; (8191c <xTaskGenericCreate+0x1e4>)
   8186e:	6812      	ldr	r2, [r2, #0]
   81870:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   81872:	bf84      	itt	hi
   81874:	4a29      	ldrhi	r2, [pc, #164]	; (8191c <xTaskGenericCreate+0x1e4>)
   81876:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   81878:	4a29      	ldr	r2, [pc, #164]	; (81920 <xTaskGenericCreate+0x1e8>)
   8187a:	6811      	ldr	r1, [r2, #0]
   8187c:	6461      	str	r1, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   8187e:	3101      	adds	r1, #1
   81880:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   81882:	4a28      	ldr	r2, [pc, #160]	; (81924 <xTaskGenericCreate+0x1ec>)
   81884:	6812      	ldr	r2, [r2, #0]
   81886:	4293      	cmp	r3, r2
   81888:	bf84      	itt	hi
   8188a:	4a26      	ldrhi	r2, [pc, #152]	; (81924 <xTaskGenericCreate+0x1ec>)
   8188c:	6013      	strhi	r3, [r2, #0]
   8188e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81892:	481a      	ldr	r0, [pc, #104]	; (818fc <xTaskGenericCreate+0x1c4>)
   81894:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81898:	4639      	mov	r1, r7
   8189a:	4b23      	ldr	r3, [pc, #140]	; (81928 <xTaskGenericCreate+0x1f0>)
   8189c:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   8189e:	4b23      	ldr	r3, [pc, #140]	; (8192c <xTaskGenericCreate+0x1f4>)
   818a0:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   818a2:	4b1d      	ldr	r3, [pc, #116]	; (81918 <xTaskGenericCreate+0x1e0>)
   818a4:	681b      	ldr	r3, [r3, #0]
   818a6:	b14b      	cbz	r3, 818bc <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   818a8:	4b13      	ldr	r3, [pc, #76]	; (818f8 <xTaskGenericCreate+0x1c0>)
   818aa:	681b      	ldr	r3, [r3, #0]
   818ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   818ae:	429d      	cmp	r5, r3
   818b0:	d907      	bls.n	818c2 <xTaskGenericCreate+0x18a>
			{
				portYIELD_WITHIN_API();
   818b2:	4b1f      	ldr	r3, [pc, #124]	; (81930 <xTaskGenericCreate+0x1f8>)
   818b4:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   818b6:	2001      	movs	r0, #1
   818b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   818bc:	2001      	movs	r0, #1
   818be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   818c2:	2001      	movs	r0, #1
   818c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   818c8:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
   818cc:	4640      	mov	r0, r8
   818ce:	e75b      	b.n	81788 <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   818d0:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   818d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   818d8:	00080f39 	.word	0x00080f39
   818dc:	00081095 	.word	0x00081095
   818e0:	00081159 	.word	0x00081159
   818e4:	0008300d 	.word	0x0008300d
   818e8:	00083281 	.word	0x00083281
   818ec:	00080eed 	.word	0x00080eed
   818f0:	00080f49 	.word	0x00080f49
   818f4:	20078b98 	.word	0x20078b98
   818f8:	20078b58 	.word	0x20078b58
   818fc:	20078a8c 	.word	0x20078a8c
   81900:	00080e31 	.word	0x00080e31
   81904:	20078b5c 	.word	0x20078b5c
   81908:	20078a60 	.word	0x20078a60
   8190c:	20078a40 	.word	0x20078a40
   81910:	20078a54 	.word	0x20078a54
   81914:	20078b78 	.word	0x20078b78
   81918:	20078a58 	.word	0x20078a58
   8191c:	20078b9c 	.word	0x20078b9c
   81920:	20078b7c 	.word	0x20078b7c
   81924:	20078a88 	.word	0x20078a88
   81928:	00080e51 	.word	0x00080e51
   8192c:	00080f69 	.word	0x00080f69
   81930:	00080f29 	.word	0x00080f29
   81934:	00080e49 	.word	0x00080e49
   81938:	20078b80 	.word	0x20078b80
   8193c:	20078a74 	.word	0x20078a74

00081940 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   81940:	b510      	push	{r4, lr}
   81942:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81944:	2300      	movs	r3, #0
   81946:	9300      	str	r3, [sp, #0]
   81948:	9301      	str	r3, [sp, #4]
   8194a:	9302      	str	r3, [sp, #8]
   8194c:	9303      	str	r3, [sp, #12]
   8194e:	480f      	ldr	r0, [pc, #60]	; (8198c <vTaskStartScheduler+0x4c>)
   81950:	490f      	ldr	r1, [pc, #60]	; (81990 <vTaskStartScheduler+0x50>)
   81952:	f44f 7280 	mov.w	r2, #256	; 0x100
   81956:	4c0f      	ldr	r4, [pc, #60]	; (81994 <vTaskStartScheduler+0x54>)
   81958:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   8195a:	2801      	cmp	r0, #1
   8195c:	d10e      	bne.n	8197c <vTaskStartScheduler+0x3c>
		{
			xReturn = xTimerCreateTimerTask();
   8195e:	4b0e      	ldr	r3, [pc, #56]	; (81998 <vTaskStartScheduler+0x58>)
   81960:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   81962:	2801      	cmp	r0, #1
   81964:	d10a      	bne.n	8197c <vTaskStartScheduler+0x3c>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   81966:	4b0d      	ldr	r3, [pc, #52]	; (8199c <vTaskStartScheduler+0x5c>)
   81968:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   8196a:	2201      	movs	r2, #1
   8196c:	4b0c      	ldr	r3, [pc, #48]	; (819a0 <vTaskStartScheduler+0x60>)
   8196e:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   81970:	2200      	movs	r2, #0
   81972:	4b0c      	ldr	r3, [pc, #48]	; (819a4 <vTaskStartScheduler+0x64>)
   81974:	801a      	strh	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   81976:	4b0c      	ldr	r3, [pc, #48]	; (819a8 <vTaskStartScheduler+0x68>)
   81978:	4798      	blx	r3
   8197a:	e004      	b.n	81986 <vTaskStartScheduler+0x46>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   8197c:	b918      	cbnz	r0, 81986 <vTaskStartScheduler+0x46>
   8197e:	4b07      	ldr	r3, [pc, #28]	; (8199c <vTaskStartScheduler+0x5c>)
   81980:	4798      	blx	r3
   81982:	bf00      	nop
   81984:	e7fd      	b.n	81982 <vTaskStartScheduler+0x42>
}
   81986:	b004      	add	sp, #16
   81988:	bd10      	pop	{r4, pc}
   8198a:	bf00      	nop
   8198c:	00081ca9 	.word	0x00081ca9
   81990:	00084a58 	.word	0x00084a58
   81994:	00081739 	.word	0x00081739
   81998:	00082151 	.word	0x00082151
   8199c:	00080f39 	.word	0x00080f39
   819a0:	20078a58 	.word	0x20078a58
   819a4:	20078b74 	.word	0x20078b74
   819a8:	00081005 	.word	0x00081005

000819ac <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   819ac:	4b02      	ldr	r3, [pc, #8]	; (819b8 <vTaskSuspendAll+0xc>)
   819ae:	681a      	ldr	r2, [r3, #0]
   819b0:	3201      	adds	r2, #1
   819b2:	601a      	str	r2, [r3, #0]
   819b4:	4770      	bx	lr
   819b6:	bf00      	nop
   819b8:	20078b54 	.word	0x20078b54

000819bc <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   819bc:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   819be:	4b04      	ldr	r3, [pc, #16]	; (819d0 <xTaskGetTickCount+0x14>)
   819c0:	4798      	blx	r3
	{
		xTicks = xTickCount;
   819c2:	4b04      	ldr	r3, [pc, #16]	; (819d4 <xTaskGetTickCount+0x18>)
   819c4:	881c      	ldrh	r4, [r3, #0]
   819c6:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   819c8:	4b03      	ldr	r3, [pc, #12]	; (819d8 <xTaskGetTickCount+0x1c>)
   819ca:	4798      	blx	r3

	return xTicks;
}
   819cc:	4620      	mov	r0, r4
   819ce:	bd10      	pop	{r4, pc}
   819d0:	00080f49 	.word	0x00080f49
   819d4:	20078b74 	.word	0x20078b74
   819d8:	00080f69 	.word	0x00080f69

000819dc <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   819dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   819e0:	4b3d      	ldr	r3, [pc, #244]	; (81ad8 <vTaskIncrementTick+0xfc>)
   819e2:	681b      	ldr	r3, [r3, #0]
   819e4:	2b00      	cmp	r3, #0
   819e6:	d171      	bne.n	81acc <vTaskIncrementTick+0xf0>
	{
		++xTickCount;
   819e8:	4b3c      	ldr	r3, [pc, #240]	; (81adc <vTaskIncrementTick+0x100>)
   819ea:	881a      	ldrh	r2, [r3, #0]
   819ec:	3201      	adds	r2, #1
   819ee:	b292      	uxth	r2, r2
   819f0:	801a      	strh	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   819f2:	881b      	ldrh	r3, [r3, #0]
   819f4:	b29b      	uxth	r3, r3
   819f6:	bb03      	cbnz	r3, 81a3a <vTaskIncrementTick+0x5e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   819f8:	4b39      	ldr	r3, [pc, #228]	; (81ae0 <vTaskIncrementTick+0x104>)
   819fa:	681b      	ldr	r3, [r3, #0]
   819fc:	681b      	ldr	r3, [r3, #0]
   819fe:	b11b      	cbz	r3, 81a08 <vTaskIncrementTick+0x2c>
   81a00:	4b38      	ldr	r3, [pc, #224]	; (81ae4 <vTaskIncrementTick+0x108>)
   81a02:	4798      	blx	r3
   81a04:	bf00      	nop
   81a06:	e7fd      	b.n	81a04 <vTaskIncrementTick+0x28>

			pxTemp = pxDelayedTaskList;
   81a08:	4b35      	ldr	r3, [pc, #212]	; (81ae0 <vTaskIncrementTick+0x104>)
   81a0a:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81a0c:	4a36      	ldr	r2, [pc, #216]	; (81ae8 <vTaskIncrementTick+0x10c>)
   81a0e:	6810      	ldr	r0, [r2, #0]
   81a10:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   81a12:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81a14:	4a35      	ldr	r2, [pc, #212]	; (81aec <vTaskIncrementTick+0x110>)
   81a16:	6811      	ldr	r1, [r2, #0]
   81a18:	3101      	adds	r1, #1
   81a1a:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81a1c:	681b      	ldr	r3, [r3, #0]
   81a1e:	681b      	ldr	r3, [r3, #0]
   81a20:	b923      	cbnz	r3, 81a2c <vTaskIncrementTick+0x50>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   81a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81a26:	4b32      	ldr	r3, [pc, #200]	; (81af0 <vTaskIncrementTick+0x114>)
   81a28:	801a      	strh	r2, [r3, #0]
   81a2a:	e006      	b.n	81a3a <vTaskIncrementTick+0x5e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81a2c:	4b2c      	ldr	r3, [pc, #176]	; (81ae0 <vTaskIncrementTick+0x104>)
   81a2e:	681b      	ldr	r3, [r3, #0]
   81a30:	68db      	ldr	r3, [r3, #12]
   81a32:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81a34:	889a      	ldrh	r2, [r3, #4]
   81a36:	4b2e      	ldr	r3, [pc, #184]	; (81af0 <vTaskIncrementTick+0x114>)
   81a38:	801a      	strh	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   81a3a:	4b28      	ldr	r3, [pc, #160]	; (81adc <vTaskIncrementTick+0x100>)
   81a3c:	881a      	ldrh	r2, [r3, #0]
   81a3e:	b292      	uxth	r2, r2
   81a40:	4b2b      	ldr	r3, [pc, #172]	; (81af0 <vTaskIncrementTick+0x114>)
   81a42:	881b      	ldrh	r3, [r3, #0]
   81a44:	b29b      	uxth	r3, r3
   81a46:	429a      	cmp	r2, r3
   81a48:	d344      	bcc.n	81ad4 <vTaskIncrementTick+0xf8>
   81a4a:	4b25      	ldr	r3, [pc, #148]	; (81ae0 <vTaskIncrementTick+0x104>)
   81a4c:	681b      	ldr	r3, [r3, #0]
   81a4e:	681b      	ldr	r3, [r3, #0]
   81a50:	b153      	cbz	r3, 81a68 <vTaskIncrementTick+0x8c>
   81a52:	4b23      	ldr	r3, [pc, #140]	; (81ae0 <vTaskIncrementTick+0x104>)
   81a54:	681b      	ldr	r3, [r3, #0]
   81a56:	68db      	ldr	r3, [r3, #12]
   81a58:	68dc      	ldr	r4, [r3, #12]
   81a5a:	88a3      	ldrh	r3, [r4, #4]
   81a5c:	4a1f      	ldr	r2, [pc, #124]	; (81adc <vTaskIncrementTick+0x100>)
   81a5e:	8812      	ldrh	r2, [r2, #0]
   81a60:	b292      	uxth	r2, r2
   81a62:	4293      	cmp	r3, r2
   81a64:	d914      	bls.n	81a90 <vTaskIncrementTick+0xb4>
   81a66:	e00f      	b.n	81a88 <vTaskIncrementTick+0xac>
   81a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81a6c:	4b20      	ldr	r3, [pc, #128]	; (81af0 <vTaskIncrementTick+0x114>)
   81a6e:	801a      	strh	r2, [r3, #0]
   81a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81a74:	4b1a      	ldr	r3, [pc, #104]	; (81ae0 <vTaskIncrementTick+0x104>)
   81a76:	681b      	ldr	r3, [r3, #0]
   81a78:	68db      	ldr	r3, [r3, #12]
   81a7a:	68dc      	ldr	r4, [r3, #12]
   81a7c:	88a3      	ldrh	r3, [r4, #4]
   81a7e:	4a17      	ldr	r2, [pc, #92]	; (81adc <vTaskIncrementTick+0x100>)
   81a80:	8812      	ldrh	r2, [r2, #0]
   81a82:	b292      	uxth	r2, r2
   81a84:	4293      	cmp	r3, r2
   81a86:	d907      	bls.n	81a98 <vTaskIncrementTick+0xbc>
   81a88:	4a19      	ldr	r2, [pc, #100]	; (81af0 <vTaskIncrementTick+0x114>)
   81a8a:	8013      	strh	r3, [r2, #0]
   81a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81a90:	4e18      	ldr	r6, [pc, #96]	; (81af4 <vTaskIncrementTick+0x118>)
   81a92:	4f19      	ldr	r7, [pc, #100]	; (81af8 <vTaskIncrementTick+0x11c>)
   81a94:	f8df 806c 	ldr.w	r8, [pc, #108]	; 81b04 <vTaskIncrementTick+0x128>
   81a98:	1d25      	adds	r5, r4, #4
   81a9a:	4628      	mov	r0, r5
   81a9c:	47b0      	blx	r6
   81a9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81aa0:	b113      	cbz	r3, 81aa8 <vTaskIncrementTick+0xcc>
   81aa2:	f104 0018 	add.w	r0, r4, #24
   81aa6:	47b0      	blx	r6
   81aa8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81aaa:	683a      	ldr	r2, [r7, #0]
   81aac:	4293      	cmp	r3, r2
   81aae:	bf88      	it	hi
   81ab0:	603b      	strhi	r3, [r7, #0]
   81ab2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   81ab6:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   81aba:	4629      	mov	r1, r5
   81abc:	4b0f      	ldr	r3, [pc, #60]	; (81afc <vTaskIncrementTick+0x120>)
   81abe:	4798      	blx	r3
   81ac0:	4b07      	ldr	r3, [pc, #28]	; (81ae0 <vTaskIncrementTick+0x104>)
   81ac2:	681b      	ldr	r3, [r3, #0]
   81ac4:	681b      	ldr	r3, [r3, #0]
   81ac6:	2b00      	cmp	r3, #0
   81ac8:	d1d4      	bne.n	81a74 <vTaskIncrementTick+0x98>
   81aca:	e7cd      	b.n	81a68 <vTaskIncrementTick+0x8c>
	}
	else
	{
		++uxMissedTicks;
   81acc:	4b0c      	ldr	r3, [pc, #48]	; (81b00 <vTaskIncrementTick+0x124>)
   81ace:	681a      	ldr	r2, [r3, #0]
   81ad0:	3201      	adds	r2, #1
   81ad2:	601a      	str	r2, [r3, #0]
   81ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81ad8:	20078b54 	.word	0x20078b54
   81adc:	20078b74 	.word	0x20078b74
   81ae0:	20078a54 	.word	0x20078a54
   81ae4:	00080f39 	.word	0x00080f39
   81ae8:	20078b78 	.word	0x20078b78
   81aec:	20078b70 	.word	0x20078b70
   81af0:	2007014c 	.word	0x2007014c
   81af4:	00080eb1 	.word	0x00080eb1
   81af8:	20078a88 	.word	0x20078a88
   81afc:	00080e51 	.word	0x00080e51
   81b00:	20078a3c 	.word	0x20078a3c
   81b04:	20078a8c 	.word	0x20078a8c

00081b08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   81b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   81b0c:	4b31      	ldr	r3, [pc, #196]	; (81bd4 <xTaskResumeAll+0xcc>)
   81b0e:	681b      	ldr	r3, [r3, #0]
   81b10:	b91b      	cbnz	r3, 81b1a <xTaskResumeAll+0x12>
   81b12:	4b31      	ldr	r3, [pc, #196]	; (81bd8 <xTaskResumeAll+0xd0>)
   81b14:	4798      	blx	r3
   81b16:	bf00      	nop
   81b18:	e7fd      	b.n	81b16 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   81b1a:	4b30      	ldr	r3, [pc, #192]	; (81bdc <xTaskResumeAll+0xd4>)
   81b1c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   81b1e:	4b2d      	ldr	r3, [pc, #180]	; (81bd4 <xTaskResumeAll+0xcc>)
   81b20:	681a      	ldr	r2, [r3, #0]
   81b22:	3a01      	subs	r2, #1
   81b24:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81b26:	681b      	ldr	r3, [r3, #0]
   81b28:	2b00      	cmp	r3, #0
   81b2a:	d148      	bne.n	81bbe <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81b2c:	4b2c      	ldr	r3, [pc, #176]	; (81be0 <xTaskResumeAll+0xd8>)
   81b2e:	681b      	ldr	r3, [r3, #0]
   81b30:	2b00      	cmp	r3, #0
   81b32:	d046      	beq.n	81bc2 <xTaskResumeAll+0xba>
   81b34:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81b36:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 81c0c <xTaskResumeAll+0x104>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   81b3a:	4f2a      	ldr	r7, [pc, #168]	; (81be4 <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   81b3c:	4e2a      	ldr	r6, [pc, #168]	; (81be8 <xTaskResumeAll+0xe0>)
   81b3e:	e01d      	b.n	81b7c <xTaskResumeAll+0x74>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   81b40:	f8d8 300c 	ldr.w	r3, [r8, #12]
   81b44:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   81b46:	f104 0018 	add.w	r0, r4, #24
   81b4a:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81b4c:	f104 0904 	add.w	r9, r4, #4
   81b50:	4648      	mov	r0, r9
   81b52:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   81b54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81b56:	6832      	ldr	r2, [r6, #0]
   81b58:	4293      	cmp	r3, r2
   81b5a:	bf88      	it	hi
   81b5c:	6033      	strhi	r3, [r6, #0]
   81b5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81b62:	4822      	ldr	r0, [pc, #136]	; (81bec <xTaskResumeAll+0xe4>)
   81b64:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81b68:	4649      	mov	r1, r9
   81b6a:	4b21      	ldr	r3, [pc, #132]	; (81bf0 <xTaskResumeAll+0xe8>)
   81b6c:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81b6e:	4b21      	ldr	r3, [pc, #132]	; (81bf4 <xTaskResumeAll+0xec>)
   81b70:	681b      	ldr	r3, [r3, #0]
   81b72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   81b76:	429a      	cmp	r2, r3
   81b78:	bf28      	it	cs
   81b7a:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81b7c:	f8d8 3000 	ldr.w	r3, [r8]
   81b80:	2b00      	cmp	r3, #0
   81b82:	d1dd      	bne.n	81b40 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81b84:	4b1c      	ldr	r3, [pc, #112]	; (81bf8 <xTaskResumeAll+0xf0>)
   81b86:	681b      	ldr	r3, [r3, #0]
   81b88:	b163      	cbz	r3, 81ba4 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81b8a:	4b1b      	ldr	r3, [pc, #108]	; (81bf8 <xTaskResumeAll+0xf0>)
   81b8c:	681b      	ldr	r3, [r3, #0]
   81b8e:	b17b      	cbz	r3, 81bb0 <xTaskResumeAll+0xa8>
					{
						vTaskIncrementTick();
   81b90:	4d1a      	ldr	r5, [pc, #104]	; (81bfc <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
   81b92:	4c19      	ldr	r4, [pc, #100]	; (81bf8 <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   81b94:	47a8      	blx	r5
						--uxMissedTicks;
   81b96:	6823      	ldr	r3, [r4, #0]
   81b98:	3b01      	subs	r3, #1
   81b9a:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81b9c:	6823      	ldr	r3, [r4, #0]
   81b9e:	2b00      	cmp	r3, #0
   81ba0:	d1f8      	bne.n	81b94 <xTaskResumeAll+0x8c>
   81ba2:	e005      	b.n	81bb0 <xTaskResumeAll+0xa8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81ba4:	2d01      	cmp	r5, #1
   81ba6:	d003      	beq.n	81bb0 <xTaskResumeAll+0xa8>
   81ba8:	4b15      	ldr	r3, [pc, #84]	; (81c00 <xTaskResumeAll+0xf8>)
   81baa:	681b      	ldr	r3, [r3, #0]
   81bac:	2b01      	cmp	r3, #1
   81bae:	d10a      	bne.n	81bc6 <xTaskResumeAll+0xbe>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   81bb0:	2200      	movs	r2, #0
   81bb2:	4b13      	ldr	r3, [pc, #76]	; (81c00 <xTaskResumeAll+0xf8>)
   81bb4:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   81bb6:	4b13      	ldr	r3, [pc, #76]	; (81c04 <xTaskResumeAll+0xfc>)
   81bb8:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   81bba:	2401      	movs	r4, #1
   81bbc:	e004      	b.n	81bc8 <xTaskResumeAll+0xc0>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81bbe:	2400      	movs	r4, #0
   81bc0:	e002      	b.n	81bc8 <xTaskResumeAll+0xc0>
   81bc2:	2400      	movs	r4, #0
   81bc4:	e000      	b.n	81bc8 <xTaskResumeAll+0xc0>
   81bc6:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   81bc8:	4b0f      	ldr	r3, [pc, #60]	; (81c08 <xTaskResumeAll+0x100>)
   81bca:	4798      	blx	r3

	return xAlreadyYielded;
}
   81bcc:	4620      	mov	r0, r4
   81bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81bd2:	bf00      	nop
   81bd4:	20078b54 	.word	0x20078b54
   81bd8:	00080f39 	.word	0x00080f39
   81bdc:	00080f49 	.word	0x00080f49
   81be0:	20078b98 	.word	0x20078b98
   81be4:	00080eb1 	.word	0x00080eb1
   81be8:	20078a88 	.word	0x20078a88
   81bec:	20078a8c 	.word	0x20078a8c
   81bf0:	00080e51 	.word	0x00080e51
   81bf4:	20078b58 	.word	0x20078b58
   81bf8:	20078a3c 	.word	0x20078a3c
   81bfc:	000819dd 	.word	0x000819dd
   81c00:	20078b94 	.word	0x20078b94
   81c04:	00080f29 	.word	0x00080f29
   81c08:	00080f69 	.word	0x00080f69
   81c0c:	20078b5c 	.word	0x20078b5c

00081c10 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   81c10:	b538      	push	{r3, r4, r5, lr}
   81c12:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   81c14:	4605      	mov	r5, r0
   81c16:	b918      	cbnz	r0, 81c20 <vTaskDelayUntil+0x10>
   81c18:	4b1b      	ldr	r3, [pc, #108]	; (81c88 <vTaskDelayUntil+0x78>)
   81c1a:	4798      	blx	r3
   81c1c:	bf00      	nop
   81c1e:	e7fd      	b.n	81c1c <vTaskDelayUntil+0xc>
		configASSERT( ( xTimeIncrement > 0U ) );
   81c20:	b919      	cbnz	r1, 81c2a <vTaskDelayUntil+0x1a>
   81c22:	4b19      	ldr	r3, [pc, #100]	; (81c88 <vTaskDelayUntil+0x78>)
   81c24:	4798      	blx	r3
   81c26:	bf00      	nop
   81c28:	e7fd      	b.n	81c26 <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   81c2a:	4b18      	ldr	r3, [pc, #96]	; (81c8c <vTaskDelayUntil+0x7c>)
   81c2c:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   81c2e:	882b      	ldrh	r3, [r5, #0]
   81c30:	441c      	add	r4, r3
   81c32:	b2a4      	uxth	r4, r4

			if( xTickCount < *pxPreviousWakeTime )
   81c34:	4a16      	ldr	r2, [pc, #88]	; (81c90 <vTaskDelayUntil+0x80>)
   81c36:	8812      	ldrh	r2, [r2, #0]
   81c38:	b292      	uxth	r2, r2
   81c3a:	4293      	cmp	r3, r2
   81c3c:	d908      	bls.n	81c50 <vTaskDelayUntil+0x40>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   81c3e:	42a3      	cmp	r3, r4
   81c40:	d91e      	bls.n	81c80 <vTaskDelayUntil+0x70>
   81c42:	4b13      	ldr	r3, [pc, #76]	; (81c90 <vTaskDelayUntil+0x80>)
   81c44:	881b      	ldrh	r3, [r3, #0]
   81c46:	b29b      	uxth	r3, r3
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81c48:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   81c4a:	429c      	cmp	r4, r3
   81c4c:	d910      	bls.n	81c70 <vTaskDelayUntil+0x60>
   81c4e:	e007      	b.n	81c60 <vTaskDelayUntil+0x50>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   81c50:	42a3      	cmp	r3, r4
   81c52:	d813      	bhi.n	81c7c <vTaskDelayUntil+0x6c>
   81c54:	4b0e      	ldr	r3, [pc, #56]	; (81c90 <vTaskDelayUntil+0x80>)
   81c56:	881b      	ldrh	r3, [r3, #0]
   81c58:	b29b      	uxth	r3, r3
   81c5a:	429c      	cmp	r4, r3
   81c5c:	d80e      	bhi.n	81c7c <vTaskDelayUntil+0x6c>
   81c5e:	e00f      	b.n	81c80 <vTaskDelayUntil+0x70>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81c60:	4b0c      	ldr	r3, [pc, #48]	; (81c94 <vTaskDelayUntil+0x84>)
   81c62:	6818      	ldr	r0, [r3, #0]
   81c64:	3004      	adds	r0, #4
   81c66:	4b0c      	ldr	r3, [pc, #48]	; (81c98 <vTaskDelayUntil+0x88>)
   81c68:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   81c6a:	4620      	mov	r0, r4
   81c6c:	4b0b      	ldr	r3, [pc, #44]	; (81c9c <vTaskDelayUntil+0x8c>)
   81c6e:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   81c70:	4b0b      	ldr	r3, [pc, #44]	; (81ca0 <vTaskDelayUntil+0x90>)
   81c72:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   81c74:	b930      	cbnz	r0, 81c84 <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
   81c76:	4b0b      	ldr	r3, [pc, #44]	; (81ca4 <vTaskDelayUntil+0x94>)
   81c78:	4798      	blx	r3
   81c7a:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81c7c:	802c      	strh	r4, [r5, #0]
   81c7e:	e7ef      	b.n	81c60 <vTaskDelayUntil+0x50>
   81c80:	802c      	strh	r4, [r5, #0]
   81c82:	e7f5      	b.n	81c70 <vTaskDelayUntil+0x60>
   81c84:	bd38      	pop	{r3, r4, r5, pc}
   81c86:	bf00      	nop
   81c88:	00080f39 	.word	0x00080f39
   81c8c:	000819ad 	.word	0x000819ad
   81c90:	20078b74 	.word	0x20078b74
   81c94:	20078b58 	.word	0x20078b58
   81c98:	00080eb1 	.word	0x00080eb1
   81c9c:	000816dd 	.word	0x000816dd
   81ca0:	00081b09 	.word	0x00081b09
   81ca4:	00080f29 	.word	0x00080f29

00081ca8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   81ca8:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81caa:	4d15      	ldr	r5, [pc, #84]	; (81d00 <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81cac:	4e15      	ldr	r6, [pc, #84]	; (81d04 <prvIdleTask+0x5c>)
			{
				taskYIELD();
   81cae:	f8df 8078 	ldr.w	r8, [pc, #120]	; 81d28 <prvIdleTask+0x80>
   81cb2:	e01c      	b.n	81cee <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81cb4:	4b14      	ldr	r3, [pc, #80]	; (81d08 <prvIdleTask+0x60>)
   81cb6:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81cb8:	4b14      	ldr	r3, [pc, #80]	; (81d0c <prvIdleTask+0x64>)
   81cba:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
   81cbc:	4b14      	ldr	r3, [pc, #80]	; (81d10 <prvIdleTask+0x68>)
   81cbe:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   81cc0:	b1ac      	cbz	r4, 81cee <prvIdleTask+0x46>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   81cc2:	4b14      	ldr	r3, [pc, #80]	; (81d14 <prvIdleTask+0x6c>)
   81cc4:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81cc6:	4b11      	ldr	r3, [pc, #68]	; (81d0c <prvIdleTask+0x64>)
   81cc8:	68db      	ldr	r3, [r3, #12]
   81cca:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81ccc:	1d20      	adds	r0, r4, #4
   81cce:	4b12      	ldr	r3, [pc, #72]	; (81d18 <prvIdleTask+0x70>)
   81cd0:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   81cd2:	4b12      	ldr	r3, [pc, #72]	; (81d1c <prvIdleTask+0x74>)
   81cd4:	681a      	ldr	r2, [r3, #0]
   81cd6:	3a01      	subs	r2, #1
   81cd8:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   81cda:	682b      	ldr	r3, [r5, #0]
   81cdc:	3b01      	subs	r3, #1
   81cde:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   81ce0:	4b0f      	ldr	r3, [pc, #60]	; (81d20 <prvIdleTask+0x78>)
   81ce2:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81ce4:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81ce6:	4f0f      	ldr	r7, [pc, #60]	; (81d24 <prvIdleTask+0x7c>)
   81ce8:	47b8      	blx	r7
		vPortFree( pxTCB );
   81cea:	4620      	mov	r0, r4
   81cec:	47b8      	blx	r7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81cee:	682b      	ldr	r3, [r5, #0]
   81cf0:	2b00      	cmp	r3, #0
   81cf2:	d1df      	bne.n	81cb4 <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81cf4:	6833      	ldr	r3, [r6, #0]
   81cf6:	2b01      	cmp	r3, #1
   81cf8:	d9f9      	bls.n	81cee <prvIdleTask+0x46>
			{
				taskYIELD();
   81cfa:	47c0      	blx	r8
   81cfc:	e7f7      	b.n	81cee <prvIdleTask+0x46>
   81cfe:	bf00      	nop
   81d00:	20078a5c 	.word	0x20078a5c
   81d04:	20078a8c 	.word	0x20078a8c
   81d08:	000819ad 	.word	0x000819ad
   81d0c:	20078a60 	.word	0x20078a60
   81d10:	00081b09 	.word	0x00081b09
   81d14:	00080f49 	.word	0x00080f49
   81d18:	00080eb1 	.word	0x00080eb1
   81d1c:	20078b98 	.word	0x20078b98
   81d20:	00080f69 	.word	0x00080f69
   81d24:	00081159 	.word	0x00081159
   81d28:	00080f29 	.word	0x00080f29

00081d2c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81d2c:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81d2e:	4b1d      	ldr	r3, [pc, #116]	; (81da4 <vTaskSwitchContext+0x78>)
   81d30:	681b      	ldr	r3, [r3, #0]
   81d32:	b95b      	cbnz	r3, 81d4c <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81d34:	4b1c      	ldr	r3, [pc, #112]	; (81da8 <vTaskSwitchContext+0x7c>)
   81d36:	681b      	ldr	r3, [r3, #0]
   81d38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81d3c:	009b      	lsls	r3, r3, #2
   81d3e:	4a1b      	ldr	r2, [pc, #108]	; (81dac <vTaskSwitchContext+0x80>)
   81d40:	58d3      	ldr	r3, [r2, r3]
   81d42:	b9cb      	cbnz	r3, 81d78 <vTaskSwitchContext+0x4c>
   81d44:	4b18      	ldr	r3, [pc, #96]	; (81da8 <vTaskSwitchContext+0x7c>)
   81d46:	681b      	ldr	r3, [r3, #0]
   81d48:	b953      	cbnz	r3, 81d60 <vTaskSwitchContext+0x34>
   81d4a:	e005      	b.n	81d58 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81d4c:	2201      	movs	r2, #1
   81d4e:	4b18      	ldr	r3, [pc, #96]	; (81db0 <vTaskSwitchContext+0x84>)
   81d50:	601a      	str	r2, [r3, #0]
   81d52:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81d54:	681a      	ldr	r2, [r3, #0]
   81d56:	b92a      	cbnz	r2, 81d64 <vTaskSwitchContext+0x38>
   81d58:	4b16      	ldr	r3, [pc, #88]	; (81db4 <vTaskSwitchContext+0x88>)
   81d5a:	4798      	blx	r3
   81d5c:	bf00      	nop
   81d5e:	e7fd      	b.n	81d5c <vTaskSwitchContext+0x30>
   81d60:	4b11      	ldr	r3, [pc, #68]	; (81da8 <vTaskSwitchContext+0x7c>)
   81d62:	4912      	ldr	r1, [pc, #72]	; (81dac <vTaskSwitchContext+0x80>)
   81d64:	681a      	ldr	r2, [r3, #0]
   81d66:	3a01      	subs	r2, #1
   81d68:	601a      	str	r2, [r3, #0]
   81d6a:	681a      	ldr	r2, [r3, #0]
   81d6c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81d70:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   81d74:	2a00      	cmp	r2, #0
   81d76:	d0ed      	beq.n	81d54 <vTaskSwitchContext+0x28>
   81d78:	4b0b      	ldr	r3, [pc, #44]	; (81da8 <vTaskSwitchContext+0x7c>)
   81d7a:	681b      	ldr	r3, [r3, #0]
   81d7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81d80:	4a0a      	ldr	r2, [pc, #40]	; (81dac <vTaskSwitchContext+0x80>)
   81d82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81d86:	685a      	ldr	r2, [r3, #4]
   81d88:	6852      	ldr	r2, [r2, #4]
   81d8a:	605a      	str	r2, [r3, #4]
   81d8c:	f103 0108 	add.w	r1, r3, #8
   81d90:	428a      	cmp	r2, r1
   81d92:	bf04      	itt	eq
   81d94:	6852      	ldreq	r2, [r2, #4]
   81d96:	605a      	streq	r2, [r3, #4]
   81d98:	685b      	ldr	r3, [r3, #4]
   81d9a:	68da      	ldr	r2, [r3, #12]
   81d9c:	4b06      	ldr	r3, [pc, #24]	; (81db8 <vTaskSwitchContext+0x8c>)
   81d9e:	601a      	str	r2, [r3, #0]
   81da0:	bd08      	pop	{r3, pc}
   81da2:	bf00      	nop
   81da4:	20078b54 	.word	0x20078b54
   81da8:	20078a88 	.word	0x20078a88
   81dac:	20078a8c 	.word	0x20078a8c
   81db0:	20078b94 	.word	0x20078b94
   81db4:	00080f39 	.word	0x00080f39
   81db8:	20078b58 	.word	0x20078b58

00081dbc <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   81dbc:	b538      	push	{r3, r4, r5, lr}
   81dbe:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   81dc0:	b918      	cbnz	r0, 81dca <vTaskPlaceOnEventList+0xe>
   81dc2:	4b0f      	ldr	r3, [pc, #60]	; (81e00 <vTaskPlaceOnEventList+0x44>)
   81dc4:	4798      	blx	r3
   81dc6:	bf00      	nop
   81dc8:	e7fd      	b.n	81dc6 <vTaskPlaceOnEventList+0xa>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81dca:	4d0e      	ldr	r5, [pc, #56]	; (81e04 <vTaskPlaceOnEventList+0x48>)
   81dcc:	6829      	ldr	r1, [r5, #0]
   81dce:	3118      	adds	r1, #24
   81dd0:	4b0d      	ldr	r3, [pc, #52]	; (81e08 <vTaskPlaceOnEventList+0x4c>)
   81dd2:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81dd4:	6828      	ldr	r0, [r5, #0]
   81dd6:	3004      	adds	r0, #4
   81dd8:	4b0c      	ldr	r3, [pc, #48]	; (81e0c <vTaskPlaceOnEventList+0x50>)
   81dda:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   81ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81de0:	429c      	cmp	r4, r3
   81de2:	d105      	bne.n	81df0 <vTaskPlaceOnEventList+0x34>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81de4:	6829      	ldr	r1, [r5, #0]
   81de6:	480a      	ldr	r0, [pc, #40]	; (81e10 <vTaskPlaceOnEventList+0x54>)
   81de8:	3104      	adds	r1, #4
   81dea:	4b0a      	ldr	r3, [pc, #40]	; (81e14 <vTaskPlaceOnEventList+0x58>)
   81dec:	4798      	blx	r3
   81dee:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   81df0:	4b09      	ldr	r3, [pc, #36]	; (81e18 <vTaskPlaceOnEventList+0x5c>)
   81df2:	8818      	ldrh	r0, [r3, #0]
   81df4:	4420      	add	r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81df6:	b280      	uxth	r0, r0
   81df8:	4b08      	ldr	r3, [pc, #32]	; (81e1c <vTaskPlaceOnEventList+0x60>)
   81dfa:	4798      	blx	r3
   81dfc:	bd38      	pop	{r3, r4, r5, pc}
   81dfe:	bf00      	nop
   81e00:	00080f39 	.word	0x00080f39
   81e04:	20078b58 	.word	0x20078b58
   81e08:	00080e6d 	.word	0x00080e6d
   81e0c:	00080eb1 	.word	0x00080eb1
   81e10:	20078a40 	.word	0x20078a40
   81e14:	00080e51 	.word	0x00080e51
   81e18:	20078b74 	.word	0x20078b74
   81e1c:	000816dd 	.word	0x000816dd

00081e20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   81e20:	b538      	push	{r3, r4, r5, lr}
   81e22:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   81e24:	b918      	cbnz	r0, 81e2e <vTaskPlaceOnEventListRestricted+0xe>
   81e26:	4b0a      	ldr	r3, [pc, #40]	; (81e50 <vTaskPlaceOnEventListRestricted+0x30>)
   81e28:	4798      	blx	r3
   81e2a:	bf00      	nop
   81e2c:	e7fd      	b.n	81e2a <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81e2e:	4c09      	ldr	r4, [pc, #36]	; (81e54 <vTaskPlaceOnEventListRestricted+0x34>)
   81e30:	6821      	ldr	r1, [r4, #0]
   81e32:	3118      	adds	r1, #24
   81e34:	4b08      	ldr	r3, [pc, #32]	; (81e58 <vTaskPlaceOnEventListRestricted+0x38>)
   81e36:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81e38:	6820      	ldr	r0, [r4, #0]
   81e3a:	3004      	adds	r0, #4
   81e3c:	4b07      	ldr	r3, [pc, #28]	; (81e5c <vTaskPlaceOnEventListRestricted+0x3c>)
   81e3e:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   81e40:	4b07      	ldr	r3, [pc, #28]	; (81e60 <vTaskPlaceOnEventListRestricted+0x40>)
   81e42:	8818      	ldrh	r0, [r3, #0]
   81e44:	4428      	add	r0, r5
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   81e46:	b280      	uxth	r0, r0
   81e48:	4b06      	ldr	r3, [pc, #24]	; (81e64 <vTaskPlaceOnEventListRestricted+0x44>)
   81e4a:	4798      	blx	r3
   81e4c:	bd38      	pop	{r3, r4, r5, pc}
   81e4e:	bf00      	nop
   81e50:	00080f39 	.word	0x00080f39
   81e54:	20078b58 	.word	0x20078b58
   81e58:	00080e51 	.word	0x00080e51
   81e5c:	00080eb1 	.word	0x00080eb1
   81e60:	20078b74 	.word	0x20078b74
   81e64:	000816dd 	.word	0x000816dd

00081e68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   81e68:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81e6a:	68c3      	ldr	r3, [r0, #12]
   81e6c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81e6e:	b91c      	cbnz	r4, 81e78 <xTaskRemoveFromEventList+0x10>
   81e70:	4b16      	ldr	r3, [pc, #88]	; (81ecc <xTaskRemoveFromEventList+0x64>)
   81e72:	4798      	blx	r3
   81e74:	bf00      	nop
   81e76:	e7fd      	b.n	81e74 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81e78:	f104 0518 	add.w	r5, r4, #24
   81e7c:	4628      	mov	r0, r5
   81e7e:	4b14      	ldr	r3, [pc, #80]	; (81ed0 <xTaskRemoveFromEventList+0x68>)
   81e80:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81e82:	4b14      	ldr	r3, [pc, #80]	; (81ed4 <xTaskRemoveFromEventList+0x6c>)
   81e84:	681b      	ldr	r3, [r3, #0]
   81e86:	b99b      	cbnz	r3, 81eb0 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81e88:	1d25      	adds	r5, r4, #4
   81e8a:	4628      	mov	r0, r5
   81e8c:	4b10      	ldr	r3, [pc, #64]	; (81ed0 <xTaskRemoveFromEventList+0x68>)
   81e8e:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81e90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81e92:	4a11      	ldr	r2, [pc, #68]	; (81ed8 <xTaskRemoveFromEventList+0x70>)
   81e94:	6812      	ldr	r2, [r2, #0]
   81e96:	4293      	cmp	r3, r2
   81e98:	bf84      	itt	hi
   81e9a:	4a0f      	ldrhi	r2, [pc, #60]	; (81ed8 <xTaskRemoveFromEventList+0x70>)
   81e9c:	6013      	strhi	r3, [r2, #0]
   81e9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81ea2:	480e      	ldr	r0, [pc, #56]	; (81edc <xTaskRemoveFromEventList+0x74>)
   81ea4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81ea8:	4629      	mov	r1, r5
   81eaa:	4b0d      	ldr	r3, [pc, #52]	; (81ee0 <xTaskRemoveFromEventList+0x78>)
   81eac:	4798      	blx	r3
   81eae:	e003      	b.n	81eb8 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81eb0:	480c      	ldr	r0, [pc, #48]	; (81ee4 <xTaskRemoveFromEventList+0x7c>)
   81eb2:	4629      	mov	r1, r5
   81eb4:	4b0a      	ldr	r3, [pc, #40]	; (81ee0 <xTaskRemoveFromEventList+0x78>)
   81eb6:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81eb8:	4b0b      	ldr	r3, [pc, #44]	; (81ee8 <xTaskRemoveFromEventList+0x80>)
   81eba:	681b      	ldr	r3, [r3, #0]
   81ebc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   81ec0:	4298      	cmp	r0, r3
   81ec2:	bf34      	ite	cc
   81ec4:	2000      	movcc	r0, #0
   81ec6:	2001      	movcs	r0, #1
   81ec8:	bd38      	pop	{r3, r4, r5, pc}
   81eca:	bf00      	nop
   81ecc:	00080f39 	.word	0x00080f39
   81ed0:	00080eb1 	.word	0x00080eb1
   81ed4:	20078b54 	.word	0x20078b54
   81ed8:	20078a88 	.word	0x20078a88
   81edc:	20078a8c 	.word	0x20078a8c
   81ee0:	00080e51 	.word	0x00080e51
   81ee4:	20078b5c 	.word	0x20078b5c
   81ee8:	20078b58 	.word	0x20078b58

00081eec <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   81eec:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   81eee:	b918      	cbnz	r0, 81ef8 <vTaskSetTimeOutState+0xc>
   81ef0:	4b05      	ldr	r3, [pc, #20]	; (81f08 <vTaskSetTimeOutState+0x1c>)
   81ef2:	4798      	blx	r3
   81ef4:	bf00      	nop
   81ef6:	e7fd      	b.n	81ef4 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81ef8:	4a04      	ldr	r2, [pc, #16]	; (81f0c <vTaskSetTimeOutState+0x20>)
   81efa:	6812      	ldr	r2, [r2, #0]
   81efc:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81efe:	4a04      	ldr	r2, [pc, #16]	; (81f10 <vTaskSetTimeOutState+0x24>)
   81f00:	8812      	ldrh	r2, [r2, #0]
   81f02:	8082      	strh	r2, [r0, #4]
   81f04:	bd08      	pop	{r3, pc}
   81f06:	bf00      	nop
   81f08:	00080f39 	.word	0x00080f39
   81f0c:	20078b70 	.word	0x20078b70
   81f10:	20078b74 	.word	0x20078b74

00081f14 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   81f14:	b538      	push	{r3, r4, r5, lr}
   81f16:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   81f18:	4604      	mov	r4, r0
   81f1a:	b918      	cbnz	r0, 81f24 <xTaskCheckForTimeOut+0x10>
   81f1c:	4b1a      	ldr	r3, [pc, #104]	; (81f88 <xTaskCheckForTimeOut+0x74>)
   81f1e:	4798      	blx	r3
   81f20:	bf00      	nop
   81f22:	e7fd      	b.n	81f20 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
   81f24:	b919      	cbnz	r1, 81f2e <xTaskCheckForTimeOut+0x1a>
   81f26:	4b18      	ldr	r3, [pc, #96]	; (81f88 <xTaskCheckForTimeOut+0x74>)
   81f28:	4798      	blx	r3
   81f2a:	bf00      	nop
   81f2c:	e7fd      	b.n	81f2a <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   81f2e:	4b17      	ldr	r3, [pc, #92]	; (81f8c <xTaskCheckForTimeOut+0x78>)
   81f30:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   81f32:	882b      	ldrh	r3, [r5, #0]
   81f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81f38:	4293      	cmp	r3, r2
   81f3a:	d01c      	beq.n	81f76 <xTaskCheckForTimeOut+0x62>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   81f3c:	4a14      	ldr	r2, [pc, #80]	; (81f90 <xTaskCheckForTimeOut+0x7c>)
   81f3e:	6811      	ldr	r1, [r2, #0]
   81f40:	6822      	ldr	r2, [r4, #0]
   81f42:	428a      	cmp	r2, r1
   81f44:	d005      	beq.n	81f52 <xTaskCheckForTimeOut+0x3e>
   81f46:	4a13      	ldr	r2, [pc, #76]	; (81f94 <xTaskCheckForTimeOut+0x80>)
   81f48:	8812      	ldrh	r2, [r2, #0]
   81f4a:	b292      	uxth	r2, r2
   81f4c:	88a1      	ldrh	r1, [r4, #4]
   81f4e:	4291      	cmp	r1, r2
   81f50:	d913      	bls.n	81f7a <xTaskCheckForTimeOut+0x66>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   81f52:	4a10      	ldr	r2, [pc, #64]	; (81f94 <xTaskCheckForTimeOut+0x80>)
   81f54:	8811      	ldrh	r1, [r2, #0]
   81f56:	88a2      	ldrh	r2, [r4, #4]
   81f58:	1a89      	subs	r1, r1, r2
   81f5a:	b289      	uxth	r1, r1
   81f5c:	428b      	cmp	r3, r1
   81f5e:	d90e      	bls.n	81f7e <xTaskCheckForTimeOut+0x6a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81f60:	490c      	ldr	r1, [pc, #48]	; (81f94 <xTaskCheckForTimeOut+0x80>)
   81f62:	8809      	ldrh	r1, [r1, #0]
   81f64:	b289      	uxth	r1, r1
   81f66:	1a52      	subs	r2, r2, r1
   81f68:	4413      	add	r3, r2
   81f6a:	802b      	strh	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   81f6c:	4620      	mov	r0, r4
   81f6e:	4b0a      	ldr	r3, [pc, #40]	; (81f98 <xTaskCheckForTimeOut+0x84>)
   81f70:	4798      	blx	r3
			xReturn = pdFALSE;
   81f72:	2400      	movs	r4, #0
   81f74:	e004      	b.n	81f80 <xTaskCheckForTimeOut+0x6c>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   81f76:	2400      	movs	r4, #0
   81f78:	e002      	b.n	81f80 <xTaskCheckForTimeOut+0x6c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   81f7a:	2401      	movs	r4, #1
   81f7c:	e000      	b.n	81f80 <xTaskCheckForTimeOut+0x6c>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   81f7e:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   81f80:	4b06      	ldr	r3, [pc, #24]	; (81f9c <xTaskCheckForTimeOut+0x88>)
   81f82:	4798      	blx	r3

	return xReturn;
}
   81f84:	4620      	mov	r0, r4
   81f86:	bd38      	pop	{r3, r4, r5, pc}
   81f88:	00080f39 	.word	0x00080f39
   81f8c:	00080f49 	.word	0x00080f49
   81f90:	20078b70 	.word	0x20078b70
   81f94:	20078b74 	.word	0x20078b74
   81f98:	00081eed 	.word	0x00081eed
   81f9c:	00080f69 	.word	0x00080f69

00081fa0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   81fa0:	2201      	movs	r2, #1
   81fa2:	4b01      	ldr	r3, [pc, #4]	; (81fa8 <vTaskMissedYield+0x8>)
   81fa4:	601a      	str	r2, [r3, #0]
   81fa6:	4770      	bx	lr
   81fa8:	20078b94 	.word	0x20078b94

00081fac <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81fac:	4b01      	ldr	r3, [pc, #4]	; (81fb4 <xTaskGetCurrentTaskHandle+0x8>)
   81fae:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81fb0:	4770      	bx	lr
   81fb2:	bf00      	nop
   81fb4:	20078b58 	.word	0x20078b58

00081fb8 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81fb8:	4b05      	ldr	r3, [pc, #20]	; (81fd0 <xTaskGetSchedulerState+0x18>)
   81fba:	681b      	ldr	r3, [r3, #0]
   81fbc:	b133      	cbz	r3, 81fcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81fbe:	4b05      	ldr	r3, [pc, #20]	; (81fd4 <xTaskGetSchedulerState+0x1c>)
   81fc0:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   81fc2:	2b00      	cmp	r3, #0
   81fc4:	bf14      	ite	ne
   81fc6:	2002      	movne	r0, #2
   81fc8:	2001      	moveq	r0, #1
   81fca:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   81fcc:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   81fce:	4770      	bx	lr
   81fd0:	20078a58 	.word	0x20078a58
   81fd4:	20078b54 	.word	0x20078b54

00081fd8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81fd8:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81fda:	4604      	mov	r4, r0
   81fdc:	2800      	cmp	r0, #0
   81fde:	d02e      	beq.n	8203e <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81fe0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   81fe2:	4a17      	ldr	r2, [pc, #92]	; (82040 <vTaskPriorityInherit+0x68>)
   81fe4:	6812      	ldr	r2, [r2, #0]
   81fe6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81fe8:	4293      	cmp	r3, r2
   81fea:	d228      	bcs.n	8203e <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81fec:	4a14      	ldr	r2, [pc, #80]	; (82040 <vTaskPriorityInherit+0x68>)
   81fee:	6812      	ldr	r2, [r2, #0]
   81ff0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81ff2:	f1c2 020a 	rsb	r2, r2, #10
   81ff6:	8302      	strh	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81ff8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81ffc:	4a11      	ldr	r2, [pc, #68]	; (82044 <vTaskPriorityInherit+0x6c>)
   81ffe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   82002:	6942      	ldr	r2, [r0, #20]
   82004:	429a      	cmp	r2, r3
   82006:	d116      	bne.n	82036 <vTaskPriorityInherit+0x5e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82008:	1d05      	adds	r5, r0, #4
   8200a:	4628      	mov	r0, r5
   8200c:	4b0e      	ldr	r3, [pc, #56]	; (82048 <vTaskPriorityInherit+0x70>)
   8200e:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82010:	4b0b      	ldr	r3, [pc, #44]	; (82040 <vTaskPriorityInherit+0x68>)
   82012:	681b      	ldr	r3, [r3, #0]
   82014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82016:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   82018:	4a0c      	ldr	r2, [pc, #48]	; (8204c <vTaskPriorityInherit+0x74>)
   8201a:	6812      	ldr	r2, [r2, #0]
   8201c:	4293      	cmp	r3, r2
   8201e:	bf84      	itt	hi
   82020:	4a0a      	ldrhi	r2, [pc, #40]	; (8204c <vTaskPriorityInherit+0x74>)
   82022:	6013      	strhi	r3, [r2, #0]
   82024:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82028:	4806      	ldr	r0, [pc, #24]	; (82044 <vTaskPriorityInherit+0x6c>)
   8202a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   8202e:	4629      	mov	r1, r5
   82030:	4b07      	ldr	r3, [pc, #28]	; (82050 <vTaskPriorityInherit+0x78>)
   82032:	4798      	blx	r3
   82034:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82036:	4b02      	ldr	r3, [pc, #8]	; (82040 <vTaskPriorityInherit+0x68>)
   82038:	681b      	ldr	r3, [r3, #0]
   8203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8203c:	62c3      	str	r3, [r0, #44]	; 0x2c
   8203e:	bd38      	pop	{r3, r4, r5, pc}
   82040:	20078b58 	.word	0x20078b58
   82044:	20078a8c 	.word	0x20078a8c
   82048:	00080eb1 	.word	0x00080eb1
   8204c:	20078a88 	.word	0x20078a88
   82050:	00080e51 	.word	0x00080e51

00082054 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   82054:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   82056:	4604      	mov	r4, r0
   82058:	b1d0      	cbz	r0, 82090 <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   8205a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   8205c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8205e:	429a      	cmp	r2, r3
   82060:	d016      	beq.n	82090 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82062:	1d05      	adds	r5, r0, #4
   82064:	4628      	mov	r0, r5
   82066:	4b0b      	ldr	r3, [pc, #44]	; (82094 <vTaskPriorityDisinherit+0x40>)
   82068:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   8206a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   8206c:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   8206e:	f1c3 020a 	rsb	r2, r3, #10
   82072:	8322      	strh	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   82074:	4a08      	ldr	r2, [pc, #32]	; (82098 <vTaskPriorityDisinherit+0x44>)
   82076:	6812      	ldr	r2, [r2, #0]
   82078:	4293      	cmp	r3, r2
   8207a:	bf84      	itt	hi
   8207c:	4a06      	ldrhi	r2, [pc, #24]	; (82098 <vTaskPriorityDisinherit+0x44>)
   8207e:	6013      	strhi	r3, [r2, #0]
   82080:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82084:	4805      	ldr	r0, [pc, #20]	; (8209c <vTaskPriorityDisinherit+0x48>)
   82086:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   8208a:	4629      	mov	r1, r5
   8208c:	4b04      	ldr	r3, [pc, #16]	; (820a0 <vTaskPriorityDisinherit+0x4c>)
   8208e:	4798      	blx	r3
   82090:	bd38      	pop	{r3, r4, r5, pc}
   82092:	bf00      	nop
   82094:	00080eb1 	.word	0x00080eb1
   82098:	20078a88 	.word	0x20078a88
   8209c:	20078a8c 	.word	0x20078a8c
   820a0:	00080e51 	.word	0x00080e51

000820a4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   820a4:	b510      	push	{r4, lr}
   820a6:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   820a8:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   820aa:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   820ac:	4291      	cmp	r1, r2
   820ae:	d80b      	bhi.n	820c8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   820b0:	1ad3      	subs	r3, r2, r3
   820b2:	8b01      	ldrh	r1, [r0, #24]
   820b4:	b29b      	uxth	r3, r3
   820b6:	4299      	cmp	r1, r3
   820b8:	d911      	bls.n	820de <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   820ba:	4b0b      	ldr	r3, [pc, #44]	; (820e8 <prvInsertTimerInActiveList+0x44>)
   820bc:	6818      	ldr	r0, [r3, #0]
   820be:	1d21      	adds	r1, r4, #4
   820c0:	4b0a      	ldr	r3, [pc, #40]	; (820ec <prvInsertTimerInActiveList+0x48>)
   820c2:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   820c4:	2000      	movs	r0, #0
   820c6:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   820c8:	429a      	cmp	r2, r3
   820ca:	d201      	bcs.n	820d0 <prvInsertTimerInActiveList+0x2c>
   820cc:	4299      	cmp	r1, r3
   820ce:	d208      	bcs.n	820e2 <prvInsertTimerInActiveList+0x3e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   820d0:	4b07      	ldr	r3, [pc, #28]	; (820f0 <prvInsertTimerInActiveList+0x4c>)
   820d2:	6818      	ldr	r0, [r3, #0]
   820d4:	1d21      	adds	r1, r4, #4
   820d6:	4b05      	ldr	r3, [pc, #20]	; (820ec <prvInsertTimerInActiveList+0x48>)
   820d8:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   820da:	2000      	movs	r0, #0
   820dc:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   820de:	2001      	movs	r0, #1
   820e0:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   820e2:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   820e4:	bd10      	pop	{r4, pc}
   820e6:	bf00      	nop
   820e8:	20078bd4 	.word	0x20078bd4
   820ec:	00080e6d 	.word	0x00080e6d
   820f0:	20078ba0 	.word	0x20078ba0

000820f4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   820f4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   820f6:	4b0d      	ldr	r3, [pc, #52]	; (8212c <prvCheckForValidListAndQueue+0x38>)
   820f8:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   820fa:	4b0d      	ldr	r3, [pc, #52]	; (82130 <prvCheckForValidListAndQueue+0x3c>)
   820fc:	681b      	ldr	r3, [r3, #0]
   820fe:	b98b      	cbnz	r3, 82124 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   82100:	4d0c      	ldr	r5, [pc, #48]	; (82134 <prvCheckForValidListAndQueue+0x40>)
   82102:	4628      	mov	r0, r5
   82104:	4e0c      	ldr	r6, [pc, #48]	; (82138 <prvCheckForValidListAndQueue+0x44>)
   82106:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   82108:	4c0c      	ldr	r4, [pc, #48]	; (8213c <prvCheckForValidListAndQueue+0x48>)
   8210a:	4620      	mov	r0, r4
   8210c:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   8210e:	4b0c      	ldr	r3, [pc, #48]	; (82140 <prvCheckForValidListAndQueue+0x4c>)
   82110:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   82112:	4b0c      	ldr	r3, [pc, #48]	; (82144 <prvCheckForValidListAndQueue+0x50>)
   82114:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   82116:	2005      	movs	r0, #5
   82118:	210c      	movs	r1, #12
   8211a:	2200      	movs	r2, #0
   8211c:	4b0a      	ldr	r3, [pc, #40]	; (82148 <prvCheckForValidListAndQueue+0x54>)
   8211e:	4798      	blx	r3
   82120:	4b03      	ldr	r3, [pc, #12]	; (82130 <prvCheckForValidListAndQueue+0x3c>)
   82122:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   82124:	4b09      	ldr	r3, [pc, #36]	; (8214c <prvCheckForValidListAndQueue+0x58>)
   82126:	4798      	blx	r3
   82128:	bd70      	pop	{r4, r5, r6, pc}
   8212a:	bf00      	nop
   8212c:	00080f49 	.word	0x00080f49
   82130:	20078bd0 	.word	0x20078bd0
   82134:	20078ba4 	.word	0x20078ba4
   82138:	00080e31 	.word	0x00080e31
   8213c:	20078bb8 	.word	0x20078bb8
   82140:	20078ba0 	.word	0x20078ba0
   82144:	20078bd4 	.word	0x20078bd4
   82148:	00081321 	.word	0x00081321
   8214c:	00080f69 	.word	0x00080f69

00082150 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   82150:	b510      	push	{r4, lr}
   82152:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   82154:	4b0b      	ldr	r3, [pc, #44]	; (82184 <xTimerCreateTimerTask+0x34>)
   82156:	4798      	blx	r3

	if( xTimerQueue != NULL )
   82158:	4b0b      	ldr	r3, [pc, #44]	; (82188 <xTimerCreateTimerTask+0x38>)
   8215a:	681b      	ldr	r3, [r3, #0]
   8215c:	b163      	cbz	r3, 82178 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   8215e:	2309      	movs	r3, #9
   82160:	9300      	str	r3, [sp, #0]
   82162:	2300      	movs	r3, #0
   82164:	9301      	str	r3, [sp, #4]
   82166:	9302      	str	r3, [sp, #8]
   82168:	9303      	str	r3, [sp, #12]
   8216a:	4808      	ldr	r0, [pc, #32]	; (8218c <xTimerCreateTimerTask+0x3c>)
   8216c:	4908      	ldr	r1, [pc, #32]	; (82190 <xTimerCreateTimerTask+0x40>)
   8216e:	f44f 7200 	mov.w	r2, #512	; 0x200
   82172:	4c08      	ldr	r4, [pc, #32]	; (82194 <xTimerCreateTimerTask+0x44>)
   82174:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   82176:	b918      	cbnz	r0, 82180 <xTimerCreateTimerTask+0x30>
   82178:	4b07      	ldr	r3, [pc, #28]	; (82198 <xTimerCreateTimerTask+0x48>)
   8217a:	4798      	blx	r3
   8217c:	bf00      	nop
   8217e:	e7fd      	b.n	8217c <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   82180:	b004      	add	sp, #16
   82182:	bd10      	pop	{r4, pc}
   82184:	000820f5 	.word	0x000820f5
   82188:	20078bd0 	.word	0x20078bd0
   8218c:	000822b1 	.word	0x000822b1
   82190:	00084a64 	.word	0x00084a64
   82194:	00081739 	.word	0x00081739
   82198:	00080f39 	.word	0x00080f39

0008219c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   8219c:	b510      	push	{r4, lr}
   8219e:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   821a0:	4c10      	ldr	r4, [pc, #64]	; (821e4 <xTimerGenericCommand+0x48>)
   821a2:	6824      	ldr	r4, [r4, #0]
   821a4:	b1d4      	cbz	r4, 821dc <xTimerGenericCommand+0x40>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   821a6:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   821a8:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   821ac:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   821ae:	b973      	cbnz	r3, 821ce <xTimerGenericCommand+0x32>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   821b0:	4b0d      	ldr	r3, [pc, #52]	; (821e8 <xTimerGenericCommand+0x4c>)
   821b2:	4798      	blx	r3
   821b4:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   821b6:	4b0b      	ldr	r3, [pc, #44]	; (821e4 <xTimerGenericCommand+0x48>)
   821b8:	6818      	ldr	r0, [r3, #0]
   821ba:	a901      	add	r1, sp, #4
   821bc:	bf07      	ittee	eq
   821be:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
   821c2:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   821c4:	2200      	movne	r2, #0
   821c6:	4613      	movne	r3, r2
   821c8:	4c08      	ldr	r4, [pc, #32]	; (821ec <xTimerGenericCommand+0x50>)
   821ca:	47a0      	blx	r4
   821cc:	e007      	b.n	821de <xTimerGenericCommand+0x42>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   821ce:	4620      	mov	r0, r4
   821d0:	a901      	add	r1, sp, #4
   821d2:	461a      	mov	r2, r3
   821d4:	2300      	movs	r3, #0
   821d6:	4c06      	ldr	r4, [pc, #24]	; (821f0 <xTimerGenericCommand+0x54>)
   821d8:	47a0      	blx	r4
   821da:	e000      	b.n	821de <xTimerGenericCommand+0x42>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   821dc:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   821de:	b004      	add	sp, #16
   821e0:	bd10      	pop	{r4, pc}
   821e2:	bf00      	nop
   821e4:	20078bd0 	.word	0x20078bd0
   821e8:	00081fb9 	.word	0x00081fb9
   821ec:	00081379 	.word	0x00081379
   821f0:	0008149d 	.word	0x0008149d

000821f4 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   821f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   821f8:	b082      	sub	sp, #8
   821fa:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   821fc:	4b24      	ldr	r3, [pc, #144]	; (82290 <prvSampleTimeNow+0x9c>)
   821fe:	4798      	blx	r3
   82200:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   82202:	4b24      	ldr	r3, [pc, #144]	; (82294 <prvSampleTimeNow+0xa0>)
   82204:	881b      	ldrh	r3, [r3, #0]
   82206:	4283      	cmp	r3, r0
   82208:	d937      	bls.n	8227a <prvSampleTimeNow+0x86>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8220a:	4e23      	ldr	r6, [pc, #140]	; (82298 <prvSampleTimeNow+0xa4>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   8220c:	4f23      	ldr	r7, [pc, #140]	; (8229c <prvSampleTimeNow+0xa8>)
   8220e:	e027      	b.n	82260 <prvSampleTimeNow+0x6c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82210:	68da      	ldr	r2, [r3, #12]
   82212:	f8b2 a000 	ldrh.w	sl, [r2]
   82216:	fa1f fa8a 	uxth.w	sl, sl

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8221a:	68db      	ldr	r3, [r3, #12]
   8221c:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   8221e:	1d25      	adds	r5, r4, #4
   82220:	4628      	mov	r0, r5
   82222:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82224:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82226:	4620      	mov	r0, r4
   82228:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8222a:	69e3      	ldr	r3, [r4, #28]
   8222c:	2b01      	cmp	r3, #1
   8222e:	d117      	bne.n	82260 <prvSampleTimeNow+0x6c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   82230:	8b23      	ldrh	r3, [r4, #24]
   82232:	4453      	add	r3, sl
   82234:	b29b      	uxth	r3, r3
			if( xReloadTime > xNextExpireTime )
   82236:	4553      	cmp	r3, sl
   82238:	d906      	bls.n	82248 <prvSampleTimeNow+0x54>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   8223a:	80a3      	strh	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   8223c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   8223e:	6830      	ldr	r0, [r6, #0]
   82240:	4629      	mov	r1, r5
   82242:	4b17      	ldr	r3, [pc, #92]	; (822a0 <prvSampleTimeNow+0xac>)
   82244:	4798      	blx	r3
   82246:	e00b      	b.n	82260 <prvSampleTimeNow+0x6c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82248:	2300      	movs	r3, #0
   8224a:	9300      	str	r3, [sp, #0]
   8224c:	4620      	mov	r0, r4
   8224e:	4619      	mov	r1, r3
   82250:	4652      	mov	r2, sl
   82252:	4c14      	ldr	r4, [pc, #80]	; (822a4 <prvSampleTimeNow+0xb0>)
   82254:	47a0      	blx	r4
				configASSERT( xResult );
   82256:	b918      	cbnz	r0, 82260 <prvSampleTimeNow+0x6c>
   82258:	4b13      	ldr	r3, [pc, #76]	; (822a8 <prvSampleTimeNow+0xb4>)
   8225a:	4798      	blx	r3
   8225c:	bf00      	nop
   8225e:	e7fd      	b.n	8225c <prvSampleTimeNow+0x68>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82260:	6833      	ldr	r3, [r6, #0]
   82262:	681a      	ldr	r2, [r3, #0]
   82264:	2a00      	cmp	r2, #0
   82266:	d1d3      	bne.n	82210 <prvSampleTimeNow+0x1c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   82268:	4a10      	ldr	r2, [pc, #64]	; (822ac <prvSampleTimeNow+0xb8>)
   8226a:	6811      	ldr	r1, [r2, #0]
   8226c:	480a      	ldr	r0, [pc, #40]	; (82298 <prvSampleTimeNow+0xa4>)
   8226e:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   82270:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   82272:	2301      	movs	r3, #1
   82274:	f8c9 3000 	str.w	r3, [r9]
   82278:	e002      	b.n	82280 <prvSampleTimeNow+0x8c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   8227a:	2300      	movs	r3, #0
   8227c:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   82280:	4b04      	ldr	r3, [pc, #16]	; (82294 <prvSampleTimeNow+0xa0>)
   82282:	f8a3 8000 	strh.w	r8, [r3]

	return xTimeNow;
}
   82286:	4640      	mov	r0, r8
   82288:	b002      	add	sp, #8
   8228a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8228e:	bf00      	nop
   82290:	000819bd 	.word	0x000819bd
   82294:	20078bcc 	.word	0x20078bcc
   82298:	20078ba0 	.word	0x20078ba0
   8229c:	00080eb1 	.word	0x00080eb1
   822a0:	00080e6d 	.word	0x00080e6d
   822a4:	0008219d 	.word	0x0008219d
   822a8:	00080f39 	.word	0x00080f39
   822ac:	20078bd4 	.word	0x20078bd4

000822b0 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   822b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   822b4:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   822b6:	4d51      	ldr	r5, [pc, #324]	; (823fc <prvTimerTask+0x14c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   822b8:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8242c <prvTimerTask+0x17c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   822bc:	4b50      	ldr	r3, [pc, #320]	; (82400 <prvTimerTask+0x150>)
   822be:	681b      	ldr	r3, [r3, #0]
   822c0:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   822c2:	2a00      	cmp	r2, #0
   822c4:	f000 8090 	beq.w	823e8 <prvTimerTask+0x138>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   822c8:	68db      	ldr	r3, [r3, #12]
   822ca:	881e      	ldrh	r6, [r3, #0]
   822cc:	b2b6      	uxth	r6, r6
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   822ce:	4b4d      	ldr	r3, [pc, #308]	; (82404 <prvTimerTask+0x154>)
   822d0:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   822d2:	a803      	add	r0, sp, #12
   822d4:	4b4c      	ldr	r3, [pc, #304]	; (82408 <prvTimerTask+0x158>)
   822d6:	4798      	blx	r3
   822d8:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   822da:	9b03      	ldr	r3, [sp, #12]
   822dc:	2b00      	cmp	r3, #0
   822de:	d132      	bne.n	82346 <prvTimerTask+0x96>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   822e0:	4286      	cmp	r6, r0
   822e2:	d825      	bhi.n	82330 <prvTimerTask+0x80>
			{
				xTaskResumeAll();
   822e4:	4b49      	ldr	r3, [pc, #292]	; (8240c <prvTimerTask+0x15c>)
   822e6:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   822e8:	4b45      	ldr	r3, [pc, #276]	; (82400 <prvTimerTask+0x150>)
   822ea:	681b      	ldr	r3, [r3, #0]
   822ec:	68db      	ldr	r3, [r3, #12]
   822ee:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   822f0:	1d20      	adds	r0, r4, #4
   822f2:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   822f4:	69e3      	ldr	r3, [r4, #28]
   822f6:	2b01      	cmp	r3, #1
   822f8:	d115      	bne.n	82326 <prvTimerTask+0x76>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   822fa:	8b21      	ldrh	r1, [r4, #24]
   822fc:	4431      	add	r1, r6
   822fe:	4620      	mov	r0, r4
   82300:	b289      	uxth	r1, r1
   82302:	463a      	mov	r2, r7
   82304:	4633      	mov	r3, r6
   82306:	4f42      	ldr	r7, [pc, #264]	; (82410 <prvTimerTask+0x160>)
   82308:	47b8      	blx	r7
   8230a:	2801      	cmp	r0, #1
   8230c:	d10b      	bne.n	82326 <prvTimerTask+0x76>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   8230e:	2300      	movs	r3, #0
   82310:	9300      	str	r3, [sp, #0]
   82312:	4620      	mov	r0, r4
   82314:	4619      	mov	r1, r3
   82316:	4632      	mov	r2, r6
   82318:	4e3e      	ldr	r6, [pc, #248]	; (82414 <prvTimerTask+0x164>)
   8231a:	47b0      	blx	r6
			configASSERT( xResult );
   8231c:	b918      	cbnz	r0, 82326 <prvTimerTask+0x76>
   8231e:	4b3e      	ldr	r3, [pc, #248]	; (82418 <prvTimerTask+0x168>)
   82320:	4798      	blx	r3
   82322:	bf00      	nop
   82324:	e7fd      	b.n	82322 <prvTimerTask+0x72>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82326:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82328:	4620      	mov	r0, r4
   8232a:	4798      	blx	r3
   8232c:	e00d      	b.n	8234a <prvTimerTask+0x9a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   8232e:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   82330:	1bf1      	subs	r1, r6, r7
   82332:	6828      	ldr	r0, [r5, #0]
   82334:	b289      	uxth	r1, r1
   82336:	4b39      	ldr	r3, [pc, #228]	; (8241c <prvTimerTask+0x16c>)
   82338:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   8233a:	4b34      	ldr	r3, [pc, #208]	; (8240c <prvTimerTask+0x15c>)
   8233c:	4798      	blx	r3
   8233e:	b920      	cbnz	r0, 8234a <prvTimerTask+0x9a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   82340:	4b37      	ldr	r3, [pc, #220]	; (82420 <prvTimerTask+0x170>)
   82342:	4798      	blx	r3
   82344:	e001      	b.n	8234a <prvTimerTask+0x9a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   82346:	4b31      	ldr	r3, [pc, #196]	; (8240c <prvTimerTask+0x15c>)
   82348:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8234a:	a802      	add	r0, sp, #8
   8234c:	4b2e      	ldr	r3, [pc, #184]	; (82408 <prvTimerTask+0x158>)
   8234e:	4798      	blx	r3
   82350:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82352:	4e34      	ldr	r6, [pc, #208]	; (82424 <prvTimerTask+0x174>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82354:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 82410 <prvTimerTask+0x160>
   82358:	e03e      	b.n	823d8 <prvTimerTask+0x128>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   8235a:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   8235c:	b11c      	cbz	r4, 82366 <prvTimerTask+0xb6>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   8235e:	6961      	ldr	r1, [r4, #20]
   82360:	b109      	cbz	r1, 82366 <prvTimerTask+0xb6>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   82362:	1d20      	adds	r0, r4, #4
   82364:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   82366:	9903      	ldr	r1, [sp, #12]
   82368:	2902      	cmp	r1, #2
   8236a:	d023      	beq.n	823b4 <prvTimerTask+0x104>
   8236c:	2903      	cmp	r1, #3
   8236e:	d030      	beq.n	823d2 <prvTimerTask+0x122>
   82370:	2900      	cmp	r1, #0
   82372:	d131      	bne.n	823d8 <prvTimerTask+0x128>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   82374:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   82378:	8b21      	ldrh	r1, [r4, #24]
   8237a:	4419      	add	r1, r3
   8237c:	4620      	mov	r0, r4
   8237e:	b289      	uxth	r1, r1
   82380:	463a      	mov	r2, r7
   82382:	47c8      	blx	r9
   82384:	2801      	cmp	r0, #1
   82386:	d127      	bne.n	823d8 <prvTimerTask+0x128>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82388:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8238a:	4620      	mov	r0, r4
   8238c:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8238e:	69e3      	ldr	r3, [r4, #28]
   82390:	2b01      	cmp	r3, #1
   82392:	d121      	bne.n	823d8 <prvTimerTask+0x128>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   82394:	8b22      	ldrh	r2, [r4, #24]
   82396:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   8239a:	441a      	add	r2, r3
   8239c:	2300      	movs	r3, #0
   8239e:	9300      	str	r3, [sp, #0]
   823a0:	4620      	mov	r0, r4
   823a2:	4619      	mov	r1, r3
   823a4:	b292      	uxth	r2, r2
   823a6:	4c1b      	ldr	r4, [pc, #108]	; (82414 <prvTimerTask+0x164>)
   823a8:	47a0      	blx	r4
						configASSERT( xResult );
   823aa:	b9a8      	cbnz	r0, 823d8 <prvTimerTask+0x128>
   823ac:	4b1a      	ldr	r3, [pc, #104]	; (82418 <prvTimerTask+0x168>)
   823ae:	4798      	blx	r3
   823b0:	bf00      	nop
   823b2:	e7fd      	b.n	823b0 <prvTimerTask+0x100>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   823b4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   823b8:	8323      	strh	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   823ba:	b91b      	cbnz	r3, 823c4 <prvTimerTask+0x114>
   823bc:	4b16      	ldr	r3, [pc, #88]	; (82418 <prvTimerTask+0x168>)
   823be:	4798      	blx	r3
   823c0:	bf00      	nop
   823c2:	e7fd      	b.n	823c0 <prvTimerTask+0x110>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   823c4:	18f9      	adds	r1, r7, r3
   823c6:	4620      	mov	r0, r4
   823c8:	b289      	uxth	r1, r1
   823ca:	463a      	mov	r2, r7
   823cc:	463b      	mov	r3, r7
   823ce:	47c8      	blx	r9
   823d0:	e002      	b.n	823d8 <prvTimerTask+0x128>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   823d2:	4620      	mov	r0, r4
   823d4:	4b14      	ldr	r3, [pc, #80]	; (82428 <prvTimerTask+0x178>)
   823d6:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   823d8:	6828      	ldr	r0, [r5, #0]
   823da:	a903      	add	r1, sp, #12
   823dc:	2200      	movs	r2, #0
   823de:	4613      	mov	r3, r2
   823e0:	47b0      	blx	r6
   823e2:	2800      	cmp	r0, #0
   823e4:	d1b9      	bne.n	8235a <prvTimerTask+0xaa>
   823e6:	e769      	b.n	822bc <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   823e8:	4b06      	ldr	r3, [pc, #24]	; (82404 <prvTimerTask+0x154>)
   823ea:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   823ec:	a803      	add	r0, sp, #12
   823ee:	4b06      	ldr	r3, [pc, #24]	; (82408 <prvTimerTask+0x158>)
   823f0:	4798      	blx	r3
   823f2:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   823f4:	9b03      	ldr	r3, [sp, #12]
   823f6:	2b00      	cmp	r3, #0
   823f8:	d099      	beq.n	8232e <prvTimerTask+0x7e>
   823fa:	e7a4      	b.n	82346 <prvTimerTask+0x96>
   823fc:	20078bd0 	.word	0x20078bd0
   82400:	20078ba0 	.word	0x20078ba0
   82404:	000819ad 	.word	0x000819ad
   82408:	000821f5 	.word	0x000821f5
   8240c:	00081b09 	.word	0x00081b09
   82410:	000820a5 	.word	0x000820a5
   82414:	0008219d 	.word	0x0008219d
   82418:	00080f39 	.word	0x00080f39
   8241c:	00081691 	.word	0x00081691
   82420:	00080f29 	.word	0x00080f29
   82424:	0008152d 	.word	0x0008152d
   82428:	00081159 	.word	0x00081159
   8242c:	00080eb1 	.word	0x00080eb1

00082430 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   82430:	b500      	push	{lr}
   82432:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   82434:	4813      	ldr	r0, [pc, #76]	; (82484 <USART0_Handler+0x54>)
   82436:	f10d 0107 	add.w	r1, sp, #7
   8243a:	2201      	movs	r2, #1
   8243c:	4b12      	ldr	r3, [pc, #72]	; (82488 <USART0_Handler+0x58>)
   8243e:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   82440:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   82442:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   82446:	2200      	movs	r2, #0
   82448:	4b10      	ldr	r3, [pc, #64]	; (8248c <USART0_Handler+0x5c>)
   8244a:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   8244c:	4b10      	ldr	r3, [pc, #64]	; (82490 <USART0_Handler+0x60>)
   8244e:	781a      	ldrb	r2, [r3, #0]
   82450:	3201      	adds	r2, #1
   82452:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   82454:	4b0f      	ldr	r3, [pc, #60]	; (82494 <USART0_Handler+0x64>)
   82456:	781b      	ldrb	r3, [r3, #0]
   82458:	f89d 1007 	ldrb.w	r1, [sp, #7]
   8245c:	4a0e      	ldr	r2, [pc, #56]	; (82498 <USART0_Handler+0x68>)
   8245e:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   82460:	2b9b      	cmp	r3, #155	; 0x9b
   82462:	d103      	bne.n	8246c <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   82464:	2200      	movs	r2, #0
   82466:	4b0b      	ldr	r3, [pc, #44]	; (82494 <USART0_Handler+0x64>)
   82468:	701a      	strb	r2, [r3, #0]
   8246a:	e002      	b.n	82472 <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   8246c:	3301      	adds	r3, #1
   8246e:	4a09      	ldr	r2, [pc, #36]	; (82494 <USART0_Handler+0x64>)
   82470:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   82472:	2201      	movs	r2, #1
   82474:	4b05      	ldr	r3, [pc, #20]	; (8248c <USART0_Handler+0x5c>)
   82476:	701a      	strb	r2, [r3, #0]
   82478:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8247c:	b662      	cpsie	i
}
   8247e:	b003      	add	sp, #12
   82480:	f85d fb04 	ldr.w	pc, [sp], #4
   82484:	40098000 	.word	0x40098000
   82488:	00080585 	.word	0x00080585
   8248c:	2007013c 	.word	0x2007013c
   82490:	20078c75 	.word	0x20078c75
   82494:	20078c74 	.word	0x20078c74
   82498:	20078bd8 	.word	0x20078bd8

0008249c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8249c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8249e:	b083      	sub	sp, #12
   824a0:	4604      	mov	r4, r0
   824a2:	460d      	mov	r5, r1
	uint32_t val = 0;
   824a4:	2300      	movs	r3, #0
   824a6:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   824a8:	4b1f      	ldr	r3, [pc, #124]	; (82528 <usart_serial_getchar+0x8c>)
   824aa:	4298      	cmp	r0, r3
   824ac:	d107      	bne.n	824be <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   824ae:	461f      	mov	r7, r3
   824b0:	4e1e      	ldr	r6, [pc, #120]	; (8252c <usart_serial_getchar+0x90>)
   824b2:	4638      	mov	r0, r7
   824b4:	4629      	mov	r1, r5
   824b6:	47b0      	blx	r6
   824b8:	2800      	cmp	r0, #0
   824ba:	d1fa      	bne.n	824b2 <usart_serial_getchar+0x16>
   824bc:	e019      	b.n	824f2 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   824be:	4b1c      	ldr	r3, [pc, #112]	; (82530 <usart_serial_getchar+0x94>)
   824c0:	4298      	cmp	r0, r3
   824c2:	d109      	bne.n	824d8 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   824c4:	461f      	mov	r7, r3
   824c6:	4e1b      	ldr	r6, [pc, #108]	; (82534 <usart_serial_getchar+0x98>)
   824c8:	4638      	mov	r0, r7
   824ca:	a901      	add	r1, sp, #4
   824cc:	47b0      	blx	r6
   824ce:	2800      	cmp	r0, #0
   824d0:	d1fa      	bne.n	824c8 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   824d2:	9b01      	ldr	r3, [sp, #4]
   824d4:	702b      	strb	r3, [r5, #0]
   824d6:	e019      	b.n	8250c <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   824d8:	4b17      	ldr	r3, [pc, #92]	; (82538 <usart_serial_getchar+0x9c>)
   824da:	4298      	cmp	r0, r3
   824dc:	d109      	bne.n	824f2 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   824de:	461e      	mov	r6, r3
   824e0:	4c14      	ldr	r4, [pc, #80]	; (82534 <usart_serial_getchar+0x98>)
   824e2:	4630      	mov	r0, r6
   824e4:	a901      	add	r1, sp, #4
   824e6:	47a0      	blx	r4
   824e8:	2800      	cmp	r0, #0
   824ea:	d1fa      	bne.n	824e2 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   824ec:	9b01      	ldr	r3, [sp, #4]
   824ee:	702b      	strb	r3, [r5, #0]
   824f0:	e018      	b.n	82524 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   824f2:	4b12      	ldr	r3, [pc, #72]	; (8253c <usart_serial_getchar+0xa0>)
   824f4:	429c      	cmp	r4, r3
   824f6:	d109      	bne.n	8250c <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   824f8:	461e      	mov	r6, r3
   824fa:	4c0e      	ldr	r4, [pc, #56]	; (82534 <usart_serial_getchar+0x98>)
   824fc:	4630      	mov	r0, r6
   824fe:	a901      	add	r1, sp, #4
   82500:	47a0      	blx	r4
   82502:	2800      	cmp	r0, #0
   82504:	d1fa      	bne.n	824fc <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   82506:	9b01      	ldr	r3, [sp, #4]
   82508:	702b      	strb	r3, [r5, #0]
   8250a:	e00b      	b.n	82524 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8250c:	4b0c      	ldr	r3, [pc, #48]	; (82540 <usart_serial_getchar+0xa4>)
   8250e:	429c      	cmp	r4, r3
   82510:	d108      	bne.n	82524 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   82512:	461e      	mov	r6, r3
   82514:	4c07      	ldr	r4, [pc, #28]	; (82534 <usart_serial_getchar+0x98>)
   82516:	4630      	mov	r0, r6
   82518:	a901      	add	r1, sp, #4
   8251a:	47a0      	blx	r4
   8251c:	2800      	cmp	r0, #0
   8251e:	d1fa      	bne.n	82516 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   82520:	9b01      	ldr	r3, [sp, #4]
   82522:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   82524:	b003      	add	sp, #12
   82526:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82528:	400e0800 	.word	0x400e0800
   8252c:	00080bd1 	.word	0x00080bd1
   82530:	40098000 	.word	0x40098000
   82534:	00080bf9 	.word	0x00080bf9
   82538:	4009c000 	.word	0x4009c000
   8253c:	400a0000 	.word	0x400a0000
   82540:	400a4000 	.word	0x400a4000

00082544 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   82544:	b570      	push	{r4, r5, r6, lr}
   82546:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   82548:	4b21      	ldr	r3, [pc, #132]	; (825d0 <usart_serial_putchar+0x8c>)
   8254a:	4298      	cmp	r0, r3
   8254c:	d107      	bne.n	8255e <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   8254e:	461e      	mov	r6, r3
   82550:	4d20      	ldr	r5, [pc, #128]	; (825d4 <usart_serial_putchar+0x90>)
   82552:	4630      	mov	r0, r6
   82554:	4621      	mov	r1, r4
   82556:	47a8      	blx	r5
   82558:	2800      	cmp	r0, #0
   8255a:	d1fa      	bne.n	82552 <usart_serial_putchar+0xe>
   8255c:	e02b      	b.n	825b6 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8255e:	4b1e      	ldr	r3, [pc, #120]	; (825d8 <usart_serial_putchar+0x94>)
   82560:	4298      	cmp	r0, r3
   82562:	d107      	bne.n	82574 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   82564:	461e      	mov	r6, r3
   82566:	4d1d      	ldr	r5, [pc, #116]	; (825dc <usart_serial_putchar+0x98>)
   82568:	4630      	mov	r0, r6
   8256a:	4621      	mov	r1, r4
   8256c:	47a8      	blx	r5
   8256e:	2800      	cmp	r0, #0
   82570:	d1fa      	bne.n	82568 <usart_serial_putchar+0x24>
   82572:	e022      	b.n	825ba <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   82574:	4b1a      	ldr	r3, [pc, #104]	; (825e0 <usart_serial_putchar+0x9c>)
   82576:	4298      	cmp	r0, r3
   82578:	d107      	bne.n	8258a <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8257a:	461e      	mov	r6, r3
   8257c:	4d17      	ldr	r5, [pc, #92]	; (825dc <usart_serial_putchar+0x98>)
   8257e:	4630      	mov	r0, r6
   82580:	4621      	mov	r1, r4
   82582:	47a8      	blx	r5
   82584:	2800      	cmp	r0, #0
   82586:	d1fa      	bne.n	8257e <usart_serial_putchar+0x3a>
   82588:	e019      	b.n	825be <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8258a:	4b16      	ldr	r3, [pc, #88]	; (825e4 <usart_serial_putchar+0xa0>)
   8258c:	4298      	cmp	r0, r3
   8258e:	d107      	bne.n	825a0 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   82590:	461e      	mov	r6, r3
   82592:	4d12      	ldr	r5, [pc, #72]	; (825dc <usart_serial_putchar+0x98>)
   82594:	4630      	mov	r0, r6
   82596:	4621      	mov	r1, r4
   82598:	47a8      	blx	r5
   8259a:	2800      	cmp	r0, #0
   8259c:	d1fa      	bne.n	82594 <usart_serial_putchar+0x50>
   8259e:	e010      	b.n	825c2 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   825a0:	4b11      	ldr	r3, [pc, #68]	; (825e8 <usart_serial_putchar+0xa4>)
   825a2:	4298      	cmp	r0, r3
   825a4:	d10f      	bne.n	825c6 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   825a6:	461e      	mov	r6, r3
   825a8:	4d0c      	ldr	r5, [pc, #48]	; (825dc <usart_serial_putchar+0x98>)
   825aa:	4630      	mov	r0, r6
   825ac:	4621      	mov	r1, r4
   825ae:	47a8      	blx	r5
   825b0:	2800      	cmp	r0, #0
   825b2:	d1fa      	bne.n	825aa <usart_serial_putchar+0x66>
   825b4:	e009      	b.n	825ca <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   825b6:	2001      	movs	r0, #1
   825b8:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   825ba:	2001      	movs	r0, #1
   825bc:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   825be:	2001      	movs	r0, #1
   825c0:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   825c2:	2001      	movs	r0, #1
   825c4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   825c6:	2000      	movs	r0, #0
   825c8:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   825ca:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   825cc:	bd70      	pop	{r4, r5, r6, pc}
   825ce:	bf00      	nop
   825d0:	400e0800 	.word	0x400e0800
   825d4:	00080bc1 	.word	0x00080bc1
   825d8:	40098000 	.word	0x40098000
   825dc:	00080be5 	.word	0x00080be5
   825e0:	4009c000 	.word	0x4009c000
   825e4:	400a0000 	.word	0x400a0000
   825e8:	400a4000 	.word	0x400a4000

000825ec <main>:
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

int main (void)
{
   825ec:	b500      	push	{lr}
   825ee:	b089      	sub	sp, #36	; 0x24
	//alla inits
	board_init();
   825f0:	4b28      	ldr	r3, [pc, #160]	; (82694 <main+0xa8>)
   825f2:	4798      	blx	r3
	sysclk_init();
   825f4:	4b28      	ldr	r3, [pc, #160]	; (82698 <main+0xac>)
   825f6:	4798      	blx	r3
	init_sensor();
   825f8:	4b28      	ldr	r3, [pc, #160]	; (8269c <main+0xb0>)
   825fa:	4798      	blx	r3
	delayInit();
   825fc:	4b28      	ldr	r3, [pc, #160]	; (826a0 <main+0xb4>)
   825fe:	4798      	blx	r3
	initMotor2();
   82600:	4b28      	ldr	r3, [pc, #160]	; (826a4 <main+0xb8>)
   82602:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   82604:	200b      	movs	r0, #11
   82606:	4c28      	ldr	r4, [pc, #160]	; (826a8 <main+0xbc>)
   82608:	47a0      	blx	r4
   8260a:	200c      	movs	r0, #12
   8260c:	47a0      	blx	r4
   8260e:	200d      	movs	r0, #13
   82610:	47a0      	blx	r4
   82612:	200e      	movs	r0, #14
   82614:	47a0      	blx	r4
   82616:	2008      	movs	r0, #8
   82618:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8261a:	4d24      	ldr	r5, [pc, #144]	; (826ac <main+0xc0>)
   8261c:	4b24      	ldr	r3, [pc, #144]	; (826b0 <main+0xc4>)
   8261e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   82620:	4a24      	ldr	r2, [pc, #144]	; (826b4 <main+0xc8>)
   82622:	4b25      	ldr	r3, [pc, #148]	; (826b8 <main+0xcc>)
   82624:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   82626:	4a25      	ldr	r2, [pc, #148]	; (826bc <main+0xd0>)
   82628:	4b25      	ldr	r3, [pc, #148]	; (826c0 <main+0xd4>)
   8262a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8262c:	4b25      	ldr	r3, [pc, #148]	; (826c4 <main+0xd8>)
   8262e:	9305      	str	r3, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
   82630:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   82634:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
   82636:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8263a:	9307      	str	r3, [sp, #28]
   8263c:	2008      	movs	r0, #8
   8263e:	47a0      	blx	r4
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   82640:	4628      	mov	r0, r5
   82642:	a905      	add	r1, sp, #20
   82644:	4b20      	ldr	r3, [pc, #128]	; (826c8 <main+0xdc>)
   82646:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   82648:	4d20      	ldr	r5, [pc, #128]	; (826cc <main+0xe0>)
   8264a:	682b      	ldr	r3, [r5, #0]
   8264c:	6898      	ldr	r0, [r3, #8]
   8264e:	2100      	movs	r1, #0
   82650:	4c1f      	ldr	r4, [pc, #124]	; (826d0 <main+0xe4>)
   82652:	47a0      	blx	r4
	setbuf(stdin, NULL);
   82654:	682b      	ldr	r3, [r5, #0]
   82656:	6858      	ldr	r0, [r3, #4]
   82658:	2100      	movs	r1, #0
   8265a:	47a0      	blx	r4
	ioport_init();
	configure_console();
	
	xTaskCreate(task_motor,(const signed char* const) "Motor",TASK_MOTOR_STACK_SIZE,NULL,TASK_MOTOR_PRIORITY,NULL);
   8265c:	2304      	movs	r3, #4
   8265e:	9300      	str	r3, [sp, #0]
   82660:	2400      	movs	r4, #0
   82662:	9401      	str	r4, [sp, #4]
   82664:	9402      	str	r4, [sp, #8]
   82666:	9403      	str	r4, [sp, #12]
   82668:	481a      	ldr	r0, [pc, #104]	; (826d4 <main+0xe8>)
   8266a:	491b      	ldr	r1, [pc, #108]	; (826d8 <main+0xec>)
   8266c:	f44f 7280 	mov.w	r2, #256	; 0x100
   82670:	4623      	mov	r3, r4
   82672:	4d1a      	ldr	r5, [pc, #104]	; (826dc <main+0xf0>)
   82674:	47a8      	blx	r5
	xTaskCreate(task_soundsensor,(const signed char* const) "Soundsensor",TASK_SOUNDSENSOR_STACK_SIZE,NULL,TASK_SOUNDSENSOR_STACK_PRIORITY,NULL);
   82676:	2303      	movs	r3, #3
   82678:	9300      	str	r3, [sp, #0]
   8267a:	9401      	str	r4, [sp, #4]
   8267c:	9402      	str	r4, [sp, #8]
   8267e:	9403      	str	r4, [sp, #12]
   82680:	4817      	ldr	r0, [pc, #92]	; (826e0 <main+0xf4>)
   82682:	4918      	ldr	r1, [pc, #96]	; (826e4 <main+0xf8>)
   82684:	f44f 7280 	mov.w	r2, #256	; 0x100
   82688:	4623      	mov	r3, r4
   8268a:	47a8      	blx	r5
	//xTaskCreate(task_blink,(const signed char* const) "BlINK",TASK_BLINK_STACK_SIZE,NULL,TASK_BLINK_PRIORITY,NULL);
	vTaskStartScheduler();
   8268c:	4b16      	ldr	r3, [pc, #88]	; (826e8 <main+0xfc>)
   8268e:	4798      	blx	r3
   82690:	e7fe      	b.n	82690 <main+0xa4>
   82692:	bf00      	nop
   82694:	000806dd 	.word	0x000806dd
   82698:	00080521 	.word	0x00080521
   8269c:	0008045d 	.word	0x0008045d
   826a0:	00080149 	.word	0x00080149
   826a4:	00080291 	.word	0x00080291
   826a8:	00080af5 	.word	0x00080af5
   826ac:	400e0800 	.word	0x400e0800
   826b0:	20078cb4 	.word	0x20078cb4
   826b4:	00082545 	.word	0x00082545
   826b8:	20078cb0 	.word	0x20078cb0
   826bc:	0008249d 	.word	0x0008249d
   826c0:	20078cac 	.word	0x20078cac
   826c4:	0501bd00 	.word	0x0501bd00
   826c8:	00080b89 	.word	0x00080b89
   826cc:	20070578 	.word	0x20070578
   826d0:	00083111 	.word	0x00083111
   826d4:	00080389 	.word	0x00080389
   826d8:	00084a6c 	.word	0x00084a6c
   826dc:	00081739 	.word	0x00081739
   826e0:	00080479 	.word	0x00080479
   826e4:	00084a74 	.word	0x00084a74
   826e8:	00081941 	.word	0x00081941

000826ec <__aeabi_drsub>:
   826ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   826f0:	e002      	b.n	826f8 <__adddf3>
   826f2:	bf00      	nop

000826f4 <__aeabi_dsub>:
   826f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000826f8 <__adddf3>:
   826f8:	b530      	push	{r4, r5, lr}
   826fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   826fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   82702:	ea94 0f05 	teq	r4, r5
   82706:	bf08      	it	eq
   82708:	ea90 0f02 	teqeq	r0, r2
   8270c:	bf1f      	itttt	ne
   8270e:	ea54 0c00 	orrsne.w	ip, r4, r0
   82712:	ea55 0c02 	orrsne.w	ip, r5, r2
   82716:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8271a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8271e:	f000 80e2 	beq.w	828e6 <__adddf3+0x1ee>
   82722:	ea4f 5454 	mov.w	r4, r4, lsr #21
   82726:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8272a:	bfb8      	it	lt
   8272c:	426d      	neglt	r5, r5
   8272e:	dd0c      	ble.n	8274a <__adddf3+0x52>
   82730:	442c      	add	r4, r5
   82732:	ea80 0202 	eor.w	r2, r0, r2
   82736:	ea81 0303 	eor.w	r3, r1, r3
   8273a:	ea82 0000 	eor.w	r0, r2, r0
   8273e:	ea83 0101 	eor.w	r1, r3, r1
   82742:	ea80 0202 	eor.w	r2, r0, r2
   82746:	ea81 0303 	eor.w	r3, r1, r3
   8274a:	2d36      	cmp	r5, #54	; 0x36
   8274c:	bf88      	it	hi
   8274e:	bd30      	pophi	{r4, r5, pc}
   82750:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82754:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82758:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8275c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   82760:	d002      	beq.n	82768 <__adddf3+0x70>
   82762:	4240      	negs	r0, r0
   82764:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82768:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8276c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   82770:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   82774:	d002      	beq.n	8277c <__adddf3+0x84>
   82776:	4252      	negs	r2, r2
   82778:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8277c:	ea94 0f05 	teq	r4, r5
   82780:	f000 80a7 	beq.w	828d2 <__adddf3+0x1da>
   82784:	f1a4 0401 	sub.w	r4, r4, #1
   82788:	f1d5 0e20 	rsbs	lr, r5, #32
   8278c:	db0d      	blt.n	827aa <__adddf3+0xb2>
   8278e:	fa02 fc0e 	lsl.w	ip, r2, lr
   82792:	fa22 f205 	lsr.w	r2, r2, r5
   82796:	1880      	adds	r0, r0, r2
   82798:	f141 0100 	adc.w	r1, r1, #0
   8279c:	fa03 f20e 	lsl.w	r2, r3, lr
   827a0:	1880      	adds	r0, r0, r2
   827a2:	fa43 f305 	asr.w	r3, r3, r5
   827a6:	4159      	adcs	r1, r3
   827a8:	e00e      	b.n	827c8 <__adddf3+0xd0>
   827aa:	f1a5 0520 	sub.w	r5, r5, #32
   827ae:	f10e 0e20 	add.w	lr, lr, #32
   827b2:	2a01      	cmp	r2, #1
   827b4:	fa03 fc0e 	lsl.w	ip, r3, lr
   827b8:	bf28      	it	cs
   827ba:	f04c 0c02 	orrcs.w	ip, ip, #2
   827be:	fa43 f305 	asr.w	r3, r3, r5
   827c2:	18c0      	adds	r0, r0, r3
   827c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   827c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   827cc:	d507      	bpl.n	827de <__adddf3+0xe6>
   827ce:	f04f 0e00 	mov.w	lr, #0
   827d2:	f1dc 0c00 	rsbs	ip, ip, #0
   827d6:	eb7e 0000 	sbcs.w	r0, lr, r0
   827da:	eb6e 0101 	sbc.w	r1, lr, r1
   827de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   827e2:	d31b      	bcc.n	8281c <__adddf3+0x124>
   827e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   827e8:	d30c      	bcc.n	82804 <__adddf3+0x10c>
   827ea:	0849      	lsrs	r1, r1, #1
   827ec:	ea5f 0030 	movs.w	r0, r0, rrx
   827f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   827f4:	f104 0401 	add.w	r4, r4, #1
   827f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   827fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   82800:	f080 809a 	bcs.w	82938 <__adddf3+0x240>
   82804:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82808:	bf08      	it	eq
   8280a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8280e:	f150 0000 	adcs.w	r0, r0, #0
   82812:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82816:	ea41 0105 	orr.w	r1, r1, r5
   8281a:	bd30      	pop	{r4, r5, pc}
   8281c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   82820:	4140      	adcs	r0, r0
   82822:	eb41 0101 	adc.w	r1, r1, r1
   82826:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8282a:	f1a4 0401 	sub.w	r4, r4, #1
   8282e:	d1e9      	bne.n	82804 <__adddf3+0x10c>
   82830:	f091 0f00 	teq	r1, #0
   82834:	bf04      	itt	eq
   82836:	4601      	moveq	r1, r0
   82838:	2000      	moveq	r0, #0
   8283a:	fab1 f381 	clz	r3, r1
   8283e:	bf08      	it	eq
   82840:	3320      	addeq	r3, #32
   82842:	f1a3 030b 	sub.w	r3, r3, #11
   82846:	f1b3 0220 	subs.w	r2, r3, #32
   8284a:	da0c      	bge.n	82866 <__adddf3+0x16e>
   8284c:	320c      	adds	r2, #12
   8284e:	dd08      	ble.n	82862 <__adddf3+0x16a>
   82850:	f102 0c14 	add.w	ip, r2, #20
   82854:	f1c2 020c 	rsb	r2, r2, #12
   82858:	fa01 f00c 	lsl.w	r0, r1, ip
   8285c:	fa21 f102 	lsr.w	r1, r1, r2
   82860:	e00c      	b.n	8287c <__adddf3+0x184>
   82862:	f102 0214 	add.w	r2, r2, #20
   82866:	bfd8      	it	le
   82868:	f1c2 0c20 	rsble	ip, r2, #32
   8286c:	fa01 f102 	lsl.w	r1, r1, r2
   82870:	fa20 fc0c 	lsr.w	ip, r0, ip
   82874:	bfdc      	itt	le
   82876:	ea41 010c 	orrle.w	r1, r1, ip
   8287a:	4090      	lslle	r0, r2
   8287c:	1ae4      	subs	r4, r4, r3
   8287e:	bfa2      	ittt	ge
   82880:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   82884:	4329      	orrge	r1, r5
   82886:	bd30      	popge	{r4, r5, pc}
   82888:	ea6f 0404 	mvn.w	r4, r4
   8288c:	3c1f      	subs	r4, #31
   8288e:	da1c      	bge.n	828ca <__adddf3+0x1d2>
   82890:	340c      	adds	r4, #12
   82892:	dc0e      	bgt.n	828b2 <__adddf3+0x1ba>
   82894:	f104 0414 	add.w	r4, r4, #20
   82898:	f1c4 0220 	rsb	r2, r4, #32
   8289c:	fa20 f004 	lsr.w	r0, r0, r4
   828a0:	fa01 f302 	lsl.w	r3, r1, r2
   828a4:	ea40 0003 	orr.w	r0, r0, r3
   828a8:	fa21 f304 	lsr.w	r3, r1, r4
   828ac:	ea45 0103 	orr.w	r1, r5, r3
   828b0:	bd30      	pop	{r4, r5, pc}
   828b2:	f1c4 040c 	rsb	r4, r4, #12
   828b6:	f1c4 0220 	rsb	r2, r4, #32
   828ba:	fa20 f002 	lsr.w	r0, r0, r2
   828be:	fa01 f304 	lsl.w	r3, r1, r4
   828c2:	ea40 0003 	orr.w	r0, r0, r3
   828c6:	4629      	mov	r1, r5
   828c8:	bd30      	pop	{r4, r5, pc}
   828ca:	fa21 f004 	lsr.w	r0, r1, r4
   828ce:	4629      	mov	r1, r5
   828d0:	bd30      	pop	{r4, r5, pc}
   828d2:	f094 0f00 	teq	r4, #0
   828d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   828da:	bf06      	itte	eq
   828dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   828e0:	3401      	addeq	r4, #1
   828e2:	3d01      	subne	r5, #1
   828e4:	e74e      	b.n	82784 <__adddf3+0x8c>
   828e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   828ea:	bf18      	it	ne
   828ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   828f0:	d029      	beq.n	82946 <__adddf3+0x24e>
   828f2:	ea94 0f05 	teq	r4, r5
   828f6:	bf08      	it	eq
   828f8:	ea90 0f02 	teqeq	r0, r2
   828fc:	d005      	beq.n	8290a <__adddf3+0x212>
   828fe:	ea54 0c00 	orrs.w	ip, r4, r0
   82902:	bf04      	itt	eq
   82904:	4619      	moveq	r1, r3
   82906:	4610      	moveq	r0, r2
   82908:	bd30      	pop	{r4, r5, pc}
   8290a:	ea91 0f03 	teq	r1, r3
   8290e:	bf1e      	ittt	ne
   82910:	2100      	movne	r1, #0
   82912:	2000      	movne	r0, #0
   82914:	bd30      	popne	{r4, r5, pc}
   82916:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8291a:	d105      	bne.n	82928 <__adddf3+0x230>
   8291c:	0040      	lsls	r0, r0, #1
   8291e:	4149      	adcs	r1, r1
   82920:	bf28      	it	cs
   82922:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   82926:	bd30      	pop	{r4, r5, pc}
   82928:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8292c:	bf3c      	itt	cc
   8292e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   82932:	bd30      	popcc	{r4, r5, pc}
   82934:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82938:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8293c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   82940:	f04f 0000 	mov.w	r0, #0
   82944:	bd30      	pop	{r4, r5, pc}
   82946:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8294a:	bf1a      	itte	ne
   8294c:	4619      	movne	r1, r3
   8294e:	4610      	movne	r0, r2
   82950:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   82954:	bf1c      	itt	ne
   82956:	460b      	movne	r3, r1
   82958:	4602      	movne	r2, r0
   8295a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8295e:	bf06      	itte	eq
   82960:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   82964:	ea91 0f03 	teqeq	r1, r3
   82968:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8296c:	bd30      	pop	{r4, r5, pc}
   8296e:	bf00      	nop

00082970 <__aeabi_ui2d>:
   82970:	f090 0f00 	teq	r0, #0
   82974:	bf04      	itt	eq
   82976:	2100      	moveq	r1, #0
   82978:	4770      	bxeq	lr
   8297a:	b530      	push	{r4, r5, lr}
   8297c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82980:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82984:	f04f 0500 	mov.w	r5, #0
   82988:	f04f 0100 	mov.w	r1, #0
   8298c:	e750      	b.n	82830 <__adddf3+0x138>
   8298e:	bf00      	nop

00082990 <__aeabi_i2d>:
   82990:	f090 0f00 	teq	r0, #0
   82994:	bf04      	itt	eq
   82996:	2100      	moveq	r1, #0
   82998:	4770      	bxeq	lr
   8299a:	b530      	push	{r4, r5, lr}
   8299c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   829a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   829a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   829a8:	bf48      	it	mi
   829aa:	4240      	negmi	r0, r0
   829ac:	f04f 0100 	mov.w	r1, #0
   829b0:	e73e      	b.n	82830 <__adddf3+0x138>
   829b2:	bf00      	nop

000829b4 <__aeabi_f2d>:
   829b4:	0042      	lsls	r2, r0, #1
   829b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   829ba:	ea4f 0131 	mov.w	r1, r1, rrx
   829be:	ea4f 7002 	mov.w	r0, r2, lsl #28
   829c2:	bf1f      	itttt	ne
   829c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   829c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   829cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   829d0:	4770      	bxne	lr
   829d2:	f092 0f00 	teq	r2, #0
   829d6:	bf14      	ite	ne
   829d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   829dc:	4770      	bxeq	lr
   829de:	b530      	push	{r4, r5, lr}
   829e0:	f44f 7460 	mov.w	r4, #896	; 0x380
   829e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   829e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   829ec:	e720      	b.n	82830 <__adddf3+0x138>
   829ee:	bf00      	nop

000829f0 <__aeabi_ul2d>:
   829f0:	ea50 0201 	orrs.w	r2, r0, r1
   829f4:	bf08      	it	eq
   829f6:	4770      	bxeq	lr
   829f8:	b530      	push	{r4, r5, lr}
   829fa:	f04f 0500 	mov.w	r5, #0
   829fe:	e00a      	b.n	82a16 <__aeabi_l2d+0x16>

00082a00 <__aeabi_l2d>:
   82a00:	ea50 0201 	orrs.w	r2, r0, r1
   82a04:	bf08      	it	eq
   82a06:	4770      	bxeq	lr
   82a08:	b530      	push	{r4, r5, lr}
   82a0a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   82a0e:	d502      	bpl.n	82a16 <__aeabi_l2d+0x16>
   82a10:	4240      	negs	r0, r0
   82a12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82a16:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82a1a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82a1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   82a22:	f43f aedc 	beq.w	827de <__adddf3+0xe6>
   82a26:	f04f 0203 	mov.w	r2, #3
   82a2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82a2e:	bf18      	it	ne
   82a30:	3203      	addne	r2, #3
   82a32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82a36:	bf18      	it	ne
   82a38:	3203      	addne	r2, #3
   82a3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   82a3e:	f1c2 0320 	rsb	r3, r2, #32
   82a42:	fa00 fc03 	lsl.w	ip, r0, r3
   82a46:	fa20 f002 	lsr.w	r0, r0, r2
   82a4a:	fa01 fe03 	lsl.w	lr, r1, r3
   82a4e:	ea40 000e 	orr.w	r0, r0, lr
   82a52:	fa21 f102 	lsr.w	r1, r1, r2
   82a56:	4414      	add	r4, r2
   82a58:	e6c1      	b.n	827de <__adddf3+0xe6>
   82a5a:	bf00      	nop

00082a5c <__aeabi_dmul>:
   82a5c:	b570      	push	{r4, r5, r6, lr}
   82a5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82a62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   82a66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82a6a:	bf1d      	ittte	ne
   82a6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   82a70:	ea94 0f0c 	teqne	r4, ip
   82a74:	ea95 0f0c 	teqne	r5, ip
   82a78:	f000 f8de 	bleq	82c38 <__aeabi_dmul+0x1dc>
   82a7c:	442c      	add	r4, r5
   82a7e:	ea81 0603 	eor.w	r6, r1, r3
   82a82:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   82a86:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   82a8a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   82a8e:	bf18      	it	ne
   82a90:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   82a94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82a9c:	d038      	beq.n	82b10 <__aeabi_dmul+0xb4>
   82a9e:	fba0 ce02 	umull	ip, lr, r0, r2
   82aa2:	f04f 0500 	mov.w	r5, #0
   82aa6:	fbe1 e502 	umlal	lr, r5, r1, r2
   82aaa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   82aae:	fbe0 e503 	umlal	lr, r5, r0, r3
   82ab2:	f04f 0600 	mov.w	r6, #0
   82ab6:	fbe1 5603 	umlal	r5, r6, r1, r3
   82aba:	f09c 0f00 	teq	ip, #0
   82abe:	bf18      	it	ne
   82ac0:	f04e 0e01 	orrne.w	lr, lr, #1
   82ac4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   82ac8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   82acc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   82ad0:	d204      	bcs.n	82adc <__aeabi_dmul+0x80>
   82ad2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   82ad6:	416d      	adcs	r5, r5
   82ad8:	eb46 0606 	adc.w	r6, r6, r6
   82adc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   82ae0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   82ae4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   82ae8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   82aec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   82af0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   82af4:	bf88      	it	hi
   82af6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   82afa:	d81e      	bhi.n	82b3a <__aeabi_dmul+0xde>
   82afc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   82b00:	bf08      	it	eq
   82b02:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   82b06:	f150 0000 	adcs.w	r0, r0, #0
   82b0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82b0e:	bd70      	pop	{r4, r5, r6, pc}
   82b10:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   82b14:	ea46 0101 	orr.w	r1, r6, r1
   82b18:	ea40 0002 	orr.w	r0, r0, r2
   82b1c:	ea81 0103 	eor.w	r1, r1, r3
   82b20:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   82b24:	bfc2      	ittt	gt
   82b26:	ebd4 050c 	rsbsgt	r5, r4, ip
   82b2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   82b2e:	bd70      	popgt	{r4, r5, r6, pc}
   82b30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82b34:	f04f 0e00 	mov.w	lr, #0
   82b38:	3c01      	subs	r4, #1
   82b3a:	f300 80ab 	bgt.w	82c94 <__aeabi_dmul+0x238>
   82b3e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   82b42:	bfde      	ittt	le
   82b44:	2000      	movle	r0, #0
   82b46:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   82b4a:	bd70      	pople	{r4, r5, r6, pc}
   82b4c:	f1c4 0400 	rsb	r4, r4, #0
   82b50:	3c20      	subs	r4, #32
   82b52:	da35      	bge.n	82bc0 <__aeabi_dmul+0x164>
   82b54:	340c      	adds	r4, #12
   82b56:	dc1b      	bgt.n	82b90 <__aeabi_dmul+0x134>
   82b58:	f104 0414 	add.w	r4, r4, #20
   82b5c:	f1c4 0520 	rsb	r5, r4, #32
   82b60:	fa00 f305 	lsl.w	r3, r0, r5
   82b64:	fa20 f004 	lsr.w	r0, r0, r4
   82b68:	fa01 f205 	lsl.w	r2, r1, r5
   82b6c:	ea40 0002 	orr.w	r0, r0, r2
   82b70:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   82b74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82b78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   82b7c:	fa21 f604 	lsr.w	r6, r1, r4
   82b80:	eb42 0106 	adc.w	r1, r2, r6
   82b84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82b88:	bf08      	it	eq
   82b8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82b8e:	bd70      	pop	{r4, r5, r6, pc}
   82b90:	f1c4 040c 	rsb	r4, r4, #12
   82b94:	f1c4 0520 	rsb	r5, r4, #32
   82b98:	fa00 f304 	lsl.w	r3, r0, r4
   82b9c:	fa20 f005 	lsr.w	r0, r0, r5
   82ba0:	fa01 f204 	lsl.w	r2, r1, r4
   82ba4:	ea40 0002 	orr.w	r0, r0, r2
   82ba8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82bac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   82bb0:	f141 0100 	adc.w	r1, r1, #0
   82bb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82bb8:	bf08      	it	eq
   82bba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82bbe:	bd70      	pop	{r4, r5, r6, pc}
   82bc0:	f1c4 0520 	rsb	r5, r4, #32
   82bc4:	fa00 f205 	lsl.w	r2, r0, r5
   82bc8:	ea4e 0e02 	orr.w	lr, lr, r2
   82bcc:	fa20 f304 	lsr.w	r3, r0, r4
   82bd0:	fa01 f205 	lsl.w	r2, r1, r5
   82bd4:	ea43 0302 	orr.w	r3, r3, r2
   82bd8:	fa21 f004 	lsr.w	r0, r1, r4
   82bdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82be0:	fa21 f204 	lsr.w	r2, r1, r4
   82be4:	ea20 0002 	bic.w	r0, r0, r2
   82be8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   82bec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82bf0:	bf08      	it	eq
   82bf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82bf6:	bd70      	pop	{r4, r5, r6, pc}
   82bf8:	f094 0f00 	teq	r4, #0
   82bfc:	d10f      	bne.n	82c1e <__aeabi_dmul+0x1c2>
   82bfe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   82c02:	0040      	lsls	r0, r0, #1
   82c04:	eb41 0101 	adc.w	r1, r1, r1
   82c08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82c0c:	bf08      	it	eq
   82c0e:	3c01      	subeq	r4, #1
   82c10:	d0f7      	beq.n	82c02 <__aeabi_dmul+0x1a6>
   82c12:	ea41 0106 	orr.w	r1, r1, r6
   82c16:	f095 0f00 	teq	r5, #0
   82c1a:	bf18      	it	ne
   82c1c:	4770      	bxne	lr
   82c1e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   82c22:	0052      	lsls	r2, r2, #1
   82c24:	eb43 0303 	adc.w	r3, r3, r3
   82c28:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   82c2c:	bf08      	it	eq
   82c2e:	3d01      	subeq	r5, #1
   82c30:	d0f7      	beq.n	82c22 <__aeabi_dmul+0x1c6>
   82c32:	ea43 0306 	orr.w	r3, r3, r6
   82c36:	4770      	bx	lr
   82c38:	ea94 0f0c 	teq	r4, ip
   82c3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   82c40:	bf18      	it	ne
   82c42:	ea95 0f0c 	teqne	r5, ip
   82c46:	d00c      	beq.n	82c62 <__aeabi_dmul+0x206>
   82c48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82c4c:	bf18      	it	ne
   82c4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82c52:	d1d1      	bne.n	82bf8 <__aeabi_dmul+0x19c>
   82c54:	ea81 0103 	eor.w	r1, r1, r3
   82c58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82c5c:	f04f 0000 	mov.w	r0, #0
   82c60:	bd70      	pop	{r4, r5, r6, pc}
   82c62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82c66:	bf06      	itte	eq
   82c68:	4610      	moveq	r0, r2
   82c6a:	4619      	moveq	r1, r3
   82c6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82c70:	d019      	beq.n	82ca6 <__aeabi_dmul+0x24a>
   82c72:	ea94 0f0c 	teq	r4, ip
   82c76:	d102      	bne.n	82c7e <__aeabi_dmul+0x222>
   82c78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   82c7c:	d113      	bne.n	82ca6 <__aeabi_dmul+0x24a>
   82c7e:	ea95 0f0c 	teq	r5, ip
   82c82:	d105      	bne.n	82c90 <__aeabi_dmul+0x234>
   82c84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   82c88:	bf1c      	itt	ne
   82c8a:	4610      	movne	r0, r2
   82c8c:	4619      	movne	r1, r3
   82c8e:	d10a      	bne.n	82ca6 <__aeabi_dmul+0x24a>
   82c90:	ea81 0103 	eor.w	r1, r1, r3
   82c94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82c98:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   82c9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   82ca0:	f04f 0000 	mov.w	r0, #0
   82ca4:	bd70      	pop	{r4, r5, r6, pc}
   82ca6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   82caa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   82cae:	bd70      	pop	{r4, r5, r6, pc}

00082cb0 <__aeabi_ddiv>:
   82cb0:	b570      	push	{r4, r5, r6, lr}
   82cb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82cb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   82cba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82cbe:	bf1d      	ittte	ne
   82cc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   82cc4:	ea94 0f0c 	teqne	r4, ip
   82cc8:	ea95 0f0c 	teqne	r5, ip
   82ccc:	f000 f8a7 	bleq	82e1e <__aeabi_ddiv+0x16e>
   82cd0:	eba4 0405 	sub.w	r4, r4, r5
   82cd4:	ea81 0e03 	eor.w	lr, r1, r3
   82cd8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   82cdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82ce0:	f000 8088 	beq.w	82df4 <__aeabi_ddiv+0x144>
   82ce4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   82ce8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   82cec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   82cf0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   82cf4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   82cf8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   82cfc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   82d00:	ea4f 2600 	mov.w	r6, r0, lsl #8
   82d04:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   82d08:	429d      	cmp	r5, r3
   82d0a:	bf08      	it	eq
   82d0c:	4296      	cmpeq	r6, r2
   82d0e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   82d12:	f504 7440 	add.w	r4, r4, #768	; 0x300
   82d16:	d202      	bcs.n	82d1e <__aeabi_ddiv+0x6e>
   82d18:	085b      	lsrs	r3, r3, #1
   82d1a:	ea4f 0232 	mov.w	r2, r2, rrx
   82d1e:	1ab6      	subs	r6, r6, r2
   82d20:	eb65 0503 	sbc.w	r5, r5, r3
   82d24:	085b      	lsrs	r3, r3, #1
   82d26:	ea4f 0232 	mov.w	r2, r2, rrx
   82d2a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   82d2e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   82d32:	ebb6 0e02 	subs.w	lr, r6, r2
   82d36:	eb75 0e03 	sbcs.w	lr, r5, r3
   82d3a:	bf22      	ittt	cs
   82d3c:	1ab6      	subcs	r6, r6, r2
   82d3e:	4675      	movcs	r5, lr
   82d40:	ea40 000c 	orrcs.w	r0, r0, ip
   82d44:	085b      	lsrs	r3, r3, #1
   82d46:	ea4f 0232 	mov.w	r2, r2, rrx
   82d4a:	ebb6 0e02 	subs.w	lr, r6, r2
   82d4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   82d52:	bf22      	ittt	cs
   82d54:	1ab6      	subcs	r6, r6, r2
   82d56:	4675      	movcs	r5, lr
   82d58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   82d5c:	085b      	lsrs	r3, r3, #1
   82d5e:	ea4f 0232 	mov.w	r2, r2, rrx
   82d62:	ebb6 0e02 	subs.w	lr, r6, r2
   82d66:	eb75 0e03 	sbcs.w	lr, r5, r3
   82d6a:	bf22      	ittt	cs
   82d6c:	1ab6      	subcs	r6, r6, r2
   82d6e:	4675      	movcs	r5, lr
   82d70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   82d74:	085b      	lsrs	r3, r3, #1
   82d76:	ea4f 0232 	mov.w	r2, r2, rrx
   82d7a:	ebb6 0e02 	subs.w	lr, r6, r2
   82d7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   82d82:	bf22      	ittt	cs
   82d84:	1ab6      	subcs	r6, r6, r2
   82d86:	4675      	movcs	r5, lr
   82d88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   82d8c:	ea55 0e06 	orrs.w	lr, r5, r6
   82d90:	d018      	beq.n	82dc4 <__aeabi_ddiv+0x114>
   82d92:	ea4f 1505 	mov.w	r5, r5, lsl #4
   82d96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   82d9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   82d9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   82da2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   82da6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   82daa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   82dae:	d1c0      	bne.n	82d32 <__aeabi_ddiv+0x82>
   82db0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82db4:	d10b      	bne.n	82dce <__aeabi_ddiv+0x11e>
   82db6:	ea41 0100 	orr.w	r1, r1, r0
   82dba:	f04f 0000 	mov.w	r0, #0
   82dbe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   82dc2:	e7b6      	b.n	82d32 <__aeabi_ddiv+0x82>
   82dc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82dc8:	bf04      	itt	eq
   82dca:	4301      	orreq	r1, r0
   82dcc:	2000      	moveq	r0, #0
   82dce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   82dd2:	bf88      	it	hi
   82dd4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   82dd8:	f63f aeaf 	bhi.w	82b3a <__aeabi_dmul+0xde>
   82ddc:	ebb5 0c03 	subs.w	ip, r5, r3
   82de0:	bf04      	itt	eq
   82de2:	ebb6 0c02 	subseq.w	ip, r6, r2
   82de6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   82dea:	f150 0000 	adcs.w	r0, r0, #0
   82dee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82df2:	bd70      	pop	{r4, r5, r6, pc}
   82df4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   82df8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   82dfc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   82e00:	bfc2      	ittt	gt
   82e02:	ebd4 050c 	rsbsgt	r5, r4, ip
   82e06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   82e0a:	bd70      	popgt	{r4, r5, r6, pc}
   82e0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82e10:	f04f 0e00 	mov.w	lr, #0
   82e14:	3c01      	subs	r4, #1
   82e16:	e690      	b.n	82b3a <__aeabi_dmul+0xde>
   82e18:	ea45 0e06 	orr.w	lr, r5, r6
   82e1c:	e68d      	b.n	82b3a <__aeabi_dmul+0xde>
   82e1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   82e22:	ea94 0f0c 	teq	r4, ip
   82e26:	bf08      	it	eq
   82e28:	ea95 0f0c 	teqeq	r5, ip
   82e2c:	f43f af3b 	beq.w	82ca6 <__aeabi_dmul+0x24a>
   82e30:	ea94 0f0c 	teq	r4, ip
   82e34:	d10a      	bne.n	82e4c <__aeabi_ddiv+0x19c>
   82e36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   82e3a:	f47f af34 	bne.w	82ca6 <__aeabi_dmul+0x24a>
   82e3e:	ea95 0f0c 	teq	r5, ip
   82e42:	f47f af25 	bne.w	82c90 <__aeabi_dmul+0x234>
   82e46:	4610      	mov	r0, r2
   82e48:	4619      	mov	r1, r3
   82e4a:	e72c      	b.n	82ca6 <__aeabi_dmul+0x24a>
   82e4c:	ea95 0f0c 	teq	r5, ip
   82e50:	d106      	bne.n	82e60 <__aeabi_ddiv+0x1b0>
   82e52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   82e56:	f43f aefd 	beq.w	82c54 <__aeabi_dmul+0x1f8>
   82e5a:	4610      	mov	r0, r2
   82e5c:	4619      	mov	r1, r3
   82e5e:	e722      	b.n	82ca6 <__aeabi_dmul+0x24a>
   82e60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82e64:	bf18      	it	ne
   82e66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82e6a:	f47f aec5 	bne.w	82bf8 <__aeabi_dmul+0x19c>
   82e6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   82e72:	f47f af0d 	bne.w	82c90 <__aeabi_dmul+0x234>
   82e76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   82e7a:	f47f aeeb 	bne.w	82c54 <__aeabi_dmul+0x1f8>
   82e7e:	e712      	b.n	82ca6 <__aeabi_dmul+0x24a>

00082e80 <__aeabi_d2iz>:
   82e80:	ea4f 0241 	mov.w	r2, r1, lsl #1
   82e84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   82e88:	d215      	bcs.n	82eb6 <__aeabi_d2iz+0x36>
   82e8a:	d511      	bpl.n	82eb0 <__aeabi_d2iz+0x30>
   82e8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   82e90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   82e94:	d912      	bls.n	82ebc <__aeabi_d2iz+0x3c>
   82e96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   82e9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   82e9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   82ea2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82ea6:	fa23 f002 	lsr.w	r0, r3, r2
   82eaa:	bf18      	it	ne
   82eac:	4240      	negne	r0, r0
   82eae:	4770      	bx	lr
   82eb0:	f04f 0000 	mov.w	r0, #0
   82eb4:	4770      	bx	lr
   82eb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   82eba:	d105      	bne.n	82ec8 <__aeabi_d2iz+0x48>
   82ebc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   82ec0:	bf08      	it	eq
   82ec2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   82ec6:	4770      	bx	lr
   82ec8:	f04f 0000 	mov.w	r0, #0
   82ecc:	4770      	bx	lr
   82ece:	bf00      	nop

00082ed0 <__libc_init_array>:
   82ed0:	b570      	push	{r4, r5, r6, lr}
   82ed2:	4e0f      	ldr	r6, [pc, #60]	; (82f10 <__libc_init_array+0x40>)
   82ed4:	4d0f      	ldr	r5, [pc, #60]	; (82f14 <__libc_init_array+0x44>)
   82ed6:	1b76      	subs	r6, r6, r5
   82ed8:	10b6      	asrs	r6, r6, #2
   82eda:	d007      	beq.n	82eec <__libc_init_array+0x1c>
   82edc:	3d04      	subs	r5, #4
   82ede:	2400      	movs	r4, #0
   82ee0:	3401      	adds	r4, #1
   82ee2:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82ee6:	4798      	blx	r3
   82ee8:	42a6      	cmp	r6, r4
   82eea:	d1f9      	bne.n	82ee0 <__libc_init_array+0x10>
   82eec:	4e0a      	ldr	r6, [pc, #40]	; (82f18 <__libc_init_array+0x48>)
   82eee:	4d0b      	ldr	r5, [pc, #44]	; (82f1c <__libc_init_array+0x4c>)
   82ef0:	f001 fdca 	bl	84a88 <_init>
   82ef4:	1b76      	subs	r6, r6, r5
   82ef6:	10b6      	asrs	r6, r6, #2
   82ef8:	d008      	beq.n	82f0c <__libc_init_array+0x3c>
   82efa:	3d04      	subs	r5, #4
   82efc:	2400      	movs	r4, #0
   82efe:	3401      	adds	r4, #1
   82f00:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82f04:	4798      	blx	r3
   82f06:	42a6      	cmp	r6, r4
   82f08:	d1f9      	bne.n	82efe <__libc_init_array+0x2e>
   82f0a:	bd70      	pop	{r4, r5, r6, pc}
   82f0c:	bd70      	pop	{r4, r5, r6, pc}
   82f0e:	bf00      	nop
   82f10:	00084a94 	.word	0x00084a94
   82f14:	00084a94 	.word	0x00084a94
   82f18:	00084a9c 	.word	0x00084a9c
   82f1c:	00084a94 	.word	0x00084a94

00082f20 <memcpy>:
   82f20:	4684      	mov	ip, r0
   82f22:	ea41 0300 	orr.w	r3, r1, r0
   82f26:	f013 0303 	ands.w	r3, r3, #3
   82f2a:	d149      	bne.n	82fc0 <memcpy+0xa0>
   82f2c:	3a40      	subs	r2, #64	; 0x40
   82f2e:	d323      	bcc.n	82f78 <memcpy+0x58>
   82f30:	680b      	ldr	r3, [r1, #0]
   82f32:	6003      	str	r3, [r0, #0]
   82f34:	684b      	ldr	r3, [r1, #4]
   82f36:	6043      	str	r3, [r0, #4]
   82f38:	688b      	ldr	r3, [r1, #8]
   82f3a:	6083      	str	r3, [r0, #8]
   82f3c:	68cb      	ldr	r3, [r1, #12]
   82f3e:	60c3      	str	r3, [r0, #12]
   82f40:	690b      	ldr	r3, [r1, #16]
   82f42:	6103      	str	r3, [r0, #16]
   82f44:	694b      	ldr	r3, [r1, #20]
   82f46:	6143      	str	r3, [r0, #20]
   82f48:	698b      	ldr	r3, [r1, #24]
   82f4a:	6183      	str	r3, [r0, #24]
   82f4c:	69cb      	ldr	r3, [r1, #28]
   82f4e:	61c3      	str	r3, [r0, #28]
   82f50:	6a0b      	ldr	r3, [r1, #32]
   82f52:	6203      	str	r3, [r0, #32]
   82f54:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82f56:	6243      	str	r3, [r0, #36]	; 0x24
   82f58:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82f5a:	6283      	str	r3, [r0, #40]	; 0x28
   82f5c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82f5e:	62c3      	str	r3, [r0, #44]	; 0x2c
   82f60:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82f62:	6303      	str	r3, [r0, #48]	; 0x30
   82f64:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82f66:	6343      	str	r3, [r0, #52]	; 0x34
   82f68:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82f6a:	6383      	str	r3, [r0, #56]	; 0x38
   82f6c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82f6e:	63c3      	str	r3, [r0, #60]	; 0x3c
   82f70:	3040      	adds	r0, #64	; 0x40
   82f72:	3140      	adds	r1, #64	; 0x40
   82f74:	3a40      	subs	r2, #64	; 0x40
   82f76:	d2db      	bcs.n	82f30 <memcpy+0x10>
   82f78:	3230      	adds	r2, #48	; 0x30
   82f7a:	d30b      	bcc.n	82f94 <memcpy+0x74>
   82f7c:	680b      	ldr	r3, [r1, #0]
   82f7e:	6003      	str	r3, [r0, #0]
   82f80:	684b      	ldr	r3, [r1, #4]
   82f82:	6043      	str	r3, [r0, #4]
   82f84:	688b      	ldr	r3, [r1, #8]
   82f86:	6083      	str	r3, [r0, #8]
   82f88:	68cb      	ldr	r3, [r1, #12]
   82f8a:	60c3      	str	r3, [r0, #12]
   82f8c:	3010      	adds	r0, #16
   82f8e:	3110      	adds	r1, #16
   82f90:	3a10      	subs	r2, #16
   82f92:	d2f3      	bcs.n	82f7c <memcpy+0x5c>
   82f94:	320c      	adds	r2, #12
   82f96:	d305      	bcc.n	82fa4 <memcpy+0x84>
   82f98:	f851 3b04 	ldr.w	r3, [r1], #4
   82f9c:	f840 3b04 	str.w	r3, [r0], #4
   82fa0:	3a04      	subs	r2, #4
   82fa2:	d2f9      	bcs.n	82f98 <memcpy+0x78>
   82fa4:	3204      	adds	r2, #4
   82fa6:	d008      	beq.n	82fba <memcpy+0x9a>
   82fa8:	07d2      	lsls	r2, r2, #31
   82faa:	bf1c      	itt	ne
   82fac:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82fb0:	f800 3b01 	strbne.w	r3, [r0], #1
   82fb4:	d301      	bcc.n	82fba <memcpy+0x9a>
   82fb6:	880b      	ldrh	r3, [r1, #0]
   82fb8:	8003      	strh	r3, [r0, #0]
   82fba:	4660      	mov	r0, ip
   82fbc:	4770      	bx	lr
   82fbe:	bf00      	nop
   82fc0:	2a08      	cmp	r2, #8
   82fc2:	d313      	bcc.n	82fec <memcpy+0xcc>
   82fc4:	078b      	lsls	r3, r1, #30
   82fc6:	d0b1      	beq.n	82f2c <memcpy+0xc>
   82fc8:	f010 0303 	ands.w	r3, r0, #3
   82fcc:	d0ae      	beq.n	82f2c <memcpy+0xc>
   82fce:	f1c3 0304 	rsb	r3, r3, #4
   82fd2:	1ad2      	subs	r2, r2, r3
   82fd4:	07db      	lsls	r3, r3, #31
   82fd6:	bf1c      	itt	ne
   82fd8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82fdc:	f800 3b01 	strbne.w	r3, [r0], #1
   82fe0:	d3a4      	bcc.n	82f2c <memcpy+0xc>
   82fe2:	f831 3b02 	ldrh.w	r3, [r1], #2
   82fe6:	f820 3b02 	strh.w	r3, [r0], #2
   82fea:	e79f      	b.n	82f2c <memcpy+0xc>
   82fec:	3a04      	subs	r2, #4
   82fee:	d3d9      	bcc.n	82fa4 <memcpy+0x84>
   82ff0:	3a01      	subs	r2, #1
   82ff2:	f811 3b01 	ldrb.w	r3, [r1], #1
   82ff6:	f800 3b01 	strb.w	r3, [r0], #1
   82ffa:	d2f9      	bcs.n	82ff0 <memcpy+0xd0>
   82ffc:	780b      	ldrb	r3, [r1, #0]
   82ffe:	7003      	strb	r3, [r0, #0]
   83000:	784b      	ldrb	r3, [r1, #1]
   83002:	7043      	strb	r3, [r0, #1]
   83004:	788b      	ldrb	r3, [r1, #2]
   83006:	7083      	strb	r3, [r0, #2]
   83008:	4660      	mov	r0, ip
   8300a:	4770      	bx	lr

0008300c <memset>:
   8300c:	b4f0      	push	{r4, r5, r6, r7}
   8300e:	0784      	lsls	r4, r0, #30
   83010:	d043      	beq.n	8309a <memset+0x8e>
   83012:	1e54      	subs	r4, r2, #1
   83014:	2a00      	cmp	r2, #0
   83016:	d03e      	beq.n	83096 <memset+0x8a>
   83018:	b2cd      	uxtb	r5, r1
   8301a:	4603      	mov	r3, r0
   8301c:	e003      	b.n	83026 <memset+0x1a>
   8301e:	1e62      	subs	r2, r4, #1
   83020:	2c00      	cmp	r4, #0
   83022:	d038      	beq.n	83096 <memset+0x8a>
   83024:	4614      	mov	r4, r2
   83026:	f803 5b01 	strb.w	r5, [r3], #1
   8302a:	079a      	lsls	r2, r3, #30
   8302c:	d1f7      	bne.n	8301e <memset+0x12>
   8302e:	2c03      	cmp	r4, #3
   83030:	d92a      	bls.n	83088 <memset+0x7c>
   83032:	b2cd      	uxtb	r5, r1
   83034:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83038:	2c0f      	cmp	r4, #15
   8303a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8303e:	d915      	bls.n	8306c <memset+0x60>
   83040:	f1a4 0710 	sub.w	r7, r4, #16
   83044:	093f      	lsrs	r7, r7, #4
   83046:	f103 0610 	add.w	r6, r3, #16
   8304a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   8304e:	461a      	mov	r2, r3
   83050:	6015      	str	r5, [r2, #0]
   83052:	6055      	str	r5, [r2, #4]
   83054:	6095      	str	r5, [r2, #8]
   83056:	60d5      	str	r5, [r2, #12]
   83058:	3210      	adds	r2, #16
   8305a:	42b2      	cmp	r2, r6
   8305c:	d1f8      	bne.n	83050 <memset+0x44>
   8305e:	f004 040f 	and.w	r4, r4, #15
   83062:	3701      	adds	r7, #1
   83064:	2c03      	cmp	r4, #3
   83066:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   8306a:	d90d      	bls.n	83088 <memset+0x7c>
   8306c:	461e      	mov	r6, r3
   8306e:	4622      	mov	r2, r4
   83070:	3a04      	subs	r2, #4
   83072:	2a03      	cmp	r2, #3
   83074:	f846 5b04 	str.w	r5, [r6], #4
   83078:	d8fa      	bhi.n	83070 <memset+0x64>
   8307a:	1f22      	subs	r2, r4, #4
   8307c:	f022 0203 	bic.w	r2, r2, #3
   83080:	3204      	adds	r2, #4
   83082:	4413      	add	r3, r2
   83084:	f004 0403 	and.w	r4, r4, #3
   83088:	b12c      	cbz	r4, 83096 <memset+0x8a>
   8308a:	b2c9      	uxtb	r1, r1
   8308c:	441c      	add	r4, r3
   8308e:	f803 1b01 	strb.w	r1, [r3], #1
   83092:	42a3      	cmp	r3, r4
   83094:	d1fb      	bne.n	8308e <memset+0x82>
   83096:	bcf0      	pop	{r4, r5, r6, r7}
   83098:	4770      	bx	lr
   8309a:	4614      	mov	r4, r2
   8309c:	4603      	mov	r3, r0
   8309e:	e7c6      	b.n	8302e <memset+0x22>

000830a0 <_puts_r>:
   830a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   830a2:	4604      	mov	r4, r0
   830a4:	b089      	sub	sp, #36	; 0x24
   830a6:	4608      	mov	r0, r1
   830a8:	460d      	mov	r5, r1
   830aa:	f000 f8b9 	bl	83220 <strlen>
   830ae:	68a3      	ldr	r3, [r4, #8]
   830b0:	2102      	movs	r1, #2
   830b2:	899a      	ldrh	r2, [r3, #12]
   830b4:	f8df e044 	ldr.w	lr, [pc, #68]	; 830fc <_puts_r+0x5c>
   830b8:	f100 0c01 	add.w	ip, r0, #1
   830bc:	2701      	movs	r7, #1
   830be:	ae04      	add	r6, sp, #16
   830c0:	9102      	str	r1, [sp, #8]
   830c2:	0491      	lsls	r1, r2, #18
   830c4:	9504      	str	r5, [sp, #16]
   830c6:	9005      	str	r0, [sp, #20]
   830c8:	f8cd c00c 	str.w	ip, [sp, #12]
   830cc:	f8cd e018 	str.w	lr, [sp, #24]
   830d0:	9707      	str	r7, [sp, #28]
   830d2:	9601      	str	r6, [sp, #4]
   830d4:	d406      	bmi.n	830e4 <_puts_r+0x44>
   830d6:	6e59      	ldr	r1, [r3, #100]	; 0x64
   830d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   830dc:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   830e0:	819a      	strh	r2, [r3, #12]
   830e2:	6659      	str	r1, [r3, #100]	; 0x64
   830e4:	4620      	mov	r0, r4
   830e6:	4619      	mov	r1, r3
   830e8:	aa01      	add	r2, sp, #4
   830ea:	f000 fbdd 	bl	838a8 <__sfvwrite_r>
   830ee:	2800      	cmp	r0, #0
   830f0:	bf0c      	ite	eq
   830f2:	200a      	moveq	r0, #10
   830f4:	f04f 30ff 	movne.w	r0, #4294967295
   830f8:	b009      	add	sp, #36	; 0x24
   830fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   830fc:	00084a54 	.word	0x00084a54

00083100 <puts>:
   83100:	4b02      	ldr	r3, [pc, #8]	; (8310c <puts+0xc>)
   83102:	4601      	mov	r1, r0
   83104:	6818      	ldr	r0, [r3, #0]
   83106:	f7ff bfcb 	b.w	830a0 <_puts_r>
   8310a:	bf00      	nop
   8310c:	20070578 	.word	0x20070578

00083110 <setbuf>:
   83110:	2900      	cmp	r1, #0
   83112:	bf0c      	ite	eq
   83114:	2202      	moveq	r2, #2
   83116:	2200      	movne	r2, #0
   83118:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8311c:	f000 b800 	b.w	83120 <setvbuf>

00083120 <setvbuf>:
   83120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83124:	4d3c      	ldr	r5, [pc, #240]	; (83218 <setvbuf+0xf8>)
   83126:	4604      	mov	r4, r0
   83128:	682d      	ldr	r5, [r5, #0]
   8312a:	4688      	mov	r8, r1
   8312c:	4616      	mov	r6, r2
   8312e:	461f      	mov	r7, r3
   83130:	b115      	cbz	r5, 83138 <setvbuf+0x18>
   83132:	6bab      	ldr	r3, [r5, #56]	; 0x38
   83134:	2b00      	cmp	r3, #0
   83136:	d04f      	beq.n	831d8 <setvbuf+0xb8>
   83138:	2e02      	cmp	r6, #2
   8313a:	d830      	bhi.n	8319e <setvbuf+0x7e>
   8313c:	2f00      	cmp	r7, #0
   8313e:	db2e      	blt.n	8319e <setvbuf+0x7e>
   83140:	4628      	mov	r0, r5
   83142:	4621      	mov	r1, r4
   83144:	f000 f9e4 	bl	83510 <_fflush_r>
   83148:	89a3      	ldrh	r3, [r4, #12]
   8314a:	2200      	movs	r2, #0
   8314c:	6062      	str	r2, [r4, #4]
   8314e:	61a2      	str	r2, [r4, #24]
   83150:	061a      	lsls	r2, r3, #24
   83152:	d428      	bmi.n	831a6 <setvbuf+0x86>
   83154:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   83158:	b29b      	uxth	r3, r3
   8315a:	2e02      	cmp	r6, #2
   8315c:	81a3      	strh	r3, [r4, #12]
   8315e:	d02d      	beq.n	831bc <setvbuf+0x9c>
   83160:	f1b8 0f00 	cmp.w	r8, #0
   83164:	d03c      	beq.n	831e0 <setvbuf+0xc0>
   83166:	2e01      	cmp	r6, #1
   83168:	d013      	beq.n	83192 <setvbuf+0x72>
   8316a:	b29b      	uxth	r3, r3
   8316c:	f003 0008 	and.w	r0, r3, #8
   83170:	4a2a      	ldr	r2, [pc, #168]	; (8321c <setvbuf+0xfc>)
   83172:	b280      	uxth	r0, r0
   83174:	63ea      	str	r2, [r5, #60]	; 0x3c
   83176:	f8c4 8000 	str.w	r8, [r4]
   8317a:	f8c4 8010 	str.w	r8, [r4, #16]
   8317e:	6167      	str	r7, [r4, #20]
   83180:	b178      	cbz	r0, 831a2 <setvbuf+0x82>
   83182:	f013 0f03 	tst.w	r3, #3
   83186:	bf18      	it	ne
   83188:	2700      	movne	r7, #0
   8318a:	60a7      	str	r7, [r4, #8]
   8318c:	2000      	movs	r0, #0
   8318e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83192:	f043 0301 	orr.w	r3, r3, #1
   83196:	427a      	negs	r2, r7
   83198:	81a3      	strh	r3, [r4, #12]
   8319a:	61a2      	str	r2, [r4, #24]
   8319c:	e7e5      	b.n	8316a <setvbuf+0x4a>
   8319e:	f04f 30ff 	mov.w	r0, #4294967295
   831a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   831a6:	4628      	mov	r0, r5
   831a8:	6921      	ldr	r1, [r4, #16]
   831aa:	f000 fab1 	bl	83710 <_free_r>
   831ae:	89a3      	ldrh	r3, [r4, #12]
   831b0:	2e02      	cmp	r6, #2
   831b2:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   831b6:	b29b      	uxth	r3, r3
   831b8:	81a3      	strh	r3, [r4, #12]
   831ba:	d1d1      	bne.n	83160 <setvbuf+0x40>
   831bc:	2000      	movs	r0, #0
   831be:	f104 0243 	add.w	r2, r4, #67	; 0x43
   831c2:	f043 0302 	orr.w	r3, r3, #2
   831c6:	2500      	movs	r5, #0
   831c8:	2101      	movs	r1, #1
   831ca:	81a3      	strh	r3, [r4, #12]
   831cc:	60a5      	str	r5, [r4, #8]
   831ce:	6022      	str	r2, [r4, #0]
   831d0:	6122      	str	r2, [r4, #16]
   831d2:	6161      	str	r1, [r4, #20]
   831d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   831d8:	4628      	mov	r0, r5
   831da:	f000 f9b5 	bl	83548 <__sinit>
   831de:	e7ab      	b.n	83138 <setvbuf+0x18>
   831e0:	2f00      	cmp	r7, #0
   831e2:	bf08      	it	eq
   831e4:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   831e8:	4638      	mov	r0, r7
   831ea:	f000 fd7d 	bl	83ce8 <malloc>
   831ee:	4680      	mov	r8, r0
   831f0:	b128      	cbz	r0, 831fe <setvbuf+0xde>
   831f2:	89a3      	ldrh	r3, [r4, #12]
   831f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   831f8:	b29b      	uxth	r3, r3
   831fa:	81a3      	strh	r3, [r4, #12]
   831fc:	e7b3      	b.n	83166 <setvbuf+0x46>
   831fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
   83202:	f000 fd71 	bl	83ce8 <malloc>
   83206:	4680      	mov	r8, r0
   83208:	b918      	cbnz	r0, 83212 <setvbuf+0xf2>
   8320a:	89a3      	ldrh	r3, [r4, #12]
   8320c:	f04f 30ff 	mov.w	r0, #4294967295
   83210:	e7d5      	b.n	831be <setvbuf+0x9e>
   83212:	f44f 6780 	mov.w	r7, #1024	; 0x400
   83216:	e7ec      	b.n	831f2 <setvbuf+0xd2>
   83218:	20070578 	.word	0x20070578
   8321c:	0008353d 	.word	0x0008353d

00083220 <strlen>:
   83220:	f020 0103 	bic.w	r1, r0, #3
   83224:	f010 0003 	ands.w	r0, r0, #3
   83228:	f1c0 0000 	rsb	r0, r0, #0
   8322c:	f851 3b04 	ldr.w	r3, [r1], #4
   83230:	f100 0c04 	add.w	ip, r0, #4
   83234:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83238:	f06f 0200 	mvn.w	r2, #0
   8323c:	bf1c      	itt	ne
   8323e:	fa22 f20c 	lsrne.w	r2, r2, ip
   83242:	4313      	orrne	r3, r2
   83244:	f04f 0c01 	mov.w	ip, #1
   83248:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8324c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83250:	eba3 020c 	sub.w	r2, r3, ip
   83254:	ea22 0203 	bic.w	r2, r2, r3
   83258:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8325c:	bf04      	itt	eq
   8325e:	f851 3b04 	ldreq.w	r3, [r1], #4
   83262:	3004      	addeq	r0, #4
   83264:	d0f4      	beq.n	83250 <strlen+0x30>
   83266:	f013 0fff 	tst.w	r3, #255	; 0xff
   8326a:	bf1f      	itttt	ne
   8326c:	3001      	addne	r0, #1
   8326e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   83272:	3001      	addne	r0, #1
   83274:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   83278:	bf18      	it	ne
   8327a:	3001      	addne	r0, #1
   8327c:	4770      	bx	lr
   8327e:	bf00      	nop

00083280 <strncpy>:
   83280:	ea40 0301 	orr.w	r3, r0, r1
   83284:	079b      	lsls	r3, r3, #30
   83286:	b470      	push	{r4, r5, r6}
   83288:	d12a      	bne.n	832e0 <strncpy+0x60>
   8328a:	2a03      	cmp	r2, #3
   8328c:	d928      	bls.n	832e0 <strncpy+0x60>
   8328e:	460c      	mov	r4, r1
   83290:	4603      	mov	r3, r0
   83292:	4621      	mov	r1, r4
   83294:	f854 5b04 	ldr.w	r5, [r4], #4
   83298:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   8329c:	ea26 0605 	bic.w	r6, r6, r5
   832a0:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   832a4:	d105      	bne.n	832b2 <strncpy+0x32>
   832a6:	3a04      	subs	r2, #4
   832a8:	2a03      	cmp	r2, #3
   832aa:	f843 5b04 	str.w	r5, [r3], #4
   832ae:	4621      	mov	r1, r4
   832b0:	d8ef      	bhi.n	83292 <strncpy+0x12>
   832b2:	b19a      	cbz	r2, 832dc <strncpy+0x5c>
   832b4:	780c      	ldrb	r4, [r1, #0]
   832b6:	3a01      	subs	r2, #1
   832b8:	701c      	strb	r4, [r3, #0]
   832ba:	3301      	adds	r3, #1
   832bc:	b13c      	cbz	r4, 832ce <strncpy+0x4e>
   832be:	b16a      	cbz	r2, 832dc <strncpy+0x5c>
   832c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   832c4:	3a01      	subs	r2, #1
   832c6:	f803 4b01 	strb.w	r4, [r3], #1
   832ca:	2c00      	cmp	r4, #0
   832cc:	d1f7      	bne.n	832be <strncpy+0x3e>
   832ce:	b12a      	cbz	r2, 832dc <strncpy+0x5c>
   832d0:	441a      	add	r2, r3
   832d2:	2100      	movs	r1, #0
   832d4:	f803 1b01 	strb.w	r1, [r3], #1
   832d8:	4293      	cmp	r3, r2
   832da:	d1fb      	bne.n	832d4 <strncpy+0x54>
   832dc:	bc70      	pop	{r4, r5, r6}
   832de:	4770      	bx	lr
   832e0:	4603      	mov	r3, r0
   832e2:	e7e6      	b.n	832b2 <strncpy+0x32>

000832e4 <__swsetup_r>:
   832e4:	4b2f      	ldr	r3, [pc, #188]	; (833a4 <__swsetup_r+0xc0>)
   832e6:	b570      	push	{r4, r5, r6, lr}
   832e8:	4606      	mov	r6, r0
   832ea:	6818      	ldr	r0, [r3, #0]
   832ec:	460c      	mov	r4, r1
   832ee:	b110      	cbz	r0, 832f6 <__swsetup_r+0x12>
   832f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   832f2:	2a00      	cmp	r2, #0
   832f4:	d036      	beq.n	83364 <__swsetup_r+0x80>
   832f6:	89a5      	ldrh	r5, [r4, #12]
   832f8:	b2ab      	uxth	r3, r5
   832fa:	0719      	lsls	r1, r3, #28
   832fc:	d50c      	bpl.n	83318 <__swsetup_r+0x34>
   832fe:	6922      	ldr	r2, [r4, #16]
   83300:	b1aa      	cbz	r2, 8332e <__swsetup_r+0x4a>
   83302:	f013 0101 	ands.w	r1, r3, #1
   83306:	d01e      	beq.n	83346 <__swsetup_r+0x62>
   83308:	6963      	ldr	r3, [r4, #20]
   8330a:	2100      	movs	r1, #0
   8330c:	425b      	negs	r3, r3
   8330e:	61a3      	str	r3, [r4, #24]
   83310:	60a1      	str	r1, [r4, #8]
   83312:	b1f2      	cbz	r2, 83352 <__swsetup_r+0x6e>
   83314:	2000      	movs	r0, #0
   83316:	bd70      	pop	{r4, r5, r6, pc}
   83318:	06da      	lsls	r2, r3, #27
   8331a:	d53a      	bpl.n	83392 <__swsetup_r+0xae>
   8331c:	075b      	lsls	r3, r3, #29
   8331e:	d424      	bmi.n	8336a <__swsetup_r+0x86>
   83320:	6922      	ldr	r2, [r4, #16]
   83322:	f045 0308 	orr.w	r3, r5, #8
   83326:	81a3      	strh	r3, [r4, #12]
   83328:	b29b      	uxth	r3, r3
   8332a:	2a00      	cmp	r2, #0
   8332c:	d1e9      	bne.n	83302 <__swsetup_r+0x1e>
   8332e:	f403 7120 	and.w	r1, r3, #640	; 0x280
   83332:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   83336:	d0e4      	beq.n	83302 <__swsetup_r+0x1e>
   83338:	4630      	mov	r0, r6
   8333a:	4621      	mov	r1, r4
   8333c:	f000 fc64 	bl	83c08 <__smakebuf_r>
   83340:	89a3      	ldrh	r3, [r4, #12]
   83342:	6922      	ldr	r2, [r4, #16]
   83344:	e7dd      	b.n	83302 <__swsetup_r+0x1e>
   83346:	0798      	lsls	r0, r3, #30
   83348:	bf58      	it	pl
   8334a:	6961      	ldrpl	r1, [r4, #20]
   8334c:	60a1      	str	r1, [r4, #8]
   8334e:	2a00      	cmp	r2, #0
   83350:	d1e0      	bne.n	83314 <__swsetup_r+0x30>
   83352:	89a3      	ldrh	r3, [r4, #12]
   83354:	061a      	lsls	r2, r3, #24
   83356:	d5dd      	bpl.n	83314 <__swsetup_r+0x30>
   83358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8335c:	81a3      	strh	r3, [r4, #12]
   8335e:	f04f 30ff 	mov.w	r0, #4294967295
   83362:	bd70      	pop	{r4, r5, r6, pc}
   83364:	f000 f8f0 	bl	83548 <__sinit>
   83368:	e7c5      	b.n	832f6 <__swsetup_r+0x12>
   8336a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8336c:	b149      	cbz	r1, 83382 <__swsetup_r+0x9e>
   8336e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83372:	4299      	cmp	r1, r3
   83374:	d003      	beq.n	8337e <__swsetup_r+0x9a>
   83376:	4630      	mov	r0, r6
   83378:	f000 f9ca 	bl	83710 <_free_r>
   8337c:	89a5      	ldrh	r5, [r4, #12]
   8337e:	2300      	movs	r3, #0
   83380:	6323      	str	r3, [r4, #48]	; 0x30
   83382:	6922      	ldr	r2, [r4, #16]
   83384:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   83388:	2100      	movs	r1, #0
   8338a:	b2ad      	uxth	r5, r5
   8338c:	6022      	str	r2, [r4, #0]
   8338e:	6061      	str	r1, [r4, #4]
   83390:	e7c7      	b.n	83322 <__swsetup_r+0x3e>
   83392:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   83396:	2309      	movs	r3, #9
   83398:	6033      	str	r3, [r6, #0]
   8339a:	f04f 30ff 	mov.w	r0, #4294967295
   8339e:	81a5      	strh	r5, [r4, #12]
   833a0:	bd70      	pop	{r4, r5, r6, pc}
   833a2:	bf00      	nop
   833a4:	20070578 	.word	0x20070578

000833a8 <register_fini>:
   833a8:	4b02      	ldr	r3, [pc, #8]	; (833b4 <register_fini+0xc>)
   833aa:	b113      	cbz	r3, 833b2 <register_fini+0xa>
   833ac:	4802      	ldr	r0, [pc, #8]	; (833b8 <register_fini+0x10>)
   833ae:	f000 b805 	b.w	833bc <atexit>
   833b2:	4770      	bx	lr
   833b4:	00000000 	.word	0x00000000
   833b8:	00083645 	.word	0x00083645

000833bc <atexit>:
   833bc:	4601      	mov	r1, r0
   833be:	2000      	movs	r0, #0
   833c0:	4602      	mov	r2, r0
   833c2:	4603      	mov	r3, r0
   833c4:	f001 ba30 	b.w	84828 <__register_exitproc>

000833c8 <__sflush_r>:
   833c8:	898b      	ldrh	r3, [r1, #12]
   833ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   833ce:	b29a      	uxth	r2, r3
   833d0:	460d      	mov	r5, r1
   833d2:	0711      	lsls	r1, r2, #28
   833d4:	4680      	mov	r8, r0
   833d6:	d43c      	bmi.n	83452 <__sflush_r+0x8a>
   833d8:	686a      	ldr	r2, [r5, #4]
   833da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   833de:	2a00      	cmp	r2, #0
   833e0:	81ab      	strh	r3, [r5, #12]
   833e2:	dd59      	ble.n	83498 <__sflush_r+0xd0>
   833e4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   833e6:	2c00      	cmp	r4, #0
   833e8:	d04b      	beq.n	83482 <__sflush_r+0xba>
   833ea:	b29b      	uxth	r3, r3
   833ec:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   833f0:	2100      	movs	r1, #0
   833f2:	b292      	uxth	r2, r2
   833f4:	f8d8 6000 	ldr.w	r6, [r8]
   833f8:	f8c8 1000 	str.w	r1, [r8]
   833fc:	2a00      	cmp	r2, #0
   833fe:	d04f      	beq.n	834a0 <__sflush_r+0xd8>
   83400:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   83402:	075f      	lsls	r7, r3, #29
   83404:	d505      	bpl.n	83412 <__sflush_r+0x4a>
   83406:	6869      	ldr	r1, [r5, #4]
   83408:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8340a:	1a52      	subs	r2, r2, r1
   8340c:	b10b      	cbz	r3, 83412 <__sflush_r+0x4a>
   8340e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   83410:	1ad2      	subs	r2, r2, r3
   83412:	4640      	mov	r0, r8
   83414:	69e9      	ldr	r1, [r5, #28]
   83416:	2300      	movs	r3, #0
   83418:	47a0      	blx	r4
   8341a:	1c44      	adds	r4, r0, #1
   8341c:	d04a      	beq.n	834b4 <__sflush_r+0xec>
   8341e:	89ab      	ldrh	r3, [r5, #12]
   83420:	692a      	ldr	r2, [r5, #16]
   83422:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83426:	b29b      	uxth	r3, r3
   83428:	2100      	movs	r1, #0
   8342a:	602a      	str	r2, [r5, #0]
   8342c:	04da      	lsls	r2, r3, #19
   8342e:	81ab      	strh	r3, [r5, #12]
   83430:	6069      	str	r1, [r5, #4]
   83432:	d44c      	bmi.n	834ce <__sflush_r+0x106>
   83434:	6b29      	ldr	r1, [r5, #48]	; 0x30
   83436:	f8c8 6000 	str.w	r6, [r8]
   8343a:	b311      	cbz	r1, 83482 <__sflush_r+0xba>
   8343c:	f105 0340 	add.w	r3, r5, #64	; 0x40
   83440:	4299      	cmp	r1, r3
   83442:	d002      	beq.n	8344a <__sflush_r+0x82>
   83444:	4640      	mov	r0, r8
   83446:	f000 f963 	bl	83710 <_free_r>
   8344a:	2000      	movs	r0, #0
   8344c:	6328      	str	r0, [r5, #48]	; 0x30
   8344e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83452:	692e      	ldr	r6, [r5, #16]
   83454:	b1ae      	cbz	r6, 83482 <__sflush_r+0xba>
   83456:	0791      	lsls	r1, r2, #30
   83458:	682c      	ldr	r4, [r5, #0]
   8345a:	bf0c      	ite	eq
   8345c:	696b      	ldreq	r3, [r5, #20]
   8345e:	2300      	movne	r3, #0
   83460:	602e      	str	r6, [r5, #0]
   83462:	1ba4      	subs	r4, r4, r6
   83464:	60ab      	str	r3, [r5, #8]
   83466:	e00a      	b.n	8347e <__sflush_r+0xb6>
   83468:	4632      	mov	r2, r6
   8346a:	4623      	mov	r3, r4
   8346c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8346e:	4640      	mov	r0, r8
   83470:	69e9      	ldr	r1, [r5, #28]
   83472:	47b8      	blx	r7
   83474:	2800      	cmp	r0, #0
   83476:	ebc0 0404 	rsb	r4, r0, r4
   8347a:	4406      	add	r6, r0
   8347c:	dd04      	ble.n	83488 <__sflush_r+0xc0>
   8347e:	2c00      	cmp	r4, #0
   83480:	dcf2      	bgt.n	83468 <__sflush_r+0xa0>
   83482:	2000      	movs	r0, #0
   83484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83488:	89ab      	ldrh	r3, [r5, #12]
   8348a:	f04f 30ff 	mov.w	r0, #4294967295
   8348e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83492:	81ab      	strh	r3, [r5, #12]
   83494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83498:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8349a:	2a00      	cmp	r2, #0
   8349c:	dca2      	bgt.n	833e4 <__sflush_r+0x1c>
   8349e:	e7f0      	b.n	83482 <__sflush_r+0xba>
   834a0:	2301      	movs	r3, #1
   834a2:	4640      	mov	r0, r8
   834a4:	69e9      	ldr	r1, [r5, #28]
   834a6:	47a0      	blx	r4
   834a8:	1c43      	adds	r3, r0, #1
   834aa:	4602      	mov	r2, r0
   834ac:	d01e      	beq.n	834ec <__sflush_r+0x124>
   834ae:	89ab      	ldrh	r3, [r5, #12]
   834b0:	6aac      	ldr	r4, [r5, #40]	; 0x28
   834b2:	e7a6      	b.n	83402 <__sflush_r+0x3a>
   834b4:	f8d8 3000 	ldr.w	r3, [r8]
   834b8:	b95b      	cbnz	r3, 834d2 <__sflush_r+0x10a>
   834ba:	89aa      	ldrh	r2, [r5, #12]
   834bc:	6929      	ldr	r1, [r5, #16]
   834be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   834c2:	b292      	uxth	r2, r2
   834c4:	606b      	str	r3, [r5, #4]
   834c6:	04d3      	lsls	r3, r2, #19
   834c8:	81aa      	strh	r2, [r5, #12]
   834ca:	6029      	str	r1, [r5, #0]
   834cc:	d5b2      	bpl.n	83434 <__sflush_r+0x6c>
   834ce:	6528      	str	r0, [r5, #80]	; 0x50
   834d0:	e7b0      	b.n	83434 <__sflush_r+0x6c>
   834d2:	2b1d      	cmp	r3, #29
   834d4:	d001      	beq.n	834da <__sflush_r+0x112>
   834d6:	2b16      	cmp	r3, #22
   834d8:	d113      	bne.n	83502 <__sflush_r+0x13a>
   834da:	89a9      	ldrh	r1, [r5, #12]
   834dc:	692b      	ldr	r3, [r5, #16]
   834de:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   834e2:	2200      	movs	r2, #0
   834e4:	81a9      	strh	r1, [r5, #12]
   834e6:	602b      	str	r3, [r5, #0]
   834e8:	606a      	str	r2, [r5, #4]
   834ea:	e7a3      	b.n	83434 <__sflush_r+0x6c>
   834ec:	f8d8 3000 	ldr.w	r3, [r8]
   834f0:	2b00      	cmp	r3, #0
   834f2:	d0dc      	beq.n	834ae <__sflush_r+0xe6>
   834f4:	2b1d      	cmp	r3, #29
   834f6:	d001      	beq.n	834fc <__sflush_r+0x134>
   834f8:	2b16      	cmp	r3, #22
   834fa:	d1c5      	bne.n	83488 <__sflush_r+0xc0>
   834fc:	f8c8 6000 	str.w	r6, [r8]
   83500:	e7bf      	b.n	83482 <__sflush_r+0xba>
   83502:	89ab      	ldrh	r3, [r5, #12]
   83504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83508:	81ab      	strh	r3, [r5, #12]
   8350a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8350e:	bf00      	nop

00083510 <_fflush_r>:
   83510:	b510      	push	{r4, lr}
   83512:	4604      	mov	r4, r0
   83514:	b082      	sub	sp, #8
   83516:	b108      	cbz	r0, 8351c <_fflush_r+0xc>
   83518:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8351a:	b153      	cbz	r3, 83532 <_fflush_r+0x22>
   8351c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   83520:	b908      	cbnz	r0, 83526 <_fflush_r+0x16>
   83522:	b002      	add	sp, #8
   83524:	bd10      	pop	{r4, pc}
   83526:	4620      	mov	r0, r4
   83528:	b002      	add	sp, #8
   8352a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8352e:	f7ff bf4b 	b.w	833c8 <__sflush_r>
   83532:	9101      	str	r1, [sp, #4]
   83534:	f000 f808 	bl	83548 <__sinit>
   83538:	9901      	ldr	r1, [sp, #4]
   8353a:	e7ef      	b.n	8351c <_fflush_r+0xc>

0008353c <_cleanup_r>:
   8353c:	4901      	ldr	r1, [pc, #4]	; (83544 <_cleanup_r+0x8>)
   8353e:	f000 bb3f 	b.w	83bc0 <_fwalk>
   83542:	bf00      	nop
   83544:	00084975 	.word	0x00084975

00083548 <__sinit>:
   83548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8354c:	6b84      	ldr	r4, [r0, #56]	; 0x38
   8354e:	b083      	sub	sp, #12
   83550:	4607      	mov	r7, r0
   83552:	2c00      	cmp	r4, #0
   83554:	d165      	bne.n	83622 <__sinit+0xda>
   83556:	687d      	ldr	r5, [r7, #4]
   83558:	4833      	ldr	r0, [pc, #204]	; (83628 <__sinit+0xe0>)
   8355a:	2304      	movs	r3, #4
   8355c:	2103      	movs	r1, #3
   8355e:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   83562:	63f8      	str	r0, [r7, #60]	; 0x3c
   83564:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   83568:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   8356c:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   83570:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83574:	81ab      	strh	r3, [r5, #12]
   83576:	602c      	str	r4, [r5, #0]
   83578:	606c      	str	r4, [r5, #4]
   8357a:	60ac      	str	r4, [r5, #8]
   8357c:	666c      	str	r4, [r5, #100]	; 0x64
   8357e:	81ec      	strh	r4, [r5, #14]
   83580:	612c      	str	r4, [r5, #16]
   83582:	616c      	str	r4, [r5, #20]
   83584:	61ac      	str	r4, [r5, #24]
   83586:	4621      	mov	r1, r4
   83588:	2208      	movs	r2, #8
   8358a:	f7ff fd3f 	bl	8300c <memset>
   8358e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8362c <__sinit+0xe4>
   83592:	68be      	ldr	r6, [r7, #8]
   83594:	f8df a098 	ldr.w	sl, [pc, #152]	; 83630 <__sinit+0xe8>
   83598:	f8df 9098 	ldr.w	r9, [pc, #152]	; 83634 <__sinit+0xec>
   8359c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 83638 <__sinit+0xf0>
   835a0:	2301      	movs	r3, #1
   835a2:	2209      	movs	r2, #9
   835a4:	61ed      	str	r5, [r5, #28]
   835a6:	f8c5 b020 	str.w	fp, [r5, #32]
   835aa:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   835ae:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   835b2:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   835b6:	4621      	mov	r1, r4
   835b8:	81f3      	strh	r3, [r6, #14]
   835ba:	81b2      	strh	r2, [r6, #12]
   835bc:	6034      	str	r4, [r6, #0]
   835be:	6074      	str	r4, [r6, #4]
   835c0:	60b4      	str	r4, [r6, #8]
   835c2:	6674      	str	r4, [r6, #100]	; 0x64
   835c4:	6134      	str	r4, [r6, #16]
   835c6:	6174      	str	r4, [r6, #20]
   835c8:	61b4      	str	r4, [r6, #24]
   835ca:	2208      	movs	r2, #8
   835cc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   835d0:	9301      	str	r3, [sp, #4]
   835d2:	f7ff fd1b 	bl	8300c <memset>
   835d6:	68fd      	ldr	r5, [r7, #12]
   835d8:	2012      	movs	r0, #18
   835da:	2202      	movs	r2, #2
   835dc:	61f6      	str	r6, [r6, #28]
   835de:	f8c6 b020 	str.w	fp, [r6, #32]
   835e2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   835e6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   835ea:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   835ee:	4621      	mov	r1, r4
   835f0:	81a8      	strh	r0, [r5, #12]
   835f2:	81ea      	strh	r2, [r5, #14]
   835f4:	602c      	str	r4, [r5, #0]
   835f6:	606c      	str	r4, [r5, #4]
   835f8:	60ac      	str	r4, [r5, #8]
   835fa:	666c      	str	r4, [r5, #100]	; 0x64
   835fc:	612c      	str	r4, [r5, #16]
   835fe:	616c      	str	r4, [r5, #20]
   83600:	61ac      	str	r4, [r5, #24]
   83602:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83606:	2208      	movs	r2, #8
   83608:	f7ff fd00 	bl	8300c <memset>
   8360c:	9b01      	ldr	r3, [sp, #4]
   8360e:	61ed      	str	r5, [r5, #28]
   83610:	f8c5 b020 	str.w	fp, [r5, #32]
   83614:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83618:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8361c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   83620:	63bb      	str	r3, [r7, #56]	; 0x38
   83622:	b003      	add	sp, #12
   83624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83628:	0008353d 	.word	0x0008353d
   8362c:	0008477d 	.word	0x0008477d
   83630:	000847a1 	.word	0x000847a1
   83634:	000847d9 	.word	0x000847d9
   83638:	000847f9 	.word	0x000847f9

0008363c <__sfp_lock_acquire>:
   8363c:	4770      	bx	lr
   8363e:	bf00      	nop

00083640 <__sfp_lock_release>:
   83640:	4770      	bx	lr
   83642:	bf00      	nop

00083644 <__libc_fini_array>:
   83644:	b538      	push	{r3, r4, r5, lr}
   83646:	4d09      	ldr	r5, [pc, #36]	; (8366c <__libc_fini_array+0x28>)
   83648:	4c09      	ldr	r4, [pc, #36]	; (83670 <__libc_fini_array+0x2c>)
   8364a:	1b64      	subs	r4, r4, r5
   8364c:	10a4      	asrs	r4, r4, #2
   8364e:	bf18      	it	ne
   83650:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   83654:	d005      	beq.n	83662 <__libc_fini_array+0x1e>
   83656:	3c01      	subs	r4, #1
   83658:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8365c:	4798      	blx	r3
   8365e:	2c00      	cmp	r4, #0
   83660:	d1f9      	bne.n	83656 <__libc_fini_array+0x12>
   83662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83666:	f001 ba19 	b.w	84a9c <_fini>
   8366a:	bf00      	nop
   8366c:	00084aa8 	.word	0x00084aa8
   83670:	00084aac 	.word	0x00084aac

00083674 <_malloc_trim_r>:
   83674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83676:	4d23      	ldr	r5, [pc, #140]	; (83704 <_malloc_trim_r+0x90>)
   83678:	460f      	mov	r7, r1
   8367a:	4604      	mov	r4, r0
   8367c:	f000 fe88 	bl	84390 <__malloc_lock>
   83680:	68ab      	ldr	r3, [r5, #8]
   83682:	685e      	ldr	r6, [r3, #4]
   83684:	f026 0603 	bic.w	r6, r6, #3
   83688:	1bf1      	subs	r1, r6, r7
   8368a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   8368e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83692:	f021 010f 	bic.w	r1, r1, #15
   83696:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   8369a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   8369e:	db07      	blt.n	836b0 <_malloc_trim_r+0x3c>
   836a0:	4620      	mov	r0, r4
   836a2:	2100      	movs	r1, #0
   836a4:	f001 f858 	bl	84758 <_sbrk_r>
   836a8:	68ab      	ldr	r3, [r5, #8]
   836aa:	4433      	add	r3, r6
   836ac:	4298      	cmp	r0, r3
   836ae:	d004      	beq.n	836ba <_malloc_trim_r+0x46>
   836b0:	4620      	mov	r0, r4
   836b2:	f000 fe6f 	bl	84394 <__malloc_unlock>
   836b6:	2000      	movs	r0, #0
   836b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   836ba:	4620      	mov	r0, r4
   836bc:	4279      	negs	r1, r7
   836be:	f001 f84b 	bl	84758 <_sbrk_r>
   836c2:	3001      	adds	r0, #1
   836c4:	d00d      	beq.n	836e2 <_malloc_trim_r+0x6e>
   836c6:	4b10      	ldr	r3, [pc, #64]	; (83708 <_malloc_trim_r+0x94>)
   836c8:	68aa      	ldr	r2, [r5, #8]
   836ca:	6819      	ldr	r1, [r3, #0]
   836cc:	1bf6      	subs	r6, r6, r7
   836ce:	f046 0601 	orr.w	r6, r6, #1
   836d2:	4620      	mov	r0, r4
   836d4:	1bc9      	subs	r1, r1, r7
   836d6:	6056      	str	r6, [r2, #4]
   836d8:	6019      	str	r1, [r3, #0]
   836da:	f000 fe5b 	bl	84394 <__malloc_unlock>
   836de:	2001      	movs	r0, #1
   836e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   836e2:	4620      	mov	r0, r4
   836e4:	2100      	movs	r1, #0
   836e6:	f001 f837 	bl	84758 <_sbrk_r>
   836ea:	68ab      	ldr	r3, [r5, #8]
   836ec:	1ac2      	subs	r2, r0, r3
   836ee:	2a0f      	cmp	r2, #15
   836f0:	ddde      	ble.n	836b0 <_malloc_trim_r+0x3c>
   836f2:	4d06      	ldr	r5, [pc, #24]	; (8370c <_malloc_trim_r+0x98>)
   836f4:	4904      	ldr	r1, [pc, #16]	; (83708 <_malloc_trim_r+0x94>)
   836f6:	682d      	ldr	r5, [r5, #0]
   836f8:	f042 0201 	orr.w	r2, r2, #1
   836fc:	1b40      	subs	r0, r0, r5
   836fe:	605a      	str	r2, [r3, #4]
   83700:	6008      	str	r0, [r1, #0]
   83702:	e7d5      	b.n	836b0 <_malloc_trim_r+0x3c>
   83704:	2007057c 	.word	0x2007057c
   83708:	20078c84 	.word	0x20078c84
   8370c:	20070988 	.word	0x20070988

00083710 <_free_r>:
   83710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83714:	460d      	mov	r5, r1
   83716:	4606      	mov	r6, r0
   83718:	2900      	cmp	r1, #0
   8371a:	d055      	beq.n	837c8 <_free_r+0xb8>
   8371c:	f000 fe38 	bl	84390 <__malloc_lock>
   83720:	f855 1c04 	ldr.w	r1, [r5, #-4]
   83724:	f8df c170 	ldr.w	ip, [pc, #368]	; 83898 <_free_r+0x188>
   83728:	f1a5 0408 	sub.w	r4, r5, #8
   8372c:	f021 0301 	bic.w	r3, r1, #1
   83730:	18e2      	adds	r2, r4, r3
   83732:	f8dc 0008 	ldr.w	r0, [ip, #8]
   83736:	6857      	ldr	r7, [r2, #4]
   83738:	4290      	cmp	r0, r2
   8373a:	f027 0703 	bic.w	r7, r7, #3
   8373e:	d068      	beq.n	83812 <_free_r+0x102>
   83740:	f011 0101 	ands.w	r1, r1, #1
   83744:	6057      	str	r7, [r2, #4]
   83746:	d032      	beq.n	837ae <_free_r+0x9e>
   83748:	2100      	movs	r1, #0
   8374a:	19d0      	adds	r0, r2, r7
   8374c:	6840      	ldr	r0, [r0, #4]
   8374e:	07c0      	lsls	r0, r0, #31
   83750:	d406      	bmi.n	83760 <_free_r+0x50>
   83752:	443b      	add	r3, r7
   83754:	6890      	ldr	r0, [r2, #8]
   83756:	2900      	cmp	r1, #0
   83758:	d04d      	beq.n	837f6 <_free_r+0xe6>
   8375a:	68d2      	ldr	r2, [r2, #12]
   8375c:	60c2      	str	r2, [r0, #12]
   8375e:	6090      	str	r0, [r2, #8]
   83760:	f043 0201 	orr.w	r2, r3, #1
   83764:	6062      	str	r2, [r4, #4]
   83766:	50e3      	str	r3, [r4, r3]
   83768:	b9e1      	cbnz	r1, 837a4 <_free_r+0x94>
   8376a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8376e:	d32d      	bcc.n	837cc <_free_r+0xbc>
   83770:	0a5a      	lsrs	r2, r3, #9
   83772:	2a04      	cmp	r2, #4
   83774:	d869      	bhi.n	8384a <_free_r+0x13a>
   83776:	0998      	lsrs	r0, r3, #6
   83778:	3038      	adds	r0, #56	; 0x38
   8377a:	0041      	lsls	r1, r0, #1
   8377c:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   83780:	f8dc 2008 	ldr.w	r2, [ip, #8]
   83784:	4944      	ldr	r1, [pc, #272]	; (83898 <_free_r+0x188>)
   83786:	4562      	cmp	r2, ip
   83788:	d065      	beq.n	83856 <_free_r+0x146>
   8378a:	6851      	ldr	r1, [r2, #4]
   8378c:	f021 0103 	bic.w	r1, r1, #3
   83790:	428b      	cmp	r3, r1
   83792:	d202      	bcs.n	8379a <_free_r+0x8a>
   83794:	6892      	ldr	r2, [r2, #8]
   83796:	4594      	cmp	ip, r2
   83798:	d1f7      	bne.n	8378a <_free_r+0x7a>
   8379a:	68d3      	ldr	r3, [r2, #12]
   8379c:	60e3      	str	r3, [r4, #12]
   8379e:	60a2      	str	r2, [r4, #8]
   837a0:	609c      	str	r4, [r3, #8]
   837a2:	60d4      	str	r4, [r2, #12]
   837a4:	4630      	mov	r0, r6
   837a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   837aa:	f000 bdf3 	b.w	84394 <__malloc_unlock>
   837ae:	f855 5c08 	ldr.w	r5, [r5, #-8]
   837b2:	f10c 0808 	add.w	r8, ip, #8
   837b6:	1b64      	subs	r4, r4, r5
   837b8:	68a0      	ldr	r0, [r4, #8]
   837ba:	442b      	add	r3, r5
   837bc:	4540      	cmp	r0, r8
   837be:	d042      	beq.n	83846 <_free_r+0x136>
   837c0:	68e5      	ldr	r5, [r4, #12]
   837c2:	60c5      	str	r5, [r0, #12]
   837c4:	60a8      	str	r0, [r5, #8]
   837c6:	e7c0      	b.n	8374a <_free_r+0x3a>
   837c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   837cc:	08db      	lsrs	r3, r3, #3
   837ce:	109a      	asrs	r2, r3, #2
   837d0:	2001      	movs	r0, #1
   837d2:	4090      	lsls	r0, r2
   837d4:	f8dc 1004 	ldr.w	r1, [ip, #4]
   837d8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   837dc:	689a      	ldr	r2, [r3, #8]
   837de:	4301      	orrs	r1, r0
   837e0:	60a2      	str	r2, [r4, #8]
   837e2:	60e3      	str	r3, [r4, #12]
   837e4:	f8cc 1004 	str.w	r1, [ip, #4]
   837e8:	4630      	mov	r0, r6
   837ea:	609c      	str	r4, [r3, #8]
   837ec:	60d4      	str	r4, [r2, #12]
   837ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   837f2:	f000 bdcf 	b.w	84394 <__malloc_unlock>
   837f6:	4d29      	ldr	r5, [pc, #164]	; (8389c <_free_r+0x18c>)
   837f8:	42a8      	cmp	r0, r5
   837fa:	d1ae      	bne.n	8375a <_free_r+0x4a>
   837fc:	f043 0201 	orr.w	r2, r3, #1
   83800:	f8cc 4014 	str.w	r4, [ip, #20]
   83804:	f8cc 4010 	str.w	r4, [ip, #16]
   83808:	60e0      	str	r0, [r4, #12]
   8380a:	60a0      	str	r0, [r4, #8]
   8380c:	6062      	str	r2, [r4, #4]
   8380e:	50e3      	str	r3, [r4, r3]
   83810:	e7c8      	b.n	837a4 <_free_r+0x94>
   83812:	441f      	add	r7, r3
   83814:	07cb      	lsls	r3, r1, #31
   83816:	d407      	bmi.n	83828 <_free_r+0x118>
   83818:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8381c:	1a64      	subs	r4, r4, r1
   8381e:	68e3      	ldr	r3, [r4, #12]
   83820:	68a2      	ldr	r2, [r4, #8]
   83822:	440f      	add	r7, r1
   83824:	60d3      	str	r3, [r2, #12]
   83826:	609a      	str	r2, [r3, #8]
   83828:	4b1d      	ldr	r3, [pc, #116]	; (838a0 <_free_r+0x190>)
   8382a:	f047 0201 	orr.w	r2, r7, #1
   8382e:	681b      	ldr	r3, [r3, #0]
   83830:	6062      	str	r2, [r4, #4]
   83832:	429f      	cmp	r7, r3
   83834:	f8cc 4008 	str.w	r4, [ip, #8]
   83838:	d3b4      	bcc.n	837a4 <_free_r+0x94>
   8383a:	4b1a      	ldr	r3, [pc, #104]	; (838a4 <_free_r+0x194>)
   8383c:	4630      	mov	r0, r6
   8383e:	6819      	ldr	r1, [r3, #0]
   83840:	f7ff ff18 	bl	83674 <_malloc_trim_r>
   83844:	e7ae      	b.n	837a4 <_free_r+0x94>
   83846:	2101      	movs	r1, #1
   83848:	e77f      	b.n	8374a <_free_r+0x3a>
   8384a:	2a14      	cmp	r2, #20
   8384c:	d80b      	bhi.n	83866 <_free_r+0x156>
   8384e:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   83852:	0041      	lsls	r1, r0, #1
   83854:	e792      	b.n	8377c <_free_r+0x6c>
   83856:	1080      	asrs	r0, r0, #2
   83858:	2501      	movs	r5, #1
   8385a:	4085      	lsls	r5, r0
   8385c:	6848      	ldr	r0, [r1, #4]
   8385e:	4613      	mov	r3, r2
   83860:	4328      	orrs	r0, r5
   83862:	6048      	str	r0, [r1, #4]
   83864:	e79a      	b.n	8379c <_free_r+0x8c>
   83866:	2a54      	cmp	r2, #84	; 0x54
   83868:	d803      	bhi.n	83872 <_free_r+0x162>
   8386a:	0b18      	lsrs	r0, r3, #12
   8386c:	306e      	adds	r0, #110	; 0x6e
   8386e:	0041      	lsls	r1, r0, #1
   83870:	e784      	b.n	8377c <_free_r+0x6c>
   83872:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83876:	d803      	bhi.n	83880 <_free_r+0x170>
   83878:	0bd8      	lsrs	r0, r3, #15
   8387a:	3077      	adds	r0, #119	; 0x77
   8387c:	0041      	lsls	r1, r0, #1
   8387e:	e77d      	b.n	8377c <_free_r+0x6c>
   83880:	f240 5154 	movw	r1, #1364	; 0x554
   83884:	428a      	cmp	r2, r1
   83886:	d803      	bhi.n	83890 <_free_r+0x180>
   83888:	0c98      	lsrs	r0, r3, #18
   8388a:	307c      	adds	r0, #124	; 0x7c
   8388c:	0041      	lsls	r1, r0, #1
   8388e:	e775      	b.n	8377c <_free_r+0x6c>
   83890:	21fc      	movs	r1, #252	; 0xfc
   83892:	207e      	movs	r0, #126	; 0x7e
   83894:	e772      	b.n	8377c <_free_r+0x6c>
   83896:	bf00      	nop
   83898:	2007057c 	.word	0x2007057c
   8389c:	20070584 	.word	0x20070584
   838a0:	20070984 	.word	0x20070984
   838a4:	20078c80 	.word	0x20078c80

000838a8 <__sfvwrite_r>:
   838a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   838ac:	6893      	ldr	r3, [r2, #8]
   838ae:	b083      	sub	sp, #12
   838b0:	4616      	mov	r6, r2
   838b2:	4681      	mov	r9, r0
   838b4:	460c      	mov	r4, r1
   838b6:	b32b      	cbz	r3, 83904 <__sfvwrite_r+0x5c>
   838b8:	898b      	ldrh	r3, [r1, #12]
   838ba:	0719      	lsls	r1, r3, #28
   838bc:	d526      	bpl.n	8390c <__sfvwrite_r+0x64>
   838be:	6922      	ldr	r2, [r4, #16]
   838c0:	b322      	cbz	r2, 8390c <__sfvwrite_r+0x64>
   838c2:	f003 0202 	and.w	r2, r3, #2
   838c6:	b292      	uxth	r2, r2
   838c8:	6835      	ldr	r5, [r6, #0]
   838ca:	2a00      	cmp	r2, #0
   838cc:	d02c      	beq.n	83928 <__sfvwrite_r+0x80>
   838ce:	f04f 0a00 	mov.w	sl, #0
   838d2:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 83bbc <__sfvwrite_r+0x314>
   838d6:	46d0      	mov	r8, sl
   838d8:	45d8      	cmp	r8, fp
   838da:	bf34      	ite	cc
   838dc:	4643      	movcc	r3, r8
   838de:	465b      	movcs	r3, fp
   838e0:	4652      	mov	r2, sl
   838e2:	4648      	mov	r0, r9
   838e4:	f1b8 0f00 	cmp.w	r8, #0
   838e8:	d04f      	beq.n	8398a <__sfvwrite_r+0xe2>
   838ea:	69e1      	ldr	r1, [r4, #28]
   838ec:	6a67      	ldr	r7, [r4, #36]	; 0x24
   838ee:	47b8      	blx	r7
   838f0:	2800      	cmp	r0, #0
   838f2:	dd56      	ble.n	839a2 <__sfvwrite_r+0xfa>
   838f4:	68b3      	ldr	r3, [r6, #8]
   838f6:	4482      	add	sl, r0
   838f8:	1a1b      	subs	r3, r3, r0
   838fa:	ebc0 0808 	rsb	r8, r0, r8
   838fe:	60b3      	str	r3, [r6, #8]
   83900:	2b00      	cmp	r3, #0
   83902:	d1e9      	bne.n	838d8 <__sfvwrite_r+0x30>
   83904:	2000      	movs	r0, #0
   83906:	b003      	add	sp, #12
   83908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8390c:	4648      	mov	r0, r9
   8390e:	4621      	mov	r1, r4
   83910:	f7ff fce8 	bl	832e4 <__swsetup_r>
   83914:	2800      	cmp	r0, #0
   83916:	f040 8148 	bne.w	83baa <__sfvwrite_r+0x302>
   8391a:	89a3      	ldrh	r3, [r4, #12]
   8391c:	6835      	ldr	r5, [r6, #0]
   8391e:	f003 0202 	and.w	r2, r3, #2
   83922:	b292      	uxth	r2, r2
   83924:	2a00      	cmp	r2, #0
   83926:	d1d2      	bne.n	838ce <__sfvwrite_r+0x26>
   83928:	f013 0a01 	ands.w	sl, r3, #1
   8392c:	d142      	bne.n	839b4 <__sfvwrite_r+0x10c>
   8392e:	46d0      	mov	r8, sl
   83930:	f1b8 0f00 	cmp.w	r8, #0
   83934:	d023      	beq.n	8397e <__sfvwrite_r+0xd6>
   83936:	059a      	lsls	r2, r3, #22
   83938:	68a7      	ldr	r7, [r4, #8]
   8393a:	d576      	bpl.n	83a2a <__sfvwrite_r+0x182>
   8393c:	45b8      	cmp	r8, r7
   8393e:	f0c0 80a4 	bcc.w	83a8a <__sfvwrite_r+0x1e2>
   83942:	f413 6f90 	tst.w	r3, #1152	; 0x480
   83946:	f040 80b2 	bne.w	83aae <__sfvwrite_r+0x206>
   8394a:	6820      	ldr	r0, [r4, #0]
   8394c:	46bb      	mov	fp, r7
   8394e:	4651      	mov	r1, sl
   83950:	465a      	mov	r2, fp
   83952:	f000 fcb7 	bl	842c4 <memmove>
   83956:	68a2      	ldr	r2, [r4, #8]
   83958:	6821      	ldr	r1, [r4, #0]
   8395a:	1bd2      	subs	r2, r2, r7
   8395c:	eb01 030b 	add.w	r3, r1, fp
   83960:	60a2      	str	r2, [r4, #8]
   83962:	6023      	str	r3, [r4, #0]
   83964:	4642      	mov	r2, r8
   83966:	68b3      	ldr	r3, [r6, #8]
   83968:	4492      	add	sl, r2
   8396a:	1a9b      	subs	r3, r3, r2
   8396c:	ebc2 0808 	rsb	r8, r2, r8
   83970:	60b3      	str	r3, [r6, #8]
   83972:	2b00      	cmp	r3, #0
   83974:	d0c6      	beq.n	83904 <__sfvwrite_r+0x5c>
   83976:	89a3      	ldrh	r3, [r4, #12]
   83978:	f1b8 0f00 	cmp.w	r8, #0
   8397c:	d1db      	bne.n	83936 <__sfvwrite_r+0x8e>
   8397e:	f8d5 a000 	ldr.w	sl, [r5]
   83982:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83986:	3508      	adds	r5, #8
   83988:	e7d2      	b.n	83930 <__sfvwrite_r+0x88>
   8398a:	f8d5 a000 	ldr.w	sl, [r5]
   8398e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83992:	3508      	adds	r5, #8
   83994:	e7a0      	b.n	838d8 <__sfvwrite_r+0x30>
   83996:	4648      	mov	r0, r9
   83998:	4621      	mov	r1, r4
   8399a:	f7ff fdb9 	bl	83510 <_fflush_r>
   8399e:	2800      	cmp	r0, #0
   839a0:	d059      	beq.n	83a56 <__sfvwrite_r+0x1ae>
   839a2:	89a3      	ldrh	r3, [r4, #12]
   839a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   839a8:	f04f 30ff 	mov.w	r0, #4294967295
   839ac:	81a3      	strh	r3, [r4, #12]
   839ae:	b003      	add	sp, #12
   839b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   839b4:	4692      	mov	sl, r2
   839b6:	9201      	str	r2, [sp, #4]
   839b8:	4693      	mov	fp, r2
   839ba:	4690      	mov	r8, r2
   839bc:	f1b8 0f00 	cmp.w	r8, #0
   839c0:	d02b      	beq.n	83a1a <__sfvwrite_r+0x172>
   839c2:	9f01      	ldr	r7, [sp, #4]
   839c4:	2f00      	cmp	r7, #0
   839c6:	d064      	beq.n	83a92 <__sfvwrite_r+0x1ea>
   839c8:	6820      	ldr	r0, [r4, #0]
   839ca:	6921      	ldr	r1, [r4, #16]
   839cc:	45c2      	cmp	sl, r8
   839ce:	bf34      	ite	cc
   839d0:	4653      	movcc	r3, sl
   839d2:	4643      	movcs	r3, r8
   839d4:	4288      	cmp	r0, r1
   839d6:	461f      	mov	r7, r3
   839d8:	f8d4 c008 	ldr.w	ip, [r4, #8]
   839dc:	6962      	ldr	r2, [r4, #20]
   839de:	d903      	bls.n	839e8 <__sfvwrite_r+0x140>
   839e0:	4494      	add	ip, r2
   839e2:	4563      	cmp	r3, ip
   839e4:	f300 80ae 	bgt.w	83b44 <__sfvwrite_r+0x29c>
   839e8:	4293      	cmp	r3, r2
   839ea:	db36      	blt.n	83a5a <__sfvwrite_r+0x1b2>
   839ec:	4613      	mov	r3, r2
   839ee:	6a67      	ldr	r7, [r4, #36]	; 0x24
   839f0:	4648      	mov	r0, r9
   839f2:	69e1      	ldr	r1, [r4, #28]
   839f4:	465a      	mov	r2, fp
   839f6:	47b8      	blx	r7
   839f8:	1e07      	subs	r7, r0, #0
   839fa:	ddd2      	ble.n	839a2 <__sfvwrite_r+0xfa>
   839fc:	ebba 0a07 	subs.w	sl, sl, r7
   83a00:	d03a      	beq.n	83a78 <__sfvwrite_r+0x1d0>
   83a02:	68b3      	ldr	r3, [r6, #8]
   83a04:	44bb      	add	fp, r7
   83a06:	1bdb      	subs	r3, r3, r7
   83a08:	ebc7 0808 	rsb	r8, r7, r8
   83a0c:	60b3      	str	r3, [r6, #8]
   83a0e:	2b00      	cmp	r3, #0
   83a10:	f43f af78 	beq.w	83904 <__sfvwrite_r+0x5c>
   83a14:	f1b8 0f00 	cmp.w	r8, #0
   83a18:	d1d3      	bne.n	839c2 <__sfvwrite_r+0x11a>
   83a1a:	2700      	movs	r7, #0
   83a1c:	f8d5 b000 	ldr.w	fp, [r5]
   83a20:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83a24:	9701      	str	r7, [sp, #4]
   83a26:	3508      	adds	r5, #8
   83a28:	e7c8      	b.n	839bc <__sfvwrite_r+0x114>
   83a2a:	6820      	ldr	r0, [r4, #0]
   83a2c:	6923      	ldr	r3, [r4, #16]
   83a2e:	4298      	cmp	r0, r3
   83a30:	d802      	bhi.n	83a38 <__sfvwrite_r+0x190>
   83a32:	6963      	ldr	r3, [r4, #20]
   83a34:	4598      	cmp	r8, r3
   83a36:	d272      	bcs.n	83b1e <__sfvwrite_r+0x276>
   83a38:	45b8      	cmp	r8, r7
   83a3a:	bf38      	it	cc
   83a3c:	4647      	movcc	r7, r8
   83a3e:	463a      	mov	r2, r7
   83a40:	4651      	mov	r1, sl
   83a42:	f000 fc3f 	bl	842c4 <memmove>
   83a46:	68a3      	ldr	r3, [r4, #8]
   83a48:	6822      	ldr	r2, [r4, #0]
   83a4a:	1bdb      	subs	r3, r3, r7
   83a4c:	443a      	add	r2, r7
   83a4e:	60a3      	str	r3, [r4, #8]
   83a50:	6022      	str	r2, [r4, #0]
   83a52:	2b00      	cmp	r3, #0
   83a54:	d09f      	beq.n	83996 <__sfvwrite_r+0xee>
   83a56:	463a      	mov	r2, r7
   83a58:	e785      	b.n	83966 <__sfvwrite_r+0xbe>
   83a5a:	461a      	mov	r2, r3
   83a5c:	4659      	mov	r1, fp
   83a5e:	9300      	str	r3, [sp, #0]
   83a60:	f000 fc30 	bl	842c4 <memmove>
   83a64:	9b00      	ldr	r3, [sp, #0]
   83a66:	68a1      	ldr	r1, [r4, #8]
   83a68:	6822      	ldr	r2, [r4, #0]
   83a6a:	1ac9      	subs	r1, r1, r3
   83a6c:	ebba 0a07 	subs.w	sl, sl, r7
   83a70:	4413      	add	r3, r2
   83a72:	60a1      	str	r1, [r4, #8]
   83a74:	6023      	str	r3, [r4, #0]
   83a76:	d1c4      	bne.n	83a02 <__sfvwrite_r+0x15a>
   83a78:	4648      	mov	r0, r9
   83a7a:	4621      	mov	r1, r4
   83a7c:	f7ff fd48 	bl	83510 <_fflush_r>
   83a80:	2800      	cmp	r0, #0
   83a82:	d18e      	bne.n	839a2 <__sfvwrite_r+0xfa>
   83a84:	f8cd a004 	str.w	sl, [sp, #4]
   83a88:	e7bb      	b.n	83a02 <__sfvwrite_r+0x15a>
   83a8a:	6820      	ldr	r0, [r4, #0]
   83a8c:	4647      	mov	r7, r8
   83a8e:	46c3      	mov	fp, r8
   83a90:	e75d      	b.n	8394e <__sfvwrite_r+0xa6>
   83a92:	4658      	mov	r0, fp
   83a94:	210a      	movs	r1, #10
   83a96:	4642      	mov	r2, r8
   83a98:	f000 fbca 	bl	84230 <memchr>
   83a9c:	2800      	cmp	r0, #0
   83a9e:	d07f      	beq.n	83ba0 <__sfvwrite_r+0x2f8>
   83aa0:	f100 0a01 	add.w	sl, r0, #1
   83aa4:	2701      	movs	r7, #1
   83aa6:	ebcb 0a0a 	rsb	sl, fp, sl
   83aaa:	9701      	str	r7, [sp, #4]
   83aac:	e78c      	b.n	839c8 <__sfvwrite_r+0x120>
   83aae:	6822      	ldr	r2, [r4, #0]
   83ab0:	6921      	ldr	r1, [r4, #16]
   83ab2:	6967      	ldr	r7, [r4, #20]
   83ab4:	ebc1 0c02 	rsb	ip, r1, r2
   83ab8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   83abc:	f10c 0201 	add.w	r2, ip, #1
   83ac0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   83ac4:	4442      	add	r2, r8
   83ac6:	107f      	asrs	r7, r7, #1
   83ac8:	4297      	cmp	r7, r2
   83aca:	bf34      	ite	cc
   83acc:	4617      	movcc	r7, r2
   83ace:	463a      	movcs	r2, r7
   83ad0:	055b      	lsls	r3, r3, #21
   83ad2:	d54f      	bpl.n	83b74 <__sfvwrite_r+0x2cc>
   83ad4:	4611      	mov	r1, r2
   83ad6:	4648      	mov	r0, r9
   83ad8:	f8cd c000 	str.w	ip, [sp]
   83adc:	f000 f90c 	bl	83cf8 <_malloc_r>
   83ae0:	f8dd c000 	ldr.w	ip, [sp]
   83ae4:	4683      	mov	fp, r0
   83ae6:	2800      	cmp	r0, #0
   83ae8:	d062      	beq.n	83bb0 <__sfvwrite_r+0x308>
   83aea:	4662      	mov	r2, ip
   83aec:	6921      	ldr	r1, [r4, #16]
   83aee:	f8cd c000 	str.w	ip, [sp]
   83af2:	f7ff fa15 	bl	82f20 <memcpy>
   83af6:	89a2      	ldrh	r2, [r4, #12]
   83af8:	f8dd c000 	ldr.w	ip, [sp]
   83afc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   83b00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   83b04:	81a2      	strh	r2, [r4, #12]
   83b06:	eb0b 000c 	add.w	r0, fp, ip
   83b0a:	ebcc 0207 	rsb	r2, ip, r7
   83b0e:	f8c4 b010 	str.w	fp, [r4, #16]
   83b12:	6167      	str	r7, [r4, #20]
   83b14:	6020      	str	r0, [r4, #0]
   83b16:	60a2      	str	r2, [r4, #8]
   83b18:	4647      	mov	r7, r8
   83b1a:	46c3      	mov	fp, r8
   83b1c:	e717      	b.n	8394e <__sfvwrite_r+0xa6>
   83b1e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   83b22:	4590      	cmp	r8, r2
   83b24:	bf38      	it	cc
   83b26:	4642      	movcc	r2, r8
   83b28:	fb92 f2f3 	sdiv	r2, r2, r3
   83b2c:	fb02 f303 	mul.w	r3, r2, r3
   83b30:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83b32:	4648      	mov	r0, r9
   83b34:	69e1      	ldr	r1, [r4, #28]
   83b36:	4652      	mov	r2, sl
   83b38:	47b8      	blx	r7
   83b3a:	2800      	cmp	r0, #0
   83b3c:	f77f af31 	ble.w	839a2 <__sfvwrite_r+0xfa>
   83b40:	4602      	mov	r2, r0
   83b42:	e710      	b.n	83966 <__sfvwrite_r+0xbe>
   83b44:	4662      	mov	r2, ip
   83b46:	4659      	mov	r1, fp
   83b48:	f8cd c000 	str.w	ip, [sp]
   83b4c:	f000 fbba 	bl	842c4 <memmove>
   83b50:	f8dd c000 	ldr.w	ip, [sp]
   83b54:	6823      	ldr	r3, [r4, #0]
   83b56:	4648      	mov	r0, r9
   83b58:	4463      	add	r3, ip
   83b5a:	6023      	str	r3, [r4, #0]
   83b5c:	4621      	mov	r1, r4
   83b5e:	f8cd c000 	str.w	ip, [sp]
   83b62:	f7ff fcd5 	bl	83510 <_fflush_r>
   83b66:	f8dd c000 	ldr.w	ip, [sp]
   83b6a:	2800      	cmp	r0, #0
   83b6c:	f47f af19 	bne.w	839a2 <__sfvwrite_r+0xfa>
   83b70:	4667      	mov	r7, ip
   83b72:	e743      	b.n	839fc <__sfvwrite_r+0x154>
   83b74:	4648      	mov	r0, r9
   83b76:	f8cd c000 	str.w	ip, [sp]
   83b7a:	f000 fc0d 	bl	84398 <_realloc_r>
   83b7e:	f8dd c000 	ldr.w	ip, [sp]
   83b82:	4683      	mov	fp, r0
   83b84:	2800      	cmp	r0, #0
   83b86:	d1be      	bne.n	83b06 <__sfvwrite_r+0x25e>
   83b88:	4648      	mov	r0, r9
   83b8a:	6921      	ldr	r1, [r4, #16]
   83b8c:	f7ff fdc0 	bl	83710 <_free_r>
   83b90:	89a3      	ldrh	r3, [r4, #12]
   83b92:	220c      	movs	r2, #12
   83b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   83b98:	b29b      	uxth	r3, r3
   83b9a:	f8c9 2000 	str.w	r2, [r9]
   83b9e:	e701      	b.n	839a4 <__sfvwrite_r+0xfc>
   83ba0:	2701      	movs	r7, #1
   83ba2:	f108 0a01 	add.w	sl, r8, #1
   83ba6:	9701      	str	r7, [sp, #4]
   83ba8:	e70e      	b.n	839c8 <__sfvwrite_r+0x120>
   83baa:	f04f 30ff 	mov.w	r0, #4294967295
   83bae:	e6aa      	b.n	83906 <__sfvwrite_r+0x5e>
   83bb0:	230c      	movs	r3, #12
   83bb2:	f8c9 3000 	str.w	r3, [r9]
   83bb6:	89a3      	ldrh	r3, [r4, #12]
   83bb8:	e6f4      	b.n	839a4 <__sfvwrite_r+0xfc>
   83bba:	bf00      	nop
   83bbc:	7ffffc00 	.word	0x7ffffc00

00083bc0 <_fwalk>:
   83bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83bc4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   83bc8:	4688      	mov	r8, r1
   83bca:	d019      	beq.n	83c00 <_fwalk+0x40>
   83bcc:	2600      	movs	r6, #0
   83bce:	687d      	ldr	r5, [r7, #4]
   83bd0:	68bc      	ldr	r4, [r7, #8]
   83bd2:	3d01      	subs	r5, #1
   83bd4:	d40e      	bmi.n	83bf4 <_fwalk+0x34>
   83bd6:	89a3      	ldrh	r3, [r4, #12]
   83bd8:	3d01      	subs	r5, #1
   83bda:	2b01      	cmp	r3, #1
   83bdc:	d906      	bls.n	83bec <_fwalk+0x2c>
   83bde:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   83be2:	4620      	mov	r0, r4
   83be4:	3301      	adds	r3, #1
   83be6:	d001      	beq.n	83bec <_fwalk+0x2c>
   83be8:	47c0      	blx	r8
   83bea:	4306      	orrs	r6, r0
   83bec:	1c6b      	adds	r3, r5, #1
   83bee:	f104 0468 	add.w	r4, r4, #104	; 0x68
   83bf2:	d1f0      	bne.n	83bd6 <_fwalk+0x16>
   83bf4:	683f      	ldr	r7, [r7, #0]
   83bf6:	2f00      	cmp	r7, #0
   83bf8:	d1e9      	bne.n	83bce <_fwalk+0xe>
   83bfa:	4630      	mov	r0, r6
   83bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83c00:	463e      	mov	r6, r7
   83c02:	4630      	mov	r0, r6
   83c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083c08 <__smakebuf_r>:
   83c08:	b5f0      	push	{r4, r5, r6, r7, lr}
   83c0a:	898b      	ldrh	r3, [r1, #12]
   83c0c:	b091      	sub	sp, #68	; 0x44
   83c0e:	b29a      	uxth	r2, r3
   83c10:	0796      	lsls	r6, r2, #30
   83c12:	460c      	mov	r4, r1
   83c14:	4605      	mov	r5, r0
   83c16:	d437      	bmi.n	83c88 <__smakebuf_r+0x80>
   83c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83c1c:	2900      	cmp	r1, #0
   83c1e:	db17      	blt.n	83c50 <__smakebuf_r+0x48>
   83c20:	aa01      	add	r2, sp, #4
   83c22:	f000 feaf 	bl	84984 <_fstat_r>
   83c26:	2800      	cmp	r0, #0
   83c28:	db10      	blt.n	83c4c <__smakebuf_r+0x44>
   83c2a:	9b02      	ldr	r3, [sp, #8]
   83c2c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   83c30:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   83c34:	424f      	negs	r7, r1
   83c36:	414f      	adcs	r7, r1
   83c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   83c3c:	d02c      	beq.n	83c98 <__smakebuf_r+0x90>
   83c3e:	89a3      	ldrh	r3, [r4, #12]
   83c40:	f44f 6680 	mov.w	r6, #1024	; 0x400
   83c44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83c48:	81a3      	strh	r3, [r4, #12]
   83c4a:	e00b      	b.n	83c64 <__smakebuf_r+0x5c>
   83c4c:	89a3      	ldrh	r3, [r4, #12]
   83c4e:	b29a      	uxth	r2, r3
   83c50:	f012 0f80 	tst.w	r2, #128	; 0x80
   83c54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83c58:	81a3      	strh	r3, [r4, #12]
   83c5a:	bf14      	ite	ne
   83c5c:	2640      	movne	r6, #64	; 0x40
   83c5e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   83c62:	2700      	movs	r7, #0
   83c64:	4628      	mov	r0, r5
   83c66:	4631      	mov	r1, r6
   83c68:	f000 f846 	bl	83cf8 <_malloc_r>
   83c6c:	89a3      	ldrh	r3, [r4, #12]
   83c6e:	2800      	cmp	r0, #0
   83c70:	d029      	beq.n	83cc6 <__smakebuf_r+0xbe>
   83c72:	4a1b      	ldr	r2, [pc, #108]	; (83ce0 <__smakebuf_r+0xd8>)
   83c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83c78:	63ea      	str	r2, [r5, #60]	; 0x3c
   83c7a:	81a3      	strh	r3, [r4, #12]
   83c7c:	6020      	str	r0, [r4, #0]
   83c7e:	6120      	str	r0, [r4, #16]
   83c80:	6166      	str	r6, [r4, #20]
   83c82:	b9a7      	cbnz	r7, 83cae <__smakebuf_r+0xa6>
   83c84:	b011      	add	sp, #68	; 0x44
   83c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83c88:	f101 0343 	add.w	r3, r1, #67	; 0x43
   83c8c:	2201      	movs	r2, #1
   83c8e:	600b      	str	r3, [r1, #0]
   83c90:	610b      	str	r3, [r1, #16]
   83c92:	614a      	str	r2, [r1, #20]
   83c94:	b011      	add	sp, #68	; 0x44
   83c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83c98:	4a12      	ldr	r2, [pc, #72]	; (83ce4 <__smakebuf_r+0xdc>)
   83c9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   83c9c:	4293      	cmp	r3, r2
   83c9e:	d1ce      	bne.n	83c3e <__smakebuf_r+0x36>
   83ca0:	89a3      	ldrh	r3, [r4, #12]
   83ca2:	f44f 6680 	mov.w	r6, #1024	; 0x400
   83ca6:	4333      	orrs	r3, r6
   83ca8:	81a3      	strh	r3, [r4, #12]
   83caa:	64e6      	str	r6, [r4, #76]	; 0x4c
   83cac:	e7da      	b.n	83c64 <__smakebuf_r+0x5c>
   83cae:	4628      	mov	r0, r5
   83cb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83cb4:	f000 fe7a 	bl	849ac <_isatty_r>
   83cb8:	2800      	cmp	r0, #0
   83cba:	d0e3      	beq.n	83c84 <__smakebuf_r+0x7c>
   83cbc:	89a3      	ldrh	r3, [r4, #12]
   83cbe:	f043 0301 	orr.w	r3, r3, #1
   83cc2:	81a3      	strh	r3, [r4, #12]
   83cc4:	e7de      	b.n	83c84 <__smakebuf_r+0x7c>
   83cc6:	059a      	lsls	r2, r3, #22
   83cc8:	d4dc      	bmi.n	83c84 <__smakebuf_r+0x7c>
   83cca:	f104 0243 	add.w	r2, r4, #67	; 0x43
   83cce:	f043 0302 	orr.w	r3, r3, #2
   83cd2:	2101      	movs	r1, #1
   83cd4:	81a3      	strh	r3, [r4, #12]
   83cd6:	6022      	str	r2, [r4, #0]
   83cd8:	6122      	str	r2, [r4, #16]
   83cda:	6161      	str	r1, [r4, #20]
   83cdc:	e7d2      	b.n	83c84 <__smakebuf_r+0x7c>
   83cde:	bf00      	nop
   83ce0:	0008353d 	.word	0x0008353d
   83ce4:	000847d9 	.word	0x000847d9

00083ce8 <malloc>:
   83ce8:	4b02      	ldr	r3, [pc, #8]	; (83cf4 <malloc+0xc>)
   83cea:	4601      	mov	r1, r0
   83cec:	6818      	ldr	r0, [r3, #0]
   83cee:	f000 b803 	b.w	83cf8 <_malloc_r>
   83cf2:	bf00      	nop
   83cf4:	20070578 	.word	0x20070578

00083cf8 <_malloc_r>:
   83cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83cfc:	f101 050b 	add.w	r5, r1, #11
   83d00:	2d16      	cmp	r5, #22
   83d02:	b083      	sub	sp, #12
   83d04:	4606      	mov	r6, r0
   83d06:	d927      	bls.n	83d58 <_malloc_r+0x60>
   83d08:	f035 0507 	bics.w	r5, r5, #7
   83d0c:	d427      	bmi.n	83d5e <_malloc_r+0x66>
   83d0e:	42a9      	cmp	r1, r5
   83d10:	d825      	bhi.n	83d5e <_malloc_r+0x66>
   83d12:	4630      	mov	r0, r6
   83d14:	f000 fb3c 	bl	84390 <__malloc_lock>
   83d18:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   83d1c:	d226      	bcs.n	83d6c <_malloc_r+0x74>
   83d1e:	4fc1      	ldr	r7, [pc, #772]	; (84024 <_malloc_r+0x32c>)
   83d20:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   83d24:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   83d28:	68dc      	ldr	r4, [r3, #12]
   83d2a:	429c      	cmp	r4, r3
   83d2c:	f000 81d2 	beq.w	840d4 <_malloc_r+0x3dc>
   83d30:	6863      	ldr	r3, [r4, #4]
   83d32:	68e2      	ldr	r2, [r4, #12]
   83d34:	f023 0303 	bic.w	r3, r3, #3
   83d38:	4423      	add	r3, r4
   83d3a:	6858      	ldr	r0, [r3, #4]
   83d3c:	68a1      	ldr	r1, [r4, #8]
   83d3e:	f040 0501 	orr.w	r5, r0, #1
   83d42:	60ca      	str	r2, [r1, #12]
   83d44:	4630      	mov	r0, r6
   83d46:	6091      	str	r1, [r2, #8]
   83d48:	605d      	str	r5, [r3, #4]
   83d4a:	f000 fb23 	bl	84394 <__malloc_unlock>
   83d4e:	3408      	adds	r4, #8
   83d50:	4620      	mov	r0, r4
   83d52:	b003      	add	sp, #12
   83d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d58:	2510      	movs	r5, #16
   83d5a:	42a9      	cmp	r1, r5
   83d5c:	d9d9      	bls.n	83d12 <_malloc_r+0x1a>
   83d5e:	2400      	movs	r4, #0
   83d60:	230c      	movs	r3, #12
   83d62:	4620      	mov	r0, r4
   83d64:	6033      	str	r3, [r6, #0]
   83d66:	b003      	add	sp, #12
   83d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d6c:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   83d70:	f000 8089 	beq.w	83e86 <_malloc_r+0x18e>
   83d74:	f1bc 0f04 	cmp.w	ip, #4
   83d78:	f200 8160 	bhi.w	8403c <_malloc_r+0x344>
   83d7c:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   83d80:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   83d84:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83d88:	4fa6      	ldr	r7, [pc, #664]	; (84024 <_malloc_r+0x32c>)
   83d8a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   83d8e:	68cc      	ldr	r4, [r1, #12]
   83d90:	42a1      	cmp	r1, r4
   83d92:	d105      	bne.n	83da0 <_malloc_r+0xa8>
   83d94:	e00c      	b.n	83db0 <_malloc_r+0xb8>
   83d96:	2b00      	cmp	r3, #0
   83d98:	da79      	bge.n	83e8e <_malloc_r+0x196>
   83d9a:	68e4      	ldr	r4, [r4, #12]
   83d9c:	42a1      	cmp	r1, r4
   83d9e:	d007      	beq.n	83db0 <_malloc_r+0xb8>
   83da0:	6862      	ldr	r2, [r4, #4]
   83da2:	f022 0203 	bic.w	r2, r2, #3
   83da6:	1b53      	subs	r3, r2, r5
   83da8:	2b0f      	cmp	r3, #15
   83daa:	ddf4      	ble.n	83d96 <_malloc_r+0x9e>
   83dac:	f10c 3cff 	add.w	ip, ip, #4294967295
   83db0:	f10c 0c01 	add.w	ip, ip, #1
   83db4:	4b9b      	ldr	r3, [pc, #620]	; (84024 <_malloc_r+0x32c>)
   83db6:	693c      	ldr	r4, [r7, #16]
   83db8:	f103 0e08 	add.w	lr, r3, #8
   83dbc:	4574      	cmp	r4, lr
   83dbe:	f000 817e 	beq.w	840be <_malloc_r+0x3c6>
   83dc2:	6861      	ldr	r1, [r4, #4]
   83dc4:	f021 0103 	bic.w	r1, r1, #3
   83dc8:	1b4a      	subs	r2, r1, r5
   83dca:	2a0f      	cmp	r2, #15
   83dcc:	f300 8164 	bgt.w	84098 <_malloc_r+0x3a0>
   83dd0:	2a00      	cmp	r2, #0
   83dd2:	f8c3 e014 	str.w	lr, [r3, #20]
   83dd6:	f8c3 e010 	str.w	lr, [r3, #16]
   83dda:	da69      	bge.n	83eb0 <_malloc_r+0x1b8>
   83ddc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   83de0:	f080 813a 	bcs.w	84058 <_malloc_r+0x360>
   83de4:	08c9      	lsrs	r1, r1, #3
   83de6:	108a      	asrs	r2, r1, #2
   83de8:	f04f 0801 	mov.w	r8, #1
   83dec:	fa08 f802 	lsl.w	r8, r8, r2
   83df0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   83df4:	685a      	ldr	r2, [r3, #4]
   83df6:	6888      	ldr	r0, [r1, #8]
   83df8:	ea48 0202 	orr.w	r2, r8, r2
   83dfc:	60a0      	str	r0, [r4, #8]
   83dfe:	60e1      	str	r1, [r4, #12]
   83e00:	605a      	str	r2, [r3, #4]
   83e02:	608c      	str	r4, [r1, #8]
   83e04:	60c4      	str	r4, [r0, #12]
   83e06:	ea4f 03ac 	mov.w	r3, ip, asr #2
   83e0a:	2001      	movs	r0, #1
   83e0c:	4098      	lsls	r0, r3
   83e0e:	4290      	cmp	r0, r2
   83e10:	d85b      	bhi.n	83eca <_malloc_r+0x1d2>
   83e12:	4202      	tst	r2, r0
   83e14:	d106      	bne.n	83e24 <_malloc_r+0x12c>
   83e16:	f02c 0c03 	bic.w	ip, ip, #3
   83e1a:	0040      	lsls	r0, r0, #1
   83e1c:	4202      	tst	r2, r0
   83e1e:	f10c 0c04 	add.w	ip, ip, #4
   83e22:	d0fa      	beq.n	83e1a <_malloc_r+0x122>
   83e24:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   83e28:	4644      	mov	r4, r8
   83e2a:	46e1      	mov	r9, ip
   83e2c:	68e3      	ldr	r3, [r4, #12]
   83e2e:	429c      	cmp	r4, r3
   83e30:	d107      	bne.n	83e42 <_malloc_r+0x14a>
   83e32:	e146      	b.n	840c2 <_malloc_r+0x3ca>
   83e34:	2a00      	cmp	r2, #0
   83e36:	f280 8157 	bge.w	840e8 <_malloc_r+0x3f0>
   83e3a:	68db      	ldr	r3, [r3, #12]
   83e3c:	429c      	cmp	r4, r3
   83e3e:	f000 8140 	beq.w	840c2 <_malloc_r+0x3ca>
   83e42:	6859      	ldr	r1, [r3, #4]
   83e44:	f021 0103 	bic.w	r1, r1, #3
   83e48:	1b4a      	subs	r2, r1, r5
   83e4a:	2a0f      	cmp	r2, #15
   83e4c:	ddf2      	ble.n	83e34 <_malloc_r+0x13c>
   83e4e:	461c      	mov	r4, r3
   83e50:	f854 cf08 	ldr.w	ip, [r4, #8]!
   83e54:	68d9      	ldr	r1, [r3, #12]
   83e56:	f045 0901 	orr.w	r9, r5, #1
   83e5a:	f042 0801 	orr.w	r8, r2, #1
   83e5e:	441d      	add	r5, r3
   83e60:	f8c3 9004 	str.w	r9, [r3, #4]
   83e64:	4630      	mov	r0, r6
   83e66:	f8cc 100c 	str.w	r1, [ip, #12]
   83e6a:	f8c1 c008 	str.w	ip, [r1, #8]
   83e6e:	617d      	str	r5, [r7, #20]
   83e70:	613d      	str	r5, [r7, #16]
   83e72:	f8c5 e00c 	str.w	lr, [r5, #12]
   83e76:	f8c5 e008 	str.w	lr, [r5, #8]
   83e7a:	f8c5 8004 	str.w	r8, [r5, #4]
   83e7e:	50aa      	str	r2, [r5, r2]
   83e80:	f000 fa88 	bl	84394 <__malloc_unlock>
   83e84:	e764      	b.n	83d50 <_malloc_r+0x58>
   83e86:	217e      	movs	r1, #126	; 0x7e
   83e88:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   83e8c:	e77c      	b.n	83d88 <_malloc_r+0x90>
   83e8e:	4422      	add	r2, r4
   83e90:	6850      	ldr	r0, [r2, #4]
   83e92:	68e3      	ldr	r3, [r4, #12]
   83e94:	68a1      	ldr	r1, [r4, #8]
   83e96:	f040 0501 	orr.w	r5, r0, #1
   83e9a:	60cb      	str	r3, [r1, #12]
   83e9c:	4630      	mov	r0, r6
   83e9e:	6099      	str	r1, [r3, #8]
   83ea0:	6055      	str	r5, [r2, #4]
   83ea2:	f000 fa77 	bl	84394 <__malloc_unlock>
   83ea6:	3408      	adds	r4, #8
   83ea8:	4620      	mov	r0, r4
   83eaa:	b003      	add	sp, #12
   83eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83eb0:	4421      	add	r1, r4
   83eb2:	684b      	ldr	r3, [r1, #4]
   83eb4:	4630      	mov	r0, r6
   83eb6:	f043 0301 	orr.w	r3, r3, #1
   83eba:	604b      	str	r3, [r1, #4]
   83ebc:	f000 fa6a 	bl	84394 <__malloc_unlock>
   83ec0:	3408      	adds	r4, #8
   83ec2:	4620      	mov	r0, r4
   83ec4:	b003      	add	sp, #12
   83ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83eca:	68bc      	ldr	r4, [r7, #8]
   83ecc:	6863      	ldr	r3, [r4, #4]
   83ece:	f023 0903 	bic.w	r9, r3, #3
   83ed2:	45a9      	cmp	r9, r5
   83ed4:	d304      	bcc.n	83ee0 <_malloc_r+0x1e8>
   83ed6:	ebc5 0309 	rsb	r3, r5, r9
   83eda:	2b0f      	cmp	r3, #15
   83edc:	f300 8091 	bgt.w	84002 <_malloc_r+0x30a>
   83ee0:	4b51      	ldr	r3, [pc, #324]	; (84028 <_malloc_r+0x330>)
   83ee2:	4a52      	ldr	r2, [pc, #328]	; (8402c <_malloc_r+0x334>)
   83ee4:	6819      	ldr	r1, [r3, #0]
   83ee6:	6813      	ldr	r3, [r2, #0]
   83ee8:	eb05 0a01 	add.w	sl, r5, r1
   83eec:	3301      	adds	r3, #1
   83eee:	eb04 0b09 	add.w	fp, r4, r9
   83ef2:	f000 8161 	beq.w	841b8 <_malloc_r+0x4c0>
   83ef6:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   83efa:	f10a 0a0f 	add.w	sl, sl, #15
   83efe:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   83f02:	f02a 0a0f 	bic.w	sl, sl, #15
   83f06:	4630      	mov	r0, r6
   83f08:	4651      	mov	r1, sl
   83f0a:	9201      	str	r2, [sp, #4]
   83f0c:	f000 fc24 	bl	84758 <_sbrk_r>
   83f10:	f1b0 3fff 	cmp.w	r0, #4294967295
   83f14:	4680      	mov	r8, r0
   83f16:	9a01      	ldr	r2, [sp, #4]
   83f18:	f000 8101 	beq.w	8411e <_malloc_r+0x426>
   83f1c:	4583      	cmp	fp, r0
   83f1e:	f200 80fb 	bhi.w	84118 <_malloc_r+0x420>
   83f22:	f8df c114 	ldr.w	ip, [pc, #276]	; 84038 <_malloc_r+0x340>
   83f26:	45c3      	cmp	fp, r8
   83f28:	f8dc 3000 	ldr.w	r3, [ip]
   83f2c:	4453      	add	r3, sl
   83f2e:	f8cc 3000 	str.w	r3, [ip]
   83f32:	f000 814a 	beq.w	841ca <_malloc_r+0x4d2>
   83f36:	6812      	ldr	r2, [r2, #0]
   83f38:	493c      	ldr	r1, [pc, #240]	; (8402c <_malloc_r+0x334>)
   83f3a:	3201      	adds	r2, #1
   83f3c:	bf1b      	ittet	ne
   83f3e:	ebcb 0b08 	rsbne	fp, fp, r8
   83f42:	445b      	addne	r3, fp
   83f44:	f8c1 8000 	streq.w	r8, [r1]
   83f48:	f8cc 3000 	strne.w	r3, [ip]
   83f4c:	f018 0307 	ands.w	r3, r8, #7
   83f50:	f000 8114 	beq.w	8417c <_malloc_r+0x484>
   83f54:	f1c3 0208 	rsb	r2, r3, #8
   83f58:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   83f5c:	4490      	add	r8, r2
   83f5e:	3308      	adds	r3, #8
   83f60:	44c2      	add	sl, r8
   83f62:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   83f66:	ebca 0a03 	rsb	sl, sl, r3
   83f6a:	4651      	mov	r1, sl
   83f6c:	4630      	mov	r0, r6
   83f6e:	f8cd c004 	str.w	ip, [sp, #4]
   83f72:	f000 fbf1 	bl	84758 <_sbrk_r>
   83f76:	1c43      	adds	r3, r0, #1
   83f78:	f8dd c004 	ldr.w	ip, [sp, #4]
   83f7c:	f000 8135 	beq.w	841ea <_malloc_r+0x4f2>
   83f80:	ebc8 0200 	rsb	r2, r8, r0
   83f84:	4452      	add	r2, sl
   83f86:	f042 0201 	orr.w	r2, r2, #1
   83f8a:	f8dc 3000 	ldr.w	r3, [ip]
   83f8e:	42bc      	cmp	r4, r7
   83f90:	4453      	add	r3, sl
   83f92:	f8c7 8008 	str.w	r8, [r7, #8]
   83f96:	f8cc 3000 	str.w	r3, [ip]
   83f9a:	f8c8 2004 	str.w	r2, [r8, #4]
   83f9e:	f8df a098 	ldr.w	sl, [pc, #152]	; 84038 <_malloc_r+0x340>
   83fa2:	d015      	beq.n	83fd0 <_malloc_r+0x2d8>
   83fa4:	f1b9 0f0f 	cmp.w	r9, #15
   83fa8:	f240 80eb 	bls.w	84182 <_malloc_r+0x48a>
   83fac:	6861      	ldr	r1, [r4, #4]
   83fae:	f1a9 020c 	sub.w	r2, r9, #12
   83fb2:	f022 0207 	bic.w	r2, r2, #7
   83fb6:	f001 0101 	and.w	r1, r1, #1
   83fba:	ea42 0e01 	orr.w	lr, r2, r1
   83fbe:	2005      	movs	r0, #5
   83fc0:	18a1      	adds	r1, r4, r2
   83fc2:	2a0f      	cmp	r2, #15
   83fc4:	f8c4 e004 	str.w	lr, [r4, #4]
   83fc8:	6048      	str	r0, [r1, #4]
   83fca:	6088      	str	r0, [r1, #8]
   83fcc:	f200 8111 	bhi.w	841f2 <_malloc_r+0x4fa>
   83fd0:	4a17      	ldr	r2, [pc, #92]	; (84030 <_malloc_r+0x338>)
   83fd2:	68bc      	ldr	r4, [r7, #8]
   83fd4:	6811      	ldr	r1, [r2, #0]
   83fd6:	428b      	cmp	r3, r1
   83fd8:	bf88      	it	hi
   83fda:	6013      	strhi	r3, [r2, #0]
   83fdc:	4a15      	ldr	r2, [pc, #84]	; (84034 <_malloc_r+0x33c>)
   83fde:	6811      	ldr	r1, [r2, #0]
   83fe0:	428b      	cmp	r3, r1
   83fe2:	bf88      	it	hi
   83fe4:	6013      	strhi	r3, [r2, #0]
   83fe6:	6862      	ldr	r2, [r4, #4]
   83fe8:	f022 0203 	bic.w	r2, r2, #3
   83fec:	4295      	cmp	r5, r2
   83fee:	ebc5 0302 	rsb	r3, r5, r2
   83ff2:	d801      	bhi.n	83ff8 <_malloc_r+0x300>
   83ff4:	2b0f      	cmp	r3, #15
   83ff6:	dc04      	bgt.n	84002 <_malloc_r+0x30a>
   83ff8:	4630      	mov	r0, r6
   83ffa:	f000 f9cb 	bl	84394 <__malloc_unlock>
   83ffe:	2400      	movs	r4, #0
   84000:	e6a6      	b.n	83d50 <_malloc_r+0x58>
   84002:	f045 0201 	orr.w	r2, r5, #1
   84006:	f043 0301 	orr.w	r3, r3, #1
   8400a:	4425      	add	r5, r4
   8400c:	6062      	str	r2, [r4, #4]
   8400e:	4630      	mov	r0, r6
   84010:	60bd      	str	r5, [r7, #8]
   84012:	606b      	str	r3, [r5, #4]
   84014:	f000 f9be 	bl	84394 <__malloc_unlock>
   84018:	3408      	adds	r4, #8
   8401a:	4620      	mov	r0, r4
   8401c:	b003      	add	sp, #12
   8401e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84022:	bf00      	nop
   84024:	2007057c 	.word	0x2007057c
   84028:	20078c80 	.word	0x20078c80
   8402c:	20070988 	.word	0x20070988
   84030:	20078c7c 	.word	0x20078c7c
   84034:	20078c78 	.word	0x20078c78
   84038:	20078c84 	.word	0x20078c84
   8403c:	f1bc 0f14 	cmp.w	ip, #20
   84040:	d961      	bls.n	84106 <_malloc_r+0x40e>
   84042:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   84046:	f200 808f 	bhi.w	84168 <_malloc_r+0x470>
   8404a:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   8404e:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   84052:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84056:	e697      	b.n	83d88 <_malloc_r+0x90>
   84058:	0a4b      	lsrs	r3, r1, #9
   8405a:	2b04      	cmp	r3, #4
   8405c:	d958      	bls.n	84110 <_malloc_r+0x418>
   8405e:	2b14      	cmp	r3, #20
   84060:	f200 80ad 	bhi.w	841be <_malloc_r+0x4c6>
   84064:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   84068:	0050      	lsls	r0, r2, #1
   8406a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   8406e:	6883      	ldr	r3, [r0, #8]
   84070:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8422c <_malloc_r+0x534>
   84074:	4283      	cmp	r3, r0
   84076:	f000 808a 	beq.w	8418e <_malloc_r+0x496>
   8407a:	685a      	ldr	r2, [r3, #4]
   8407c:	f022 0203 	bic.w	r2, r2, #3
   84080:	4291      	cmp	r1, r2
   84082:	d202      	bcs.n	8408a <_malloc_r+0x392>
   84084:	689b      	ldr	r3, [r3, #8]
   84086:	4298      	cmp	r0, r3
   84088:	d1f7      	bne.n	8407a <_malloc_r+0x382>
   8408a:	68d9      	ldr	r1, [r3, #12]
   8408c:	687a      	ldr	r2, [r7, #4]
   8408e:	60e1      	str	r1, [r4, #12]
   84090:	60a3      	str	r3, [r4, #8]
   84092:	608c      	str	r4, [r1, #8]
   84094:	60dc      	str	r4, [r3, #12]
   84096:	e6b6      	b.n	83e06 <_malloc_r+0x10e>
   84098:	f045 0701 	orr.w	r7, r5, #1
   8409c:	f042 0101 	orr.w	r1, r2, #1
   840a0:	4425      	add	r5, r4
   840a2:	6067      	str	r7, [r4, #4]
   840a4:	4630      	mov	r0, r6
   840a6:	615d      	str	r5, [r3, #20]
   840a8:	611d      	str	r5, [r3, #16]
   840aa:	f8c5 e00c 	str.w	lr, [r5, #12]
   840ae:	f8c5 e008 	str.w	lr, [r5, #8]
   840b2:	6069      	str	r1, [r5, #4]
   840b4:	50aa      	str	r2, [r5, r2]
   840b6:	3408      	adds	r4, #8
   840b8:	f000 f96c 	bl	84394 <__malloc_unlock>
   840bc:	e648      	b.n	83d50 <_malloc_r+0x58>
   840be:	685a      	ldr	r2, [r3, #4]
   840c0:	e6a1      	b.n	83e06 <_malloc_r+0x10e>
   840c2:	f109 0901 	add.w	r9, r9, #1
   840c6:	f019 0f03 	tst.w	r9, #3
   840ca:	f104 0408 	add.w	r4, r4, #8
   840ce:	f47f aead 	bne.w	83e2c <_malloc_r+0x134>
   840d2:	e02d      	b.n	84130 <_malloc_r+0x438>
   840d4:	f104 0308 	add.w	r3, r4, #8
   840d8:	6964      	ldr	r4, [r4, #20]
   840da:	42a3      	cmp	r3, r4
   840dc:	bf08      	it	eq
   840de:	f10c 0c02 	addeq.w	ip, ip, #2
   840e2:	f43f ae67 	beq.w	83db4 <_malloc_r+0xbc>
   840e6:	e623      	b.n	83d30 <_malloc_r+0x38>
   840e8:	4419      	add	r1, r3
   840ea:	6848      	ldr	r0, [r1, #4]
   840ec:	461c      	mov	r4, r3
   840ee:	f854 2f08 	ldr.w	r2, [r4, #8]!
   840f2:	68db      	ldr	r3, [r3, #12]
   840f4:	f040 0501 	orr.w	r5, r0, #1
   840f8:	604d      	str	r5, [r1, #4]
   840fa:	4630      	mov	r0, r6
   840fc:	60d3      	str	r3, [r2, #12]
   840fe:	609a      	str	r2, [r3, #8]
   84100:	f000 f948 	bl	84394 <__malloc_unlock>
   84104:	e624      	b.n	83d50 <_malloc_r+0x58>
   84106:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   8410a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8410e:	e63b      	b.n	83d88 <_malloc_r+0x90>
   84110:	098a      	lsrs	r2, r1, #6
   84112:	3238      	adds	r2, #56	; 0x38
   84114:	0050      	lsls	r0, r2, #1
   84116:	e7a8      	b.n	8406a <_malloc_r+0x372>
   84118:	42bc      	cmp	r4, r7
   8411a:	f43f af02 	beq.w	83f22 <_malloc_r+0x22a>
   8411e:	68bc      	ldr	r4, [r7, #8]
   84120:	6862      	ldr	r2, [r4, #4]
   84122:	f022 0203 	bic.w	r2, r2, #3
   84126:	e761      	b.n	83fec <_malloc_r+0x2f4>
   84128:	f8d8 8000 	ldr.w	r8, [r8]
   8412c:	4598      	cmp	r8, r3
   8412e:	d17a      	bne.n	84226 <_malloc_r+0x52e>
   84130:	f01c 0f03 	tst.w	ip, #3
   84134:	f1a8 0308 	sub.w	r3, r8, #8
   84138:	f10c 3cff 	add.w	ip, ip, #4294967295
   8413c:	d1f4      	bne.n	84128 <_malloc_r+0x430>
   8413e:	687b      	ldr	r3, [r7, #4]
   84140:	ea23 0300 	bic.w	r3, r3, r0
   84144:	607b      	str	r3, [r7, #4]
   84146:	0040      	lsls	r0, r0, #1
   84148:	4298      	cmp	r0, r3
   8414a:	f63f aebe 	bhi.w	83eca <_malloc_r+0x1d2>
   8414e:	2800      	cmp	r0, #0
   84150:	f43f aebb 	beq.w	83eca <_malloc_r+0x1d2>
   84154:	4203      	tst	r3, r0
   84156:	46cc      	mov	ip, r9
   84158:	f47f ae64 	bne.w	83e24 <_malloc_r+0x12c>
   8415c:	0040      	lsls	r0, r0, #1
   8415e:	4203      	tst	r3, r0
   84160:	f10c 0c04 	add.w	ip, ip, #4
   84164:	d0fa      	beq.n	8415c <_malloc_r+0x464>
   84166:	e65d      	b.n	83e24 <_malloc_r+0x12c>
   84168:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   8416c:	d819      	bhi.n	841a2 <_malloc_r+0x4aa>
   8416e:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   84172:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   84176:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8417a:	e605      	b.n	83d88 <_malloc_r+0x90>
   8417c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   84180:	e6ee      	b.n	83f60 <_malloc_r+0x268>
   84182:	2301      	movs	r3, #1
   84184:	f8c8 3004 	str.w	r3, [r8, #4]
   84188:	4644      	mov	r4, r8
   8418a:	2200      	movs	r2, #0
   8418c:	e72e      	b.n	83fec <_malloc_r+0x2f4>
   8418e:	1092      	asrs	r2, r2, #2
   84190:	2001      	movs	r0, #1
   84192:	4090      	lsls	r0, r2
   84194:	f8d8 2004 	ldr.w	r2, [r8, #4]
   84198:	4619      	mov	r1, r3
   8419a:	4302      	orrs	r2, r0
   8419c:	f8c8 2004 	str.w	r2, [r8, #4]
   841a0:	e775      	b.n	8408e <_malloc_r+0x396>
   841a2:	f240 5354 	movw	r3, #1364	; 0x554
   841a6:	459c      	cmp	ip, r3
   841a8:	d81b      	bhi.n	841e2 <_malloc_r+0x4ea>
   841aa:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   841ae:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   841b2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   841b6:	e5e7      	b.n	83d88 <_malloc_r+0x90>
   841b8:	f10a 0a10 	add.w	sl, sl, #16
   841bc:	e6a3      	b.n	83f06 <_malloc_r+0x20e>
   841be:	2b54      	cmp	r3, #84	; 0x54
   841c0:	d81f      	bhi.n	84202 <_malloc_r+0x50a>
   841c2:	0b0a      	lsrs	r2, r1, #12
   841c4:	326e      	adds	r2, #110	; 0x6e
   841c6:	0050      	lsls	r0, r2, #1
   841c8:	e74f      	b.n	8406a <_malloc_r+0x372>
   841ca:	f3cb 010b 	ubfx	r1, fp, #0, #12
   841ce:	2900      	cmp	r1, #0
   841d0:	f47f aeb1 	bne.w	83f36 <_malloc_r+0x23e>
   841d4:	eb0a 0109 	add.w	r1, sl, r9
   841d8:	68ba      	ldr	r2, [r7, #8]
   841da:	f041 0101 	orr.w	r1, r1, #1
   841de:	6051      	str	r1, [r2, #4]
   841e0:	e6f6      	b.n	83fd0 <_malloc_r+0x2d8>
   841e2:	21fc      	movs	r1, #252	; 0xfc
   841e4:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   841e8:	e5ce      	b.n	83d88 <_malloc_r+0x90>
   841ea:	2201      	movs	r2, #1
   841ec:	f04f 0a00 	mov.w	sl, #0
   841f0:	e6cb      	b.n	83f8a <_malloc_r+0x292>
   841f2:	f104 0108 	add.w	r1, r4, #8
   841f6:	4630      	mov	r0, r6
   841f8:	f7ff fa8a 	bl	83710 <_free_r>
   841fc:	f8da 3000 	ldr.w	r3, [sl]
   84200:	e6e6      	b.n	83fd0 <_malloc_r+0x2d8>
   84202:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   84206:	d803      	bhi.n	84210 <_malloc_r+0x518>
   84208:	0bca      	lsrs	r2, r1, #15
   8420a:	3277      	adds	r2, #119	; 0x77
   8420c:	0050      	lsls	r0, r2, #1
   8420e:	e72c      	b.n	8406a <_malloc_r+0x372>
   84210:	f240 5254 	movw	r2, #1364	; 0x554
   84214:	4293      	cmp	r3, r2
   84216:	d803      	bhi.n	84220 <_malloc_r+0x528>
   84218:	0c8a      	lsrs	r2, r1, #18
   8421a:	327c      	adds	r2, #124	; 0x7c
   8421c:	0050      	lsls	r0, r2, #1
   8421e:	e724      	b.n	8406a <_malloc_r+0x372>
   84220:	20fc      	movs	r0, #252	; 0xfc
   84222:	227e      	movs	r2, #126	; 0x7e
   84224:	e721      	b.n	8406a <_malloc_r+0x372>
   84226:	687b      	ldr	r3, [r7, #4]
   84228:	e78d      	b.n	84146 <_malloc_r+0x44e>
   8422a:	bf00      	nop
   8422c:	2007057c 	.word	0x2007057c

00084230 <memchr>:
   84230:	0783      	lsls	r3, r0, #30
   84232:	b470      	push	{r4, r5, r6}
   84234:	b2c9      	uxtb	r1, r1
   84236:	d040      	beq.n	842ba <memchr+0x8a>
   84238:	1e54      	subs	r4, r2, #1
   8423a:	b32a      	cbz	r2, 84288 <memchr+0x58>
   8423c:	7803      	ldrb	r3, [r0, #0]
   8423e:	428b      	cmp	r3, r1
   84240:	d023      	beq.n	8428a <memchr+0x5a>
   84242:	1c43      	adds	r3, r0, #1
   84244:	e004      	b.n	84250 <memchr+0x20>
   84246:	b1fc      	cbz	r4, 84288 <memchr+0x58>
   84248:	7805      	ldrb	r5, [r0, #0]
   8424a:	4614      	mov	r4, r2
   8424c:	428d      	cmp	r5, r1
   8424e:	d01c      	beq.n	8428a <memchr+0x5a>
   84250:	f013 0f03 	tst.w	r3, #3
   84254:	4618      	mov	r0, r3
   84256:	f104 32ff 	add.w	r2, r4, #4294967295
   8425a:	f103 0301 	add.w	r3, r3, #1
   8425e:	d1f2      	bne.n	84246 <memchr+0x16>
   84260:	2c03      	cmp	r4, #3
   84262:	d814      	bhi.n	8428e <memchr+0x5e>
   84264:	1e65      	subs	r5, r4, #1
   84266:	b354      	cbz	r4, 842be <memchr+0x8e>
   84268:	7803      	ldrb	r3, [r0, #0]
   8426a:	428b      	cmp	r3, r1
   8426c:	d00d      	beq.n	8428a <memchr+0x5a>
   8426e:	1c42      	adds	r2, r0, #1
   84270:	2300      	movs	r3, #0
   84272:	e002      	b.n	8427a <memchr+0x4a>
   84274:	7804      	ldrb	r4, [r0, #0]
   84276:	428c      	cmp	r4, r1
   84278:	d007      	beq.n	8428a <memchr+0x5a>
   8427a:	42ab      	cmp	r3, r5
   8427c:	4610      	mov	r0, r2
   8427e:	f103 0301 	add.w	r3, r3, #1
   84282:	f102 0201 	add.w	r2, r2, #1
   84286:	d1f5      	bne.n	84274 <memchr+0x44>
   84288:	2000      	movs	r0, #0
   8428a:	bc70      	pop	{r4, r5, r6}
   8428c:	4770      	bx	lr
   8428e:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   84292:	4603      	mov	r3, r0
   84294:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   84298:	681a      	ldr	r2, [r3, #0]
   8429a:	4618      	mov	r0, r3
   8429c:	4072      	eors	r2, r6
   8429e:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   842a2:	ea25 0202 	bic.w	r2, r5, r2
   842a6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   842aa:	f103 0304 	add.w	r3, r3, #4
   842ae:	d1d9      	bne.n	84264 <memchr+0x34>
   842b0:	3c04      	subs	r4, #4
   842b2:	2c03      	cmp	r4, #3
   842b4:	4618      	mov	r0, r3
   842b6:	d8ef      	bhi.n	84298 <memchr+0x68>
   842b8:	e7d4      	b.n	84264 <memchr+0x34>
   842ba:	4614      	mov	r4, r2
   842bc:	e7d0      	b.n	84260 <memchr+0x30>
   842be:	4620      	mov	r0, r4
   842c0:	e7e3      	b.n	8428a <memchr+0x5a>
   842c2:	bf00      	nop

000842c4 <memmove>:
   842c4:	4288      	cmp	r0, r1
   842c6:	b4f0      	push	{r4, r5, r6, r7}
   842c8:	d910      	bls.n	842ec <memmove+0x28>
   842ca:	188c      	adds	r4, r1, r2
   842cc:	42a0      	cmp	r0, r4
   842ce:	d20d      	bcs.n	842ec <memmove+0x28>
   842d0:	1885      	adds	r5, r0, r2
   842d2:	1e53      	subs	r3, r2, #1
   842d4:	b142      	cbz	r2, 842e8 <memmove+0x24>
   842d6:	4621      	mov	r1, r4
   842d8:	462a      	mov	r2, r5
   842da:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   842de:	3b01      	subs	r3, #1
   842e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
   842e4:	1c5c      	adds	r4, r3, #1
   842e6:	d1f8      	bne.n	842da <memmove+0x16>
   842e8:	bcf0      	pop	{r4, r5, r6, r7}
   842ea:	4770      	bx	lr
   842ec:	2a0f      	cmp	r2, #15
   842ee:	d944      	bls.n	8437a <memmove+0xb6>
   842f0:	ea40 0301 	orr.w	r3, r0, r1
   842f4:	079b      	lsls	r3, r3, #30
   842f6:	d144      	bne.n	84382 <memmove+0xbe>
   842f8:	f1a2 0710 	sub.w	r7, r2, #16
   842fc:	093f      	lsrs	r7, r7, #4
   842fe:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   84302:	3610      	adds	r6, #16
   84304:	460c      	mov	r4, r1
   84306:	4603      	mov	r3, r0
   84308:	6825      	ldr	r5, [r4, #0]
   8430a:	3310      	adds	r3, #16
   8430c:	f843 5c10 	str.w	r5, [r3, #-16]
   84310:	6865      	ldr	r5, [r4, #4]
   84312:	3410      	adds	r4, #16
   84314:	f843 5c0c 	str.w	r5, [r3, #-12]
   84318:	f854 5c08 	ldr.w	r5, [r4, #-8]
   8431c:	f843 5c08 	str.w	r5, [r3, #-8]
   84320:	f854 5c04 	ldr.w	r5, [r4, #-4]
   84324:	f843 5c04 	str.w	r5, [r3, #-4]
   84328:	42b3      	cmp	r3, r6
   8432a:	d1ed      	bne.n	84308 <memmove+0x44>
   8432c:	1c7b      	adds	r3, r7, #1
   8432e:	f002 0c0f 	and.w	ip, r2, #15
   84332:	011b      	lsls	r3, r3, #4
   84334:	f1bc 0f03 	cmp.w	ip, #3
   84338:	4419      	add	r1, r3
   8433a:	4403      	add	r3, r0
   8433c:	d923      	bls.n	84386 <memmove+0xc2>
   8433e:	460e      	mov	r6, r1
   84340:	461d      	mov	r5, r3
   84342:	4664      	mov	r4, ip
   84344:	f856 7b04 	ldr.w	r7, [r6], #4
   84348:	3c04      	subs	r4, #4
   8434a:	2c03      	cmp	r4, #3
   8434c:	f845 7b04 	str.w	r7, [r5], #4
   84350:	d8f8      	bhi.n	84344 <memmove+0x80>
   84352:	f1ac 0404 	sub.w	r4, ip, #4
   84356:	f024 0403 	bic.w	r4, r4, #3
   8435a:	3404      	adds	r4, #4
   8435c:	f002 0203 	and.w	r2, r2, #3
   84360:	4423      	add	r3, r4
   84362:	4421      	add	r1, r4
   84364:	2a00      	cmp	r2, #0
   84366:	d0bf      	beq.n	842e8 <memmove+0x24>
   84368:	441a      	add	r2, r3
   8436a:	f811 4b01 	ldrb.w	r4, [r1], #1
   8436e:	f803 4b01 	strb.w	r4, [r3], #1
   84372:	4293      	cmp	r3, r2
   84374:	d1f9      	bne.n	8436a <memmove+0xa6>
   84376:	bcf0      	pop	{r4, r5, r6, r7}
   84378:	4770      	bx	lr
   8437a:	4603      	mov	r3, r0
   8437c:	2a00      	cmp	r2, #0
   8437e:	d1f3      	bne.n	84368 <memmove+0xa4>
   84380:	e7b2      	b.n	842e8 <memmove+0x24>
   84382:	4603      	mov	r3, r0
   84384:	e7f0      	b.n	84368 <memmove+0xa4>
   84386:	4662      	mov	r2, ip
   84388:	2a00      	cmp	r2, #0
   8438a:	d1ed      	bne.n	84368 <memmove+0xa4>
   8438c:	e7ac      	b.n	842e8 <memmove+0x24>
   8438e:	bf00      	nop

00084390 <__malloc_lock>:
   84390:	4770      	bx	lr
   84392:	bf00      	nop

00084394 <__malloc_unlock>:
   84394:	4770      	bx	lr
   84396:	bf00      	nop

00084398 <_realloc_r>:
   84398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8439c:	460c      	mov	r4, r1
   8439e:	b083      	sub	sp, #12
   843a0:	4690      	mov	r8, r2
   843a2:	4681      	mov	r9, r0
   843a4:	2900      	cmp	r1, #0
   843a6:	f000 80ba 	beq.w	8451e <_realloc_r+0x186>
   843aa:	f7ff fff1 	bl	84390 <__malloc_lock>
   843ae:	f108 060b 	add.w	r6, r8, #11
   843b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   843b6:	2e16      	cmp	r6, #22
   843b8:	f023 0503 	bic.w	r5, r3, #3
   843bc:	f1a4 0708 	sub.w	r7, r4, #8
   843c0:	d84b      	bhi.n	8445a <_realloc_r+0xc2>
   843c2:	2110      	movs	r1, #16
   843c4:	460e      	mov	r6, r1
   843c6:	45b0      	cmp	r8, r6
   843c8:	d84c      	bhi.n	84464 <_realloc_r+0xcc>
   843ca:	428d      	cmp	r5, r1
   843cc:	da51      	bge.n	84472 <_realloc_r+0xda>
   843ce:	f8df b384 	ldr.w	fp, [pc, #900]	; 84754 <_realloc_r+0x3bc>
   843d2:	1978      	adds	r0, r7, r5
   843d4:	f8db e008 	ldr.w	lr, [fp, #8]
   843d8:	4586      	cmp	lr, r0
   843da:	f000 80a6 	beq.w	8452a <_realloc_r+0x192>
   843de:	6842      	ldr	r2, [r0, #4]
   843e0:	f022 0c01 	bic.w	ip, r2, #1
   843e4:	4484      	add	ip, r0
   843e6:	f8dc c004 	ldr.w	ip, [ip, #4]
   843ea:	f01c 0f01 	tst.w	ip, #1
   843ee:	d054      	beq.n	8449a <_realloc_r+0x102>
   843f0:	2200      	movs	r2, #0
   843f2:	4610      	mov	r0, r2
   843f4:	07db      	lsls	r3, r3, #31
   843f6:	d46f      	bmi.n	844d8 <_realloc_r+0x140>
   843f8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   843fc:	ebc3 0a07 	rsb	sl, r3, r7
   84400:	f8da 3004 	ldr.w	r3, [sl, #4]
   84404:	f023 0303 	bic.w	r3, r3, #3
   84408:	442b      	add	r3, r5
   8440a:	2800      	cmp	r0, #0
   8440c:	d062      	beq.n	844d4 <_realloc_r+0x13c>
   8440e:	4570      	cmp	r0, lr
   84410:	f000 80e9 	beq.w	845e6 <_realloc_r+0x24e>
   84414:	eb02 0e03 	add.w	lr, r2, r3
   84418:	458e      	cmp	lr, r1
   8441a:	db5b      	blt.n	844d4 <_realloc_r+0x13c>
   8441c:	68c3      	ldr	r3, [r0, #12]
   8441e:	6882      	ldr	r2, [r0, #8]
   84420:	46d0      	mov	r8, sl
   84422:	60d3      	str	r3, [r2, #12]
   84424:	609a      	str	r2, [r3, #8]
   84426:	f858 1f08 	ldr.w	r1, [r8, #8]!
   8442a:	f8da 300c 	ldr.w	r3, [sl, #12]
   8442e:	1f2a      	subs	r2, r5, #4
   84430:	2a24      	cmp	r2, #36	; 0x24
   84432:	60cb      	str	r3, [r1, #12]
   84434:	6099      	str	r1, [r3, #8]
   84436:	f200 8123 	bhi.w	84680 <_realloc_r+0x2e8>
   8443a:	2a13      	cmp	r2, #19
   8443c:	f240 80b0 	bls.w	845a0 <_realloc_r+0x208>
   84440:	6823      	ldr	r3, [r4, #0]
   84442:	2a1b      	cmp	r2, #27
   84444:	f8ca 3008 	str.w	r3, [sl, #8]
   84448:	6863      	ldr	r3, [r4, #4]
   8444a:	f8ca 300c 	str.w	r3, [sl, #12]
   8444e:	f200 812b 	bhi.w	846a8 <_realloc_r+0x310>
   84452:	3408      	adds	r4, #8
   84454:	f10a 0310 	add.w	r3, sl, #16
   84458:	e0a3      	b.n	845a2 <_realloc_r+0x20a>
   8445a:	f026 0607 	bic.w	r6, r6, #7
   8445e:	2e00      	cmp	r6, #0
   84460:	4631      	mov	r1, r6
   84462:	dab0      	bge.n	843c6 <_realloc_r+0x2e>
   84464:	230c      	movs	r3, #12
   84466:	2000      	movs	r0, #0
   84468:	f8c9 3000 	str.w	r3, [r9]
   8446c:	b003      	add	sp, #12
   8446e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84472:	46a0      	mov	r8, r4
   84474:	1baa      	subs	r2, r5, r6
   84476:	2a0f      	cmp	r2, #15
   84478:	f003 0301 	and.w	r3, r3, #1
   8447c:	d81a      	bhi.n	844b4 <_realloc_r+0x11c>
   8447e:	432b      	orrs	r3, r5
   84480:	607b      	str	r3, [r7, #4]
   84482:	443d      	add	r5, r7
   84484:	686b      	ldr	r3, [r5, #4]
   84486:	f043 0301 	orr.w	r3, r3, #1
   8448a:	606b      	str	r3, [r5, #4]
   8448c:	4648      	mov	r0, r9
   8448e:	f7ff ff81 	bl	84394 <__malloc_unlock>
   84492:	4640      	mov	r0, r8
   84494:	b003      	add	sp, #12
   84496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8449a:	f022 0203 	bic.w	r2, r2, #3
   8449e:	eb02 0c05 	add.w	ip, r2, r5
   844a2:	458c      	cmp	ip, r1
   844a4:	dba6      	blt.n	843f4 <_realloc_r+0x5c>
   844a6:	68c2      	ldr	r2, [r0, #12]
   844a8:	6881      	ldr	r1, [r0, #8]
   844aa:	46a0      	mov	r8, r4
   844ac:	60ca      	str	r2, [r1, #12]
   844ae:	4665      	mov	r5, ip
   844b0:	6091      	str	r1, [r2, #8]
   844b2:	e7df      	b.n	84474 <_realloc_r+0xdc>
   844b4:	19b9      	adds	r1, r7, r6
   844b6:	4333      	orrs	r3, r6
   844b8:	f042 0001 	orr.w	r0, r2, #1
   844bc:	607b      	str	r3, [r7, #4]
   844be:	440a      	add	r2, r1
   844c0:	6048      	str	r0, [r1, #4]
   844c2:	6853      	ldr	r3, [r2, #4]
   844c4:	3108      	adds	r1, #8
   844c6:	f043 0301 	orr.w	r3, r3, #1
   844ca:	6053      	str	r3, [r2, #4]
   844cc:	4648      	mov	r0, r9
   844ce:	f7ff f91f 	bl	83710 <_free_r>
   844d2:	e7db      	b.n	8448c <_realloc_r+0xf4>
   844d4:	428b      	cmp	r3, r1
   844d6:	da33      	bge.n	84540 <_realloc_r+0x1a8>
   844d8:	4641      	mov	r1, r8
   844da:	4648      	mov	r0, r9
   844dc:	f7ff fc0c 	bl	83cf8 <_malloc_r>
   844e0:	4680      	mov	r8, r0
   844e2:	2800      	cmp	r0, #0
   844e4:	d0d2      	beq.n	8448c <_realloc_r+0xf4>
   844e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   844ea:	f1a0 0108 	sub.w	r1, r0, #8
   844ee:	f023 0201 	bic.w	r2, r3, #1
   844f2:	443a      	add	r2, r7
   844f4:	4291      	cmp	r1, r2
   844f6:	f000 80bc 	beq.w	84672 <_realloc_r+0x2da>
   844fa:	1f2a      	subs	r2, r5, #4
   844fc:	2a24      	cmp	r2, #36	; 0x24
   844fe:	d86e      	bhi.n	845de <_realloc_r+0x246>
   84500:	2a13      	cmp	r2, #19
   84502:	d842      	bhi.n	8458a <_realloc_r+0x1f2>
   84504:	4603      	mov	r3, r0
   84506:	4622      	mov	r2, r4
   84508:	6811      	ldr	r1, [r2, #0]
   8450a:	6019      	str	r1, [r3, #0]
   8450c:	6851      	ldr	r1, [r2, #4]
   8450e:	6059      	str	r1, [r3, #4]
   84510:	6892      	ldr	r2, [r2, #8]
   84512:	609a      	str	r2, [r3, #8]
   84514:	4621      	mov	r1, r4
   84516:	4648      	mov	r0, r9
   84518:	f7ff f8fa 	bl	83710 <_free_r>
   8451c:	e7b6      	b.n	8448c <_realloc_r+0xf4>
   8451e:	4611      	mov	r1, r2
   84520:	b003      	add	sp, #12
   84522:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84526:	f7ff bbe7 	b.w	83cf8 <_malloc_r>
   8452a:	f8de 2004 	ldr.w	r2, [lr, #4]
   8452e:	f106 0c10 	add.w	ip, r6, #16
   84532:	f022 0203 	bic.w	r2, r2, #3
   84536:	1950      	adds	r0, r2, r5
   84538:	4560      	cmp	r0, ip
   8453a:	da3d      	bge.n	845b8 <_realloc_r+0x220>
   8453c:	4670      	mov	r0, lr
   8453e:	e759      	b.n	843f4 <_realloc_r+0x5c>
   84540:	46d0      	mov	r8, sl
   84542:	f858 0f08 	ldr.w	r0, [r8, #8]!
   84546:	f8da 100c 	ldr.w	r1, [sl, #12]
   8454a:	1f2a      	subs	r2, r5, #4
   8454c:	2a24      	cmp	r2, #36	; 0x24
   8454e:	60c1      	str	r1, [r0, #12]
   84550:	6088      	str	r0, [r1, #8]
   84552:	f200 80a0 	bhi.w	84696 <_realloc_r+0x2fe>
   84556:	2a13      	cmp	r2, #19
   84558:	f240 809b 	bls.w	84692 <_realloc_r+0x2fa>
   8455c:	6821      	ldr	r1, [r4, #0]
   8455e:	2a1b      	cmp	r2, #27
   84560:	f8ca 1008 	str.w	r1, [sl, #8]
   84564:	6861      	ldr	r1, [r4, #4]
   84566:	f8ca 100c 	str.w	r1, [sl, #12]
   8456a:	f200 80b2 	bhi.w	846d2 <_realloc_r+0x33a>
   8456e:	3408      	adds	r4, #8
   84570:	f10a 0210 	add.w	r2, sl, #16
   84574:	6821      	ldr	r1, [r4, #0]
   84576:	461d      	mov	r5, r3
   84578:	6011      	str	r1, [r2, #0]
   8457a:	6861      	ldr	r1, [r4, #4]
   8457c:	4657      	mov	r7, sl
   8457e:	6051      	str	r1, [r2, #4]
   84580:	68a3      	ldr	r3, [r4, #8]
   84582:	6093      	str	r3, [r2, #8]
   84584:	f8da 3004 	ldr.w	r3, [sl, #4]
   84588:	e774      	b.n	84474 <_realloc_r+0xdc>
   8458a:	6823      	ldr	r3, [r4, #0]
   8458c:	2a1b      	cmp	r2, #27
   8458e:	6003      	str	r3, [r0, #0]
   84590:	6863      	ldr	r3, [r4, #4]
   84592:	6043      	str	r3, [r0, #4]
   84594:	d862      	bhi.n	8465c <_realloc_r+0x2c4>
   84596:	f100 0308 	add.w	r3, r0, #8
   8459a:	f104 0208 	add.w	r2, r4, #8
   8459e:	e7b3      	b.n	84508 <_realloc_r+0x170>
   845a0:	4643      	mov	r3, r8
   845a2:	6822      	ldr	r2, [r4, #0]
   845a4:	4675      	mov	r5, lr
   845a6:	601a      	str	r2, [r3, #0]
   845a8:	6862      	ldr	r2, [r4, #4]
   845aa:	4657      	mov	r7, sl
   845ac:	605a      	str	r2, [r3, #4]
   845ae:	68a2      	ldr	r2, [r4, #8]
   845b0:	609a      	str	r2, [r3, #8]
   845b2:	f8da 3004 	ldr.w	r3, [sl, #4]
   845b6:	e75d      	b.n	84474 <_realloc_r+0xdc>
   845b8:	1b83      	subs	r3, r0, r6
   845ba:	4437      	add	r7, r6
   845bc:	f043 0301 	orr.w	r3, r3, #1
   845c0:	f8cb 7008 	str.w	r7, [fp, #8]
   845c4:	607b      	str	r3, [r7, #4]
   845c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   845ca:	4648      	mov	r0, r9
   845cc:	f003 0301 	and.w	r3, r3, #1
   845d0:	431e      	orrs	r6, r3
   845d2:	f844 6c04 	str.w	r6, [r4, #-4]
   845d6:	f7ff fedd 	bl	84394 <__malloc_unlock>
   845da:	4620      	mov	r0, r4
   845dc:	e75a      	b.n	84494 <_realloc_r+0xfc>
   845de:	4621      	mov	r1, r4
   845e0:	f7ff fe70 	bl	842c4 <memmove>
   845e4:	e796      	b.n	84514 <_realloc_r+0x17c>
   845e6:	eb02 0c03 	add.w	ip, r2, r3
   845ea:	f106 0210 	add.w	r2, r6, #16
   845ee:	4594      	cmp	ip, r2
   845f0:	f6ff af70 	blt.w	844d4 <_realloc_r+0x13c>
   845f4:	4657      	mov	r7, sl
   845f6:	f857 1f08 	ldr.w	r1, [r7, #8]!
   845fa:	f8da 300c 	ldr.w	r3, [sl, #12]
   845fe:	1f2a      	subs	r2, r5, #4
   84600:	2a24      	cmp	r2, #36	; 0x24
   84602:	60cb      	str	r3, [r1, #12]
   84604:	6099      	str	r1, [r3, #8]
   84606:	f200 8086 	bhi.w	84716 <_realloc_r+0x37e>
   8460a:	2a13      	cmp	r2, #19
   8460c:	d977      	bls.n	846fe <_realloc_r+0x366>
   8460e:	6823      	ldr	r3, [r4, #0]
   84610:	2a1b      	cmp	r2, #27
   84612:	f8ca 3008 	str.w	r3, [sl, #8]
   84616:	6863      	ldr	r3, [r4, #4]
   84618:	f8ca 300c 	str.w	r3, [sl, #12]
   8461c:	f200 8084 	bhi.w	84728 <_realloc_r+0x390>
   84620:	3408      	adds	r4, #8
   84622:	f10a 0310 	add.w	r3, sl, #16
   84626:	6822      	ldr	r2, [r4, #0]
   84628:	601a      	str	r2, [r3, #0]
   8462a:	6862      	ldr	r2, [r4, #4]
   8462c:	605a      	str	r2, [r3, #4]
   8462e:	68a2      	ldr	r2, [r4, #8]
   84630:	609a      	str	r2, [r3, #8]
   84632:	ebc6 020c 	rsb	r2, r6, ip
   84636:	eb0a 0306 	add.w	r3, sl, r6
   8463a:	f042 0201 	orr.w	r2, r2, #1
   8463e:	f8cb 3008 	str.w	r3, [fp, #8]
   84642:	605a      	str	r2, [r3, #4]
   84644:	f8da 3004 	ldr.w	r3, [sl, #4]
   84648:	4648      	mov	r0, r9
   8464a:	f003 0301 	and.w	r3, r3, #1
   8464e:	431e      	orrs	r6, r3
   84650:	f8ca 6004 	str.w	r6, [sl, #4]
   84654:	f7ff fe9e 	bl	84394 <__malloc_unlock>
   84658:	4638      	mov	r0, r7
   8465a:	e71b      	b.n	84494 <_realloc_r+0xfc>
   8465c:	68a3      	ldr	r3, [r4, #8]
   8465e:	2a24      	cmp	r2, #36	; 0x24
   84660:	6083      	str	r3, [r0, #8]
   84662:	68e3      	ldr	r3, [r4, #12]
   84664:	60c3      	str	r3, [r0, #12]
   84666:	d02b      	beq.n	846c0 <_realloc_r+0x328>
   84668:	f100 0310 	add.w	r3, r0, #16
   8466c:	f104 0210 	add.w	r2, r4, #16
   84670:	e74a      	b.n	84508 <_realloc_r+0x170>
   84672:	f850 2c04 	ldr.w	r2, [r0, #-4]
   84676:	46a0      	mov	r8, r4
   84678:	f022 0203 	bic.w	r2, r2, #3
   8467c:	4415      	add	r5, r2
   8467e:	e6f9      	b.n	84474 <_realloc_r+0xdc>
   84680:	4621      	mov	r1, r4
   84682:	4640      	mov	r0, r8
   84684:	4675      	mov	r5, lr
   84686:	4657      	mov	r7, sl
   84688:	f7ff fe1c 	bl	842c4 <memmove>
   8468c:	f8da 3004 	ldr.w	r3, [sl, #4]
   84690:	e6f0      	b.n	84474 <_realloc_r+0xdc>
   84692:	4642      	mov	r2, r8
   84694:	e76e      	b.n	84574 <_realloc_r+0x1dc>
   84696:	4621      	mov	r1, r4
   84698:	4640      	mov	r0, r8
   8469a:	461d      	mov	r5, r3
   8469c:	4657      	mov	r7, sl
   8469e:	f7ff fe11 	bl	842c4 <memmove>
   846a2:	f8da 3004 	ldr.w	r3, [sl, #4]
   846a6:	e6e5      	b.n	84474 <_realloc_r+0xdc>
   846a8:	68a3      	ldr	r3, [r4, #8]
   846aa:	2a24      	cmp	r2, #36	; 0x24
   846ac:	f8ca 3010 	str.w	r3, [sl, #16]
   846b0:	68e3      	ldr	r3, [r4, #12]
   846b2:	f8ca 3014 	str.w	r3, [sl, #20]
   846b6:	d018      	beq.n	846ea <_realloc_r+0x352>
   846b8:	3410      	adds	r4, #16
   846ba:	f10a 0318 	add.w	r3, sl, #24
   846be:	e770      	b.n	845a2 <_realloc_r+0x20a>
   846c0:	6922      	ldr	r2, [r4, #16]
   846c2:	f100 0318 	add.w	r3, r0, #24
   846c6:	6102      	str	r2, [r0, #16]
   846c8:	6961      	ldr	r1, [r4, #20]
   846ca:	f104 0218 	add.w	r2, r4, #24
   846ce:	6141      	str	r1, [r0, #20]
   846d0:	e71a      	b.n	84508 <_realloc_r+0x170>
   846d2:	68a1      	ldr	r1, [r4, #8]
   846d4:	2a24      	cmp	r2, #36	; 0x24
   846d6:	f8ca 1010 	str.w	r1, [sl, #16]
   846da:	68e1      	ldr	r1, [r4, #12]
   846dc:	f8ca 1014 	str.w	r1, [sl, #20]
   846e0:	d00f      	beq.n	84702 <_realloc_r+0x36a>
   846e2:	3410      	adds	r4, #16
   846e4:	f10a 0218 	add.w	r2, sl, #24
   846e8:	e744      	b.n	84574 <_realloc_r+0x1dc>
   846ea:	6922      	ldr	r2, [r4, #16]
   846ec:	f10a 0320 	add.w	r3, sl, #32
   846f0:	f8ca 2018 	str.w	r2, [sl, #24]
   846f4:	6962      	ldr	r2, [r4, #20]
   846f6:	3418      	adds	r4, #24
   846f8:	f8ca 201c 	str.w	r2, [sl, #28]
   846fc:	e751      	b.n	845a2 <_realloc_r+0x20a>
   846fe:	463b      	mov	r3, r7
   84700:	e791      	b.n	84626 <_realloc_r+0x28e>
   84702:	6921      	ldr	r1, [r4, #16]
   84704:	f10a 0220 	add.w	r2, sl, #32
   84708:	f8ca 1018 	str.w	r1, [sl, #24]
   8470c:	6961      	ldr	r1, [r4, #20]
   8470e:	3418      	adds	r4, #24
   84710:	f8ca 101c 	str.w	r1, [sl, #28]
   84714:	e72e      	b.n	84574 <_realloc_r+0x1dc>
   84716:	4621      	mov	r1, r4
   84718:	4638      	mov	r0, r7
   8471a:	f8cd c004 	str.w	ip, [sp, #4]
   8471e:	f7ff fdd1 	bl	842c4 <memmove>
   84722:	f8dd c004 	ldr.w	ip, [sp, #4]
   84726:	e784      	b.n	84632 <_realloc_r+0x29a>
   84728:	68a3      	ldr	r3, [r4, #8]
   8472a:	2a24      	cmp	r2, #36	; 0x24
   8472c:	f8ca 3010 	str.w	r3, [sl, #16]
   84730:	68e3      	ldr	r3, [r4, #12]
   84732:	f8ca 3014 	str.w	r3, [sl, #20]
   84736:	d003      	beq.n	84740 <_realloc_r+0x3a8>
   84738:	3410      	adds	r4, #16
   8473a:	f10a 0318 	add.w	r3, sl, #24
   8473e:	e772      	b.n	84626 <_realloc_r+0x28e>
   84740:	6922      	ldr	r2, [r4, #16]
   84742:	f10a 0320 	add.w	r3, sl, #32
   84746:	f8ca 2018 	str.w	r2, [sl, #24]
   8474a:	6962      	ldr	r2, [r4, #20]
   8474c:	3418      	adds	r4, #24
   8474e:	f8ca 201c 	str.w	r2, [sl, #28]
   84752:	e768      	b.n	84626 <_realloc_r+0x28e>
   84754:	2007057c 	.word	0x2007057c

00084758 <_sbrk_r>:
   84758:	b538      	push	{r3, r4, r5, lr}
   8475a:	4c07      	ldr	r4, [pc, #28]	; (84778 <_sbrk_r+0x20>)
   8475c:	2300      	movs	r3, #0
   8475e:	4605      	mov	r5, r0
   84760:	4608      	mov	r0, r1
   84762:	6023      	str	r3, [r4, #0]
   84764:	f7fc fb3c 	bl	80de0 <_sbrk>
   84768:	1c43      	adds	r3, r0, #1
   8476a:	d000      	beq.n	8476e <_sbrk_r+0x16>
   8476c:	bd38      	pop	{r3, r4, r5, pc}
   8476e:	6823      	ldr	r3, [r4, #0]
   84770:	2b00      	cmp	r3, #0
   84772:	d0fb      	beq.n	8476c <_sbrk_r+0x14>
   84774:	602b      	str	r3, [r5, #0]
   84776:	bd38      	pop	{r3, r4, r5, pc}
   84778:	20078cb8 	.word	0x20078cb8

0008477c <__sread>:
   8477c:	b510      	push	{r4, lr}
   8477e:	460c      	mov	r4, r1
   84780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84784:	f000 f938 	bl	849f8 <_read_r>
   84788:	2800      	cmp	r0, #0
   8478a:	db03      	blt.n	84794 <__sread+0x18>
   8478c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8478e:	4403      	add	r3, r0
   84790:	6523      	str	r3, [r4, #80]	; 0x50
   84792:	bd10      	pop	{r4, pc}
   84794:	89a3      	ldrh	r3, [r4, #12]
   84796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8479a:	81a3      	strh	r3, [r4, #12]
   8479c:	bd10      	pop	{r4, pc}
   8479e:	bf00      	nop

000847a0 <__swrite>:
   847a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   847a4:	460c      	mov	r4, r1
   847a6:	8989      	ldrh	r1, [r1, #12]
   847a8:	461d      	mov	r5, r3
   847aa:	05cb      	lsls	r3, r1, #23
   847ac:	4616      	mov	r6, r2
   847ae:	4607      	mov	r7, r0
   847b0:	d506      	bpl.n	847c0 <__swrite+0x20>
   847b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   847b6:	2200      	movs	r2, #0
   847b8:	2302      	movs	r3, #2
   847ba:	f000 f909 	bl	849d0 <_lseek_r>
   847be:	89a1      	ldrh	r1, [r4, #12]
   847c0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   847c4:	81a1      	strh	r1, [r4, #12]
   847c6:	4638      	mov	r0, r7
   847c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   847cc:	4632      	mov	r2, r6
   847ce:	462b      	mov	r3, r5
   847d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   847d4:	f000 b814 	b.w	84800 <_write_r>

000847d8 <__sseek>:
   847d8:	b510      	push	{r4, lr}
   847da:	460c      	mov	r4, r1
   847dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   847e0:	f000 f8f6 	bl	849d0 <_lseek_r>
   847e4:	89a3      	ldrh	r3, [r4, #12]
   847e6:	1c42      	adds	r2, r0, #1
   847e8:	bf0e      	itee	eq
   847ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   847ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   847f2:	6520      	strne	r0, [r4, #80]	; 0x50
   847f4:	81a3      	strh	r3, [r4, #12]
   847f6:	bd10      	pop	{r4, pc}

000847f8 <__sclose>:
   847f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   847fc:	f000 b868 	b.w	848d0 <_close_r>

00084800 <_write_r>:
   84800:	b570      	push	{r4, r5, r6, lr}
   84802:	4c08      	ldr	r4, [pc, #32]	; (84824 <_write_r+0x24>)
   84804:	4606      	mov	r6, r0
   84806:	2500      	movs	r5, #0
   84808:	4608      	mov	r0, r1
   8480a:	4611      	mov	r1, r2
   8480c:	461a      	mov	r2, r3
   8480e:	6025      	str	r5, [r4, #0]
   84810:	f7fb ff3a 	bl	80688 <_write>
   84814:	1c43      	adds	r3, r0, #1
   84816:	d000      	beq.n	8481a <_write_r+0x1a>
   84818:	bd70      	pop	{r4, r5, r6, pc}
   8481a:	6823      	ldr	r3, [r4, #0]
   8481c:	2b00      	cmp	r3, #0
   8481e:	d0fb      	beq.n	84818 <_write_r+0x18>
   84820:	6033      	str	r3, [r6, #0]
   84822:	bd70      	pop	{r4, r5, r6, pc}
   84824:	20078cb8 	.word	0x20078cb8

00084828 <__register_exitproc>:
   84828:	b5f0      	push	{r4, r5, r6, r7, lr}
   8482a:	4c27      	ldr	r4, [pc, #156]	; (848c8 <__register_exitproc+0xa0>)
   8482c:	b085      	sub	sp, #20
   8482e:	6826      	ldr	r6, [r4, #0]
   84830:	4607      	mov	r7, r0
   84832:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   84836:	2c00      	cmp	r4, #0
   84838:	d040      	beq.n	848bc <__register_exitproc+0x94>
   8483a:	6865      	ldr	r5, [r4, #4]
   8483c:	2d1f      	cmp	r5, #31
   8483e:	dd1e      	ble.n	8487e <__register_exitproc+0x56>
   84840:	4822      	ldr	r0, [pc, #136]	; (848cc <__register_exitproc+0xa4>)
   84842:	b918      	cbnz	r0, 8484c <__register_exitproc+0x24>
   84844:	f04f 30ff 	mov.w	r0, #4294967295
   84848:	b005      	add	sp, #20
   8484a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8484c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84850:	9103      	str	r1, [sp, #12]
   84852:	9202      	str	r2, [sp, #8]
   84854:	9301      	str	r3, [sp, #4]
   84856:	f7ff fa47 	bl	83ce8 <malloc>
   8485a:	9903      	ldr	r1, [sp, #12]
   8485c:	4604      	mov	r4, r0
   8485e:	9a02      	ldr	r2, [sp, #8]
   84860:	9b01      	ldr	r3, [sp, #4]
   84862:	2800      	cmp	r0, #0
   84864:	d0ee      	beq.n	84844 <__register_exitproc+0x1c>
   84866:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   8486a:	2000      	movs	r0, #0
   8486c:	6025      	str	r5, [r4, #0]
   8486e:	6060      	str	r0, [r4, #4]
   84870:	4605      	mov	r5, r0
   84872:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84876:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   8487a:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   8487e:	b93f      	cbnz	r7, 84890 <__register_exitproc+0x68>
   84880:	1c6b      	adds	r3, r5, #1
   84882:	2000      	movs	r0, #0
   84884:	3502      	adds	r5, #2
   84886:	6063      	str	r3, [r4, #4]
   84888:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   8488c:	b005      	add	sp, #20
   8488e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84890:	2601      	movs	r6, #1
   84892:	40ae      	lsls	r6, r5
   84894:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   84898:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   8489c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   848a0:	2f02      	cmp	r7, #2
   848a2:	ea42 0206 	orr.w	r2, r2, r6
   848a6:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   848aa:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   848ae:	d1e7      	bne.n	84880 <__register_exitproc+0x58>
   848b0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   848b4:	431e      	orrs	r6, r3
   848b6:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   848ba:	e7e1      	b.n	84880 <__register_exitproc+0x58>
   848bc:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   848c0:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   848c4:	e7b9      	b.n	8483a <__register_exitproc+0x12>
   848c6:	bf00      	nop
   848c8:	00084a84 	.word	0x00084a84
   848cc:	00083ce9 	.word	0x00083ce9

000848d0 <_close_r>:
   848d0:	b538      	push	{r3, r4, r5, lr}
   848d2:	4c07      	ldr	r4, [pc, #28]	; (848f0 <_close_r+0x20>)
   848d4:	2300      	movs	r3, #0
   848d6:	4605      	mov	r5, r0
   848d8:	4608      	mov	r0, r1
   848da:	6023      	str	r3, [r4, #0]
   848dc:	f7fc fa9a 	bl	80e14 <_close>
   848e0:	1c43      	adds	r3, r0, #1
   848e2:	d000      	beq.n	848e6 <_close_r+0x16>
   848e4:	bd38      	pop	{r3, r4, r5, pc}
   848e6:	6823      	ldr	r3, [r4, #0]
   848e8:	2b00      	cmp	r3, #0
   848ea:	d0fb      	beq.n	848e4 <_close_r+0x14>
   848ec:	602b      	str	r3, [r5, #0]
   848ee:	bd38      	pop	{r3, r4, r5, pc}
   848f0:	20078cb8 	.word	0x20078cb8

000848f4 <_fclose_r>:
   848f4:	b570      	push	{r4, r5, r6, lr}
   848f6:	460c      	mov	r4, r1
   848f8:	4605      	mov	r5, r0
   848fa:	b131      	cbz	r1, 8490a <_fclose_r+0x16>
   848fc:	b110      	cbz	r0, 84904 <_fclose_r+0x10>
   848fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84900:	2b00      	cmp	r3, #0
   84902:	d02f      	beq.n	84964 <_fclose_r+0x70>
   84904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84908:	b90b      	cbnz	r3, 8490e <_fclose_r+0x1a>
   8490a:	2000      	movs	r0, #0
   8490c:	bd70      	pop	{r4, r5, r6, pc}
   8490e:	4628      	mov	r0, r5
   84910:	4621      	mov	r1, r4
   84912:	f7fe fdfd 	bl	83510 <_fflush_r>
   84916:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84918:	4606      	mov	r6, r0
   8491a:	b133      	cbz	r3, 8492a <_fclose_r+0x36>
   8491c:	4628      	mov	r0, r5
   8491e:	69e1      	ldr	r1, [r4, #28]
   84920:	4798      	blx	r3
   84922:	2800      	cmp	r0, #0
   84924:	bfb8      	it	lt
   84926:	f04f 36ff 	movlt.w	r6, #4294967295
   8492a:	89a3      	ldrh	r3, [r4, #12]
   8492c:	061b      	lsls	r3, r3, #24
   8492e:	d41c      	bmi.n	8496a <_fclose_r+0x76>
   84930:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84932:	b141      	cbz	r1, 84946 <_fclose_r+0x52>
   84934:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84938:	4299      	cmp	r1, r3
   8493a:	d002      	beq.n	84942 <_fclose_r+0x4e>
   8493c:	4628      	mov	r0, r5
   8493e:	f7fe fee7 	bl	83710 <_free_r>
   84942:	2300      	movs	r3, #0
   84944:	6323      	str	r3, [r4, #48]	; 0x30
   84946:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84948:	b121      	cbz	r1, 84954 <_fclose_r+0x60>
   8494a:	4628      	mov	r0, r5
   8494c:	f7fe fee0 	bl	83710 <_free_r>
   84950:	2300      	movs	r3, #0
   84952:	6463      	str	r3, [r4, #68]	; 0x44
   84954:	f7fe fe72 	bl	8363c <__sfp_lock_acquire>
   84958:	2300      	movs	r3, #0
   8495a:	81a3      	strh	r3, [r4, #12]
   8495c:	f7fe fe70 	bl	83640 <__sfp_lock_release>
   84960:	4630      	mov	r0, r6
   84962:	bd70      	pop	{r4, r5, r6, pc}
   84964:	f7fe fdf0 	bl	83548 <__sinit>
   84968:	e7cc      	b.n	84904 <_fclose_r+0x10>
   8496a:	4628      	mov	r0, r5
   8496c:	6921      	ldr	r1, [r4, #16]
   8496e:	f7fe fecf 	bl	83710 <_free_r>
   84972:	e7dd      	b.n	84930 <_fclose_r+0x3c>

00084974 <fclose>:
   84974:	4b02      	ldr	r3, [pc, #8]	; (84980 <fclose+0xc>)
   84976:	4601      	mov	r1, r0
   84978:	6818      	ldr	r0, [r3, #0]
   8497a:	f7ff bfbb 	b.w	848f4 <_fclose_r>
   8497e:	bf00      	nop
   84980:	20070578 	.word	0x20070578

00084984 <_fstat_r>:
   84984:	b538      	push	{r3, r4, r5, lr}
   84986:	4c08      	ldr	r4, [pc, #32]	; (849a8 <_fstat_r+0x24>)
   84988:	2300      	movs	r3, #0
   8498a:	4605      	mov	r5, r0
   8498c:	4608      	mov	r0, r1
   8498e:	4611      	mov	r1, r2
   84990:	6023      	str	r3, [r4, #0]
   84992:	f7fc fa43 	bl	80e1c <_fstat>
   84996:	1c43      	adds	r3, r0, #1
   84998:	d000      	beq.n	8499c <_fstat_r+0x18>
   8499a:	bd38      	pop	{r3, r4, r5, pc}
   8499c:	6823      	ldr	r3, [r4, #0]
   8499e:	2b00      	cmp	r3, #0
   849a0:	d0fb      	beq.n	8499a <_fstat_r+0x16>
   849a2:	602b      	str	r3, [r5, #0]
   849a4:	bd38      	pop	{r3, r4, r5, pc}
   849a6:	bf00      	nop
   849a8:	20078cb8 	.word	0x20078cb8

000849ac <_isatty_r>:
   849ac:	b538      	push	{r3, r4, r5, lr}
   849ae:	4c07      	ldr	r4, [pc, #28]	; (849cc <_isatty_r+0x20>)
   849b0:	2300      	movs	r3, #0
   849b2:	4605      	mov	r5, r0
   849b4:	4608      	mov	r0, r1
   849b6:	6023      	str	r3, [r4, #0]
   849b8:	f7fc fa36 	bl	80e28 <_isatty>
   849bc:	1c43      	adds	r3, r0, #1
   849be:	d000      	beq.n	849c2 <_isatty_r+0x16>
   849c0:	bd38      	pop	{r3, r4, r5, pc}
   849c2:	6823      	ldr	r3, [r4, #0]
   849c4:	2b00      	cmp	r3, #0
   849c6:	d0fb      	beq.n	849c0 <_isatty_r+0x14>
   849c8:	602b      	str	r3, [r5, #0]
   849ca:	bd38      	pop	{r3, r4, r5, pc}
   849cc:	20078cb8 	.word	0x20078cb8

000849d0 <_lseek_r>:
   849d0:	b570      	push	{r4, r5, r6, lr}
   849d2:	4c08      	ldr	r4, [pc, #32]	; (849f4 <_lseek_r+0x24>)
   849d4:	4606      	mov	r6, r0
   849d6:	2500      	movs	r5, #0
   849d8:	4608      	mov	r0, r1
   849da:	4611      	mov	r1, r2
   849dc:	461a      	mov	r2, r3
   849de:	6025      	str	r5, [r4, #0]
   849e0:	f7fc fa24 	bl	80e2c <_lseek>
   849e4:	1c43      	adds	r3, r0, #1
   849e6:	d000      	beq.n	849ea <_lseek_r+0x1a>
   849e8:	bd70      	pop	{r4, r5, r6, pc}
   849ea:	6823      	ldr	r3, [r4, #0]
   849ec:	2b00      	cmp	r3, #0
   849ee:	d0fb      	beq.n	849e8 <_lseek_r+0x18>
   849f0:	6033      	str	r3, [r6, #0]
   849f2:	bd70      	pop	{r4, r5, r6, pc}
   849f4:	20078cb8 	.word	0x20078cb8

000849f8 <_read_r>:
   849f8:	b570      	push	{r4, r5, r6, lr}
   849fa:	4c08      	ldr	r4, [pc, #32]	; (84a1c <_read_r+0x24>)
   849fc:	4606      	mov	r6, r0
   849fe:	2500      	movs	r5, #0
   84a00:	4608      	mov	r0, r1
   84a02:	4611      	mov	r1, r2
   84a04:	461a      	mov	r2, r3
   84a06:	6025      	str	r5, [r4, #0]
   84a08:	f7fb fe1e 	bl	80648 <_read>
   84a0c:	1c43      	adds	r3, r0, #1
   84a0e:	d000      	beq.n	84a12 <_read_r+0x1a>
   84a10:	bd70      	pop	{r4, r5, r6, pc}
   84a12:	6823      	ldr	r3, [r4, #0]
   84a14:	2b00      	cmp	r3, #0
   84a16:	d0fb      	beq.n	84a10 <_read_r+0x18>
   84a18:	6033      	str	r3, [r6, #0]
   84a1a:	bd70      	pop	{r4, r5, r6, pc}
   84a1c:	20078cb8 	.word	0x20078cb8
   84a20:	6b736154 	.word	0x6b736154
   84a24:	544f4d20 	.word	0x544f4d20
   84a28:	5252524f 	.word	0x5252524f
   84a2c:	52525252 	.word	0x52525252
   84a30:	00000000 	.word	0x00000000
   84a34:	6b736154 	.word	0x6b736154
   84a38:	4e455320 	.word	0x4e455320
   84a3c:	52524f53 	.word	0x52524f53
   84a40:	00525252 	.word	0x00525252
   84a44:	09097325 	.word	0x09097325
   84a48:	25096325 	.word	0x25096325
   84a4c:	75250975 	.word	0x75250975
   84a50:	0d752509 	.word	0x0d752509
   84a54:	0000000a 	.word	0x0000000a
   84a58:	454c4449 	.word	0x454c4449
   84a5c:	00000000 	.word	0x00000000
   84a60:	00000a0d 	.word	0x00000a0d
   84a64:	20726d54 	.word	0x20726d54
   84a68:	00637653 	.word	0x00637653
   84a6c:	6f746f4d 	.word	0x6f746f4d
   84a70:	00000072 	.word	0x00000072
   84a74:	6e756f53 	.word	0x6e756f53
   84a78:	6e657364 	.word	0x6e657364
   84a7c:	00726f73 	.word	0x00726f73
   84a80:	00000043 	.word	0x00000043

00084a84 <_global_impure_ptr>:
   84a84:	20070150                                P.. 

00084a88 <_init>:
   84a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84a8a:	bf00      	nop
   84a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84a8e:	bc08      	pop	{r3}
   84a90:	469e      	mov	lr, r3
   84a92:	4770      	bx	lr

00084a94 <__init_array_start>:
   84a94:	000833a9 	.word	0x000833a9

00084a98 <__frame_dummy_init_array_entry>:
   84a98:	00080119                                ....

00084a9c <_fini>:
   84a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84a9e:	bf00      	nop
   84aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84aa2:	bc08      	pop	{r3}
   84aa4:	469e      	mov	lr, r3
   84aa6:	4770      	bx	lr

00084aa8 <__fini_array_start>:
   84aa8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070140 	.word	0x20070140

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <Kp>:
2007012c:	00000004                                ....

20070130 <speed>:
20070130:	00000672                                r...

20070134 <x_pos>:
20070134:	00000014                                ....

20070138 <x_dest>:
20070138:	00000019                                ....

2007013c <g_interrupt_enabled>:
2007013c:	00000001                                ....

20070140 <SystemCoreClock>:
20070140:	003d0900                                ..=.

20070144 <uxCriticalNesting>:
20070144:	aaaaaaaa                                ....

20070148 <xFreeBytesRemaining>:
20070148:	00008000                                ....

2007014c <xNextTaskUnblockTime>:
2007014c:	0000ffff                                ....

20070150 <impure_data>:
20070150:	00000000 2007043c 200704a4 2007050c     ....<.. ... ... 
	...
20070184:	00084a80 00000000 00000000 00000000     .J..............
	...
200701f8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070208:	0005deec 0000000b 00000000 00000000     ................
	...

20070578 <_impure_ptr>:
20070578:	20070150                                P.. 

2007057c <__malloc_av_>:
	...
20070584:	2007057c 2007057c 20070584 20070584     |.. |.. ... ... 
20070594:	2007058c 2007058c 20070594 20070594     ... ... ... ... 
200705a4:	2007059c 2007059c 200705a4 200705a4     ... ... ... ... 
200705b4:	200705ac 200705ac 200705b4 200705b4     ... ... ... ... 
200705c4:	200705bc 200705bc 200705c4 200705c4     ... ... ... ... 
200705d4:	200705cc 200705cc 200705d4 200705d4     ... ... ... ... 
200705e4:	200705dc 200705dc 200705e4 200705e4     ... ... ... ... 
200705f4:	200705ec 200705ec 200705f4 200705f4     ... ... ... ... 
20070604:	200705fc 200705fc 20070604 20070604     ... ... ... ... 
20070614:	2007060c 2007060c 20070614 20070614     ... ... ... ... 
20070624:	2007061c 2007061c 20070624 20070624     ... ... $.. $.. 
20070634:	2007062c 2007062c 20070634 20070634     ,.. ,.. 4.. 4.. 
20070644:	2007063c 2007063c 20070644 20070644     <.. <.. D.. D.. 
20070654:	2007064c 2007064c 20070654 20070654     L.. L.. T.. T.. 
20070664:	2007065c 2007065c 20070664 20070664     \.. \.. d.. d.. 
20070674:	2007066c 2007066c 20070674 20070674     l.. l.. t.. t.. 
20070684:	2007067c 2007067c 20070684 20070684     |.. |.. ... ... 
20070694:	2007068c 2007068c 20070694 20070694     ... ... ... ... 
200706a4:	2007069c 2007069c 200706a4 200706a4     ... ... ... ... 
200706b4:	200706ac 200706ac 200706b4 200706b4     ... ... ... ... 
200706c4:	200706bc 200706bc 200706c4 200706c4     ... ... ... ... 
200706d4:	200706cc 200706cc 200706d4 200706d4     ... ... ... ... 
200706e4:	200706dc 200706dc 200706e4 200706e4     ... ... ... ... 
200706f4:	200706ec 200706ec 200706f4 200706f4     ... ... ... ... 
20070704:	200706fc 200706fc 20070704 20070704     ... ... ... ... 
20070714:	2007070c 2007070c 20070714 20070714     ... ... ... ... 
20070724:	2007071c 2007071c 20070724 20070724     ... ... $.. $.. 
20070734:	2007072c 2007072c 20070734 20070734     ,.. ,.. 4.. 4.. 
20070744:	2007073c 2007073c 20070744 20070744     <.. <.. D.. D.. 
20070754:	2007074c 2007074c 20070754 20070754     L.. L.. T.. T.. 
20070764:	2007075c 2007075c 20070764 20070764     \.. \.. d.. d.. 
20070774:	2007076c 2007076c 20070774 20070774     l.. l.. t.. t.. 
20070784:	2007077c 2007077c 20070784 20070784     |.. |.. ... ... 
20070794:	2007078c 2007078c 20070794 20070794     ... ... ... ... 
200707a4:	2007079c 2007079c 200707a4 200707a4     ... ... ... ... 
200707b4:	200707ac 200707ac 200707b4 200707b4     ... ... ... ... 
200707c4:	200707bc 200707bc 200707c4 200707c4     ... ... ... ... 
200707d4:	200707cc 200707cc 200707d4 200707d4     ... ... ... ... 
200707e4:	200707dc 200707dc 200707e4 200707e4     ... ... ... ... 
200707f4:	200707ec 200707ec 200707f4 200707f4     ... ... ... ... 
20070804:	200707fc 200707fc 20070804 20070804     ... ... ... ... 
20070814:	2007080c 2007080c 20070814 20070814     ... ... ... ... 
20070824:	2007081c 2007081c 20070824 20070824     ... ... $.. $.. 
20070834:	2007082c 2007082c 20070834 20070834     ,.. ,.. 4.. 4.. 
20070844:	2007083c 2007083c 20070844 20070844     <.. <.. D.. D.. 
20070854:	2007084c 2007084c 20070854 20070854     L.. L.. T.. T.. 
20070864:	2007085c 2007085c 20070864 20070864     \.. \.. d.. d.. 
20070874:	2007086c 2007086c 20070874 20070874     l.. l.. t.. t.. 
20070884:	2007087c 2007087c 20070884 20070884     |.. |.. ... ... 
20070894:	2007088c 2007088c 20070894 20070894     ... ... ... ... 
200708a4:	2007089c 2007089c 200708a4 200708a4     ... ... ... ... 
200708b4:	200708ac 200708ac 200708b4 200708b4     ... ... ... ... 
200708c4:	200708bc 200708bc 200708c4 200708c4     ... ... ... ... 
200708d4:	200708cc 200708cc 200708d4 200708d4     ... ... ... ... 
200708e4:	200708dc 200708dc 200708e4 200708e4     ... ... ... ... 
200708f4:	200708ec 200708ec 200708f4 200708f4     ... ... ... ... 
20070904:	200708fc 200708fc 20070904 20070904     ... ... ... ... 
20070914:	2007090c 2007090c 20070914 20070914     ... ... ... ... 
20070924:	2007091c 2007091c 20070924 20070924     ... ... $.. $.. 
20070934:	2007092c 2007092c 20070934 20070934     ,.. ,.. 4.. 4.. 
20070944:	2007093c 2007093c 20070944 20070944     <.. <.. D.. D.. 
20070954:	2007094c 2007094c 20070954 20070954     L.. L.. T.. T.. 
20070964:	2007095c 2007095c 20070964 20070964     \.. \.. d.. d.. 
20070974:	2007096c 2007096c 20070974 20070974     l.. l.. t.. t.. 

20070984 <__malloc_trim_threshold>:
20070984:	00020000                                ....

20070988 <__malloc_sbrk_base>:
20070988:	ffffffff                                ....
