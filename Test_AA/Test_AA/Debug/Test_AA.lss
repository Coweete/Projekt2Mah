
Test_AA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a04  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000558  20070000  00080a04  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000090  20070558  00080f5c  00010558  2**2
                  ALLOC
  3 .stack        00002000  200705e8  00080fec  00010558  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010558  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010581  2**0
                  CONTENTS, READONLY
  6 .debug_info   00005a58  00000000  00000000  000105dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011c4  00000000  00000000  00016034  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002426  00000000  00000000  000171f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000588  00000000  00000000  0001961e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000004d8  00000000  00000000  00019ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014a0f  00000000  00000000  0001a07e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008b62  00000000  00000000  0002ea8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00060158  00000000  00000000  000375ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000be0  00000000  00000000  00097748  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200725e8 	.word	0x200725e8
   80004:	00080689 	.word	0x00080689
   80008:	00080685 	.word	0x00080685
   8000c:	00080685 	.word	0x00080685
   80010:	00080685 	.word	0x00080685
   80014:	00080685 	.word	0x00080685
   80018:	00080685 	.word	0x00080685
	...
   8002c:	00080685 	.word	0x00080685
   80030:	00080685 	.word	0x00080685
   80034:	00000000 	.word	0x00000000
   80038:	00080685 	.word	0x00080685
   8003c:	00080685 	.word	0x00080685
   80040:	00080685 	.word	0x00080685
   80044:	00080685 	.word	0x00080685
   80048:	00080685 	.word	0x00080685
   8004c:	00080685 	.word	0x00080685
   80050:	00080685 	.word	0x00080685
   80054:	00080685 	.word	0x00080685
   80058:	00080685 	.word	0x00080685
   8005c:	00080685 	.word	0x00080685
   80060:	00080685 	.word	0x00080685
   80064:	00080685 	.word	0x00080685
   80068:	00000000 	.word	0x00000000
   8006c:	000804f5 	.word	0x000804f5
   80070:	00080509 	.word	0x00080509
   80074:	0008051d 	.word	0x0008051d
   80078:	00080531 	.word	0x00080531
	...
   80084:	00080685 	.word	0x00080685
   80088:	00080685 	.word	0x00080685
   8008c:	00080685 	.word	0x00080685
   80090:	00080685 	.word	0x00080685
   80094:	00080685 	.word	0x00080685
   80098:	00080685 	.word	0x00080685
   8009c:	00080685 	.word	0x00080685
   800a0:	00080685 	.word	0x00080685
   800a4:	00000000 	.word	0x00000000
   800a8:	00080685 	.word	0x00080685
   800ac:	00080685 	.word	0x00080685
   800b0:	00080685 	.word	0x00080685
   800b4:	00080685 	.word	0x00080685
   800b8:	00080685 	.word	0x00080685
   800bc:	00080685 	.word	0x00080685
   800c0:	00080685 	.word	0x00080685
   800c4:	00080685 	.word	0x00080685
   800c8:	00080685 	.word	0x00080685
   800cc:	00080685 	.word	0x00080685
   800d0:	00080685 	.word	0x00080685
   800d4:	00080685 	.word	0x00080685
   800d8:	00080685 	.word	0x00080685
   800dc:	00080685 	.word	0x00080685
   800e0:	00080685 	.word	0x00080685
   800e4:	00080685 	.word	0x00080685
   800e8:	00080685 	.word	0x00080685
   800ec:	00080685 	.word	0x00080685
   800f0:	00080685 	.word	0x00080685

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070558 	.word	0x20070558
   80110:	00000000 	.word	0x00000000
   80114:	00080a04 	.word	0x00080a04

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00080a04 	.word	0x00080a04
   8013c:	2007055c 	.word	0x2007055c
   80140:	00080a04 	.word	0x00080a04
   80144:	00000000 	.word	0x00000000

00080148 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80148:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8014a:	0189      	lsls	r1, r1, #6
   8014c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   8014e:	2402      	movs	r4, #2
   80150:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80152:	f04f 31ff 	mov.w	r1, #4294967295
   80156:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80158:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   8015a:	605a      	str	r2, [r3, #4]
}
   8015c:	f85d 4b04 	ldr.w	r4, [sp], #4
   80160:	4770      	bx	lr
   80162:	bf00      	nop

00080164 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   80164:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   80168:	4770      	bx	lr
   8016a:	bf00      	nop

0008016c <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   8016c:	0189      	lsls	r1, r1, #6
   8016e:	2302      	movs	r3, #2
   80170:	5043      	str	r3, [r0, r1]
   80172:	4770      	bx	lr

00080174 <delayInit>:

#include "asf.h"
#include "DelayFunctions.h"

void delayInit(void)		/* Initializes the timer used for delays */
{
   80174:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);
   80176:	201b      	movs	r0, #27
   80178:	4b08      	ldr	r3, [pc, #32]	; (8019c <delayInit+0x28>)
   8017a:	4798      	blx	r3
	tc_init(TC0,0,0);		 /* TC0, channel 0, TCLK1 och capturemode */
   8017c:	4c08      	ldr	r4, [pc, #32]	; (801a0 <delayInit+0x2c>)
   8017e:	4620      	mov	r0, r4
   80180:	2100      	movs	r1, #0
   80182:	460a      	mov	r2, r1
   80184:	4b07      	ldr	r3, [pc, #28]	; (801a4 <delayInit+0x30>)
   80186:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   80188:	4620      	mov	r0, r4
   8018a:	2100      	movs	r1, #0
   8018c:	4b06      	ldr	r3, [pc, #24]	; (801a8 <delayInit+0x34>)
   8018e:	4798      	blx	r3
	tc_stop(TC0,0);			/* making sure the timer does not run  */
   80190:	4620      	mov	r0, r4
   80192:	2100      	movs	r1, #0
   80194:	4b05      	ldr	r3, [pc, #20]	; (801ac <delayInit+0x38>)
   80196:	4798      	blx	r3
   80198:	bd10      	pop	{r4, pc}
   8019a:	bf00      	nop
   8019c:	0008062d 	.word	0x0008062d
   801a0:	40080000 	.word	0x40080000
   801a4:	00080149 	.word	0x00080149
   801a8:	00080165 	.word	0x00080165
   801ac:	0008016d 	.word	0x0008016d

000801b0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   801b0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   801b2:	480e      	ldr	r0, [pc, #56]	; (801ec <sysclk_init+0x3c>)
   801b4:	4b0e      	ldr	r3, [pc, #56]	; (801f0 <sysclk_init+0x40>)
   801b6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   801b8:	2000      	movs	r0, #0
   801ba:	213e      	movs	r1, #62	; 0x3e
   801bc:	4b0d      	ldr	r3, [pc, #52]	; (801f4 <sysclk_init+0x44>)
   801be:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   801c0:	4c0d      	ldr	r4, [pc, #52]	; (801f8 <sysclk_init+0x48>)
   801c2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   801c4:	2800      	cmp	r0, #0
   801c6:	d0fc      	beq.n	801c2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   801c8:	4b0c      	ldr	r3, [pc, #48]	; (801fc <sysclk_init+0x4c>)
   801ca:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   801cc:	4a0c      	ldr	r2, [pc, #48]	; (80200 <sysclk_init+0x50>)
   801ce:	4b0d      	ldr	r3, [pc, #52]	; (80204 <sysclk_init+0x54>)
   801d0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   801d2:	4c0d      	ldr	r4, [pc, #52]	; (80208 <sysclk_init+0x58>)
   801d4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   801d6:	2800      	cmp	r0, #0
   801d8:	d0fc      	beq.n	801d4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   801da:	2010      	movs	r0, #16
   801dc:	4b0b      	ldr	r3, [pc, #44]	; (8020c <sysclk_init+0x5c>)
   801de:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   801e0:	4b0b      	ldr	r3, [pc, #44]	; (80210 <sysclk_init+0x60>)
   801e2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   801e4:	4801      	ldr	r0, [pc, #4]	; (801ec <sysclk_init+0x3c>)
   801e6:	4b02      	ldr	r3, [pc, #8]	; (801f0 <sysclk_init+0x40>)
   801e8:	4798      	blx	r3
   801ea:	bd10      	pop	{r4, pc}
   801ec:	0501bd00 	.word	0x0501bd00
   801f0:	200700a5 	.word	0x200700a5
   801f4:	000805a9 	.word	0x000805a9
   801f8:	000805fd 	.word	0x000805fd
   801fc:	0008060d 	.word	0x0008060d
   80200:	200d3f01 	.word	0x200d3f01
   80204:	400e0600 	.word	0x400e0600
   80208:	0008061d 	.word	0x0008061d
   8020c:	00080545 	.word	0x00080545
   80210:	00080739 	.word	0x00080739

00080214 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80214:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80216:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8021a:	4b12      	ldr	r3, [pc, #72]	; (80264 <board_init+0x50>)
   8021c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8021e:	200b      	movs	r0, #11
   80220:	4c11      	ldr	r4, [pc, #68]	; (80268 <board_init+0x54>)
   80222:	47a0      	blx	r4
   80224:	200c      	movs	r0, #12
   80226:	47a0      	blx	r4
   80228:	200d      	movs	r0, #13
   8022a:	47a0      	blx	r4
   8022c:	200e      	movs	r0, #14
   8022e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80230:	203b      	movs	r0, #59	; 0x3b
   80232:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80236:	4c0d      	ldr	r4, [pc, #52]	; (8026c <board_init+0x58>)
   80238:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8023a:	2055      	movs	r0, #85	; 0x55
   8023c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80240:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80242:	2056      	movs	r0, #86	; 0x56
   80244:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80248:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8024a:	2068      	movs	r0, #104	; 0x68
   8024c:	4908      	ldr	r1, [pc, #32]	; (80270 <board_init+0x5c>)
   8024e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80250:	205c      	movs	r0, #92	; 0x5c
   80252:	4908      	ldr	r1, [pc, #32]	; (80274 <board_init+0x60>)
   80254:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80256:	4808      	ldr	r0, [pc, #32]	; (80278 <board_init+0x64>)
   80258:	f44f 7140 	mov.w	r1, #768	; 0x300
   8025c:	4a07      	ldr	r2, [pc, #28]	; (8027c <board_init+0x68>)
   8025e:	4b08      	ldr	r3, [pc, #32]	; (80280 <board_init+0x6c>)
   80260:	4798      	blx	r3
   80262:	bd10      	pop	{r4, pc}
   80264:	400e1a50 	.word	0x400e1a50
   80268:	0008062d 	.word	0x0008062d
   8026c:	00080329 	.word	0x00080329
   80270:	28000079 	.word	0x28000079
   80274:	28000001 	.word	0x28000001
   80278:	400e0e00 	.word	0x400e0e00
   8027c:	08000001 	.word	0x08000001
   80280:	000803fd 	.word	0x000803fd

00080284 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80284:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80286:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8028a:	d016      	beq.n	802ba <pio_set_peripheral+0x36>
   8028c:	d804      	bhi.n	80298 <pio_set_peripheral+0x14>
   8028e:	b1c1      	cbz	r1, 802c2 <pio_set_peripheral+0x3e>
   80290:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80294:	d00a      	beq.n	802ac <pio_set_peripheral+0x28>
   80296:	e013      	b.n	802c0 <pio_set_peripheral+0x3c>
   80298:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8029c:	d011      	beq.n	802c2 <pio_set_peripheral+0x3e>
   8029e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   802a2:	d00e      	beq.n	802c2 <pio_set_peripheral+0x3e>
   802a4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   802a8:	d10a      	bne.n	802c0 <pio_set_peripheral+0x3c>
   802aa:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   802ac:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   802ae:	6f01      	ldr	r1, [r0, #112]	; 0x70
   802b0:	400b      	ands	r3, r1
   802b2:	ea23 0302 	bic.w	r3, r3, r2
   802b6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   802b8:	e002      	b.n	802c0 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   802ba:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   802bc:	4313      	orrs	r3, r2
   802be:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   802c0:	6042      	str	r2, [r0, #4]
   802c2:	4770      	bx	lr

000802c4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   802c4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   802c6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   802ca:	bf14      	ite	ne
   802cc:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   802ce:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   802d0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   802d4:	bf14      	ite	ne
   802d6:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   802d8:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   802da:	f012 0f02 	tst.w	r2, #2
   802de:	d002      	beq.n	802e6 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   802e0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   802e4:	e004      	b.n	802f0 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   802e6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   802ea:	bf18      	it	ne
   802ec:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   802f0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   802f2:	6001      	str	r1, [r0, #0]
   802f4:	4770      	bx	lr
   802f6:	bf00      	nop

000802f8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   802f8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   802fa:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   802fc:	9c01      	ldr	r4, [sp, #4]
   802fe:	b10c      	cbz	r4, 80304 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80300:	6641      	str	r1, [r0, #100]	; 0x64
   80302:	e000      	b.n	80306 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80304:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80306:	b10b      	cbz	r3, 8030c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80308:	6501      	str	r1, [r0, #80]	; 0x50
   8030a:	e000      	b.n	8030e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8030c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8030e:	b10a      	cbz	r2, 80314 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80310:	6301      	str	r1, [r0, #48]	; 0x30
   80312:	e000      	b.n	80316 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80314:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80316:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80318:	6001      	str	r1, [r0, #0]
}
   8031a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8031e:	4770      	bx	lr

00080320 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80320:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80322:	4770      	bx	lr

00080324 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80324:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80326:	4770      	bx	lr

00080328 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80328:	b570      	push	{r4, r5, r6, lr}
   8032a:	b082      	sub	sp, #8
   8032c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8032e:	0944      	lsrs	r4, r0, #5
   80330:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80334:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80338:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8033a:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   8033e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80342:	d030      	beq.n	803a6 <pio_configure_pin+0x7e>
   80344:	d806      	bhi.n	80354 <pio_configure_pin+0x2c>
   80346:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8034a:	d00a      	beq.n	80362 <pio_configure_pin+0x3a>
   8034c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80350:	d018      	beq.n	80384 <pio_configure_pin+0x5c>
   80352:	e049      	b.n	803e8 <pio_configure_pin+0xc0>
   80354:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80358:	d030      	beq.n	803bc <pio_configure_pin+0x94>
   8035a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8035e:	d02d      	beq.n	803bc <pio_configure_pin+0x94>
   80360:	e042      	b.n	803e8 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80362:	f000 001f 	and.w	r0, r0, #31
   80366:	2401      	movs	r4, #1
   80368:	4084      	lsls	r4, r0
   8036a:	4630      	mov	r0, r6
   8036c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80370:	4622      	mov	r2, r4
   80372:	4b1f      	ldr	r3, [pc, #124]	; (803f0 <pio_configure_pin+0xc8>)
   80374:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80376:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8037a:	bf14      	ite	ne
   8037c:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8037e:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80380:	2001      	movs	r0, #1
   80382:	e032      	b.n	803ea <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80384:	f000 001f 	and.w	r0, r0, #31
   80388:	2401      	movs	r4, #1
   8038a:	4084      	lsls	r4, r0
   8038c:	4630      	mov	r0, r6
   8038e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80392:	4622      	mov	r2, r4
   80394:	4b16      	ldr	r3, [pc, #88]	; (803f0 <pio_configure_pin+0xc8>)
   80396:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80398:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8039c:	bf14      	ite	ne
   8039e:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803a0:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   803a2:	2001      	movs	r0, #1
   803a4:	e021      	b.n	803ea <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   803a6:	f000 011f 	and.w	r1, r0, #31
   803aa:	2401      	movs	r4, #1
   803ac:	4630      	mov	r0, r6
   803ae:	fa04 f101 	lsl.w	r1, r4, r1
   803b2:	462a      	mov	r2, r5
   803b4:	4b0f      	ldr	r3, [pc, #60]	; (803f4 <pio_configure_pin+0xcc>)
   803b6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   803b8:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   803ba:	e016      	b.n	803ea <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   803bc:	f000 011f 	and.w	r1, r0, #31
   803c0:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   803c2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   803c6:	ea05 0304 	and.w	r3, r5, r4
   803ca:	9300      	str	r3, [sp, #0]
   803cc:	4630      	mov	r0, r6
   803ce:	fa04 f101 	lsl.w	r1, r4, r1
   803d2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   803d6:	bf14      	ite	ne
   803d8:	2200      	movne	r2, #0
   803da:	2201      	moveq	r2, #1
   803dc:	f3c5 0380 	ubfx	r3, r5, #2, #1
   803e0:	4d05      	ldr	r5, [pc, #20]	; (803f8 <pio_configure_pin+0xd0>)
   803e2:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   803e4:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   803e6:	e000      	b.n	803ea <pio_configure_pin+0xc2>

	default:
		return 0;
   803e8:	2000      	movs	r0, #0
	}

	return 1;
}
   803ea:	b002      	add	sp, #8
   803ec:	bd70      	pop	{r4, r5, r6, pc}
   803ee:	bf00      	nop
   803f0:	00080285 	.word	0x00080285
   803f4:	000802c5 	.word	0x000802c5
   803f8:	000802f9 	.word	0x000802f9

000803fc <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   803fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   803fe:	b083      	sub	sp, #12
   80400:	4607      	mov	r7, r0
   80402:	460e      	mov	r6, r1
   80404:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80406:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8040a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8040e:	d026      	beq.n	8045e <pio_configure_pin_group+0x62>
   80410:	d806      	bhi.n	80420 <pio_configure_pin_group+0x24>
   80412:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80416:	d00a      	beq.n	8042e <pio_configure_pin_group+0x32>
   80418:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   8041c:	d013      	beq.n	80446 <pio_configure_pin_group+0x4a>
   8041e:	e034      	b.n	8048a <pio_configure_pin_group+0x8e>
   80420:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80424:	d01f      	beq.n	80466 <pio_configure_pin_group+0x6a>
   80426:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8042a:	d01c      	beq.n	80466 <pio_configure_pin_group+0x6a>
   8042c:	e02d      	b.n	8048a <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8042e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80432:	4632      	mov	r2, r6
   80434:	4b16      	ldr	r3, [pc, #88]	; (80490 <pio_configure_pin_group+0x94>)
   80436:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80438:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8043c:	bf14      	ite	ne
   8043e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80440:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80442:	2001      	movs	r0, #1
   80444:	e022      	b.n	8048c <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80446:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8044a:	4632      	mov	r2, r6
   8044c:	4b10      	ldr	r3, [pc, #64]	; (80490 <pio_configure_pin_group+0x94>)
   8044e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80450:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80454:	bf14      	ite	ne
   80456:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80458:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8045a:	2001      	movs	r0, #1
   8045c:	e016      	b.n	8048c <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8045e:	4b0d      	ldr	r3, [pc, #52]	; (80494 <pio_configure_pin_group+0x98>)
   80460:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80462:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80464:	e012      	b.n	8048c <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80466:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8046a:	f005 0301 	and.w	r3, r5, #1
   8046e:	9300      	str	r3, [sp, #0]
   80470:	4638      	mov	r0, r7
   80472:	4631      	mov	r1, r6
   80474:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80478:	bf14      	ite	ne
   8047a:	2200      	movne	r2, #0
   8047c:	2201      	moveq	r2, #1
   8047e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80482:	4c05      	ldr	r4, [pc, #20]	; (80498 <pio_configure_pin_group+0x9c>)
   80484:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80486:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80488:	e000      	b.n	8048c <pio_configure_pin_group+0x90>

	default:
		return 0;
   8048a:	2000      	movs	r0, #0
	}

	return 1;
}
   8048c:	b003      	add	sp, #12
   8048e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80490:	00080285 	.word	0x00080285
   80494:	000802c5 	.word	0x000802c5
   80498:	000802f9 	.word	0x000802f9

0008049c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8049c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   804a0:	4604      	mov	r4, r0
   804a2:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   804a4:	4b10      	ldr	r3, [pc, #64]	; (804e8 <pio_handler_process+0x4c>)
   804a6:	4798      	blx	r3
   804a8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   804aa:	4620      	mov	r0, r4
   804ac:	4b0f      	ldr	r3, [pc, #60]	; (804ec <pio_handler_process+0x50>)
   804ae:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   804b0:	4005      	ands	r5, r0
   804b2:	d017      	beq.n	804e4 <pio_handler_process+0x48>
   804b4:	4f0e      	ldr	r7, [pc, #56]	; (804f0 <pio_handler_process+0x54>)
   804b6:	f107 040c 	add.w	r4, r7, #12
   804ba:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   804bc:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   804c0:	42b3      	cmp	r3, r6
   804c2:	d10a      	bne.n	804da <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   804c4:	f854 1c08 	ldr.w	r1, [r4, #-8]
   804c8:	4229      	tst	r1, r5
   804ca:	d006      	beq.n	804da <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   804cc:	6823      	ldr	r3, [r4, #0]
   804ce:	4630      	mov	r0, r6
   804d0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   804d2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   804d6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   804da:	42bc      	cmp	r4, r7
   804dc:	d002      	beq.n	804e4 <pio_handler_process+0x48>
   804de:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   804e0:	2d00      	cmp	r5, #0
   804e2:	d1eb      	bne.n	804bc <pio_handler_process+0x20>
   804e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   804e8:	00080321 	.word	0x00080321
   804ec:	00080325 	.word	0x00080325
   804f0:	20070574 	.word	0x20070574

000804f4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   804f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   804f6:	4802      	ldr	r0, [pc, #8]	; (80500 <PIOA_Handler+0xc>)
   804f8:	210b      	movs	r1, #11
   804fa:	4b02      	ldr	r3, [pc, #8]	; (80504 <PIOA_Handler+0x10>)
   804fc:	4798      	blx	r3
   804fe:	bd08      	pop	{r3, pc}
   80500:	400e0e00 	.word	0x400e0e00
   80504:	0008049d 	.word	0x0008049d

00080508 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80508:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8050a:	4802      	ldr	r0, [pc, #8]	; (80514 <PIOB_Handler+0xc>)
   8050c:	210c      	movs	r1, #12
   8050e:	4b02      	ldr	r3, [pc, #8]	; (80518 <PIOB_Handler+0x10>)
   80510:	4798      	blx	r3
   80512:	bd08      	pop	{r3, pc}
   80514:	400e1000 	.word	0x400e1000
   80518:	0008049d 	.word	0x0008049d

0008051c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8051c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8051e:	4802      	ldr	r0, [pc, #8]	; (80528 <PIOC_Handler+0xc>)
   80520:	210d      	movs	r1, #13
   80522:	4b02      	ldr	r3, [pc, #8]	; (8052c <PIOC_Handler+0x10>)
   80524:	4798      	blx	r3
   80526:	bd08      	pop	{r3, pc}
   80528:	400e1200 	.word	0x400e1200
   8052c:	0008049d 	.word	0x0008049d

00080530 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80530:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80532:	4802      	ldr	r0, [pc, #8]	; (8053c <PIOD_Handler+0xc>)
   80534:	210e      	movs	r1, #14
   80536:	4b02      	ldr	r3, [pc, #8]	; (80540 <PIOD_Handler+0x10>)
   80538:	4798      	blx	r3
   8053a:	bd08      	pop	{r3, pc}
   8053c:	400e1400 	.word	0x400e1400
   80540:	0008049d 	.word	0x0008049d

00080544 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80544:	4b17      	ldr	r3, [pc, #92]	; (805a4 <pmc_switch_mck_to_pllack+0x60>)
   80546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80548:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   8054c:	4310      	orrs	r0, r2
   8054e:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80552:	f013 0f08 	tst.w	r3, #8
   80556:	d109      	bne.n	8056c <pmc_switch_mck_to_pllack+0x28>
   80558:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8055c:	4911      	ldr	r1, [pc, #68]	; (805a4 <pmc_switch_mck_to_pllack+0x60>)
   8055e:	e001      	b.n	80564 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80560:	3b01      	subs	r3, #1
   80562:	d019      	beq.n	80598 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80564:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80566:	f012 0f08 	tst.w	r2, #8
   8056a:	d0f9      	beq.n	80560 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8056c:	4b0d      	ldr	r3, [pc, #52]	; (805a4 <pmc_switch_mck_to_pllack+0x60>)
   8056e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80570:	f022 0203 	bic.w	r2, r2, #3
   80574:	f042 0202 	orr.w	r2, r2, #2
   80578:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8057a:	6e98      	ldr	r0, [r3, #104]	; 0x68
   8057c:	f010 0008 	ands.w	r0, r0, #8
   80580:	d10c      	bne.n	8059c <pmc_switch_mck_to_pllack+0x58>
   80582:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80586:	4907      	ldr	r1, [pc, #28]	; (805a4 <pmc_switch_mck_to_pllack+0x60>)
   80588:	e001      	b.n	8058e <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8058a:	3b01      	subs	r3, #1
   8058c:	d008      	beq.n	805a0 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8058e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80590:	f012 0f08 	tst.w	r2, #8
   80594:	d0f9      	beq.n	8058a <pmc_switch_mck_to_pllack+0x46>
   80596:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80598:	2001      	movs	r0, #1
   8059a:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   8059c:	2000      	movs	r0, #0
   8059e:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   805a0:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   805a2:	4770      	bx	lr
   805a4:	400e0600 	.word	0x400e0600

000805a8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   805a8:	b138      	cbz	r0, 805ba <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   805aa:	4911      	ldr	r1, [pc, #68]	; (805f0 <pmc_switch_mainck_to_xtal+0x48>)
   805ac:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   805ae:	4a11      	ldr	r2, [pc, #68]	; (805f4 <pmc_switch_mainck_to_xtal+0x4c>)
   805b0:	401a      	ands	r2, r3
   805b2:	4b11      	ldr	r3, [pc, #68]	; (805f8 <pmc_switch_mainck_to_xtal+0x50>)
   805b4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   805b6:	620b      	str	r3, [r1, #32]
   805b8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   805ba:	4a0d      	ldr	r2, [pc, #52]	; (805f0 <pmc_switch_mainck_to_xtal+0x48>)
   805bc:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   805be:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   805c2:	f023 0303 	bic.w	r3, r3, #3
   805c6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   805ca:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   805ce:	0209      	lsls	r1, r1, #8
   805d0:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   805d2:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   805d4:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   805d6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805d8:	f013 0f01 	tst.w	r3, #1
   805dc:	d0fb      	beq.n	805d6 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   805de:	4a04      	ldr	r2, [pc, #16]	; (805f0 <pmc_switch_mainck_to_xtal+0x48>)
   805e0:	6a13      	ldr	r3, [r2, #32]
   805e2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   805e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   805ea:	6213      	str	r3, [r2, #32]
   805ec:	4770      	bx	lr
   805ee:	bf00      	nop
   805f0:	400e0600 	.word	0x400e0600
   805f4:	fec8fffc 	.word	0xfec8fffc
   805f8:	01370002 	.word	0x01370002

000805fc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   805fc:	4b02      	ldr	r3, [pc, #8]	; (80608 <pmc_osc_is_ready_mainck+0xc>)
   805fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80600:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80604:	4770      	bx	lr
   80606:	bf00      	nop
   80608:	400e0600 	.word	0x400e0600

0008060c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8060c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80610:	4b01      	ldr	r3, [pc, #4]	; (80618 <pmc_disable_pllack+0xc>)
   80612:	629a      	str	r2, [r3, #40]	; 0x28
   80614:	4770      	bx	lr
   80616:	bf00      	nop
   80618:	400e0600 	.word	0x400e0600

0008061c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8061c:	4b02      	ldr	r3, [pc, #8]	; (80628 <pmc_is_locked_pllack+0xc>)
   8061e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80620:	f000 0002 	and.w	r0, r0, #2
   80624:	4770      	bx	lr
   80626:	bf00      	nop
   80628:	400e0600 	.word	0x400e0600

0008062c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8062c:	282c      	cmp	r0, #44	; 0x2c
   8062e:	d820      	bhi.n	80672 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80630:	281f      	cmp	r0, #31
   80632:	d80d      	bhi.n	80650 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80634:	4b12      	ldr	r3, [pc, #72]	; (80680 <pmc_enable_periph_clk+0x54>)
   80636:	699a      	ldr	r2, [r3, #24]
   80638:	2301      	movs	r3, #1
   8063a:	4083      	lsls	r3, r0
   8063c:	401a      	ands	r2, r3
   8063e:	4293      	cmp	r3, r2
   80640:	d019      	beq.n	80676 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80642:	2301      	movs	r3, #1
   80644:	fa03 f000 	lsl.w	r0, r3, r0
   80648:	4b0d      	ldr	r3, [pc, #52]	; (80680 <pmc_enable_periph_clk+0x54>)
   8064a:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8064c:	2000      	movs	r0, #0
   8064e:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80650:	4b0b      	ldr	r3, [pc, #44]	; (80680 <pmc_enable_periph_clk+0x54>)
   80652:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80656:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80658:	2301      	movs	r3, #1
   8065a:	4083      	lsls	r3, r0
   8065c:	401a      	ands	r2, r3
   8065e:	4293      	cmp	r3, r2
   80660:	d00b      	beq.n	8067a <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80662:	2301      	movs	r3, #1
   80664:	fa03 f000 	lsl.w	r0, r3, r0
   80668:	4b05      	ldr	r3, [pc, #20]	; (80680 <pmc_enable_periph_clk+0x54>)
   8066a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   8066e:	2000      	movs	r0, #0
   80670:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80672:	2001      	movs	r0, #1
   80674:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80676:	2000      	movs	r0, #0
   80678:	4770      	bx	lr
   8067a:	2000      	movs	r0, #0
}
   8067c:	4770      	bx	lr
   8067e:	bf00      	nop
   80680:	400e0600 	.word	0x400e0600

00080684 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80684:	e7fe      	b.n	80684 <Dummy_Handler>
   80686:	bf00      	nop

00080688 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80688:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8068a:	4b1e      	ldr	r3, [pc, #120]	; (80704 <Reset_Handler+0x7c>)
   8068c:	4a1e      	ldr	r2, [pc, #120]	; (80708 <Reset_Handler+0x80>)
   8068e:	429a      	cmp	r2, r3
   80690:	d003      	beq.n	8069a <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80692:	4b1e      	ldr	r3, [pc, #120]	; (8070c <Reset_Handler+0x84>)
   80694:	4a1b      	ldr	r2, [pc, #108]	; (80704 <Reset_Handler+0x7c>)
   80696:	429a      	cmp	r2, r3
   80698:	d304      	bcc.n	806a4 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8069a:	4b1d      	ldr	r3, [pc, #116]	; (80710 <Reset_Handler+0x88>)
   8069c:	4a1d      	ldr	r2, [pc, #116]	; (80714 <Reset_Handler+0x8c>)
   8069e:	429a      	cmp	r2, r3
   806a0:	d30f      	bcc.n	806c2 <Reset_Handler+0x3a>
   806a2:	e01a      	b.n	806da <Reset_Handler+0x52>
   806a4:	4b1c      	ldr	r3, [pc, #112]	; (80718 <Reset_Handler+0x90>)
   806a6:	4c1d      	ldr	r4, [pc, #116]	; (8071c <Reset_Handler+0x94>)
   806a8:	1ae4      	subs	r4, r4, r3
   806aa:	f024 0403 	bic.w	r4, r4, #3
   806ae:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   806b0:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   806b2:	4814      	ldr	r0, [pc, #80]	; (80704 <Reset_Handler+0x7c>)
   806b4:	4914      	ldr	r1, [pc, #80]	; (80708 <Reset_Handler+0x80>)
   806b6:	585a      	ldr	r2, [r3, r1]
   806b8:	501a      	str	r2, [r3, r0]
   806ba:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   806bc:	42a3      	cmp	r3, r4
   806be:	d1fa      	bne.n	806b6 <Reset_Handler+0x2e>
   806c0:	e7eb      	b.n	8069a <Reset_Handler+0x12>
   806c2:	4b17      	ldr	r3, [pc, #92]	; (80720 <Reset_Handler+0x98>)
   806c4:	4917      	ldr	r1, [pc, #92]	; (80724 <Reset_Handler+0x9c>)
   806c6:	1ac9      	subs	r1, r1, r3
   806c8:	f021 0103 	bic.w	r1, r1, #3
   806cc:	1d1a      	adds	r2, r3, #4
   806ce:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   806d0:	2200      	movs	r2, #0
   806d2:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   806d6:	428b      	cmp	r3, r1
   806d8:	d1fb      	bne.n	806d2 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   806da:	4a13      	ldr	r2, [pc, #76]	; (80728 <Reset_Handler+0xa0>)
   806dc:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   806e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   806e4:	4911      	ldr	r1, [pc, #68]	; (8072c <Reset_Handler+0xa4>)
   806e6:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   806e8:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   806ec:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   806f0:	d203      	bcs.n	806fa <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   806f2:	688a      	ldr	r2, [r1, #8]
   806f4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   806f8:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   806fa:	4b0d      	ldr	r3, [pc, #52]	; (80730 <Reset_Handler+0xa8>)
   806fc:	4798      	blx	r3

	/* Branch to main function */
	main();
   806fe:	4b0d      	ldr	r3, [pc, #52]	; (80734 <Reset_Handler+0xac>)
   80700:	4798      	blx	r3
   80702:	e7fe      	b.n	80702 <Reset_Handler+0x7a>
   80704:	20070000 	.word	0x20070000
   80708:	00080a04 	.word	0x00080a04
   8070c:	20070558 	.word	0x20070558
   80710:	200705e8 	.word	0x200705e8
   80714:	20070558 	.word	0x20070558
   80718:	20070004 	.word	0x20070004
   8071c:	2007055b 	.word	0x2007055b
   80720:	20070554 	.word	0x20070554
   80724:	200705e3 	.word	0x200705e3
   80728:	00080000 	.word	0x00080000
   8072c:	e000ed00 	.word	0xe000ed00
   80730:	00080891 	.word	0x00080891
   80734:	00080855 	.word	0x00080855

00080738 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80738:	4b3e      	ldr	r3, [pc, #248]	; (80834 <SystemCoreClockUpdate+0xfc>)
   8073a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8073c:	f003 0303 	and.w	r3, r3, #3
   80740:	2b03      	cmp	r3, #3
   80742:	d85f      	bhi.n	80804 <SystemCoreClockUpdate+0xcc>
   80744:	e8df f003 	tbb	[pc, r3]
   80748:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8074c:	4b3a      	ldr	r3, [pc, #232]	; (80838 <SystemCoreClockUpdate+0x100>)
   8074e:	695b      	ldr	r3, [r3, #20]
   80750:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80754:	bf14      	ite	ne
   80756:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8075a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8075e:	4b37      	ldr	r3, [pc, #220]	; (8083c <SystemCoreClockUpdate+0x104>)
   80760:	601a      	str	r2, [r3, #0]
   80762:	e04f      	b.n	80804 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80764:	4b33      	ldr	r3, [pc, #204]	; (80834 <SystemCoreClockUpdate+0xfc>)
   80766:	6a1b      	ldr	r3, [r3, #32]
   80768:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8076c:	d003      	beq.n	80776 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8076e:	4a34      	ldr	r2, [pc, #208]	; (80840 <SystemCoreClockUpdate+0x108>)
   80770:	4b32      	ldr	r3, [pc, #200]	; (8083c <SystemCoreClockUpdate+0x104>)
   80772:	601a      	str	r2, [r3, #0]
   80774:	e046      	b.n	80804 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80776:	4a33      	ldr	r2, [pc, #204]	; (80844 <SystemCoreClockUpdate+0x10c>)
   80778:	4b30      	ldr	r3, [pc, #192]	; (8083c <SystemCoreClockUpdate+0x104>)
   8077a:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8077c:	4b2d      	ldr	r3, [pc, #180]	; (80834 <SystemCoreClockUpdate+0xfc>)
   8077e:	6a1b      	ldr	r3, [r3, #32]
   80780:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80784:	2b10      	cmp	r3, #16
   80786:	d002      	beq.n	8078e <SystemCoreClockUpdate+0x56>
   80788:	2b20      	cmp	r3, #32
   8078a:	d004      	beq.n	80796 <SystemCoreClockUpdate+0x5e>
   8078c:	e03a      	b.n	80804 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8078e:	4a2e      	ldr	r2, [pc, #184]	; (80848 <SystemCoreClockUpdate+0x110>)
   80790:	4b2a      	ldr	r3, [pc, #168]	; (8083c <SystemCoreClockUpdate+0x104>)
   80792:	601a      	str	r2, [r3, #0]
				break;
   80794:	e036      	b.n	80804 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80796:	4a2a      	ldr	r2, [pc, #168]	; (80840 <SystemCoreClockUpdate+0x108>)
   80798:	4b28      	ldr	r3, [pc, #160]	; (8083c <SystemCoreClockUpdate+0x104>)
   8079a:	601a      	str	r2, [r3, #0]
				break;
   8079c:	e032      	b.n	80804 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8079e:	4b25      	ldr	r3, [pc, #148]	; (80834 <SystemCoreClockUpdate+0xfc>)
   807a0:	6a1b      	ldr	r3, [r3, #32]
   807a2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   807a6:	d003      	beq.n	807b0 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   807a8:	4a25      	ldr	r2, [pc, #148]	; (80840 <SystemCoreClockUpdate+0x108>)
   807aa:	4b24      	ldr	r3, [pc, #144]	; (8083c <SystemCoreClockUpdate+0x104>)
   807ac:	601a      	str	r2, [r3, #0]
   807ae:	e012      	b.n	807d6 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   807b0:	4a24      	ldr	r2, [pc, #144]	; (80844 <SystemCoreClockUpdate+0x10c>)
   807b2:	4b22      	ldr	r3, [pc, #136]	; (8083c <SystemCoreClockUpdate+0x104>)
   807b4:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   807b6:	4b1f      	ldr	r3, [pc, #124]	; (80834 <SystemCoreClockUpdate+0xfc>)
   807b8:	6a1b      	ldr	r3, [r3, #32]
   807ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
   807be:	2b10      	cmp	r3, #16
   807c0:	d002      	beq.n	807c8 <SystemCoreClockUpdate+0x90>
   807c2:	2b20      	cmp	r3, #32
   807c4:	d004      	beq.n	807d0 <SystemCoreClockUpdate+0x98>
   807c6:	e006      	b.n	807d6 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   807c8:	4a1f      	ldr	r2, [pc, #124]	; (80848 <SystemCoreClockUpdate+0x110>)
   807ca:	4b1c      	ldr	r3, [pc, #112]	; (8083c <SystemCoreClockUpdate+0x104>)
   807cc:	601a      	str	r2, [r3, #0]
				break;
   807ce:	e002      	b.n	807d6 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   807d0:	4a1b      	ldr	r2, [pc, #108]	; (80840 <SystemCoreClockUpdate+0x108>)
   807d2:	4b1a      	ldr	r3, [pc, #104]	; (8083c <SystemCoreClockUpdate+0x104>)
   807d4:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   807d6:	4b17      	ldr	r3, [pc, #92]	; (80834 <SystemCoreClockUpdate+0xfc>)
   807d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   807da:	f003 0303 	and.w	r3, r3, #3
   807de:	2b02      	cmp	r3, #2
   807e0:	d10d      	bne.n	807fe <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   807e2:	4b14      	ldr	r3, [pc, #80]	; (80834 <SystemCoreClockUpdate+0xfc>)
   807e4:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   807e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
   807e8:	4b14      	ldr	r3, [pc, #80]	; (8083c <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   807ea:	f3c0 400a 	ubfx	r0, r0, #16, #11
   807ee:	681a      	ldr	r2, [r3, #0]
   807f0:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   807f4:	b2c9      	uxtb	r1, r1
   807f6:	fbb2 f2f1 	udiv	r2, r2, r1
   807fa:	601a      	str	r2, [r3, #0]
   807fc:	e002      	b.n	80804 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   807fe:	4a13      	ldr	r2, [pc, #76]	; (8084c <SystemCoreClockUpdate+0x114>)
   80800:	4b0e      	ldr	r3, [pc, #56]	; (8083c <SystemCoreClockUpdate+0x104>)
   80802:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80804:	4b0b      	ldr	r3, [pc, #44]	; (80834 <SystemCoreClockUpdate+0xfc>)
   80806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80808:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8080c:	2b70      	cmp	r3, #112	; 0x70
   8080e:	d107      	bne.n	80820 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80810:	4b0a      	ldr	r3, [pc, #40]	; (8083c <SystemCoreClockUpdate+0x104>)
   80812:	681a      	ldr	r2, [r3, #0]
   80814:	490e      	ldr	r1, [pc, #56]	; (80850 <SystemCoreClockUpdate+0x118>)
   80816:	fba1 0202 	umull	r0, r2, r1, r2
   8081a:	0852      	lsrs	r2, r2, #1
   8081c:	601a      	str	r2, [r3, #0]
   8081e:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80820:	4b04      	ldr	r3, [pc, #16]	; (80834 <SystemCoreClockUpdate+0xfc>)
   80822:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80824:	4b05      	ldr	r3, [pc, #20]	; (8083c <SystemCoreClockUpdate+0x104>)
   80826:	f3c1 1102 	ubfx	r1, r1, #4, #3
   8082a:	681a      	ldr	r2, [r3, #0]
   8082c:	40ca      	lsrs	r2, r1
   8082e:	601a      	str	r2, [r3, #0]
   80830:	4770      	bx	lr
   80832:	bf00      	nop
   80834:	400e0600 	.word	0x400e0600
   80838:	400e1a10 	.word	0x400e1a10
   8083c:	2007012c 	.word	0x2007012c
   80840:	00b71b00 	.word	0x00b71b00
   80844:	003d0900 	.word	0x003d0900
   80848:	007a1200 	.word	0x007a1200
   8084c:	0e4e1c00 	.word	0x0e4e1c00
   80850:	aaaaaaab 	.word	0xaaaaaaab

00080854 <main>:
int x_diff = 0;
int y_diff = 0;
int angle = 0;

int main (void)
{
   80854:	b510      	push	{r4, lr}
	
	sysclk_init();
   80856:	4b09      	ldr	r3, [pc, #36]	; (8087c <main+0x28>)
   80858:	4798      	blx	r3
	board_init();
   8085a:	4b09      	ldr	r3, [pc, #36]	; (80880 <main+0x2c>)
   8085c:	4798      	blx	r3
	delayInit();
   8085e:	4b09      	ldr	r3, [pc, #36]	; (80884 <main+0x30>)
   80860:	4798      	blx	r3
   80862:	200b      	movs	r0, #11
   80864:	4c08      	ldr	r4, [pc, #32]	; (80888 <main+0x34>)
   80866:	47a0      	blx	r4
   80868:	200c      	movs	r0, #12
   8086a:	47a0      	blx	r4
   8086c:	200d      	movs	r0, #13
   8086e:	47a0      	blx	r4
   80870:	200e      	movs	r0, #14
   80872:	47a0      	blx	r4
	ioport_init();
	
	
	while(n=0){
   80874:	2000      	movs	r0, #0
   80876:	4b05      	ldr	r3, [pc, #20]	; (8088c <main+0x38>)
   80878:	6018      	str	r0, [r3, #0]
	
		
		
	

}
   8087a:	bd10      	pop	{r4, pc}
   8087c:	000801b1 	.word	0x000801b1
   80880:	00080215 	.word	0x00080215
   80884:	00080175 	.word	0x00080175
   80888:	0008062d 	.word	0x0008062d
   8088c:	200705e4 	.word	0x200705e4

00080890 <__libc_init_array>:
   80890:	b570      	push	{r4, r5, r6, lr}
   80892:	4e0f      	ldr	r6, [pc, #60]	; (808d0 <__libc_init_array+0x40>)
   80894:	4d0f      	ldr	r5, [pc, #60]	; (808d4 <__libc_init_array+0x44>)
   80896:	1b76      	subs	r6, r6, r5
   80898:	10b6      	asrs	r6, r6, #2
   8089a:	d007      	beq.n	808ac <__libc_init_array+0x1c>
   8089c:	3d04      	subs	r5, #4
   8089e:	2400      	movs	r4, #0
   808a0:	3401      	adds	r4, #1
   808a2:	f855 3f04 	ldr.w	r3, [r5, #4]!
   808a6:	4798      	blx	r3
   808a8:	42a6      	cmp	r6, r4
   808aa:	d1f9      	bne.n	808a0 <__libc_init_array+0x10>
   808ac:	4e0a      	ldr	r6, [pc, #40]	; (808d8 <__libc_init_array+0x48>)
   808ae:	4d0b      	ldr	r5, [pc, #44]	; (808dc <__libc_init_array+0x4c>)
   808b0:	f000 f896 	bl	809e0 <_init>
   808b4:	1b76      	subs	r6, r6, r5
   808b6:	10b6      	asrs	r6, r6, #2
   808b8:	d008      	beq.n	808cc <__libc_init_array+0x3c>
   808ba:	3d04      	subs	r5, #4
   808bc:	2400      	movs	r4, #0
   808be:	3401      	adds	r4, #1
   808c0:	f855 3f04 	ldr.w	r3, [r5, #4]!
   808c4:	4798      	blx	r3
   808c6:	42a6      	cmp	r6, r4
   808c8:	d1f9      	bne.n	808be <__libc_init_array+0x2e>
   808ca:	bd70      	pop	{r4, r5, r6, pc}
   808cc:	bd70      	pop	{r4, r5, r6, pc}
   808ce:	bf00      	nop
   808d0:	000809ec 	.word	0x000809ec
   808d4:	000809ec 	.word	0x000809ec
   808d8:	000809f4 	.word	0x000809f4
   808dc:	000809ec 	.word	0x000809ec

000808e0 <register_fini>:
   808e0:	4b02      	ldr	r3, [pc, #8]	; (808ec <register_fini+0xc>)
   808e2:	b113      	cbz	r3, 808ea <register_fini+0xa>
   808e4:	4802      	ldr	r0, [pc, #8]	; (808f0 <register_fini+0x10>)
   808e6:	f000 b805 	b.w	808f4 <atexit>
   808ea:	4770      	bx	lr
   808ec:	00000000 	.word	0x00000000
   808f0:	00080901 	.word	0x00080901

000808f4 <atexit>:
   808f4:	4601      	mov	r1, r0
   808f6:	2000      	movs	r0, #0
   808f8:	4602      	mov	r2, r0
   808fa:	4603      	mov	r3, r0
   808fc:	f000 b818 	b.w	80930 <__register_exitproc>

00080900 <__libc_fini_array>:
   80900:	b538      	push	{r3, r4, r5, lr}
   80902:	4d09      	ldr	r5, [pc, #36]	; (80928 <__libc_fini_array+0x28>)
   80904:	4c09      	ldr	r4, [pc, #36]	; (8092c <__libc_fini_array+0x2c>)
   80906:	1b64      	subs	r4, r4, r5
   80908:	10a4      	asrs	r4, r4, #2
   8090a:	bf18      	it	ne
   8090c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   80910:	d005      	beq.n	8091e <__libc_fini_array+0x1e>
   80912:	3c01      	subs	r4, #1
   80914:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   80918:	4798      	blx	r3
   8091a:	2c00      	cmp	r4, #0
   8091c:	d1f9      	bne.n	80912 <__libc_fini_array+0x12>
   8091e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80922:	f000 b867 	b.w	809f4 <_fini>
   80926:	bf00      	nop
   80928:	00080a00 	.word	0x00080a00
   8092c:	00080a04 	.word	0x00080a04

00080930 <__register_exitproc>:
   80930:	b5f0      	push	{r4, r5, r6, r7, lr}
   80932:	4c27      	ldr	r4, [pc, #156]	; (809d0 <__register_exitproc+0xa0>)
   80934:	b085      	sub	sp, #20
   80936:	6826      	ldr	r6, [r4, #0]
   80938:	4607      	mov	r7, r0
   8093a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8093e:	2c00      	cmp	r4, #0
   80940:	d040      	beq.n	809c4 <__register_exitproc+0x94>
   80942:	6865      	ldr	r5, [r4, #4]
   80944:	2d1f      	cmp	r5, #31
   80946:	dd1e      	ble.n	80986 <__register_exitproc+0x56>
   80948:	4822      	ldr	r0, [pc, #136]	; (809d4 <__register_exitproc+0xa4>)
   8094a:	b918      	cbnz	r0, 80954 <__register_exitproc+0x24>
   8094c:	f04f 30ff 	mov.w	r0, #4294967295
   80950:	b005      	add	sp, #20
   80952:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80954:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80958:	9103      	str	r1, [sp, #12]
   8095a:	9202      	str	r2, [sp, #8]
   8095c:	9301      	str	r3, [sp, #4]
   8095e:	f3af 8000 	nop.w
   80962:	9903      	ldr	r1, [sp, #12]
   80964:	4604      	mov	r4, r0
   80966:	9a02      	ldr	r2, [sp, #8]
   80968:	9b01      	ldr	r3, [sp, #4]
   8096a:	2800      	cmp	r0, #0
   8096c:	d0ee      	beq.n	8094c <__register_exitproc+0x1c>
   8096e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   80972:	2000      	movs	r0, #0
   80974:	6025      	str	r5, [r4, #0]
   80976:	6060      	str	r0, [r4, #4]
   80978:	4605      	mov	r5, r0
   8097a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8097e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   80982:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   80986:	b93f      	cbnz	r7, 80998 <__register_exitproc+0x68>
   80988:	1c6b      	adds	r3, r5, #1
   8098a:	2000      	movs	r0, #0
   8098c:	3502      	adds	r5, #2
   8098e:	6063      	str	r3, [r4, #4]
   80990:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   80994:	b005      	add	sp, #20
   80996:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80998:	2601      	movs	r6, #1
   8099a:	40ae      	lsls	r6, r5
   8099c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   809a0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   809a4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   809a8:	2f02      	cmp	r7, #2
   809aa:	ea42 0206 	orr.w	r2, r2, r6
   809ae:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   809b2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   809b6:	d1e7      	bne.n	80988 <__register_exitproc+0x58>
   809b8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   809bc:	431e      	orrs	r6, r3
   809be:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   809c2:	e7e1      	b.n	80988 <__register_exitproc+0x58>
   809c4:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   809c8:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   809cc:	e7b9      	b.n	80942 <__register_exitproc+0x12>
   809ce:	bf00      	nop
   809d0:	000809dc 	.word	0x000809dc
   809d4:	00000000 	.word	0x00000000
   809d8:	00000043 	.word	0x00000043

000809dc <_global_impure_ptr>:
   809dc:	20070130                                0.. 

000809e0 <_init>:
   809e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   809e2:	bf00      	nop
   809e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   809e6:	bc08      	pop	{r3}
   809e8:	469e      	mov	lr, r3
   809ea:	4770      	bx	lr

000809ec <__init_array_start>:
   809ec:	000808e1 	.word	0x000808e1

000809f0 <__frame_dummy_init_array_entry>:
   809f0:	00080119                                ....

000809f4 <_fini>:
   809f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   809f6:	bf00      	nop
   809f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   809fa:	bc08      	pop	{r3}
   809fc:	469e      	mov	lr, r3
   809fe:	4770      	bx	lr

00080a00 <__fini_array_start>:
   80a00:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
20070164:	000809d8 00000000 00000000 00000000     ................
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...
