
Test_AA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004038  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084038  00084038  0000c038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000099c  20070000  00084040  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000174  2007099c  000849dc  0001099c  2**2
                  ALLOC
  4 .stack        00002000  20070b10  00084b50  0001099c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0001099c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109c5  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001164c  00000000  00000000  00010a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002f3e  00000000  00000000  0002206c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004a7c  00000000  00000000  00024faa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b28  00000000  00000000  00029a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bc8  00000000  00000000  0002a54e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00019dc9  00000000  00000000  0002b116  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012cdb  00000000  00000000  00044edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000633ee  00000000  00000000  00057bba  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000021b8  00000000  00000000  000bafa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b10 	.word	0x20072b10
   80004:	00080b0d 	.word	0x00080b0d
   80008:	00080b09 	.word	0x00080b09
   8000c:	00080b09 	.word	0x00080b09
   80010:	00080b09 	.word	0x00080b09
   80014:	00080b09 	.word	0x00080b09
   80018:	00080b09 	.word	0x00080b09
	...
   8002c:	00080b09 	.word	0x00080b09
   80030:	00080b09 	.word	0x00080b09
   80034:	00000000 	.word	0x00000000
   80038:	00080b09 	.word	0x00080b09
   8003c:	00080b09 	.word	0x00080b09
   80040:	00080b09 	.word	0x00080b09
   80044:	00080b09 	.word	0x00080b09
   80048:	00080b09 	.word	0x00080b09
   8004c:	00080b09 	.word	0x00080b09
   80050:	00080b09 	.word	0x00080b09
   80054:	00080b09 	.word	0x00080b09
   80058:	00080b09 	.word	0x00080b09
   8005c:	00080b09 	.word	0x00080b09
   80060:	00080b09 	.word	0x00080b09
   80064:	00080b09 	.word	0x00080b09
   80068:	00000000 	.word	0x00000000
   8006c:	00080979 	.word	0x00080979
   80070:	0008098d 	.word	0x0008098d
   80074:	000809a1 	.word	0x000809a1
   80078:	000809b5 	.word	0x000809b5
	...
   80084:	00080365 	.word	0x00080365
   80088:	00080b09 	.word	0x00080b09
   8008c:	00080b09 	.word	0x00080b09
   80090:	00080b09 	.word	0x00080b09
   80094:	00080b09 	.word	0x00080b09
   80098:	00080b09 	.word	0x00080b09
   8009c:	00080b09 	.word	0x00080b09
   800a0:	00080b09 	.word	0x00080b09
   800a4:	00000000 	.word	0x00000000
   800a8:	00080b09 	.word	0x00080b09
   800ac:	00080b09 	.word	0x00080b09
   800b0:	00080b09 	.word	0x00080b09
   800b4:	00080b09 	.word	0x00080b09
   800b8:	00080b09 	.word	0x00080b09
   800bc:	00080b09 	.word	0x00080b09
   800c0:	00080b09 	.word	0x00080b09
   800c4:	00080b09 	.word	0x00080b09
   800c8:	00080b09 	.word	0x00080b09
   800cc:	00080b09 	.word	0x00080b09
   800d0:	00080b09 	.word	0x00080b09
   800d4:	00080b09 	.word	0x00080b09
   800d8:	00080b09 	.word	0x00080b09
   800dc:	00080b09 	.word	0x00080b09
   800e0:	00080b09 	.word	0x00080b09
   800e4:	00080b09 	.word	0x00080b09
   800e8:	00080b09 	.word	0x00080b09
   800ec:	00080b09 	.word	0x00080b09
   800f0:	00080b09 	.word	0x00080b09

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007099c 	.word	0x2007099c
   80110:	00000000 	.word	0x00000000
   80114:	00084040 	.word	0x00084040

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00084040 	.word	0x00084040
   8013c:	200709a0 	.word	0x200709a0
   80140:	00084040 	.word	0x00084040
   80144:	00000000 	.word	0x00000000

00080148 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8014c:	b083      	sub	sp, #12
   8014e:	4605      	mov	r5, r0
	while (len) {
   80150:	4690      	mov	r8, r2
   80152:	2a00      	cmp	r2, #0
   80154:	d047      	beq.n	801e6 <usart_serial_read_packet+0x9e>
   80156:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80158:	4f25      	ldr	r7, [pc, #148]	; (801f0 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   8015a:	4c26      	ldr	r4, [pc, #152]	; (801f4 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8015c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80208 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80160:	f8df b094 	ldr.w	fp, [pc, #148]	; 801f8 <usart_serial_read_packet+0xb0>
   80164:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80168:	2300      	movs	r3, #0
   8016a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8016c:	4b22      	ldr	r3, [pc, #136]	; (801f8 <usart_serial_read_packet+0xb0>)
   8016e:	429d      	cmp	r5, r3
   80170:	d106      	bne.n	80180 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80172:	4658      	mov	r0, fp
   80174:	4649      	mov	r1, r9
   80176:	4b21      	ldr	r3, [pc, #132]	; (801fc <usart_serial_read_packet+0xb4>)
   80178:	4798      	blx	r3
   8017a:	2800      	cmp	r0, #0
   8017c:	d1f9      	bne.n	80172 <usart_serial_read_packet+0x2a>
   8017e:	e019      	b.n	801b4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80180:	4b1f      	ldr	r3, [pc, #124]	; (80200 <usart_serial_read_packet+0xb8>)
   80182:	429d      	cmp	r5, r3
   80184:	d109      	bne.n	8019a <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80186:	4699      	mov	r9, r3
   80188:	4648      	mov	r0, r9
   8018a:	a901      	add	r1, sp, #4
   8018c:	47a0      	blx	r4
   8018e:	2800      	cmp	r0, #0
   80190:	d1fa      	bne.n	80188 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   80192:	9b01      	ldr	r3, [sp, #4]
   80194:	f806 3c01 	strb.w	r3, [r6, #-1]
   80198:	e017      	b.n	801ca <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8019a:	4b1a      	ldr	r3, [pc, #104]	; (80204 <usart_serial_read_packet+0xbc>)
   8019c:	429d      	cmp	r5, r3
   8019e:	d109      	bne.n	801b4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   801a0:	4699      	mov	r9, r3
   801a2:	4648      	mov	r0, r9
   801a4:	a901      	add	r1, sp, #4
   801a6:	47a0      	blx	r4
   801a8:	2800      	cmp	r0, #0
   801aa:	d1fa      	bne.n	801a2 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   801ac:	9b01      	ldr	r3, [sp, #4]
   801ae:	f806 3c01 	strb.w	r3, [r6, #-1]
   801b2:	e014      	b.n	801de <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801b4:	4555      	cmp	r5, sl
   801b6:	d108      	bne.n	801ca <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   801b8:	4650      	mov	r0, sl
   801ba:	a901      	add	r1, sp, #4
   801bc:	47a0      	blx	r4
   801be:	2800      	cmp	r0, #0
   801c0:	d1fa      	bne.n	801b8 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   801c2:	9b01      	ldr	r3, [sp, #4]
   801c4:	f806 3c01 	strb.w	r3, [r6, #-1]
   801c8:	e009      	b.n	801de <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801ca:	42bd      	cmp	r5, r7
   801cc:	d107      	bne.n	801de <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   801ce:	4638      	mov	r0, r7
   801d0:	a901      	add	r1, sp, #4
   801d2:	47a0      	blx	r4
   801d4:	2800      	cmp	r0, #0
   801d6:	d1fa      	bne.n	801ce <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   801d8:	9b01      	ldr	r3, [sp, #4]
   801da:	f806 3c01 	strb.w	r3, [r6, #-1]
   801de:	3601      	adds	r6, #1
   801e0:	f1b8 0801 	subs.w	r8, r8, #1
   801e4:	d1be      	bne.n	80164 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   801e6:	2000      	movs	r0, #0
   801e8:	b003      	add	sp, #12
   801ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   801ee:	bf00      	nop
   801f0:	400a4000 	.word	0x400a4000
   801f4:	0008034d 	.word	0x0008034d
   801f8:	400e0800 	.word	0x400e0800
   801fc:	00080325 	.word	0x00080325
   80200:	40098000 	.word	0x40098000
   80204:	4009c000 	.word	0x4009c000
   80208:	400a0000 	.word	0x400a0000

0008020c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8020c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80210:	460c      	mov	r4, r1
   80212:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80214:	b960      	cbnz	r0, 80230 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80216:	2a00      	cmp	r2, #0
   80218:	dd0e      	ble.n	80238 <_read+0x2c>
   8021a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   8021c:	4e09      	ldr	r6, [pc, #36]	; (80244 <_read+0x38>)
   8021e:	4d0a      	ldr	r5, [pc, #40]	; (80248 <_read+0x3c>)
   80220:	6830      	ldr	r0, [r6, #0]
   80222:	4621      	mov	r1, r4
   80224:	682b      	ldr	r3, [r5, #0]
   80226:	4798      	blx	r3
		ptr++;
   80228:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8022a:	42bc      	cmp	r4, r7
   8022c:	d1f8      	bne.n	80220 <_read+0x14>
   8022e:	e006      	b.n	8023e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80230:	f04f 30ff 	mov.w	r0, #4294967295
   80234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80238:	2000      	movs	r0, #0
   8023a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8023e:	4640      	mov	r0, r8
	}
	return nChars;
}
   80240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80244:	20070b08 	.word	0x20070b08
   80248:	20070b00 	.word	0x20070b00

0008024c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8024c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80250:	460e      	mov	r6, r1
   80252:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80254:	3801      	subs	r0, #1
   80256:	2802      	cmp	r0, #2
   80258:	d80f      	bhi.n	8027a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   8025a:	b192      	cbz	r2, 80282 <_write+0x36>
   8025c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8025e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8029c <_write+0x50>
   80262:	4f0d      	ldr	r7, [pc, #52]	; (80298 <_write+0x4c>)
   80264:	f8d8 0000 	ldr.w	r0, [r8]
   80268:	5d31      	ldrb	r1, [r6, r4]
   8026a:	683b      	ldr	r3, [r7, #0]
   8026c:	4798      	blx	r3
   8026e:	2800      	cmp	r0, #0
   80270:	db0a      	blt.n	80288 <_write+0x3c>
			return -1;
		}
		++nChars;
   80272:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80274:	42a5      	cmp	r5, r4
   80276:	d1f5      	bne.n	80264 <_write+0x18>
   80278:	e00a      	b.n	80290 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8027a:	f04f 30ff 	mov.w	r0, #4294967295
   8027e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80282:	2000      	movs	r0, #0
   80284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80288:	f04f 30ff 	mov.w	r0, #4294967295
   8028c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80290:	4620      	mov	r0, r4
	}
	return nChars;
}
   80292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80296:	bf00      	nop
   80298:	20070b04 	.word	0x20070b04
   8029c:	20070b08 	.word	0x20070b08

000802a0 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   802a0:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   802a2:	0189      	lsls	r1, r1, #6
   802a4:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   802a6:	2402      	movs	r4, #2
   802a8:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   802aa:	f04f 31ff 	mov.w	r1, #4294967295
   802ae:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   802b0:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   802b2:	605a      	str	r2, [r3, #4]
}
   802b4:	f85d 4b04 	ldr.w	r4, [sp], #4
   802b8:	4770      	bx	lr
   802ba:	bf00      	nop

000802bc <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   802bc:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   802c0:	4770      	bx	lr
   802c2:	bf00      	nop

000802c4 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   802c4:	0189      	lsls	r1, r1, #6
   802c6:	2305      	movs	r3, #5
   802c8:	5043      	str	r3, [r0, r1]
   802ca:	4770      	bx	lr

000802cc <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   802cc:	0189      	lsls	r1, r1, #6
   802ce:	2302      	movs	r3, #2
   802d0:	5043      	str	r3, [r0, r1]
   802d2:	4770      	bx	lr

000802d4 <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   802d4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   802d8:	6908      	ldr	r0, [r1, #16]
}
   802da:	4770      	bx	lr

000802dc <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   802dc:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   802de:	23ac      	movs	r3, #172	; 0xac
   802e0:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   802e2:	680a      	ldr	r2, [r1, #0]
   802e4:	684b      	ldr	r3, [r1, #4]
   802e6:	fbb2 f3f3 	udiv	r3, r2, r3
   802ea:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   802ec:	1e5c      	subs	r4, r3, #1
   802ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   802f2:	4294      	cmp	r4, r2
   802f4:	d80a      	bhi.n	8030c <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   802f6:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   802f8:	688b      	ldr	r3, [r1, #8]
   802fa:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   802fc:	f240 2302 	movw	r3, #514	; 0x202
   80300:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80304:	2350      	movs	r3, #80	; 0x50
   80306:	6003      	str	r3, [r0, #0]

	return 0;
   80308:	2000      	movs	r0, #0
   8030a:	e000      	b.n	8030e <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   8030c:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8030e:	f85d 4b04 	ldr.w	r4, [sp], #4
   80312:	4770      	bx	lr

00080314 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80314:	6943      	ldr	r3, [r0, #20]
   80316:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8031a:	bf1a      	itte	ne
   8031c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8031e:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80320:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80322:	4770      	bx	lr

00080324 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80324:	6943      	ldr	r3, [r0, #20]
   80326:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8032a:	bf1d      	ittte	ne
   8032c:	6983      	ldrne	r3, [r0, #24]
   8032e:	700b      	strbne	r3, [r1, #0]
	return 0;
   80330:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80332:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80334:	4770      	bx	lr
   80336:	bf00      	nop

00080338 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80338:	6943      	ldr	r3, [r0, #20]
   8033a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8033e:	bf1d      	ittte	ne
   80340:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80344:	61c1      	strne	r1, [r0, #28]
	return 0;
   80346:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80348:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8034a:	4770      	bx	lr

0008034c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8034c:	6943      	ldr	r3, [r0, #20]
   8034e:	f013 0f01 	tst.w	r3, #1
   80352:	d005      	beq.n	80360 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80354:	6983      	ldr	r3, [r0, #24]
   80356:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8035a:	600b      	str	r3, [r1, #0]

	return 0;
   8035c:	2000      	movs	r0, #0
   8035e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80360:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80362:	4770      	bx	lr

00080364 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80364:	b500      	push	{lr}
   80366:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   80368:	4811      	ldr	r0, [pc, #68]	; (803b0 <USART0_Handler+0x4c>)
   8036a:	f10d 0107 	add.w	r1, sp, #7
   8036e:	2201      	movs	r2, #1
   80370:	4b10      	ldr	r3, [pc, #64]	; (803b4 <USART0_Handler+0x50>)
   80372:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80374:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80376:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   8037a:	2200      	movs	r2, #0
   8037c:	4b0e      	ldr	r3, [pc, #56]	; (803b8 <USART0_Handler+0x54>)
   8037e:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80380:	4b0e      	ldr	r3, [pc, #56]	; (803bc <USART0_Handler+0x58>)
   80382:	781b      	ldrb	r3, [r3, #0]
   80384:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80388:	4a0d      	ldr	r2, [pc, #52]	; (803c0 <USART0_Handler+0x5c>)
   8038a:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   8038c:	2b9b      	cmp	r3, #155	; 0x9b
   8038e:	d103      	bne.n	80398 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   80390:	2200      	movs	r2, #0
   80392:	4b0a      	ldr	r3, [pc, #40]	; (803bc <USART0_Handler+0x58>)
   80394:	701a      	strb	r2, [r3, #0]
   80396:	e002      	b.n	8039e <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   80398:	3301      	adds	r3, #1
   8039a:	4a08      	ldr	r2, [pc, #32]	; (803bc <USART0_Handler+0x58>)
   8039c:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   8039e:	2201      	movs	r2, #1
   803a0:	4b05      	ldr	r3, [pc, #20]	; (803b8 <USART0_Handler+0x54>)
   803a2:	701a      	strb	r2, [r3, #0]
   803a4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   803a8:	b662      	cpsie	i
}
   803aa:	b003      	add	sp, #12
   803ac:	f85d fb04 	ldr.w	pc, [sp], #4
   803b0:	40098000 	.word	0x40098000
   803b4:	00080149 	.word	0x00080149
   803b8:	2007012c 	.word	0x2007012c
   803bc:	20070a54 	.word	0x20070a54
   803c0:	200709b8 	.word	0x200709b8

000803c4 <initDrive>:
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   803c4:	4b13      	ldr	r3, [pc, #76]	; (80414 <initDrive+0x50>)
   803c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   803ca:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   803cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   803d0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
   803d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   803d8:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   803da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   803de:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
   803e2:	2202      	movs	r2, #2
   803e4:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   803e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   803ea:	2208      	movs	r2, #8
   803ec:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   803ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   803f2:	f44f 7200 	mov.w	r2, #512	; 0x200
   803f6:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   803f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   803fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80400:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80402:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80406:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
   8040a:	2204      	movs	r2, #4
   8040c:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8040e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   80412:	4770      	bx	lr
   80414:	400e1000 	.word	0x400e1000

00080418 <testStuff>:
	ioport_set_pin_dir(R4,IOPORT_DIR_INPUT);
	ioport_set_pin_dir(R5,IOPORT_DIR_INPUT);
}


void testStuff(void){
   80418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8041c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80420:	4b19      	ldr	r3, [pc, #100]	; (80488 <testStuff+0x70>)
   80422:	635a      	str	r2, [r3, #52]	; 0x34
	
	int count =0;
	int newcount = 0;
   80424:	2500      	movs	r5, #0
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80426:	4f19      	ldr	r7, [pc, #100]	; (8048c <testStuff+0x74>)
   80428:	4c19      	ldr	r4, [pc, #100]	; (80490 <testStuff+0x78>)
   8042a:	4e1a      	ldr	r6, [pc, #104]	; (80494 <testStuff+0x7c>)
	
	
	ioport_set_pin_level(R_RESET,LOW);
	
	while(newcount < 3600){
		moveForward(1400,1600);
   8042c:	f44f 60af 	mov.w	r0, #1400	; 0x578
   80430:	f44f 61c8 	mov.w	r1, #1600	; 0x640
   80434:	4b18      	ldr	r3, [pc, #96]	; (80498 <testStuff+0x80>)
   80436:	4798      	blx	r3
   80438:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   8043c:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
   80440:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   80442:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   80444:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   80446:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   80448:	f3c8 38c0 	ubfx	r8, r8, #15, #1
   8044c:	f3cc 0c40 	ubfx	ip, ip, #1, #1
		
		count = ioport_get_pin_level(R0)+ioport_get_pin_level(R1)*2+ioport_get_pin_level(R2)*4+ioport_get_pin_level(R3)*8
   80450:	eb08 0c4c 	add.w	ip, r8, ip, lsl #1
   80454:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   80458:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
   8045c:	f3c1 2140 	ubfx	r1, r1, #9, #1
   80460:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   80464:	f3c2 2280 	ubfx	r2, r2, #10, #1
		+ioport_get_pin_level(R4)*16+ioport_get_pin_level(R5)*32;
   80468:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   8046c:	f3c3 0380 	ubfx	r3, r3, #2, #1
	ioport_set_pin_level(R_RESET,LOW);
	
	while(newcount < 3600){
		moveForward(1400,1600);
		
		count = ioport_get_pin_level(R0)+ioport_get_pin_level(R1)*2+ioport_get_pin_level(R2)*4+ioport_get_pin_level(R3)*8
   80470:	eb02 1343 	add.w	r3, r2, r3, lsl #5
		+ioport_get_pin_level(R4)*16+ioport_get_pin_level(R5)*32;
		
		newcount = newcount + count;
   80474:	441d      	add	r5, r3
	
	
	
	ioport_set_pin_level(R_RESET,LOW);
	
	while(newcount < 3600){
   80476:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
   8047a:	dbd7      	blt.n	8042c <testStuff+0x14>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8047c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80480:	4b01      	ldr	r3, [pc, #4]	; (80488 <testStuff+0x70>)
   80482:	631a      	str	r2, [r3, #48]	; 0x30
   80484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80488:	400e1000 	.word	0x400e1000
   8048c:	400e0e00 	.word	0x400e0e00
   80490:	400e1400 	.word	0x400e1400
   80494:	400e1200 	.word	0x400e1200
   80498:	0008057d 	.word	0x0008057d

0008049c <initRegulator>:
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8049c:	4b06      	ldr	r3, [pc, #24]	; (804b8 <initRegulator+0x1c>)
   8049e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   804a2:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   804a8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
   804ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   804b0:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   804b6:	4770      	bx	lr
   804b8:	400e1000 	.word	0x400e1000

000804bc <delayInit>:

#include "asf.h"
#include "DelayFunctions.h"

void delayInit(void)		/* Initializes the timer used for delays */
{
   804bc:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);
   804be:	201b      	movs	r0, #27
   804c0:	4b08      	ldr	r3, [pc, #32]	; (804e4 <delayInit+0x28>)
   804c2:	4798      	blx	r3
	tc_init(TC0,0,0);		 /* TC0, channel 0, TCLK1 och capturemode */
   804c4:	4c08      	ldr	r4, [pc, #32]	; (804e8 <delayInit+0x2c>)
   804c6:	4620      	mov	r0, r4
   804c8:	2100      	movs	r1, #0
   804ca:	460a      	mov	r2, r1
   804cc:	4b07      	ldr	r3, [pc, #28]	; (804ec <delayInit+0x30>)
   804ce:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   804d0:	4620      	mov	r0, r4
   804d2:	2100      	movs	r1, #0
   804d4:	4b06      	ldr	r3, [pc, #24]	; (804f0 <delayInit+0x34>)
   804d6:	4798      	blx	r3
	tc_stop(TC0,0);			/* making sure the timer does not run  */
   804d8:	4620      	mov	r0, r4
   804da:	2100      	movs	r1, #0
   804dc:	4b05      	ldr	r3, [pc, #20]	; (804f4 <delayInit+0x38>)
   804de:	4798      	blx	r3
   804e0:	bd10      	pop	{r4, pc}
   804e2:	bf00      	nop
   804e4:	00080ab1 	.word	0x00080ab1
   804e8:	40080000 	.word	0x40080000
   804ec:	000802a1 	.word	0x000802a1
   804f0:	000802bd 	.word	0x000802bd
   804f4:	000802cd 	.word	0x000802cd

000804f8 <delayMicroseconds>:
}


void delayMicroseconds(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   804f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   804fa:	4604      	mov	r4, r0
	tc_start(TC0,0);
   804fc:	4809      	ldr	r0, [pc, #36]	; (80524 <delayMicroseconds+0x2c>)
   804fe:	2100      	movs	r1, #0
   80500:	4b09      	ldr	r3, [pc, #36]	; (80528 <delayMicroseconds+0x30>)
   80502:	4798      	blx	r3
	while (tc_read_cv(TC0,0) < us*42); /* Only works in newere version of ASF */
   80504:	272a      	movs	r7, #42	; 0x2a
   80506:	fb07 f704 	mul.w	r7, r7, r4
   8050a:	4e06      	ldr	r6, [pc, #24]	; (80524 <delayMicroseconds+0x2c>)
   8050c:	2500      	movs	r5, #0
   8050e:	4c07      	ldr	r4, [pc, #28]	; (8052c <delayMicroseconds+0x34>)
   80510:	4630      	mov	r0, r6
   80512:	4629      	mov	r1, r5
   80514:	47a0      	blx	r4
   80516:	42b8      	cmp	r0, r7
   80518:	d3fa      	bcc.n	80510 <delayMicroseconds+0x18>
	tc_stop(TC0,0);
   8051a:	4802      	ldr	r0, [pc, #8]	; (80524 <delayMicroseconds+0x2c>)
   8051c:	2100      	movs	r1, #0
   8051e:	4b04      	ldr	r3, [pc, #16]	; (80530 <delayMicroseconds+0x38>)
   80520:	4798      	blx	r3
   80522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80524:	40080000 	.word	0x40080000
   80528:	000802c5 	.word	0x000802c5
   8052c:	000802d5 	.word	0x000802d5
   80530:	000802cd 	.word	0x000802cd

00080534 <initMotor>:
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80534:	4b04      	ldr	r3, [pc, #16]	; (80548 <initMotor+0x14>)
   80536:	2210      	movs	r2, #16
   80538:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8053a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8053e:	2220      	movs	r2, #32
   80540:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80542:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   80546:	4770      	bx	lr
   80548:	400e1200 	.word	0x400e1200

0008054c <pulseLeft>:
}




void pulseLeft(int p1){
   8054c:	b538      	push	{r3, r4, r5, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8054e:	4c03      	ldr	r4, [pc, #12]	; (8055c <pulseLeft+0x10>)
   80550:	2510      	movs	r5, #16
   80552:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LEFT,HIGH);
	delayMicroseconds(p1);
   80554:	4b02      	ldr	r3, [pc, #8]	; (80560 <pulseLeft+0x14>)
   80556:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80558:	6365      	str	r5, [r4, #52]	; 0x34
   8055a:	bd38      	pop	{r3, r4, r5, pc}
   8055c:	400e1200 	.word	0x400e1200
   80560:	000804f9 	.word	0x000804f9

00080564 <pulseRight>:
	ioport_set_pin_level(LEFT,LOW);
}
void pulseRight(int p2){
   80564:	b538      	push	{r3, r4, r5, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80566:	4c03      	ldr	r4, [pc, #12]	; (80574 <pulseRight+0x10>)
   80568:	2520      	movs	r5, #32
   8056a:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(RIGHT,HIGH);
	delayMicroseconds(p2);
   8056c:	4b02      	ldr	r3, [pc, #8]	; (80578 <pulseRight+0x14>)
   8056e:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80570:	6365      	str	r5, [r4, #52]	; 0x34
   80572:	bd38      	pop	{r3, r4, r5, pc}
   80574:	400e1200 	.word	0x400e1200
   80578:	000804f9 	.word	0x000804f9

0008057c <moveForward>:
	ioport_set_pin_level(RIGHT,LOW);
}

void moveForward(int l,int r){
   8057c:	b510      	push	{r4, lr}
   8057e:	460c      	mov	r4, r1
	pulseLeft(l);
   80580:	4b04      	ldr	r3, [pc, #16]	; (80594 <moveForward+0x18>)
   80582:	4798      	blx	r3
	pulseRight(r);
   80584:	4620      	mov	r0, r4
   80586:	4b04      	ldr	r3, [pc, #16]	; (80598 <moveForward+0x1c>)
   80588:	4798      	blx	r3
	delayMicroseconds(5250);
   8058a:	f241 4082 	movw	r0, #5250	; 0x1482
   8058e:	4b03      	ldr	r3, [pc, #12]	; (8059c <moveForward+0x20>)
   80590:	4798      	blx	r3
   80592:	bd10      	pop	{r4, pc}
   80594:	0008054d 	.word	0x0008054d
   80598:	00080565 	.word	0x00080565
   8059c:	000804f9 	.word	0x000804f9

000805a0 <initRotateMotor>:


int r_count = 0;
int l_count = 0;

void initRotateMotor(void){
   805a0:	b470      	push	{r4, r5, r6}
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   805a2:	4b20      	ldr	r3, [pc, #128]	; (80624 <initRotateMotor+0x84>)
   805a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   805a8:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   805aa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   805ae:	491e      	ldr	r1, [pc, #120]	; (80628 <initRotateMotor+0x88>)
   805b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   805b4:	610b      	str	r3, [r1, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   805b6:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   805ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   805be:	614b      	str	r3, [r1, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   805c0:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   805c4:	4b19      	ldr	r3, [pc, #100]	; (8062c <initRotateMotor+0x8c>)
   805c6:	2402      	movs	r4, #2
   805c8:	615c      	str	r4, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   805ca:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   805ce:	2008      	movs	r0, #8
   805d0:	6158      	str	r0, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   805d2:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   805d6:	f44f 7200 	mov.w	r2, #512	; 0x200
   805da:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   805dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   805e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   805e4:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   805e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   805ea:	4a11      	ldr	r2, [pc, #68]	; (80630 <initRotateMotor+0x90>)
   805ec:	2504      	movs	r5, #4
   805ee:	6155      	str	r5, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   805f0:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   805f4:	2601      	movs	r6, #1
   805f6:	615e      	str	r6, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   805f8:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   805fc:	615d      	str	r5, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   805fe:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80602:	2540      	movs	r5, #64	; 0x40
   80604:	615d      	str	r5, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80606:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8060a:	2380      	movs	r3, #128	; 0x80
   8060c:	614b      	str	r3, [r1, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8060e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80612:	6154      	str	r4, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80614:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80618:	6150      	str	r0, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8061a:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
    ioport_set_pin_dir(L4,IOPORT_DIR_INPUT);
    ioport_set_pin_dir(L5,IOPORT_DIR_INPUT);

	  
    
}
   8061e:	bc70      	pop	{r4, r5, r6}
   80620:	4770      	bx	lr
   80622:	bf00      	nop
   80624:	400e1000 	.word	0x400e1000
   80628:	400e0e00 	.word	0x400e0e00
   8062c:	400e1400 	.word	0x400e1400
   80630:	400e1200 	.word	0x400e1200

00080634 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80634:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80636:	480e      	ldr	r0, [pc, #56]	; (80670 <sysclk_init+0x3c>)
   80638:	4b0e      	ldr	r3, [pc, #56]	; (80674 <sysclk_init+0x40>)
   8063a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8063c:	2000      	movs	r0, #0
   8063e:	213e      	movs	r1, #62	; 0x3e
   80640:	4b0d      	ldr	r3, [pc, #52]	; (80678 <sysclk_init+0x44>)
   80642:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80644:	4c0d      	ldr	r4, [pc, #52]	; (8067c <sysclk_init+0x48>)
   80646:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80648:	2800      	cmp	r0, #0
   8064a:	d0fc      	beq.n	80646 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8064c:	4b0c      	ldr	r3, [pc, #48]	; (80680 <sysclk_init+0x4c>)
   8064e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80650:	4a0c      	ldr	r2, [pc, #48]	; (80684 <sysclk_init+0x50>)
   80652:	4b0d      	ldr	r3, [pc, #52]	; (80688 <sysclk_init+0x54>)
   80654:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80656:	4c0d      	ldr	r4, [pc, #52]	; (8068c <sysclk_init+0x58>)
   80658:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8065a:	2800      	cmp	r0, #0
   8065c:	d0fc      	beq.n	80658 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8065e:	2010      	movs	r0, #16
   80660:	4b0b      	ldr	r3, [pc, #44]	; (80690 <sysclk_init+0x5c>)
   80662:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80664:	4b0b      	ldr	r3, [pc, #44]	; (80694 <sysclk_init+0x60>)
   80666:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80668:	4801      	ldr	r0, [pc, #4]	; (80670 <sysclk_init+0x3c>)
   8066a:	4b02      	ldr	r3, [pc, #8]	; (80674 <sysclk_init+0x40>)
   8066c:	4798      	blx	r3
   8066e:	bd10      	pop	{r4, pc}
   80670:	0501bd00 	.word	0x0501bd00
   80674:	200700a5 	.word	0x200700a5
   80678:	00080a2d 	.word	0x00080a2d
   8067c:	00080a81 	.word	0x00080a81
   80680:	00080a91 	.word	0x00080a91
   80684:	200d3f01 	.word	0x200d3f01
   80688:	400e0600 	.word	0x400e0600
   8068c:	00080aa1 	.word	0x00080aa1
   80690:	000809c9 	.word	0x000809c9
   80694:	00080bbd 	.word	0x00080bbd

00080698 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80698:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8069a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8069e:	4b12      	ldr	r3, [pc, #72]	; (806e8 <board_init+0x50>)
   806a0:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   806a2:	200b      	movs	r0, #11
   806a4:	4c11      	ldr	r4, [pc, #68]	; (806ec <board_init+0x54>)
   806a6:	47a0      	blx	r4
   806a8:	200c      	movs	r0, #12
   806aa:	47a0      	blx	r4
   806ac:	200d      	movs	r0, #13
   806ae:	47a0      	blx	r4
   806b0:	200e      	movs	r0, #14
   806b2:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   806b4:	203b      	movs	r0, #59	; 0x3b
   806b6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   806ba:	4c0d      	ldr	r4, [pc, #52]	; (806f0 <board_init+0x58>)
   806bc:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   806be:	2055      	movs	r0, #85	; 0x55
   806c0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   806c4:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   806c6:	2056      	movs	r0, #86	; 0x56
   806c8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   806cc:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   806ce:	2068      	movs	r0, #104	; 0x68
   806d0:	4908      	ldr	r1, [pc, #32]	; (806f4 <board_init+0x5c>)
   806d2:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   806d4:	205c      	movs	r0, #92	; 0x5c
   806d6:	4908      	ldr	r1, [pc, #32]	; (806f8 <board_init+0x60>)
   806d8:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   806da:	4808      	ldr	r0, [pc, #32]	; (806fc <board_init+0x64>)
   806dc:	f44f 7140 	mov.w	r1, #768	; 0x300
   806e0:	4a07      	ldr	r2, [pc, #28]	; (80700 <board_init+0x68>)
   806e2:	4b08      	ldr	r3, [pc, #32]	; (80704 <board_init+0x6c>)
   806e4:	4798      	blx	r3
   806e6:	bd10      	pop	{r4, pc}
   806e8:	400e1a50 	.word	0x400e1a50
   806ec:	00080ab1 	.word	0x00080ab1
   806f0:	000807ad 	.word	0x000807ad
   806f4:	28000079 	.word	0x28000079
   806f8:	28000001 	.word	0x28000001
   806fc:	400e0e00 	.word	0x400e0e00
   80700:	08000001 	.word	0x08000001
   80704:	00080881 	.word	0x00080881

00080708 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80708:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8070a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8070e:	d016      	beq.n	8073e <pio_set_peripheral+0x36>
   80710:	d804      	bhi.n	8071c <pio_set_peripheral+0x14>
   80712:	b1c1      	cbz	r1, 80746 <pio_set_peripheral+0x3e>
   80714:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80718:	d00a      	beq.n	80730 <pio_set_peripheral+0x28>
   8071a:	e013      	b.n	80744 <pio_set_peripheral+0x3c>
   8071c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80720:	d011      	beq.n	80746 <pio_set_peripheral+0x3e>
   80722:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80726:	d00e      	beq.n	80746 <pio_set_peripheral+0x3e>
   80728:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8072c:	d10a      	bne.n	80744 <pio_set_peripheral+0x3c>
   8072e:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80730:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80732:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80734:	400b      	ands	r3, r1
   80736:	ea23 0302 	bic.w	r3, r3, r2
   8073a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8073c:	e002      	b.n	80744 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8073e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80740:	4313      	orrs	r3, r2
   80742:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80744:	6042      	str	r2, [r0, #4]
   80746:	4770      	bx	lr

00080748 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80748:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8074a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8074e:	bf14      	ite	ne
   80750:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80752:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80754:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80758:	bf14      	ite	ne
   8075a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8075c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8075e:	f012 0f02 	tst.w	r2, #2
   80762:	d002      	beq.n	8076a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80764:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80768:	e004      	b.n	80774 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8076a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8076e:	bf18      	it	ne
   80770:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80774:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80776:	6001      	str	r1, [r0, #0]
   80778:	4770      	bx	lr
   8077a:	bf00      	nop

0008077c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8077c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8077e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80780:	9c01      	ldr	r4, [sp, #4]
   80782:	b10c      	cbz	r4, 80788 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80784:	6641      	str	r1, [r0, #100]	; 0x64
   80786:	e000      	b.n	8078a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80788:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8078a:	b10b      	cbz	r3, 80790 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   8078c:	6501      	str	r1, [r0, #80]	; 0x50
   8078e:	e000      	b.n	80792 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80790:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80792:	b10a      	cbz	r2, 80798 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80794:	6301      	str	r1, [r0, #48]	; 0x30
   80796:	e000      	b.n	8079a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80798:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8079a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8079c:	6001      	str	r1, [r0, #0]
}
   8079e:	f85d 4b04 	ldr.w	r4, [sp], #4
   807a2:	4770      	bx	lr

000807a4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   807a4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   807a6:	4770      	bx	lr

000807a8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   807a8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   807aa:	4770      	bx	lr

000807ac <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   807ac:	b570      	push	{r4, r5, r6, lr}
   807ae:	b082      	sub	sp, #8
   807b0:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   807b2:	0944      	lsrs	r4, r0, #5
   807b4:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   807b8:	f204 7407 	addw	r4, r4, #1799	; 0x707
   807bc:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   807be:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   807c2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   807c6:	d030      	beq.n	8082a <pio_configure_pin+0x7e>
   807c8:	d806      	bhi.n	807d8 <pio_configure_pin+0x2c>
   807ca:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   807ce:	d00a      	beq.n	807e6 <pio_configure_pin+0x3a>
   807d0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   807d4:	d018      	beq.n	80808 <pio_configure_pin+0x5c>
   807d6:	e049      	b.n	8086c <pio_configure_pin+0xc0>
   807d8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   807dc:	d030      	beq.n	80840 <pio_configure_pin+0x94>
   807de:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   807e2:	d02d      	beq.n	80840 <pio_configure_pin+0x94>
   807e4:	e042      	b.n	8086c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   807e6:	f000 001f 	and.w	r0, r0, #31
   807ea:	2401      	movs	r4, #1
   807ec:	4084      	lsls	r4, r0
   807ee:	4630      	mov	r0, r6
   807f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807f4:	4622      	mov	r2, r4
   807f6:	4b1f      	ldr	r3, [pc, #124]	; (80874 <pio_configure_pin+0xc8>)
   807f8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   807fa:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   807fe:	bf14      	ite	ne
   80800:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80802:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80804:	2001      	movs	r0, #1
   80806:	e032      	b.n	8086e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80808:	f000 001f 	and.w	r0, r0, #31
   8080c:	2401      	movs	r4, #1
   8080e:	4084      	lsls	r4, r0
   80810:	4630      	mov	r0, r6
   80812:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80816:	4622      	mov	r2, r4
   80818:	4b16      	ldr	r3, [pc, #88]	; (80874 <pio_configure_pin+0xc8>)
   8081a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8081c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80820:	bf14      	ite	ne
   80822:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80824:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80826:	2001      	movs	r0, #1
   80828:	e021      	b.n	8086e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8082a:	f000 011f 	and.w	r1, r0, #31
   8082e:	2401      	movs	r4, #1
   80830:	4630      	mov	r0, r6
   80832:	fa04 f101 	lsl.w	r1, r4, r1
   80836:	462a      	mov	r2, r5
   80838:	4b0f      	ldr	r3, [pc, #60]	; (80878 <pio_configure_pin+0xcc>)
   8083a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8083c:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8083e:	e016      	b.n	8086e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80840:	f000 011f 	and.w	r1, r0, #31
   80844:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80846:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8084a:	ea05 0304 	and.w	r3, r5, r4
   8084e:	9300      	str	r3, [sp, #0]
   80850:	4630      	mov	r0, r6
   80852:	fa04 f101 	lsl.w	r1, r4, r1
   80856:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8085a:	bf14      	ite	ne
   8085c:	2200      	movne	r2, #0
   8085e:	2201      	moveq	r2, #1
   80860:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80864:	4d05      	ldr	r5, [pc, #20]	; (8087c <pio_configure_pin+0xd0>)
   80866:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80868:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8086a:	e000      	b.n	8086e <pio_configure_pin+0xc2>

	default:
		return 0;
   8086c:	2000      	movs	r0, #0
	}

	return 1;
}
   8086e:	b002      	add	sp, #8
   80870:	bd70      	pop	{r4, r5, r6, pc}
   80872:	bf00      	nop
   80874:	00080709 	.word	0x00080709
   80878:	00080749 	.word	0x00080749
   8087c:	0008077d 	.word	0x0008077d

00080880 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80880:	b5f0      	push	{r4, r5, r6, r7, lr}
   80882:	b083      	sub	sp, #12
   80884:	4607      	mov	r7, r0
   80886:	460e      	mov	r6, r1
   80888:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8088a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8088e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80892:	d026      	beq.n	808e2 <pio_configure_pin_group+0x62>
   80894:	d806      	bhi.n	808a4 <pio_configure_pin_group+0x24>
   80896:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8089a:	d00a      	beq.n	808b2 <pio_configure_pin_group+0x32>
   8089c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   808a0:	d013      	beq.n	808ca <pio_configure_pin_group+0x4a>
   808a2:	e034      	b.n	8090e <pio_configure_pin_group+0x8e>
   808a4:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   808a8:	d01f      	beq.n	808ea <pio_configure_pin_group+0x6a>
   808aa:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   808ae:	d01c      	beq.n	808ea <pio_configure_pin_group+0x6a>
   808b0:	e02d      	b.n	8090e <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   808b2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   808b6:	4632      	mov	r2, r6
   808b8:	4b16      	ldr	r3, [pc, #88]	; (80914 <pio_configure_pin_group+0x94>)
   808ba:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   808bc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   808c0:	bf14      	ite	ne
   808c2:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   808c4:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   808c6:	2001      	movs	r0, #1
   808c8:	e022      	b.n	80910 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   808ca:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   808ce:	4632      	mov	r2, r6
   808d0:	4b10      	ldr	r3, [pc, #64]	; (80914 <pio_configure_pin_group+0x94>)
   808d2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   808d4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   808d8:	bf14      	ite	ne
   808da:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   808dc:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   808de:	2001      	movs	r0, #1
   808e0:	e016      	b.n	80910 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   808e2:	4b0d      	ldr	r3, [pc, #52]	; (80918 <pio_configure_pin_group+0x98>)
   808e4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   808e6:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   808e8:	e012      	b.n	80910 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   808ea:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   808ee:	f005 0301 	and.w	r3, r5, #1
   808f2:	9300      	str	r3, [sp, #0]
   808f4:	4638      	mov	r0, r7
   808f6:	4631      	mov	r1, r6
   808f8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   808fc:	bf14      	ite	ne
   808fe:	2200      	movne	r2, #0
   80900:	2201      	moveq	r2, #1
   80902:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80906:	4c05      	ldr	r4, [pc, #20]	; (8091c <pio_configure_pin_group+0x9c>)
   80908:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8090a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8090c:	e000      	b.n	80910 <pio_configure_pin_group+0x90>

	default:
		return 0;
   8090e:	2000      	movs	r0, #0
	}

	return 1;
}
   80910:	b003      	add	sp, #12
   80912:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80914:	00080709 	.word	0x00080709
   80918:	00080749 	.word	0x00080749
   8091c:	0008077d 	.word	0x0008077d

00080920 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80924:	4604      	mov	r4, r0
   80926:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80928:	4b10      	ldr	r3, [pc, #64]	; (8096c <pio_handler_process+0x4c>)
   8092a:	4798      	blx	r3
   8092c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8092e:	4620      	mov	r0, r4
   80930:	4b0f      	ldr	r3, [pc, #60]	; (80970 <pio_handler_process+0x50>)
   80932:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80934:	4005      	ands	r5, r0
   80936:	d017      	beq.n	80968 <pio_handler_process+0x48>
   80938:	4f0e      	ldr	r7, [pc, #56]	; (80974 <pio_handler_process+0x54>)
   8093a:	f107 040c 	add.w	r4, r7, #12
   8093e:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80940:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80944:	42b3      	cmp	r3, r6
   80946:	d10a      	bne.n	8095e <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80948:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8094c:	4229      	tst	r1, r5
   8094e:	d006      	beq.n	8095e <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80950:	6823      	ldr	r3, [r4, #0]
   80952:	4630      	mov	r0, r6
   80954:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80956:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8095a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8095e:	42bc      	cmp	r4, r7
   80960:	d002      	beq.n	80968 <pio_handler_process+0x48>
   80962:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80964:	2d00      	cmp	r5, #0
   80966:	d1eb      	bne.n	80940 <pio_handler_process+0x20>
   80968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8096c:	000807a5 	.word	0x000807a5
   80970:	000807a9 	.word	0x000807a9
   80974:	20070a58 	.word	0x20070a58

00080978 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80978:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8097a:	4802      	ldr	r0, [pc, #8]	; (80984 <PIOA_Handler+0xc>)
   8097c:	210b      	movs	r1, #11
   8097e:	4b02      	ldr	r3, [pc, #8]	; (80988 <PIOA_Handler+0x10>)
   80980:	4798      	blx	r3
   80982:	bd08      	pop	{r3, pc}
   80984:	400e0e00 	.word	0x400e0e00
   80988:	00080921 	.word	0x00080921

0008098c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8098c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8098e:	4802      	ldr	r0, [pc, #8]	; (80998 <PIOB_Handler+0xc>)
   80990:	210c      	movs	r1, #12
   80992:	4b02      	ldr	r3, [pc, #8]	; (8099c <PIOB_Handler+0x10>)
   80994:	4798      	blx	r3
   80996:	bd08      	pop	{r3, pc}
   80998:	400e1000 	.word	0x400e1000
   8099c:	00080921 	.word	0x00080921

000809a0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   809a0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   809a2:	4802      	ldr	r0, [pc, #8]	; (809ac <PIOC_Handler+0xc>)
   809a4:	210d      	movs	r1, #13
   809a6:	4b02      	ldr	r3, [pc, #8]	; (809b0 <PIOC_Handler+0x10>)
   809a8:	4798      	blx	r3
   809aa:	bd08      	pop	{r3, pc}
   809ac:	400e1200 	.word	0x400e1200
   809b0:	00080921 	.word	0x00080921

000809b4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   809b4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   809b6:	4802      	ldr	r0, [pc, #8]	; (809c0 <PIOD_Handler+0xc>)
   809b8:	210e      	movs	r1, #14
   809ba:	4b02      	ldr	r3, [pc, #8]	; (809c4 <PIOD_Handler+0x10>)
   809bc:	4798      	blx	r3
   809be:	bd08      	pop	{r3, pc}
   809c0:	400e1400 	.word	0x400e1400
   809c4:	00080921 	.word	0x00080921

000809c8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   809c8:	4b17      	ldr	r3, [pc, #92]	; (80a28 <pmc_switch_mck_to_pllack+0x60>)
   809ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   809cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   809d0:	4310      	orrs	r0, r2
   809d2:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   809d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   809d6:	f013 0f08 	tst.w	r3, #8
   809da:	d109      	bne.n	809f0 <pmc_switch_mck_to_pllack+0x28>
   809dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   809e0:	4911      	ldr	r1, [pc, #68]	; (80a28 <pmc_switch_mck_to_pllack+0x60>)
   809e2:	e001      	b.n	809e8 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   809e4:	3b01      	subs	r3, #1
   809e6:	d019      	beq.n	80a1c <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   809e8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   809ea:	f012 0f08 	tst.w	r2, #8
   809ee:	d0f9      	beq.n	809e4 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   809f0:	4b0d      	ldr	r3, [pc, #52]	; (80a28 <pmc_switch_mck_to_pllack+0x60>)
   809f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   809f4:	f022 0203 	bic.w	r2, r2, #3
   809f8:	f042 0202 	orr.w	r2, r2, #2
   809fc:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   809fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80a00:	f010 0008 	ands.w	r0, r0, #8
   80a04:	d10c      	bne.n	80a20 <pmc_switch_mck_to_pllack+0x58>
   80a06:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80a0a:	4907      	ldr	r1, [pc, #28]	; (80a28 <pmc_switch_mck_to_pllack+0x60>)
   80a0c:	e001      	b.n	80a12 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80a0e:	3b01      	subs	r3, #1
   80a10:	d008      	beq.n	80a24 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a12:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80a14:	f012 0f08 	tst.w	r2, #8
   80a18:	d0f9      	beq.n	80a0e <pmc_switch_mck_to_pllack+0x46>
   80a1a:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80a1c:	2001      	movs	r0, #1
   80a1e:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80a20:	2000      	movs	r0, #0
   80a22:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80a24:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80a26:	4770      	bx	lr
   80a28:	400e0600 	.word	0x400e0600

00080a2c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80a2c:	b138      	cbz	r0, 80a3e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80a2e:	4911      	ldr	r1, [pc, #68]	; (80a74 <pmc_switch_mainck_to_xtal+0x48>)
   80a30:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80a32:	4a11      	ldr	r2, [pc, #68]	; (80a78 <pmc_switch_mainck_to_xtal+0x4c>)
   80a34:	401a      	ands	r2, r3
   80a36:	4b11      	ldr	r3, [pc, #68]	; (80a7c <pmc_switch_mainck_to_xtal+0x50>)
   80a38:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80a3a:	620b      	str	r3, [r1, #32]
   80a3c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80a3e:	4a0d      	ldr	r2, [pc, #52]	; (80a74 <pmc_switch_mainck_to_xtal+0x48>)
   80a40:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80a42:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80a46:	f023 0303 	bic.w	r3, r3, #3
   80a4a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80a4e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80a52:	0209      	lsls	r1, r1, #8
   80a54:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80a56:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80a58:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80a5a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80a5c:	f013 0f01 	tst.w	r3, #1
   80a60:	d0fb      	beq.n	80a5a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80a62:	4a04      	ldr	r2, [pc, #16]	; (80a74 <pmc_switch_mainck_to_xtal+0x48>)
   80a64:	6a13      	ldr	r3, [r2, #32]
   80a66:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80a6e:	6213      	str	r3, [r2, #32]
   80a70:	4770      	bx	lr
   80a72:	bf00      	nop
   80a74:	400e0600 	.word	0x400e0600
   80a78:	fec8fffc 	.word	0xfec8fffc
   80a7c:	01370002 	.word	0x01370002

00080a80 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80a80:	4b02      	ldr	r3, [pc, #8]	; (80a8c <pmc_osc_is_ready_mainck+0xc>)
   80a82:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80a84:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80a88:	4770      	bx	lr
   80a8a:	bf00      	nop
   80a8c:	400e0600 	.word	0x400e0600

00080a90 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80a90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80a94:	4b01      	ldr	r3, [pc, #4]	; (80a9c <pmc_disable_pllack+0xc>)
   80a96:	629a      	str	r2, [r3, #40]	; 0x28
   80a98:	4770      	bx	lr
   80a9a:	bf00      	nop
   80a9c:	400e0600 	.word	0x400e0600

00080aa0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80aa0:	4b02      	ldr	r3, [pc, #8]	; (80aac <pmc_is_locked_pllack+0xc>)
   80aa2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80aa4:	f000 0002 	and.w	r0, r0, #2
   80aa8:	4770      	bx	lr
   80aaa:	bf00      	nop
   80aac:	400e0600 	.word	0x400e0600

00080ab0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80ab0:	282c      	cmp	r0, #44	; 0x2c
   80ab2:	d820      	bhi.n	80af6 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80ab4:	281f      	cmp	r0, #31
   80ab6:	d80d      	bhi.n	80ad4 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80ab8:	4b12      	ldr	r3, [pc, #72]	; (80b04 <pmc_enable_periph_clk+0x54>)
   80aba:	699a      	ldr	r2, [r3, #24]
   80abc:	2301      	movs	r3, #1
   80abe:	4083      	lsls	r3, r0
   80ac0:	401a      	ands	r2, r3
   80ac2:	4293      	cmp	r3, r2
   80ac4:	d019      	beq.n	80afa <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80ac6:	2301      	movs	r3, #1
   80ac8:	fa03 f000 	lsl.w	r0, r3, r0
   80acc:	4b0d      	ldr	r3, [pc, #52]	; (80b04 <pmc_enable_periph_clk+0x54>)
   80ace:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80ad0:	2000      	movs	r0, #0
   80ad2:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80ad4:	4b0b      	ldr	r3, [pc, #44]	; (80b04 <pmc_enable_periph_clk+0x54>)
   80ad6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80ada:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80adc:	2301      	movs	r3, #1
   80ade:	4083      	lsls	r3, r0
   80ae0:	401a      	ands	r2, r3
   80ae2:	4293      	cmp	r3, r2
   80ae4:	d00b      	beq.n	80afe <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80ae6:	2301      	movs	r3, #1
   80ae8:	fa03 f000 	lsl.w	r0, r3, r0
   80aec:	4b05      	ldr	r3, [pc, #20]	; (80b04 <pmc_enable_periph_clk+0x54>)
   80aee:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80af2:	2000      	movs	r0, #0
   80af4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80af6:	2001      	movs	r0, #1
   80af8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80afa:	2000      	movs	r0, #0
   80afc:	4770      	bx	lr
   80afe:	2000      	movs	r0, #0
}
   80b00:	4770      	bx	lr
   80b02:	bf00      	nop
   80b04:	400e0600 	.word	0x400e0600

00080b08 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80b08:	e7fe      	b.n	80b08 <Dummy_Handler>
   80b0a:	bf00      	nop

00080b0c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80b0c:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80b0e:	4b1e      	ldr	r3, [pc, #120]	; (80b88 <Reset_Handler+0x7c>)
   80b10:	4a1e      	ldr	r2, [pc, #120]	; (80b8c <Reset_Handler+0x80>)
   80b12:	429a      	cmp	r2, r3
   80b14:	d003      	beq.n	80b1e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80b16:	4b1e      	ldr	r3, [pc, #120]	; (80b90 <Reset_Handler+0x84>)
   80b18:	4a1b      	ldr	r2, [pc, #108]	; (80b88 <Reset_Handler+0x7c>)
   80b1a:	429a      	cmp	r2, r3
   80b1c:	d304      	bcc.n	80b28 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80b1e:	4b1d      	ldr	r3, [pc, #116]	; (80b94 <Reset_Handler+0x88>)
   80b20:	4a1d      	ldr	r2, [pc, #116]	; (80b98 <Reset_Handler+0x8c>)
   80b22:	429a      	cmp	r2, r3
   80b24:	d30f      	bcc.n	80b46 <Reset_Handler+0x3a>
   80b26:	e01a      	b.n	80b5e <Reset_Handler+0x52>
   80b28:	4b1c      	ldr	r3, [pc, #112]	; (80b9c <Reset_Handler+0x90>)
   80b2a:	4c1d      	ldr	r4, [pc, #116]	; (80ba0 <Reset_Handler+0x94>)
   80b2c:	1ae4      	subs	r4, r4, r3
   80b2e:	f024 0403 	bic.w	r4, r4, #3
   80b32:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80b34:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80b36:	4814      	ldr	r0, [pc, #80]	; (80b88 <Reset_Handler+0x7c>)
   80b38:	4914      	ldr	r1, [pc, #80]	; (80b8c <Reset_Handler+0x80>)
   80b3a:	585a      	ldr	r2, [r3, r1]
   80b3c:	501a      	str	r2, [r3, r0]
   80b3e:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80b40:	42a3      	cmp	r3, r4
   80b42:	d1fa      	bne.n	80b3a <Reset_Handler+0x2e>
   80b44:	e7eb      	b.n	80b1e <Reset_Handler+0x12>
   80b46:	4b17      	ldr	r3, [pc, #92]	; (80ba4 <Reset_Handler+0x98>)
   80b48:	4917      	ldr	r1, [pc, #92]	; (80ba8 <Reset_Handler+0x9c>)
   80b4a:	1ac9      	subs	r1, r1, r3
   80b4c:	f021 0103 	bic.w	r1, r1, #3
   80b50:	1d1a      	adds	r2, r3, #4
   80b52:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80b54:	2200      	movs	r2, #0
   80b56:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80b5a:	428b      	cmp	r3, r1
   80b5c:	d1fb      	bne.n	80b56 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80b5e:	4a13      	ldr	r2, [pc, #76]	; (80bac <Reset_Handler+0xa0>)
   80b60:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80b64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80b68:	4911      	ldr	r1, [pc, #68]	; (80bb0 <Reset_Handler+0xa4>)
   80b6a:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80b6c:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80b70:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80b74:	d203      	bcs.n	80b7e <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80b76:	688a      	ldr	r2, [r1, #8]
   80b78:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80b7c:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80b7e:	4b0d      	ldr	r3, [pc, #52]	; (80bb4 <Reset_Handler+0xa8>)
   80b80:	4798      	blx	r3

	/* Branch to main function */
	main();
   80b82:	4b0d      	ldr	r3, [pc, #52]	; (80bb8 <Reset_Handler+0xac>)
   80b84:	4798      	blx	r3
   80b86:	e7fe      	b.n	80b86 <Reset_Handler+0x7a>
   80b88:	20070000 	.word	0x20070000
   80b8c:	00084040 	.word	0x00084040
   80b90:	2007099c 	.word	0x2007099c
   80b94:	20070b10 	.word	0x20070b10
   80b98:	2007099c 	.word	0x2007099c
   80b9c:	20070004 	.word	0x20070004
   80ba0:	2007099f 	.word	0x2007099f
   80ba4:	20070998 	.word	0x20070998
   80ba8:	20070b0b 	.word	0x20070b0b
   80bac:	00080000 	.word	0x00080000
   80bb0:	e000ed00 	.word	0xe000ed00
   80bb4:	00080fb1 	.word	0x00080fb1
   80bb8:	00080e79 	.word	0x00080e79

00080bbc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80bbc:	4b3e      	ldr	r3, [pc, #248]	; (80cb8 <SystemCoreClockUpdate+0xfc>)
   80bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80bc0:	f003 0303 	and.w	r3, r3, #3
   80bc4:	2b03      	cmp	r3, #3
   80bc6:	d85f      	bhi.n	80c88 <SystemCoreClockUpdate+0xcc>
   80bc8:	e8df f003 	tbb	[pc, r3]
   80bcc:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80bd0:	4b3a      	ldr	r3, [pc, #232]	; (80cbc <SystemCoreClockUpdate+0x100>)
   80bd2:	695b      	ldr	r3, [r3, #20]
   80bd4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80bd8:	bf14      	ite	ne
   80bda:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80bde:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80be2:	4b37      	ldr	r3, [pc, #220]	; (80cc0 <SystemCoreClockUpdate+0x104>)
   80be4:	601a      	str	r2, [r3, #0]
   80be6:	e04f      	b.n	80c88 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80be8:	4b33      	ldr	r3, [pc, #204]	; (80cb8 <SystemCoreClockUpdate+0xfc>)
   80bea:	6a1b      	ldr	r3, [r3, #32]
   80bec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80bf0:	d003      	beq.n	80bfa <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80bf2:	4a34      	ldr	r2, [pc, #208]	; (80cc4 <SystemCoreClockUpdate+0x108>)
   80bf4:	4b32      	ldr	r3, [pc, #200]	; (80cc0 <SystemCoreClockUpdate+0x104>)
   80bf6:	601a      	str	r2, [r3, #0]
   80bf8:	e046      	b.n	80c88 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80bfa:	4a33      	ldr	r2, [pc, #204]	; (80cc8 <SystemCoreClockUpdate+0x10c>)
   80bfc:	4b30      	ldr	r3, [pc, #192]	; (80cc0 <SystemCoreClockUpdate+0x104>)
   80bfe:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80c00:	4b2d      	ldr	r3, [pc, #180]	; (80cb8 <SystemCoreClockUpdate+0xfc>)
   80c02:	6a1b      	ldr	r3, [r3, #32]
   80c04:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80c08:	2b10      	cmp	r3, #16
   80c0a:	d002      	beq.n	80c12 <SystemCoreClockUpdate+0x56>
   80c0c:	2b20      	cmp	r3, #32
   80c0e:	d004      	beq.n	80c1a <SystemCoreClockUpdate+0x5e>
   80c10:	e03a      	b.n	80c88 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80c12:	4a2e      	ldr	r2, [pc, #184]	; (80ccc <SystemCoreClockUpdate+0x110>)
   80c14:	4b2a      	ldr	r3, [pc, #168]	; (80cc0 <SystemCoreClockUpdate+0x104>)
   80c16:	601a      	str	r2, [r3, #0]
				break;
   80c18:	e036      	b.n	80c88 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80c1a:	4a2a      	ldr	r2, [pc, #168]	; (80cc4 <SystemCoreClockUpdate+0x108>)
   80c1c:	4b28      	ldr	r3, [pc, #160]	; (80cc0 <SystemCoreClockUpdate+0x104>)
   80c1e:	601a      	str	r2, [r3, #0]
				break;
   80c20:	e032      	b.n	80c88 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80c22:	4b25      	ldr	r3, [pc, #148]	; (80cb8 <SystemCoreClockUpdate+0xfc>)
   80c24:	6a1b      	ldr	r3, [r3, #32]
   80c26:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80c2a:	d003      	beq.n	80c34 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80c2c:	4a25      	ldr	r2, [pc, #148]	; (80cc4 <SystemCoreClockUpdate+0x108>)
   80c2e:	4b24      	ldr	r3, [pc, #144]	; (80cc0 <SystemCoreClockUpdate+0x104>)
   80c30:	601a      	str	r2, [r3, #0]
   80c32:	e012      	b.n	80c5a <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80c34:	4a24      	ldr	r2, [pc, #144]	; (80cc8 <SystemCoreClockUpdate+0x10c>)
   80c36:	4b22      	ldr	r3, [pc, #136]	; (80cc0 <SystemCoreClockUpdate+0x104>)
   80c38:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80c3a:	4b1f      	ldr	r3, [pc, #124]	; (80cb8 <SystemCoreClockUpdate+0xfc>)
   80c3c:	6a1b      	ldr	r3, [r3, #32]
   80c3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80c42:	2b10      	cmp	r3, #16
   80c44:	d002      	beq.n	80c4c <SystemCoreClockUpdate+0x90>
   80c46:	2b20      	cmp	r3, #32
   80c48:	d004      	beq.n	80c54 <SystemCoreClockUpdate+0x98>
   80c4a:	e006      	b.n	80c5a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80c4c:	4a1f      	ldr	r2, [pc, #124]	; (80ccc <SystemCoreClockUpdate+0x110>)
   80c4e:	4b1c      	ldr	r3, [pc, #112]	; (80cc0 <SystemCoreClockUpdate+0x104>)
   80c50:	601a      	str	r2, [r3, #0]
				break;
   80c52:	e002      	b.n	80c5a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80c54:	4a1b      	ldr	r2, [pc, #108]	; (80cc4 <SystemCoreClockUpdate+0x108>)
   80c56:	4b1a      	ldr	r3, [pc, #104]	; (80cc0 <SystemCoreClockUpdate+0x104>)
   80c58:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80c5a:	4b17      	ldr	r3, [pc, #92]	; (80cb8 <SystemCoreClockUpdate+0xfc>)
   80c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80c5e:	f003 0303 	and.w	r3, r3, #3
   80c62:	2b02      	cmp	r3, #2
   80c64:	d10d      	bne.n	80c82 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80c66:	4b14      	ldr	r3, [pc, #80]	; (80cb8 <SystemCoreClockUpdate+0xfc>)
   80c68:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80c6a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80c6c:	4b14      	ldr	r3, [pc, #80]	; (80cc0 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80c6e:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80c72:	681a      	ldr	r2, [r3, #0]
   80c74:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80c78:	b2c9      	uxtb	r1, r1
   80c7a:	fbb2 f2f1 	udiv	r2, r2, r1
   80c7e:	601a      	str	r2, [r3, #0]
   80c80:	e002      	b.n	80c88 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80c82:	4a13      	ldr	r2, [pc, #76]	; (80cd0 <SystemCoreClockUpdate+0x114>)
   80c84:	4b0e      	ldr	r3, [pc, #56]	; (80cc0 <SystemCoreClockUpdate+0x104>)
   80c86:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80c88:	4b0b      	ldr	r3, [pc, #44]	; (80cb8 <SystemCoreClockUpdate+0xfc>)
   80c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80c8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80c90:	2b70      	cmp	r3, #112	; 0x70
   80c92:	d107      	bne.n	80ca4 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80c94:	4b0a      	ldr	r3, [pc, #40]	; (80cc0 <SystemCoreClockUpdate+0x104>)
   80c96:	681a      	ldr	r2, [r3, #0]
   80c98:	490e      	ldr	r1, [pc, #56]	; (80cd4 <SystemCoreClockUpdate+0x118>)
   80c9a:	fba1 0202 	umull	r0, r2, r1, r2
   80c9e:	0852      	lsrs	r2, r2, #1
   80ca0:	601a      	str	r2, [r3, #0]
   80ca2:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80ca4:	4b04      	ldr	r3, [pc, #16]	; (80cb8 <SystemCoreClockUpdate+0xfc>)
   80ca6:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80ca8:	4b05      	ldr	r3, [pc, #20]	; (80cc0 <SystemCoreClockUpdate+0x104>)
   80caa:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80cae:	681a      	ldr	r2, [r3, #0]
   80cb0:	40ca      	lsrs	r2, r1
   80cb2:	601a      	str	r2, [r3, #0]
   80cb4:	4770      	bx	lr
   80cb6:	bf00      	nop
   80cb8:	400e0600 	.word	0x400e0600
   80cbc:	400e1a10 	.word	0x400e1a10
   80cc0:	20070130 	.word	0x20070130
   80cc4:	00b71b00 	.word	0x00b71b00
   80cc8:	003d0900 	.word	0x003d0900
   80ccc:	007a1200 	.word	0x007a1200
   80cd0:	0e4e1c00 	.word	0x0e4e1c00
   80cd4:	aaaaaaab 	.word	0xaaaaaaab

00080cd8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80cd8:	4b09      	ldr	r3, [pc, #36]	; (80d00 <_sbrk+0x28>)
   80cda:	681b      	ldr	r3, [r3, #0]
   80cdc:	b913      	cbnz	r3, 80ce4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80cde:	4a09      	ldr	r2, [pc, #36]	; (80d04 <_sbrk+0x2c>)
   80ce0:	4b07      	ldr	r3, [pc, #28]	; (80d00 <_sbrk+0x28>)
   80ce2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80ce4:	4b06      	ldr	r3, [pc, #24]	; (80d00 <_sbrk+0x28>)
   80ce6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80ce8:	181a      	adds	r2, r3, r0
   80cea:	4907      	ldr	r1, [pc, #28]	; (80d08 <_sbrk+0x30>)
   80cec:	4291      	cmp	r1, r2
   80cee:	db04      	blt.n	80cfa <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80cf0:	4610      	mov	r0, r2
   80cf2:	4a03      	ldr	r2, [pc, #12]	; (80d00 <_sbrk+0x28>)
   80cf4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80cf6:	4618      	mov	r0, r3
   80cf8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80cfa:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80cfe:	4770      	bx	lr
   80d00:	20070ac8 	.word	0x20070ac8
   80d04:	20072b10 	.word	0x20072b10
   80d08:	20087ffc 	.word	0x20087ffc

00080d0c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80d0c:	f04f 30ff 	mov.w	r0, #4294967295
   80d10:	4770      	bx	lr
   80d12:	bf00      	nop

00080d14 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80d18:	604b      	str	r3, [r1, #4]

	return 0;
}
   80d1a:	2000      	movs	r0, #0
   80d1c:	4770      	bx	lr
   80d1e:	bf00      	nop

00080d20 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80d20:	2001      	movs	r0, #1
   80d22:	4770      	bx	lr

00080d24 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80d24:	2000      	movs	r0, #0
   80d26:	4770      	bx	lr

00080d28 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80d28:	b5f0      	push	{r4, r5, r6, r7, lr}
   80d2a:	b083      	sub	sp, #12
   80d2c:	4604      	mov	r4, r0
   80d2e:	460d      	mov	r5, r1
	uint32_t val = 0;
   80d30:	2300      	movs	r3, #0
   80d32:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80d34:	4b1f      	ldr	r3, [pc, #124]	; (80db4 <usart_serial_getchar+0x8c>)
   80d36:	4298      	cmp	r0, r3
   80d38:	d107      	bne.n	80d4a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80d3a:	461f      	mov	r7, r3
   80d3c:	4e1e      	ldr	r6, [pc, #120]	; (80db8 <usart_serial_getchar+0x90>)
   80d3e:	4638      	mov	r0, r7
   80d40:	4629      	mov	r1, r5
   80d42:	47b0      	blx	r6
   80d44:	2800      	cmp	r0, #0
   80d46:	d1fa      	bne.n	80d3e <usart_serial_getchar+0x16>
   80d48:	e019      	b.n	80d7e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80d4a:	4b1c      	ldr	r3, [pc, #112]	; (80dbc <usart_serial_getchar+0x94>)
   80d4c:	4298      	cmp	r0, r3
   80d4e:	d109      	bne.n	80d64 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80d50:	461f      	mov	r7, r3
   80d52:	4e1b      	ldr	r6, [pc, #108]	; (80dc0 <usart_serial_getchar+0x98>)
   80d54:	4638      	mov	r0, r7
   80d56:	a901      	add	r1, sp, #4
   80d58:	47b0      	blx	r6
   80d5a:	2800      	cmp	r0, #0
   80d5c:	d1fa      	bne.n	80d54 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80d5e:	9b01      	ldr	r3, [sp, #4]
   80d60:	702b      	strb	r3, [r5, #0]
   80d62:	e019      	b.n	80d98 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80d64:	4b17      	ldr	r3, [pc, #92]	; (80dc4 <usart_serial_getchar+0x9c>)
   80d66:	4298      	cmp	r0, r3
   80d68:	d109      	bne.n	80d7e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80d6a:	461e      	mov	r6, r3
   80d6c:	4c14      	ldr	r4, [pc, #80]	; (80dc0 <usart_serial_getchar+0x98>)
   80d6e:	4630      	mov	r0, r6
   80d70:	a901      	add	r1, sp, #4
   80d72:	47a0      	blx	r4
   80d74:	2800      	cmp	r0, #0
   80d76:	d1fa      	bne.n	80d6e <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80d78:	9b01      	ldr	r3, [sp, #4]
   80d7a:	702b      	strb	r3, [r5, #0]
   80d7c:	e018      	b.n	80db0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80d7e:	4b12      	ldr	r3, [pc, #72]	; (80dc8 <usart_serial_getchar+0xa0>)
   80d80:	429c      	cmp	r4, r3
   80d82:	d109      	bne.n	80d98 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80d84:	461e      	mov	r6, r3
   80d86:	4c0e      	ldr	r4, [pc, #56]	; (80dc0 <usart_serial_getchar+0x98>)
   80d88:	4630      	mov	r0, r6
   80d8a:	a901      	add	r1, sp, #4
   80d8c:	47a0      	blx	r4
   80d8e:	2800      	cmp	r0, #0
   80d90:	d1fa      	bne.n	80d88 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80d92:	9b01      	ldr	r3, [sp, #4]
   80d94:	702b      	strb	r3, [r5, #0]
   80d96:	e00b      	b.n	80db0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80d98:	4b0c      	ldr	r3, [pc, #48]	; (80dcc <usart_serial_getchar+0xa4>)
   80d9a:	429c      	cmp	r4, r3
   80d9c:	d108      	bne.n	80db0 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80d9e:	461e      	mov	r6, r3
   80da0:	4c07      	ldr	r4, [pc, #28]	; (80dc0 <usart_serial_getchar+0x98>)
   80da2:	4630      	mov	r0, r6
   80da4:	a901      	add	r1, sp, #4
   80da6:	47a0      	blx	r4
   80da8:	2800      	cmp	r0, #0
   80daa:	d1fa      	bne.n	80da2 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80dac:	9b01      	ldr	r3, [sp, #4]
   80dae:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80db0:	b003      	add	sp, #12
   80db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80db4:	400e0800 	.word	0x400e0800
   80db8:	00080325 	.word	0x00080325
   80dbc:	40098000 	.word	0x40098000
   80dc0:	0008034d 	.word	0x0008034d
   80dc4:	4009c000 	.word	0x4009c000
   80dc8:	400a0000 	.word	0x400a0000
   80dcc:	400a4000 	.word	0x400a4000

00080dd0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80dd0:	b570      	push	{r4, r5, r6, lr}
   80dd2:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80dd4:	4b21      	ldr	r3, [pc, #132]	; (80e5c <usart_serial_putchar+0x8c>)
   80dd6:	4298      	cmp	r0, r3
   80dd8:	d107      	bne.n	80dea <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   80dda:	461e      	mov	r6, r3
   80ddc:	4d20      	ldr	r5, [pc, #128]	; (80e60 <usart_serial_putchar+0x90>)
   80dde:	4630      	mov	r0, r6
   80de0:	4621      	mov	r1, r4
   80de2:	47a8      	blx	r5
   80de4:	2800      	cmp	r0, #0
   80de6:	d1fa      	bne.n	80dde <usart_serial_putchar+0xe>
   80de8:	e02b      	b.n	80e42 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80dea:	4b1e      	ldr	r3, [pc, #120]	; (80e64 <usart_serial_putchar+0x94>)
   80dec:	4298      	cmp	r0, r3
   80dee:	d107      	bne.n	80e00 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80df0:	461e      	mov	r6, r3
   80df2:	4d1d      	ldr	r5, [pc, #116]	; (80e68 <usart_serial_putchar+0x98>)
   80df4:	4630      	mov	r0, r6
   80df6:	4621      	mov	r1, r4
   80df8:	47a8      	blx	r5
   80dfa:	2800      	cmp	r0, #0
   80dfc:	d1fa      	bne.n	80df4 <usart_serial_putchar+0x24>
   80dfe:	e022      	b.n	80e46 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80e00:	4b1a      	ldr	r3, [pc, #104]	; (80e6c <usart_serial_putchar+0x9c>)
   80e02:	4298      	cmp	r0, r3
   80e04:	d107      	bne.n	80e16 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80e06:	461e      	mov	r6, r3
   80e08:	4d17      	ldr	r5, [pc, #92]	; (80e68 <usart_serial_putchar+0x98>)
   80e0a:	4630      	mov	r0, r6
   80e0c:	4621      	mov	r1, r4
   80e0e:	47a8      	blx	r5
   80e10:	2800      	cmp	r0, #0
   80e12:	d1fa      	bne.n	80e0a <usart_serial_putchar+0x3a>
   80e14:	e019      	b.n	80e4a <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80e16:	4b16      	ldr	r3, [pc, #88]	; (80e70 <usart_serial_putchar+0xa0>)
   80e18:	4298      	cmp	r0, r3
   80e1a:	d107      	bne.n	80e2c <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80e1c:	461e      	mov	r6, r3
   80e1e:	4d12      	ldr	r5, [pc, #72]	; (80e68 <usart_serial_putchar+0x98>)
   80e20:	4630      	mov	r0, r6
   80e22:	4621      	mov	r1, r4
   80e24:	47a8      	blx	r5
   80e26:	2800      	cmp	r0, #0
   80e28:	d1fa      	bne.n	80e20 <usart_serial_putchar+0x50>
   80e2a:	e010      	b.n	80e4e <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80e2c:	4b11      	ldr	r3, [pc, #68]	; (80e74 <usart_serial_putchar+0xa4>)
   80e2e:	4298      	cmp	r0, r3
   80e30:	d10f      	bne.n	80e52 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80e32:	461e      	mov	r6, r3
   80e34:	4d0c      	ldr	r5, [pc, #48]	; (80e68 <usart_serial_putchar+0x98>)
   80e36:	4630      	mov	r0, r6
   80e38:	4621      	mov	r1, r4
   80e3a:	47a8      	blx	r5
   80e3c:	2800      	cmp	r0, #0
   80e3e:	d1fa      	bne.n	80e36 <usart_serial_putchar+0x66>
   80e40:	e009      	b.n	80e56 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80e42:	2001      	movs	r0, #1
   80e44:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80e46:	2001      	movs	r0, #1
   80e48:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80e4a:	2001      	movs	r0, #1
   80e4c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80e4e:	2001      	movs	r0, #1
   80e50:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80e52:	2000      	movs	r0, #0
   80e54:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80e56:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80e58:	bd70      	pop	{r4, r5, r6, pc}
   80e5a:	bf00      	nop
   80e5c:	400e0800 	.word	0x400e0800
   80e60:	00080315 	.word	0x00080315
   80e64:	40098000 	.word	0x40098000
   80e68:	00080339 	.word	0x00080339
   80e6c:	4009c000 	.word	0x4009c000
   80e70:	400a0000 	.word	0x400a0000
   80e74:	400a4000 	.word	0x400a4000

00080e78 <main>:
	printf("-- %s\n\r", BOARD_NAME);
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
}

int main (void)
{
   80e78:	b570      	push	{r4, r5, r6, lr}
   80e7a:	b088      	sub	sp, #32
	
	sysclk_init();
   80e7c:	4b2d      	ldr	r3, [pc, #180]	; (80f34 <main+0xbc>)
   80e7e:	4798      	blx	r3
	board_init();
   80e80:	4b2d      	ldr	r3, [pc, #180]	; (80f38 <main+0xc0>)
   80e82:	4798      	blx	r3
   80e84:	200b      	movs	r0, #11
   80e86:	4c2d      	ldr	r4, [pc, #180]	; (80f3c <main+0xc4>)
   80e88:	47a0      	blx	r4
   80e8a:	200c      	movs	r0, #12
   80e8c:	47a0      	blx	r4
   80e8e:	200d      	movs	r0, #13
   80e90:	47a0      	blx	r4
   80e92:	200e      	movs	r0, #14
   80e94:	47a0      	blx	r4
	ioport_init();
	delayInit();
   80e96:	4b2a      	ldr	r3, [pc, #168]	; (80f40 <main+0xc8>)
   80e98:	4798      	blx	r3
	initRegulator();
   80e9a:	4b2a      	ldr	r3, [pc, #168]	; (80f44 <main+0xcc>)
   80e9c:	4798      	blx	r3
	initMotor();
   80e9e:	4b2a      	ldr	r3, [pc, #168]	; (80f48 <main+0xd0>)
   80ea0:	4798      	blx	r3
	initRotateMotor();
   80ea2:	4b2a      	ldr	r3, [pc, #168]	; (80f4c <main+0xd4>)
   80ea4:	4798      	blx	r3
   80ea6:	2008      	movs	r0, #8
   80ea8:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80eaa:	4d29      	ldr	r5, [pc, #164]	; (80f50 <main+0xd8>)
   80eac:	4b29      	ldr	r3, [pc, #164]	; (80f54 <main+0xdc>)
   80eae:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80eb0:	4a29      	ldr	r2, [pc, #164]	; (80f58 <main+0xe0>)
   80eb2:	4b2a      	ldr	r3, [pc, #168]	; (80f5c <main+0xe4>)
   80eb4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80eb6:	4a2a      	ldr	r2, [pc, #168]	; (80f60 <main+0xe8>)
   80eb8:	4b2a      	ldr	r3, [pc, #168]	; (80f64 <main+0xec>)
   80eba:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80ebc:	4b2a      	ldr	r3, [pc, #168]	; (80f68 <main+0xf0>)
   80ebe:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   80ec0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80ec4:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   80ec6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80eca:	9302      	str	r3, [sp, #8]
   80ecc:	2008      	movs	r0, #8
   80ece:	47a0      	blx	r4
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80ed0:	4628      	mov	r0, r5
   80ed2:	4669      	mov	r1, sp
   80ed4:	4b25      	ldr	r3, [pc, #148]	; (80f6c <main+0xf4>)
   80ed6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80ed8:	4d25      	ldr	r5, [pc, #148]	; (80f70 <main+0xf8>)
   80eda:	682b      	ldr	r3, [r5, #0]
   80edc:	6898      	ldr	r0, [r3, #8]
   80ede:	2100      	movs	r1, #0
   80ee0:	4c24      	ldr	r4, [pc, #144]	; (80f74 <main+0xfc>)
   80ee2:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80ee4:	682b      	ldr	r3, [r5, #0]
   80ee6:	6858      	ldr	r0, [r3, #4]
   80ee8:	2100      	movs	r1, #0
   80eea:	47a0      	blx	r4
		.paritytype = CONF_UART_PARITY
	};
	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	printf("Konsolen reado\n");
   80eec:	4822      	ldr	r0, [pc, #136]	; (80f78 <main+0x100>)
   80eee:	4c23      	ldr	r4, [pc, #140]	; (80f7c <main+0x104>)
   80ef0:	47a0      	blx	r4
	printf("===============\n");
   80ef2:	4823      	ldr	r0, [pc, #140]	; (80f80 <main+0x108>)
   80ef4:	47a0      	blx	r4
	printf("-- %s\n\r", BOARD_NAME);
   80ef6:	4823      	ldr	r0, [pc, #140]	; (80f84 <main+0x10c>)
   80ef8:	4923      	ldr	r1, [pc, #140]	; (80f88 <main+0x110>)
   80efa:	47a0      	blx	r4
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
   80efc:	4823      	ldr	r0, [pc, #140]	; (80f8c <main+0x114>)
   80efe:	4924      	ldr	r1, [pc, #144]	; (80f90 <main+0x118>)
   80f00:	4a24      	ldr	r2, [pc, #144]	; (80f94 <main+0x11c>)
   80f02:	47a0      	blx	r4
	delayInit();
	initRegulator();
	initMotor();
	initRotateMotor();
	configure_console();
	initDrive();
   80f04:	4b24      	ldr	r3, [pc, #144]	; (80f98 <main+0x120>)
   80f06:	4798      	blx	r3
	
	char str[20];
	sprintf(str,"Main while");
   80f08:	4a24      	ldr	r2, [pc, #144]	; (80f9c <main+0x124>)
   80f0a:	ab03      	add	r3, sp, #12
   80f0c:	ca07      	ldmia	r2, {r0, r1, r2}
   80f0e:	c303      	stmia	r3!, {r0, r1}
   80f10:	f823 2b02 	strh.w	r2, [r3], #2
   80f14:	0c12      	lsrs	r2, r2, #16
   80f16:	701a      	strb	r2, [r3, #0]
	printf (str);
   80f18:	a803      	add	r0, sp, #12
   80f1a:	47a0      	blx	r4
// 		double cpu_time_used;
// 		
// 		start = clock();
		
		
		testStuff();
   80f1c:	4e20      	ldr	r6, [pc, #128]	; (80fa0 <main+0x128>)
		
		moveForward(1500,1500);
   80f1e:	4d21      	ldr	r5, [pc, #132]	; (80fa4 <main+0x12c>)
// 		x_diff = getX_diff(200,400);
// 		y_diff = getY_diff(200,100);
// 		angle = calculateAngle(x_diff,y_diff);
// 		rotate(angle);
// 		
 		delayMicroseconds(500000);
   80f20:	4c21      	ldr	r4, [pc, #132]	; (80fa8 <main+0x130>)
// 		double cpu_time_used;
// 		
// 		start = clock();
		
		
		testStuff();
   80f22:	47b0      	blx	r6
		
		moveForward(1500,1500);
   80f24:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80f28:	4601      	mov	r1, r0
   80f2a:	47a8      	blx	r5
// 		x_diff = getX_diff(200,400);
// 		y_diff = getY_diff(200,100);
// 		angle = calculateAngle(x_diff,y_diff);
// 		rotate(angle);
// 		
 		delayMicroseconds(500000);
   80f2c:	4620      	mov	r0, r4
   80f2e:	4b1f      	ldr	r3, [pc, #124]	; (80fac <main+0x134>)
   80f30:	4798      	blx	r3
   80f32:	e7f6      	b.n	80f22 <main+0xaa>
   80f34:	00080635 	.word	0x00080635
   80f38:	00080699 	.word	0x00080699
   80f3c:	00080ab1 	.word	0x00080ab1
   80f40:	000804bd 	.word	0x000804bd
   80f44:	0008049d 	.word	0x0008049d
   80f48:	00080535 	.word	0x00080535
   80f4c:	000805a1 	.word	0x000805a1
   80f50:	400e0800 	.word	0x400e0800
   80f54:	20070b08 	.word	0x20070b08
   80f58:	00080dd1 	.word	0x00080dd1
   80f5c:	20070b04 	.word	0x20070b04
   80f60:	00080d29 	.word	0x00080d29
   80f64:	20070b00 	.word	0x20070b00
   80f68:	0501bd00 	.word	0x0501bd00
   80f6c:	000802dd 	.word	0x000802dd
   80f70:	20070560 	.word	0x20070560
   80f74:	000810bd 	.word	0x000810bd
   80f78:	00083f44 	.word	0x00083f44
   80f7c:	00081001 	.word	0x00081001
   80f80:	00083f54 	.word	0x00083f54
   80f84:	00083f68 	.word	0x00083f68
   80f88:	00083f70 	.word	0x00083f70
   80f8c:	00083f80 	.word	0x00083f80
   80f90:	00083f98 	.word	0x00083f98
   80f94:	00083fa4 	.word	0x00083fa4
   80f98:	000803c5 	.word	0x000803c5
   80f9c:	00083fb0 	.word	0x00083fb0
   80fa0:	00080419 	.word	0x00080419
   80fa4:	0008057d 	.word	0x0008057d
   80fa8:	0007a120 	.word	0x0007a120
   80fac:	000804f9 	.word	0x000804f9

00080fb0 <__libc_init_array>:
   80fb0:	b570      	push	{r4, r5, r6, lr}
   80fb2:	4e0f      	ldr	r6, [pc, #60]	; (80ff0 <__libc_init_array+0x40>)
   80fb4:	4d0f      	ldr	r5, [pc, #60]	; (80ff4 <__libc_init_array+0x44>)
   80fb6:	1b76      	subs	r6, r6, r5
   80fb8:	10b6      	asrs	r6, r6, #2
   80fba:	d007      	beq.n	80fcc <__libc_init_array+0x1c>
   80fbc:	3d04      	subs	r5, #4
   80fbe:	2400      	movs	r4, #0
   80fc0:	3401      	adds	r4, #1
   80fc2:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80fc6:	4798      	blx	r3
   80fc8:	42a6      	cmp	r6, r4
   80fca:	d1f9      	bne.n	80fc0 <__libc_init_array+0x10>
   80fcc:	4e0a      	ldr	r6, [pc, #40]	; (80ff8 <__libc_init_array+0x48>)
   80fce:	4d0b      	ldr	r5, [pc, #44]	; (80ffc <__libc_init_array+0x4c>)
   80fd0:	f003 f820 	bl	84014 <_init>
   80fd4:	1b76      	subs	r6, r6, r5
   80fd6:	10b6      	asrs	r6, r6, #2
   80fd8:	d008      	beq.n	80fec <__libc_init_array+0x3c>
   80fda:	3d04      	subs	r5, #4
   80fdc:	2400      	movs	r4, #0
   80fde:	3401      	adds	r4, #1
   80fe0:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80fe4:	4798      	blx	r3
   80fe6:	42a6      	cmp	r6, r4
   80fe8:	d1f9      	bne.n	80fde <__libc_init_array+0x2e>
   80fea:	bd70      	pop	{r4, r5, r6, pc}
   80fec:	bd70      	pop	{r4, r5, r6, pc}
   80fee:	bf00      	nop
   80ff0:	00084020 	.word	0x00084020
   80ff4:	00084020 	.word	0x00084020
   80ff8:	00084028 	.word	0x00084028
   80ffc:	00084020 	.word	0x00084020

00081000 <iprintf>:
   81000:	b40f      	push	{r0, r1, r2, r3}
   81002:	b510      	push	{r4, lr}
   81004:	4b07      	ldr	r3, [pc, #28]	; (81024 <iprintf+0x24>)
   81006:	b082      	sub	sp, #8
   81008:	ac04      	add	r4, sp, #16
   8100a:	f854 2b04 	ldr.w	r2, [r4], #4
   8100e:	6818      	ldr	r0, [r3, #0]
   81010:	4623      	mov	r3, r4
   81012:	6881      	ldr	r1, [r0, #8]
   81014:	9401      	str	r4, [sp, #4]
   81016:	f000 f915 	bl	81244 <_vfiprintf_r>
   8101a:	b002      	add	sp, #8
   8101c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81020:	b004      	add	sp, #16
   81022:	4770      	bx	lr
   81024:	20070560 	.word	0x20070560

00081028 <memset>:
   81028:	b4f0      	push	{r4, r5, r6, r7}
   8102a:	0784      	lsls	r4, r0, #30
   8102c:	d043      	beq.n	810b6 <memset+0x8e>
   8102e:	1e54      	subs	r4, r2, #1
   81030:	2a00      	cmp	r2, #0
   81032:	d03e      	beq.n	810b2 <memset+0x8a>
   81034:	b2cd      	uxtb	r5, r1
   81036:	4603      	mov	r3, r0
   81038:	e003      	b.n	81042 <memset+0x1a>
   8103a:	1e62      	subs	r2, r4, #1
   8103c:	2c00      	cmp	r4, #0
   8103e:	d038      	beq.n	810b2 <memset+0x8a>
   81040:	4614      	mov	r4, r2
   81042:	f803 5b01 	strb.w	r5, [r3], #1
   81046:	079a      	lsls	r2, r3, #30
   81048:	d1f7      	bne.n	8103a <memset+0x12>
   8104a:	2c03      	cmp	r4, #3
   8104c:	d92a      	bls.n	810a4 <memset+0x7c>
   8104e:	b2cd      	uxtb	r5, r1
   81050:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81054:	2c0f      	cmp	r4, #15
   81056:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8105a:	d915      	bls.n	81088 <memset+0x60>
   8105c:	f1a4 0710 	sub.w	r7, r4, #16
   81060:	093f      	lsrs	r7, r7, #4
   81062:	f103 0610 	add.w	r6, r3, #16
   81066:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   8106a:	461a      	mov	r2, r3
   8106c:	6015      	str	r5, [r2, #0]
   8106e:	6055      	str	r5, [r2, #4]
   81070:	6095      	str	r5, [r2, #8]
   81072:	60d5      	str	r5, [r2, #12]
   81074:	3210      	adds	r2, #16
   81076:	42b2      	cmp	r2, r6
   81078:	d1f8      	bne.n	8106c <memset+0x44>
   8107a:	f004 040f 	and.w	r4, r4, #15
   8107e:	3701      	adds	r7, #1
   81080:	2c03      	cmp	r4, #3
   81082:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   81086:	d90d      	bls.n	810a4 <memset+0x7c>
   81088:	461e      	mov	r6, r3
   8108a:	4622      	mov	r2, r4
   8108c:	3a04      	subs	r2, #4
   8108e:	2a03      	cmp	r2, #3
   81090:	f846 5b04 	str.w	r5, [r6], #4
   81094:	d8fa      	bhi.n	8108c <memset+0x64>
   81096:	1f22      	subs	r2, r4, #4
   81098:	f022 0203 	bic.w	r2, r2, #3
   8109c:	3204      	adds	r2, #4
   8109e:	4413      	add	r3, r2
   810a0:	f004 0403 	and.w	r4, r4, #3
   810a4:	b12c      	cbz	r4, 810b2 <memset+0x8a>
   810a6:	b2c9      	uxtb	r1, r1
   810a8:	441c      	add	r4, r3
   810aa:	f803 1b01 	strb.w	r1, [r3], #1
   810ae:	42a3      	cmp	r3, r4
   810b0:	d1fb      	bne.n	810aa <memset+0x82>
   810b2:	bcf0      	pop	{r4, r5, r6, r7}
   810b4:	4770      	bx	lr
   810b6:	4614      	mov	r4, r2
   810b8:	4603      	mov	r3, r0
   810ba:	e7c6      	b.n	8104a <memset+0x22>

000810bc <setbuf>:
   810bc:	2900      	cmp	r1, #0
   810be:	bf0c      	ite	eq
   810c0:	2202      	moveq	r2, #2
   810c2:	2200      	movne	r2, #0
   810c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   810c8:	f000 b800 	b.w	810cc <setvbuf>

000810cc <setvbuf>:
   810cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   810d0:	4d3c      	ldr	r5, [pc, #240]	; (811c4 <setvbuf+0xf8>)
   810d2:	4604      	mov	r4, r0
   810d4:	682d      	ldr	r5, [r5, #0]
   810d6:	4688      	mov	r8, r1
   810d8:	4616      	mov	r6, r2
   810da:	461f      	mov	r7, r3
   810dc:	b115      	cbz	r5, 810e4 <setvbuf+0x18>
   810de:	6bab      	ldr	r3, [r5, #56]	; 0x38
   810e0:	2b00      	cmp	r3, #0
   810e2:	d04f      	beq.n	81184 <setvbuf+0xb8>
   810e4:	2e02      	cmp	r6, #2
   810e6:	d830      	bhi.n	8114a <setvbuf+0x7e>
   810e8:	2f00      	cmp	r7, #0
   810ea:	db2e      	blt.n	8114a <setvbuf+0x7e>
   810ec:	4628      	mov	r0, r5
   810ee:	4621      	mov	r1, r4
   810f0:	f001 f826 	bl	82140 <_fflush_r>
   810f4:	89a3      	ldrh	r3, [r4, #12]
   810f6:	2200      	movs	r2, #0
   810f8:	6062      	str	r2, [r4, #4]
   810fa:	61a2      	str	r2, [r4, #24]
   810fc:	061a      	lsls	r2, r3, #24
   810fe:	d428      	bmi.n	81152 <setvbuf+0x86>
   81100:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81104:	b29b      	uxth	r3, r3
   81106:	2e02      	cmp	r6, #2
   81108:	81a3      	strh	r3, [r4, #12]
   8110a:	d02d      	beq.n	81168 <setvbuf+0x9c>
   8110c:	f1b8 0f00 	cmp.w	r8, #0
   81110:	d03c      	beq.n	8118c <setvbuf+0xc0>
   81112:	2e01      	cmp	r6, #1
   81114:	d013      	beq.n	8113e <setvbuf+0x72>
   81116:	b29b      	uxth	r3, r3
   81118:	f003 0008 	and.w	r0, r3, #8
   8111c:	4a2a      	ldr	r2, [pc, #168]	; (811c8 <setvbuf+0xfc>)
   8111e:	b280      	uxth	r0, r0
   81120:	63ea      	str	r2, [r5, #60]	; 0x3c
   81122:	f8c4 8000 	str.w	r8, [r4]
   81126:	f8c4 8010 	str.w	r8, [r4, #16]
   8112a:	6167      	str	r7, [r4, #20]
   8112c:	b178      	cbz	r0, 8114e <setvbuf+0x82>
   8112e:	f013 0f03 	tst.w	r3, #3
   81132:	bf18      	it	ne
   81134:	2700      	movne	r7, #0
   81136:	60a7      	str	r7, [r4, #8]
   81138:	2000      	movs	r0, #0
   8113a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8113e:	f043 0301 	orr.w	r3, r3, #1
   81142:	427a      	negs	r2, r7
   81144:	81a3      	strh	r3, [r4, #12]
   81146:	61a2      	str	r2, [r4, #24]
   81148:	e7e5      	b.n	81116 <setvbuf+0x4a>
   8114a:	f04f 30ff 	mov.w	r0, #4294967295
   8114e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81152:	4628      	mov	r0, r5
   81154:	6921      	ldr	r1, [r4, #16]
   81156:	f001 f953 	bl	82400 <_free_r>
   8115a:	89a3      	ldrh	r3, [r4, #12]
   8115c:	2e02      	cmp	r6, #2
   8115e:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81162:	b29b      	uxth	r3, r3
   81164:	81a3      	strh	r3, [r4, #12]
   81166:	d1d1      	bne.n	8110c <setvbuf+0x40>
   81168:	2000      	movs	r0, #0
   8116a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8116e:	f043 0302 	orr.w	r3, r3, #2
   81172:	2500      	movs	r5, #0
   81174:	2101      	movs	r1, #1
   81176:	81a3      	strh	r3, [r4, #12]
   81178:	60a5      	str	r5, [r4, #8]
   8117a:	6022      	str	r2, [r4, #0]
   8117c:	6122      	str	r2, [r4, #16]
   8117e:	6161      	str	r1, [r4, #20]
   81180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81184:	4628      	mov	r0, r5
   81186:	f000 fff7 	bl	82178 <__sinit>
   8118a:	e7ab      	b.n	810e4 <setvbuf+0x18>
   8118c:	2f00      	cmp	r7, #0
   8118e:	bf08      	it	eq
   81190:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   81194:	4638      	mov	r0, r7
   81196:	f001 fc29 	bl	829ec <malloc>
   8119a:	4680      	mov	r8, r0
   8119c:	b128      	cbz	r0, 811aa <setvbuf+0xde>
   8119e:	89a3      	ldrh	r3, [r4, #12]
   811a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   811a4:	b29b      	uxth	r3, r3
   811a6:	81a3      	strh	r3, [r4, #12]
   811a8:	e7b3      	b.n	81112 <setvbuf+0x46>
   811aa:	f44f 6080 	mov.w	r0, #1024	; 0x400
   811ae:	f001 fc1d 	bl	829ec <malloc>
   811b2:	4680      	mov	r8, r0
   811b4:	b918      	cbnz	r0, 811be <setvbuf+0xf2>
   811b6:	89a3      	ldrh	r3, [r4, #12]
   811b8:	f04f 30ff 	mov.w	r0, #4294967295
   811bc:	e7d5      	b.n	8116a <setvbuf+0x9e>
   811be:	f44f 6780 	mov.w	r7, #1024	; 0x400
   811c2:	e7ec      	b.n	8119e <setvbuf+0xd2>
   811c4:	20070560 	.word	0x20070560
   811c8:	0008216d 	.word	0x0008216d

000811cc <__sprint_r.part.0>:
   811cc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   811ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   811d2:	049c      	lsls	r4, r3, #18
   811d4:	460e      	mov	r6, r1
   811d6:	4680      	mov	r8, r0
   811d8:	4691      	mov	r9, r2
   811da:	d52a      	bpl.n	81232 <__sprint_r.part.0+0x66>
   811dc:	6893      	ldr	r3, [r2, #8]
   811de:	6812      	ldr	r2, [r2, #0]
   811e0:	f102 0a08 	add.w	sl, r2, #8
   811e4:	b31b      	cbz	r3, 8122e <__sprint_r.part.0+0x62>
   811e6:	e91a 00a0 	ldmdb	sl, {r5, r7}
   811ea:	08bf      	lsrs	r7, r7, #2
   811ec:	d017      	beq.n	8121e <__sprint_r.part.0+0x52>
   811ee:	3d04      	subs	r5, #4
   811f0:	2400      	movs	r4, #0
   811f2:	e001      	b.n	811f8 <__sprint_r.part.0+0x2c>
   811f4:	42a7      	cmp	r7, r4
   811f6:	d010      	beq.n	8121a <__sprint_r.part.0+0x4e>
   811f8:	4640      	mov	r0, r8
   811fa:	f855 1f04 	ldr.w	r1, [r5, #4]!
   811fe:	4632      	mov	r2, r6
   81200:	f001 f850 	bl	822a4 <_fputwc_r>
   81204:	1c43      	adds	r3, r0, #1
   81206:	f104 0401 	add.w	r4, r4, #1
   8120a:	d1f3      	bne.n	811f4 <__sprint_r.part.0+0x28>
   8120c:	2300      	movs	r3, #0
   8120e:	f8c9 3008 	str.w	r3, [r9, #8]
   81212:	f8c9 3004 	str.w	r3, [r9, #4]
   81216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8121a:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8121e:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   81222:	f8c9 3008 	str.w	r3, [r9, #8]
   81226:	f10a 0a08 	add.w	sl, sl, #8
   8122a:	2b00      	cmp	r3, #0
   8122c:	d1db      	bne.n	811e6 <__sprint_r.part.0+0x1a>
   8122e:	2000      	movs	r0, #0
   81230:	e7ec      	b.n	8120c <__sprint_r.part.0+0x40>
   81232:	f001 f9b1 	bl	82598 <__sfvwrite_r>
   81236:	2300      	movs	r3, #0
   81238:	f8c9 3008 	str.w	r3, [r9, #8]
   8123c:	f8c9 3004 	str.w	r3, [r9, #4]
   81240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081244 <_vfiprintf_r>:
   81244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81248:	b0b1      	sub	sp, #196	; 0xc4
   8124a:	461c      	mov	r4, r3
   8124c:	9102      	str	r1, [sp, #8]
   8124e:	4690      	mov	r8, r2
   81250:	9308      	str	r3, [sp, #32]
   81252:	9006      	str	r0, [sp, #24]
   81254:	b118      	cbz	r0, 8125e <_vfiprintf_r+0x1a>
   81256:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81258:	2b00      	cmp	r3, #0
   8125a:	f000 80e8 	beq.w	8142e <_vfiprintf_r+0x1ea>
   8125e:	9d02      	ldr	r5, [sp, #8]
   81260:	89ab      	ldrh	r3, [r5, #12]
   81262:	b29a      	uxth	r2, r3
   81264:	0490      	lsls	r0, r2, #18
   81266:	d407      	bmi.n	81278 <_vfiprintf_r+0x34>
   81268:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   8126a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8126e:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   81272:	81ab      	strh	r3, [r5, #12]
   81274:	b29a      	uxth	r2, r3
   81276:	6669      	str	r1, [r5, #100]	; 0x64
   81278:	0711      	lsls	r1, r2, #28
   8127a:	f140 80b7 	bpl.w	813ec <_vfiprintf_r+0x1a8>
   8127e:	f8dd b008 	ldr.w	fp, [sp, #8]
   81282:	f8db 3010 	ldr.w	r3, [fp, #16]
   81286:	2b00      	cmp	r3, #0
   81288:	f000 80b0 	beq.w	813ec <_vfiprintf_r+0x1a8>
   8128c:	f002 021a 	and.w	r2, r2, #26
   81290:	2a0a      	cmp	r2, #10
   81292:	f000 80b7 	beq.w	81404 <_vfiprintf_r+0x1c0>
   81296:	2300      	movs	r3, #0
   81298:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   8129c:	930a      	str	r3, [sp, #40]	; 0x28
   8129e:	9315      	str	r3, [sp, #84]	; 0x54
   812a0:	9314      	str	r3, [sp, #80]	; 0x50
   812a2:	9309      	str	r3, [sp, #36]	; 0x24
   812a4:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   812a8:	464e      	mov	r6, r9
   812aa:	f898 3000 	ldrb.w	r3, [r8]
   812ae:	2b00      	cmp	r3, #0
   812b0:	f000 84c8 	beq.w	81c44 <_vfiprintf_r+0xa00>
   812b4:	2b25      	cmp	r3, #37	; 0x25
   812b6:	f000 84c5 	beq.w	81c44 <_vfiprintf_r+0xa00>
   812ba:	f108 0201 	add.w	r2, r8, #1
   812be:	e001      	b.n	812c4 <_vfiprintf_r+0x80>
   812c0:	2b25      	cmp	r3, #37	; 0x25
   812c2:	d004      	beq.n	812ce <_vfiprintf_r+0x8a>
   812c4:	7813      	ldrb	r3, [r2, #0]
   812c6:	4614      	mov	r4, r2
   812c8:	3201      	adds	r2, #1
   812ca:	2b00      	cmp	r3, #0
   812cc:	d1f8      	bne.n	812c0 <_vfiprintf_r+0x7c>
   812ce:	ebc8 0504 	rsb	r5, r8, r4
   812d2:	b195      	cbz	r5, 812fa <_vfiprintf_r+0xb6>
   812d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   812d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   812d8:	3301      	adds	r3, #1
   812da:	442a      	add	r2, r5
   812dc:	2b07      	cmp	r3, #7
   812de:	f8c6 8000 	str.w	r8, [r6]
   812e2:	6075      	str	r5, [r6, #4]
   812e4:	9215      	str	r2, [sp, #84]	; 0x54
   812e6:	9314      	str	r3, [sp, #80]	; 0x50
   812e8:	dd7b      	ble.n	813e2 <_vfiprintf_r+0x19e>
   812ea:	2a00      	cmp	r2, #0
   812ec:	f040 84d5 	bne.w	81c9a <_vfiprintf_r+0xa56>
   812f0:	9809      	ldr	r0, [sp, #36]	; 0x24
   812f2:	9214      	str	r2, [sp, #80]	; 0x50
   812f4:	4428      	add	r0, r5
   812f6:	464e      	mov	r6, r9
   812f8:	9009      	str	r0, [sp, #36]	; 0x24
   812fa:	7823      	ldrb	r3, [r4, #0]
   812fc:	2b00      	cmp	r3, #0
   812fe:	f000 83ed 	beq.w	81adc <_vfiprintf_r+0x898>
   81302:	2100      	movs	r1, #0
   81304:	f04f 0200 	mov.w	r2, #0
   81308:	f04f 3cff 	mov.w	ip, #4294967295
   8130c:	7863      	ldrb	r3, [r4, #1]
   8130e:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   81312:	9104      	str	r1, [sp, #16]
   81314:	468a      	mov	sl, r1
   81316:	f104 0801 	add.w	r8, r4, #1
   8131a:	4608      	mov	r0, r1
   8131c:	4665      	mov	r5, ip
   8131e:	f108 0801 	add.w	r8, r8, #1
   81322:	f1a3 0220 	sub.w	r2, r3, #32
   81326:	2a58      	cmp	r2, #88	; 0x58
   81328:	f200 82d9 	bhi.w	818de <_vfiprintf_r+0x69a>
   8132c:	e8df f012 	tbh	[pc, r2, lsl #1]
   81330:	02d702cb 	.word	0x02d702cb
   81334:	02d202d7 	.word	0x02d202d7
   81338:	02d702d7 	.word	0x02d702d7
   8133c:	02d702d7 	.word	0x02d702d7
   81340:	02d702d7 	.word	0x02d702d7
   81344:	028f0282 	.word	0x028f0282
   81348:	008402d7 	.word	0x008402d7
   8134c:	02d70293 	.word	0x02d70293
   81350:	0196012b 	.word	0x0196012b
   81354:	01960196 	.word	0x01960196
   81358:	01960196 	.word	0x01960196
   8135c:	01960196 	.word	0x01960196
   81360:	01960196 	.word	0x01960196
   81364:	02d702d7 	.word	0x02d702d7
   81368:	02d702d7 	.word	0x02d702d7
   8136c:	02d702d7 	.word	0x02d702d7
   81370:	02d702d7 	.word	0x02d702d7
   81374:	02d702d7 	.word	0x02d702d7
   81378:	02d70130 	.word	0x02d70130
   8137c:	02d702d7 	.word	0x02d702d7
   81380:	02d702d7 	.word	0x02d702d7
   81384:	02d702d7 	.word	0x02d702d7
   81388:	02d702d7 	.word	0x02d702d7
   8138c:	017b02d7 	.word	0x017b02d7
   81390:	02d702d7 	.word	0x02d702d7
   81394:	02d702d7 	.word	0x02d702d7
   81398:	01a402d7 	.word	0x01a402d7
   8139c:	02d702d7 	.word	0x02d702d7
   813a0:	02d701bf 	.word	0x02d701bf
   813a4:	02d702d7 	.word	0x02d702d7
   813a8:	02d702d7 	.word	0x02d702d7
   813ac:	02d702d7 	.word	0x02d702d7
   813b0:	02d702d7 	.word	0x02d702d7
   813b4:	01e402d7 	.word	0x01e402d7
   813b8:	02d701fa 	.word	0x02d701fa
   813bc:	02d702d7 	.word	0x02d702d7
   813c0:	01fa0216 	.word	0x01fa0216
   813c4:	02d702d7 	.word	0x02d702d7
   813c8:	02d7021b 	.word	0x02d7021b
   813cc:	00890228 	.word	0x00890228
   813d0:	027d0266 	.word	0x027d0266
   813d4:	023a02d7 	.word	0x023a02d7
   813d8:	011902d7 	.word	0x011902d7
   813dc:	02d702d7 	.word	0x02d702d7
   813e0:	02af      	.short	0x02af
   813e2:	3608      	adds	r6, #8
   813e4:	9809      	ldr	r0, [sp, #36]	; 0x24
   813e6:	4428      	add	r0, r5
   813e8:	9009      	str	r0, [sp, #36]	; 0x24
   813ea:	e786      	b.n	812fa <_vfiprintf_r+0xb6>
   813ec:	9806      	ldr	r0, [sp, #24]
   813ee:	9902      	ldr	r1, [sp, #8]
   813f0:	f000 fd90 	bl	81f14 <__swsetup_r>
   813f4:	b9b0      	cbnz	r0, 81424 <_vfiprintf_r+0x1e0>
   813f6:	9d02      	ldr	r5, [sp, #8]
   813f8:	89aa      	ldrh	r2, [r5, #12]
   813fa:	f002 021a 	and.w	r2, r2, #26
   813fe:	2a0a      	cmp	r2, #10
   81400:	f47f af49 	bne.w	81296 <_vfiprintf_r+0x52>
   81404:	f8dd b008 	ldr.w	fp, [sp, #8]
   81408:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   8140c:	2b00      	cmp	r3, #0
   8140e:	f6ff af42 	blt.w	81296 <_vfiprintf_r+0x52>
   81412:	9806      	ldr	r0, [sp, #24]
   81414:	4659      	mov	r1, fp
   81416:	4642      	mov	r2, r8
   81418:	4623      	mov	r3, r4
   8141a:	f000 fd3d 	bl	81e98 <__sbprintf>
   8141e:	b031      	add	sp, #196	; 0xc4
   81420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81424:	f04f 30ff 	mov.w	r0, #4294967295
   81428:	b031      	add	sp, #196	; 0xc4
   8142a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8142e:	f000 fea3 	bl	82178 <__sinit>
   81432:	e714      	b.n	8125e <_vfiprintf_r+0x1a>
   81434:	4240      	negs	r0, r0
   81436:	9308      	str	r3, [sp, #32]
   81438:	f04a 0a04 	orr.w	sl, sl, #4
   8143c:	f898 3000 	ldrb.w	r3, [r8]
   81440:	e76d      	b.n	8131e <_vfiprintf_r+0xda>
   81442:	f01a 0320 	ands.w	r3, sl, #32
   81446:	9004      	str	r0, [sp, #16]
   81448:	46ac      	mov	ip, r5
   8144a:	f000 80f4 	beq.w	81636 <_vfiprintf_r+0x3f2>
   8144e:	f8dd b020 	ldr.w	fp, [sp, #32]
   81452:	f10b 0307 	add.w	r3, fp, #7
   81456:	f023 0307 	bic.w	r3, r3, #7
   8145a:	f103 0408 	add.w	r4, r3, #8
   8145e:	9408      	str	r4, [sp, #32]
   81460:	e9d3 4500 	ldrd	r4, r5, [r3]
   81464:	2300      	movs	r3, #0
   81466:	f04f 0000 	mov.w	r0, #0
   8146a:	2100      	movs	r1, #0
   8146c:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   81470:	f8cd c014 	str.w	ip, [sp, #20]
   81474:	9107      	str	r1, [sp, #28]
   81476:	f1bc 0f00 	cmp.w	ip, #0
   8147a:	bfa8      	it	ge
   8147c:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81480:	ea54 0205 	orrs.w	r2, r4, r5
   81484:	f040 80ad 	bne.w	815e2 <_vfiprintf_r+0x39e>
   81488:	f1bc 0f00 	cmp.w	ip, #0
   8148c:	f040 80a9 	bne.w	815e2 <_vfiprintf_r+0x39e>
   81490:	2b00      	cmp	r3, #0
   81492:	f040 83c0 	bne.w	81c16 <_vfiprintf_r+0x9d2>
   81496:	f01a 0f01 	tst.w	sl, #1
   8149a:	f000 83bc 	beq.w	81c16 <_vfiprintf_r+0x9d2>
   8149e:	2330      	movs	r3, #48	; 0x30
   814a0:	af30      	add	r7, sp, #192	; 0xc0
   814a2:	f807 3d41 	strb.w	r3, [r7, #-65]!
   814a6:	ebc7 0409 	rsb	r4, r7, r9
   814aa:	9405      	str	r4, [sp, #20]
   814ac:	f8dd b014 	ldr.w	fp, [sp, #20]
   814b0:	9c07      	ldr	r4, [sp, #28]
   814b2:	45e3      	cmp	fp, ip
   814b4:	bfb8      	it	lt
   814b6:	46e3      	movlt	fp, ip
   814b8:	f8cd b00c 	str.w	fp, [sp, #12]
   814bc:	b11c      	cbz	r4, 814c6 <_vfiprintf_r+0x282>
   814be:	f10b 0b01 	add.w	fp, fp, #1
   814c2:	f8cd b00c 	str.w	fp, [sp, #12]
   814c6:	f01a 0502 	ands.w	r5, sl, #2
   814ca:	9507      	str	r5, [sp, #28]
   814cc:	d005      	beq.n	814da <_vfiprintf_r+0x296>
   814ce:	f8dd b00c 	ldr.w	fp, [sp, #12]
   814d2:	f10b 0b02 	add.w	fp, fp, #2
   814d6:	f8cd b00c 	str.w	fp, [sp, #12]
   814da:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   814de:	930b      	str	r3, [sp, #44]	; 0x2c
   814e0:	f040 821b 	bne.w	8191a <_vfiprintf_r+0x6d6>
   814e4:	9d04      	ldr	r5, [sp, #16]
   814e6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   814ea:	ebcb 0405 	rsb	r4, fp, r5
   814ee:	2c00      	cmp	r4, #0
   814f0:	f340 8213 	ble.w	8191a <_vfiprintf_r+0x6d6>
   814f4:	2c10      	cmp	r4, #16
   814f6:	f340 8489 	ble.w	81e0c <_vfiprintf_r+0xbc8>
   814fa:	4dbe      	ldr	r5, [pc, #760]	; (817f4 <_vfiprintf_r+0x5b0>)
   814fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   814fe:	462b      	mov	r3, r5
   81500:	9814      	ldr	r0, [sp, #80]	; 0x50
   81502:	4625      	mov	r5, r4
   81504:	f04f 0b10 	mov.w	fp, #16
   81508:	4664      	mov	r4, ip
   8150a:	46b4      	mov	ip, r6
   8150c:	461e      	mov	r6, r3
   8150e:	e006      	b.n	8151e <_vfiprintf_r+0x2da>
   81510:	1c83      	adds	r3, r0, #2
   81512:	f10c 0c08 	add.w	ip, ip, #8
   81516:	4608      	mov	r0, r1
   81518:	3d10      	subs	r5, #16
   8151a:	2d10      	cmp	r5, #16
   8151c:	dd11      	ble.n	81542 <_vfiprintf_r+0x2fe>
   8151e:	1c41      	adds	r1, r0, #1
   81520:	3210      	adds	r2, #16
   81522:	2907      	cmp	r1, #7
   81524:	9215      	str	r2, [sp, #84]	; 0x54
   81526:	e88c 0840 	stmia.w	ip, {r6, fp}
   8152a:	9114      	str	r1, [sp, #80]	; 0x50
   8152c:	ddf0      	ble.n	81510 <_vfiprintf_r+0x2cc>
   8152e:	2a00      	cmp	r2, #0
   81530:	f040 81e6 	bne.w	81900 <_vfiprintf_r+0x6bc>
   81534:	3d10      	subs	r5, #16
   81536:	2d10      	cmp	r5, #16
   81538:	f04f 0301 	mov.w	r3, #1
   8153c:	4610      	mov	r0, r2
   8153e:	46cc      	mov	ip, r9
   81540:	dced      	bgt.n	8151e <_vfiprintf_r+0x2da>
   81542:	4631      	mov	r1, r6
   81544:	4666      	mov	r6, ip
   81546:	46a4      	mov	ip, r4
   81548:	462c      	mov	r4, r5
   8154a:	460d      	mov	r5, r1
   8154c:	4422      	add	r2, r4
   8154e:	2b07      	cmp	r3, #7
   81550:	9215      	str	r2, [sp, #84]	; 0x54
   81552:	6035      	str	r5, [r6, #0]
   81554:	6074      	str	r4, [r6, #4]
   81556:	9314      	str	r3, [sp, #80]	; 0x50
   81558:	f300 836d 	bgt.w	81c36 <_vfiprintf_r+0x9f2>
   8155c:	3608      	adds	r6, #8
   8155e:	1c59      	adds	r1, r3, #1
   81560:	e1de      	b.n	81920 <_vfiprintf_r+0x6dc>
   81562:	f01a 0f20 	tst.w	sl, #32
   81566:	9004      	str	r0, [sp, #16]
   81568:	46ac      	mov	ip, r5
   8156a:	f000 808d 	beq.w	81688 <_vfiprintf_r+0x444>
   8156e:	9d08      	ldr	r5, [sp, #32]
   81570:	1deb      	adds	r3, r5, #7
   81572:	f023 0307 	bic.w	r3, r3, #7
   81576:	f103 0b08 	add.w	fp, r3, #8
   8157a:	e9d3 4500 	ldrd	r4, r5, [r3]
   8157e:	f8cd b020 	str.w	fp, [sp, #32]
   81582:	2301      	movs	r3, #1
   81584:	e76f      	b.n	81466 <_vfiprintf_r+0x222>
   81586:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   8158a:	f898 3000 	ldrb.w	r3, [r8]
   8158e:	e6c6      	b.n	8131e <_vfiprintf_r+0xda>
   81590:	f04a 0a10 	orr.w	sl, sl, #16
   81594:	f01a 0f20 	tst.w	sl, #32
   81598:	9004      	str	r0, [sp, #16]
   8159a:	46ac      	mov	ip, r5
   8159c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   815a0:	f000 80c8 	beq.w	81734 <_vfiprintf_r+0x4f0>
   815a4:	9c08      	ldr	r4, [sp, #32]
   815a6:	1de1      	adds	r1, r4, #7
   815a8:	f021 0107 	bic.w	r1, r1, #7
   815ac:	e9d1 2300 	ldrd	r2, r3, [r1]
   815b0:	3108      	adds	r1, #8
   815b2:	9108      	str	r1, [sp, #32]
   815b4:	4614      	mov	r4, r2
   815b6:	461d      	mov	r5, r3
   815b8:	2a00      	cmp	r2, #0
   815ba:	f173 0b00 	sbcs.w	fp, r3, #0
   815be:	f2c0 83ce 	blt.w	81d5e <_vfiprintf_r+0xb1a>
   815c2:	f1bc 0f00 	cmp.w	ip, #0
   815c6:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   815ca:	bfa8      	it	ge
   815cc:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   815d0:	ea54 0205 	orrs.w	r2, r4, r5
   815d4:	9007      	str	r0, [sp, #28]
   815d6:	f8cd c014 	str.w	ip, [sp, #20]
   815da:	f04f 0301 	mov.w	r3, #1
   815de:	f43f af53 	beq.w	81488 <_vfiprintf_r+0x244>
   815e2:	2b01      	cmp	r3, #1
   815e4:	f000 8319 	beq.w	81c1a <_vfiprintf_r+0x9d6>
   815e8:	2b02      	cmp	r3, #2
   815ea:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   815ee:	f040 824c 	bne.w	81a8a <_vfiprintf_r+0x846>
   815f2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   815f6:	4619      	mov	r1, r3
   815f8:	f004 000f 	and.w	r0, r4, #15
   815fc:	0922      	lsrs	r2, r4, #4
   815fe:	f81b 0000 	ldrb.w	r0, [fp, r0]
   81602:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   81606:	092b      	lsrs	r3, r5, #4
   81608:	7008      	strb	r0, [r1, #0]
   8160a:	ea52 0003 	orrs.w	r0, r2, r3
   8160e:	460f      	mov	r7, r1
   81610:	4614      	mov	r4, r2
   81612:	461d      	mov	r5, r3
   81614:	f101 31ff 	add.w	r1, r1, #4294967295
   81618:	d1ee      	bne.n	815f8 <_vfiprintf_r+0x3b4>
   8161a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   8161e:	ebc7 0309 	rsb	r3, r7, r9
   81622:	9305      	str	r3, [sp, #20]
   81624:	e742      	b.n	814ac <_vfiprintf_r+0x268>
   81626:	f04a 0a10 	orr.w	sl, sl, #16
   8162a:	f01a 0320 	ands.w	r3, sl, #32
   8162e:	9004      	str	r0, [sp, #16]
   81630:	46ac      	mov	ip, r5
   81632:	f47f af0c 	bne.w	8144e <_vfiprintf_r+0x20a>
   81636:	f01a 0210 	ands.w	r2, sl, #16
   8163a:	f040 8311 	bne.w	81c60 <_vfiprintf_r+0xa1c>
   8163e:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   81642:	f000 830d 	beq.w	81c60 <_vfiprintf_r+0xa1c>
   81646:	f8dd b020 	ldr.w	fp, [sp, #32]
   8164a:	4613      	mov	r3, r2
   8164c:	f8bb 4000 	ldrh.w	r4, [fp]
   81650:	f10b 0b04 	add.w	fp, fp, #4
   81654:	2500      	movs	r5, #0
   81656:	f8cd b020 	str.w	fp, [sp, #32]
   8165a:	e704      	b.n	81466 <_vfiprintf_r+0x222>
   8165c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81660:	2000      	movs	r0, #0
   81662:	f818 3b01 	ldrb.w	r3, [r8], #1
   81666:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8166a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   8166e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81672:	2a09      	cmp	r2, #9
   81674:	d9f5      	bls.n	81662 <_vfiprintf_r+0x41e>
   81676:	e654      	b.n	81322 <_vfiprintf_r+0xde>
   81678:	f04a 0a10 	orr.w	sl, sl, #16
   8167c:	f01a 0f20 	tst.w	sl, #32
   81680:	9004      	str	r0, [sp, #16]
   81682:	46ac      	mov	ip, r5
   81684:	f47f af73 	bne.w	8156e <_vfiprintf_r+0x32a>
   81688:	f01a 0f10 	tst.w	sl, #16
   8168c:	f040 82ef 	bne.w	81c6e <_vfiprintf_r+0xa2a>
   81690:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81694:	f000 82eb 	beq.w	81c6e <_vfiprintf_r+0xa2a>
   81698:	f8dd b020 	ldr.w	fp, [sp, #32]
   8169c:	2500      	movs	r5, #0
   8169e:	f8bb 4000 	ldrh.w	r4, [fp]
   816a2:	f10b 0b04 	add.w	fp, fp, #4
   816a6:	2301      	movs	r3, #1
   816a8:	f8cd b020 	str.w	fp, [sp, #32]
   816ac:	e6db      	b.n	81466 <_vfiprintf_r+0x222>
   816ae:	46ac      	mov	ip, r5
   816b0:	4d51      	ldr	r5, [pc, #324]	; (817f8 <_vfiprintf_r+0x5b4>)
   816b2:	f01a 0f20 	tst.w	sl, #32
   816b6:	9004      	str	r0, [sp, #16]
   816b8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   816bc:	950a      	str	r5, [sp, #40]	; 0x28
   816be:	f000 80f0 	beq.w	818a2 <_vfiprintf_r+0x65e>
   816c2:	9d08      	ldr	r5, [sp, #32]
   816c4:	1dea      	adds	r2, r5, #7
   816c6:	f022 0207 	bic.w	r2, r2, #7
   816ca:	f102 0b08 	add.w	fp, r2, #8
   816ce:	f8cd b020 	str.w	fp, [sp, #32]
   816d2:	e9d2 4500 	ldrd	r4, r5, [r2]
   816d6:	f01a 0f01 	tst.w	sl, #1
   816da:	f000 82aa 	beq.w	81c32 <_vfiprintf_r+0x9ee>
   816de:	ea54 0b05 	orrs.w	fp, r4, r5
   816e2:	f000 82a6 	beq.w	81c32 <_vfiprintf_r+0x9ee>
   816e6:	2230      	movs	r2, #48	; 0x30
   816e8:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   816ec:	f04a 0a02 	orr.w	sl, sl, #2
   816f0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   816f4:	2302      	movs	r3, #2
   816f6:	e6b6      	b.n	81466 <_vfiprintf_r+0x222>
   816f8:	9b08      	ldr	r3, [sp, #32]
   816fa:	f8dd b020 	ldr.w	fp, [sp, #32]
   816fe:	681b      	ldr	r3, [r3, #0]
   81700:	2401      	movs	r4, #1
   81702:	f04f 0500 	mov.w	r5, #0
   81706:	f10b 0b04 	add.w	fp, fp, #4
   8170a:	9004      	str	r0, [sp, #16]
   8170c:	9403      	str	r4, [sp, #12]
   8170e:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81712:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81716:	f8cd b020 	str.w	fp, [sp, #32]
   8171a:	9405      	str	r4, [sp, #20]
   8171c:	af16      	add	r7, sp, #88	; 0x58
   8171e:	f04f 0c00 	mov.w	ip, #0
   81722:	e6d0      	b.n	814c6 <_vfiprintf_r+0x282>
   81724:	f01a 0f20 	tst.w	sl, #32
   81728:	9004      	str	r0, [sp, #16]
   8172a:	46ac      	mov	ip, r5
   8172c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81730:	f47f af38 	bne.w	815a4 <_vfiprintf_r+0x360>
   81734:	f01a 0f10 	tst.w	sl, #16
   81738:	f040 82a7 	bne.w	81c8a <_vfiprintf_r+0xa46>
   8173c:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81740:	f000 82a3 	beq.w	81c8a <_vfiprintf_r+0xa46>
   81744:	f8dd b020 	ldr.w	fp, [sp, #32]
   81748:	f9bb 4000 	ldrsh.w	r4, [fp]
   8174c:	f10b 0b04 	add.w	fp, fp, #4
   81750:	17e5      	asrs	r5, r4, #31
   81752:	4622      	mov	r2, r4
   81754:	462b      	mov	r3, r5
   81756:	f8cd b020 	str.w	fp, [sp, #32]
   8175a:	e72d      	b.n	815b8 <_vfiprintf_r+0x374>
   8175c:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   81760:	f898 3000 	ldrb.w	r3, [r8]
   81764:	e5db      	b.n	8131e <_vfiprintf_r+0xda>
   81766:	f898 3000 	ldrb.w	r3, [r8]
   8176a:	4642      	mov	r2, r8
   8176c:	2b6c      	cmp	r3, #108	; 0x6c
   8176e:	bf03      	ittte	eq
   81770:	f108 0801 	addeq.w	r8, r8, #1
   81774:	f04a 0a20 	orreq.w	sl, sl, #32
   81778:	7853      	ldrbeq	r3, [r2, #1]
   8177a:	f04a 0a10 	orrne.w	sl, sl, #16
   8177e:	e5ce      	b.n	8131e <_vfiprintf_r+0xda>
   81780:	f01a 0f20 	tst.w	sl, #32
   81784:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81788:	f000 82f7 	beq.w	81d7a <_vfiprintf_r+0xb36>
   8178c:	9c08      	ldr	r4, [sp, #32]
   8178e:	6821      	ldr	r1, [r4, #0]
   81790:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81792:	17e5      	asrs	r5, r4, #31
   81794:	462b      	mov	r3, r5
   81796:	9d08      	ldr	r5, [sp, #32]
   81798:	4622      	mov	r2, r4
   8179a:	3504      	adds	r5, #4
   8179c:	9508      	str	r5, [sp, #32]
   8179e:	e9c1 2300 	strd	r2, r3, [r1]
   817a2:	e582      	b.n	812aa <_vfiprintf_r+0x66>
   817a4:	9c08      	ldr	r4, [sp, #32]
   817a6:	46ac      	mov	ip, r5
   817a8:	6827      	ldr	r7, [r4, #0]
   817aa:	f04f 0500 	mov.w	r5, #0
   817ae:	9004      	str	r0, [sp, #16]
   817b0:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   817b4:	3404      	adds	r4, #4
   817b6:	2f00      	cmp	r7, #0
   817b8:	f000 8332 	beq.w	81e20 <_vfiprintf_r+0xbdc>
   817bc:	f1bc 0f00 	cmp.w	ip, #0
   817c0:	4638      	mov	r0, r7
   817c2:	f2c0 8307 	blt.w	81dd4 <_vfiprintf_r+0xb90>
   817c6:	4662      	mov	r2, ip
   817c8:	2100      	movs	r1, #0
   817ca:	f8cd c004 	str.w	ip, [sp, #4]
   817ce:	f001 fbb1 	bl	82f34 <memchr>
   817d2:	f8dd c004 	ldr.w	ip, [sp, #4]
   817d6:	2800      	cmp	r0, #0
   817d8:	f000 833a 	beq.w	81e50 <_vfiprintf_r+0xc0c>
   817dc:	1bc0      	subs	r0, r0, r7
   817de:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   817e2:	4560      	cmp	r0, ip
   817e4:	bfa8      	it	ge
   817e6:	4660      	movge	r0, ip
   817e8:	9005      	str	r0, [sp, #20]
   817ea:	9408      	str	r4, [sp, #32]
   817ec:	9507      	str	r5, [sp, #28]
   817ee:	f04f 0c00 	mov.w	ip, #0
   817f2:	e65b      	b.n	814ac <_vfiprintf_r+0x268>
   817f4:	00084004 	.word	0x00084004
   817f8:	00083fc4 	.word	0x00083fc4
   817fc:	9b08      	ldr	r3, [sp, #32]
   817fe:	f8dd b020 	ldr.w	fp, [sp, #32]
   81802:	9004      	str	r0, [sp, #16]
   81804:	48b2      	ldr	r0, [pc, #712]	; (81ad0 <_vfiprintf_r+0x88c>)
   81806:	681c      	ldr	r4, [r3, #0]
   81808:	2230      	movs	r2, #48	; 0x30
   8180a:	2378      	movs	r3, #120	; 0x78
   8180c:	f10b 0b04 	add.w	fp, fp, #4
   81810:	46ac      	mov	ip, r5
   81812:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81816:	f04a 0a02 	orr.w	sl, sl, #2
   8181a:	f8cd b020 	str.w	fp, [sp, #32]
   8181e:	2500      	movs	r5, #0
   81820:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81824:	900a      	str	r0, [sp, #40]	; 0x28
   81826:	2302      	movs	r3, #2
   81828:	e61d      	b.n	81466 <_vfiprintf_r+0x222>
   8182a:	f04a 0a20 	orr.w	sl, sl, #32
   8182e:	f898 3000 	ldrb.w	r3, [r8]
   81832:	e574      	b.n	8131e <_vfiprintf_r+0xda>
   81834:	f8dd b020 	ldr.w	fp, [sp, #32]
   81838:	f8db 0000 	ldr.w	r0, [fp]
   8183c:	f10b 0304 	add.w	r3, fp, #4
   81840:	2800      	cmp	r0, #0
   81842:	f6ff adf7 	blt.w	81434 <_vfiprintf_r+0x1f0>
   81846:	9308      	str	r3, [sp, #32]
   81848:	f898 3000 	ldrb.w	r3, [r8]
   8184c:	e567      	b.n	8131e <_vfiprintf_r+0xda>
   8184e:	f898 3000 	ldrb.w	r3, [r8]
   81852:	212b      	movs	r1, #43	; 0x2b
   81854:	e563      	b.n	8131e <_vfiprintf_r+0xda>
   81856:	f898 3000 	ldrb.w	r3, [r8]
   8185a:	f108 0401 	add.w	r4, r8, #1
   8185e:	2b2a      	cmp	r3, #42	; 0x2a
   81860:	f000 8305 	beq.w	81e6e <_vfiprintf_r+0xc2a>
   81864:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81868:	2a09      	cmp	r2, #9
   8186a:	bf98      	it	ls
   8186c:	2500      	movls	r5, #0
   8186e:	f200 82fa 	bhi.w	81e66 <_vfiprintf_r+0xc22>
   81872:	f814 3b01 	ldrb.w	r3, [r4], #1
   81876:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8187a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   8187e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81882:	2a09      	cmp	r2, #9
   81884:	d9f5      	bls.n	81872 <_vfiprintf_r+0x62e>
   81886:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   8188a:	46a0      	mov	r8, r4
   8188c:	e549      	b.n	81322 <_vfiprintf_r+0xde>
   8188e:	4c90      	ldr	r4, [pc, #576]	; (81ad0 <_vfiprintf_r+0x88c>)
   81890:	f01a 0f20 	tst.w	sl, #32
   81894:	9004      	str	r0, [sp, #16]
   81896:	46ac      	mov	ip, r5
   81898:	940a      	str	r4, [sp, #40]	; 0x28
   8189a:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8189e:	f47f af10 	bne.w	816c2 <_vfiprintf_r+0x47e>
   818a2:	f01a 0f10 	tst.w	sl, #16
   818a6:	f040 81ea 	bne.w	81c7e <_vfiprintf_r+0xa3a>
   818aa:	f01a 0f40 	tst.w	sl, #64	; 0x40
   818ae:	f000 81e6 	beq.w	81c7e <_vfiprintf_r+0xa3a>
   818b2:	f8dd b020 	ldr.w	fp, [sp, #32]
   818b6:	2500      	movs	r5, #0
   818b8:	f8bb 4000 	ldrh.w	r4, [fp]
   818bc:	f10b 0b04 	add.w	fp, fp, #4
   818c0:	f8cd b020 	str.w	fp, [sp, #32]
   818c4:	e707      	b.n	816d6 <_vfiprintf_r+0x492>
   818c6:	f898 3000 	ldrb.w	r3, [r8]
   818ca:	2900      	cmp	r1, #0
   818cc:	f47f ad27 	bne.w	8131e <_vfiprintf_r+0xda>
   818d0:	2120      	movs	r1, #32
   818d2:	e524      	b.n	8131e <_vfiprintf_r+0xda>
   818d4:	f04a 0a01 	orr.w	sl, sl, #1
   818d8:	f898 3000 	ldrb.w	r3, [r8]
   818dc:	e51f      	b.n	8131e <_vfiprintf_r+0xda>
   818de:	9004      	str	r0, [sp, #16]
   818e0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   818e4:	2b00      	cmp	r3, #0
   818e6:	f000 80f9 	beq.w	81adc <_vfiprintf_r+0x898>
   818ea:	2501      	movs	r5, #1
   818ec:	f04f 0b00 	mov.w	fp, #0
   818f0:	9503      	str	r5, [sp, #12]
   818f2:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   818f6:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   818fa:	9505      	str	r5, [sp, #20]
   818fc:	af16      	add	r7, sp, #88	; 0x58
   818fe:	e70e      	b.n	8171e <_vfiprintf_r+0x4da>
   81900:	9806      	ldr	r0, [sp, #24]
   81902:	9902      	ldr	r1, [sp, #8]
   81904:	aa13      	add	r2, sp, #76	; 0x4c
   81906:	f7ff fc61 	bl	811cc <__sprint_r.part.0>
   8190a:	2800      	cmp	r0, #0
   8190c:	f040 80ed 	bne.w	81aea <_vfiprintf_r+0x8a6>
   81910:	9814      	ldr	r0, [sp, #80]	; 0x50
   81912:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81914:	1c43      	adds	r3, r0, #1
   81916:	46cc      	mov	ip, r9
   81918:	e5fe      	b.n	81518 <_vfiprintf_r+0x2d4>
   8191a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8191c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8191e:	1c59      	adds	r1, r3, #1
   81920:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81924:	b168      	cbz	r0, 81942 <_vfiprintf_r+0x6fe>
   81926:	3201      	adds	r2, #1
   81928:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   8192c:	2301      	movs	r3, #1
   8192e:	2907      	cmp	r1, #7
   81930:	9215      	str	r2, [sp, #84]	; 0x54
   81932:	9114      	str	r1, [sp, #80]	; 0x50
   81934:	e886 0009 	stmia.w	r6, {r0, r3}
   81938:	f300 8160 	bgt.w	81bfc <_vfiprintf_r+0x9b8>
   8193c:	460b      	mov	r3, r1
   8193e:	3608      	adds	r6, #8
   81940:	3101      	adds	r1, #1
   81942:	9c07      	ldr	r4, [sp, #28]
   81944:	b164      	cbz	r4, 81960 <_vfiprintf_r+0x71c>
   81946:	3202      	adds	r2, #2
   81948:	a812      	add	r0, sp, #72	; 0x48
   8194a:	2302      	movs	r3, #2
   8194c:	2907      	cmp	r1, #7
   8194e:	9215      	str	r2, [sp, #84]	; 0x54
   81950:	9114      	str	r1, [sp, #80]	; 0x50
   81952:	e886 0009 	stmia.w	r6, {r0, r3}
   81956:	f300 8157 	bgt.w	81c08 <_vfiprintf_r+0x9c4>
   8195a:	460b      	mov	r3, r1
   8195c:	3608      	adds	r6, #8
   8195e:	3101      	adds	r1, #1
   81960:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   81962:	2d80      	cmp	r5, #128	; 0x80
   81964:	f000 8101 	beq.w	81b6a <_vfiprintf_r+0x926>
   81968:	9d05      	ldr	r5, [sp, #20]
   8196a:	ebc5 040c 	rsb	r4, r5, ip
   8196e:	2c00      	cmp	r4, #0
   81970:	dd2f      	ble.n	819d2 <_vfiprintf_r+0x78e>
   81972:	2c10      	cmp	r4, #16
   81974:	4d57      	ldr	r5, [pc, #348]	; (81ad4 <_vfiprintf_r+0x890>)
   81976:	dd22      	ble.n	819be <_vfiprintf_r+0x77a>
   81978:	4630      	mov	r0, r6
   8197a:	f04f 0b10 	mov.w	fp, #16
   8197e:	462e      	mov	r6, r5
   81980:	4625      	mov	r5, r4
   81982:	9c06      	ldr	r4, [sp, #24]
   81984:	e006      	b.n	81994 <_vfiprintf_r+0x750>
   81986:	f103 0c02 	add.w	ip, r3, #2
   8198a:	3008      	adds	r0, #8
   8198c:	460b      	mov	r3, r1
   8198e:	3d10      	subs	r5, #16
   81990:	2d10      	cmp	r5, #16
   81992:	dd10      	ble.n	819b6 <_vfiprintf_r+0x772>
   81994:	1c59      	adds	r1, r3, #1
   81996:	3210      	adds	r2, #16
   81998:	2907      	cmp	r1, #7
   8199a:	9215      	str	r2, [sp, #84]	; 0x54
   8199c:	e880 0840 	stmia.w	r0, {r6, fp}
   819a0:	9114      	str	r1, [sp, #80]	; 0x50
   819a2:	ddf0      	ble.n	81986 <_vfiprintf_r+0x742>
   819a4:	2a00      	cmp	r2, #0
   819a6:	d163      	bne.n	81a70 <_vfiprintf_r+0x82c>
   819a8:	3d10      	subs	r5, #16
   819aa:	2d10      	cmp	r5, #16
   819ac:	f04f 0c01 	mov.w	ip, #1
   819b0:	4613      	mov	r3, r2
   819b2:	4648      	mov	r0, r9
   819b4:	dcee      	bgt.n	81994 <_vfiprintf_r+0x750>
   819b6:	462c      	mov	r4, r5
   819b8:	4661      	mov	r1, ip
   819ba:	4635      	mov	r5, r6
   819bc:	4606      	mov	r6, r0
   819be:	4422      	add	r2, r4
   819c0:	2907      	cmp	r1, #7
   819c2:	9215      	str	r2, [sp, #84]	; 0x54
   819c4:	6035      	str	r5, [r6, #0]
   819c6:	6074      	str	r4, [r6, #4]
   819c8:	9114      	str	r1, [sp, #80]	; 0x50
   819ca:	f300 80c1 	bgt.w	81b50 <_vfiprintf_r+0x90c>
   819ce:	3608      	adds	r6, #8
   819d0:	3101      	adds	r1, #1
   819d2:	9d05      	ldr	r5, [sp, #20]
   819d4:	2907      	cmp	r1, #7
   819d6:	442a      	add	r2, r5
   819d8:	9215      	str	r2, [sp, #84]	; 0x54
   819da:	6037      	str	r7, [r6, #0]
   819dc:	6075      	str	r5, [r6, #4]
   819de:	9114      	str	r1, [sp, #80]	; 0x50
   819e0:	f340 80c1 	ble.w	81b66 <_vfiprintf_r+0x922>
   819e4:	2a00      	cmp	r2, #0
   819e6:	f040 8130 	bne.w	81c4a <_vfiprintf_r+0xa06>
   819ea:	9214      	str	r2, [sp, #80]	; 0x50
   819ec:	464e      	mov	r6, r9
   819ee:	f01a 0f04 	tst.w	sl, #4
   819f2:	f000 808b 	beq.w	81b0c <_vfiprintf_r+0x8c8>
   819f6:	9d04      	ldr	r5, [sp, #16]
   819f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   819fc:	ebcb 0405 	rsb	r4, fp, r5
   81a00:	2c00      	cmp	r4, #0
   81a02:	f340 8083 	ble.w	81b0c <_vfiprintf_r+0x8c8>
   81a06:	2c10      	cmp	r4, #16
   81a08:	f340 821e 	ble.w	81e48 <_vfiprintf_r+0xc04>
   81a0c:	9914      	ldr	r1, [sp, #80]	; 0x50
   81a0e:	4d32      	ldr	r5, [pc, #200]	; (81ad8 <_vfiprintf_r+0x894>)
   81a10:	2710      	movs	r7, #16
   81a12:	f8dd a018 	ldr.w	sl, [sp, #24]
   81a16:	f8dd b008 	ldr.w	fp, [sp, #8]
   81a1a:	e005      	b.n	81a28 <_vfiprintf_r+0x7e4>
   81a1c:	1c88      	adds	r0, r1, #2
   81a1e:	3608      	adds	r6, #8
   81a20:	4619      	mov	r1, r3
   81a22:	3c10      	subs	r4, #16
   81a24:	2c10      	cmp	r4, #16
   81a26:	dd10      	ble.n	81a4a <_vfiprintf_r+0x806>
   81a28:	1c4b      	adds	r3, r1, #1
   81a2a:	3210      	adds	r2, #16
   81a2c:	2b07      	cmp	r3, #7
   81a2e:	9215      	str	r2, [sp, #84]	; 0x54
   81a30:	e886 00a0 	stmia.w	r6, {r5, r7}
   81a34:	9314      	str	r3, [sp, #80]	; 0x50
   81a36:	ddf1      	ble.n	81a1c <_vfiprintf_r+0x7d8>
   81a38:	2a00      	cmp	r2, #0
   81a3a:	d17d      	bne.n	81b38 <_vfiprintf_r+0x8f4>
   81a3c:	3c10      	subs	r4, #16
   81a3e:	2c10      	cmp	r4, #16
   81a40:	f04f 0001 	mov.w	r0, #1
   81a44:	4611      	mov	r1, r2
   81a46:	464e      	mov	r6, r9
   81a48:	dcee      	bgt.n	81a28 <_vfiprintf_r+0x7e4>
   81a4a:	4422      	add	r2, r4
   81a4c:	2807      	cmp	r0, #7
   81a4e:	9215      	str	r2, [sp, #84]	; 0x54
   81a50:	6035      	str	r5, [r6, #0]
   81a52:	6074      	str	r4, [r6, #4]
   81a54:	9014      	str	r0, [sp, #80]	; 0x50
   81a56:	dd59      	ble.n	81b0c <_vfiprintf_r+0x8c8>
   81a58:	2a00      	cmp	r2, #0
   81a5a:	d14f      	bne.n	81afc <_vfiprintf_r+0x8b8>
   81a5c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81a5e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81a62:	9d04      	ldr	r5, [sp, #16]
   81a64:	45ab      	cmp	fp, r5
   81a66:	bfac      	ite	ge
   81a68:	445c      	addge	r4, fp
   81a6a:	1964      	addlt	r4, r4, r5
   81a6c:	9409      	str	r4, [sp, #36]	; 0x24
   81a6e:	e05e      	b.n	81b2e <_vfiprintf_r+0x8ea>
   81a70:	4620      	mov	r0, r4
   81a72:	9902      	ldr	r1, [sp, #8]
   81a74:	aa13      	add	r2, sp, #76	; 0x4c
   81a76:	f7ff fba9 	bl	811cc <__sprint_r.part.0>
   81a7a:	2800      	cmp	r0, #0
   81a7c:	d135      	bne.n	81aea <_vfiprintf_r+0x8a6>
   81a7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81a80:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81a82:	f103 0c01 	add.w	ip, r3, #1
   81a86:	4648      	mov	r0, r9
   81a88:	e781      	b.n	8198e <_vfiprintf_r+0x74a>
   81a8a:	08e0      	lsrs	r0, r4, #3
   81a8c:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   81a90:	f004 0207 	and.w	r2, r4, #7
   81a94:	08e9      	lsrs	r1, r5, #3
   81a96:	3230      	adds	r2, #48	; 0x30
   81a98:	ea50 0b01 	orrs.w	fp, r0, r1
   81a9c:	461f      	mov	r7, r3
   81a9e:	701a      	strb	r2, [r3, #0]
   81aa0:	4604      	mov	r4, r0
   81aa2:	460d      	mov	r5, r1
   81aa4:	f103 33ff 	add.w	r3, r3, #4294967295
   81aa8:	d1ef      	bne.n	81a8a <_vfiprintf_r+0x846>
   81aaa:	f01a 0f01 	tst.w	sl, #1
   81aae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   81ab2:	4639      	mov	r1, r7
   81ab4:	f000 80b9 	beq.w	81c2a <_vfiprintf_r+0x9e6>
   81ab8:	2a30      	cmp	r2, #48	; 0x30
   81aba:	f43f acf4 	beq.w	814a6 <_vfiprintf_r+0x262>
   81abe:	461f      	mov	r7, r3
   81ac0:	ebc7 0509 	rsb	r5, r7, r9
   81ac4:	2330      	movs	r3, #48	; 0x30
   81ac6:	9505      	str	r5, [sp, #20]
   81ac8:	f801 3c01 	strb.w	r3, [r1, #-1]
   81acc:	e4ee      	b.n	814ac <_vfiprintf_r+0x268>
   81ace:	bf00      	nop
   81ad0:	00083fd8 	.word	0x00083fd8
   81ad4:	00083ff4 	.word	0x00083ff4
   81ad8:	00084004 	.word	0x00084004
   81adc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   81ade:	b123      	cbz	r3, 81aea <_vfiprintf_r+0x8a6>
   81ae0:	9806      	ldr	r0, [sp, #24]
   81ae2:	9902      	ldr	r1, [sp, #8]
   81ae4:	aa13      	add	r2, sp, #76	; 0x4c
   81ae6:	f7ff fb71 	bl	811cc <__sprint_r.part.0>
   81aea:	9c02      	ldr	r4, [sp, #8]
   81aec:	89a3      	ldrh	r3, [r4, #12]
   81aee:	065b      	lsls	r3, r3, #25
   81af0:	f53f ac98 	bmi.w	81424 <_vfiprintf_r+0x1e0>
   81af4:	9809      	ldr	r0, [sp, #36]	; 0x24
   81af6:	b031      	add	sp, #196	; 0xc4
   81af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81afc:	9806      	ldr	r0, [sp, #24]
   81afe:	9902      	ldr	r1, [sp, #8]
   81b00:	aa13      	add	r2, sp, #76	; 0x4c
   81b02:	f7ff fb63 	bl	811cc <__sprint_r.part.0>
   81b06:	2800      	cmp	r0, #0
   81b08:	d1ef      	bne.n	81aea <_vfiprintf_r+0x8a6>
   81b0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b0c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81b0e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81b12:	9d04      	ldr	r5, [sp, #16]
   81b14:	45ab      	cmp	fp, r5
   81b16:	bfac      	ite	ge
   81b18:	445c      	addge	r4, fp
   81b1a:	1964      	addlt	r4, r4, r5
   81b1c:	9409      	str	r4, [sp, #36]	; 0x24
   81b1e:	b132      	cbz	r2, 81b2e <_vfiprintf_r+0x8ea>
   81b20:	9806      	ldr	r0, [sp, #24]
   81b22:	9902      	ldr	r1, [sp, #8]
   81b24:	aa13      	add	r2, sp, #76	; 0x4c
   81b26:	f7ff fb51 	bl	811cc <__sprint_r.part.0>
   81b2a:	2800      	cmp	r0, #0
   81b2c:	d1dd      	bne.n	81aea <_vfiprintf_r+0x8a6>
   81b2e:	2000      	movs	r0, #0
   81b30:	9014      	str	r0, [sp, #80]	; 0x50
   81b32:	464e      	mov	r6, r9
   81b34:	f7ff bbb9 	b.w	812aa <_vfiprintf_r+0x66>
   81b38:	4650      	mov	r0, sl
   81b3a:	4659      	mov	r1, fp
   81b3c:	aa13      	add	r2, sp, #76	; 0x4c
   81b3e:	f7ff fb45 	bl	811cc <__sprint_r.part.0>
   81b42:	2800      	cmp	r0, #0
   81b44:	d1d1      	bne.n	81aea <_vfiprintf_r+0x8a6>
   81b46:	9914      	ldr	r1, [sp, #80]	; 0x50
   81b48:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b4a:	1c48      	adds	r0, r1, #1
   81b4c:	464e      	mov	r6, r9
   81b4e:	e768      	b.n	81a22 <_vfiprintf_r+0x7de>
   81b50:	2a00      	cmp	r2, #0
   81b52:	f040 80f7 	bne.w	81d44 <_vfiprintf_r+0xb00>
   81b56:	9c05      	ldr	r4, [sp, #20]
   81b58:	2301      	movs	r3, #1
   81b5a:	9720      	str	r7, [sp, #128]	; 0x80
   81b5c:	9421      	str	r4, [sp, #132]	; 0x84
   81b5e:	9415      	str	r4, [sp, #84]	; 0x54
   81b60:	4622      	mov	r2, r4
   81b62:	9314      	str	r3, [sp, #80]	; 0x50
   81b64:	464e      	mov	r6, r9
   81b66:	3608      	adds	r6, #8
   81b68:	e741      	b.n	819ee <_vfiprintf_r+0x7aa>
   81b6a:	9d04      	ldr	r5, [sp, #16]
   81b6c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81b70:	ebcb 0405 	rsb	r4, fp, r5
   81b74:	2c00      	cmp	r4, #0
   81b76:	f77f aef7 	ble.w	81968 <_vfiprintf_r+0x724>
   81b7a:	2c10      	cmp	r4, #16
   81b7c:	4da6      	ldr	r5, [pc, #664]	; (81e18 <_vfiprintf_r+0xbd4>)
   81b7e:	f340 8170 	ble.w	81e62 <_vfiprintf_r+0xc1e>
   81b82:	4629      	mov	r1, r5
   81b84:	f04f 0b10 	mov.w	fp, #16
   81b88:	4625      	mov	r5, r4
   81b8a:	4664      	mov	r4, ip
   81b8c:	46b4      	mov	ip, r6
   81b8e:	460e      	mov	r6, r1
   81b90:	e006      	b.n	81ba0 <_vfiprintf_r+0x95c>
   81b92:	1c98      	adds	r0, r3, #2
   81b94:	f10c 0c08 	add.w	ip, ip, #8
   81b98:	460b      	mov	r3, r1
   81b9a:	3d10      	subs	r5, #16
   81b9c:	2d10      	cmp	r5, #16
   81b9e:	dd0f      	ble.n	81bc0 <_vfiprintf_r+0x97c>
   81ba0:	1c59      	adds	r1, r3, #1
   81ba2:	3210      	adds	r2, #16
   81ba4:	2907      	cmp	r1, #7
   81ba6:	9215      	str	r2, [sp, #84]	; 0x54
   81ba8:	e88c 0840 	stmia.w	ip, {r6, fp}
   81bac:	9114      	str	r1, [sp, #80]	; 0x50
   81bae:	ddf0      	ble.n	81b92 <_vfiprintf_r+0x94e>
   81bb0:	b9ba      	cbnz	r2, 81be2 <_vfiprintf_r+0x99e>
   81bb2:	3d10      	subs	r5, #16
   81bb4:	2d10      	cmp	r5, #16
   81bb6:	f04f 0001 	mov.w	r0, #1
   81bba:	4613      	mov	r3, r2
   81bbc:	46cc      	mov	ip, r9
   81bbe:	dcef      	bgt.n	81ba0 <_vfiprintf_r+0x95c>
   81bc0:	4633      	mov	r3, r6
   81bc2:	4666      	mov	r6, ip
   81bc4:	46a4      	mov	ip, r4
   81bc6:	462c      	mov	r4, r5
   81bc8:	461d      	mov	r5, r3
   81bca:	4422      	add	r2, r4
   81bcc:	2807      	cmp	r0, #7
   81bce:	9215      	str	r2, [sp, #84]	; 0x54
   81bd0:	6035      	str	r5, [r6, #0]
   81bd2:	6074      	str	r4, [r6, #4]
   81bd4:	9014      	str	r0, [sp, #80]	; 0x50
   81bd6:	f300 80af 	bgt.w	81d38 <_vfiprintf_r+0xaf4>
   81bda:	3608      	adds	r6, #8
   81bdc:	1c41      	adds	r1, r0, #1
   81bde:	4603      	mov	r3, r0
   81be0:	e6c2      	b.n	81968 <_vfiprintf_r+0x724>
   81be2:	9806      	ldr	r0, [sp, #24]
   81be4:	9902      	ldr	r1, [sp, #8]
   81be6:	aa13      	add	r2, sp, #76	; 0x4c
   81be8:	f7ff faf0 	bl	811cc <__sprint_r.part.0>
   81bec:	2800      	cmp	r0, #0
   81bee:	f47f af7c 	bne.w	81aea <_vfiprintf_r+0x8a6>
   81bf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81bf4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81bf6:	1c58      	adds	r0, r3, #1
   81bf8:	46cc      	mov	ip, r9
   81bfa:	e7ce      	b.n	81b9a <_vfiprintf_r+0x956>
   81bfc:	2a00      	cmp	r2, #0
   81bfe:	d179      	bne.n	81cf4 <_vfiprintf_r+0xab0>
   81c00:	4619      	mov	r1, r3
   81c02:	464e      	mov	r6, r9
   81c04:	4613      	mov	r3, r2
   81c06:	e69c      	b.n	81942 <_vfiprintf_r+0x6fe>
   81c08:	2a00      	cmp	r2, #0
   81c0a:	f040 8084 	bne.w	81d16 <_vfiprintf_r+0xad2>
   81c0e:	2101      	movs	r1, #1
   81c10:	4613      	mov	r3, r2
   81c12:	464e      	mov	r6, r9
   81c14:	e6a4      	b.n	81960 <_vfiprintf_r+0x71c>
   81c16:	464f      	mov	r7, r9
   81c18:	e448      	b.n	814ac <_vfiprintf_r+0x268>
   81c1a:	2d00      	cmp	r5, #0
   81c1c:	bf08      	it	eq
   81c1e:	2c0a      	cmpeq	r4, #10
   81c20:	d246      	bcs.n	81cb0 <_vfiprintf_r+0xa6c>
   81c22:	3430      	adds	r4, #48	; 0x30
   81c24:	af30      	add	r7, sp, #192	; 0xc0
   81c26:	f807 4d41 	strb.w	r4, [r7, #-65]!
   81c2a:	ebc7 0309 	rsb	r3, r7, r9
   81c2e:	9305      	str	r3, [sp, #20]
   81c30:	e43c      	b.n	814ac <_vfiprintf_r+0x268>
   81c32:	2302      	movs	r3, #2
   81c34:	e417      	b.n	81466 <_vfiprintf_r+0x222>
   81c36:	2a00      	cmp	r2, #0
   81c38:	f040 80af 	bne.w	81d9a <_vfiprintf_r+0xb56>
   81c3c:	4613      	mov	r3, r2
   81c3e:	2101      	movs	r1, #1
   81c40:	464e      	mov	r6, r9
   81c42:	e66d      	b.n	81920 <_vfiprintf_r+0x6dc>
   81c44:	4644      	mov	r4, r8
   81c46:	f7ff bb58 	b.w	812fa <_vfiprintf_r+0xb6>
   81c4a:	9806      	ldr	r0, [sp, #24]
   81c4c:	9902      	ldr	r1, [sp, #8]
   81c4e:	aa13      	add	r2, sp, #76	; 0x4c
   81c50:	f7ff fabc 	bl	811cc <__sprint_r.part.0>
   81c54:	2800      	cmp	r0, #0
   81c56:	f47f af48 	bne.w	81aea <_vfiprintf_r+0x8a6>
   81c5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81c5c:	464e      	mov	r6, r9
   81c5e:	e6c6      	b.n	819ee <_vfiprintf_r+0x7aa>
   81c60:	9d08      	ldr	r5, [sp, #32]
   81c62:	682c      	ldr	r4, [r5, #0]
   81c64:	3504      	adds	r5, #4
   81c66:	9508      	str	r5, [sp, #32]
   81c68:	2500      	movs	r5, #0
   81c6a:	f7ff bbfc 	b.w	81466 <_vfiprintf_r+0x222>
   81c6e:	9d08      	ldr	r5, [sp, #32]
   81c70:	2301      	movs	r3, #1
   81c72:	682c      	ldr	r4, [r5, #0]
   81c74:	3504      	adds	r5, #4
   81c76:	9508      	str	r5, [sp, #32]
   81c78:	2500      	movs	r5, #0
   81c7a:	f7ff bbf4 	b.w	81466 <_vfiprintf_r+0x222>
   81c7e:	9d08      	ldr	r5, [sp, #32]
   81c80:	682c      	ldr	r4, [r5, #0]
   81c82:	3504      	adds	r5, #4
   81c84:	9508      	str	r5, [sp, #32]
   81c86:	2500      	movs	r5, #0
   81c88:	e525      	b.n	816d6 <_vfiprintf_r+0x492>
   81c8a:	9d08      	ldr	r5, [sp, #32]
   81c8c:	682c      	ldr	r4, [r5, #0]
   81c8e:	3504      	adds	r5, #4
   81c90:	9508      	str	r5, [sp, #32]
   81c92:	17e5      	asrs	r5, r4, #31
   81c94:	4622      	mov	r2, r4
   81c96:	462b      	mov	r3, r5
   81c98:	e48e      	b.n	815b8 <_vfiprintf_r+0x374>
   81c9a:	9806      	ldr	r0, [sp, #24]
   81c9c:	9902      	ldr	r1, [sp, #8]
   81c9e:	aa13      	add	r2, sp, #76	; 0x4c
   81ca0:	f7ff fa94 	bl	811cc <__sprint_r.part.0>
   81ca4:	2800      	cmp	r0, #0
   81ca6:	f47f af20 	bne.w	81aea <_vfiprintf_r+0x8a6>
   81caa:	464e      	mov	r6, r9
   81cac:	f7ff bb9a 	b.w	813e4 <_vfiprintf_r+0x1a0>
   81cb0:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   81cb4:	9603      	str	r6, [sp, #12]
   81cb6:	465e      	mov	r6, fp
   81cb8:	46e3      	mov	fp, ip
   81cba:	4620      	mov	r0, r4
   81cbc:	4629      	mov	r1, r5
   81cbe:	220a      	movs	r2, #10
   81cc0:	2300      	movs	r3, #0
   81cc2:	f001 fe5f 	bl	83984 <__aeabi_uldivmod>
   81cc6:	3230      	adds	r2, #48	; 0x30
   81cc8:	7032      	strb	r2, [r6, #0]
   81cca:	4620      	mov	r0, r4
   81ccc:	4629      	mov	r1, r5
   81cce:	220a      	movs	r2, #10
   81cd0:	2300      	movs	r3, #0
   81cd2:	f001 fe57 	bl	83984 <__aeabi_uldivmod>
   81cd6:	4604      	mov	r4, r0
   81cd8:	460d      	mov	r5, r1
   81cda:	ea54 0005 	orrs.w	r0, r4, r5
   81cde:	4637      	mov	r7, r6
   81ce0:	f106 36ff 	add.w	r6, r6, #4294967295
   81ce4:	d1e9      	bne.n	81cba <_vfiprintf_r+0xa76>
   81ce6:	ebc7 0309 	rsb	r3, r7, r9
   81cea:	46dc      	mov	ip, fp
   81cec:	9e03      	ldr	r6, [sp, #12]
   81cee:	9305      	str	r3, [sp, #20]
   81cf0:	f7ff bbdc 	b.w	814ac <_vfiprintf_r+0x268>
   81cf4:	9806      	ldr	r0, [sp, #24]
   81cf6:	9902      	ldr	r1, [sp, #8]
   81cf8:	aa13      	add	r2, sp, #76	; 0x4c
   81cfa:	f8cd c004 	str.w	ip, [sp, #4]
   81cfe:	f7ff fa65 	bl	811cc <__sprint_r.part.0>
   81d02:	f8dd c004 	ldr.w	ip, [sp, #4]
   81d06:	2800      	cmp	r0, #0
   81d08:	f47f aeef 	bne.w	81aea <_vfiprintf_r+0x8a6>
   81d0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81d0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d10:	1c59      	adds	r1, r3, #1
   81d12:	464e      	mov	r6, r9
   81d14:	e615      	b.n	81942 <_vfiprintf_r+0x6fe>
   81d16:	9806      	ldr	r0, [sp, #24]
   81d18:	9902      	ldr	r1, [sp, #8]
   81d1a:	aa13      	add	r2, sp, #76	; 0x4c
   81d1c:	f8cd c004 	str.w	ip, [sp, #4]
   81d20:	f7ff fa54 	bl	811cc <__sprint_r.part.0>
   81d24:	f8dd c004 	ldr.w	ip, [sp, #4]
   81d28:	2800      	cmp	r0, #0
   81d2a:	f47f aede 	bne.w	81aea <_vfiprintf_r+0x8a6>
   81d2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81d30:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d32:	1c59      	adds	r1, r3, #1
   81d34:	464e      	mov	r6, r9
   81d36:	e613      	b.n	81960 <_vfiprintf_r+0x71c>
   81d38:	2a00      	cmp	r2, #0
   81d3a:	d156      	bne.n	81dea <_vfiprintf_r+0xba6>
   81d3c:	2101      	movs	r1, #1
   81d3e:	4613      	mov	r3, r2
   81d40:	464e      	mov	r6, r9
   81d42:	e611      	b.n	81968 <_vfiprintf_r+0x724>
   81d44:	9806      	ldr	r0, [sp, #24]
   81d46:	9902      	ldr	r1, [sp, #8]
   81d48:	aa13      	add	r2, sp, #76	; 0x4c
   81d4a:	f7ff fa3f 	bl	811cc <__sprint_r.part.0>
   81d4e:	2800      	cmp	r0, #0
   81d50:	f47f aecb 	bne.w	81aea <_vfiprintf_r+0x8a6>
   81d54:	9914      	ldr	r1, [sp, #80]	; 0x50
   81d56:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d58:	3101      	adds	r1, #1
   81d5a:	464e      	mov	r6, r9
   81d5c:	e639      	b.n	819d2 <_vfiprintf_r+0x78e>
   81d5e:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   81d62:	4264      	negs	r4, r4
   81d64:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   81d68:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81d6c:	f8cd b01c 	str.w	fp, [sp, #28]
   81d70:	f8cd c014 	str.w	ip, [sp, #20]
   81d74:	2301      	movs	r3, #1
   81d76:	f7ff bb7e 	b.w	81476 <_vfiprintf_r+0x232>
   81d7a:	f01a 0f10 	tst.w	sl, #16
   81d7e:	d11d      	bne.n	81dbc <_vfiprintf_r+0xb78>
   81d80:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81d84:	d058      	beq.n	81e38 <_vfiprintf_r+0xbf4>
   81d86:	9d08      	ldr	r5, [sp, #32]
   81d88:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   81d8c:	682b      	ldr	r3, [r5, #0]
   81d8e:	3504      	adds	r5, #4
   81d90:	9508      	str	r5, [sp, #32]
   81d92:	f8a3 b000 	strh.w	fp, [r3]
   81d96:	f7ff ba88 	b.w	812aa <_vfiprintf_r+0x66>
   81d9a:	9806      	ldr	r0, [sp, #24]
   81d9c:	9902      	ldr	r1, [sp, #8]
   81d9e:	aa13      	add	r2, sp, #76	; 0x4c
   81da0:	f8cd c004 	str.w	ip, [sp, #4]
   81da4:	f7ff fa12 	bl	811cc <__sprint_r.part.0>
   81da8:	f8dd c004 	ldr.w	ip, [sp, #4]
   81dac:	2800      	cmp	r0, #0
   81dae:	f47f ae9c 	bne.w	81aea <_vfiprintf_r+0x8a6>
   81db2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81db4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81db6:	1c59      	adds	r1, r3, #1
   81db8:	464e      	mov	r6, r9
   81dba:	e5b1      	b.n	81920 <_vfiprintf_r+0x6dc>
   81dbc:	f8dd b020 	ldr.w	fp, [sp, #32]
   81dc0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81dc2:	f8db 3000 	ldr.w	r3, [fp]
   81dc6:	f10b 0b04 	add.w	fp, fp, #4
   81dca:	f8cd b020 	str.w	fp, [sp, #32]
   81dce:	601c      	str	r4, [r3, #0]
   81dd0:	f7ff ba6b 	b.w	812aa <_vfiprintf_r+0x66>
   81dd4:	9408      	str	r4, [sp, #32]
   81dd6:	f001 fc0b 	bl	835f0 <strlen>
   81dda:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   81dde:	9005      	str	r0, [sp, #20]
   81de0:	9407      	str	r4, [sp, #28]
   81de2:	f04f 0c00 	mov.w	ip, #0
   81de6:	f7ff bb61 	b.w	814ac <_vfiprintf_r+0x268>
   81dea:	9806      	ldr	r0, [sp, #24]
   81dec:	9902      	ldr	r1, [sp, #8]
   81dee:	aa13      	add	r2, sp, #76	; 0x4c
   81df0:	f8cd c004 	str.w	ip, [sp, #4]
   81df4:	f7ff f9ea 	bl	811cc <__sprint_r.part.0>
   81df8:	f8dd c004 	ldr.w	ip, [sp, #4]
   81dfc:	2800      	cmp	r0, #0
   81dfe:	f47f ae74 	bne.w	81aea <_vfiprintf_r+0x8a6>
   81e02:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81e04:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e06:	1c59      	adds	r1, r3, #1
   81e08:	464e      	mov	r6, r9
   81e0a:	e5ad      	b.n	81968 <_vfiprintf_r+0x724>
   81e0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81e0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e10:	3301      	adds	r3, #1
   81e12:	4d02      	ldr	r5, [pc, #8]	; (81e1c <_vfiprintf_r+0xbd8>)
   81e14:	f7ff bb9a 	b.w	8154c <_vfiprintf_r+0x308>
   81e18:	00083ff4 	.word	0x00083ff4
   81e1c:	00084004 	.word	0x00084004
   81e20:	f1bc 0f06 	cmp.w	ip, #6
   81e24:	bf34      	ite	cc
   81e26:	4663      	movcc	r3, ip
   81e28:	2306      	movcs	r3, #6
   81e2a:	9408      	str	r4, [sp, #32]
   81e2c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   81e30:	9305      	str	r3, [sp, #20]
   81e32:	9403      	str	r4, [sp, #12]
   81e34:	4f16      	ldr	r7, [pc, #88]	; (81e90 <_vfiprintf_r+0xc4c>)
   81e36:	e472      	b.n	8171e <_vfiprintf_r+0x4da>
   81e38:	9c08      	ldr	r4, [sp, #32]
   81e3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   81e3c:	6823      	ldr	r3, [r4, #0]
   81e3e:	3404      	adds	r4, #4
   81e40:	9408      	str	r4, [sp, #32]
   81e42:	601d      	str	r5, [r3, #0]
   81e44:	f7ff ba31 	b.w	812aa <_vfiprintf_r+0x66>
   81e48:	9814      	ldr	r0, [sp, #80]	; 0x50
   81e4a:	4d12      	ldr	r5, [pc, #72]	; (81e94 <_vfiprintf_r+0xc50>)
   81e4c:	3001      	adds	r0, #1
   81e4e:	e5fc      	b.n	81a4a <_vfiprintf_r+0x806>
   81e50:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81e54:	f8cd c014 	str.w	ip, [sp, #20]
   81e58:	9507      	str	r5, [sp, #28]
   81e5a:	9408      	str	r4, [sp, #32]
   81e5c:	4684      	mov	ip, r0
   81e5e:	f7ff bb25 	b.w	814ac <_vfiprintf_r+0x268>
   81e62:	4608      	mov	r0, r1
   81e64:	e6b1      	b.n	81bca <_vfiprintf_r+0x986>
   81e66:	46a0      	mov	r8, r4
   81e68:	2500      	movs	r5, #0
   81e6a:	f7ff ba5a 	b.w	81322 <_vfiprintf_r+0xde>
   81e6e:	f8dd b020 	ldr.w	fp, [sp, #32]
   81e72:	f898 3001 	ldrb.w	r3, [r8, #1]
   81e76:	f8db 5000 	ldr.w	r5, [fp]
   81e7a:	f10b 0204 	add.w	r2, fp, #4
   81e7e:	2d00      	cmp	r5, #0
   81e80:	9208      	str	r2, [sp, #32]
   81e82:	46a0      	mov	r8, r4
   81e84:	f6bf aa4b 	bge.w	8131e <_vfiprintf_r+0xda>
   81e88:	f04f 35ff 	mov.w	r5, #4294967295
   81e8c:	f7ff ba47 	b.w	8131e <_vfiprintf_r+0xda>
   81e90:	00083fec 	.word	0x00083fec
   81e94:	00084004 	.word	0x00084004

00081e98 <__sbprintf>:
   81e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81e9c:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   81e9e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   81ea2:	4688      	mov	r8, r1
   81ea4:	9719      	str	r7, [sp, #100]	; 0x64
   81ea6:	f8d8 701c 	ldr.w	r7, [r8, #28]
   81eaa:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   81eae:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   81eb2:	9707      	str	r7, [sp, #28]
   81eb4:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   81eb8:	ac1a      	add	r4, sp, #104	; 0x68
   81eba:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81ebe:	f02a 0a02 	bic.w	sl, sl, #2
   81ec2:	2600      	movs	r6, #0
   81ec4:	4669      	mov	r1, sp
   81ec6:	9400      	str	r4, [sp, #0]
   81ec8:	9404      	str	r4, [sp, #16]
   81eca:	9502      	str	r5, [sp, #8]
   81ecc:	9505      	str	r5, [sp, #20]
   81ece:	f8ad a00c 	strh.w	sl, [sp, #12]
   81ed2:	f8ad 900e 	strh.w	r9, [sp, #14]
   81ed6:	9709      	str	r7, [sp, #36]	; 0x24
   81ed8:	9606      	str	r6, [sp, #24]
   81eda:	4605      	mov	r5, r0
   81edc:	f7ff f9b2 	bl	81244 <_vfiprintf_r>
   81ee0:	1e04      	subs	r4, r0, #0
   81ee2:	db07      	blt.n	81ef4 <__sbprintf+0x5c>
   81ee4:	4628      	mov	r0, r5
   81ee6:	4669      	mov	r1, sp
   81ee8:	f000 f92a 	bl	82140 <_fflush_r>
   81eec:	42b0      	cmp	r0, r6
   81eee:	bf18      	it	ne
   81ef0:	f04f 34ff 	movne.w	r4, #4294967295
   81ef4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81ef8:	065b      	lsls	r3, r3, #25
   81efa:	d505      	bpl.n	81f08 <__sbprintf+0x70>
   81efc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f04:	f8a8 300c 	strh.w	r3, [r8, #12]
   81f08:	4620      	mov	r0, r4
   81f0a:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   81f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81f12:	bf00      	nop

00081f14 <__swsetup_r>:
   81f14:	4b2f      	ldr	r3, [pc, #188]	; (81fd4 <__swsetup_r+0xc0>)
   81f16:	b570      	push	{r4, r5, r6, lr}
   81f18:	4606      	mov	r6, r0
   81f1a:	6818      	ldr	r0, [r3, #0]
   81f1c:	460c      	mov	r4, r1
   81f1e:	b110      	cbz	r0, 81f26 <__swsetup_r+0x12>
   81f20:	6b82      	ldr	r2, [r0, #56]	; 0x38
   81f22:	2a00      	cmp	r2, #0
   81f24:	d036      	beq.n	81f94 <__swsetup_r+0x80>
   81f26:	89a5      	ldrh	r5, [r4, #12]
   81f28:	b2ab      	uxth	r3, r5
   81f2a:	0719      	lsls	r1, r3, #28
   81f2c:	d50c      	bpl.n	81f48 <__swsetup_r+0x34>
   81f2e:	6922      	ldr	r2, [r4, #16]
   81f30:	b1aa      	cbz	r2, 81f5e <__swsetup_r+0x4a>
   81f32:	f013 0101 	ands.w	r1, r3, #1
   81f36:	d01e      	beq.n	81f76 <__swsetup_r+0x62>
   81f38:	6963      	ldr	r3, [r4, #20]
   81f3a:	2100      	movs	r1, #0
   81f3c:	425b      	negs	r3, r3
   81f3e:	61a3      	str	r3, [r4, #24]
   81f40:	60a1      	str	r1, [r4, #8]
   81f42:	b1f2      	cbz	r2, 81f82 <__swsetup_r+0x6e>
   81f44:	2000      	movs	r0, #0
   81f46:	bd70      	pop	{r4, r5, r6, pc}
   81f48:	06da      	lsls	r2, r3, #27
   81f4a:	d53a      	bpl.n	81fc2 <__swsetup_r+0xae>
   81f4c:	075b      	lsls	r3, r3, #29
   81f4e:	d424      	bmi.n	81f9a <__swsetup_r+0x86>
   81f50:	6922      	ldr	r2, [r4, #16]
   81f52:	f045 0308 	orr.w	r3, r5, #8
   81f56:	81a3      	strh	r3, [r4, #12]
   81f58:	b29b      	uxth	r3, r3
   81f5a:	2a00      	cmp	r2, #0
   81f5c:	d1e9      	bne.n	81f32 <__swsetup_r+0x1e>
   81f5e:	f403 7120 	and.w	r1, r3, #640	; 0x280
   81f62:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   81f66:	d0e4      	beq.n	81f32 <__swsetup_r+0x1e>
   81f68:	4630      	mov	r0, r6
   81f6a:	4621      	mov	r1, r4
   81f6c:	f000 fcce 	bl	8290c <__smakebuf_r>
   81f70:	89a3      	ldrh	r3, [r4, #12]
   81f72:	6922      	ldr	r2, [r4, #16]
   81f74:	e7dd      	b.n	81f32 <__swsetup_r+0x1e>
   81f76:	0798      	lsls	r0, r3, #30
   81f78:	bf58      	it	pl
   81f7a:	6961      	ldrpl	r1, [r4, #20]
   81f7c:	60a1      	str	r1, [r4, #8]
   81f7e:	2a00      	cmp	r2, #0
   81f80:	d1e0      	bne.n	81f44 <__swsetup_r+0x30>
   81f82:	89a3      	ldrh	r3, [r4, #12]
   81f84:	061a      	lsls	r2, r3, #24
   81f86:	d5dd      	bpl.n	81f44 <__swsetup_r+0x30>
   81f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f8c:	81a3      	strh	r3, [r4, #12]
   81f8e:	f04f 30ff 	mov.w	r0, #4294967295
   81f92:	bd70      	pop	{r4, r5, r6, pc}
   81f94:	f000 f8f0 	bl	82178 <__sinit>
   81f98:	e7c5      	b.n	81f26 <__swsetup_r+0x12>
   81f9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81f9c:	b149      	cbz	r1, 81fb2 <__swsetup_r+0x9e>
   81f9e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81fa2:	4299      	cmp	r1, r3
   81fa4:	d003      	beq.n	81fae <__swsetup_r+0x9a>
   81fa6:	4630      	mov	r0, r6
   81fa8:	f000 fa2a 	bl	82400 <_free_r>
   81fac:	89a5      	ldrh	r5, [r4, #12]
   81fae:	2300      	movs	r3, #0
   81fb0:	6323      	str	r3, [r4, #48]	; 0x30
   81fb2:	6922      	ldr	r2, [r4, #16]
   81fb4:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   81fb8:	2100      	movs	r1, #0
   81fba:	b2ad      	uxth	r5, r5
   81fbc:	6022      	str	r2, [r4, #0]
   81fbe:	6061      	str	r1, [r4, #4]
   81fc0:	e7c7      	b.n	81f52 <__swsetup_r+0x3e>
   81fc2:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   81fc6:	2309      	movs	r3, #9
   81fc8:	6033      	str	r3, [r6, #0]
   81fca:	f04f 30ff 	mov.w	r0, #4294967295
   81fce:	81a5      	strh	r5, [r4, #12]
   81fd0:	bd70      	pop	{r4, r5, r6, pc}
   81fd2:	bf00      	nop
   81fd4:	20070560 	.word	0x20070560

00081fd8 <register_fini>:
   81fd8:	4b02      	ldr	r3, [pc, #8]	; (81fe4 <register_fini+0xc>)
   81fda:	b113      	cbz	r3, 81fe2 <register_fini+0xa>
   81fdc:	4802      	ldr	r0, [pc, #8]	; (81fe8 <register_fini+0x10>)
   81fde:	f000 b805 	b.w	81fec <atexit>
   81fe2:	4770      	bx	lr
   81fe4:	00000000 	.word	0x00000000
   81fe8:	00082275 	.word	0x00082275

00081fec <atexit>:
   81fec:	4601      	mov	r1, r0
   81fee:	2000      	movs	r0, #0
   81ff0:	4602      	mov	r2, r0
   81ff2:	4603      	mov	r3, r0
   81ff4:	f001 bbca 	b.w	8378c <__register_exitproc>

00081ff8 <__sflush_r>:
   81ff8:	898b      	ldrh	r3, [r1, #12]
   81ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81ffe:	b29a      	uxth	r2, r3
   82000:	460d      	mov	r5, r1
   82002:	0711      	lsls	r1, r2, #28
   82004:	4680      	mov	r8, r0
   82006:	d43c      	bmi.n	82082 <__sflush_r+0x8a>
   82008:	686a      	ldr	r2, [r5, #4]
   8200a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8200e:	2a00      	cmp	r2, #0
   82010:	81ab      	strh	r3, [r5, #12]
   82012:	dd59      	ble.n	820c8 <__sflush_r+0xd0>
   82014:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82016:	2c00      	cmp	r4, #0
   82018:	d04b      	beq.n	820b2 <__sflush_r+0xba>
   8201a:	b29b      	uxth	r3, r3
   8201c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   82020:	2100      	movs	r1, #0
   82022:	b292      	uxth	r2, r2
   82024:	f8d8 6000 	ldr.w	r6, [r8]
   82028:	f8c8 1000 	str.w	r1, [r8]
   8202c:	2a00      	cmp	r2, #0
   8202e:	d04f      	beq.n	820d0 <__sflush_r+0xd8>
   82030:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82032:	075f      	lsls	r7, r3, #29
   82034:	d505      	bpl.n	82042 <__sflush_r+0x4a>
   82036:	6869      	ldr	r1, [r5, #4]
   82038:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8203a:	1a52      	subs	r2, r2, r1
   8203c:	b10b      	cbz	r3, 82042 <__sflush_r+0x4a>
   8203e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82040:	1ad2      	subs	r2, r2, r3
   82042:	4640      	mov	r0, r8
   82044:	69e9      	ldr	r1, [r5, #28]
   82046:	2300      	movs	r3, #0
   82048:	47a0      	blx	r4
   8204a:	1c44      	adds	r4, r0, #1
   8204c:	d04a      	beq.n	820e4 <__sflush_r+0xec>
   8204e:	89ab      	ldrh	r3, [r5, #12]
   82050:	692a      	ldr	r2, [r5, #16]
   82052:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82056:	b29b      	uxth	r3, r3
   82058:	2100      	movs	r1, #0
   8205a:	602a      	str	r2, [r5, #0]
   8205c:	04da      	lsls	r2, r3, #19
   8205e:	81ab      	strh	r3, [r5, #12]
   82060:	6069      	str	r1, [r5, #4]
   82062:	d44c      	bmi.n	820fe <__sflush_r+0x106>
   82064:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82066:	f8c8 6000 	str.w	r6, [r8]
   8206a:	b311      	cbz	r1, 820b2 <__sflush_r+0xba>
   8206c:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82070:	4299      	cmp	r1, r3
   82072:	d002      	beq.n	8207a <__sflush_r+0x82>
   82074:	4640      	mov	r0, r8
   82076:	f000 f9c3 	bl	82400 <_free_r>
   8207a:	2000      	movs	r0, #0
   8207c:	6328      	str	r0, [r5, #48]	; 0x30
   8207e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82082:	692e      	ldr	r6, [r5, #16]
   82084:	b1ae      	cbz	r6, 820b2 <__sflush_r+0xba>
   82086:	0791      	lsls	r1, r2, #30
   82088:	682c      	ldr	r4, [r5, #0]
   8208a:	bf0c      	ite	eq
   8208c:	696b      	ldreq	r3, [r5, #20]
   8208e:	2300      	movne	r3, #0
   82090:	602e      	str	r6, [r5, #0]
   82092:	1ba4      	subs	r4, r4, r6
   82094:	60ab      	str	r3, [r5, #8]
   82096:	e00a      	b.n	820ae <__sflush_r+0xb6>
   82098:	4632      	mov	r2, r6
   8209a:	4623      	mov	r3, r4
   8209c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8209e:	4640      	mov	r0, r8
   820a0:	69e9      	ldr	r1, [r5, #28]
   820a2:	47b8      	blx	r7
   820a4:	2800      	cmp	r0, #0
   820a6:	ebc0 0404 	rsb	r4, r0, r4
   820aa:	4406      	add	r6, r0
   820ac:	dd04      	ble.n	820b8 <__sflush_r+0xc0>
   820ae:	2c00      	cmp	r4, #0
   820b0:	dcf2      	bgt.n	82098 <__sflush_r+0xa0>
   820b2:	2000      	movs	r0, #0
   820b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820b8:	89ab      	ldrh	r3, [r5, #12]
   820ba:	f04f 30ff 	mov.w	r0, #4294967295
   820be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   820c2:	81ab      	strh	r3, [r5, #12]
   820c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820c8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   820ca:	2a00      	cmp	r2, #0
   820cc:	dca2      	bgt.n	82014 <__sflush_r+0x1c>
   820ce:	e7f0      	b.n	820b2 <__sflush_r+0xba>
   820d0:	2301      	movs	r3, #1
   820d2:	4640      	mov	r0, r8
   820d4:	69e9      	ldr	r1, [r5, #28]
   820d6:	47a0      	blx	r4
   820d8:	1c43      	adds	r3, r0, #1
   820da:	4602      	mov	r2, r0
   820dc:	d01e      	beq.n	8211c <__sflush_r+0x124>
   820de:	89ab      	ldrh	r3, [r5, #12]
   820e0:	6aac      	ldr	r4, [r5, #40]	; 0x28
   820e2:	e7a6      	b.n	82032 <__sflush_r+0x3a>
   820e4:	f8d8 3000 	ldr.w	r3, [r8]
   820e8:	b95b      	cbnz	r3, 82102 <__sflush_r+0x10a>
   820ea:	89aa      	ldrh	r2, [r5, #12]
   820ec:	6929      	ldr	r1, [r5, #16]
   820ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   820f2:	b292      	uxth	r2, r2
   820f4:	606b      	str	r3, [r5, #4]
   820f6:	04d3      	lsls	r3, r2, #19
   820f8:	81aa      	strh	r2, [r5, #12]
   820fa:	6029      	str	r1, [r5, #0]
   820fc:	d5b2      	bpl.n	82064 <__sflush_r+0x6c>
   820fe:	6528      	str	r0, [r5, #80]	; 0x50
   82100:	e7b0      	b.n	82064 <__sflush_r+0x6c>
   82102:	2b1d      	cmp	r3, #29
   82104:	d001      	beq.n	8210a <__sflush_r+0x112>
   82106:	2b16      	cmp	r3, #22
   82108:	d113      	bne.n	82132 <__sflush_r+0x13a>
   8210a:	89a9      	ldrh	r1, [r5, #12]
   8210c:	692b      	ldr	r3, [r5, #16]
   8210e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   82112:	2200      	movs	r2, #0
   82114:	81a9      	strh	r1, [r5, #12]
   82116:	602b      	str	r3, [r5, #0]
   82118:	606a      	str	r2, [r5, #4]
   8211a:	e7a3      	b.n	82064 <__sflush_r+0x6c>
   8211c:	f8d8 3000 	ldr.w	r3, [r8]
   82120:	2b00      	cmp	r3, #0
   82122:	d0dc      	beq.n	820de <__sflush_r+0xe6>
   82124:	2b1d      	cmp	r3, #29
   82126:	d001      	beq.n	8212c <__sflush_r+0x134>
   82128:	2b16      	cmp	r3, #22
   8212a:	d1c5      	bne.n	820b8 <__sflush_r+0xc0>
   8212c:	f8c8 6000 	str.w	r6, [r8]
   82130:	e7bf      	b.n	820b2 <__sflush_r+0xba>
   82132:	89ab      	ldrh	r3, [r5, #12]
   82134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82138:	81ab      	strh	r3, [r5, #12]
   8213a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8213e:	bf00      	nop

00082140 <_fflush_r>:
   82140:	b510      	push	{r4, lr}
   82142:	4604      	mov	r4, r0
   82144:	b082      	sub	sp, #8
   82146:	b108      	cbz	r0, 8214c <_fflush_r+0xc>
   82148:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8214a:	b153      	cbz	r3, 82162 <_fflush_r+0x22>
   8214c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82150:	b908      	cbnz	r0, 82156 <_fflush_r+0x16>
   82152:	b002      	add	sp, #8
   82154:	bd10      	pop	{r4, pc}
   82156:	4620      	mov	r0, r4
   82158:	b002      	add	sp, #8
   8215a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8215e:	f7ff bf4b 	b.w	81ff8 <__sflush_r>
   82162:	9101      	str	r1, [sp, #4]
   82164:	f000 f808 	bl	82178 <__sinit>
   82168:	9901      	ldr	r1, [sp, #4]
   8216a:	e7ef      	b.n	8214c <_fflush_r+0xc>

0008216c <_cleanup_r>:
   8216c:	4901      	ldr	r1, [pc, #4]	; (82174 <_cleanup_r+0x8>)
   8216e:	f000 bb9f 	b.w	828b0 <_fwalk>
   82172:	bf00      	nop
   82174:	000838d9 	.word	0x000838d9

00082178 <__sinit>:
   82178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8217c:	6b84      	ldr	r4, [r0, #56]	; 0x38
   8217e:	b083      	sub	sp, #12
   82180:	4607      	mov	r7, r0
   82182:	2c00      	cmp	r4, #0
   82184:	d165      	bne.n	82252 <__sinit+0xda>
   82186:	687d      	ldr	r5, [r7, #4]
   82188:	4833      	ldr	r0, [pc, #204]	; (82258 <__sinit+0xe0>)
   8218a:	2304      	movs	r3, #4
   8218c:	2103      	movs	r1, #3
   8218e:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82192:	63f8      	str	r0, [r7, #60]	; 0x3c
   82194:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82198:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   8219c:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   821a0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   821a4:	81ab      	strh	r3, [r5, #12]
   821a6:	602c      	str	r4, [r5, #0]
   821a8:	606c      	str	r4, [r5, #4]
   821aa:	60ac      	str	r4, [r5, #8]
   821ac:	666c      	str	r4, [r5, #100]	; 0x64
   821ae:	81ec      	strh	r4, [r5, #14]
   821b0:	612c      	str	r4, [r5, #16]
   821b2:	616c      	str	r4, [r5, #20]
   821b4:	61ac      	str	r4, [r5, #24]
   821b6:	4621      	mov	r1, r4
   821b8:	2208      	movs	r2, #8
   821ba:	f7fe ff35 	bl	81028 <memset>
   821be:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8225c <__sinit+0xe4>
   821c2:	68be      	ldr	r6, [r7, #8]
   821c4:	f8df a098 	ldr.w	sl, [pc, #152]	; 82260 <__sinit+0xe8>
   821c8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82264 <__sinit+0xec>
   821cc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82268 <__sinit+0xf0>
   821d0:	2301      	movs	r3, #1
   821d2:	2209      	movs	r2, #9
   821d4:	61ed      	str	r5, [r5, #28]
   821d6:	f8c5 b020 	str.w	fp, [r5, #32]
   821da:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   821de:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   821e2:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   821e6:	4621      	mov	r1, r4
   821e8:	81f3      	strh	r3, [r6, #14]
   821ea:	81b2      	strh	r2, [r6, #12]
   821ec:	6034      	str	r4, [r6, #0]
   821ee:	6074      	str	r4, [r6, #4]
   821f0:	60b4      	str	r4, [r6, #8]
   821f2:	6674      	str	r4, [r6, #100]	; 0x64
   821f4:	6134      	str	r4, [r6, #16]
   821f6:	6174      	str	r4, [r6, #20]
   821f8:	61b4      	str	r4, [r6, #24]
   821fa:	2208      	movs	r2, #8
   821fc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82200:	9301      	str	r3, [sp, #4]
   82202:	f7fe ff11 	bl	81028 <memset>
   82206:	68fd      	ldr	r5, [r7, #12]
   82208:	2012      	movs	r0, #18
   8220a:	2202      	movs	r2, #2
   8220c:	61f6      	str	r6, [r6, #28]
   8220e:	f8c6 b020 	str.w	fp, [r6, #32]
   82212:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   82216:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   8221a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   8221e:	4621      	mov	r1, r4
   82220:	81a8      	strh	r0, [r5, #12]
   82222:	81ea      	strh	r2, [r5, #14]
   82224:	602c      	str	r4, [r5, #0]
   82226:	606c      	str	r4, [r5, #4]
   82228:	60ac      	str	r4, [r5, #8]
   8222a:	666c      	str	r4, [r5, #100]	; 0x64
   8222c:	612c      	str	r4, [r5, #16]
   8222e:	616c      	str	r4, [r5, #20]
   82230:	61ac      	str	r4, [r5, #24]
   82232:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82236:	2208      	movs	r2, #8
   82238:	f7fe fef6 	bl	81028 <memset>
   8223c:	9b01      	ldr	r3, [sp, #4]
   8223e:	61ed      	str	r5, [r5, #28]
   82240:	f8c5 b020 	str.w	fp, [r5, #32]
   82244:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82248:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8224c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82250:	63bb      	str	r3, [r7, #56]	; 0x38
   82252:	b003      	add	sp, #12
   82254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82258:	0008216d 	.word	0x0008216d
   8225c:	0008356d 	.word	0x0008356d
   82260:	00083591 	.word	0x00083591
   82264:	000835c9 	.word	0x000835c9
   82268:	000835e9 	.word	0x000835e9

0008226c <__sfp_lock_acquire>:
   8226c:	4770      	bx	lr
   8226e:	bf00      	nop

00082270 <__sfp_lock_release>:
   82270:	4770      	bx	lr
   82272:	bf00      	nop

00082274 <__libc_fini_array>:
   82274:	b538      	push	{r3, r4, r5, lr}
   82276:	4d09      	ldr	r5, [pc, #36]	; (8229c <__libc_fini_array+0x28>)
   82278:	4c09      	ldr	r4, [pc, #36]	; (822a0 <__libc_fini_array+0x2c>)
   8227a:	1b64      	subs	r4, r4, r5
   8227c:	10a4      	asrs	r4, r4, #2
   8227e:	bf18      	it	ne
   82280:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82284:	d005      	beq.n	82292 <__libc_fini_array+0x1e>
   82286:	3c01      	subs	r4, #1
   82288:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8228c:	4798      	blx	r3
   8228e:	2c00      	cmp	r4, #0
   82290:	d1f9      	bne.n	82286 <__libc_fini_array+0x12>
   82292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82296:	f001 bec7 	b.w	84028 <_fini>
   8229a:	bf00      	nop
   8229c:	00084034 	.word	0x00084034
   822a0:	00084038 	.word	0x00084038

000822a4 <_fputwc_r>:
   822a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   822a8:	8993      	ldrh	r3, [r2, #12]
   822aa:	460f      	mov	r7, r1
   822ac:	0499      	lsls	r1, r3, #18
   822ae:	b082      	sub	sp, #8
   822b0:	4614      	mov	r4, r2
   822b2:	4680      	mov	r8, r0
   822b4:	d406      	bmi.n	822c4 <_fputwc_r+0x20>
   822b6:	6e52      	ldr	r2, [r2, #100]	; 0x64
   822b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   822bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   822c0:	81a3      	strh	r3, [r4, #12]
   822c2:	6662      	str	r2, [r4, #100]	; 0x64
   822c4:	f000 fb1c 	bl	82900 <__locale_mb_cur_max>
   822c8:	2801      	cmp	r0, #1
   822ca:	d03e      	beq.n	8234a <_fputwc_r+0xa6>
   822cc:	463a      	mov	r2, r7
   822ce:	4640      	mov	r0, r8
   822d0:	a901      	add	r1, sp, #4
   822d2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   822d6:	f001 fa0f 	bl	836f8 <_wcrtomb_r>
   822da:	1c42      	adds	r2, r0, #1
   822dc:	4606      	mov	r6, r0
   822de:	d02d      	beq.n	8233c <_fputwc_r+0x98>
   822e0:	2800      	cmp	r0, #0
   822e2:	d03a      	beq.n	8235a <_fputwc_r+0xb6>
   822e4:	f89d 1004 	ldrb.w	r1, [sp, #4]
   822e8:	2500      	movs	r5, #0
   822ea:	e009      	b.n	82300 <_fputwc_r+0x5c>
   822ec:	6823      	ldr	r3, [r4, #0]
   822ee:	7019      	strb	r1, [r3, #0]
   822f0:	6823      	ldr	r3, [r4, #0]
   822f2:	3301      	adds	r3, #1
   822f4:	6023      	str	r3, [r4, #0]
   822f6:	3501      	adds	r5, #1
   822f8:	42b5      	cmp	r5, r6
   822fa:	d22e      	bcs.n	8235a <_fputwc_r+0xb6>
   822fc:	ab01      	add	r3, sp, #4
   822fe:	5ce9      	ldrb	r1, [r5, r3]
   82300:	68a3      	ldr	r3, [r4, #8]
   82302:	3b01      	subs	r3, #1
   82304:	2b00      	cmp	r3, #0
   82306:	60a3      	str	r3, [r4, #8]
   82308:	daf0      	bge.n	822ec <_fputwc_r+0x48>
   8230a:	69a2      	ldr	r2, [r4, #24]
   8230c:	4293      	cmp	r3, r2
   8230e:	db06      	blt.n	8231e <_fputwc_r+0x7a>
   82310:	6823      	ldr	r3, [r4, #0]
   82312:	7019      	strb	r1, [r3, #0]
   82314:	6823      	ldr	r3, [r4, #0]
   82316:	7819      	ldrb	r1, [r3, #0]
   82318:	3301      	adds	r3, #1
   8231a:	290a      	cmp	r1, #10
   8231c:	d1ea      	bne.n	822f4 <_fputwc_r+0x50>
   8231e:	4640      	mov	r0, r8
   82320:	4622      	mov	r2, r4
   82322:	f001 f995 	bl	83650 <__swbuf_r>
   82326:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   8232a:	4258      	negs	r0, r3
   8232c:	4158      	adcs	r0, r3
   8232e:	2800      	cmp	r0, #0
   82330:	d0e1      	beq.n	822f6 <_fputwc_r+0x52>
   82332:	f04f 30ff 	mov.w	r0, #4294967295
   82336:	b002      	add	sp, #8
   82338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8233c:	89a3      	ldrh	r3, [r4, #12]
   8233e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82342:	81a3      	strh	r3, [r4, #12]
   82344:	b002      	add	sp, #8
   82346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8234a:	1e7b      	subs	r3, r7, #1
   8234c:	2bfe      	cmp	r3, #254	; 0xfe
   8234e:	d8bd      	bhi.n	822cc <_fputwc_r+0x28>
   82350:	b2f9      	uxtb	r1, r7
   82352:	4606      	mov	r6, r0
   82354:	f88d 1004 	strb.w	r1, [sp, #4]
   82358:	e7c6      	b.n	822e8 <_fputwc_r+0x44>
   8235a:	4638      	mov	r0, r7
   8235c:	b002      	add	sp, #8
   8235e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82362:	bf00      	nop

00082364 <_malloc_trim_r>:
   82364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82366:	4d23      	ldr	r5, [pc, #140]	; (823f4 <_malloc_trim_r+0x90>)
   82368:	460f      	mov	r7, r1
   8236a:	4604      	mov	r4, r0
   8236c:	f000 ff08 	bl	83180 <__malloc_lock>
   82370:	68ab      	ldr	r3, [r5, #8]
   82372:	685e      	ldr	r6, [r3, #4]
   82374:	f026 0603 	bic.w	r6, r6, #3
   82378:	1bf1      	subs	r1, r6, r7
   8237a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   8237e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82382:	f021 010f 	bic.w	r1, r1, #15
   82386:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   8238a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   8238e:	db07      	blt.n	823a0 <_malloc_trim_r+0x3c>
   82390:	4620      	mov	r0, r4
   82392:	2100      	movs	r1, #0
   82394:	f001 f8d8 	bl	83548 <_sbrk_r>
   82398:	68ab      	ldr	r3, [r5, #8]
   8239a:	4433      	add	r3, r6
   8239c:	4298      	cmp	r0, r3
   8239e:	d004      	beq.n	823aa <_malloc_trim_r+0x46>
   823a0:	4620      	mov	r0, r4
   823a2:	f000 feef 	bl	83184 <__malloc_unlock>
   823a6:	2000      	movs	r0, #0
   823a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   823aa:	4620      	mov	r0, r4
   823ac:	4279      	negs	r1, r7
   823ae:	f001 f8cb 	bl	83548 <_sbrk_r>
   823b2:	3001      	adds	r0, #1
   823b4:	d00d      	beq.n	823d2 <_malloc_trim_r+0x6e>
   823b6:	4b10      	ldr	r3, [pc, #64]	; (823f8 <_malloc_trim_r+0x94>)
   823b8:	68aa      	ldr	r2, [r5, #8]
   823ba:	6819      	ldr	r1, [r3, #0]
   823bc:	1bf6      	subs	r6, r6, r7
   823be:	f046 0601 	orr.w	r6, r6, #1
   823c2:	4620      	mov	r0, r4
   823c4:	1bc9      	subs	r1, r1, r7
   823c6:	6056      	str	r6, [r2, #4]
   823c8:	6019      	str	r1, [r3, #0]
   823ca:	f000 fedb 	bl	83184 <__malloc_unlock>
   823ce:	2001      	movs	r0, #1
   823d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   823d2:	4620      	mov	r0, r4
   823d4:	2100      	movs	r1, #0
   823d6:	f001 f8b7 	bl	83548 <_sbrk_r>
   823da:	68ab      	ldr	r3, [r5, #8]
   823dc:	1ac2      	subs	r2, r0, r3
   823de:	2a0f      	cmp	r2, #15
   823e0:	ddde      	ble.n	823a0 <_malloc_trim_r+0x3c>
   823e2:	4d06      	ldr	r5, [pc, #24]	; (823fc <_malloc_trim_r+0x98>)
   823e4:	4904      	ldr	r1, [pc, #16]	; (823f8 <_malloc_trim_r+0x94>)
   823e6:	682d      	ldr	r5, [r5, #0]
   823e8:	f042 0201 	orr.w	r2, r2, #1
   823ec:	1b40      	subs	r0, r0, r5
   823ee:	605a      	str	r2, [r3, #4]
   823f0:	6008      	str	r0, [r1, #0]
   823f2:	e7d5      	b.n	823a0 <_malloc_trim_r+0x3c>
   823f4:	20070588 	.word	0x20070588
   823f8:	20070ad8 	.word	0x20070ad8
   823fc:	20070994 	.word	0x20070994

00082400 <_free_r>:
   82400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82404:	460d      	mov	r5, r1
   82406:	4606      	mov	r6, r0
   82408:	2900      	cmp	r1, #0
   8240a:	d055      	beq.n	824b8 <_free_r+0xb8>
   8240c:	f000 feb8 	bl	83180 <__malloc_lock>
   82410:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82414:	f8df c170 	ldr.w	ip, [pc, #368]	; 82588 <_free_r+0x188>
   82418:	f1a5 0408 	sub.w	r4, r5, #8
   8241c:	f021 0301 	bic.w	r3, r1, #1
   82420:	18e2      	adds	r2, r4, r3
   82422:	f8dc 0008 	ldr.w	r0, [ip, #8]
   82426:	6857      	ldr	r7, [r2, #4]
   82428:	4290      	cmp	r0, r2
   8242a:	f027 0703 	bic.w	r7, r7, #3
   8242e:	d068      	beq.n	82502 <_free_r+0x102>
   82430:	f011 0101 	ands.w	r1, r1, #1
   82434:	6057      	str	r7, [r2, #4]
   82436:	d032      	beq.n	8249e <_free_r+0x9e>
   82438:	2100      	movs	r1, #0
   8243a:	19d0      	adds	r0, r2, r7
   8243c:	6840      	ldr	r0, [r0, #4]
   8243e:	07c0      	lsls	r0, r0, #31
   82440:	d406      	bmi.n	82450 <_free_r+0x50>
   82442:	443b      	add	r3, r7
   82444:	6890      	ldr	r0, [r2, #8]
   82446:	2900      	cmp	r1, #0
   82448:	d04d      	beq.n	824e6 <_free_r+0xe6>
   8244a:	68d2      	ldr	r2, [r2, #12]
   8244c:	60c2      	str	r2, [r0, #12]
   8244e:	6090      	str	r0, [r2, #8]
   82450:	f043 0201 	orr.w	r2, r3, #1
   82454:	6062      	str	r2, [r4, #4]
   82456:	50e3      	str	r3, [r4, r3]
   82458:	b9e1      	cbnz	r1, 82494 <_free_r+0x94>
   8245a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8245e:	d32d      	bcc.n	824bc <_free_r+0xbc>
   82460:	0a5a      	lsrs	r2, r3, #9
   82462:	2a04      	cmp	r2, #4
   82464:	d869      	bhi.n	8253a <_free_r+0x13a>
   82466:	0998      	lsrs	r0, r3, #6
   82468:	3038      	adds	r0, #56	; 0x38
   8246a:	0041      	lsls	r1, r0, #1
   8246c:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82470:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82474:	4944      	ldr	r1, [pc, #272]	; (82588 <_free_r+0x188>)
   82476:	4562      	cmp	r2, ip
   82478:	d065      	beq.n	82546 <_free_r+0x146>
   8247a:	6851      	ldr	r1, [r2, #4]
   8247c:	f021 0103 	bic.w	r1, r1, #3
   82480:	428b      	cmp	r3, r1
   82482:	d202      	bcs.n	8248a <_free_r+0x8a>
   82484:	6892      	ldr	r2, [r2, #8]
   82486:	4594      	cmp	ip, r2
   82488:	d1f7      	bne.n	8247a <_free_r+0x7a>
   8248a:	68d3      	ldr	r3, [r2, #12]
   8248c:	60e3      	str	r3, [r4, #12]
   8248e:	60a2      	str	r2, [r4, #8]
   82490:	609c      	str	r4, [r3, #8]
   82492:	60d4      	str	r4, [r2, #12]
   82494:	4630      	mov	r0, r6
   82496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8249a:	f000 be73 	b.w	83184 <__malloc_unlock>
   8249e:	f855 5c08 	ldr.w	r5, [r5, #-8]
   824a2:	f10c 0808 	add.w	r8, ip, #8
   824a6:	1b64      	subs	r4, r4, r5
   824a8:	68a0      	ldr	r0, [r4, #8]
   824aa:	442b      	add	r3, r5
   824ac:	4540      	cmp	r0, r8
   824ae:	d042      	beq.n	82536 <_free_r+0x136>
   824b0:	68e5      	ldr	r5, [r4, #12]
   824b2:	60c5      	str	r5, [r0, #12]
   824b4:	60a8      	str	r0, [r5, #8]
   824b6:	e7c0      	b.n	8243a <_free_r+0x3a>
   824b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   824bc:	08db      	lsrs	r3, r3, #3
   824be:	109a      	asrs	r2, r3, #2
   824c0:	2001      	movs	r0, #1
   824c2:	4090      	lsls	r0, r2
   824c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
   824c8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   824cc:	689a      	ldr	r2, [r3, #8]
   824ce:	4301      	orrs	r1, r0
   824d0:	60a2      	str	r2, [r4, #8]
   824d2:	60e3      	str	r3, [r4, #12]
   824d4:	f8cc 1004 	str.w	r1, [ip, #4]
   824d8:	4630      	mov	r0, r6
   824da:	609c      	str	r4, [r3, #8]
   824dc:	60d4      	str	r4, [r2, #12]
   824de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   824e2:	f000 be4f 	b.w	83184 <__malloc_unlock>
   824e6:	4d29      	ldr	r5, [pc, #164]	; (8258c <_free_r+0x18c>)
   824e8:	42a8      	cmp	r0, r5
   824ea:	d1ae      	bne.n	8244a <_free_r+0x4a>
   824ec:	f043 0201 	orr.w	r2, r3, #1
   824f0:	f8cc 4014 	str.w	r4, [ip, #20]
   824f4:	f8cc 4010 	str.w	r4, [ip, #16]
   824f8:	60e0      	str	r0, [r4, #12]
   824fa:	60a0      	str	r0, [r4, #8]
   824fc:	6062      	str	r2, [r4, #4]
   824fe:	50e3      	str	r3, [r4, r3]
   82500:	e7c8      	b.n	82494 <_free_r+0x94>
   82502:	441f      	add	r7, r3
   82504:	07cb      	lsls	r3, r1, #31
   82506:	d407      	bmi.n	82518 <_free_r+0x118>
   82508:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8250c:	1a64      	subs	r4, r4, r1
   8250e:	68e3      	ldr	r3, [r4, #12]
   82510:	68a2      	ldr	r2, [r4, #8]
   82512:	440f      	add	r7, r1
   82514:	60d3      	str	r3, [r2, #12]
   82516:	609a      	str	r2, [r3, #8]
   82518:	4b1d      	ldr	r3, [pc, #116]	; (82590 <_free_r+0x190>)
   8251a:	f047 0201 	orr.w	r2, r7, #1
   8251e:	681b      	ldr	r3, [r3, #0]
   82520:	6062      	str	r2, [r4, #4]
   82522:	429f      	cmp	r7, r3
   82524:	f8cc 4008 	str.w	r4, [ip, #8]
   82528:	d3b4      	bcc.n	82494 <_free_r+0x94>
   8252a:	4b1a      	ldr	r3, [pc, #104]	; (82594 <_free_r+0x194>)
   8252c:	4630      	mov	r0, r6
   8252e:	6819      	ldr	r1, [r3, #0]
   82530:	f7ff ff18 	bl	82364 <_malloc_trim_r>
   82534:	e7ae      	b.n	82494 <_free_r+0x94>
   82536:	2101      	movs	r1, #1
   82538:	e77f      	b.n	8243a <_free_r+0x3a>
   8253a:	2a14      	cmp	r2, #20
   8253c:	d80b      	bhi.n	82556 <_free_r+0x156>
   8253e:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   82542:	0041      	lsls	r1, r0, #1
   82544:	e792      	b.n	8246c <_free_r+0x6c>
   82546:	1080      	asrs	r0, r0, #2
   82548:	2501      	movs	r5, #1
   8254a:	4085      	lsls	r5, r0
   8254c:	6848      	ldr	r0, [r1, #4]
   8254e:	4613      	mov	r3, r2
   82550:	4328      	orrs	r0, r5
   82552:	6048      	str	r0, [r1, #4]
   82554:	e79a      	b.n	8248c <_free_r+0x8c>
   82556:	2a54      	cmp	r2, #84	; 0x54
   82558:	d803      	bhi.n	82562 <_free_r+0x162>
   8255a:	0b18      	lsrs	r0, r3, #12
   8255c:	306e      	adds	r0, #110	; 0x6e
   8255e:	0041      	lsls	r1, r0, #1
   82560:	e784      	b.n	8246c <_free_r+0x6c>
   82562:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82566:	d803      	bhi.n	82570 <_free_r+0x170>
   82568:	0bd8      	lsrs	r0, r3, #15
   8256a:	3077      	adds	r0, #119	; 0x77
   8256c:	0041      	lsls	r1, r0, #1
   8256e:	e77d      	b.n	8246c <_free_r+0x6c>
   82570:	f240 5154 	movw	r1, #1364	; 0x554
   82574:	428a      	cmp	r2, r1
   82576:	d803      	bhi.n	82580 <_free_r+0x180>
   82578:	0c98      	lsrs	r0, r3, #18
   8257a:	307c      	adds	r0, #124	; 0x7c
   8257c:	0041      	lsls	r1, r0, #1
   8257e:	e775      	b.n	8246c <_free_r+0x6c>
   82580:	21fc      	movs	r1, #252	; 0xfc
   82582:	207e      	movs	r0, #126	; 0x7e
   82584:	e772      	b.n	8246c <_free_r+0x6c>
   82586:	bf00      	nop
   82588:	20070588 	.word	0x20070588
   8258c:	20070590 	.word	0x20070590
   82590:	20070990 	.word	0x20070990
   82594:	20070ad4 	.word	0x20070ad4

00082598 <__sfvwrite_r>:
   82598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8259c:	6893      	ldr	r3, [r2, #8]
   8259e:	b083      	sub	sp, #12
   825a0:	4616      	mov	r6, r2
   825a2:	4681      	mov	r9, r0
   825a4:	460c      	mov	r4, r1
   825a6:	b32b      	cbz	r3, 825f4 <__sfvwrite_r+0x5c>
   825a8:	898b      	ldrh	r3, [r1, #12]
   825aa:	0719      	lsls	r1, r3, #28
   825ac:	d526      	bpl.n	825fc <__sfvwrite_r+0x64>
   825ae:	6922      	ldr	r2, [r4, #16]
   825b0:	b322      	cbz	r2, 825fc <__sfvwrite_r+0x64>
   825b2:	f003 0202 	and.w	r2, r3, #2
   825b6:	b292      	uxth	r2, r2
   825b8:	6835      	ldr	r5, [r6, #0]
   825ba:	2a00      	cmp	r2, #0
   825bc:	d02c      	beq.n	82618 <__sfvwrite_r+0x80>
   825be:	f04f 0a00 	mov.w	sl, #0
   825c2:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 828ac <__sfvwrite_r+0x314>
   825c6:	46d0      	mov	r8, sl
   825c8:	45d8      	cmp	r8, fp
   825ca:	bf34      	ite	cc
   825cc:	4643      	movcc	r3, r8
   825ce:	465b      	movcs	r3, fp
   825d0:	4652      	mov	r2, sl
   825d2:	4648      	mov	r0, r9
   825d4:	f1b8 0f00 	cmp.w	r8, #0
   825d8:	d04f      	beq.n	8267a <__sfvwrite_r+0xe2>
   825da:	69e1      	ldr	r1, [r4, #28]
   825dc:	6a67      	ldr	r7, [r4, #36]	; 0x24
   825de:	47b8      	blx	r7
   825e0:	2800      	cmp	r0, #0
   825e2:	dd56      	ble.n	82692 <__sfvwrite_r+0xfa>
   825e4:	68b3      	ldr	r3, [r6, #8]
   825e6:	4482      	add	sl, r0
   825e8:	1a1b      	subs	r3, r3, r0
   825ea:	ebc0 0808 	rsb	r8, r0, r8
   825ee:	60b3      	str	r3, [r6, #8]
   825f0:	2b00      	cmp	r3, #0
   825f2:	d1e9      	bne.n	825c8 <__sfvwrite_r+0x30>
   825f4:	2000      	movs	r0, #0
   825f6:	b003      	add	sp, #12
   825f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   825fc:	4648      	mov	r0, r9
   825fe:	4621      	mov	r1, r4
   82600:	f7ff fc88 	bl	81f14 <__swsetup_r>
   82604:	2800      	cmp	r0, #0
   82606:	f040 8148 	bne.w	8289a <__sfvwrite_r+0x302>
   8260a:	89a3      	ldrh	r3, [r4, #12]
   8260c:	6835      	ldr	r5, [r6, #0]
   8260e:	f003 0202 	and.w	r2, r3, #2
   82612:	b292      	uxth	r2, r2
   82614:	2a00      	cmp	r2, #0
   82616:	d1d2      	bne.n	825be <__sfvwrite_r+0x26>
   82618:	f013 0a01 	ands.w	sl, r3, #1
   8261c:	d142      	bne.n	826a4 <__sfvwrite_r+0x10c>
   8261e:	46d0      	mov	r8, sl
   82620:	f1b8 0f00 	cmp.w	r8, #0
   82624:	d023      	beq.n	8266e <__sfvwrite_r+0xd6>
   82626:	059a      	lsls	r2, r3, #22
   82628:	68a7      	ldr	r7, [r4, #8]
   8262a:	d576      	bpl.n	8271a <__sfvwrite_r+0x182>
   8262c:	45b8      	cmp	r8, r7
   8262e:	f0c0 80a4 	bcc.w	8277a <__sfvwrite_r+0x1e2>
   82632:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82636:	f040 80b2 	bne.w	8279e <__sfvwrite_r+0x206>
   8263a:	6820      	ldr	r0, [r4, #0]
   8263c:	46bb      	mov	fp, r7
   8263e:	4651      	mov	r1, sl
   82640:	465a      	mov	r2, fp
   82642:	f000 fd37 	bl	830b4 <memmove>
   82646:	68a2      	ldr	r2, [r4, #8]
   82648:	6821      	ldr	r1, [r4, #0]
   8264a:	1bd2      	subs	r2, r2, r7
   8264c:	eb01 030b 	add.w	r3, r1, fp
   82650:	60a2      	str	r2, [r4, #8]
   82652:	6023      	str	r3, [r4, #0]
   82654:	4642      	mov	r2, r8
   82656:	68b3      	ldr	r3, [r6, #8]
   82658:	4492      	add	sl, r2
   8265a:	1a9b      	subs	r3, r3, r2
   8265c:	ebc2 0808 	rsb	r8, r2, r8
   82660:	60b3      	str	r3, [r6, #8]
   82662:	2b00      	cmp	r3, #0
   82664:	d0c6      	beq.n	825f4 <__sfvwrite_r+0x5c>
   82666:	89a3      	ldrh	r3, [r4, #12]
   82668:	f1b8 0f00 	cmp.w	r8, #0
   8266c:	d1db      	bne.n	82626 <__sfvwrite_r+0x8e>
   8266e:	f8d5 a000 	ldr.w	sl, [r5]
   82672:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82676:	3508      	adds	r5, #8
   82678:	e7d2      	b.n	82620 <__sfvwrite_r+0x88>
   8267a:	f8d5 a000 	ldr.w	sl, [r5]
   8267e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82682:	3508      	adds	r5, #8
   82684:	e7a0      	b.n	825c8 <__sfvwrite_r+0x30>
   82686:	4648      	mov	r0, r9
   82688:	4621      	mov	r1, r4
   8268a:	f7ff fd59 	bl	82140 <_fflush_r>
   8268e:	2800      	cmp	r0, #0
   82690:	d059      	beq.n	82746 <__sfvwrite_r+0x1ae>
   82692:	89a3      	ldrh	r3, [r4, #12]
   82694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82698:	f04f 30ff 	mov.w	r0, #4294967295
   8269c:	81a3      	strh	r3, [r4, #12]
   8269e:	b003      	add	sp, #12
   826a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   826a4:	4692      	mov	sl, r2
   826a6:	9201      	str	r2, [sp, #4]
   826a8:	4693      	mov	fp, r2
   826aa:	4690      	mov	r8, r2
   826ac:	f1b8 0f00 	cmp.w	r8, #0
   826b0:	d02b      	beq.n	8270a <__sfvwrite_r+0x172>
   826b2:	9f01      	ldr	r7, [sp, #4]
   826b4:	2f00      	cmp	r7, #0
   826b6:	d064      	beq.n	82782 <__sfvwrite_r+0x1ea>
   826b8:	6820      	ldr	r0, [r4, #0]
   826ba:	6921      	ldr	r1, [r4, #16]
   826bc:	45c2      	cmp	sl, r8
   826be:	bf34      	ite	cc
   826c0:	4653      	movcc	r3, sl
   826c2:	4643      	movcs	r3, r8
   826c4:	4288      	cmp	r0, r1
   826c6:	461f      	mov	r7, r3
   826c8:	f8d4 c008 	ldr.w	ip, [r4, #8]
   826cc:	6962      	ldr	r2, [r4, #20]
   826ce:	d903      	bls.n	826d8 <__sfvwrite_r+0x140>
   826d0:	4494      	add	ip, r2
   826d2:	4563      	cmp	r3, ip
   826d4:	f300 80ae 	bgt.w	82834 <__sfvwrite_r+0x29c>
   826d8:	4293      	cmp	r3, r2
   826da:	db36      	blt.n	8274a <__sfvwrite_r+0x1b2>
   826dc:	4613      	mov	r3, r2
   826de:	6a67      	ldr	r7, [r4, #36]	; 0x24
   826e0:	4648      	mov	r0, r9
   826e2:	69e1      	ldr	r1, [r4, #28]
   826e4:	465a      	mov	r2, fp
   826e6:	47b8      	blx	r7
   826e8:	1e07      	subs	r7, r0, #0
   826ea:	ddd2      	ble.n	82692 <__sfvwrite_r+0xfa>
   826ec:	ebba 0a07 	subs.w	sl, sl, r7
   826f0:	d03a      	beq.n	82768 <__sfvwrite_r+0x1d0>
   826f2:	68b3      	ldr	r3, [r6, #8]
   826f4:	44bb      	add	fp, r7
   826f6:	1bdb      	subs	r3, r3, r7
   826f8:	ebc7 0808 	rsb	r8, r7, r8
   826fc:	60b3      	str	r3, [r6, #8]
   826fe:	2b00      	cmp	r3, #0
   82700:	f43f af78 	beq.w	825f4 <__sfvwrite_r+0x5c>
   82704:	f1b8 0f00 	cmp.w	r8, #0
   82708:	d1d3      	bne.n	826b2 <__sfvwrite_r+0x11a>
   8270a:	2700      	movs	r7, #0
   8270c:	f8d5 b000 	ldr.w	fp, [r5]
   82710:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82714:	9701      	str	r7, [sp, #4]
   82716:	3508      	adds	r5, #8
   82718:	e7c8      	b.n	826ac <__sfvwrite_r+0x114>
   8271a:	6820      	ldr	r0, [r4, #0]
   8271c:	6923      	ldr	r3, [r4, #16]
   8271e:	4298      	cmp	r0, r3
   82720:	d802      	bhi.n	82728 <__sfvwrite_r+0x190>
   82722:	6963      	ldr	r3, [r4, #20]
   82724:	4598      	cmp	r8, r3
   82726:	d272      	bcs.n	8280e <__sfvwrite_r+0x276>
   82728:	45b8      	cmp	r8, r7
   8272a:	bf38      	it	cc
   8272c:	4647      	movcc	r7, r8
   8272e:	463a      	mov	r2, r7
   82730:	4651      	mov	r1, sl
   82732:	f000 fcbf 	bl	830b4 <memmove>
   82736:	68a3      	ldr	r3, [r4, #8]
   82738:	6822      	ldr	r2, [r4, #0]
   8273a:	1bdb      	subs	r3, r3, r7
   8273c:	443a      	add	r2, r7
   8273e:	60a3      	str	r3, [r4, #8]
   82740:	6022      	str	r2, [r4, #0]
   82742:	2b00      	cmp	r3, #0
   82744:	d09f      	beq.n	82686 <__sfvwrite_r+0xee>
   82746:	463a      	mov	r2, r7
   82748:	e785      	b.n	82656 <__sfvwrite_r+0xbe>
   8274a:	461a      	mov	r2, r3
   8274c:	4659      	mov	r1, fp
   8274e:	9300      	str	r3, [sp, #0]
   82750:	f000 fcb0 	bl	830b4 <memmove>
   82754:	9b00      	ldr	r3, [sp, #0]
   82756:	68a1      	ldr	r1, [r4, #8]
   82758:	6822      	ldr	r2, [r4, #0]
   8275a:	1ac9      	subs	r1, r1, r3
   8275c:	ebba 0a07 	subs.w	sl, sl, r7
   82760:	4413      	add	r3, r2
   82762:	60a1      	str	r1, [r4, #8]
   82764:	6023      	str	r3, [r4, #0]
   82766:	d1c4      	bne.n	826f2 <__sfvwrite_r+0x15a>
   82768:	4648      	mov	r0, r9
   8276a:	4621      	mov	r1, r4
   8276c:	f7ff fce8 	bl	82140 <_fflush_r>
   82770:	2800      	cmp	r0, #0
   82772:	d18e      	bne.n	82692 <__sfvwrite_r+0xfa>
   82774:	f8cd a004 	str.w	sl, [sp, #4]
   82778:	e7bb      	b.n	826f2 <__sfvwrite_r+0x15a>
   8277a:	6820      	ldr	r0, [r4, #0]
   8277c:	4647      	mov	r7, r8
   8277e:	46c3      	mov	fp, r8
   82780:	e75d      	b.n	8263e <__sfvwrite_r+0xa6>
   82782:	4658      	mov	r0, fp
   82784:	210a      	movs	r1, #10
   82786:	4642      	mov	r2, r8
   82788:	f000 fbd4 	bl	82f34 <memchr>
   8278c:	2800      	cmp	r0, #0
   8278e:	d07f      	beq.n	82890 <__sfvwrite_r+0x2f8>
   82790:	f100 0a01 	add.w	sl, r0, #1
   82794:	2701      	movs	r7, #1
   82796:	ebcb 0a0a 	rsb	sl, fp, sl
   8279a:	9701      	str	r7, [sp, #4]
   8279c:	e78c      	b.n	826b8 <__sfvwrite_r+0x120>
   8279e:	6822      	ldr	r2, [r4, #0]
   827a0:	6921      	ldr	r1, [r4, #16]
   827a2:	6967      	ldr	r7, [r4, #20]
   827a4:	ebc1 0c02 	rsb	ip, r1, r2
   827a8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   827ac:	f10c 0201 	add.w	r2, ip, #1
   827b0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   827b4:	4442      	add	r2, r8
   827b6:	107f      	asrs	r7, r7, #1
   827b8:	4297      	cmp	r7, r2
   827ba:	bf34      	ite	cc
   827bc:	4617      	movcc	r7, r2
   827be:	463a      	movcs	r2, r7
   827c0:	055b      	lsls	r3, r3, #21
   827c2:	d54f      	bpl.n	82864 <__sfvwrite_r+0x2cc>
   827c4:	4611      	mov	r1, r2
   827c6:	4648      	mov	r0, r9
   827c8:	f8cd c000 	str.w	ip, [sp]
   827cc:	f000 f916 	bl	829fc <_malloc_r>
   827d0:	f8dd c000 	ldr.w	ip, [sp]
   827d4:	4683      	mov	fp, r0
   827d6:	2800      	cmp	r0, #0
   827d8:	d062      	beq.n	828a0 <__sfvwrite_r+0x308>
   827da:	4662      	mov	r2, ip
   827dc:	6921      	ldr	r1, [r4, #16]
   827de:	f8cd c000 	str.w	ip, [sp]
   827e2:	f000 fbf1 	bl	82fc8 <memcpy>
   827e6:	89a2      	ldrh	r2, [r4, #12]
   827e8:	f8dd c000 	ldr.w	ip, [sp]
   827ec:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   827f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   827f4:	81a2      	strh	r2, [r4, #12]
   827f6:	eb0b 000c 	add.w	r0, fp, ip
   827fa:	ebcc 0207 	rsb	r2, ip, r7
   827fe:	f8c4 b010 	str.w	fp, [r4, #16]
   82802:	6167      	str	r7, [r4, #20]
   82804:	6020      	str	r0, [r4, #0]
   82806:	60a2      	str	r2, [r4, #8]
   82808:	4647      	mov	r7, r8
   8280a:	46c3      	mov	fp, r8
   8280c:	e717      	b.n	8263e <__sfvwrite_r+0xa6>
   8280e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82812:	4590      	cmp	r8, r2
   82814:	bf38      	it	cc
   82816:	4642      	movcc	r2, r8
   82818:	fb92 f2f3 	sdiv	r2, r2, r3
   8281c:	fb02 f303 	mul.w	r3, r2, r3
   82820:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82822:	4648      	mov	r0, r9
   82824:	69e1      	ldr	r1, [r4, #28]
   82826:	4652      	mov	r2, sl
   82828:	47b8      	blx	r7
   8282a:	2800      	cmp	r0, #0
   8282c:	f77f af31 	ble.w	82692 <__sfvwrite_r+0xfa>
   82830:	4602      	mov	r2, r0
   82832:	e710      	b.n	82656 <__sfvwrite_r+0xbe>
   82834:	4662      	mov	r2, ip
   82836:	4659      	mov	r1, fp
   82838:	f8cd c000 	str.w	ip, [sp]
   8283c:	f000 fc3a 	bl	830b4 <memmove>
   82840:	f8dd c000 	ldr.w	ip, [sp]
   82844:	6823      	ldr	r3, [r4, #0]
   82846:	4648      	mov	r0, r9
   82848:	4463      	add	r3, ip
   8284a:	6023      	str	r3, [r4, #0]
   8284c:	4621      	mov	r1, r4
   8284e:	f8cd c000 	str.w	ip, [sp]
   82852:	f7ff fc75 	bl	82140 <_fflush_r>
   82856:	f8dd c000 	ldr.w	ip, [sp]
   8285a:	2800      	cmp	r0, #0
   8285c:	f47f af19 	bne.w	82692 <__sfvwrite_r+0xfa>
   82860:	4667      	mov	r7, ip
   82862:	e743      	b.n	826ec <__sfvwrite_r+0x154>
   82864:	4648      	mov	r0, r9
   82866:	f8cd c000 	str.w	ip, [sp]
   8286a:	f000 fc8d 	bl	83188 <_realloc_r>
   8286e:	f8dd c000 	ldr.w	ip, [sp]
   82872:	4683      	mov	fp, r0
   82874:	2800      	cmp	r0, #0
   82876:	d1be      	bne.n	827f6 <__sfvwrite_r+0x25e>
   82878:	4648      	mov	r0, r9
   8287a:	6921      	ldr	r1, [r4, #16]
   8287c:	f7ff fdc0 	bl	82400 <_free_r>
   82880:	89a3      	ldrh	r3, [r4, #12]
   82882:	220c      	movs	r2, #12
   82884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82888:	b29b      	uxth	r3, r3
   8288a:	f8c9 2000 	str.w	r2, [r9]
   8288e:	e701      	b.n	82694 <__sfvwrite_r+0xfc>
   82890:	2701      	movs	r7, #1
   82892:	f108 0a01 	add.w	sl, r8, #1
   82896:	9701      	str	r7, [sp, #4]
   82898:	e70e      	b.n	826b8 <__sfvwrite_r+0x120>
   8289a:	f04f 30ff 	mov.w	r0, #4294967295
   8289e:	e6aa      	b.n	825f6 <__sfvwrite_r+0x5e>
   828a0:	230c      	movs	r3, #12
   828a2:	f8c9 3000 	str.w	r3, [r9]
   828a6:	89a3      	ldrh	r3, [r4, #12]
   828a8:	e6f4      	b.n	82694 <__sfvwrite_r+0xfc>
   828aa:	bf00      	nop
   828ac:	7ffffc00 	.word	0x7ffffc00

000828b0 <_fwalk>:
   828b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   828b4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   828b8:	4688      	mov	r8, r1
   828ba:	d019      	beq.n	828f0 <_fwalk+0x40>
   828bc:	2600      	movs	r6, #0
   828be:	687d      	ldr	r5, [r7, #4]
   828c0:	68bc      	ldr	r4, [r7, #8]
   828c2:	3d01      	subs	r5, #1
   828c4:	d40e      	bmi.n	828e4 <_fwalk+0x34>
   828c6:	89a3      	ldrh	r3, [r4, #12]
   828c8:	3d01      	subs	r5, #1
   828ca:	2b01      	cmp	r3, #1
   828cc:	d906      	bls.n	828dc <_fwalk+0x2c>
   828ce:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   828d2:	4620      	mov	r0, r4
   828d4:	3301      	adds	r3, #1
   828d6:	d001      	beq.n	828dc <_fwalk+0x2c>
   828d8:	47c0      	blx	r8
   828da:	4306      	orrs	r6, r0
   828dc:	1c6b      	adds	r3, r5, #1
   828de:	f104 0468 	add.w	r4, r4, #104	; 0x68
   828e2:	d1f0      	bne.n	828c6 <_fwalk+0x16>
   828e4:	683f      	ldr	r7, [r7, #0]
   828e6:	2f00      	cmp	r7, #0
   828e8:	d1e9      	bne.n	828be <_fwalk+0xe>
   828ea:	4630      	mov	r0, r6
   828ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   828f0:	463e      	mov	r6, r7
   828f2:	4630      	mov	r0, r6
   828f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000828f8 <__locale_charset>:
   828f8:	4800      	ldr	r0, [pc, #0]	; (828fc <__locale_charset+0x4>)
   828fa:	4770      	bx	lr
   828fc:	20070564 	.word	0x20070564

00082900 <__locale_mb_cur_max>:
   82900:	4b01      	ldr	r3, [pc, #4]	; (82908 <__locale_mb_cur_max+0x8>)
   82902:	6818      	ldr	r0, [r3, #0]
   82904:	4770      	bx	lr
   82906:	bf00      	nop
   82908:	20070584 	.word	0x20070584

0008290c <__smakebuf_r>:
   8290c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8290e:	898b      	ldrh	r3, [r1, #12]
   82910:	b091      	sub	sp, #68	; 0x44
   82912:	b29a      	uxth	r2, r3
   82914:	0796      	lsls	r6, r2, #30
   82916:	460c      	mov	r4, r1
   82918:	4605      	mov	r5, r0
   8291a:	d437      	bmi.n	8298c <__smakebuf_r+0x80>
   8291c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82920:	2900      	cmp	r1, #0
   82922:	db17      	blt.n	82954 <__smakebuf_r+0x48>
   82924:	aa01      	add	r2, sp, #4
   82926:	f000 ffdf 	bl	838e8 <_fstat_r>
   8292a:	2800      	cmp	r0, #0
   8292c:	db10      	blt.n	82950 <__smakebuf_r+0x44>
   8292e:	9b02      	ldr	r3, [sp, #8]
   82930:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   82934:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   82938:	424f      	negs	r7, r1
   8293a:	414f      	adcs	r7, r1
   8293c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   82940:	d02c      	beq.n	8299c <__smakebuf_r+0x90>
   82942:	89a3      	ldrh	r3, [r4, #12]
   82944:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82948:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8294c:	81a3      	strh	r3, [r4, #12]
   8294e:	e00b      	b.n	82968 <__smakebuf_r+0x5c>
   82950:	89a3      	ldrh	r3, [r4, #12]
   82952:	b29a      	uxth	r2, r3
   82954:	f012 0f80 	tst.w	r2, #128	; 0x80
   82958:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8295c:	81a3      	strh	r3, [r4, #12]
   8295e:	bf14      	ite	ne
   82960:	2640      	movne	r6, #64	; 0x40
   82962:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   82966:	2700      	movs	r7, #0
   82968:	4628      	mov	r0, r5
   8296a:	4631      	mov	r1, r6
   8296c:	f000 f846 	bl	829fc <_malloc_r>
   82970:	89a3      	ldrh	r3, [r4, #12]
   82972:	2800      	cmp	r0, #0
   82974:	d029      	beq.n	829ca <__smakebuf_r+0xbe>
   82976:	4a1b      	ldr	r2, [pc, #108]	; (829e4 <__smakebuf_r+0xd8>)
   82978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8297c:	63ea      	str	r2, [r5, #60]	; 0x3c
   8297e:	81a3      	strh	r3, [r4, #12]
   82980:	6020      	str	r0, [r4, #0]
   82982:	6120      	str	r0, [r4, #16]
   82984:	6166      	str	r6, [r4, #20]
   82986:	b9a7      	cbnz	r7, 829b2 <__smakebuf_r+0xa6>
   82988:	b011      	add	sp, #68	; 0x44
   8298a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8298c:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82990:	2201      	movs	r2, #1
   82992:	600b      	str	r3, [r1, #0]
   82994:	610b      	str	r3, [r1, #16]
   82996:	614a      	str	r2, [r1, #20]
   82998:	b011      	add	sp, #68	; 0x44
   8299a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8299c:	4a12      	ldr	r2, [pc, #72]	; (829e8 <__smakebuf_r+0xdc>)
   8299e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   829a0:	4293      	cmp	r3, r2
   829a2:	d1ce      	bne.n	82942 <__smakebuf_r+0x36>
   829a4:	89a3      	ldrh	r3, [r4, #12]
   829a6:	f44f 6680 	mov.w	r6, #1024	; 0x400
   829aa:	4333      	orrs	r3, r6
   829ac:	81a3      	strh	r3, [r4, #12]
   829ae:	64e6      	str	r6, [r4, #76]	; 0x4c
   829b0:	e7da      	b.n	82968 <__smakebuf_r+0x5c>
   829b2:	4628      	mov	r0, r5
   829b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   829b8:	f000 ffaa 	bl	83910 <_isatty_r>
   829bc:	2800      	cmp	r0, #0
   829be:	d0e3      	beq.n	82988 <__smakebuf_r+0x7c>
   829c0:	89a3      	ldrh	r3, [r4, #12]
   829c2:	f043 0301 	orr.w	r3, r3, #1
   829c6:	81a3      	strh	r3, [r4, #12]
   829c8:	e7de      	b.n	82988 <__smakebuf_r+0x7c>
   829ca:	059a      	lsls	r2, r3, #22
   829cc:	d4dc      	bmi.n	82988 <__smakebuf_r+0x7c>
   829ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
   829d2:	f043 0302 	orr.w	r3, r3, #2
   829d6:	2101      	movs	r1, #1
   829d8:	81a3      	strh	r3, [r4, #12]
   829da:	6022      	str	r2, [r4, #0]
   829dc:	6122      	str	r2, [r4, #16]
   829de:	6161      	str	r1, [r4, #20]
   829e0:	e7d2      	b.n	82988 <__smakebuf_r+0x7c>
   829e2:	bf00      	nop
   829e4:	0008216d 	.word	0x0008216d
   829e8:	000835c9 	.word	0x000835c9

000829ec <malloc>:
   829ec:	4b02      	ldr	r3, [pc, #8]	; (829f8 <malloc+0xc>)
   829ee:	4601      	mov	r1, r0
   829f0:	6818      	ldr	r0, [r3, #0]
   829f2:	f000 b803 	b.w	829fc <_malloc_r>
   829f6:	bf00      	nop
   829f8:	20070560 	.word	0x20070560

000829fc <_malloc_r>:
   829fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82a00:	f101 050b 	add.w	r5, r1, #11
   82a04:	2d16      	cmp	r5, #22
   82a06:	b083      	sub	sp, #12
   82a08:	4606      	mov	r6, r0
   82a0a:	d927      	bls.n	82a5c <_malloc_r+0x60>
   82a0c:	f035 0507 	bics.w	r5, r5, #7
   82a10:	d427      	bmi.n	82a62 <_malloc_r+0x66>
   82a12:	42a9      	cmp	r1, r5
   82a14:	d825      	bhi.n	82a62 <_malloc_r+0x66>
   82a16:	4630      	mov	r0, r6
   82a18:	f000 fbb2 	bl	83180 <__malloc_lock>
   82a1c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82a20:	d226      	bcs.n	82a70 <_malloc_r+0x74>
   82a22:	4fc1      	ldr	r7, [pc, #772]	; (82d28 <_malloc_r+0x32c>)
   82a24:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   82a28:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82a2c:	68dc      	ldr	r4, [r3, #12]
   82a2e:	429c      	cmp	r4, r3
   82a30:	f000 81d2 	beq.w	82dd8 <_malloc_r+0x3dc>
   82a34:	6863      	ldr	r3, [r4, #4]
   82a36:	68e2      	ldr	r2, [r4, #12]
   82a38:	f023 0303 	bic.w	r3, r3, #3
   82a3c:	4423      	add	r3, r4
   82a3e:	6858      	ldr	r0, [r3, #4]
   82a40:	68a1      	ldr	r1, [r4, #8]
   82a42:	f040 0501 	orr.w	r5, r0, #1
   82a46:	60ca      	str	r2, [r1, #12]
   82a48:	4630      	mov	r0, r6
   82a4a:	6091      	str	r1, [r2, #8]
   82a4c:	605d      	str	r5, [r3, #4]
   82a4e:	f000 fb99 	bl	83184 <__malloc_unlock>
   82a52:	3408      	adds	r4, #8
   82a54:	4620      	mov	r0, r4
   82a56:	b003      	add	sp, #12
   82a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a5c:	2510      	movs	r5, #16
   82a5e:	42a9      	cmp	r1, r5
   82a60:	d9d9      	bls.n	82a16 <_malloc_r+0x1a>
   82a62:	2400      	movs	r4, #0
   82a64:	230c      	movs	r3, #12
   82a66:	4620      	mov	r0, r4
   82a68:	6033      	str	r3, [r6, #0]
   82a6a:	b003      	add	sp, #12
   82a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a70:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82a74:	f000 8089 	beq.w	82b8a <_malloc_r+0x18e>
   82a78:	f1bc 0f04 	cmp.w	ip, #4
   82a7c:	f200 8160 	bhi.w	82d40 <_malloc_r+0x344>
   82a80:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82a84:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82a88:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82a8c:	4fa6      	ldr	r7, [pc, #664]	; (82d28 <_malloc_r+0x32c>)
   82a8e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82a92:	68cc      	ldr	r4, [r1, #12]
   82a94:	42a1      	cmp	r1, r4
   82a96:	d105      	bne.n	82aa4 <_malloc_r+0xa8>
   82a98:	e00c      	b.n	82ab4 <_malloc_r+0xb8>
   82a9a:	2b00      	cmp	r3, #0
   82a9c:	da79      	bge.n	82b92 <_malloc_r+0x196>
   82a9e:	68e4      	ldr	r4, [r4, #12]
   82aa0:	42a1      	cmp	r1, r4
   82aa2:	d007      	beq.n	82ab4 <_malloc_r+0xb8>
   82aa4:	6862      	ldr	r2, [r4, #4]
   82aa6:	f022 0203 	bic.w	r2, r2, #3
   82aaa:	1b53      	subs	r3, r2, r5
   82aac:	2b0f      	cmp	r3, #15
   82aae:	ddf4      	ble.n	82a9a <_malloc_r+0x9e>
   82ab0:	f10c 3cff 	add.w	ip, ip, #4294967295
   82ab4:	f10c 0c01 	add.w	ip, ip, #1
   82ab8:	4b9b      	ldr	r3, [pc, #620]	; (82d28 <_malloc_r+0x32c>)
   82aba:	693c      	ldr	r4, [r7, #16]
   82abc:	f103 0e08 	add.w	lr, r3, #8
   82ac0:	4574      	cmp	r4, lr
   82ac2:	f000 817e 	beq.w	82dc2 <_malloc_r+0x3c6>
   82ac6:	6861      	ldr	r1, [r4, #4]
   82ac8:	f021 0103 	bic.w	r1, r1, #3
   82acc:	1b4a      	subs	r2, r1, r5
   82ace:	2a0f      	cmp	r2, #15
   82ad0:	f300 8164 	bgt.w	82d9c <_malloc_r+0x3a0>
   82ad4:	2a00      	cmp	r2, #0
   82ad6:	f8c3 e014 	str.w	lr, [r3, #20]
   82ada:	f8c3 e010 	str.w	lr, [r3, #16]
   82ade:	da69      	bge.n	82bb4 <_malloc_r+0x1b8>
   82ae0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82ae4:	f080 813a 	bcs.w	82d5c <_malloc_r+0x360>
   82ae8:	08c9      	lsrs	r1, r1, #3
   82aea:	108a      	asrs	r2, r1, #2
   82aec:	f04f 0801 	mov.w	r8, #1
   82af0:	fa08 f802 	lsl.w	r8, r8, r2
   82af4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82af8:	685a      	ldr	r2, [r3, #4]
   82afa:	6888      	ldr	r0, [r1, #8]
   82afc:	ea48 0202 	orr.w	r2, r8, r2
   82b00:	60a0      	str	r0, [r4, #8]
   82b02:	60e1      	str	r1, [r4, #12]
   82b04:	605a      	str	r2, [r3, #4]
   82b06:	608c      	str	r4, [r1, #8]
   82b08:	60c4      	str	r4, [r0, #12]
   82b0a:	ea4f 03ac 	mov.w	r3, ip, asr #2
   82b0e:	2001      	movs	r0, #1
   82b10:	4098      	lsls	r0, r3
   82b12:	4290      	cmp	r0, r2
   82b14:	d85b      	bhi.n	82bce <_malloc_r+0x1d2>
   82b16:	4202      	tst	r2, r0
   82b18:	d106      	bne.n	82b28 <_malloc_r+0x12c>
   82b1a:	f02c 0c03 	bic.w	ip, ip, #3
   82b1e:	0040      	lsls	r0, r0, #1
   82b20:	4202      	tst	r2, r0
   82b22:	f10c 0c04 	add.w	ip, ip, #4
   82b26:	d0fa      	beq.n	82b1e <_malloc_r+0x122>
   82b28:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   82b2c:	4644      	mov	r4, r8
   82b2e:	46e1      	mov	r9, ip
   82b30:	68e3      	ldr	r3, [r4, #12]
   82b32:	429c      	cmp	r4, r3
   82b34:	d107      	bne.n	82b46 <_malloc_r+0x14a>
   82b36:	e146      	b.n	82dc6 <_malloc_r+0x3ca>
   82b38:	2a00      	cmp	r2, #0
   82b3a:	f280 8157 	bge.w	82dec <_malloc_r+0x3f0>
   82b3e:	68db      	ldr	r3, [r3, #12]
   82b40:	429c      	cmp	r4, r3
   82b42:	f000 8140 	beq.w	82dc6 <_malloc_r+0x3ca>
   82b46:	6859      	ldr	r1, [r3, #4]
   82b48:	f021 0103 	bic.w	r1, r1, #3
   82b4c:	1b4a      	subs	r2, r1, r5
   82b4e:	2a0f      	cmp	r2, #15
   82b50:	ddf2      	ble.n	82b38 <_malloc_r+0x13c>
   82b52:	461c      	mov	r4, r3
   82b54:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82b58:	68d9      	ldr	r1, [r3, #12]
   82b5a:	f045 0901 	orr.w	r9, r5, #1
   82b5e:	f042 0801 	orr.w	r8, r2, #1
   82b62:	441d      	add	r5, r3
   82b64:	f8c3 9004 	str.w	r9, [r3, #4]
   82b68:	4630      	mov	r0, r6
   82b6a:	f8cc 100c 	str.w	r1, [ip, #12]
   82b6e:	f8c1 c008 	str.w	ip, [r1, #8]
   82b72:	617d      	str	r5, [r7, #20]
   82b74:	613d      	str	r5, [r7, #16]
   82b76:	f8c5 e00c 	str.w	lr, [r5, #12]
   82b7a:	f8c5 e008 	str.w	lr, [r5, #8]
   82b7e:	f8c5 8004 	str.w	r8, [r5, #4]
   82b82:	50aa      	str	r2, [r5, r2]
   82b84:	f000 fafe 	bl	83184 <__malloc_unlock>
   82b88:	e764      	b.n	82a54 <_malloc_r+0x58>
   82b8a:	217e      	movs	r1, #126	; 0x7e
   82b8c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   82b90:	e77c      	b.n	82a8c <_malloc_r+0x90>
   82b92:	4422      	add	r2, r4
   82b94:	6850      	ldr	r0, [r2, #4]
   82b96:	68e3      	ldr	r3, [r4, #12]
   82b98:	68a1      	ldr	r1, [r4, #8]
   82b9a:	f040 0501 	orr.w	r5, r0, #1
   82b9e:	60cb      	str	r3, [r1, #12]
   82ba0:	4630      	mov	r0, r6
   82ba2:	6099      	str	r1, [r3, #8]
   82ba4:	6055      	str	r5, [r2, #4]
   82ba6:	f000 faed 	bl	83184 <__malloc_unlock>
   82baa:	3408      	adds	r4, #8
   82bac:	4620      	mov	r0, r4
   82bae:	b003      	add	sp, #12
   82bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82bb4:	4421      	add	r1, r4
   82bb6:	684b      	ldr	r3, [r1, #4]
   82bb8:	4630      	mov	r0, r6
   82bba:	f043 0301 	orr.w	r3, r3, #1
   82bbe:	604b      	str	r3, [r1, #4]
   82bc0:	f000 fae0 	bl	83184 <__malloc_unlock>
   82bc4:	3408      	adds	r4, #8
   82bc6:	4620      	mov	r0, r4
   82bc8:	b003      	add	sp, #12
   82bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82bce:	68bc      	ldr	r4, [r7, #8]
   82bd0:	6863      	ldr	r3, [r4, #4]
   82bd2:	f023 0903 	bic.w	r9, r3, #3
   82bd6:	45a9      	cmp	r9, r5
   82bd8:	d304      	bcc.n	82be4 <_malloc_r+0x1e8>
   82bda:	ebc5 0309 	rsb	r3, r5, r9
   82bde:	2b0f      	cmp	r3, #15
   82be0:	f300 8091 	bgt.w	82d06 <_malloc_r+0x30a>
   82be4:	4b51      	ldr	r3, [pc, #324]	; (82d2c <_malloc_r+0x330>)
   82be6:	4a52      	ldr	r2, [pc, #328]	; (82d30 <_malloc_r+0x334>)
   82be8:	6819      	ldr	r1, [r3, #0]
   82bea:	6813      	ldr	r3, [r2, #0]
   82bec:	eb05 0a01 	add.w	sl, r5, r1
   82bf0:	3301      	adds	r3, #1
   82bf2:	eb04 0b09 	add.w	fp, r4, r9
   82bf6:	f000 8161 	beq.w	82ebc <_malloc_r+0x4c0>
   82bfa:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   82bfe:	f10a 0a0f 	add.w	sl, sl, #15
   82c02:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   82c06:	f02a 0a0f 	bic.w	sl, sl, #15
   82c0a:	4630      	mov	r0, r6
   82c0c:	4651      	mov	r1, sl
   82c0e:	9201      	str	r2, [sp, #4]
   82c10:	f000 fc9a 	bl	83548 <_sbrk_r>
   82c14:	f1b0 3fff 	cmp.w	r0, #4294967295
   82c18:	4680      	mov	r8, r0
   82c1a:	9a01      	ldr	r2, [sp, #4]
   82c1c:	f000 8101 	beq.w	82e22 <_malloc_r+0x426>
   82c20:	4583      	cmp	fp, r0
   82c22:	f200 80fb 	bhi.w	82e1c <_malloc_r+0x420>
   82c26:	f8df c114 	ldr.w	ip, [pc, #276]	; 82d3c <_malloc_r+0x340>
   82c2a:	45c3      	cmp	fp, r8
   82c2c:	f8dc 3000 	ldr.w	r3, [ip]
   82c30:	4453      	add	r3, sl
   82c32:	f8cc 3000 	str.w	r3, [ip]
   82c36:	f000 814a 	beq.w	82ece <_malloc_r+0x4d2>
   82c3a:	6812      	ldr	r2, [r2, #0]
   82c3c:	493c      	ldr	r1, [pc, #240]	; (82d30 <_malloc_r+0x334>)
   82c3e:	3201      	adds	r2, #1
   82c40:	bf1b      	ittet	ne
   82c42:	ebcb 0b08 	rsbne	fp, fp, r8
   82c46:	445b      	addne	r3, fp
   82c48:	f8c1 8000 	streq.w	r8, [r1]
   82c4c:	f8cc 3000 	strne.w	r3, [ip]
   82c50:	f018 0307 	ands.w	r3, r8, #7
   82c54:	f000 8114 	beq.w	82e80 <_malloc_r+0x484>
   82c58:	f1c3 0208 	rsb	r2, r3, #8
   82c5c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   82c60:	4490      	add	r8, r2
   82c62:	3308      	adds	r3, #8
   82c64:	44c2      	add	sl, r8
   82c66:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   82c6a:	ebca 0a03 	rsb	sl, sl, r3
   82c6e:	4651      	mov	r1, sl
   82c70:	4630      	mov	r0, r6
   82c72:	f8cd c004 	str.w	ip, [sp, #4]
   82c76:	f000 fc67 	bl	83548 <_sbrk_r>
   82c7a:	1c43      	adds	r3, r0, #1
   82c7c:	f8dd c004 	ldr.w	ip, [sp, #4]
   82c80:	f000 8135 	beq.w	82eee <_malloc_r+0x4f2>
   82c84:	ebc8 0200 	rsb	r2, r8, r0
   82c88:	4452      	add	r2, sl
   82c8a:	f042 0201 	orr.w	r2, r2, #1
   82c8e:	f8dc 3000 	ldr.w	r3, [ip]
   82c92:	42bc      	cmp	r4, r7
   82c94:	4453      	add	r3, sl
   82c96:	f8c7 8008 	str.w	r8, [r7, #8]
   82c9a:	f8cc 3000 	str.w	r3, [ip]
   82c9e:	f8c8 2004 	str.w	r2, [r8, #4]
   82ca2:	f8df a098 	ldr.w	sl, [pc, #152]	; 82d3c <_malloc_r+0x340>
   82ca6:	d015      	beq.n	82cd4 <_malloc_r+0x2d8>
   82ca8:	f1b9 0f0f 	cmp.w	r9, #15
   82cac:	f240 80eb 	bls.w	82e86 <_malloc_r+0x48a>
   82cb0:	6861      	ldr	r1, [r4, #4]
   82cb2:	f1a9 020c 	sub.w	r2, r9, #12
   82cb6:	f022 0207 	bic.w	r2, r2, #7
   82cba:	f001 0101 	and.w	r1, r1, #1
   82cbe:	ea42 0e01 	orr.w	lr, r2, r1
   82cc2:	2005      	movs	r0, #5
   82cc4:	18a1      	adds	r1, r4, r2
   82cc6:	2a0f      	cmp	r2, #15
   82cc8:	f8c4 e004 	str.w	lr, [r4, #4]
   82ccc:	6048      	str	r0, [r1, #4]
   82cce:	6088      	str	r0, [r1, #8]
   82cd0:	f200 8111 	bhi.w	82ef6 <_malloc_r+0x4fa>
   82cd4:	4a17      	ldr	r2, [pc, #92]	; (82d34 <_malloc_r+0x338>)
   82cd6:	68bc      	ldr	r4, [r7, #8]
   82cd8:	6811      	ldr	r1, [r2, #0]
   82cda:	428b      	cmp	r3, r1
   82cdc:	bf88      	it	hi
   82cde:	6013      	strhi	r3, [r2, #0]
   82ce0:	4a15      	ldr	r2, [pc, #84]	; (82d38 <_malloc_r+0x33c>)
   82ce2:	6811      	ldr	r1, [r2, #0]
   82ce4:	428b      	cmp	r3, r1
   82ce6:	bf88      	it	hi
   82ce8:	6013      	strhi	r3, [r2, #0]
   82cea:	6862      	ldr	r2, [r4, #4]
   82cec:	f022 0203 	bic.w	r2, r2, #3
   82cf0:	4295      	cmp	r5, r2
   82cf2:	ebc5 0302 	rsb	r3, r5, r2
   82cf6:	d801      	bhi.n	82cfc <_malloc_r+0x300>
   82cf8:	2b0f      	cmp	r3, #15
   82cfa:	dc04      	bgt.n	82d06 <_malloc_r+0x30a>
   82cfc:	4630      	mov	r0, r6
   82cfe:	f000 fa41 	bl	83184 <__malloc_unlock>
   82d02:	2400      	movs	r4, #0
   82d04:	e6a6      	b.n	82a54 <_malloc_r+0x58>
   82d06:	f045 0201 	orr.w	r2, r5, #1
   82d0a:	f043 0301 	orr.w	r3, r3, #1
   82d0e:	4425      	add	r5, r4
   82d10:	6062      	str	r2, [r4, #4]
   82d12:	4630      	mov	r0, r6
   82d14:	60bd      	str	r5, [r7, #8]
   82d16:	606b      	str	r3, [r5, #4]
   82d18:	f000 fa34 	bl	83184 <__malloc_unlock>
   82d1c:	3408      	adds	r4, #8
   82d1e:	4620      	mov	r0, r4
   82d20:	b003      	add	sp, #12
   82d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82d26:	bf00      	nop
   82d28:	20070588 	.word	0x20070588
   82d2c:	20070ad4 	.word	0x20070ad4
   82d30:	20070994 	.word	0x20070994
   82d34:	20070ad0 	.word	0x20070ad0
   82d38:	20070acc 	.word	0x20070acc
   82d3c:	20070ad8 	.word	0x20070ad8
   82d40:	f1bc 0f14 	cmp.w	ip, #20
   82d44:	d961      	bls.n	82e0a <_malloc_r+0x40e>
   82d46:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   82d4a:	f200 808f 	bhi.w	82e6c <_malloc_r+0x470>
   82d4e:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   82d52:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   82d56:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82d5a:	e697      	b.n	82a8c <_malloc_r+0x90>
   82d5c:	0a4b      	lsrs	r3, r1, #9
   82d5e:	2b04      	cmp	r3, #4
   82d60:	d958      	bls.n	82e14 <_malloc_r+0x418>
   82d62:	2b14      	cmp	r3, #20
   82d64:	f200 80ad 	bhi.w	82ec2 <_malloc_r+0x4c6>
   82d68:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   82d6c:	0050      	lsls	r0, r2, #1
   82d6e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   82d72:	6883      	ldr	r3, [r0, #8]
   82d74:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82f30 <_malloc_r+0x534>
   82d78:	4283      	cmp	r3, r0
   82d7a:	f000 808a 	beq.w	82e92 <_malloc_r+0x496>
   82d7e:	685a      	ldr	r2, [r3, #4]
   82d80:	f022 0203 	bic.w	r2, r2, #3
   82d84:	4291      	cmp	r1, r2
   82d86:	d202      	bcs.n	82d8e <_malloc_r+0x392>
   82d88:	689b      	ldr	r3, [r3, #8]
   82d8a:	4298      	cmp	r0, r3
   82d8c:	d1f7      	bne.n	82d7e <_malloc_r+0x382>
   82d8e:	68d9      	ldr	r1, [r3, #12]
   82d90:	687a      	ldr	r2, [r7, #4]
   82d92:	60e1      	str	r1, [r4, #12]
   82d94:	60a3      	str	r3, [r4, #8]
   82d96:	608c      	str	r4, [r1, #8]
   82d98:	60dc      	str	r4, [r3, #12]
   82d9a:	e6b6      	b.n	82b0a <_malloc_r+0x10e>
   82d9c:	f045 0701 	orr.w	r7, r5, #1
   82da0:	f042 0101 	orr.w	r1, r2, #1
   82da4:	4425      	add	r5, r4
   82da6:	6067      	str	r7, [r4, #4]
   82da8:	4630      	mov	r0, r6
   82daa:	615d      	str	r5, [r3, #20]
   82dac:	611d      	str	r5, [r3, #16]
   82dae:	f8c5 e00c 	str.w	lr, [r5, #12]
   82db2:	f8c5 e008 	str.w	lr, [r5, #8]
   82db6:	6069      	str	r1, [r5, #4]
   82db8:	50aa      	str	r2, [r5, r2]
   82dba:	3408      	adds	r4, #8
   82dbc:	f000 f9e2 	bl	83184 <__malloc_unlock>
   82dc0:	e648      	b.n	82a54 <_malloc_r+0x58>
   82dc2:	685a      	ldr	r2, [r3, #4]
   82dc4:	e6a1      	b.n	82b0a <_malloc_r+0x10e>
   82dc6:	f109 0901 	add.w	r9, r9, #1
   82dca:	f019 0f03 	tst.w	r9, #3
   82dce:	f104 0408 	add.w	r4, r4, #8
   82dd2:	f47f aead 	bne.w	82b30 <_malloc_r+0x134>
   82dd6:	e02d      	b.n	82e34 <_malloc_r+0x438>
   82dd8:	f104 0308 	add.w	r3, r4, #8
   82ddc:	6964      	ldr	r4, [r4, #20]
   82dde:	42a3      	cmp	r3, r4
   82de0:	bf08      	it	eq
   82de2:	f10c 0c02 	addeq.w	ip, ip, #2
   82de6:	f43f ae67 	beq.w	82ab8 <_malloc_r+0xbc>
   82dea:	e623      	b.n	82a34 <_malloc_r+0x38>
   82dec:	4419      	add	r1, r3
   82dee:	6848      	ldr	r0, [r1, #4]
   82df0:	461c      	mov	r4, r3
   82df2:	f854 2f08 	ldr.w	r2, [r4, #8]!
   82df6:	68db      	ldr	r3, [r3, #12]
   82df8:	f040 0501 	orr.w	r5, r0, #1
   82dfc:	604d      	str	r5, [r1, #4]
   82dfe:	4630      	mov	r0, r6
   82e00:	60d3      	str	r3, [r2, #12]
   82e02:	609a      	str	r2, [r3, #8]
   82e04:	f000 f9be 	bl	83184 <__malloc_unlock>
   82e08:	e624      	b.n	82a54 <_malloc_r+0x58>
   82e0a:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   82e0e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82e12:	e63b      	b.n	82a8c <_malloc_r+0x90>
   82e14:	098a      	lsrs	r2, r1, #6
   82e16:	3238      	adds	r2, #56	; 0x38
   82e18:	0050      	lsls	r0, r2, #1
   82e1a:	e7a8      	b.n	82d6e <_malloc_r+0x372>
   82e1c:	42bc      	cmp	r4, r7
   82e1e:	f43f af02 	beq.w	82c26 <_malloc_r+0x22a>
   82e22:	68bc      	ldr	r4, [r7, #8]
   82e24:	6862      	ldr	r2, [r4, #4]
   82e26:	f022 0203 	bic.w	r2, r2, #3
   82e2a:	e761      	b.n	82cf0 <_malloc_r+0x2f4>
   82e2c:	f8d8 8000 	ldr.w	r8, [r8]
   82e30:	4598      	cmp	r8, r3
   82e32:	d17a      	bne.n	82f2a <_malloc_r+0x52e>
   82e34:	f01c 0f03 	tst.w	ip, #3
   82e38:	f1a8 0308 	sub.w	r3, r8, #8
   82e3c:	f10c 3cff 	add.w	ip, ip, #4294967295
   82e40:	d1f4      	bne.n	82e2c <_malloc_r+0x430>
   82e42:	687b      	ldr	r3, [r7, #4]
   82e44:	ea23 0300 	bic.w	r3, r3, r0
   82e48:	607b      	str	r3, [r7, #4]
   82e4a:	0040      	lsls	r0, r0, #1
   82e4c:	4298      	cmp	r0, r3
   82e4e:	f63f aebe 	bhi.w	82bce <_malloc_r+0x1d2>
   82e52:	2800      	cmp	r0, #0
   82e54:	f43f aebb 	beq.w	82bce <_malloc_r+0x1d2>
   82e58:	4203      	tst	r3, r0
   82e5a:	46cc      	mov	ip, r9
   82e5c:	f47f ae64 	bne.w	82b28 <_malloc_r+0x12c>
   82e60:	0040      	lsls	r0, r0, #1
   82e62:	4203      	tst	r3, r0
   82e64:	f10c 0c04 	add.w	ip, ip, #4
   82e68:	d0fa      	beq.n	82e60 <_malloc_r+0x464>
   82e6a:	e65d      	b.n	82b28 <_malloc_r+0x12c>
   82e6c:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   82e70:	d819      	bhi.n	82ea6 <_malloc_r+0x4aa>
   82e72:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   82e76:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   82e7a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82e7e:	e605      	b.n	82a8c <_malloc_r+0x90>
   82e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82e84:	e6ee      	b.n	82c64 <_malloc_r+0x268>
   82e86:	2301      	movs	r3, #1
   82e88:	f8c8 3004 	str.w	r3, [r8, #4]
   82e8c:	4644      	mov	r4, r8
   82e8e:	2200      	movs	r2, #0
   82e90:	e72e      	b.n	82cf0 <_malloc_r+0x2f4>
   82e92:	1092      	asrs	r2, r2, #2
   82e94:	2001      	movs	r0, #1
   82e96:	4090      	lsls	r0, r2
   82e98:	f8d8 2004 	ldr.w	r2, [r8, #4]
   82e9c:	4619      	mov	r1, r3
   82e9e:	4302      	orrs	r2, r0
   82ea0:	f8c8 2004 	str.w	r2, [r8, #4]
   82ea4:	e775      	b.n	82d92 <_malloc_r+0x396>
   82ea6:	f240 5354 	movw	r3, #1364	; 0x554
   82eaa:	459c      	cmp	ip, r3
   82eac:	d81b      	bhi.n	82ee6 <_malloc_r+0x4ea>
   82eae:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   82eb2:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   82eb6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82eba:	e5e7      	b.n	82a8c <_malloc_r+0x90>
   82ebc:	f10a 0a10 	add.w	sl, sl, #16
   82ec0:	e6a3      	b.n	82c0a <_malloc_r+0x20e>
   82ec2:	2b54      	cmp	r3, #84	; 0x54
   82ec4:	d81f      	bhi.n	82f06 <_malloc_r+0x50a>
   82ec6:	0b0a      	lsrs	r2, r1, #12
   82ec8:	326e      	adds	r2, #110	; 0x6e
   82eca:	0050      	lsls	r0, r2, #1
   82ecc:	e74f      	b.n	82d6e <_malloc_r+0x372>
   82ece:	f3cb 010b 	ubfx	r1, fp, #0, #12
   82ed2:	2900      	cmp	r1, #0
   82ed4:	f47f aeb1 	bne.w	82c3a <_malloc_r+0x23e>
   82ed8:	eb0a 0109 	add.w	r1, sl, r9
   82edc:	68ba      	ldr	r2, [r7, #8]
   82ede:	f041 0101 	orr.w	r1, r1, #1
   82ee2:	6051      	str	r1, [r2, #4]
   82ee4:	e6f6      	b.n	82cd4 <_malloc_r+0x2d8>
   82ee6:	21fc      	movs	r1, #252	; 0xfc
   82ee8:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   82eec:	e5ce      	b.n	82a8c <_malloc_r+0x90>
   82eee:	2201      	movs	r2, #1
   82ef0:	f04f 0a00 	mov.w	sl, #0
   82ef4:	e6cb      	b.n	82c8e <_malloc_r+0x292>
   82ef6:	f104 0108 	add.w	r1, r4, #8
   82efa:	4630      	mov	r0, r6
   82efc:	f7ff fa80 	bl	82400 <_free_r>
   82f00:	f8da 3000 	ldr.w	r3, [sl]
   82f04:	e6e6      	b.n	82cd4 <_malloc_r+0x2d8>
   82f06:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82f0a:	d803      	bhi.n	82f14 <_malloc_r+0x518>
   82f0c:	0bca      	lsrs	r2, r1, #15
   82f0e:	3277      	adds	r2, #119	; 0x77
   82f10:	0050      	lsls	r0, r2, #1
   82f12:	e72c      	b.n	82d6e <_malloc_r+0x372>
   82f14:	f240 5254 	movw	r2, #1364	; 0x554
   82f18:	4293      	cmp	r3, r2
   82f1a:	d803      	bhi.n	82f24 <_malloc_r+0x528>
   82f1c:	0c8a      	lsrs	r2, r1, #18
   82f1e:	327c      	adds	r2, #124	; 0x7c
   82f20:	0050      	lsls	r0, r2, #1
   82f22:	e724      	b.n	82d6e <_malloc_r+0x372>
   82f24:	20fc      	movs	r0, #252	; 0xfc
   82f26:	227e      	movs	r2, #126	; 0x7e
   82f28:	e721      	b.n	82d6e <_malloc_r+0x372>
   82f2a:	687b      	ldr	r3, [r7, #4]
   82f2c:	e78d      	b.n	82e4a <_malloc_r+0x44e>
   82f2e:	bf00      	nop
   82f30:	20070588 	.word	0x20070588

00082f34 <memchr>:
   82f34:	0783      	lsls	r3, r0, #30
   82f36:	b470      	push	{r4, r5, r6}
   82f38:	b2c9      	uxtb	r1, r1
   82f3a:	d040      	beq.n	82fbe <memchr+0x8a>
   82f3c:	1e54      	subs	r4, r2, #1
   82f3e:	b32a      	cbz	r2, 82f8c <memchr+0x58>
   82f40:	7803      	ldrb	r3, [r0, #0]
   82f42:	428b      	cmp	r3, r1
   82f44:	d023      	beq.n	82f8e <memchr+0x5a>
   82f46:	1c43      	adds	r3, r0, #1
   82f48:	e004      	b.n	82f54 <memchr+0x20>
   82f4a:	b1fc      	cbz	r4, 82f8c <memchr+0x58>
   82f4c:	7805      	ldrb	r5, [r0, #0]
   82f4e:	4614      	mov	r4, r2
   82f50:	428d      	cmp	r5, r1
   82f52:	d01c      	beq.n	82f8e <memchr+0x5a>
   82f54:	f013 0f03 	tst.w	r3, #3
   82f58:	4618      	mov	r0, r3
   82f5a:	f104 32ff 	add.w	r2, r4, #4294967295
   82f5e:	f103 0301 	add.w	r3, r3, #1
   82f62:	d1f2      	bne.n	82f4a <memchr+0x16>
   82f64:	2c03      	cmp	r4, #3
   82f66:	d814      	bhi.n	82f92 <memchr+0x5e>
   82f68:	1e65      	subs	r5, r4, #1
   82f6a:	b354      	cbz	r4, 82fc2 <memchr+0x8e>
   82f6c:	7803      	ldrb	r3, [r0, #0]
   82f6e:	428b      	cmp	r3, r1
   82f70:	d00d      	beq.n	82f8e <memchr+0x5a>
   82f72:	1c42      	adds	r2, r0, #1
   82f74:	2300      	movs	r3, #0
   82f76:	e002      	b.n	82f7e <memchr+0x4a>
   82f78:	7804      	ldrb	r4, [r0, #0]
   82f7a:	428c      	cmp	r4, r1
   82f7c:	d007      	beq.n	82f8e <memchr+0x5a>
   82f7e:	42ab      	cmp	r3, r5
   82f80:	4610      	mov	r0, r2
   82f82:	f103 0301 	add.w	r3, r3, #1
   82f86:	f102 0201 	add.w	r2, r2, #1
   82f8a:	d1f5      	bne.n	82f78 <memchr+0x44>
   82f8c:	2000      	movs	r0, #0
   82f8e:	bc70      	pop	{r4, r5, r6}
   82f90:	4770      	bx	lr
   82f92:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   82f96:	4603      	mov	r3, r0
   82f98:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   82f9c:	681a      	ldr	r2, [r3, #0]
   82f9e:	4618      	mov	r0, r3
   82fa0:	4072      	eors	r2, r6
   82fa2:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   82fa6:	ea25 0202 	bic.w	r2, r5, r2
   82faa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   82fae:	f103 0304 	add.w	r3, r3, #4
   82fb2:	d1d9      	bne.n	82f68 <memchr+0x34>
   82fb4:	3c04      	subs	r4, #4
   82fb6:	2c03      	cmp	r4, #3
   82fb8:	4618      	mov	r0, r3
   82fba:	d8ef      	bhi.n	82f9c <memchr+0x68>
   82fbc:	e7d4      	b.n	82f68 <memchr+0x34>
   82fbe:	4614      	mov	r4, r2
   82fc0:	e7d0      	b.n	82f64 <memchr+0x30>
   82fc2:	4620      	mov	r0, r4
   82fc4:	e7e3      	b.n	82f8e <memchr+0x5a>
   82fc6:	bf00      	nop

00082fc8 <memcpy>:
   82fc8:	4684      	mov	ip, r0
   82fca:	ea41 0300 	orr.w	r3, r1, r0
   82fce:	f013 0303 	ands.w	r3, r3, #3
   82fd2:	d149      	bne.n	83068 <memcpy+0xa0>
   82fd4:	3a40      	subs	r2, #64	; 0x40
   82fd6:	d323      	bcc.n	83020 <memcpy+0x58>
   82fd8:	680b      	ldr	r3, [r1, #0]
   82fda:	6003      	str	r3, [r0, #0]
   82fdc:	684b      	ldr	r3, [r1, #4]
   82fde:	6043      	str	r3, [r0, #4]
   82fe0:	688b      	ldr	r3, [r1, #8]
   82fe2:	6083      	str	r3, [r0, #8]
   82fe4:	68cb      	ldr	r3, [r1, #12]
   82fe6:	60c3      	str	r3, [r0, #12]
   82fe8:	690b      	ldr	r3, [r1, #16]
   82fea:	6103      	str	r3, [r0, #16]
   82fec:	694b      	ldr	r3, [r1, #20]
   82fee:	6143      	str	r3, [r0, #20]
   82ff0:	698b      	ldr	r3, [r1, #24]
   82ff2:	6183      	str	r3, [r0, #24]
   82ff4:	69cb      	ldr	r3, [r1, #28]
   82ff6:	61c3      	str	r3, [r0, #28]
   82ff8:	6a0b      	ldr	r3, [r1, #32]
   82ffa:	6203      	str	r3, [r0, #32]
   82ffc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82ffe:	6243      	str	r3, [r0, #36]	; 0x24
   83000:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83002:	6283      	str	r3, [r0, #40]	; 0x28
   83004:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83006:	62c3      	str	r3, [r0, #44]	; 0x2c
   83008:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8300a:	6303      	str	r3, [r0, #48]	; 0x30
   8300c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8300e:	6343      	str	r3, [r0, #52]	; 0x34
   83010:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83012:	6383      	str	r3, [r0, #56]	; 0x38
   83014:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83016:	63c3      	str	r3, [r0, #60]	; 0x3c
   83018:	3040      	adds	r0, #64	; 0x40
   8301a:	3140      	adds	r1, #64	; 0x40
   8301c:	3a40      	subs	r2, #64	; 0x40
   8301e:	d2db      	bcs.n	82fd8 <memcpy+0x10>
   83020:	3230      	adds	r2, #48	; 0x30
   83022:	d30b      	bcc.n	8303c <memcpy+0x74>
   83024:	680b      	ldr	r3, [r1, #0]
   83026:	6003      	str	r3, [r0, #0]
   83028:	684b      	ldr	r3, [r1, #4]
   8302a:	6043      	str	r3, [r0, #4]
   8302c:	688b      	ldr	r3, [r1, #8]
   8302e:	6083      	str	r3, [r0, #8]
   83030:	68cb      	ldr	r3, [r1, #12]
   83032:	60c3      	str	r3, [r0, #12]
   83034:	3010      	adds	r0, #16
   83036:	3110      	adds	r1, #16
   83038:	3a10      	subs	r2, #16
   8303a:	d2f3      	bcs.n	83024 <memcpy+0x5c>
   8303c:	320c      	adds	r2, #12
   8303e:	d305      	bcc.n	8304c <memcpy+0x84>
   83040:	f851 3b04 	ldr.w	r3, [r1], #4
   83044:	f840 3b04 	str.w	r3, [r0], #4
   83048:	3a04      	subs	r2, #4
   8304a:	d2f9      	bcs.n	83040 <memcpy+0x78>
   8304c:	3204      	adds	r2, #4
   8304e:	d008      	beq.n	83062 <memcpy+0x9a>
   83050:	07d2      	lsls	r2, r2, #31
   83052:	bf1c      	itt	ne
   83054:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83058:	f800 3b01 	strbne.w	r3, [r0], #1
   8305c:	d301      	bcc.n	83062 <memcpy+0x9a>
   8305e:	880b      	ldrh	r3, [r1, #0]
   83060:	8003      	strh	r3, [r0, #0]
   83062:	4660      	mov	r0, ip
   83064:	4770      	bx	lr
   83066:	bf00      	nop
   83068:	2a08      	cmp	r2, #8
   8306a:	d313      	bcc.n	83094 <memcpy+0xcc>
   8306c:	078b      	lsls	r3, r1, #30
   8306e:	d0b1      	beq.n	82fd4 <memcpy+0xc>
   83070:	f010 0303 	ands.w	r3, r0, #3
   83074:	d0ae      	beq.n	82fd4 <memcpy+0xc>
   83076:	f1c3 0304 	rsb	r3, r3, #4
   8307a:	1ad2      	subs	r2, r2, r3
   8307c:	07db      	lsls	r3, r3, #31
   8307e:	bf1c      	itt	ne
   83080:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83084:	f800 3b01 	strbne.w	r3, [r0], #1
   83088:	d3a4      	bcc.n	82fd4 <memcpy+0xc>
   8308a:	f831 3b02 	ldrh.w	r3, [r1], #2
   8308e:	f820 3b02 	strh.w	r3, [r0], #2
   83092:	e79f      	b.n	82fd4 <memcpy+0xc>
   83094:	3a04      	subs	r2, #4
   83096:	d3d9      	bcc.n	8304c <memcpy+0x84>
   83098:	3a01      	subs	r2, #1
   8309a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8309e:	f800 3b01 	strb.w	r3, [r0], #1
   830a2:	d2f9      	bcs.n	83098 <memcpy+0xd0>
   830a4:	780b      	ldrb	r3, [r1, #0]
   830a6:	7003      	strb	r3, [r0, #0]
   830a8:	784b      	ldrb	r3, [r1, #1]
   830aa:	7043      	strb	r3, [r0, #1]
   830ac:	788b      	ldrb	r3, [r1, #2]
   830ae:	7083      	strb	r3, [r0, #2]
   830b0:	4660      	mov	r0, ip
   830b2:	4770      	bx	lr

000830b4 <memmove>:
   830b4:	4288      	cmp	r0, r1
   830b6:	b4f0      	push	{r4, r5, r6, r7}
   830b8:	d910      	bls.n	830dc <memmove+0x28>
   830ba:	188c      	adds	r4, r1, r2
   830bc:	42a0      	cmp	r0, r4
   830be:	d20d      	bcs.n	830dc <memmove+0x28>
   830c0:	1885      	adds	r5, r0, r2
   830c2:	1e53      	subs	r3, r2, #1
   830c4:	b142      	cbz	r2, 830d8 <memmove+0x24>
   830c6:	4621      	mov	r1, r4
   830c8:	462a      	mov	r2, r5
   830ca:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   830ce:	3b01      	subs	r3, #1
   830d0:	f802 4d01 	strb.w	r4, [r2, #-1]!
   830d4:	1c5c      	adds	r4, r3, #1
   830d6:	d1f8      	bne.n	830ca <memmove+0x16>
   830d8:	bcf0      	pop	{r4, r5, r6, r7}
   830da:	4770      	bx	lr
   830dc:	2a0f      	cmp	r2, #15
   830de:	d944      	bls.n	8316a <memmove+0xb6>
   830e0:	ea40 0301 	orr.w	r3, r0, r1
   830e4:	079b      	lsls	r3, r3, #30
   830e6:	d144      	bne.n	83172 <memmove+0xbe>
   830e8:	f1a2 0710 	sub.w	r7, r2, #16
   830ec:	093f      	lsrs	r7, r7, #4
   830ee:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   830f2:	3610      	adds	r6, #16
   830f4:	460c      	mov	r4, r1
   830f6:	4603      	mov	r3, r0
   830f8:	6825      	ldr	r5, [r4, #0]
   830fa:	3310      	adds	r3, #16
   830fc:	f843 5c10 	str.w	r5, [r3, #-16]
   83100:	6865      	ldr	r5, [r4, #4]
   83102:	3410      	adds	r4, #16
   83104:	f843 5c0c 	str.w	r5, [r3, #-12]
   83108:	f854 5c08 	ldr.w	r5, [r4, #-8]
   8310c:	f843 5c08 	str.w	r5, [r3, #-8]
   83110:	f854 5c04 	ldr.w	r5, [r4, #-4]
   83114:	f843 5c04 	str.w	r5, [r3, #-4]
   83118:	42b3      	cmp	r3, r6
   8311a:	d1ed      	bne.n	830f8 <memmove+0x44>
   8311c:	1c7b      	adds	r3, r7, #1
   8311e:	f002 0c0f 	and.w	ip, r2, #15
   83122:	011b      	lsls	r3, r3, #4
   83124:	f1bc 0f03 	cmp.w	ip, #3
   83128:	4419      	add	r1, r3
   8312a:	4403      	add	r3, r0
   8312c:	d923      	bls.n	83176 <memmove+0xc2>
   8312e:	460e      	mov	r6, r1
   83130:	461d      	mov	r5, r3
   83132:	4664      	mov	r4, ip
   83134:	f856 7b04 	ldr.w	r7, [r6], #4
   83138:	3c04      	subs	r4, #4
   8313a:	2c03      	cmp	r4, #3
   8313c:	f845 7b04 	str.w	r7, [r5], #4
   83140:	d8f8      	bhi.n	83134 <memmove+0x80>
   83142:	f1ac 0404 	sub.w	r4, ip, #4
   83146:	f024 0403 	bic.w	r4, r4, #3
   8314a:	3404      	adds	r4, #4
   8314c:	f002 0203 	and.w	r2, r2, #3
   83150:	4423      	add	r3, r4
   83152:	4421      	add	r1, r4
   83154:	2a00      	cmp	r2, #0
   83156:	d0bf      	beq.n	830d8 <memmove+0x24>
   83158:	441a      	add	r2, r3
   8315a:	f811 4b01 	ldrb.w	r4, [r1], #1
   8315e:	f803 4b01 	strb.w	r4, [r3], #1
   83162:	4293      	cmp	r3, r2
   83164:	d1f9      	bne.n	8315a <memmove+0xa6>
   83166:	bcf0      	pop	{r4, r5, r6, r7}
   83168:	4770      	bx	lr
   8316a:	4603      	mov	r3, r0
   8316c:	2a00      	cmp	r2, #0
   8316e:	d1f3      	bne.n	83158 <memmove+0xa4>
   83170:	e7b2      	b.n	830d8 <memmove+0x24>
   83172:	4603      	mov	r3, r0
   83174:	e7f0      	b.n	83158 <memmove+0xa4>
   83176:	4662      	mov	r2, ip
   83178:	2a00      	cmp	r2, #0
   8317a:	d1ed      	bne.n	83158 <memmove+0xa4>
   8317c:	e7ac      	b.n	830d8 <memmove+0x24>
   8317e:	bf00      	nop

00083180 <__malloc_lock>:
   83180:	4770      	bx	lr
   83182:	bf00      	nop

00083184 <__malloc_unlock>:
   83184:	4770      	bx	lr
   83186:	bf00      	nop

00083188 <_realloc_r>:
   83188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8318c:	460c      	mov	r4, r1
   8318e:	b083      	sub	sp, #12
   83190:	4690      	mov	r8, r2
   83192:	4681      	mov	r9, r0
   83194:	2900      	cmp	r1, #0
   83196:	f000 80ba 	beq.w	8330e <_realloc_r+0x186>
   8319a:	f7ff fff1 	bl	83180 <__malloc_lock>
   8319e:	f108 060b 	add.w	r6, r8, #11
   831a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   831a6:	2e16      	cmp	r6, #22
   831a8:	f023 0503 	bic.w	r5, r3, #3
   831ac:	f1a4 0708 	sub.w	r7, r4, #8
   831b0:	d84b      	bhi.n	8324a <_realloc_r+0xc2>
   831b2:	2110      	movs	r1, #16
   831b4:	460e      	mov	r6, r1
   831b6:	45b0      	cmp	r8, r6
   831b8:	d84c      	bhi.n	83254 <_realloc_r+0xcc>
   831ba:	428d      	cmp	r5, r1
   831bc:	da51      	bge.n	83262 <_realloc_r+0xda>
   831be:	f8df b384 	ldr.w	fp, [pc, #900]	; 83544 <_realloc_r+0x3bc>
   831c2:	1978      	adds	r0, r7, r5
   831c4:	f8db e008 	ldr.w	lr, [fp, #8]
   831c8:	4586      	cmp	lr, r0
   831ca:	f000 80a6 	beq.w	8331a <_realloc_r+0x192>
   831ce:	6842      	ldr	r2, [r0, #4]
   831d0:	f022 0c01 	bic.w	ip, r2, #1
   831d4:	4484      	add	ip, r0
   831d6:	f8dc c004 	ldr.w	ip, [ip, #4]
   831da:	f01c 0f01 	tst.w	ip, #1
   831de:	d054      	beq.n	8328a <_realloc_r+0x102>
   831e0:	2200      	movs	r2, #0
   831e2:	4610      	mov	r0, r2
   831e4:	07db      	lsls	r3, r3, #31
   831e6:	d46f      	bmi.n	832c8 <_realloc_r+0x140>
   831e8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   831ec:	ebc3 0a07 	rsb	sl, r3, r7
   831f0:	f8da 3004 	ldr.w	r3, [sl, #4]
   831f4:	f023 0303 	bic.w	r3, r3, #3
   831f8:	442b      	add	r3, r5
   831fa:	2800      	cmp	r0, #0
   831fc:	d062      	beq.n	832c4 <_realloc_r+0x13c>
   831fe:	4570      	cmp	r0, lr
   83200:	f000 80e9 	beq.w	833d6 <_realloc_r+0x24e>
   83204:	eb02 0e03 	add.w	lr, r2, r3
   83208:	458e      	cmp	lr, r1
   8320a:	db5b      	blt.n	832c4 <_realloc_r+0x13c>
   8320c:	68c3      	ldr	r3, [r0, #12]
   8320e:	6882      	ldr	r2, [r0, #8]
   83210:	46d0      	mov	r8, sl
   83212:	60d3      	str	r3, [r2, #12]
   83214:	609a      	str	r2, [r3, #8]
   83216:	f858 1f08 	ldr.w	r1, [r8, #8]!
   8321a:	f8da 300c 	ldr.w	r3, [sl, #12]
   8321e:	1f2a      	subs	r2, r5, #4
   83220:	2a24      	cmp	r2, #36	; 0x24
   83222:	60cb      	str	r3, [r1, #12]
   83224:	6099      	str	r1, [r3, #8]
   83226:	f200 8123 	bhi.w	83470 <_realloc_r+0x2e8>
   8322a:	2a13      	cmp	r2, #19
   8322c:	f240 80b0 	bls.w	83390 <_realloc_r+0x208>
   83230:	6823      	ldr	r3, [r4, #0]
   83232:	2a1b      	cmp	r2, #27
   83234:	f8ca 3008 	str.w	r3, [sl, #8]
   83238:	6863      	ldr	r3, [r4, #4]
   8323a:	f8ca 300c 	str.w	r3, [sl, #12]
   8323e:	f200 812b 	bhi.w	83498 <_realloc_r+0x310>
   83242:	3408      	adds	r4, #8
   83244:	f10a 0310 	add.w	r3, sl, #16
   83248:	e0a3      	b.n	83392 <_realloc_r+0x20a>
   8324a:	f026 0607 	bic.w	r6, r6, #7
   8324e:	2e00      	cmp	r6, #0
   83250:	4631      	mov	r1, r6
   83252:	dab0      	bge.n	831b6 <_realloc_r+0x2e>
   83254:	230c      	movs	r3, #12
   83256:	2000      	movs	r0, #0
   83258:	f8c9 3000 	str.w	r3, [r9]
   8325c:	b003      	add	sp, #12
   8325e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83262:	46a0      	mov	r8, r4
   83264:	1baa      	subs	r2, r5, r6
   83266:	2a0f      	cmp	r2, #15
   83268:	f003 0301 	and.w	r3, r3, #1
   8326c:	d81a      	bhi.n	832a4 <_realloc_r+0x11c>
   8326e:	432b      	orrs	r3, r5
   83270:	607b      	str	r3, [r7, #4]
   83272:	443d      	add	r5, r7
   83274:	686b      	ldr	r3, [r5, #4]
   83276:	f043 0301 	orr.w	r3, r3, #1
   8327a:	606b      	str	r3, [r5, #4]
   8327c:	4648      	mov	r0, r9
   8327e:	f7ff ff81 	bl	83184 <__malloc_unlock>
   83282:	4640      	mov	r0, r8
   83284:	b003      	add	sp, #12
   83286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8328a:	f022 0203 	bic.w	r2, r2, #3
   8328e:	eb02 0c05 	add.w	ip, r2, r5
   83292:	458c      	cmp	ip, r1
   83294:	dba6      	blt.n	831e4 <_realloc_r+0x5c>
   83296:	68c2      	ldr	r2, [r0, #12]
   83298:	6881      	ldr	r1, [r0, #8]
   8329a:	46a0      	mov	r8, r4
   8329c:	60ca      	str	r2, [r1, #12]
   8329e:	4665      	mov	r5, ip
   832a0:	6091      	str	r1, [r2, #8]
   832a2:	e7df      	b.n	83264 <_realloc_r+0xdc>
   832a4:	19b9      	adds	r1, r7, r6
   832a6:	4333      	orrs	r3, r6
   832a8:	f042 0001 	orr.w	r0, r2, #1
   832ac:	607b      	str	r3, [r7, #4]
   832ae:	440a      	add	r2, r1
   832b0:	6048      	str	r0, [r1, #4]
   832b2:	6853      	ldr	r3, [r2, #4]
   832b4:	3108      	adds	r1, #8
   832b6:	f043 0301 	orr.w	r3, r3, #1
   832ba:	6053      	str	r3, [r2, #4]
   832bc:	4648      	mov	r0, r9
   832be:	f7ff f89f 	bl	82400 <_free_r>
   832c2:	e7db      	b.n	8327c <_realloc_r+0xf4>
   832c4:	428b      	cmp	r3, r1
   832c6:	da33      	bge.n	83330 <_realloc_r+0x1a8>
   832c8:	4641      	mov	r1, r8
   832ca:	4648      	mov	r0, r9
   832cc:	f7ff fb96 	bl	829fc <_malloc_r>
   832d0:	4680      	mov	r8, r0
   832d2:	2800      	cmp	r0, #0
   832d4:	d0d2      	beq.n	8327c <_realloc_r+0xf4>
   832d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   832da:	f1a0 0108 	sub.w	r1, r0, #8
   832de:	f023 0201 	bic.w	r2, r3, #1
   832e2:	443a      	add	r2, r7
   832e4:	4291      	cmp	r1, r2
   832e6:	f000 80bc 	beq.w	83462 <_realloc_r+0x2da>
   832ea:	1f2a      	subs	r2, r5, #4
   832ec:	2a24      	cmp	r2, #36	; 0x24
   832ee:	d86e      	bhi.n	833ce <_realloc_r+0x246>
   832f0:	2a13      	cmp	r2, #19
   832f2:	d842      	bhi.n	8337a <_realloc_r+0x1f2>
   832f4:	4603      	mov	r3, r0
   832f6:	4622      	mov	r2, r4
   832f8:	6811      	ldr	r1, [r2, #0]
   832fa:	6019      	str	r1, [r3, #0]
   832fc:	6851      	ldr	r1, [r2, #4]
   832fe:	6059      	str	r1, [r3, #4]
   83300:	6892      	ldr	r2, [r2, #8]
   83302:	609a      	str	r2, [r3, #8]
   83304:	4621      	mov	r1, r4
   83306:	4648      	mov	r0, r9
   83308:	f7ff f87a 	bl	82400 <_free_r>
   8330c:	e7b6      	b.n	8327c <_realloc_r+0xf4>
   8330e:	4611      	mov	r1, r2
   83310:	b003      	add	sp, #12
   83312:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83316:	f7ff bb71 	b.w	829fc <_malloc_r>
   8331a:	f8de 2004 	ldr.w	r2, [lr, #4]
   8331e:	f106 0c10 	add.w	ip, r6, #16
   83322:	f022 0203 	bic.w	r2, r2, #3
   83326:	1950      	adds	r0, r2, r5
   83328:	4560      	cmp	r0, ip
   8332a:	da3d      	bge.n	833a8 <_realloc_r+0x220>
   8332c:	4670      	mov	r0, lr
   8332e:	e759      	b.n	831e4 <_realloc_r+0x5c>
   83330:	46d0      	mov	r8, sl
   83332:	f858 0f08 	ldr.w	r0, [r8, #8]!
   83336:	f8da 100c 	ldr.w	r1, [sl, #12]
   8333a:	1f2a      	subs	r2, r5, #4
   8333c:	2a24      	cmp	r2, #36	; 0x24
   8333e:	60c1      	str	r1, [r0, #12]
   83340:	6088      	str	r0, [r1, #8]
   83342:	f200 80a0 	bhi.w	83486 <_realloc_r+0x2fe>
   83346:	2a13      	cmp	r2, #19
   83348:	f240 809b 	bls.w	83482 <_realloc_r+0x2fa>
   8334c:	6821      	ldr	r1, [r4, #0]
   8334e:	2a1b      	cmp	r2, #27
   83350:	f8ca 1008 	str.w	r1, [sl, #8]
   83354:	6861      	ldr	r1, [r4, #4]
   83356:	f8ca 100c 	str.w	r1, [sl, #12]
   8335a:	f200 80b2 	bhi.w	834c2 <_realloc_r+0x33a>
   8335e:	3408      	adds	r4, #8
   83360:	f10a 0210 	add.w	r2, sl, #16
   83364:	6821      	ldr	r1, [r4, #0]
   83366:	461d      	mov	r5, r3
   83368:	6011      	str	r1, [r2, #0]
   8336a:	6861      	ldr	r1, [r4, #4]
   8336c:	4657      	mov	r7, sl
   8336e:	6051      	str	r1, [r2, #4]
   83370:	68a3      	ldr	r3, [r4, #8]
   83372:	6093      	str	r3, [r2, #8]
   83374:	f8da 3004 	ldr.w	r3, [sl, #4]
   83378:	e774      	b.n	83264 <_realloc_r+0xdc>
   8337a:	6823      	ldr	r3, [r4, #0]
   8337c:	2a1b      	cmp	r2, #27
   8337e:	6003      	str	r3, [r0, #0]
   83380:	6863      	ldr	r3, [r4, #4]
   83382:	6043      	str	r3, [r0, #4]
   83384:	d862      	bhi.n	8344c <_realloc_r+0x2c4>
   83386:	f100 0308 	add.w	r3, r0, #8
   8338a:	f104 0208 	add.w	r2, r4, #8
   8338e:	e7b3      	b.n	832f8 <_realloc_r+0x170>
   83390:	4643      	mov	r3, r8
   83392:	6822      	ldr	r2, [r4, #0]
   83394:	4675      	mov	r5, lr
   83396:	601a      	str	r2, [r3, #0]
   83398:	6862      	ldr	r2, [r4, #4]
   8339a:	4657      	mov	r7, sl
   8339c:	605a      	str	r2, [r3, #4]
   8339e:	68a2      	ldr	r2, [r4, #8]
   833a0:	609a      	str	r2, [r3, #8]
   833a2:	f8da 3004 	ldr.w	r3, [sl, #4]
   833a6:	e75d      	b.n	83264 <_realloc_r+0xdc>
   833a8:	1b83      	subs	r3, r0, r6
   833aa:	4437      	add	r7, r6
   833ac:	f043 0301 	orr.w	r3, r3, #1
   833b0:	f8cb 7008 	str.w	r7, [fp, #8]
   833b4:	607b      	str	r3, [r7, #4]
   833b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   833ba:	4648      	mov	r0, r9
   833bc:	f003 0301 	and.w	r3, r3, #1
   833c0:	431e      	orrs	r6, r3
   833c2:	f844 6c04 	str.w	r6, [r4, #-4]
   833c6:	f7ff fedd 	bl	83184 <__malloc_unlock>
   833ca:	4620      	mov	r0, r4
   833cc:	e75a      	b.n	83284 <_realloc_r+0xfc>
   833ce:	4621      	mov	r1, r4
   833d0:	f7ff fe70 	bl	830b4 <memmove>
   833d4:	e796      	b.n	83304 <_realloc_r+0x17c>
   833d6:	eb02 0c03 	add.w	ip, r2, r3
   833da:	f106 0210 	add.w	r2, r6, #16
   833de:	4594      	cmp	ip, r2
   833e0:	f6ff af70 	blt.w	832c4 <_realloc_r+0x13c>
   833e4:	4657      	mov	r7, sl
   833e6:	f857 1f08 	ldr.w	r1, [r7, #8]!
   833ea:	f8da 300c 	ldr.w	r3, [sl, #12]
   833ee:	1f2a      	subs	r2, r5, #4
   833f0:	2a24      	cmp	r2, #36	; 0x24
   833f2:	60cb      	str	r3, [r1, #12]
   833f4:	6099      	str	r1, [r3, #8]
   833f6:	f200 8086 	bhi.w	83506 <_realloc_r+0x37e>
   833fa:	2a13      	cmp	r2, #19
   833fc:	d977      	bls.n	834ee <_realloc_r+0x366>
   833fe:	6823      	ldr	r3, [r4, #0]
   83400:	2a1b      	cmp	r2, #27
   83402:	f8ca 3008 	str.w	r3, [sl, #8]
   83406:	6863      	ldr	r3, [r4, #4]
   83408:	f8ca 300c 	str.w	r3, [sl, #12]
   8340c:	f200 8084 	bhi.w	83518 <_realloc_r+0x390>
   83410:	3408      	adds	r4, #8
   83412:	f10a 0310 	add.w	r3, sl, #16
   83416:	6822      	ldr	r2, [r4, #0]
   83418:	601a      	str	r2, [r3, #0]
   8341a:	6862      	ldr	r2, [r4, #4]
   8341c:	605a      	str	r2, [r3, #4]
   8341e:	68a2      	ldr	r2, [r4, #8]
   83420:	609a      	str	r2, [r3, #8]
   83422:	ebc6 020c 	rsb	r2, r6, ip
   83426:	eb0a 0306 	add.w	r3, sl, r6
   8342a:	f042 0201 	orr.w	r2, r2, #1
   8342e:	f8cb 3008 	str.w	r3, [fp, #8]
   83432:	605a      	str	r2, [r3, #4]
   83434:	f8da 3004 	ldr.w	r3, [sl, #4]
   83438:	4648      	mov	r0, r9
   8343a:	f003 0301 	and.w	r3, r3, #1
   8343e:	431e      	orrs	r6, r3
   83440:	f8ca 6004 	str.w	r6, [sl, #4]
   83444:	f7ff fe9e 	bl	83184 <__malloc_unlock>
   83448:	4638      	mov	r0, r7
   8344a:	e71b      	b.n	83284 <_realloc_r+0xfc>
   8344c:	68a3      	ldr	r3, [r4, #8]
   8344e:	2a24      	cmp	r2, #36	; 0x24
   83450:	6083      	str	r3, [r0, #8]
   83452:	68e3      	ldr	r3, [r4, #12]
   83454:	60c3      	str	r3, [r0, #12]
   83456:	d02b      	beq.n	834b0 <_realloc_r+0x328>
   83458:	f100 0310 	add.w	r3, r0, #16
   8345c:	f104 0210 	add.w	r2, r4, #16
   83460:	e74a      	b.n	832f8 <_realloc_r+0x170>
   83462:	f850 2c04 	ldr.w	r2, [r0, #-4]
   83466:	46a0      	mov	r8, r4
   83468:	f022 0203 	bic.w	r2, r2, #3
   8346c:	4415      	add	r5, r2
   8346e:	e6f9      	b.n	83264 <_realloc_r+0xdc>
   83470:	4621      	mov	r1, r4
   83472:	4640      	mov	r0, r8
   83474:	4675      	mov	r5, lr
   83476:	4657      	mov	r7, sl
   83478:	f7ff fe1c 	bl	830b4 <memmove>
   8347c:	f8da 3004 	ldr.w	r3, [sl, #4]
   83480:	e6f0      	b.n	83264 <_realloc_r+0xdc>
   83482:	4642      	mov	r2, r8
   83484:	e76e      	b.n	83364 <_realloc_r+0x1dc>
   83486:	4621      	mov	r1, r4
   83488:	4640      	mov	r0, r8
   8348a:	461d      	mov	r5, r3
   8348c:	4657      	mov	r7, sl
   8348e:	f7ff fe11 	bl	830b4 <memmove>
   83492:	f8da 3004 	ldr.w	r3, [sl, #4]
   83496:	e6e5      	b.n	83264 <_realloc_r+0xdc>
   83498:	68a3      	ldr	r3, [r4, #8]
   8349a:	2a24      	cmp	r2, #36	; 0x24
   8349c:	f8ca 3010 	str.w	r3, [sl, #16]
   834a0:	68e3      	ldr	r3, [r4, #12]
   834a2:	f8ca 3014 	str.w	r3, [sl, #20]
   834a6:	d018      	beq.n	834da <_realloc_r+0x352>
   834a8:	3410      	adds	r4, #16
   834aa:	f10a 0318 	add.w	r3, sl, #24
   834ae:	e770      	b.n	83392 <_realloc_r+0x20a>
   834b0:	6922      	ldr	r2, [r4, #16]
   834b2:	f100 0318 	add.w	r3, r0, #24
   834b6:	6102      	str	r2, [r0, #16]
   834b8:	6961      	ldr	r1, [r4, #20]
   834ba:	f104 0218 	add.w	r2, r4, #24
   834be:	6141      	str	r1, [r0, #20]
   834c0:	e71a      	b.n	832f8 <_realloc_r+0x170>
   834c2:	68a1      	ldr	r1, [r4, #8]
   834c4:	2a24      	cmp	r2, #36	; 0x24
   834c6:	f8ca 1010 	str.w	r1, [sl, #16]
   834ca:	68e1      	ldr	r1, [r4, #12]
   834cc:	f8ca 1014 	str.w	r1, [sl, #20]
   834d0:	d00f      	beq.n	834f2 <_realloc_r+0x36a>
   834d2:	3410      	adds	r4, #16
   834d4:	f10a 0218 	add.w	r2, sl, #24
   834d8:	e744      	b.n	83364 <_realloc_r+0x1dc>
   834da:	6922      	ldr	r2, [r4, #16]
   834dc:	f10a 0320 	add.w	r3, sl, #32
   834e0:	f8ca 2018 	str.w	r2, [sl, #24]
   834e4:	6962      	ldr	r2, [r4, #20]
   834e6:	3418      	adds	r4, #24
   834e8:	f8ca 201c 	str.w	r2, [sl, #28]
   834ec:	e751      	b.n	83392 <_realloc_r+0x20a>
   834ee:	463b      	mov	r3, r7
   834f0:	e791      	b.n	83416 <_realloc_r+0x28e>
   834f2:	6921      	ldr	r1, [r4, #16]
   834f4:	f10a 0220 	add.w	r2, sl, #32
   834f8:	f8ca 1018 	str.w	r1, [sl, #24]
   834fc:	6961      	ldr	r1, [r4, #20]
   834fe:	3418      	adds	r4, #24
   83500:	f8ca 101c 	str.w	r1, [sl, #28]
   83504:	e72e      	b.n	83364 <_realloc_r+0x1dc>
   83506:	4621      	mov	r1, r4
   83508:	4638      	mov	r0, r7
   8350a:	f8cd c004 	str.w	ip, [sp, #4]
   8350e:	f7ff fdd1 	bl	830b4 <memmove>
   83512:	f8dd c004 	ldr.w	ip, [sp, #4]
   83516:	e784      	b.n	83422 <_realloc_r+0x29a>
   83518:	68a3      	ldr	r3, [r4, #8]
   8351a:	2a24      	cmp	r2, #36	; 0x24
   8351c:	f8ca 3010 	str.w	r3, [sl, #16]
   83520:	68e3      	ldr	r3, [r4, #12]
   83522:	f8ca 3014 	str.w	r3, [sl, #20]
   83526:	d003      	beq.n	83530 <_realloc_r+0x3a8>
   83528:	3410      	adds	r4, #16
   8352a:	f10a 0318 	add.w	r3, sl, #24
   8352e:	e772      	b.n	83416 <_realloc_r+0x28e>
   83530:	6922      	ldr	r2, [r4, #16]
   83532:	f10a 0320 	add.w	r3, sl, #32
   83536:	f8ca 2018 	str.w	r2, [sl, #24]
   8353a:	6962      	ldr	r2, [r4, #20]
   8353c:	3418      	adds	r4, #24
   8353e:	f8ca 201c 	str.w	r2, [sl, #28]
   83542:	e768      	b.n	83416 <_realloc_r+0x28e>
   83544:	20070588 	.word	0x20070588

00083548 <_sbrk_r>:
   83548:	b538      	push	{r3, r4, r5, lr}
   8354a:	4c07      	ldr	r4, [pc, #28]	; (83568 <_sbrk_r+0x20>)
   8354c:	2300      	movs	r3, #0
   8354e:	4605      	mov	r5, r0
   83550:	4608      	mov	r0, r1
   83552:	6023      	str	r3, [r4, #0]
   83554:	f7fd fbc0 	bl	80cd8 <_sbrk>
   83558:	1c43      	adds	r3, r0, #1
   8355a:	d000      	beq.n	8355e <_sbrk_r+0x16>
   8355c:	bd38      	pop	{r3, r4, r5, pc}
   8355e:	6823      	ldr	r3, [r4, #0]
   83560:	2b00      	cmp	r3, #0
   83562:	d0fb      	beq.n	8355c <_sbrk_r+0x14>
   83564:	602b      	str	r3, [r5, #0]
   83566:	bd38      	pop	{r3, r4, r5, pc}
   83568:	20070b0c 	.word	0x20070b0c

0008356c <__sread>:
   8356c:	b510      	push	{r4, lr}
   8356e:	460c      	mov	r4, r1
   83570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83574:	f000 f9f2 	bl	8395c <_read_r>
   83578:	2800      	cmp	r0, #0
   8357a:	db03      	blt.n	83584 <__sread+0x18>
   8357c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8357e:	4403      	add	r3, r0
   83580:	6523      	str	r3, [r4, #80]	; 0x50
   83582:	bd10      	pop	{r4, pc}
   83584:	89a3      	ldrh	r3, [r4, #12]
   83586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8358a:	81a3      	strh	r3, [r4, #12]
   8358c:	bd10      	pop	{r4, pc}
   8358e:	bf00      	nop

00083590 <__swrite>:
   83590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83594:	460c      	mov	r4, r1
   83596:	8989      	ldrh	r1, [r1, #12]
   83598:	461d      	mov	r5, r3
   8359a:	05cb      	lsls	r3, r1, #23
   8359c:	4616      	mov	r6, r2
   8359e:	4607      	mov	r7, r0
   835a0:	d506      	bpl.n	835b0 <__swrite+0x20>
   835a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   835a6:	2200      	movs	r2, #0
   835a8:	2302      	movs	r3, #2
   835aa:	f000 f9c3 	bl	83934 <_lseek_r>
   835ae:	89a1      	ldrh	r1, [r4, #12]
   835b0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   835b4:	81a1      	strh	r1, [r4, #12]
   835b6:	4638      	mov	r0, r7
   835b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   835bc:	4632      	mov	r2, r6
   835be:	462b      	mov	r3, r5
   835c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   835c4:	f000 b8ce 	b.w	83764 <_write_r>

000835c8 <__sseek>:
   835c8:	b510      	push	{r4, lr}
   835ca:	460c      	mov	r4, r1
   835cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   835d0:	f000 f9b0 	bl	83934 <_lseek_r>
   835d4:	89a3      	ldrh	r3, [r4, #12]
   835d6:	1c42      	adds	r2, r0, #1
   835d8:	bf0e      	itee	eq
   835da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   835de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   835e2:	6520      	strne	r0, [r4, #80]	; 0x50
   835e4:	81a3      	strh	r3, [r4, #12]
   835e6:	bd10      	pop	{r4, pc}

000835e8 <__sclose>:
   835e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   835ec:	f000 b922 	b.w	83834 <_close_r>

000835f0 <strlen>:
   835f0:	f020 0103 	bic.w	r1, r0, #3
   835f4:	f010 0003 	ands.w	r0, r0, #3
   835f8:	f1c0 0000 	rsb	r0, r0, #0
   835fc:	f851 3b04 	ldr.w	r3, [r1], #4
   83600:	f100 0c04 	add.w	ip, r0, #4
   83604:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83608:	f06f 0200 	mvn.w	r2, #0
   8360c:	bf1c      	itt	ne
   8360e:	fa22 f20c 	lsrne.w	r2, r2, ip
   83612:	4313      	orrne	r3, r2
   83614:	f04f 0c01 	mov.w	ip, #1
   83618:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8361c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83620:	eba3 020c 	sub.w	r2, r3, ip
   83624:	ea22 0203 	bic.w	r2, r2, r3
   83628:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8362c:	bf04      	itt	eq
   8362e:	f851 3b04 	ldreq.w	r3, [r1], #4
   83632:	3004      	addeq	r0, #4
   83634:	d0f4      	beq.n	83620 <strlen+0x30>
   83636:	f013 0fff 	tst.w	r3, #255	; 0xff
   8363a:	bf1f      	itttt	ne
   8363c:	3001      	addne	r0, #1
   8363e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   83642:	3001      	addne	r0, #1
   83644:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   83648:	bf18      	it	ne
   8364a:	3001      	addne	r0, #1
   8364c:	4770      	bx	lr
   8364e:	bf00      	nop

00083650 <__swbuf_r>:
   83650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83652:	460d      	mov	r5, r1
   83654:	4614      	mov	r4, r2
   83656:	4607      	mov	r7, r0
   83658:	b110      	cbz	r0, 83660 <__swbuf_r+0x10>
   8365a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8365c:	2b00      	cmp	r3, #0
   8365e:	d048      	beq.n	836f2 <__swbuf_r+0xa2>
   83660:	89a2      	ldrh	r2, [r4, #12]
   83662:	69a0      	ldr	r0, [r4, #24]
   83664:	b293      	uxth	r3, r2
   83666:	60a0      	str	r0, [r4, #8]
   83668:	0718      	lsls	r0, r3, #28
   8366a:	d538      	bpl.n	836de <__swbuf_r+0x8e>
   8366c:	6926      	ldr	r6, [r4, #16]
   8366e:	2e00      	cmp	r6, #0
   83670:	d035      	beq.n	836de <__swbuf_r+0x8e>
   83672:	0499      	lsls	r1, r3, #18
   83674:	b2ed      	uxtb	r5, r5
   83676:	d515      	bpl.n	836a4 <__swbuf_r+0x54>
   83678:	6823      	ldr	r3, [r4, #0]
   8367a:	6962      	ldr	r2, [r4, #20]
   8367c:	1b9e      	subs	r6, r3, r6
   8367e:	4296      	cmp	r6, r2
   83680:	da1c      	bge.n	836bc <__swbuf_r+0x6c>
   83682:	3601      	adds	r6, #1
   83684:	68a2      	ldr	r2, [r4, #8]
   83686:	1c59      	adds	r1, r3, #1
   83688:	3a01      	subs	r2, #1
   8368a:	60a2      	str	r2, [r4, #8]
   8368c:	6021      	str	r1, [r4, #0]
   8368e:	701d      	strb	r5, [r3, #0]
   83690:	6963      	ldr	r3, [r4, #20]
   83692:	42b3      	cmp	r3, r6
   83694:	d01a      	beq.n	836cc <__swbuf_r+0x7c>
   83696:	89a3      	ldrh	r3, [r4, #12]
   83698:	07db      	lsls	r3, r3, #31
   8369a:	d501      	bpl.n	836a0 <__swbuf_r+0x50>
   8369c:	2d0a      	cmp	r5, #10
   8369e:	d015      	beq.n	836cc <__swbuf_r+0x7c>
   836a0:	4628      	mov	r0, r5
   836a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   836a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   836a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   836aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   836ae:	6663      	str	r3, [r4, #100]	; 0x64
   836b0:	6823      	ldr	r3, [r4, #0]
   836b2:	81a2      	strh	r2, [r4, #12]
   836b4:	6962      	ldr	r2, [r4, #20]
   836b6:	1b9e      	subs	r6, r3, r6
   836b8:	4296      	cmp	r6, r2
   836ba:	dbe2      	blt.n	83682 <__swbuf_r+0x32>
   836bc:	4638      	mov	r0, r7
   836be:	4621      	mov	r1, r4
   836c0:	f7fe fd3e 	bl	82140 <_fflush_r>
   836c4:	b940      	cbnz	r0, 836d8 <__swbuf_r+0x88>
   836c6:	6823      	ldr	r3, [r4, #0]
   836c8:	2601      	movs	r6, #1
   836ca:	e7db      	b.n	83684 <__swbuf_r+0x34>
   836cc:	4638      	mov	r0, r7
   836ce:	4621      	mov	r1, r4
   836d0:	f7fe fd36 	bl	82140 <_fflush_r>
   836d4:	2800      	cmp	r0, #0
   836d6:	d0e3      	beq.n	836a0 <__swbuf_r+0x50>
   836d8:	f04f 30ff 	mov.w	r0, #4294967295
   836dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   836de:	4638      	mov	r0, r7
   836e0:	4621      	mov	r1, r4
   836e2:	f7fe fc17 	bl	81f14 <__swsetup_r>
   836e6:	2800      	cmp	r0, #0
   836e8:	d1f6      	bne.n	836d8 <__swbuf_r+0x88>
   836ea:	89a2      	ldrh	r2, [r4, #12]
   836ec:	6926      	ldr	r6, [r4, #16]
   836ee:	b293      	uxth	r3, r2
   836f0:	e7bf      	b.n	83672 <__swbuf_r+0x22>
   836f2:	f7fe fd41 	bl	82178 <__sinit>
   836f6:	e7b3      	b.n	83660 <__swbuf_r+0x10>

000836f8 <_wcrtomb_r>:
   836f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   836fc:	461e      	mov	r6, r3
   836fe:	b086      	sub	sp, #24
   83700:	460c      	mov	r4, r1
   83702:	4605      	mov	r5, r0
   83704:	4617      	mov	r7, r2
   83706:	4b0f      	ldr	r3, [pc, #60]	; (83744 <_wcrtomb_r+0x4c>)
   83708:	b191      	cbz	r1, 83730 <_wcrtomb_r+0x38>
   8370a:	f8d3 8000 	ldr.w	r8, [r3]
   8370e:	f7ff f8f3 	bl	828f8 <__locale_charset>
   83712:	9600      	str	r6, [sp, #0]
   83714:	4603      	mov	r3, r0
   83716:	4621      	mov	r1, r4
   83718:	463a      	mov	r2, r7
   8371a:	4628      	mov	r0, r5
   8371c:	47c0      	blx	r8
   8371e:	1c43      	adds	r3, r0, #1
   83720:	d103      	bne.n	8372a <_wcrtomb_r+0x32>
   83722:	2200      	movs	r2, #0
   83724:	238a      	movs	r3, #138	; 0x8a
   83726:	6032      	str	r2, [r6, #0]
   83728:	602b      	str	r3, [r5, #0]
   8372a:	b006      	add	sp, #24
   8372c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83730:	681f      	ldr	r7, [r3, #0]
   83732:	f7ff f8e1 	bl	828f8 <__locale_charset>
   83736:	9600      	str	r6, [sp, #0]
   83738:	4603      	mov	r3, r0
   8373a:	4622      	mov	r2, r4
   8373c:	4628      	mov	r0, r5
   8373e:	a903      	add	r1, sp, #12
   83740:	47b8      	blx	r7
   83742:	e7ec      	b.n	8371e <_wcrtomb_r+0x26>
   83744:	20070998 	.word	0x20070998

00083748 <__ascii_wctomb>:
   83748:	b121      	cbz	r1, 83754 <__ascii_wctomb+0xc>
   8374a:	2aff      	cmp	r2, #255	; 0xff
   8374c:	d804      	bhi.n	83758 <__ascii_wctomb+0x10>
   8374e:	700a      	strb	r2, [r1, #0]
   83750:	2001      	movs	r0, #1
   83752:	4770      	bx	lr
   83754:	4608      	mov	r0, r1
   83756:	4770      	bx	lr
   83758:	238a      	movs	r3, #138	; 0x8a
   8375a:	6003      	str	r3, [r0, #0]
   8375c:	f04f 30ff 	mov.w	r0, #4294967295
   83760:	4770      	bx	lr
   83762:	bf00      	nop

00083764 <_write_r>:
   83764:	b570      	push	{r4, r5, r6, lr}
   83766:	4c08      	ldr	r4, [pc, #32]	; (83788 <_write_r+0x24>)
   83768:	4606      	mov	r6, r0
   8376a:	2500      	movs	r5, #0
   8376c:	4608      	mov	r0, r1
   8376e:	4611      	mov	r1, r2
   83770:	461a      	mov	r2, r3
   83772:	6025      	str	r5, [r4, #0]
   83774:	f7fc fd6a 	bl	8024c <_write>
   83778:	1c43      	adds	r3, r0, #1
   8377a:	d000      	beq.n	8377e <_write_r+0x1a>
   8377c:	bd70      	pop	{r4, r5, r6, pc}
   8377e:	6823      	ldr	r3, [r4, #0]
   83780:	2b00      	cmp	r3, #0
   83782:	d0fb      	beq.n	8377c <_write_r+0x18>
   83784:	6033      	str	r3, [r6, #0]
   83786:	bd70      	pop	{r4, r5, r6, pc}
   83788:	20070b0c 	.word	0x20070b0c

0008378c <__register_exitproc>:
   8378c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8378e:	4c27      	ldr	r4, [pc, #156]	; (8382c <__register_exitproc+0xa0>)
   83790:	b085      	sub	sp, #20
   83792:	6826      	ldr	r6, [r4, #0]
   83794:	4607      	mov	r7, r0
   83796:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8379a:	2c00      	cmp	r4, #0
   8379c:	d040      	beq.n	83820 <__register_exitproc+0x94>
   8379e:	6865      	ldr	r5, [r4, #4]
   837a0:	2d1f      	cmp	r5, #31
   837a2:	dd1e      	ble.n	837e2 <__register_exitproc+0x56>
   837a4:	4822      	ldr	r0, [pc, #136]	; (83830 <__register_exitproc+0xa4>)
   837a6:	b918      	cbnz	r0, 837b0 <__register_exitproc+0x24>
   837a8:	f04f 30ff 	mov.w	r0, #4294967295
   837ac:	b005      	add	sp, #20
   837ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   837b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   837b4:	9103      	str	r1, [sp, #12]
   837b6:	9202      	str	r2, [sp, #8]
   837b8:	9301      	str	r3, [sp, #4]
   837ba:	f7ff f917 	bl	829ec <malloc>
   837be:	9903      	ldr	r1, [sp, #12]
   837c0:	4604      	mov	r4, r0
   837c2:	9a02      	ldr	r2, [sp, #8]
   837c4:	9b01      	ldr	r3, [sp, #4]
   837c6:	2800      	cmp	r0, #0
   837c8:	d0ee      	beq.n	837a8 <__register_exitproc+0x1c>
   837ca:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   837ce:	2000      	movs	r0, #0
   837d0:	6025      	str	r5, [r4, #0]
   837d2:	6060      	str	r0, [r4, #4]
   837d4:	4605      	mov	r5, r0
   837d6:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   837da:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   837de:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   837e2:	b93f      	cbnz	r7, 837f4 <__register_exitproc+0x68>
   837e4:	1c6b      	adds	r3, r5, #1
   837e6:	2000      	movs	r0, #0
   837e8:	3502      	adds	r5, #2
   837ea:	6063      	str	r3, [r4, #4]
   837ec:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   837f0:	b005      	add	sp, #20
   837f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   837f4:	2601      	movs	r6, #1
   837f6:	40ae      	lsls	r6, r5
   837f8:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   837fc:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   83800:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83804:	2f02      	cmp	r7, #2
   83806:	ea42 0206 	orr.w	r2, r2, r6
   8380a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8380e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   83812:	d1e7      	bne.n	837e4 <__register_exitproc+0x58>
   83814:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83818:	431e      	orrs	r6, r3
   8381a:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   8381e:	e7e1      	b.n	837e4 <__register_exitproc+0x58>
   83820:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   83824:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83828:	e7b9      	b.n	8379e <__register_exitproc+0x12>
   8382a:	bf00      	nop
   8382c:	00083fc0 	.word	0x00083fc0
   83830:	000829ed 	.word	0x000829ed

00083834 <_close_r>:
   83834:	b538      	push	{r3, r4, r5, lr}
   83836:	4c07      	ldr	r4, [pc, #28]	; (83854 <_close_r+0x20>)
   83838:	2300      	movs	r3, #0
   8383a:	4605      	mov	r5, r0
   8383c:	4608      	mov	r0, r1
   8383e:	6023      	str	r3, [r4, #0]
   83840:	f7fd fa64 	bl	80d0c <_close>
   83844:	1c43      	adds	r3, r0, #1
   83846:	d000      	beq.n	8384a <_close_r+0x16>
   83848:	bd38      	pop	{r3, r4, r5, pc}
   8384a:	6823      	ldr	r3, [r4, #0]
   8384c:	2b00      	cmp	r3, #0
   8384e:	d0fb      	beq.n	83848 <_close_r+0x14>
   83850:	602b      	str	r3, [r5, #0]
   83852:	bd38      	pop	{r3, r4, r5, pc}
   83854:	20070b0c 	.word	0x20070b0c

00083858 <_fclose_r>:
   83858:	b570      	push	{r4, r5, r6, lr}
   8385a:	460c      	mov	r4, r1
   8385c:	4605      	mov	r5, r0
   8385e:	b131      	cbz	r1, 8386e <_fclose_r+0x16>
   83860:	b110      	cbz	r0, 83868 <_fclose_r+0x10>
   83862:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83864:	2b00      	cmp	r3, #0
   83866:	d02f      	beq.n	838c8 <_fclose_r+0x70>
   83868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8386c:	b90b      	cbnz	r3, 83872 <_fclose_r+0x1a>
   8386e:	2000      	movs	r0, #0
   83870:	bd70      	pop	{r4, r5, r6, pc}
   83872:	4628      	mov	r0, r5
   83874:	4621      	mov	r1, r4
   83876:	f7fe fc63 	bl	82140 <_fflush_r>
   8387a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8387c:	4606      	mov	r6, r0
   8387e:	b133      	cbz	r3, 8388e <_fclose_r+0x36>
   83880:	4628      	mov	r0, r5
   83882:	69e1      	ldr	r1, [r4, #28]
   83884:	4798      	blx	r3
   83886:	2800      	cmp	r0, #0
   83888:	bfb8      	it	lt
   8388a:	f04f 36ff 	movlt.w	r6, #4294967295
   8388e:	89a3      	ldrh	r3, [r4, #12]
   83890:	061b      	lsls	r3, r3, #24
   83892:	d41c      	bmi.n	838ce <_fclose_r+0x76>
   83894:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83896:	b141      	cbz	r1, 838aa <_fclose_r+0x52>
   83898:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8389c:	4299      	cmp	r1, r3
   8389e:	d002      	beq.n	838a6 <_fclose_r+0x4e>
   838a0:	4628      	mov	r0, r5
   838a2:	f7fe fdad 	bl	82400 <_free_r>
   838a6:	2300      	movs	r3, #0
   838a8:	6323      	str	r3, [r4, #48]	; 0x30
   838aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
   838ac:	b121      	cbz	r1, 838b8 <_fclose_r+0x60>
   838ae:	4628      	mov	r0, r5
   838b0:	f7fe fda6 	bl	82400 <_free_r>
   838b4:	2300      	movs	r3, #0
   838b6:	6463      	str	r3, [r4, #68]	; 0x44
   838b8:	f7fe fcd8 	bl	8226c <__sfp_lock_acquire>
   838bc:	2300      	movs	r3, #0
   838be:	81a3      	strh	r3, [r4, #12]
   838c0:	f7fe fcd6 	bl	82270 <__sfp_lock_release>
   838c4:	4630      	mov	r0, r6
   838c6:	bd70      	pop	{r4, r5, r6, pc}
   838c8:	f7fe fc56 	bl	82178 <__sinit>
   838cc:	e7cc      	b.n	83868 <_fclose_r+0x10>
   838ce:	4628      	mov	r0, r5
   838d0:	6921      	ldr	r1, [r4, #16]
   838d2:	f7fe fd95 	bl	82400 <_free_r>
   838d6:	e7dd      	b.n	83894 <_fclose_r+0x3c>

000838d8 <fclose>:
   838d8:	4b02      	ldr	r3, [pc, #8]	; (838e4 <fclose+0xc>)
   838da:	4601      	mov	r1, r0
   838dc:	6818      	ldr	r0, [r3, #0]
   838de:	f7ff bfbb 	b.w	83858 <_fclose_r>
   838e2:	bf00      	nop
   838e4:	20070560 	.word	0x20070560

000838e8 <_fstat_r>:
   838e8:	b538      	push	{r3, r4, r5, lr}
   838ea:	4c08      	ldr	r4, [pc, #32]	; (8390c <_fstat_r+0x24>)
   838ec:	2300      	movs	r3, #0
   838ee:	4605      	mov	r5, r0
   838f0:	4608      	mov	r0, r1
   838f2:	4611      	mov	r1, r2
   838f4:	6023      	str	r3, [r4, #0]
   838f6:	f7fd fa0d 	bl	80d14 <_fstat>
   838fa:	1c43      	adds	r3, r0, #1
   838fc:	d000      	beq.n	83900 <_fstat_r+0x18>
   838fe:	bd38      	pop	{r3, r4, r5, pc}
   83900:	6823      	ldr	r3, [r4, #0]
   83902:	2b00      	cmp	r3, #0
   83904:	d0fb      	beq.n	838fe <_fstat_r+0x16>
   83906:	602b      	str	r3, [r5, #0]
   83908:	bd38      	pop	{r3, r4, r5, pc}
   8390a:	bf00      	nop
   8390c:	20070b0c 	.word	0x20070b0c

00083910 <_isatty_r>:
   83910:	b538      	push	{r3, r4, r5, lr}
   83912:	4c07      	ldr	r4, [pc, #28]	; (83930 <_isatty_r+0x20>)
   83914:	2300      	movs	r3, #0
   83916:	4605      	mov	r5, r0
   83918:	4608      	mov	r0, r1
   8391a:	6023      	str	r3, [r4, #0]
   8391c:	f7fd fa00 	bl	80d20 <_isatty>
   83920:	1c43      	adds	r3, r0, #1
   83922:	d000      	beq.n	83926 <_isatty_r+0x16>
   83924:	bd38      	pop	{r3, r4, r5, pc}
   83926:	6823      	ldr	r3, [r4, #0]
   83928:	2b00      	cmp	r3, #0
   8392a:	d0fb      	beq.n	83924 <_isatty_r+0x14>
   8392c:	602b      	str	r3, [r5, #0]
   8392e:	bd38      	pop	{r3, r4, r5, pc}
   83930:	20070b0c 	.word	0x20070b0c

00083934 <_lseek_r>:
   83934:	b570      	push	{r4, r5, r6, lr}
   83936:	4c08      	ldr	r4, [pc, #32]	; (83958 <_lseek_r+0x24>)
   83938:	4606      	mov	r6, r0
   8393a:	2500      	movs	r5, #0
   8393c:	4608      	mov	r0, r1
   8393e:	4611      	mov	r1, r2
   83940:	461a      	mov	r2, r3
   83942:	6025      	str	r5, [r4, #0]
   83944:	f7fd f9ee 	bl	80d24 <_lseek>
   83948:	1c43      	adds	r3, r0, #1
   8394a:	d000      	beq.n	8394e <_lseek_r+0x1a>
   8394c:	bd70      	pop	{r4, r5, r6, pc}
   8394e:	6823      	ldr	r3, [r4, #0]
   83950:	2b00      	cmp	r3, #0
   83952:	d0fb      	beq.n	8394c <_lseek_r+0x18>
   83954:	6033      	str	r3, [r6, #0]
   83956:	bd70      	pop	{r4, r5, r6, pc}
   83958:	20070b0c 	.word	0x20070b0c

0008395c <_read_r>:
   8395c:	b570      	push	{r4, r5, r6, lr}
   8395e:	4c08      	ldr	r4, [pc, #32]	; (83980 <_read_r+0x24>)
   83960:	4606      	mov	r6, r0
   83962:	2500      	movs	r5, #0
   83964:	4608      	mov	r0, r1
   83966:	4611      	mov	r1, r2
   83968:	461a      	mov	r2, r3
   8396a:	6025      	str	r5, [r4, #0]
   8396c:	f7fc fc4e 	bl	8020c <_read>
   83970:	1c43      	adds	r3, r0, #1
   83972:	d000      	beq.n	83976 <_read_r+0x1a>
   83974:	bd70      	pop	{r4, r5, r6, pc}
   83976:	6823      	ldr	r3, [r4, #0]
   83978:	2b00      	cmp	r3, #0
   8397a:	d0fb      	beq.n	83974 <_read_r+0x18>
   8397c:	6033      	str	r3, [r6, #0]
   8397e:	bd70      	pop	{r4, r5, r6, pc}
   83980:	20070b0c 	.word	0x20070b0c

00083984 <__aeabi_uldivmod>:
   83984:	b94b      	cbnz	r3, 8399a <__aeabi_uldivmod+0x16>
   83986:	b942      	cbnz	r2, 8399a <__aeabi_uldivmod+0x16>
   83988:	2900      	cmp	r1, #0
   8398a:	bf08      	it	eq
   8398c:	2800      	cmpeq	r0, #0
   8398e:	d002      	beq.n	83996 <__aeabi_uldivmod+0x12>
   83990:	f04f 31ff 	mov.w	r1, #4294967295
   83994:	4608      	mov	r0, r1
   83996:	f000 b83b 	b.w	83a10 <__aeabi_idiv0>
   8399a:	b082      	sub	sp, #8
   8399c:	46ec      	mov	ip, sp
   8399e:	e92d 5000 	stmdb	sp!, {ip, lr}
   839a2:	f000 f81d 	bl	839e0 <__gnu_uldivmod_helper>
   839a6:	f8dd e004 	ldr.w	lr, [sp, #4]
   839aa:	b002      	add	sp, #8
   839ac:	bc0c      	pop	{r2, r3}
   839ae:	4770      	bx	lr

000839b0 <__gnu_ldivmod_helper>:
   839b0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   839b4:	9e08      	ldr	r6, [sp, #32]
   839b6:	4614      	mov	r4, r2
   839b8:	461d      	mov	r5, r3
   839ba:	4680      	mov	r8, r0
   839bc:	4689      	mov	r9, r1
   839be:	f000 f829 	bl	83a14 <__divdi3>
   839c2:	fb04 f301 	mul.w	r3, r4, r1
   839c6:	fba4 ab00 	umull	sl, fp, r4, r0
   839ca:	fb00 3205 	mla	r2, r0, r5, r3
   839ce:	4493      	add	fp, r2
   839d0:	ebb8 080a 	subs.w	r8, r8, sl
   839d4:	eb69 090b 	sbc.w	r9, r9, fp
   839d8:	e9c6 8900 	strd	r8, r9, [r6]
   839dc:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000839e0 <__gnu_uldivmod_helper>:
   839e0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   839e4:	9e08      	ldr	r6, [sp, #32]
   839e6:	4614      	mov	r4, r2
   839e8:	461d      	mov	r5, r3
   839ea:	4680      	mov	r8, r0
   839ec:	4689      	mov	r9, r1
   839ee:	f000 f961 	bl	83cb4 <__udivdi3>
   839f2:	fb00 f505 	mul.w	r5, r0, r5
   839f6:	fba0 ab04 	umull	sl, fp, r0, r4
   839fa:	fb04 5401 	mla	r4, r4, r1, r5
   839fe:	44a3      	add	fp, r4
   83a00:	ebb8 080a 	subs.w	r8, r8, sl
   83a04:	eb69 090b 	sbc.w	r9, r9, fp
   83a08:	e9c6 8900 	strd	r8, r9, [r6]
   83a0c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083a10 <__aeabi_idiv0>:
   83a10:	4770      	bx	lr
   83a12:	bf00      	nop

00083a14 <__divdi3>:
   83a14:	2900      	cmp	r1, #0
   83a16:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83a1a:	f2c0 80a1 	blt.w	83b60 <__divdi3+0x14c>
   83a1e:	2400      	movs	r4, #0
   83a20:	2b00      	cmp	r3, #0
   83a22:	f2c0 8098 	blt.w	83b56 <__divdi3+0x142>
   83a26:	4615      	mov	r5, r2
   83a28:	4606      	mov	r6, r0
   83a2a:	460f      	mov	r7, r1
   83a2c:	2b00      	cmp	r3, #0
   83a2e:	d13f      	bne.n	83ab0 <__divdi3+0x9c>
   83a30:	428a      	cmp	r2, r1
   83a32:	d958      	bls.n	83ae6 <__divdi3+0xd2>
   83a34:	fab2 f382 	clz	r3, r2
   83a38:	b14b      	cbz	r3, 83a4e <__divdi3+0x3a>
   83a3a:	f1c3 0220 	rsb	r2, r3, #32
   83a3e:	fa01 f703 	lsl.w	r7, r1, r3
   83a42:	fa20 f202 	lsr.w	r2, r0, r2
   83a46:	409d      	lsls	r5, r3
   83a48:	fa00 f603 	lsl.w	r6, r0, r3
   83a4c:	4317      	orrs	r7, r2
   83a4e:	0c29      	lsrs	r1, r5, #16
   83a50:	fbb7 f2f1 	udiv	r2, r7, r1
   83a54:	fb01 7712 	mls	r7, r1, r2, r7
   83a58:	b2a8      	uxth	r0, r5
   83a5a:	fb00 f302 	mul.w	r3, r0, r2
   83a5e:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   83a62:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   83a66:	42bb      	cmp	r3, r7
   83a68:	d909      	bls.n	83a7e <__divdi3+0x6a>
   83a6a:	197f      	adds	r7, r7, r5
   83a6c:	f102 3cff 	add.w	ip, r2, #4294967295
   83a70:	f080 8105 	bcs.w	83c7e <__divdi3+0x26a>
   83a74:	42bb      	cmp	r3, r7
   83a76:	f240 8102 	bls.w	83c7e <__divdi3+0x26a>
   83a7a:	3a02      	subs	r2, #2
   83a7c:	442f      	add	r7, r5
   83a7e:	1aff      	subs	r7, r7, r3
   83a80:	fbb7 f3f1 	udiv	r3, r7, r1
   83a84:	fb01 7113 	mls	r1, r1, r3, r7
   83a88:	fb00 f003 	mul.w	r0, r0, r3
   83a8c:	b2b6      	uxth	r6, r6
   83a8e:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   83a92:	4288      	cmp	r0, r1
   83a94:	d908      	bls.n	83aa8 <__divdi3+0x94>
   83a96:	1949      	adds	r1, r1, r5
   83a98:	f103 37ff 	add.w	r7, r3, #4294967295
   83a9c:	f080 80f1 	bcs.w	83c82 <__divdi3+0x26e>
   83aa0:	4288      	cmp	r0, r1
   83aa2:	f240 80ee 	bls.w	83c82 <__divdi3+0x26e>
   83aa6:	3b02      	subs	r3, #2
   83aa8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83aac:	2300      	movs	r3, #0
   83aae:	e003      	b.n	83ab8 <__divdi3+0xa4>
   83ab0:	428b      	cmp	r3, r1
   83ab2:	d90a      	bls.n	83aca <__divdi3+0xb6>
   83ab4:	2300      	movs	r3, #0
   83ab6:	461a      	mov	r2, r3
   83ab8:	4610      	mov	r0, r2
   83aba:	4619      	mov	r1, r3
   83abc:	b114      	cbz	r4, 83ac4 <__divdi3+0xb0>
   83abe:	4240      	negs	r0, r0
   83ac0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83ac4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83ac8:	4770      	bx	lr
   83aca:	fab3 f883 	clz	r8, r3
   83ace:	f1b8 0f00 	cmp.w	r8, #0
   83ad2:	f040 8088 	bne.w	83be6 <__divdi3+0x1d2>
   83ad6:	428b      	cmp	r3, r1
   83ad8:	d302      	bcc.n	83ae0 <__divdi3+0xcc>
   83ada:	4282      	cmp	r2, r0
   83adc:	f200 80e2 	bhi.w	83ca4 <__divdi3+0x290>
   83ae0:	2300      	movs	r3, #0
   83ae2:	2201      	movs	r2, #1
   83ae4:	e7e8      	b.n	83ab8 <__divdi3+0xa4>
   83ae6:	b912      	cbnz	r2, 83aee <__divdi3+0xda>
   83ae8:	2301      	movs	r3, #1
   83aea:	fbb3 f5f2 	udiv	r5, r3, r2
   83aee:	fab5 f285 	clz	r2, r5
   83af2:	2a00      	cmp	r2, #0
   83af4:	d13a      	bne.n	83b6c <__divdi3+0x158>
   83af6:	1b7f      	subs	r7, r7, r5
   83af8:	0c28      	lsrs	r0, r5, #16
   83afa:	fa1f fc85 	uxth.w	ip, r5
   83afe:	2301      	movs	r3, #1
   83b00:	fbb7 f1f0 	udiv	r1, r7, r0
   83b04:	fb00 7711 	mls	r7, r0, r1, r7
   83b08:	fb0c f201 	mul.w	r2, ip, r1
   83b0c:	ea4f 4816 	mov.w	r8, r6, lsr #16
   83b10:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   83b14:	42ba      	cmp	r2, r7
   83b16:	d907      	bls.n	83b28 <__divdi3+0x114>
   83b18:	197f      	adds	r7, r7, r5
   83b1a:	f101 38ff 	add.w	r8, r1, #4294967295
   83b1e:	d202      	bcs.n	83b26 <__divdi3+0x112>
   83b20:	42ba      	cmp	r2, r7
   83b22:	f200 80c4 	bhi.w	83cae <__divdi3+0x29a>
   83b26:	4641      	mov	r1, r8
   83b28:	1abf      	subs	r7, r7, r2
   83b2a:	fbb7 f2f0 	udiv	r2, r7, r0
   83b2e:	fb00 7012 	mls	r0, r0, r2, r7
   83b32:	fb0c fc02 	mul.w	ip, ip, r2
   83b36:	b2b6      	uxth	r6, r6
   83b38:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   83b3c:	4584      	cmp	ip, r0
   83b3e:	d907      	bls.n	83b50 <__divdi3+0x13c>
   83b40:	1940      	adds	r0, r0, r5
   83b42:	f102 37ff 	add.w	r7, r2, #4294967295
   83b46:	d202      	bcs.n	83b4e <__divdi3+0x13a>
   83b48:	4584      	cmp	ip, r0
   83b4a:	f200 80ae 	bhi.w	83caa <__divdi3+0x296>
   83b4e:	463a      	mov	r2, r7
   83b50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   83b54:	e7b0      	b.n	83ab8 <__divdi3+0xa4>
   83b56:	43e4      	mvns	r4, r4
   83b58:	4252      	negs	r2, r2
   83b5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83b5e:	e762      	b.n	83a26 <__divdi3+0x12>
   83b60:	4240      	negs	r0, r0
   83b62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83b66:	f04f 34ff 	mov.w	r4, #4294967295
   83b6a:	e759      	b.n	83a20 <__divdi3+0xc>
   83b6c:	4095      	lsls	r5, r2
   83b6e:	f1c2 0920 	rsb	r9, r2, #32
   83b72:	fa27 f109 	lsr.w	r1, r7, r9
   83b76:	fa26 f909 	lsr.w	r9, r6, r9
   83b7a:	4097      	lsls	r7, r2
   83b7c:	0c28      	lsrs	r0, r5, #16
   83b7e:	fbb1 f8f0 	udiv	r8, r1, r0
   83b82:	fb00 1118 	mls	r1, r0, r8, r1
   83b86:	fa1f fc85 	uxth.w	ip, r5
   83b8a:	fb0c f308 	mul.w	r3, ip, r8
   83b8e:	ea49 0907 	orr.w	r9, r9, r7
   83b92:	ea4f 4719 	mov.w	r7, r9, lsr #16
   83b96:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   83b9a:	428b      	cmp	r3, r1
   83b9c:	fa06 f602 	lsl.w	r6, r6, r2
   83ba0:	d908      	bls.n	83bb4 <__divdi3+0x1a0>
   83ba2:	1949      	adds	r1, r1, r5
   83ba4:	f108 32ff 	add.w	r2, r8, #4294967295
   83ba8:	d27a      	bcs.n	83ca0 <__divdi3+0x28c>
   83baa:	428b      	cmp	r3, r1
   83bac:	d978      	bls.n	83ca0 <__divdi3+0x28c>
   83bae:	f1a8 0802 	sub.w	r8, r8, #2
   83bb2:	4429      	add	r1, r5
   83bb4:	1ac9      	subs	r1, r1, r3
   83bb6:	fbb1 f3f0 	udiv	r3, r1, r0
   83bba:	fb00 1713 	mls	r7, r0, r3, r1
   83bbe:	fb0c f203 	mul.w	r2, ip, r3
   83bc2:	fa1f f989 	uxth.w	r9, r9
   83bc6:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   83bca:	42ba      	cmp	r2, r7
   83bcc:	d907      	bls.n	83bde <__divdi3+0x1ca>
   83bce:	197f      	adds	r7, r7, r5
   83bd0:	f103 31ff 	add.w	r1, r3, #4294967295
   83bd4:	d260      	bcs.n	83c98 <__divdi3+0x284>
   83bd6:	42ba      	cmp	r2, r7
   83bd8:	d95e      	bls.n	83c98 <__divdi3+0x284>
   83bda:	3b02      	subs	r3, #2
   83bdc:	442f      	add	r7, r5
   83bde:	1abf      	subs	r7, r7, r2
   83be0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83be4:	e78c      	b.n	83b00 <__divdi3+0xec>
   83be6:	f1c8 0220 	rsb	r2, r8, #32
   83bea:	fa25 f102 	lsr.w	r1, r5, r2
   83bee:	fa03 fc08 	lsl.w	ip, r3, r8
   83bf2:	fa27 f302 	lsr.w	r3, r7, r2
   83bf6:	fa20 f202 	lsr.w	r2, r0, r2
   83bfa:	fa07 f708 	lsl.w	r7, r7, r8
   83bfe:	ea41 0c0c 	orr.w	ip, r1, ip
   83c02:	ea4f 491c 	mov.w	r9, ip, lsr #16
   83c06:	fbb3 f1f9 	udiv	r1, r3, r9
   83c0a:	fb09 3311 	mls	r3, r9, r1, r3
   83c0e:	fa1f fa8c 	uxth.w	sl, ip
   83c12:	fb0a fb01 	mul.w	fp, sl, r1
   83c16:	4317      	orrs	r7, r2
   83c18:	0c3a      	lsrs	r2, r7, #16
   83c1a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83c1e:	459b      	cmp	fp, r3
   83c20:	fa05 f008 	lsl.w	r0, r5, r8
   83c24:	d908      	bls.n	83c38 <__divdi3+0x224>
   83c26:	eb13 030c 	adds.w	r3, r3, ip
   83c2a:	f101 32ff 	add.w	r2, r1, #4294967295
   83c2e:	d235      	bcs.n	83c9c <__divdi3+0x288>
   83c30:	459b      	cmp	fp, r3
   83c32:	d933      	bls.n	83c9c <__divdi3+0x288>
   83c34:	3902      	subs	r1, #2
   83c36:	4463      	add	r3, ip
   83c38:	ebcb 0303 	rsb	r3, fp, r3
   83c3c:	fbb3 f2f9 	udiv	r2, r3, r9
   83c40:	fb09 3312 	mls	r3, r9, r2, r3
   83c44:	fb0a fa02 	mul.w	sl, sl, r2
   83c48:	b2bf      	uxth	r7, r7
   83c4a:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   83c4e:	45ba      	cmp	sl, r7
   83c50:	d908      	bls.n	83c64 <__divdi3+0x250>
   83c52:	eb17 070c 	adds.w	r7, r7, ip
   83c56:	f102 33ff 	add.w	r3, r2, #4294967295
   83c5a:	d21b      	bcs.n	83c94 <__divdi3+0x280>
   83c5c:	45ba      	cmp	sl, r7
   83c5e:	d919      	bls.n	83c94 <__divdi3+0x280>
   83c60:	3a02      	subs	r2, #2
   83c62:	4467      	add	r7, ip
   83c64:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   83c68:	fba5 0100 	umull	r0, r1, r5, r0
   83c6c:	ebca 0707 	rsb	r7, sl, r7
   83c70:	428f      	cmp	r7, r1
   83c72:	f04f 0300 	mov.w	r3, #0
   83c76:	d30a      	bcc.n	83c8e <__divdi3+0x27a>
   83c78:	d005      	beq.n	83c86 <__divdi3+0x272>
   83c7a:	462a      	mov	r2, r5
   83c7c:	e71c      	b.n	83ab8 <__divdi3+0xa4>
   83c7e:	4662      	mov	r2, ip
   83c80:	e6fd      	b.n	83a7e <__divdi3+0x6a>
   83c82:	463b      	mov	r3, r7
   83c84:	e710      	b.n	83aa8 <__divdi3+0x94>
   83c86:	fa06 f608 	lsl.w	r6, r6, r8
   83c8a:	4286      	cmp	r6, r0
   83c8c:	d2f5      	bcs.n	83c7a <__divdi3+0x266>
   83c8e:	1e6a      	subs	r2, r5, #1
   83c90:	2300      	movs	r3, #0
   83c92:	e711      	b.n	83ab8 <__divdi3+0xa4>
   83c94:	461a      	mov	r2, r3
   83c96:	e7e5      	b.n	83c64 <__divdi3+0x250>
   83c98:	460b      	mov	r3, r1
   83c9a:	e7a0      	b.n	83bde <__divdi3+0x1ca>
   83c9c:	4611      	mov	r1, r2
   83c9e:	e7cb      	b.n	83c38 <__divdi3+0x224>
   83ca0:	4690      	mov	r8, r2
   83ca2:	e787      	b.n	83bb4 <__divdi3+0x1a0>
   83ca4:	4643      	mov	r3, r8
   83ca6:	4642      	mov	r2, r8
   83ca8:	e706      	b.n	83ab8 <__divdi3+0xa4>
   83caa:	3a02      	subs	r2, #2
   83cac:	e750      	b.n	83b50 <__divdi3+0x13c>
   83cae:	3902      	subs	r1, #2
   83cb0:	442f      	add	r7, r5
   83cb2:	e739      	b.n	83b28 <__divdi3+0x114>

00083cb4 <__udivdi3>:
   83cb4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83cb8:	4614      	mov	r4, r2
   83cba:	4605      	mov	r5, r0
   83cbc:	460e      	mov	r6, r1
   83cbe:	2b00      	cmp	r3, #0
   83cc0:	d143      	bne.n	83d4a <__udivdi3+0x96>
   83cc2:	428a      	cmp	r2, r1
   83cc4:	d953      	bls.n	83d6e <__udivdi3+0xba>
   83cc6:	fab2 f782 	clz	r7, r2
   83cca:	b157      	cbz	r7, 83ce2 <__udivdi3+0x2e>
   83ccc:	f1c7 0620 	rsb	r6, r7, #32
   83cd0:	fa20 f606 	lsr.w	r6, r0, r6
   83cd4:	fa01 f307 	lsl.w	r3, r1, r7
   83cd8:	fa02 f407 	lsl.w	r4, r2, r7
   83cdc:	fa00 f507 	lsl.w	r5, r0, r7
   83ce0:	431e      	orrs	r6, r3
   83ce2:	0c21      	lsrs	r1, r4, #16
   83ce4:	fbb6 f2f1 	udiv	r2, r6, r1
   83ce8:	fb01 6612 	mls	r6, r1, r2, r6
   83cec:	b2a0      	uxth	r0, r4
   83cee:	fb00 f302 	mul.w	r3, r0, r2
   83cf2:	0c2f      	lsrs	r7, r5, #16
   83cf4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   83cf8:	42b3      	cmp	r3, r6
   83cfa:	d909      	bls.n	83d10 <__udivdi3+0x5c>
   83cfc:	1936      	adds	r6, r6, r4
   83cfe:	f102 37ff 	add.w	r7, r2, #4294967295
   83d02:	f080 80fd 	bcs.w	83f00 <__udivdi3+0x24c>
   83d06:	42b3      	cmp	r3, r6
   83d08:	f240 80fa 	bls.w	83f00 <__udivdi3+0x24c>
   83d0c:	3a02      	subs	r2, #2
   83d0e:	4426      	add	r6, r4
   83d10:	1af6      	subs	r6, r6, r3
   83d12:	fbb6 f3f1 	udiv	r3, r6, r1
   83d16:	fb01 6113 	mls	r1, r1, r3, r6
   83d1a:	fb00 f003 	mul.w	r0, r0, r3
   83d1e:	b2ad      	uxth	r5, r5
   83d20:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   83d24:	4288      	cmp	r0, r1
   83d26:	d908      	bls.n	83d3a <__udivdi3+0x86>
   83d28:	1909      	adds	r1, r1, r4
   83d2a:	f103 36ff 	add.w	r6, r3, #4294967295
   83d2e:	f080 80e9 	bcs.w	83f04 <__udivdi3+0x250>
   83d32:	4288      	cmp	r0, r1
   83d34:	f240 80e6 	bls.w	83f04 <__udivdi3+0x250>
   83d38:	3b02      	subs	r3, #2
   83d3a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83d3e:	2300      	movs	r3, #0
   83d40:	4610      	mov	r0, r2
   83d42:	4619      	mov	r1, r3
   83d44:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83d48:	4770      	bx	lr
   83d4a:	428b      	cmp	r3, r1
   83d4c:	d84c      	bhi.n	83de8 <__udivdi3+0x134>
   83d4e:	fab3 f683 	clz	r6, r3
   83d52:	2e00      	cmp	r6, #0
   83d54:	d14f      	bne.n	83df6 <__udivdi3+0x142>
   83d56:	428b      	cmp	r3, r1
   83d58:	d302      	bcc.n	83d60 <__udivdi3+0xac>
   83d5a:	4282      	cmp	r2, r0
   83d5c:	f200 80dd 	bhi.w	83f1a <__udivdi3+0x266>
   83d60:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83d64:	2300      	movs	r3, #0
   83d66:	2201      	movs	r2, #1
   83d68:	4610      	mov	r0, r2
   83d6a:	4619      	mov	r1, r3
   83d6c:	4770      	bx	lr
   83d6e:	b912      	cbnz	r2, 83d76 <__udivdi3+0xc2>
   83d70:	2401      	movs	r4, #1
   83d72:	fbb4 f4f2 	udiv	r4, r4, r2
   83d76:	fab4 f284 	clz	r2, r4
   83d7a:	2a00      	cmp	r2, #0
   83d7c:	f040 8082 	bne.w	83e84 <__udivdi3+0x1d0>
   83d80:	1b09      	subs	r1, r1, r4
   83d82:	0c26      	lsrs	r6, r4, #16
   83d84:	b2a7      	uxth	r7, r4
   83d86:	2301      	movs	r3, #1
   83d88:	fbb1 f0f6 	udiv	r0, r1, r6
   83d8c:	fb06 1110 	mls	r1, r6, r0, r1
   83d90:	fb07 f200 	mul.w	r2, r7, r0
   83d94:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   83d98:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   83d9c:	428a      	cmp	r2, r1
   83d9e:	d907      	bls.n	83db0 <__udivdi3+0xfc>
   83da0:	1909      	adds	r1, r1, r4
   83da2:	f100 3cff 	add.w	ip, r0, #4294967295
   83da6:	d202      	bcs.n	83dae <__udivdi3+0xfa>
   83da8:	428a      	cmp	r2, r1
   83daa:	f200 80c8 	bhi.w	83f3e <__udivdi3+0x28a>
   83dae:	4660      	mov	r0, ip
   83db0:	1a89      	subs	r1, r1, r2
   83db2:	fbb1 f2f6 	udiv	r2, r1, r6
   83db6:	fb06 1112 	mls	r1, r6, r2, r1
   83dba:	fb07 f702 	mul.w	r7, r7, r2
   83dbe:	b2ad      	uxth	r5, r5
   83dc0:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   83dc4:	42af      	cmp	r7, r5
   83dc6:	d908      	bls.n	83dda <__udivdi3+0x126>
   83dc8:	192c      	adds	r4, r5, r4
   83dca:	f102 31ff 	add.w	r1, r2, #4294967295
   83dce:	f080 809b 	bcs.w	83f08 <__udivdi3+0x254>
   83dd2:	42a7      	cmp	r7, r4
   83dd4:	f240 8098 	bls.w	83f08 <__udivdi3+0x254>
   83dd8:	3a02      	subs	r2, #2
   83dda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   83dde:	4610      	mov	r0, r2
   83de0:	4619      	mov	r1, r3
   83de2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83de6:	4770      	bx	lr
   83de8:	2300      	movs	r3, #0
   83dea:	461a      	mov	r2, r3
   83dec:	4610      	mov	r0, r2
   83dee:	4619      	mov	r1, r3
   83df0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83df4:	4770      	bx	lr
   83df6:	f1c6 0520 	rsb	r5, r6, #32
   83dfa:	fa22 f705 	lsr.w	r7, r2, r5
   83dfe:	fa03 f406 	lsl.w	r4, r3, r6
   83e02:	fa21 f305 	lsr.w	r3, r1, r5
   83e06:	fa01 fb06 	lsl.w	fp, r1, r6
   83e0a:	fa20 f505 	lsr.w	r5, r0, r5
   83e0e:	433c      	orrs	r4, r7
   83e10:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83e14:	fbb3 fcf8 	udiv	ip, r3, r8
   83e18:	fb08 331c 	mls	r3, r8, ip, r3
   83e1c:	fa1f f984 	uxth.w	r9, r4
   83e20:	fb09 fa0c 	mul.w	sl, r9, ip
   83e24:	ea45 0b0b 	orr.w	fp, r5, fp
   83e28:	ea4f 451b 	mov.w	r5, fp, lsr #16
   83e2c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   83e30:	459a      	cmp	sl, r3
   83e32:	fa02 f206 	lsl.w	r2, r2, r6
   83e36:	d904      	bls.n	83e42 <__udivdi3+0x18e>
   83e38:	191b      	adds	r3, r3, r4
   83e3a:	f10c 35ff 	add.w	r5, ip, #4294967295
   83e3e:	d36f      	bcc.n	83f20 <__udivdi3+0x26c>
   83e40:	46ac      	mov	ip, r5
   83e42:	ebca 0303 	rsb	r3, sl, r3
   83e46:	fbb3 f5f8 	udiv	r5, r3, r8
   83e4a:	fb08 3315 	mls	r3, r8, r5, r3
   83e4e:	fb09 f905 	mul.w	r9, r9, r5
   83e52:	fa1f fb8b 	uxth.w	fp, fp
   83e56:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   83e5a:	45b9      	cmp	r9, r7
   83e5c:	d904      	bls.n	83e68 <__udivdi3+0x1b4>
   83e5e:	193f      	adds	r7, r7, r4
   83e60:	f105 33ff 	add.w	r3, r5, #4294967295
   83e64:	d362      	bcc.n	83f2c <__udivdi3+0x278>
   83e66:	461d      	mov	r5, r3
   83e68:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   83e6c:	fbac 2302 	umull	r2, r3, ip, r2
   83e70:	ebc9 0707 	rsb	r7, r9, r7
   83e74:	429f      	cmp	r7, r3
   83e76:	f04f 0500 	mov.w	r5, #0
   83e7a:	d34a      	bcc.n	83f12 <__udivdi3+0x25e>
   83e7c:	d046      	beq.n	83f0c <__udivdi3+0x258>
   83e7e:	4662      	mov	r2, ip
   83e80:	462b      	mov	r3, r5
   83e82:	e75d      	b.n	83d40 <__udivdi3+0x8c>
   83e84:	4094      	lsls	r4, r2
   83e86:	f1c2 0920 	rsb	r9, r2, #32
   83e8a:	fa21 fc09 	lsr.w	ip, r1, r9
   83e8e:	4091      	lsls	r1, r2
   83e90:	fa20 f909 	lsr.w	r9, r0, r9
   83e94:	0c26      	lsrs	r6, r4, #16
   83e96:	fbbc f8f6 	udiv	r8, ip, r6
   83e9a:	fb06 cc18 	mls	ip, r6, r8, ip
   83e9e:	b2a7      	uxth	r7, r4
   83ea0:	fb07 f308 	mul.w	r3, r7, r8
   83ea4:	ea49 0901 	orr.w	r9, r9, r1
   83ea8:	ea4f 4119 	mov.w	r1, r9, lsr #16
   83eac:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   83eb0:	4563      	cmp	r3, ip
   83eb2:	fa00 f502 	lsl.w	r5, r0, r2
   83eb6:	d909      	bls.n	83ecc <__udivdi3+0x218>
   83eb8:	eb1c 0c04 	adds.w	ip, ip, r4
   83ebc:	f108 32ff 	add.w	r2, r8, #4294967295
   83ec0:	d23b      	bcs.n	83f3a <__udivdi3+0x286>
   83ec2:	4563      	cmp	r3, ip
   83ec4:	d939      	bls.n	83f3a <__udivdi3+0x286>
   83ec6:	f1a8 0802 	sub.w	r8, r8, #2
   83eca:	44a4      	add	ip, r4
   83ecc:	ebc3 0c0c 	rsb	ip, r3, ip
   83ed0:	fbbc f3f6 	udiv	r3, ip, r6
   83ed4:	fb06 c113 	mls	r1, r6, r3, ip
   83ed8:	fb07 f203 	mul.w	r2, r7, r3
   83edc:	fa1f f989 	uxth.w	r9, r9
   83ee0:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   83ee4:	428a      	cmp	r2, r1
   83ee6:	d907      	bls.n	83ef8 <__udivdi3+0x244>
   83ee8:	1909      	adds	r1, r1, r4
   83eea:	f103 30ff 	add.w	r0, r3, #4294967295
   83eee:	d222      	bcs.n	83f36 <__udivdi3+0x282>
   83ef0:	428a      	cmp	r2, r1
   83ef2:	d920      	bls.n	83f36 <__udivdi3+0x282>
   83ef4:	3b02      	subs	r3, #2
   83ef6:	4421      	add	r1, r4
   83ef8:	1a89      	subs	r1, r1, r2
   83efa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83efe:	e743      	b.n	83d88 <__udivdi3+0xd4>
   83f00:	463a      	mov	r2, r7
   83f02:	e705      	b.n	83d10 <__udivdi3+0x5c>
   83f04:	4633      	mov	r3, r6
   83f06:	e718      	b.n	83d3a <__udivdi3+0x86>
   83f08:	460a      	mov	r2, r1
   83f0a:	e766      	b.n	83dda <__udivdi3+0x126>
   83f0c:	40b0      	lsls	r0, r6
   83f0e:	4290      	cmp	r0, r2
   83f10:	d2b5      	bcs.n	83e7e <__udivdi3+0x1ca>
   83f12:	f10c 32ff 	add.w	r2, ip, #4294967295
   83f16:	2300      	movs	r3, #0
   83f18:	e712      	b.n	83d40 <__udivdi3+0x8c>
   83f1a:	4633      	mov	r3, r6
   83f1c:	4632      	mov	r2, r6
   83f1e:	e70f      	b.n	83d40 <__udivdi3+0x8c>
   83f20:	459a      	cmp	sl, r3
   83f22:	d98d      	bls.n	83e40 <__udivdi3+0x18c>
   83f24:	f1ac 0c02 	sub.w	ip, ip, #2
   83f28:	4423      	add	r3, r4
   83f2a:	e78a      	b.n	83e42 <__udivdi3+0x18e>
   83f2c:	45b9      	cmp	r9, r7
   83f2e:	d99a      	bls.n	83e66 <__udivdi3+0x1b2>
   83f30:	3d02      	subs	r5, #2
   83f32:	4427      	add	r7, r4
   83f34:	e798      	b.n	83e68 <__udivdi3+0x1b4>
   83f36:	4603      	mov	r3, r0
   83f38:	e7de      	b.n	83ef8 <__udivdi3+0x244>
   83f3a:	4690      	mov	r8, r2
   83f3c:	e7c6      	b.n	83ecc <__udivdi3+0x218>
   83f3e:	3802      	subs	r0, #2
   83f40:	4421      	add	r1, r4
   83f42:	e735      	b.n	83db0 <__udivdi3+0xfc>
   83f44:	736e6f4b 	.word	0x736e6f4b
   83f48:	6e656c6f 	.word	0x6e656c6f
   83f4c:	61657220 	.word	0x61657220
   83f50:	000a6f64 	.word	0x000a6f64
   83f54:	3d3d3d3d 	.word	0x3d3d3d3d
   83f58:	3d3d3d3d 	.word	0x3d3d3d3d
   83f5c:	3d3d3d3d 	.word	0x3d3d3d3d
   83f60:	0a3d3d3d 	.word	0x0a3d3d3d
   83f64:	00000000 	.word	0x00000000
   83f68:	25202d2d 	.word	0x25202d2d
   83f6c:	000d0a73 	.word	0x000d0a73
   83f70:	75647241 	.word	0x75647241
   83f74:	206f6e69 	.word	0x206f6e69
   83f78:	2f657544 	.word	0x2f657544
   83f7c:	00000058 	.word	0x00000058
   83f80:	43202d2d 	.word	0x43202d2d
   83f84:	69706d6f 	.word	0x69706d6f
   83f88:	3a64656c 	.word	0x3a64656c
   83f8c:	20732520 	.word	0x20732520
   83f90:	2d207325 	.word	0x2d207325
   83f94:	000d0a2d 	.word	0x000d0a2d
   83f98:	2079614d 	.word	0x2079614d
   83f9c:	32203920 	.word	0x32203920
   83fa0:	00373130 	.word	0x00373130
   83fa4:	343a3131 	.word	0x343a3131
   83fa8:	32333a35 	.word	0x32333a35
   83fac:	00000000 	.word	0x00000000
   83fb0:	6e69614d 	.word	0x6e69614d
   83fb4:	69687720 	.word	0x69687720
   83fb8:	0000656c 	.word	0x0000656c
   83fbc:	00000043 	.word	0x00000043

00083fc0 <_global_impure_ptr>:
   83fc0:	20070138 33323130 37363534 42413938     8.. 0123456789AB
   83fd0:	46454443 00000000 33323130 37363534     CDEF....01234567
   83fe0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83ff0:	0000296c                                l)..

00083ff4 <zeroes.6721>:
   83ff4:	30303030 30303030 30303030 30303030     0000000000000000

00084004 <blanks.6720>:
   84004:	20202020 20202020 20202020 20202020                     

00084014 <_init>:
   84014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84016:	bf00      	nop
   84018:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8401a:	bc08      	pop	{r3}
   8401c:	469e      	mov	lr, r3
   8401e:	4770      	bx	lr

00084020 <__init_array_start>:
   84020:	00081fd9 	.word	0x00081fd9

00084024 <__frame_dummy_init_array_entry>:
   84024:	00080119                                ....

00084028 <_fini>:
   84028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8402a:	bf00      	nop
   8402c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8402e:	bc08      	pop	{r3}
   84030:	469e      	mov	lr, r3
   84032:	4770      	bx	lr

00084034 <__fini_array_start>:
   84034:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900 00000000                       ..=.....

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
2007016c:	00083fbc 00000000 00000000 00000000     .?..............
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <_impure_ptr>:
20070560:	20070138                                8.. 

20070564 <lc_ctype_charset>:
20070564:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070584 <__mb_cur_max>:
20070584:	00000001                                ....

20070588 <__malloc_av_>:
	...
20070590:	20070588 20070588 20070590 20070590     ... ... ... ... 
200705a0:	20070598 20070598 200705a0 200705a0     ... ... ... ... 
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 

20070990 <__malloc_trim_threshold>:
20070990:	00020000                                ....

20070994 <__malloc_sbrk_base>:
20070994:	ffffffff                                ....

20070998 <__wctomb>:
20070998:	00083749                                I7..
