
RaspDue_Rotate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ef0  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083ef0  00083ef0  0000bef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000099c  20070000  00083ef8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000174  2007099c  00084894  0001099c  2**2
                  ALLOC
  4 .stack        00002000  20070b10  00084a08  0001099c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0001099c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109c5  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000f4b1  00000000  00000000  00010a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002aa5  00000000  00000000  0001fed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004790  00000000  00000000  00022976  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b00  00000000  00000000  00027106  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009e8  00000000  00000000  00027c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000198da  00000000  00000000  000285ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00011a2b  00000000  00000000  00041ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00061a70  00000000  00000000  000538f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000215c  00000000  00000000  000b5364  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b10 	.word	0x20072b10
   80004:	00080c0d 	.word	0x00080c0d
   80008:	00080c09 	.word	0x00080c09
   8000c:	00080c09 	.word	0x00080c09
   80010:	00080c09 	.word	0x00080c09
   80014:	00080c09 	.word	0x00080c09
   80018:	00080c09 	.word	0x00080c09
	...
   8002c:	00080c09 	.word	0x00080c09
   80030:	00080c09 	.word	0x00080c09
   80034:	00000000 	.word	0x00000000
   80038:	00080c09 	.word	0x00080c09
   8003c:	00080c09 	.word	0x00080c09
   80040:	00080c09 	.word	0x00080c09
   80044:	00080c09 	.word	0x00080c09
   80048:	00080c09 	.word	0x00080c09
   8004c:	00080c09 	.word	0x00080c09
   80050:	00080c09 	.word	0x00080c09
   80054:	00080c09 	.word	0x00080c09
   80058:	00080c09 	.word	0x00080c09
   8005c:	00080c09 	.word	0x00080c09
   80060:	00080c09 	.word	0x00080c09
   80064:	00080c09 	.word	0x00080c09
   80068:	00000000 	.word	0x00000000
   8006c:	00080a79 	.word	0x00080a79
   80070:	00080a8d 	.word	0x00080a8d
   80074:	00080aa1 	.word	0x00080aa1
   80078:	00080ab5 	.word	0x00080ab5
	...
   80084:	000801f1 	.word	0x000801f1
   80088:	00080c09 	.word	0x00080c09
   8008c:	00080c09 	.word	0x00080c09
   80090:	00080c09 	.word	0x00080c09
   80094:	00080c09 	.word	0x00080c09
   80098:	00080c09 	.word	0x00080c09
   8009c:	00080c09 	.word	0x00080c09
   800a0:	00080c09 	.word	0x00080c09
   800a4:	00000000 	.word	0x00000000
   800a8:	00080c09 	.word	0x00080c09
   800ac:	00080c09 	.word	0x00080c09
   800b0:	00080c09 	.word	0x00080c09
   800b4:	00080c09 	.word	0x00080c09
   800b8:	00080c09 	.word	0x00080c09
   800bc:	00080c09 	.word	0x00080c09
   800c0:	00080c09 	.word	0x00080c09
   800c4:	00080c09 	.word	0x00080c09
   800c8:	00080c09 	.word	0x00080c09
   800cc:	00080c09 	.word	0x00080c09
   800d0:	00080c09 	.word	0x00080c09
   800d4:	00080c09 	.word	0x00080c09
   800d8:	00080c09 	.word	0x00080c09
   800dc:	00080c09 	.word	0x00080c09
   800e0:	00080c09 	.word	0x00080c09
   800e4:	00080c09 	.word	0x00080c09
   800e8:	00080c09 	.word	0x00080c09
   800ec:	00080c09 	.word	0x00080c09
   800f0:	00080c09 	.word	0x00080c09

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007099c 	.word	0x2007099c
   80110:	00000000 	.word	0x00000000
   80114:	00083ef8 	.word	0x00083ef8

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00083ef8 	.word	0x00083ef8
   8013c:	200709a0 	.word	0x200709a0
   80140:	00083ef8 	.word	0x00083ef8
   80144:	00000000 	.word	0x00000000

00080148 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8014c:	460c      	mov	r4, r1
   8014e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80150:	b960      	cbnz	r0, 8016c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80152:	2a00      	cmp	r2, #0
   80154:	dd0e      	ble.n	80174 <_read+0x2c>
   80156:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80158:	4e09      	ldr	r6, [pc, #36]	; (80180 <_read+0x38>)
   8015a:	4d0a      	ldr	r5, [pc, #40]	; (80184 <_read+0x3c>)
   8015c:	6830      	ldr	r0, [r6, #0]
   8015e:	4621      	mov	r1, r4
   80160:	682b      	ldr	r3, [r5, #0]
   80162:	4798      	blx	r3
		ptr++;
   80164:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80166:	42bc      	cmp	r4, r7
   80168:	d1f8      	bne.n	8015c <_read+0x14>
   8016a:	e006      	b.n	8017a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8016c:	f04f 30ff 	mov.w	r0, #4294967295
   80170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80174:	2000      	movs	r0, #0
   80176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8017a:	4640      	mov	r0, r8
	}
	return nChars;
}
   8017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80180:	20070b08 	.word	0x20070b08
   80184:	20070b00 	.word	0x20070b00

00080188 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80188:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8018a:	0189      	lsls	r1, r1, #6
   8018c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   8018e:	2402      	movs	r4, #2
   80190:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80192:	f04f 31ff 	mov.w	r1, #4294967295
   80196:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80198:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   8019a:	605a      	str	r2, [r3, #4]
}
   8019c:	f85d 4b04 	ldr.w	r4, [sp], #4
   801a0:	4770      	bx	lr
   801a2:	bf00      	nop

000801a4 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   801a4:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   801a8:	4770      	bx	lr
   801aa:	bf00      	nop

000801ac <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   801ac:	0189      	lsls	r1, r1, #6
   801ae:	2305      	movs	r3, #5
   801b0:	5043      	str	r3, [r0, r1]
   801b2:	4770      	bx	lr

000801b4 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   801b4:	0189      	lsls	r1, r1, #6
   801b6:	2302      	movs	r3, #2
   801b8:	5043      	str	r3, [r0, r1]
   801ba:	4770      	bx	lr

000801bc <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   801bc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   801c0:	6908      	ldr	r0, [r1, #16]
}
   801c2:	4770      	bx	lr

000801c4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   801c4:	6943      	ldr	r3, [r0, #20]
   801c6:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   801ca:	bf1d      	ittte	ne
   801cc:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   801d0:	61c1      	strne	r1, [r0, #28]
	return 0;
   801d2:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   801d4:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   801d6:	4770      	bx	lr

000801d8 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   801d8:	6943      	ldr	r3, [r0, #20]
   801da:	f013 0f01 	tst.w	r3, #1
   801de:	d005      	beq.n	801ec <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   801e0:	6983      	ldr	r3, [r0, #24]
   801e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   801e6:	600b      	str	r3, [r1, #0]

	return 0;
   801e8:	2000      	movs	r0, #0
   801ea:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   801ec:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   801ee:	4770      	bx	lr

000801f0 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   801f0:	b500      	push	{lr}
   801f2:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   801f4:	4813      	ldr	r0, [pc, #76]	; (80244 <USART0_Handler+0x54>)
   801f6:	f10d 0107 	add.w	r1, sp, #7
   801fa:	2201      	movs	r2, #1
   801fc:	4b12      	ldr	r3, [pc, #72]	; (80248 <USART0_Handler+0x58>)
   801fe:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   80200:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80202:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   80206:	2200      	movs	r2, #0
   80208:	4b10      	ldr	r3, [pc, #64]	; (8024c <USART0_Handler+0x5c>)
   8020a:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   8020c:	4b10      	ldr	r3, [pc, #64]	; (80250 <USART0_Handler+0x60>)
   8020e:	781a      	ldrb	r2, [r3, #0]
   80210:	3201      	adds	r2, #1
   80212:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80214:	4b0f      	ldr	r3, [pc, #60]	; (80254 <USART0_Handler+0x64>)
   80216:	781b      	ldrb	r3, [r3, #0]
   80218:	f89d 1007 	ldrb.w	r1, [sp, #7]
   8021c:	4a0e      	ldr	r2, [pc, #56]	; (80258 <USART0_Handler+0x68>)
   8021e:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80220:	2b9b      	cmp	r3, #155	; 0x9b
   80222:	d103      	bne.n	8022c <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   80224:	2200      	movs	r2, #0
   80226:	4b0b      	ldr	r3, [pc, #44]	; (80254 <USART0_Handler+0x64>)
   80228:	701a      	strb	r2, [r3, #0]
   8022a:	e002      	b.n	80232 <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   8022c:	3301      	adds	r3, #1
   8022e:	4a09      	ldr	r2, [pc, #36]	; (80254 <USART0_Handler+0x64>)
   80230:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   80232:	2201      	movs	r2, #1
   80234:	4b05      	ldr	r3, [pc, #20]	; (8024c <USART0_Handler+0x5c>)
   80236:	701a      	strb	r2, [r3, #0]
   80238:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8023c:	b662      	cpsie	i
}
   8023e:	b003      	add	sp, #12
   80240:	f85d fb04 	ldr.w	pc, [sp], #4
   80244:	40098000 	.word	0x40098000
   80248:	00080615 	.word	0x00080615
   8024c:	2007012c 	.word	0x2007012c
   80250:	20070a55 	.word	0x20070a55
   80254:	20070a54 	.word	0x20070a54
   80258:	200709b8 	.word	0x200709b8

0008025c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8025c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8025e:	b083      	sub	sp, #12
   80260:	4604      	mov	r4, r0
   80262:	460d      	mov	r5, r1
	uint32_t val = 0;
   80264:	2300      	movs	r3, #0
   80266:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80268:	4b1f      	ldr	r3, [pc, #124]	; (802e8 <usart_serial_getchar+0x8c>)
   8026a:	4298      	cmp	r0, r3
   8026c:	d107      	bne.n	8027e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   8026e:	461f      	mov	r7, r3
   80270:	4e1e      	ldr	r6, [pc, #120]	; (802ec <usart_serial_getchar+0x90>)
   80272:	4638      	mov	r0, r7
   80274:	4629      	mov	r1, r5
   80276:	47b0      	blx	r6
   80278:	2800      	cmp	r0, #0
   8027a:	d1fa      	bne.n	80272 <usart_serial_getchar+0x16>
   8027c:	e019      	b.n	802b2 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8027e:	4b1c      	ldr	r3, [pc, #112]	; (802f0 <usart_serial_getchar+0x94>)
   80280:	4298      	cmp	r0, r3
   80282:	d109      	bne.n	80298 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80284:	461f      	mov	r7, r3
   80286:	4e1b      	ldr	r6, [pc, #108]	; (802f4 <usart_serial_getchar+0x98>)
   80288:	4638      	mov	r0, r7
   8028a:	a901      	add	r1, sp, #4
   8028c:	47b0      	blx	r6
   8028e:	2800      	cmp	r0, #0
   80290:	d1fa      	bne.n	80288 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80292:	9b01      	ldr	r3, [sp, #4]
   80294:	702b      	strb	r3, [r5, #0]
   80296:	e019      	b.n	802cc <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80298:	4b17      	ldr	r3, [pc, #92]	; (802f8 <usart_serial_getchar+0x9c>)
   8029a:	4298      	cmp	r0, r3
   8029c:	d109      	bne.n	802b2 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   8029e:	461e      	mov	r6, r3
   802a0:	4c14      	ldr	r4, [pc, #80]	; (802f4 <usart_serial_getchar+0x98>)
   802a2:	4630      	mov	r0, r6
   802a4:	a901      	add	r1, sp, #4
   802a6:	47a0      	blx	r4
   802a8:	2800      	cmp	r0, #0
   802aa:	d1fa      	bne.n	802a2 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   802ac:	9b01      	ldr	r3, [sp, #4]
   802ae:	702b      	strb	r3, [r5, #0]
   802b0:	e018      	b.n	802e4 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   802b2:	4b12      	ldr	r3, [pc, #72]	; (802fc <usart_serial_getchar+0xa0>)
   802b4:	429c      	cmp	r4, r3
   802b6:	d109      	bne.n	802cc <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   802b8:	461e      	mov	r6, r3
   802ba:	4c0e      	ldr	r4, [pc, #56]	; (802f4 <usart_serial_getchar+0x98>)
   802bc:	4630      	mov	r0, r6
   802be:	a901      	add	r1, sp, #4
   802c0:	47a0      	blx	r4
   802c2:	2800      	cmp	r0, #0
   802c4:	d1fa      	bne.n	802bc <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   802c6:	9b01      	ldr	r3, [sp, #4]
   802c8:	702b      	strb	r3, [r5, #0]
   802ca:	e00b      	b.n	802e4 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   802cc:	4b0c      	ldr	r3, [pc, #48]	; (80300 <usart_serial_getchar+0xa4>)
   802ce:	429c      	cmp	r4, r3
   802d0:	d108      	bne.n	802e4 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   802d2:	461e      	mov	r6, r3
   802d4:	4c07      	ldr	r4, [pc, #28]	; (802f4 <usart_serial_getchar+0x98>)
   802d6:	4630      	mov	r0, r6
   802d8:	a901      	add	r1, sp, #4
   802da:	47a0      	blx	r4
   802dc:	2800      	cmp	r0, #0
   802de:	d1fa      	bne.n	802d6 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   802e0:	9b01      	ldr	r3, [sp, #4]
   802e2:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   802e4:	b003      	add	sp, #12
   802e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   802e8:	400e0800 	.word	0x400e0800
   802ec:	00080721 	.word	0x00080721
   802f0:	40098000 	.word	0x40098000
   802f4:	000801d9 	.word	0x000801d9
   802f8:	4009c000 	.word	0x4009c000
   802fc:	400a0000 	.word	0x400a0000
   80300:	400a4000 	.word	0x400a4000

00080304 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80304:	b570      	push	{r4, r5, r6, lr}
   80306:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80308:	4b21      	ldr	r3, [pc, #132]	; (80390 <usart_serial_putchar+0x8c>)
   8030a:	4298      	cmp	r0, r3
   8030c:	d107      	bne.n	8031e <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   8030e:	461e      	mov	r6, r3
   80310:	4d20      	ldr	r5, [pc, #128]	; (80394 <usart_serial_putchar+0x90>)
   80312:	4630      	mov	r0, r6
   80314:	4621      	mov	r1, r4
   80316:	47a8      	blx	r5
   80318:	2800      	cmp	r0, #0
   8031a:	d1fa      	bne.n	80312 <usart_serial_putchar+0xe>
   8031c:	e02b      	b.n	80376 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8031e:	4b1e      	ldr	r3, [pc, #120]	; (80398 <usart_serial_putchar+0x94>)
   80320:	4298      	cmp	r0, r3
   80322:	d107      	bne.n	80334 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80324:	461e      	mov	r6, r3
   80326:	4d1d      	ldr	r5, [pc, #116]	; (8039c <usart_serial_putchar+0x98>)
   80328:	4630      	mov	r0, r6
   8032a:	4621      	mov	r1, r4
   8032c:	47a8      	blx	r5
   8032e:	2800      	cmp	r0, #0
   80330:	d1fa      	bne.n	80328 <usart_serial_putchar+0x24>
   80332:	e022      	b.n	8037a <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80334:	4b1a      	ldr	r3, [pc, #104]	; (803a0 <usart_serial_putchar+0x9c>)
   80336:	4298      	cmp	r0, r3
   80338:	d107      	bne.n	8034a <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8033a:	461e      	mov	r6, r3
   8033c:	4d17      	ldr	r5, [pc, #92]	; (8039c <usart_serial_putchar+0x98>)
   8033e:	4630      	mov	r0, r6
   80340:	4621      	mov	r1, r4
   80342:	47a8      	blx	r5
   80344:	2800      	cmp	r0, #0
   80346:	d1fa      	bne.n	8033e <usart_serial_putchar+0x3a>
   80348:	e019      	b.n	8037e <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8034a:	4b16      	ldr	r3, [pc, #88]	; (803a4 <usart_serial_putchar+0xa0>)
   8034c:	4298      	cmp	r0, r3
   8034e:	d107      	bne.n	80360 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80350:	461e      	mov	r6, r3
   80352:	4d12      	ldr	r5, [pc, #72]	; (8039c <usart_serial_putchar+0x98>)
   80354:	4630      	mov	r0, r6
   80356:	4621      	mov	r1, r4
   80358:	47a8      	blx	r5
   8035a:	2800      	cmp	r0, #0
   8035c:	d1fa      	bne.n	80354 <usart_serial_putchar+0x50>
   8035e:	e010      	b.n	80382 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80360:	4b11      	ldr	r3, [pc, #68]	; (803a8 <usart_serial_putchar+0xa4>)
   80362:	4298      	cmp	r0, r3
   80364:	d10f      	bne.n	80386 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80366:	461e      	mov	r6, r3
   80368:	4d0c      	ldr	r5, [pc, #48]	; (8039c <usart_serial_putchar+0x98>)
   8036a:	4630      	mov	r0, r6
   8036c:	4621      	mov	r1, r4
   8036e:	47a8      	blx	r5
   80370:	2800      	cmp	r0, #0
   80372:	d1fa      	bne.n	8036a <usart_serial_putchar+0x66>
   80374:	e009      	b.n	8038a <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80376:	2001      	movs	r0, #1
   80378:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8037a:	2001      	movs	r0, #1
   8037c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8037e:	2001      	movs	r0, #1
   80380:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80382:	2001      	movs	r0, #1
   80384:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80386:	2000      	movs	r0, #0
   80388:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8038a:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   8038c:	bd70      	pop	{r4, r5, r6, pc}
   8038e:	bf00      	nop
   80390:	400e0800 	.word	0x400e0800
   80394:	00080711 	.word	0x00080711
   80398:	40098000 	.word	0x40098000
   8039c:	000801c5 	.word	0x000801c5
   803a0:	4009c000 	.word	0x4009c000
   803a4:	400a0000 	.word	0x400a0000
   803a8:	400a4000 	.word	0x400a4000

000803ac <configureConsole>:
#include "consoleFunctions.h"

void configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   803ac:	b530      	push	{r4, r5, lr}
   803ae:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   803b0:	2008      	movs	r0, #8
   803b2:	4d15      	ldr	r5, [pc, #84]	; (80408 <configureConsole+0x5c>)
   803b4:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   803b6:	4c15      	ldr	r4, [pc, #84]	; (8040c <configureConsole+0x60>)
   803b8:	4b15      	ldr	r3, [pc, #84]	; (80410 <configureConsole+0x64>)
   803ba:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   803bc:	4a15      	ldr	r2, [pc, #84]	; (80414 <configureConsole+0x68>)
   803be:	4b16      	ldr	r3, [pc, #88]	; (80418 <configureConsole+0x6c>)
   803c0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   803c2:	4a16      	ldr	r2, [pc, #88]	; (8041c <configureConsole+0x70>)
   803c4:	4b16      	ldr	r3, [pc, #88]	; (80420 <configureConsole+0x74>)
   803c6:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   803c8:	4b16      	ldr	r3, [pc, #88]	; (80424 <configureConsole+0x78>)
   803ca:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   803cc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   803d0:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   803d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   803d6:	9303      	str	r3, [sp, #12]
   803d8:	2008      	movs	r0, #8
   803da:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   803dc:	4620      	mov	r0, r4
   803de:	a901      	add	r1, sp, #4
   803e0:	4b11      	ldr	r3, [pc, #68]	; (80428 <configureConsole+0x7c>)
   803e2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   803e4:	4d11      	ldr	r5, [pc, #68]	; (8042c <configureConsole+0x80>)
   803e6:	682b      	ldr	r3, [r5, #0]
   803e8:	6898      	ldr	r0, [r3, #8]
   803ea:	2100      	movs	r1, #0
   803ec:	4c10      	ldr	r4, [pc, #64]	; (80430 <configureConsole+0x84>)
   803ee:	47a0      	blx	r4
	setbuf(stdin, NULL);
   803f0:	682b      	ldr	r3, [r5, #0]
   803f2:	6858      	ldr	r0, [r3, #4]
   803f4:	2100      	movs	r1, #0
   803f6:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   803f8:	480e      	ldr	r0, [pc, #56]	; (80434 <configureConsole+0x88>)
   803fa:	4c0f      	ldr	r4, [pc, #60]	; (80438 <configureConsole+0x8c>)
   803fc:	47a0      	blx	r4
	printf("=============\n");
   803fe:	480f      	ldr	r0, [pc, #60]	; (8043c <configureConsole+0x90>)
   80400:	47a0      	blx	r4
   80402:	b005      	add	sp, #20
   80404:	bd30      	pop	{r4, r5, pc}
   80406:	bf00      	nop
   80408:	00080bb1 	.word	0x00080bb1
   8040c:	400e0800 	.word	0x400e0800
   80410:	20070b08 	.word	0x20070b08
   80414:	00080305 	.word	0x00080305
   80418:	20070b04 	.word	0x20070b04
   8041c:	0008025d 	.word	0x0008025d
   80420:	20070b00 	.word	0x20070b00
   80424:	0501bd00 	.word	0x0501bd00
   80428:	000806d9 	.word	0x000806d9
   8042c:	20070560 	.word	0x20070560
   80430:	00080f89 	.word	0x00080f89
   80434:	00083e10 	.word	0x00083e10
   80438:	00080ecd 	.word	0x00080ecd
   8043c:	00083e20 	.word	0x00083e20

00080440 <delayInit>:

#include "asf.h"
#include "DelayFunctions.h"

void delayInit(void)		/* Initializes the timer used for delays */
{
   80440:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);
   80442:	201b      	movs	r0, #27
   80444:	4b08      	ldr	r3, [pc, #32]	; (80468 <delayInit+0x28>)
   80446:	4798      	blx	r3
	tc_init(TC0,0,0);		 /* TC0, channel 0, TCLK1 och capturemode */
   80448:	4c08      	ldr	r4, [pc, #32]	; (8046c <delayInit+0x2c>)
   8044a:	4620      	mov	r0, r4
   8044c:	2100      	movs	r1, #0
   8044e:	460a      	mov	r2, r1
   80450:	4b07      	ldr	r3, [pc, #28]	; (80470 <delayInit+0x30>)
   80452:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   80454:	4620      	mov	r0, r4
   80456:	2100      	movs	r1, #0
   80458:	4b06      	ldr	r3, [pc, #24]	; (80474 <delayInit+0x34>)
   8045a:	4798      	blx	r3
	tc_stop(TC0,0);			/* making sure the timer does not run  */
   8045c:	4620      	mov	r0, r4
   8045e:	2100      	movs	r1, #0
   80460:	4b05      	ldr	r3, [pc, #20]	; (80478 <delayInit+0x38>)
   80462:	4798      	blx	r3
   80464:	bd10      	pop	{r4, pc}
   80466:	bf00      	nop
   80468:	00080bb1 	.word	0x00080bb1
   8046c:	40080000 	.word	0x40080000
   80470:	00080189 	.word	0x00080189
   80474:	000801a5 	.word	0x000801a5
   80478:	000801b5 	.word	0x000801b5

0008047c <delayMicroseconds>:
}


void delayMicroseconds(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   8047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8047e:	4604      	mov	r4, r0
	tc_start(TC0,0);
   80480:	4809      	ldr	r0, [pc, #36]	; (804a8 <delayMicroseconds+0x2c>)
   80482:	2100      	movs	r1, #0
   80484:	4b09      	ldr	r3, [pc, #36]	; (804ac <delayMicroseconds+0x30>)
   80486:	4798      	blx	r3
	while (tc_read_cv(TC0,0) < us*42); /* Only works in newere version of ASF */
   80488:	272a      	movs	r7, #42	; 0x2a
   8048a:	fb07 f704 	mul.w	r7, r7, r4
   8048e:	4e06      	ldr	r6, [pc, #24]	; (804a8 <delayMicroseconds+0x2c>)
   80490:	2500      	movs	r5, #0
   80492:	4c07      	ldr	r4, [pc, #28]	; (804b0 <delayMicroseconds+0x34>)
   80494:	4630      	mov	r0, r6
   80496:	4629      	mov	r1, r5
   80498:	47a0      	blx	r4
   8049a:	42b8      	cmp	r0, r7
   8049c:	d3fa      	bcc.n	80494 <delayMicroseconds+0x18>
	tc_stop(TC0,0);
   8049e:	4802      	ldr	r0, [pc, #8]	; (804a8 <delayMicroseconds+0x2c>)
   804a0:	2100      	movs	r1, #0
   804a2:	4b04      	ldr	r3, [pc, #16]	; (804b4 <delayMicroseconds+0x38>)
   804a4:	4798      	blx	r3
   804a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   804a8:	40080000 	.word	0x40080000
   804ac:	000801ad 	.word	0x000801ad
   804b0:	000801bd 	.word	0x000801bd
   804b4:	000801b5 	.word	0x000801b5

000804b8 <initMotor>:
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   804b8:	4b04      	ldr	r3, [pc, #16]	; (804cc <initMotor+0x14>)
   804ba:	2210      	movs	r2, #16
   804bc:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   804c2:	2220      	movs	r2, #32
   804c4:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   804ca:	4770      	bx	lr
   804cc:	400e1200 	.word	0x400e1200

000804d0 <pulseLeft>:
void initMotor(void){
		ioport_set_pin_dir(LEFT_OUT,IOPORT_DIR_OUTPUT);
		ioport_set_pin_dir(RIGHT_OUT,IOPORT_DIR_OUTPUT);
}

void pulseLeft(int p1){
   804d0:	b538      	push	{r3, r4, r5, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   804d2:	4c03      	ldr	r4, [pc, #12]	; (804e0 <pulseLeft+0x10>)
   804d4:	2510      	movs	r5, #16
   804d6:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LEFT_OUT,HIGH);
	delayMicroseconds(p1);
   804d8:	4b02      	ldr	r3, [pc, #8]	; (804e4 <pulseLeft+0x14>)
   804da:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   804dc:	6365      	str	r5, [r4, #52]	; 0x34
   804de:	bd38      	pop	{r3, r4, r5, pc}
   804e0:	400e1200 	.word	0x400e1200
   804e4:	0008047d 	.word	0x0008047d

000804e8 <pulseRight>:
	ioport_set_pin_level(LEFT_OUT,LOW);
}
void pulseRight(int p2){
   804e8:	b538      	push	{r3, r4, r5, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   804ea:	4c03      	ldr	r4, [pc, #12]	; (804f8 <pulseRight+0x10>)
   804ec:	2520      	movs	r5, #32
   804ee:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(RIGHT_OUT,HIGH);
	delayMicroseconds(p2);
   804f0:	4b02      	ldr	r3, [pc, #8]	; (804fc <pulseRight+0x14>)
   804f2:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   804f4:	6365      	str	r5, [r4, #52]	; 0x34
   804f6:	bd38      	pop	{r3, r4, r5, pc}
   804f8:	400e1200 	.word	0x400e1200
   804fc:	0008047d 	.word	0x0008047d

00080500 <moveForward>:
	ioport_set_pin_level(RIGHT_OUT,LOW);
}

void moveForward(int l,int r){
   80500:	b510      	push	{r4, lr}
   80502:	460c      	mov	r4, r1
	pulseLeft(l);
   80504:	4b04      	ldr	r3, [pc, #16]	; (80518 <moveForward+0x18>)
   80506:	4798      	blx	r3
	pulseRight(r);
   80508:	4620      	mov	r0, r4
   8050a:	4b04      	ldr	r3, [pc, #16]	; (8051c <moveForward+0x1c>)
   8050c:	4798      	blx	r3
	delayMicroseconds(5250);
   8050e:	f241 4082 	movw	r0, #5250	; 0x1482
   80512:	4b03      	ldr	r3, [pc, #12]	; (80520 <moveForward+0x20>)
   80514:	4798      	blx	r3
   80516:	bd10      	pop	{r4, pc}
   80518:	000804d1 	.word	0x000804d1
   8051c:	000804e9 	.word	0x000804e9
   80520:	0008047d 	.word	0x0008047d

00080524 <startCOM>:
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80524:	2280      	movs	r2, #128	; 0x80
   80526:	4b01      	ldr	r3, [pc, #4]	; (8052c <startCOM+0x8>)
   80528:	631a      	str	r2, [r3, #48]	; 0x30
   8052a:	4770      	bx	lr
   8052c:	400e1200 	.word	0x400e1200

00080530 <camera_detection>:
void startCOM(void){
	setPin(START_COM, 1);	
}

void camera_detection(void)
{ 
   80530:	b508      	push	{r3, lr}
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80532:	4c1b      	ldr	r4, [pc, #108]	; (805a0 <camera_detection+0x70>)
   80534:	4e1b      	ldr	r6, [pc, #108]	; (805a4 <camera_detection+0x74>)
		else if(getPin(LEFT_IN) == HIGH){     //1400 & 1600
			moveForward(1400,1600); 
			printf("rotate right\n");
		}
		else if(getPin(NODETECTION_IN)== HIGH){ //
			moveForward(1400,1600);
   80536:	4d1c      	ldr	r5, [pc, #112]	; (805a8 <camera_detection+0x78>)
   80538:	6be3      	ldr	r3, [r4, #60]	; 0x3c
}

void camera_detection(void)
{ 
	while(1){
		if(getPin(RIGHT_IN) == HIGH){
   8053a:	f413 7f80 	tst.w	r3, #256	; 0x100
   8053e:	d008      	beq.n	80552 <camera_detection+0x22>
			moveForward(1600,1400); // 1600 & 1400
   80540:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   80544:	f44f 61af 	mov.w	r1, #1400	; 0x578
   80548:	47a8      	blx	r5
			printf("rotate left\n");
   8054a:	4818      	ldr	r0, [pc, #96]	; (805ac <camera_detection+0x7c>)
   8054c:	4b18      	ldr	r3, [pc, #96]	; (805b0 <camera_detection+0x80>)
   8054e:	4798      	blx	r3
   80550:	e7f2      	b.n	80538 <camera_detection+0x8>
   80552:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
		}
		else if(getPin(TARGET_IN) == HIGH){  //1500 & 1500
   80554:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   80558:	d007      	beq.n	8056a <camera_detection+0x3a>
			moveForward(1500,1500); 
   8055a:	f240 50dc 	movw	r0, #1500	; 0x5dc
   8055e:	4601      	mov	r1, r0
   80560:	47a8      	blx	r5
			
			printf("stop and move forward\n");
   80562:	4814      	ldr	r0, [pc, #80]	; (805b4 <camera_detection+0x84>)
   80564:	4b12      	ldr	r3, [pc, #72]	; (805b0 <camera_detection+0x80>)
   80566:	4798      	blx	r3
   80568:	e7e6      	b.n	80538 <camera_detection+0x8>
   8056a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		}
		else if(getPin(LEFT_IN) == HIGH){     //1400 & 1600
   8056c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   80570:	d008      	beq.n	80584 <camera_detection+0x54>
			moveForward(1400,1600); 
   80572:	f44f 60af 	mov.w	r0, #1400	; 0x578
   80576:	f44f 61c8 	mov.w	r1, #1600	; 0x640
   8057a:	47a8      	blx	r5
			printf("rotate right\n");
   8057c:	480e      	ldr	r0, [pc, #56]	; (805b8 <camera_detection+0x88>)
   8057e:	4b0c      	ldr	r3, [pc, #48]	; (805b0 <camera_detection+0x80>)
   80580:	4798      	blx	r3
   80582:	e7d9      	b.n	80538 <camera_detection+0x8>
   80584:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		}
		else if(getPin(NODETECTION_IN)== HIGH){ //
   80586:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   8058a:	d0d5      	beq.n	80538 <camera_detection+0x8>
			moveForward(1400,1600);
   8058c:	f44f 60af 	mov.w	r0, #1400	; 0x578
   80590:	f44f 61c8 	mov.w	r1, #1600	; 0x640
   80594:	47a8      	blx	r5
			printf("no object\n");
   80596:	4809      	ldr	r0, [pc, #36]	; (805bc <camera_detection+0x8c>)
   80598:	4b05      	ldr	r3, [pc, #20]	; (805b0 <camera_detection+0x80>)
   8059a:	4798      	blx	r3
   8059c:	e7cc      	b.n	80538 <camera_detection+0x8>
   8059e:	bf00      	nop
   805a0:	400e1200 	.word	0x400e1200
   805a4:	400e0e00 	.word	0x400e0e00
   805a8:	00080501 	.word	0x00080501
   805ac:	00083e30 	.word	0x00083e30
   805b0:	00080ecd 	.word	0x00080ecd
   805b4:	00083e40 	.word	0x00083e40
   805b8:	00083e58 	.word	0x00083e58
   805bc:	00083e68 	.word	0x00083e68

000805c0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   805c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   805c4:	460e      	mov	r6, r1
   805c6:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   805c8:	3801      	subs	r0, #1
   805ca:	2802      	cmp	r0, #2
   805cc:	d80f      	bhi.n	805ee <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   805ce:	b192      	cbz	r2, 805f6 <_write+0x36>
   805d0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   805d2:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80610 <_write+0x50>
   805d6:	4f0d      	ldr	r7, [pc, #52]	; (8060c <_write+0x4c>)
   805d8:	f8d8 0000 	ldr.w	r0, [r8]
   805dc:	5d31      	ldrb	r1, [r6, r4]
   805de:	683b      	ldr	r3, [r7, #0]
   805e0:	4798      	blx	r3
   805e2:	2800      	cmp	r0, #0
   805e4:	db0a      	blt.n	805fc <_write+0x3c>
			return -1;
		}
		++nChars;
   805e6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   805e8:	42a5      	cmp	r5, r4
   805ea:	d1f5      	bne.n	805d8 <_write+0x18>
   805ec:	e00a      	b.n	80604 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   805ee:	f04f 30ff 	mov.w	r0, #4294967295
   805f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   805f6:	2000      	movs	r0, #0
   805f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   805fc:	f04f 30ff 	mov.w	r0, #4294967295
   80600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80604:	4620      	mov	r0, r4
	}
	return nChars;
}
   80606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8060a:	bf00      	nop
   8060c:	20070b04 	.word	0x20070b04
   80610:	20070b08 	.word	0x20070b08

00080614 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80618:	b083      	sub	sp, #12
   8061a:	4605      	mov	r5, r0
	while (len) {
   8061c:	4690      	mov	r8, r2
   8061e:	2a00      	cmp	r2, #0
   80620:	d047      	beq.n	806b2 <usart_serial_read_packet+0x9e>
   80622:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80624:	4f25      	ldr	r7, [pc, #148]	; (806bc <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   80626:	4c26      	ldr	r4, [pc, #152]	; (806c0 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80628:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 806d4 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   8062c:	f8df b094 	ldr.w	fp, [pc, #148]	; 806c4 <usart_serial_read_packet+0xb0>
   80630:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80634:	2300      	movs	r3, #0
   80636:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80638:	4b22      	ldr	r3, [pc, #136]	; (806c4 <usart_serial_read_packet+0xb0>)
   8063a:	429d      	cmp	r5, r3
   8063c:	d106      	bne.n	8064c <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   8063e:	4658      	mov	r0, fp
   80640:	4649      	mov	r1, r9
   80642:	4b21      	ldr	r3, [pc, #132]	; (806c8 <usart_serial_read_packet+0xb4>)
   80644:	4798      	blx	r3
   80646:	2800      	cmp	r0, #0
   80648:	d1f9      	bne.n	8063e <usart_serial_read_packet+0x2a>
   8064a:	e019      	b.n	80680 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8064c:	4b1f      	ldr	r3, [pc, #124]	; (806cc <usart_serial_read_packet+0xb8>)
   8064e:	429d      	cmp	r5, r3
   80650:	d109      	bne.n	80666 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80652:	4699      	mov	r9, r3
   80654:	4648      	mov	r0, r9
   80656:	a901      	add	r1, sp, #4
   80658:	47a0      	blx	r4
   8065a:	2800      	cmp	r0, #0
   8065c:	d1fa      	bne.n	80654 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   8065e:	9b01      	ldr	r3, [sp, #4]
   80660:	f806 3c01 	strb.w	r3, [r6, #-1]
   80664:	e017      	b.n	80696 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80666:	4b1a      	ldr	r3, [pc, #104]	; (806d0 <usart_serial_read_packet+0xbc>)
   80668:	429d      	cmp	r5, r3
   8066a:	d109      	bne.n	80680 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   8066c:	4699      	mov	r9, r3
   8066e:	4648      	mov	r0, r9
   80670:	a901      	add	r1, sp, #4
   80672:	47a0      	blx	r4
   80674:	2800      	cmp	r0, #0
   80676:	d1fa      	bne.n	8066e <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80678:	9b01      	ldr	r3, [sp, #4]
   8067a:	f806 3c01 	strb.w	r3, [r6, #-1]
   8067e:	e014      	b.n	806aa <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80680:	4555      	cmp	r5, sl
   80682:	d108      	bne.n	80696 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   80684:	4650      	mov	r0, sl
   80686:	a901      	add	r1, sp, #4
   80688:	47a0      	blx	r4
   8068a:	2800      	cmp	r0, #0
   8068c:	d1fa      	bne.n	80684 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   8068e:	9b01      	ldr	r3, [sp, #4]
   80690:	f806 3c01 	strb.w	r3, [r6, #-1]
   80694:	e009      	b.n	806aa <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80696:	42bd      	cmp	r5, r7
   80698:	d107      	bne.n	806aa <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   8069a:	4638      	mov	r0, r7
   8069c:	a901      	add	r1, sp, #4
   8069e:	47a0      	blx	r4
   806a0:	2800      	cmp	r0, #0
   806a2:	d1fa      	bne.n	8069a <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   806a4:	9b01      	ldr	r3, [sp, #4]
   806a6:	f806 3c01 	strb.w	r3, [r6, #-1]
   806aa:	3601      	adds	r6, #1
   806ac:	f1b8 0801 	subs.w	r8, r8, #1
   806b0:	d1be      	bne.n	80630 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   806b2:	2000      	movs	r0, #0
   806b4:	b003      	add	sp, #12
   806b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   806ba:	bf00      	nop
   806bc:	400a4000 	.word	0x400a4000
   806c0:	000801d9 	.word	0x000801d9
   806c4:	400e0800 	.word	0x400e0800
   806c8:	00080721 	.word	0x00080721
   806cc:	40098000 	.word	0x40098000
   806d0:	4009c000 	.word	0x4009c000
   806d4:	400a0000 	.word	0x400a0000

000806d8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   806d8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   806da:	23ac      	movs	r3, #172	; 0xac
   806dc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   806de:	680a      	ldr	r2, [r1, #0]
   806e0:	684b      	ldr	r3, [r1, #4]
   806e2:	fbb2 f3f3 	udiv	r3, r2, r3
   806e6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   806e8:	1e5c      	subs	r4, r3, #1
   806ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   806ee:	4294      	cmp	r4, r2
   806f0:	d80a      	bhi.n	80708 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   806f2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   806f4:	688b      	ldr	r3, [r1, #8]
   806f6:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   806f8:	f240 2302 	movw	r3, #514	; 0x202
   806fc:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80700:	2350      	movs	r3, #80	; 0x50
   80702:	6003      	str	r3, [r0, #0]

	return 0;
   80704:	2000      	movs	r0, #0
   80706:	e000      	b.n	8070a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80708:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8070a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8070e:	4770      	bx	lr

00080710 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80710:	6943      	ldr	r3, [r0, #20]
   80712:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80716:	bf1a      	itte	ne
   80718:	61c1      	strne	r1, [r0, #28]
	return 0;
   8071a:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   8071c:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   8071e:	4770      	bx	lr

00080720 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80720:	6943      	ldr	r3, [r0, #20]
   80722:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80726:	bf1d      	ittte	ne
   80728:	6983      	ldrne	r3, [r0, #24]
   8072a:	700b      	strbne	r3, [r1, #0]
	return 0;
   8072c:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8072e:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80730:	4770      	bx	lr
   80732:	bf00      	nop

00080734 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80734:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80736:	480e      	ldr	r0, [pc, #56]	; (80770 <sysclk_init+0x3c>)
   80738:	4b0e      	ldr	r3, [pc, #56]	; (80774 <sysclk_init+0x40>)
   8073a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8073c:	2000      	movs	r0, #0
   8073e:	213e      	movs	r1, #62	; 0x3e
   80740:	4b0d      	ldr	r3, [pc, #52]	; (80778 <sysclk_init+0x44>)
   80742:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80744:	4c0d      	ldr	r4, [pc, #52]	; (8077c <sysclk_init+0x48>)
   80746:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80748:	2800      	cmp	r0, #0
   8074a:	d0fc      	beq.n	80746 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8074c:	4b0c      	ldr	r3, [pc, #48]	; (80780 <sysclk_init+0x4c>)
   8074e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80750:	4a0c      	ldr	r2, [pc, #48]	; (80784 <sysclk_init+0x50>)
   80752:	4b0d      	ldr	r3, [pc, #52]	; (80788 <sysclk_init+0x54>)
   80754:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80756:	4c0d      	ldr	r4, [pc, #52]	; (8078c <sysclk_init+0x58>)
   80758:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8075a:	2800      	cmp	r0, #0
   8075c:	d0fc      	beq.n	80758 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8075e:	2010      	movs	r0, #16
   80760:	4b0b      	ldr	r3, [pc, #44]	; (80790 <sysclk_init+0x5c>)
   80762:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80764:	4b0b      	ldr	r3, [pc, #44]	; (80794 <sysclk_init+0x60>)
   80766:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80768:	4801      	ldr	r0, [pc, #4]	; (80770 <sysclk_init+0x3c>)
   8076a:	4b02      	ldr	r3, [pc, #8]	; (80774 <sysclk_init+0x40>)
   8076c:	4798      	blx	r3
   8076e:	bd10      	pop	{r4, pc}
   80770:	0501bd00 	.word	0x0501bd00
   80774:	200700a5 	.word	0x200700a5
   80778:	00080b2d 	.word	0x00080b2d
   8077c:	00080b81 	.word	0x00080b81
   80780:	00080b91 	.word	0x00080b91
   80784:	200d3f01 	.word	0x200d3f01
   80788:	400e0600 	.word	0x400e0600
   8078c:	00080ba1 	.word	0x00080ba1
   80790:	00080ac9 	.word	0x00080ac9
   80794:	00080cbd 	.word	0x00080cbd

00080798 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80798:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8079a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8079e:	4b13      	ldr	r3, [pc, #76]	; (807ec <board_init+0x54>)
   807a0:	605a      	str	r2, [r3, #4]
   807a2:	200b      	movs	r0, #11
   807a4:	4c12      	ldr	r4, [pc, #72]	; (807f0 <board_init+0x58>)
   807a6:	47a0      	blx	r4
   807a8:	200c      	movs	r0, #12
   807aa:	47a0      	blx	r4
   807ac:	200d      	movs	r0, #13
   807ae:	47a0      	blx	r4
   807b0:	200e      	movs	r0, #14
   807b2:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   807b4:	203b      	movs	r0, #59	; 0x3b
   807b6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   807ba:	4c0e      	ldr	r4, [pc, #56]	; (807f4 <board_init+0x5c>)
   807bc:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   807be:	2055      	movs	r0, #85	; 0x55
   807c0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   807c4:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   807c6:	2056      	movs	r0, #86	; 0x56
   807c8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   807cc:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   807ce:	2068      	movs	r0, #104	; 0x68
   807d0:	4909      	ldr	r1, [pc, #36]	; (807f8 <board_init+0x60>)
   807d2:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   807d4:	205c      	movs	r0, #92	; 0x5c
   807d6:	4909      	ldr	r1, [pc, #36]	; (807fc <board_init+0x64>)
   807d8:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   807da:	4809      	ldr	r0, [pc, #36]	; (80800 <board_init+0x68>)
   807dc:	f44f 7140 	mov.w	r1, #768	; 0x300
   807e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   807e4:	4b07      	ldr	r3, [pc, #28]	; (80804 <board_init+0x6c>)
   807e6:	4798      	blx	r3
   807e8:	bd10      	pop	{r4, pc}
   807ea:	bf00      	nop
   807ec:	400e1a50 	.word	0x400e1a50
   807f0:	00080bb1 	.word	0x00080bb1
   807f4:	000808ad 	.word	0x000808ad
   807f8:	28000079 	.word	0x28000079
   807fc:	28000001 	.word	0x28000001
   80800:	400e0e00 	.word	0x400e0e00
   80804:	00080981 	.word	0x00080981

00080808 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80808:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8080a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8080e:	d016      	beq.n	8083e <pio_set_peripheral+0x36>
   80810:	d804      	bhi.n	8081c <pio_set_peripheral+0x14>
   80812:	b1c1      	cbz	r1, 80846 <pio_set_peripheral+0x3e>
   80814:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80818:	d00a      	beq.n	80830 <pio_set_peripheral+0x28>
   8081a:	e013      	b.n	80844 <pio_set_peripheral+0x3c>
   8081c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80820:	d011      	beq.n	80846 <pio_set_peripheral+0x3e>
   80822:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80826:	d00e      	beq.n	80846 <pio_set_peripheral+0x3e>
   80828:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8082c:	d10a      	bne.n	80844 <pio_set_peripheral+0x3c>
   8082e:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80830:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80832:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80834:	400b      	ands	r3, r1
   80836:	ea23 0302 	bic.w	r3, r3, r2
   8083a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8083c:	e002      	b.n	80844 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8083e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80840:	4313      	orrs	r3, r2
   80842:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80844:	6042      	str	r2, [r0, #4]
   80846:	4770      	bx	lr

00080848 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80848:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8084a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8084e:	bf14      	ite	ne
   80850:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80852:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80854:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80858:	bf14      	ite	ne
   8085a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8085c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8085e:	f012 0f02 	tst.w	r2, #2
   80862:	d002      	beq.n	8086a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80864:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80868:	e004      	b.n	80874 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8086a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8086e:	bf18      	it	ne
   80870:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80874:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80876:	6001      	str	r1, [r0, #0]
   80878:	4770      	bx	lr
   8087a:	bf00      	nop

0008087c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8087c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8087e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80880:	9c01      	ldr	r4, [sp, #4]
   80882:	b10c      	cbz	r4, 80888 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80884:	6641      	str	r1, [r0, #100]	; 0x64
   80886:	e000      	b.n	8088a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80888:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8088a:	b10b      	cbz	r3, 80890 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   8088c:	6501      	str	r1, [r0, #80]	; 0x50
   8088e:	e000      	b.n	80892 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80890:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80892:	b10a      	cbz	r2, 80898 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80894:	6301      	str	r1, [r0, #48]	; 0x30
   80896:	e000      	b.n	8089a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80898:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8089a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8089c:	6001      	str	r1, [r0, #0]
}
   8089e:	f85d 4b04 	ldr.w	r4, [sp], #4
   808a2:	4770      	bx	lr

000808a4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   808a4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   808a6:	4770      	bx	lr

000808a8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   808a8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   808aa:	4770      	bx	lr

000808ac <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   808ac:	b570      	push	{r4, r5, r6, lr}
   808ae:	b082      	sub	sp, #8
   808b0:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   808b2:	0944      	lsrs	r4, r0, #5
   808b4:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   808b8:	f204 7407 	addw	r4, r4, #1799	; 0x707
   808bc:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   808be:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   808c2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   808c6:	d030      	beq.n	8092a <pio_configure_pin+0x7e>
   808c8:	d806      	bhi.n	808d8 <pio_configure_pin+0x2c>
   808ca:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   808ce:	d00a      	beq.n	808e6 <pio_configure_pin+0x3a>
   808d0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   808d4:	d018      	beq.n	80908 <pio_configure_pin+0x5c>
   808d6:	e049      	b.n	8096c <pio_configure_pin+0xc0>
   808d8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   808dc:	d030      	beq.n	80940 <pio_configure_pin+0x94>
   808de:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   808e2:	d02d      	beq.n	80940 <pio_configure_pin+0x94>
   808e4:	e042      	b.n	8096c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   808e6:	f000 001f 	and.w	r0, r0, #31
   808ea:	2401      	movs	r4, #1
   808ec:	4084      	lsls	r4, r0
   808ee:	4630      	mov	r0, r6
   808f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   808f4:	4622      	mov	r2, r4
   808f6:	4b1f      	ldr	r3, [pc, #124]	; (80974 <pio_configure_pin+0xc8>)
   808f8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   808fa:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   808fe:	bf14      	ite	ne
   80900:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80902:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80904:	2001      	movs	r0, #1
   80906:	e032      	b.n	8096e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80908:	f000 001f 	and.w	r0, r0, #31
   8090c:	2401      	movs	r4, #1
   8090e:	4084      	lsls	r4, r0
   80910:	4630      	mov	r0, r6
   80912:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80916:	4622      	mov	r2, r4
   80918:	4b16      	ldr	r3, [pc, #88]	; (80974 <pio_configure_pin+0xc8>)
   8091a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8091c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80920:	bf14      	ite	ne
   80922:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80924:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80926:	2001      	movs	r0, #1
   80928:	e021      	b.n	8096e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8092a:	f000 011f 	and.w	r1, r0, #31
   8092e:	2401      	movs	r4, #1
   80930:	4630      	mov	r0, r6
   80932:	fa04 f101 	lsl.w	r1, r4, r1
   80936:	462a      	mov	r2, r5
   80938:	4b0f      	ldr	r3, [pc, #60]	; (80978 <pio_configure_pin+0xcc>)
   8093a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8093c:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8093e:	e016      	b.n	8096e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80940:	f000 011f 	and.w	r1, r0, #31
   80944:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80946:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8094a:	ea05 0304 	and.w	r3, r5, r4
   8094e:	9300      	str	r3, [sp, #0]
   80950:	4630      	mov	r0, r6
   80952:	fa04 f101 	lsl.w	r1, r4, r1
   80956:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8095a:	bf14      	ite	ne
   8095c:	2200      	movne	r2, #0
   8095e:	2201      	moveq	r2, #1
   80960:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80964:	4d05      	ldr	r5, [pc, #20]	; (8097c <pio_configure_pin+0xd0>)
   80966:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80968:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8096a:	e000      	b.n	8096e <pio_configure_pin+0xc2>

	default:
		return 0;
   8096c:	2000      	movs	r0, #0
	}

	return 1;
}
   8096e:	b002      	add	sp, #8
   80970:	bd70      	pop	{r4, r5, r6, pc}
   80972:	bf00      	nop
   80974:	00080809 	.word	0x00080809
   80978:	00080849 	.word	0x00080849
   8097c:	0008087d 	.word	0x0008087d

00080980 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80980:	b5f0      	push	{r4, r5, r6, r7, lr}
   80982:	b083      	sub	sp, #12
   80984:	4607      	mov	r7, r0
   80986:	460e      	mov	r6, r1
   80988:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8098a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8098e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80992:	d026      	beq.n	809e2 <pio_configure_pin_group+0x62>
   80994:	d806      	bhi.n	809a4 <pio_configure_pin_group+0x24>
   80996:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8099a:	d00a      	beq.n	809b2 <pio_configure_pin_group+0x32>
   8099c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   809a0:	d013      	beq.n	809ca <pio_configure_pin_group+0x4a>
   809a2:	e034      	b.n	80a0e <pio_configure_pin_group+0x8e>
   809a4:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   809a8:	d01f      	beq.n	809ea <pio_configure_pin_group+0x6a>
   809aa:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   809ae:	d01c      	beq.n	809ea <pio_configure_pin_group+0x6a>
   809b0:	e02d      	b.n	80a0e <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   809b2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809b6:	4632      	mov	r2, r6
   809b8:	4b16      	ldr	r3, [pc, #88]	; (80a14 <pio_configure_pin_group+0x94>)
   809ba:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   809bc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   809c0:	bf14      	ite	ne
   809c2:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809c4:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   809c6:	2001      	movs	r0, #1
   809c8:	e022      	b.n	80a10 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   809ca:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   809ce:	4632      	mov	r2, r6
   809d0:	4b10      	ldr	r3, [pc, #64]	; (80a14 <pio_configure_pin_group+0x94>)
   809d2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   809d4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   809d8:	bf14      	ite	ne
   809da:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809dc:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   809de:	2001      	movs	r0, #1
   809e0:	e016      	b.n	80a10 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   809e2:	4b0d      	ldr	r3, [pc, #52]	; (80a18 <pio_configure_pin_group+0x98>)
   809e4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   809e6:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   809e8:	e012      	b.n	80a10 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   809ea:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   809ee:	f005 0301 	and.w	r3, r5, #1
   809f2:	9300      	str	r3, [sp, #0]
   809f4:	4638      	mov	r0, r7
   809f6:	4631      	mov	r1, r6
   809f8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   809fc:	bf14      	ite	ne
   809fe:	2200      	movne	r2, #0
   80a00:	2201      	moveq	r2, #1
   80a02:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80a06:	4c05      	ldr	r4, [pc, #20]	; (80a1c <pio_configure_pin_group+0x9c>)
   80a08:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80a0a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80a0c:	e000      	b.n	80a10 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80a0e:	2000      	movs	r0, #0
	}

	return 1;
}
   80a10:	b003      	add	sp, #12
   80a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80a14:	00080809 	.word	0x00080809
   80a18:	00080849 	.word	0x00080849
   80a1c:	0008087d 	.word	0x0008087d

00080a20 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80a24:	4604      	mov	r4, r0
   80a26:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80a28:	4b10      	ldr	r3, [pc, #64]	; (80a6c <pio_handler_process+0x4c>)
   80a2a:	4798      	blx	r3
   80a2c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80a2e:	4620      	mov	r0, r4
   80a30:	4b0f      	ldr	r3, [pc, #60]	; (80a70 <pio_handler_process+0x50>)
   80a32:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80a34:	4005      	ands	r5, r0
   80a36:	d017      	beq.n	80a68 <pio_handler_process+0x48>
   80a38:	4f0e      	ldr	r7, [pc, #56]	; (80a74 <pio_handler_process+0x54>)
   80a3a:	f107 040c 	add.w	r4, r7, #12
   80a3e:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80a40:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80a44:	42b3      	cmp	r3, r6
   80a46:	d10a      	bne.n	80a5e <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80a48:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80a4c:	4229      	tst	r1, r5
   80a4e:	d006      	beq.n	80a5e <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80a50:	6823      	ldr	r3, [r4, #0]
   80a52:	4630      	mov	r0, r6
   80a54:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80a56:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80a5a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80a5e:	42bc      	cmp	r4, r7
   80a60:	d002      	beq.n	80a68 <pio_handler_process+0x48>
   80a62:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80a64:	2d00      	cmp	r5, #0
   80a66:	d1eb      	bne.n	80a40 <pio_handler_process+0x20>
   80a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80a6c:	000808a5 	.word	0x000808a5
   80a70:	000808a9 	.word	0x000808a9
   80a74:	20070a58 	.word	0x20070a58

00080a78 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80a78:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80a7a:	4802      	ldr	r0, [pc, #8]	; (80a84 <PIOA_Handler+0xc>)
   80a7c:	210b      	movs	r1, #11
   80a7e:	4b02      	ldr	r3, [pc, #8]	; (80a88 <PIOA_Handler+0x10>)
   80a80:	4798      	blx	r3
   80a82:	bd08      	pop	{r3, pc}
   80a84:	400e0e00 	.word	0x400e0e00
   80a88:	00080a21 	.word	0x00080a21

00080a8c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80a8c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80a8e:	4802      	ldr	r0, [pc, #8]	; (80a98 <PIOB_Handler+0xc>)
   80a90:	210c      	movs	r1, #12
   80a92:	4b02      	ldr	r3, [pc, #8]	; (80a9c <PIOB_Handler+0x10>)
   80a94:	4798      	blx	r3
   80a96:	bd08      	pop	{r3, pc}
   80a98:	400e1000 	.word	0x400e1000
   80a9c:	00080a21 	.word	0x00080a21

00080aa0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80aa0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80aa2:	4802      	ldr	r0, [pc, #8]	; (80aac <PIOC_Handler+0xc>)
   80aa4:	210d      	movs	r1, #13
   80aa6:	4b02      	ldr	r3, [pc, #8]	; (80ab0 <PIOC_Handler+0x10>)
   80aa8:	4798      	blx	r3
   80aaa:	bd08      	pop	{r3, pc}
   80aac:	400e1200 	.word	0x400e1200
   80ab0:	00080a21 	.word	0x00080a21

00080ab4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80ab4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80ab6:	4802      	ldr	r0, [pc, #8]	; (80ac0 <PIOD_Handler+0xc>)
   80ab8:	210e      	movs	r1, #14
   80aba:	4b02      	ldr	r3, [pc, #8]	; (80ac4 <PIOD_Handler+0x10>)
   80abc:	4798      	blx	r3
   80abe:	bd08      	pop	{r3, pc}
   80ac0:	400e1400 	.word	0x400e1400
   80ac4:	00080a21 	.word	0x00080a21

00080ac8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80ac8:	4b17      	ldr	r3, [pc, #92]	; (80b28 <pmc_switch_mck_to_pllack+0x60>)
   80aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80acc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   80ad0:	4310      	orrs	r0, r2
   80ad2:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80ad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80ad6:	f013 0f08 	tst.w	r3, #8
   80ada:	d109      	bne.n	80af0 <pmc_switch_mck_to_pllack+0x28>
   80adc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80ae0:	4911      	ldr	r1, [pc, #68]	; (80b28 <pmc_switch_mck_to_pllack+0x60>)
   80ae2:	e001      	b.n	80ae8 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80ae4:	3b01      	subs	r3, #1
   80ae6:	d019      	beq.n	80b1c <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80ae8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80aea:	f012 0f08 	tst.w	r2, #8
   80aee:	d0f9      	beq.n	80ae4 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80af0:	4b0d      	ldr	r3, [pc, #52]	; (80b28 <pmc_switch_mck_to_pllack+0x60>)
   80af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80af4:	f022 0203 	bic.w	r2, r2, #3
   80af8:	f042 0202 	orr.w	r2, r2, #2
   80afc:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80afe:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80b00:	f010 0008 	ands.w	r0, r0, #8
   80b04:	d10c      	bne.n	80b20 <pmc_switch_mck_to_pllack+0x58>
   80b06:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b0a:	4907      	ldr	r1, [pc, #28]	; (80b28 <pmc_switch_mck_to_pllack+0x60>)
   80b0c:	e001      	b.n	80b12 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80b0e:	3b01      	subs	r3, #1
   80b10:	d008      	beq.n	80b24 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b12:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80b14:	f012 0f08 	tst.w	r2, #8
   80b18:	d0f9      	beq.n	80b0e <pmc_switch_mck_to_pllack+0x46>
   80b1a:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80b1c:	2001      	movs	r0, #1
   80b1e:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80b20:	2000      	movs	r0, #0
   80b22:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80b24:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80b26:	4770      	bx	lr
   80b28:	400e0600 	.word	0x400e0600

00080b2c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80b2c:	b138      	cbz	r0, 80b3e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80b2e:	4911      	ldr	r1, [pc, #68]	; (80b74 <pmc_switch_mainck_to_xtal+0x48>)
   80b30:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80b32:	4a11      	ldr	r2, [pc, #68]	; (80b78 <pmc_switch_mainck_to_xtal+0x4c>)
   80b34:	401a      	ands	r2, r3
   80b36:	4b11      	ldr	r3, [pc, #68]	; (80b7c <pmc_switch_mainck_to_xtal+0x50>)
   80b38:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80b3a:	620b      	str	r3, [r1, #32]
   80b3c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80b3e:	4a0d      	ldr	r2, [pc, #52]	; (80b74 <pmc_switch_mainck_to_xtal+0x48>)
   80b40:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80b42:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80b46:	f023 0303 	bic.w	r3, r3, #3
   80b4a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80b4e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80b52:	0209      	lsls	r1, r1, #8
   80b54:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80b56:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80b58:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80b5a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80b5c:	f013 0f01 	tst.w	r3, #1
   80b60:	d0fb      	beq.n	80b5a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80b62:	4a04      	ldr	r2, [pc, #16]	; (80b74 <pmc_switch_mainck_to_xtal+0x48>)
   80b64:	6a13      	ldr	r3, [r2, #32]
   80b66:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80b6e:	6213      	str	r3, [r2, #32]
   80b70:	4770      	bx	lr
   80b72:	bf00      	nop
   80b74:	400e0600 	.word	0x400e0600
   80b78:	fec8fffc 	.word	0xfec8fffc
   80b7c:	01370002 	.word	0x01370002

00080b80 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80b80:	4b02      	ldr	r3, [pc, #8]	; (80b8c <pmc_osc_is_ready_mainck+0xc>)
   80b82:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80b84:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80b88:	4770      	bx	lr
   80b8a:	bf00      	nop
   80b8c:	400e0600 	.word	0x400e0600

00080b90 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80b90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80b94:	4b01      	ldr	r3, [pc, #4]	; (80b9c <pmc_disable_pllack+0xc>)
   80b96:	629a      	str	r2, [r3, #40]	; 0x28
   80b98:	4770      	bx	lr
   80b9a:	bf00      	nop
   80b9c:	400e0600 	.word	0x400e0600

00080ba0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80ba0:	4b02      	ldr	r3, [pc, #8]	; (80bac <pmc_is_locked_pllack+0xc>)
   80ba2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80ba4:	f000 0002 	and.w	r0, r0, #2
   80ba8:	4770      	bx	lr
   80baa:	bf00      	nop
   80bac:	400e0600 	.word	0x400e0600

00080bb0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80bb0:	282c      	cmp	r0, #44	; 0x2c
   80bb2:	d820      	bhi.n	80bf6 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80bb4:	281f      	cmp	r0, #31
   80bb6:	d80d      	bhi.n	80bd4 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80bb8:	4b12      	ldr	r3, [pc, #72]	; (80c04 <pmc_enable_periph_clk+0x54>)
   80bba:	699a      	ldr	r2, [r3, #24]
   80bbc:	2301      	movs	r3, #1
   80bbe:	4083      	lsls	r3, r0
   80bc0:	401a      	ands	r2, r3
   80bc2:	4293      	cmp	r3, r2
   80bc4:	d019      	beq.n	80bfa <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80bc6:	2301      	movs	r3, #1
   80bc8:	fa03 f000 	lsl.w	r0, r3, r0
   80bcc:	4b0d      	ldr	r3, [pc, #52]	; (80c04 <pmc_enable_periph_clk+0x54>)
   80bce:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80bd0:	2000      	movs	r0, #0
   80bd2:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80bd4:	4b0b      	ldr	r3, [pc, #44]	; (80c04 <pmc_enable_periph_clk+0x54>)
   80bd6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   80bda:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80bdc:	2301      	movs	r3, #1
   80bde:	4083      	lsls	r3, r0
   80be0:	401a      	ands	r2, r3
   80be2:	4293      	cmp	r3, r2
   80be4:	d00b      	beq.n	80bfe <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80be6:	2301      	movs	r3, #1
   80be8:	fa03 f000 	lsl.w	r0, r3, r0
   80bec:	4b05      	ldr	r3, [pc, #20]	; (80c04 <pmc_enable_periph_clk+0x54>)
   80bee:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80bf2:	2000      	movs	r0, #0
   80bf4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80bf6:	2001      	movs	r0, #1
   80bf8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80bfa:	2000      	movs	r0, #0
   80bfc:	4770      	bx	lr
   80bfe:	2000      	movs	r0, #0
}
   80c00:	4770      	bx	lr
   80c02:	bf00      	nop
   80c04:	400e0600 	.word	0x400e0600

00080c08 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80c08:	e7fe      	b.n	80c08 <Dummy_Handler>
   80c0a:	bf00      	nop

00080c0c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80c0c:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80c0e:	4b1e      	ldr	r3, [pc, #120]	; (80c88 <Reset_Handler+0x7c>)
   80c10:	4a1e      	ldr	r2, [pc, #120]	; (80c8c <Reset_Handler+0x80>)
   80c12:	429a      	cmp	r2, r3
   80c14:	d003      	beq.n	80c1e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80c16:	4b1e      	ldr	r3, [pc, #120]	; (80c90 <Reset_Handler+0x84>)
   80c18:	4a1b      	ldr	r2, [pc, #108]	; (80c88 <Reset_Handler+0x7c>)
   80c1a:	429a      	cmp	r2, r3
   80c1c:	d304      	bcc.n	80c28 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80c1e:	4b1d      	ldr	r3, [pc, #116]	; (80c94 <Reset_Handler+0x88>)
   80c20:	4a1d      	ldr	r2, [pc, #116]	; (80c98 <Reset_Handler+0x8c>)
   80c22:	429a      	cmp	r2, r3
   80c24:	d30f      	bcc.n	80c46 <Reset_Handler+0x3a>
   80c26:	e01a      	b.n	80c5e <Reset_Handler+0x52>
   80c28:	4b1c      	ldr	r3, [pc, #112]	; (80c9c <Reset_Handler+0x90>)
   80c2a:	4c1d      	ldr	r4, [pc, #116]	; (80ca0 <Reset_Handler+0x94>)
   80c2c:	1ae4      	subs	r4, r4, r3
   80c2e:	f024 0403 	bic.w	r4, r4, #3
   80c32:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80c34:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80c36:	4814      	ldr	r0, [pc, #80]	; (80c88 <Reset_Handler+0x7c>)
   80c38:	4914      	ldr	r1, [pc, #80]	; (80c8c <Reset_Handler+0x80>)
   80c3a:	585a      	ldr	r2, [r3, r1]
   80c3c:	501a      	str	r2, [r3, r0]
   80c3e:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80c40:	42a3      	cmp	r3, r4
   80c42:	d1fa      	bne.n	80c3a <Reset_Handler+0x2e>
   80c44:	e7eb      	b.n	80c1e <Reset_Handler+0x12>
   80c46:	4b17      	ldr	r3, [pc, #92]	; (80ca4 <Reset_Handler+0x98>)
   80c48:	4917      	ldr	r1, [pc, #92]	; (80ca8 <Reset_Handler+0x9c>)
   80c4a:	1ac9      	subs	r1, r1, r3
   80c4c:	f021 0103 	bic.w	r1, r1, #3
   80c50:	1d1a      	adds	r2, r3, #4
   80c52:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80c54:	2200      	movs	r2, #0
   80c56:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80c5a:	428b      	cmp	r3, r1
   80c5c:	d1fb      	bne.n	80c56 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80c5e:	4a13      	ldr	r2, [pc, #76]	; (80cac <Reset_Handler+0xa0>)
   80c60:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80c64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80c68:	4911      	ldr	r1, [pc, #68]	; (80cb0 <Reset_Handler+0xa4>)
   80c6a:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80c6c:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80c70:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80c74:	d203      	bcs.n	80c7e <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80c76:	688a      	ldr	r2, [r1, #8]
   80c78:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80c7c:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80c7e:	4b0d      	ldr	r3, [pc, #52]	; (80cb4 <Reset_Handler+0xa8>)
   80c80:	4798      	blx	r3

	/* Branch to main function */
	main();
   80c82:	4b0d      	ldr	r3, [pc, #52]	; (80cb8 <Reset_Handler+0xac>)
   80c84:	4798      	blx	r3
   80c86:	e7fe      	b.n	80c86 <Reset_Handler+0x7a>
   80c88:	20070000 	.word	0x20070000
   80c8c:	00083ef8 	.word	0x00083ef8
   80c90:	2007099c 	.word	0x2007099c
   80c94:	20070b10 	.word	0x20070b10
   80c98:	2007099c 	.word	0x2007099c
   80c9c:	20070004 	.word	0x20070004
   80ca0:	2007099f 	.word	0x2007099f
   80ca4:	20070998 	.word	0x20070998
   80ca8:	20070b0b 	.word	0x20070b0b
   80cac:	00080000 	.word	0x00080000
   80cb0:	e000ed00 	.word	0xe000ed00
   80cb4:	00080e7d 	.word	0x00080e7d
   80cb8:	00080e29 	.word	0x00080e29

00080cbc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80cbc:	4b3e      	ldr	r3, [pc, #248]	; (80db8 <SystemCoreClockUpdate+0xfc>)
   80cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80cc0:	f003 0303 	and.w	r3, r3, #3
   80cc4:	2b03      	cmp	r3, #3
   80cc6:	d85f      	bhi.n	80d88 <SystemCoreClockUpdate+0xcc>
   80cc8:	e8df f003 	tbb	[pc, r3]
   80ccc:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80cd0:	4b3a      	ldr	r3, [pc, #232]	; (80dbc <SystemCoreClockUpdate+0x100>)
   80cd2:	695b      	ldr	r3, [r3, #20]
   80cd4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80cd8:	bf14      	ite	ne
   80cda:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80cde:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80ce2:	4b37      	ldr	r3, [pc, #220]	; (80dc0 <SystemCoreClockUpdate+0x104>)
   80ce4:	601a      	str	r2, [r3, #0]
   80ce6:	e04f      	b.n	80d88 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80ce8:	4b33      	ldr	r3, [pc, #204]	; (80db8 <SystemCoreClockUpdate+0xfc>)
   80cea:	6a1b      	ldr	r3, [r3, #32]
   80cec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80cf0:	d003      	beq.n	80cfa <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80cf2:	4a34      	ldr	r2, [pc, #208]	; (80dc4 <SystemCoreClockUpdate+0x108>)
   80cf4:	4b32      	ldr	r3, [pc, #200]	; (80dc0 <SystemCoreClockUpdate+0x104>)
   80cf6:	601a      	str	r2, [r3, #0]
   80cf8:	e046      	b.n	80d88 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80cfa:	4a33      	ldr	r2, [pc, #204]	; (80dc8 <SystemCoreClockUpdate+0x10c>)
   80cfc:	4b30      	ldr	r3, [pc, #192]	; (80dc0 <SystemCoreClockUpdate+0x104>)
   80cfe:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80d00:	4b2d      	ldr	r3, [pc, #180]	; (80db8 <SystemCoreClockUpdate+0xfc>)
   80d02:	6a1b      	ldr	r3, [r3, #32]
   80d04:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80d08:	2b10      	cmp	r3, #16
   80d0a:	d002      	beq.n	80d12 <SystemCoreClockUpdate+0x56>
   80d0c:	2b20      	cmp	r3, #32
   80d0e:	d004      	beq.n	80d1a <SystemCoreClockUpdate+0x5e>
   80d10:	e03a      	b.n	80d88 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80d12:	4a2e      	ldr	r2, [pc, #184]	; (80dcc <SystemCoreClockUpdate+0x110>)
   80d14:	4b2a      	ldr	r3, [pc, #168]	; (80dc0 <SystemCoreClockUpdate+0x104>)
   80d16:	601a      	str	r2, [r3, #0]
				break;
   80d18:	e036      	b.n	80d88 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80d1a:	4a2a      	ldr	r2, [pc, #168]	; (80dc4 <SystemCoreClockUpdate+0x108>)
   80d1c:	4b28      	ldr	r3, [pc, #160]	; (80dc0 <SystemCoreClockUpdate+0x104>)
   80d1e:	601a      	str	r2, [r3, #0]
				break;
   80d20:	e032      	b.n	80d88 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80d22:	4b25      	ldr	r3, [pc, #148]	; (80db8 <SystemCoreClockUpdate+0xfc>)
   80d24:	6a1b      	ldr	r3, [r3, #32]
   80d26:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80d2a:	d003      	beq.n	80d34 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80d2c:	4a25      	ldr	r2, [pc, #148]	; (80dc4 <SystemCoreClockUpdate+0x108>)
   80d2e:	4b24      	ldr	r3, [pc, #144]	; (80dc0 <SystemCoreClockUpdate+0x104>)
   80d30:	601a      	str	r2, [r3, #0]
   80d32:	e012      	b.n	80d5a <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80d34:	4a24      	ldr	r2, [pc, #144]	; (80dc8 <SystemCoreClockUpdate+0x10c>)
   80d36:	4b22      	ldr	r3, [pc, #136]	; (80dc0 <SystemCoreClockUpdate+0x104>)
   80d38:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80d3a:	4b1f      	ldr	r3, [pc, #124]	; (80db8 <SystemCoreClockUpdate+0xfc>)
   80d3c:	6a1b      	ldr	r3, [r3, #32]
   80d3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80d42:	2b10      	cmp	r3, #16
   80d44:	d002      	beq.n	80d4c <SystemCoreClockUpdate+0x90>
   80d46:	2b20      	cmp	r3, #32
   80d48:	d004      	beq.n	80d54 <SystemCoreClockUpdate+0x98>
   80d4a:	e006      	b.n	80d5a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80d4c:	4a1f      	ldr	r2, [pc, #124]	; (80dcc <SystemCoreClockUpdate+0x110>)
   80d4e:	4b1c      	ldr	r3, [pc, #112]	; (80dc0 <SystemCoreClockUpdate+0x104>)
   80d50:	601a      	str	r2, [r3, #0]
				break;
   80d52:	e002      	b.n	80d5a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80d54:	4a1b      	ldr	r2, [pc, #108]	; (80dc4 <SystemCoreClockUpdate+0x108>)
   80d56:	4b1a      	ldr	r3, [pc, #104]	; (80dc0 <SystemCoreClockUpdate+0x104>)
   80d58:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80d5a:	4b17      	ldr	r3, [pc, #92]	; (80db8 <SystemCoreClockUpdate+0xfc>)
   80d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80d5e:	f003 0303 	and.w	r3, r3, #3
   80d62:	2b02      	cmp	r3, #2
   80d64:	d10d      	bne.n	80d82 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80d66:	4b14      	ldr	r3, [pc, #80]	; (80db8 <SystemCoreClockUpdate+0xfc>)
   80d68:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80d6a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80d6c:	4b14      	ldr	r3, [pc, #80]	; (80dc0 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80d6e:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80d72:	681a      	ldr	r2, [r3, #0]
   80d74:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80d78:	b2c9      	uxtb	r1, r1
   80d7a:	fbb2 f2f1 	udiv	r2, r2, r1
   80d7e:	601a      	str	r2, [r3, #0]
   80d80:	e002      	b.n	80d88 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80d82:	4a13      	ldr	r2, [pc, #76]	; (80dd0 <SystemCoreClockUpdate+0x114>)
   80d84:	4b0e      	ldr	r3, [pc, #56]	; (80dc0 <SystemCoreClockUpdate+0x104>)
   80d86:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80d88:	4b0b      	ldr	r3, [pc, #44]	; (80db8 <SystemCoreClockUpdate+0xfc>)
   80d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80d8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80d90:	2b70      	cmp	r3, #112	; 0x70
   80d92:	d107      	bne.n	80da4 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80d94:	4b0a      	ldr	r3, [pc, #40]	; (80dc0 <SystemCoreClockUpdate+0x104>)
   80d96:	681a      	ldr	r2, [r3, #0]
   80d98:	490e      	ldr	r1, [pc, #56]	; (80dd4 <SystemCoreClockUpdate+0x118>)
   80d9a:	fba1 0202 	umull	r0, r2, r1, r2
   80d9e:	0852      	lsrs	r2, r2, #1
   80da0:	601a      	str	r2, [r3, #0]
   80da2:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80da4:	4b04      	ldr	r3, [pc, #16]	; (80db8 <SystemCoreClockUpdate+0xfc>)
   80da6:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80da8:	4b05      	ldr	r3, [pc, #20]	; (80dc0 <SystemCoreClockUpdate+0x104>)
   80daa:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80dae:	681a      	ldr	r2, [r3, #0]
   80db0:	40ca      	lsrs	r2, r1
   80db2:	601a      	str	r2, [r3, #0]
   80db4:	4770      	bx	lr
   80db6:	bf00      	nop
   80db8:	400e0600 	.word	0x400e0600
   80dbc:	400e1a10 	.word	0x400e1a10
   80dc0:	20070130 	.word	0x20070130
   80dc4:	00b71b00 	.word	0x00b71b00
   80dc8:	003d0900 	.word	0x003d0900
   80dcc:	007a1200 	.word	0x007a1200
   80dd0:	0e4e1c00 	.word	0x0e4e1c00
   80dd4:	aaaaaaab 	.word	0xaaaaaaab

00080dd8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80dd8:	4b09      	ldr	r3, [pc, #36]	; (80e00 <_sbrk+0x28>)
   80dda:	681b      	ldr	r3, [r3, #0]
   80ddc:	b913      	cbnz	r3, 80de4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80dde:	4a09      	ldr	r2, [pc, #36]	; (80e04 <_sbrk+0x2c>)
   80de0:	4b07      	ldr	r3, [pc, #28]	; (80e00 <_sbrk+0x28>)
   80de2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80de4:	4b06      	ldr	r3, [pc, #24]	; (80e00 <_sbrk+0x28>)
   80de6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80de8:	181a      	adds	r2, r3, r0
   80dea:	4907      	ldr	r1, [pc, #28]	; (80e08 <_sbrk+0x30>)
   80dec:	4291      	cmp	r1, r2
   80dee:	db04      	blt.n	80dfa <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80df0:	4610      	mov	r0, r2
   80df2:	4a03      	ldr	r2, [pc, #12]	; (80e00 <_sbrk+0x28>)
   80df4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80df6:	4618      	mov	r0, r3
   80df8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80dfa:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80dfe:	4770      	bx	lr
   80e00:	20070ac8 	.word	0x20070ac8
   80e04:	20072b10 	.word	0x20072b10
   80e08:	20087ffc 	.word	0x20087ffc

00080e0c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80e0c:	f04f 30ff 	mov.w	r0, #4294967295
   80e10:	4770      	bx	lr
   80e12:	bf00      	nop

00080e14 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80e14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80e18:	604b      	str	r3, [r1, #4]

	return 0;
}
   80e1a:	2000      	movs	r0, #0
   80e1c:	4770      	bx	lr
   80e1e:	bf00      	nop

00080e20 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80e20:	2001      	movs	r0, #1
   80e22:	4770      	bx	lr

00080e24 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80e24:	2000      	movs	r0, #0
   80e26:	4770      	bx	lr

00080e28 <main>:
#include "DelayFunctions.h"
#include "Motorfunctions.h"
#include "Rotate.h"

int main (void)
{
   80e28:	b510      	push	{r4, lr}
	board_init();
   80e2a:	4b0c      	ldr	r3, [pc, #48]	; (80e5c <main+0x34>)
   80e2c:	4798      	blx	r3
	sysclk_init();
   80e2e:	4b0c      	ldr	r3, [pc, #48]	; (80e60 <main+0x38>)
   80e30:	4798      	blx	r3
   80e32:	200b      	movs	r0, #11
   80e34:	4c0b      	ldr	r4, [pc, #44]	; (80e64 <main+0x3c>)
   80e36:	47a0      	blx	r4
   80e38:	200c      	movs	r0, #12
   80e3a:	47a0      	blx	r4
   80e3c:	200d      	movs	r0, #13
   80e3e:	47a0      	blx	r4
   80e40:	200e      	movs	r0, #14
   80e42:	47a0      	blx	r4
	ioport_init();
	configureConsole();
   80e44:	4b08      	ldr	r3, [pc, #32]	; (80e68 <main+0x40>)
   80e46:	4798      	blx	r3
	delayInit();
   80e48:	4b08      	ldr	r3, [pc, #32]	; (80e6c <main+0x44>)
   80e4a:	4798      	blx	r3
	startCOM();
   80e4c:	4b08      	ldr	r3, [pc, #32]	; (80e70 <main+0x48>)
   80e4e:	4798      	blx	r3
	camera_detection();	
   80e50:	4b08      	ldr	r3, [pc, #32]	; (80e74 <main+0x4c>)
   80e52:	4798      	blx	r3
	initMotor();
   80e54:	4b08      	ldr	r3, [pc, #32]	; (80e78 <main+0x50>)
   80e56:	4798      	blx	r3
}
   80e58:	2000      	movs	r0, #0
   80e5a:	bd10      	pop	{r4, pc}
   80e5c:	00080799 	.word	0x00080799
   80e60:	00080735 	.word	0x00080735
   80e64:	00080bb1 	.word	0x00080bb1
   80e68:	000803ad 	.word	0x000803ad
   80e6c:	00080441 	.word	0x00080441
   80e70:	00080525 	.word	0x00080525
   80e74:	00080531 	.word	0x00080531
   80e78:	000804b9 	.word	0x000804b9

00080e7c <__libc_init_array>:
   80e7c:	b570      	push	{r4, r5, r6, lr}
   80e7e:	4e0f      	ldr	r6, [pc, #60]	; (80ebc <__libc_init_array+0x40>)
   80e80:	4d0f      	ldr	r5, [pc, #60]	; (80ec0 <__libc_init_array+0x44>)
   80e82:	1b76      	subs	r6, r6, r5
   80e84:	10b6      	asrs	r6, r6, #2
   80e86:	d007      	beq.n	80e98 <__libc_init_array+0x1c>
   80e88:	3d04      	subs	r5, #4
   80e8a:	2400      	movs	r4, #0
   80e8c:	3401      	adds	r4, #1
   80e8e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80e92:	4798      	blx	r3
   80e94:	42a6      	cmp	r6, r4
   80e96:	d1f9      	bne.n	80e8c <__libc_init_array+0x10>
   80e98:	4e0a      	ldr	r6, [pc, #40]	; (80ec4 <__libc_init_array+0x48>)
   80e9a:	4d0b      	ldr	r5, [pc, #44]	; (80ec8 <__libc_init_array+0x4c>)
   80e9c:	f003 f816 	bl	83ecc <_init>
   80ea0:	1b76      	subs	r6, r6, r5
   80ea2:	10b6      	asrs	r6, r6, #2
   80ea4:	d008      	beq.n	80eb8 <__libc_init_array+0x3c>
   80ea6:	3d04      	subs	r5, #4
   80ea8:	2400      	movs	r4, #0
   80eaa:	3401      	adds	r4, #1
   80eac:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80eb0:	4798      	blx	r3
   80eb2:	42a6      	cmp	r6, r4
   80eb4:	d1f9      	bne.n	80eaa <__libc_init_array+0x2e>
   80eb6:	bd70      	pop	{r4, r5, r6, pc}
   80eb8:	bd70      	pop	{r4, r5, r6, pc}
   80eba:	bf00      	nop
   80ebc:	00083ed8 	.word	0x00083ed8
   80ec0:	00083ed8 	.word	0x00083ed8
   80ec4:	00083ee0 	.word	0x00083ee0
   80ec8:	00083ed8 	.word	0x00083ed8

00080ecc <iprintf>:
   80ecc:	b40f      	push	{r0, r1, r2, r3}
   80ece:	b510      	push	{r4, lr}
   80ed0:	4b07      	ldr	r3, [pc, #28]	; (80ef0 <iprintf+0x24>)
   80ed2:	b082      	sub	sp, #8
   80ed4:	ac04      	add	r4, sp, #16
   80ed6:	f854 2b04 	ldr.w	r2, [r4], #4
   80eda:	6818      	ldr	r0, [r3, #0]
   80edc:	4623      	mov	r3, r4
   80ede:	6881      	ldr	r1, [r0, #8]
   80ee0:	9401      	str	r4, [sp, #4]
   80ee2:	f000 f915 	bl	81110 <_vfiprintf_r>
   80ee6:	b002      	add	sp, #8
   80ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80eec:	b004      	add	sp, #16
   80eee:	4770      	bx	lr
   80ef0:	20070560 	.word	0x20070560

00080ef4 <memset>:
   80ef4:	b4f0      	push	{r4, r5, r6, r7}
   80ef6:	0784      	lsls	r4, r0, #30
   80ef8:	d043      	beq.n	80f82 <memset+0x8e>
   80efa:	1e54      	subs	r4, r2, #1
   80efc:	2a00      	cmp	r2, #0
   80efe:	d03e      	beq.n	80f7e <memset+0x8a>
   80f00:	b2cd      	uxtb	r5, r1
   80f02:	4603      	mov	r3, r0
   80f04:	e003      	b.n	80f0e <memset+0x1a>
   80f06:	1e62      	subs	r2, r4, #1
   80f08:	2c00      	cmp	r4, #0
   80f0a:	d038      	beq.n	80f7e <memset+0x8a>
   80f0c:	4614      	mov	r4, r2
   80f0e:	f803 5b01 	strb.w	r5, [r3], #1
   80f12:	079a      	lsls	r2, r3, #30
   80f14:	d1f7      	bne.n	80f06 <memset+0x12>
   80f16:	2c03      	cmp	r4, #3
   80f18:	d92a      	bls.n	80f70 <memset+0x7c>
   80f1a:	b2cd      	uxtb	r5, r1
   80f1c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80f20:	2c0f      	cmp	r4, #15
   80f22:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80f26:	d915      	bls.n	80f54 <memset+0x60>
   80f28:	f1a4 0710 	sub.w	r7, r4, #16
   80f2c:	093f      	lsrs	r7, r7, #4
   80f2e:	f103 0610 	add.w	r6, r3, #16
   80f32:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   80f36:	461a      	mov	r2, r3
   80f38:	6015      	str	r5, [r2, #0]
   80f3a:	6055      	str	r5, [r2, #4]
   80f3c:	6095      	str	r5, [r2, #8]
   80f3e:	60d5      	str	r5, [r2, #12]
   80f40:	3210      	adds	r2, #16
   80f42:	42b2      	cmp	r2, r6
   80f44:	d1f8      	bne.n	80f38 <memset+0x44>
   80f46:	f004 040f 	and.w	r4, r4, #15
   80f4a:	3701      	adds	r7, #1
   80f4c:	2c03      	cmp	r4, #3
   80f4e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   80f52:	d90d      	bls.n	80f70 <memset+0x7c>
   80f54:	461e      	mov	r6, r3
   80f56:	4622      	mov	r2, r4
   80f58:	3a04      	subs	r2, #4
   80f5a:	2a03      	cmp	r2, #3
   80f5c:	f846 5b04 	str.w	r5, [r6], #4
   80f60:	d8fa      	bhi.n	80f58 <memset+0x64>
   80f62:	1f22      	subs	r2, r4, #4
   80f64:	f022 0203 	bic.w	r2, r2, #3
   80f68:	3204      	adds	r2, #4
   80f6a:	4413      	add	r3, r2
   80f6c:	f004 0403 	and.w	r4, r4, #3
   80f70:	b12c      	cbz	r4, 80f7e <memset+0x8a>
   80f72:	b2c9      	uxtb	r1, r1
   80f74:	441c      	add	r4, r3
   80f76:	f803 1b01 	strb.w	r1, [r3], #1
   80f7a:	42a3      	cmp	r3, r4
   80f7c:	d1fb      	bne.n	80f76 <memset+0x82>
   80f7e:	bcf0      	pop	{r4, r5, r6, r7}
   80f80:	4770      	bx	lr
   80f82:	4614      	mov	r4, r2
   80f84:	4603      	mov	r3, r0
   80f86:	e7c6      	b.n	80f16 <memset+0x22>

00080f88 <setbuf>:
   80f88:	2900      	cmp	r1, #0
   80f8a:	bf0c      	ite	eq
   80f8c:	2202      	moveq	r2, #2
   80f8e:	2200      	movne	r2, #0
   80f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80f94:	f000 b800 	b.w	80f98 <setvbuf>

00080f98 <setvbuf>:
   80f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80f9c:	4d3c      	ldr	r5, [pc, #240]	; (81090 <setvbuf+0xf8>)
   80f9e:	4604      	mov	r4, r0
   80fa0:	682d      	ldr	r5, [r5, #0]
   80fa2:	4688      	mov	r8, r1
   80fa4:	4616      	mov	r6, r2
   80fa6:	461f      	mov	r7, r3
   80fa8:	b115      	cbz	r5, 80fb0 <setvbuf+0x18>
   80faa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   80fac:	2b00      	cmp	r3, #0
   80fae:	d04f      	beq.n	81050 <setvbuf+0xb8>
   80fb0:	2e02      	cmp	r6, #2
   80fb2:	d830      	bhi.n	81016 <setvbuf+0x7e>
   80fb4:	2f00      	cmp	r7, #0
   80fb6:	db2e      	blt.n	81016 <setvbuf+0x7e>
   80fb8:	4628      	mov	r0, r5
   80fba:	4621      	mov	r1, r4
   80fbc:	f001 f826 	bl	8200c <_fflush_r>
   80fc0:	89a3      	ldrh	r3, [r4, #12]
   80fc2:	2200      	movs	r2, #0
   80fc4:	6062      	str	r2, [r4, #4]
   80fc6:	61a2      	str	r2, [r4, #24]
   80fc8:	061a      	lsls	r2, r3, #24
   80fca:	d428      	bmi.n	8101e <setvbuf+0x86>
   80fcc:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   80fd0:	b29b      	uxth	r3, r3
   80fd2:	2e02      	cmp	r6, #2
   80fd4:	81a3      	strh	r3, [r4, #12]
   80fd6:	d02d      	beq.n	81034 <setvbuf+0x9c>
   80fd8:	f1b8 0f00 	cmp.w	r8, #0
   80fdc:	d03c      	beq.n	81058 <setvbuf+0xc0>
   80fde:	2e01      	cmp	r6, #1
   80fe0:	d013      	beq.n	8100a <setvbuf+0x72>
   80fe2:	b29b      	uxth	r3, r3
   80fe4:	f003 0008 	and.w	r0, r3, #8
   80fe8:	4a2a      	ldr	r2, [pc, #168]	; (81094 <setvbuf+0xfc>)
   80fea:	b280      	uxth	r0, r0
   80fec:	63ea      	str	r2, [r5, #60]	; 0x3c
   80fee:	f8c4 8000 	str.w	r8, [r4]
   80ff2:	f8c4 8010 	str.w	r8, [r4, #16]
   80ff6:	6167      	str	r7, [r4, #20]
   80ff8:	b178      	cbz	r0, 8101a <setvbuf+0x82>
   80ffa:	f013 0f03 	tst.w	r3, #3
   80ffe:	bf18      	it	ne
   81000:	2700      	movne	r7, #0
   81002:	60a7      	str	r7, [r4, #8]
   81004:	2000      	movs	r0, #0
   81006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8100a:	f043 0301 	orr.w	r3, r3, #1
   8100e:	427a      	negs	r2, r7
   81010:	81a3      	strh	r3, [r4, #12]
   81012:	61a2      	str	r2, [r4, #24]
   81014:	e7e5      	b.n	80fe2 <setvbuf+0x4a>
   81016:	f04f 30ff 	mov.w	r0, #4294967295
   8101a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8101e:	4628      	mov	r0, r5
   81020:	6921      	ldr	r1, [r4, #16]
   81022:	f001 f953 	bl	822cc <_free_r>
   81026:	89a3      	ldrh	r3, [r4, #12]
   81028:	2e02      	cmp	r6, #2
   8102a:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   8102e:	b29b      	uxth	r3, r3
   81030:	81a3      	strh	r3, [r4, #12]
   81032:	d1d1      	bne.n	80fd8 <setvbuf+0x40>
   81034:	2000      	movs	r0, #0
   81036:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8103a:	f043 0302 	orr.w	r3, r3, #2
   8103e:	2500      	movs	r5, #0
   81040:	2101      	movs	r1, #1
   81042:	81a3      	strh	r3, [r4, #12]
   81044:	60a5      	str	r5, [r4, #8]
   81046:	6022      	str	r2, [r4, #0]
   81048:	6122      	str	r2, [r4, #16]
   8104a:	6161      	str	r1, [r4, #20]
   8104c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81050:	4628      	mov	r0, r5
   81052:	f000 fff7 	bl	82044 <__sinit>
   81056:	e7ab      	b.n	80fb0 <setvbuf+0x18>
   81058:	2f00      	cmp	r7, #0
   8105a:	bf08      	it	eq
   8105c:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   81060:	4638      	mov	r0, r7
   81062:	f001 fc29 	bl	828b8 <malloc>
   81066:	4680      	mov	r8, r0
   81068:	b128      	cbz	r0, 81076 <setvbuf+0xde>
   8106a:	89a3      	ldrh	r3, [r4, #12]
   8106c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81070:	b29b      	uxth	r3, r3
   81072:	81a3      	strh	r3, [r4, #12]
   81074:	e7b3      	b.n	80fde <setvbuf+0x46>
   81076:	f44f 6080 	mov.w	r0, #1024	; 0x400
   8107a:	f001 fc1d 	bl	828b8 <malloc>
   8107e:	4680      	mov	r8, r0
   81080:	b918      	cbnz	r0, 8108a <setvbuf+0xf2>
   81082:	89a3      	ldrh	r3, [r4, #12]
   81084:	f04f 30ff 	mov.w	r0, #4294967295
   81088:	e7d5      	b.n	81036 <setvbuf+0x9e>
   8108a:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8108e:	e7ec      	b.n	8106a <setvbuf+0xd2>
   81090:	20070560 	.word	0x20070560
   81094:	00082039 	.word	0x00082039

00081098 <__sprint_r.part.0>:
   81098:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8109a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8109e:	049c      	lsls	r4, r3, #18
   810a0:	460e      	mov	r6, r1
   810a2:	4680      	mov	r8, r0
   810a4:	4691      	mov	r9, r2
   810a6:	d52a      	bpl.n	810fe <__sprint_r.part.0+0x66>
   810a8:	6893      	ldr	r3, [r2, #8]
   810aa:	6812      	ldr	r2, [r2, #0]
   810ac:	f102 0a08 	add.w	sl, r2, #8
   810b0:	b31b      	cbz	r3, 810fa <__sprint_r.part.0+0x62>
   810b2:	e91a 00a0 	ldmdb	sl, {r5, r7}
   810b6:	08bf      	lsrs	r7, r7, #2
   810b8:	d017      	beq.n	810ea <__sprint_r.part.0+0x52>
   810ba:	3d04      	subs	r5, #4
   810bc:	2400      	movs	r4, #0
   810be:	e001      	b.n	810c4 <__sprint_r.part.0+0x2c>
   810c0:	42a7      	cmp	r7, r4
   810c2:	d010      	beq.n	810e6 <__sprint_r.part.0+0x4e>
   810c4:	4640      	mov	r0, r8
   810c6:	f855 1f04 	ldr.w	r1, [r5, #4]!
   810ca:	4632      	mov	r2, r6
   810cc:	f001 f850 	bl	82170 <_fputwc_r>
   810d0:	1c43      	adds	r3, r0, #1
   810d2:	f104 0401 	add.w	r4, r4, #1
   810d6:	d1f3      	bne.n	810c0 <__sprint_r.part.0+0x28>
   810d8:	2300      	movs	r3, #0
   810da:	f8c9 3008 	str.w	r3, [r9, #8]
   810de:	f8c9 3004 	str.w	r3, [r9, #4]
   810e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   810e6:	f8d9 3008 	ldr.w	r3, [r9, #8]
   810ea:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   810ee:	f8c9 3008 	str.w	r3, [r9, #8]
   810f2:	f10a 0a08 	add.w	sl, sl, #8
   810f6:	2b00      	cmp	r3, #0
   810f8:	d1db      	bne.n	810b2 <__sprint_r.part.0+0x1a>
   810fa:	2000      	movs	r0, #0
   810fc:	e7ec      	b.n	810d8 <__sprint_r.part.0+0x40>
   810fe:	f001 f9b1 	bl	82464 <__sfvwrite_r>
   81102:	2300      	movs	r3, #0
   81104:	f8c9 3008 	str.w	r3, [r9, #8]
   81108:	f8c9 3004 	str.w	r3, [r9, #4]
   8110c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081110 <_vfiprintf_r>:
   81110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81114:	b0b1      	sub	sp, #196	; 0xc4
   81116:	461c      	mov	r4, r3
   81118:	9102      	str	r1, [sp, #8]
   8111a:	4690      	mov	r8, r2
   8111c:	9308      	str	r3, [sp, #32]
   8111e:	9006      	str	r0, [sp, #24]
   81120:	b118      	cbz	r0, 8112a <_vfiprintf_r+0x1a>
   81122:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81124:	2b00      	cmp	r3, #0
   81126:	f000 80e8 	beq.w	812fa <_vfiprintf_r+0x1ea>
   8112a:	9d02      	ldr	r5, [sp, #8]
   8112c:	89ab      	ldrh	r3, [r5, #12]
   8112e:	b29a      	uxth	r2, r3
   81130:	0490      	lsls	r0, r2, #18
   81132:	d407      	bmi.n	81144 <_vfiprintf_r+0x34>
   81134:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   81136:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8113a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   8113e:	81ab      	strh	r3, [r5, #12]
   81140:	b29a      	uxth	r2, r3
   81142:	6669      	str	r1, [r5, #100]	; 0x64
   81144:	0711      	lsls	r1, r2, #28
   81146:	f140 80b7 	bpl.w	812b8 <_vfiprintf_r+0x1a8>
   8114a:	f8dd b008 	ldr.w	fp, [sp, #8]
   8114e:	f8db 3010 	ldr.w	r3, [fp, #16]
   81152:	2b00      	cmp	r3, #0
   81154:	f000 80b0 	beq.w	812b8 <_vfiprintf_r+0x1a8>
   81158:	f002 021a 	and.w	r2, r2, #26
   8115c:	2a0a      	cmp	r2, #10
   8115e:	f000 80b7 	beq.w	812d0 <_vfiprintf_r+0x1c0>
   81162:	2300      	movs	r3, #0
   81164:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81168:	930a      	str	r3, [sp, #40]	; 0x28
   8116a:	9315      	str	r3, [sp, #84]	; 0x54
   8116c:	9314      	str	r3, [sp, #80]	; 0x50
   8116e:	9309      	str	r3, [sp, #36]	; 0x24
   81170:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   81174:	464e      	mov	r6, r9
   81176:	f898 3000 	ldrb.w	r3, [r8]
   8117a:	2b00      	cmp	r3, #0
   8117c:	f000 84c8 	beq.w	81b10 <_vfiprintf_r+0xa00>
   81180:	2b25      	cmp	r3, #37	; 0x25
   81182:	f000 84c5 	beq.w	81b10 <_vfiprintf_r+0xa00>
   81186:	f108 0201 	add.w	r2, r8, #1
   8118a:	e001      	b.n	81190 <_vfiprintf_r+0x80>
   8118c:	2b25      	cmp	r3, #37	; 0x25
   8118e:	d004      	beq.n	8119a <_vfiprintf_r+0x8a>
   81190:	7813      	ldrb	r3, [r2, #0]
   81192:	4614      	mov	r4, r2
   81194:	3201      	adds	r2, #1
   81196:	2b00      	cmp	r3, #0
   81198:	d1f8      	bne.n	8118c <_vfiprintf_r+0x7c>
   8119a:	ebc8 0504 	rsb	r5, r8, r4
   8119e:	b195      	cbz	r5, 811c6 <_vfiprintf_r+0xb6>
   811a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   811a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   811a4:	3301      	adds	r3, #1
   811a6:	442a      	add	r2, r5
   811a8:	2b07      	cmp	r3, #7
   811aa:	f8c6 8000 	str.w	r8, [r6]
   811ae:	6075      	str	r5, [r6, #4]
   811b0:	9215      	str	r2, [sp, #84]	; 0x54
   811b2:	9314      	str	r3, [sp, #80]	; 0x50
   811b4:	dd7b      	ble.n	812ae <_vfiprintf_r+0x19e>
   811b6:	2a00      	cmp	r2, #0
   811b8:	f040 84d5 	bne.w	81b66 <_vfiprintf_r+0xa56>
   811bc:	9809      	ldr	r0, [sp, #36]	; 0x24
   811be:	9214      	str	r2, [sp, #80]	; 0x50
   811c0:	4428      	add	r0, r5
   811c2:	464e      	mov	r6, r9
   811c4:	9009      	str	r0, [sp, #36]	; 0x24
   811c6:	7823      	ldrb	r3, [r4, #0]
   811c8:	2b00      	cmp	r3, #0
   811ca:	f000 83ed 	beq.w	819a8 <_vfiprintf_r+0x898>
   811ce:	2100      	movs	r1, #0
   811d0:	f04f 0200 	mov.w	r2, #0
   811d4:	f04f 3cff 	mov.w	ip, #4294967295
   811d8:	7863      	ldrb	r3, [r4, #1]
   811da:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   811de:	9104      	str	r1, [sp, #16]
   811e0:	468a      	mov	sl, r1
   811e2:	f104 0801 	add.w	r8, r4, #1
   811e6:	4608      	mov	r0, r1
   811e8:	4665      	mov	r5, ip
   811ea:	f108 0801 	add.w	r8, r8, #1
   811ee:	f1a3 0220 	sub.w	r2, r3, #32
   811f2:	2a58      	cmp	r2, #88	; 0x58
   811f4:	f200 82d9 	bhi.w	817aa <_vfiprintf_r+0x69a>
   811f8:	e8df f012 	tbh	[pc, r2, lsl #1]
   811fc:	02d702cb 	.word	0x02d702cb
   81200:	02d202d7 	.word	0x02d202d7
   81204:	02d702d7 	.word	0x02d702d7
   81208:	02d702d7 	.word	0x02d702d7
   8120c:	02d702d7 	.word	0x02d702d7
   81210:	028f0282 	.word	0x028f0282
   81214:	008402d7 	.word	0x008402d7
   81218:	02d70293 	.word	0x02d70293
   8121c:	0196012b 	.word	0x0196012b
   81220:	01960196 	.word	0x01960196
   81224:	01960196 	.word	0x01960196
   81228:	01960196 	.word	0x01960196
   8122c:	01960196 	.word	0x01960196
   81230:	02d702d7 	.word	0x02d702d7
   81234:	02d702d7 	.word	0x02d702d7
   81238:	02d702d7 	.word	0x02d702d7
   8123c:	02d702d7 	.word	0x02d702d7
   81240:	02d702d7 	.word	0x02d702d7
   81244:	02d70130 	.word	0x02d70130
   81248:	02d702d7 	.word	0x02d702d7
   8124c:	02d702d7 	.word	0x02d702d7
   81250:	02d702d7 	.word	0x02d702d7
   81254:	02d702d7 	.word	0x02d702d7
   81258:	017b02d7 	.word	0x017b02d7
   8125c:	02d702d7 	.word	0x02d702d7
   81260:	02d702d7 	.word	0x02d702d7
   81264:	01a402d7 	.word	0x01a402d7
   81268:	02d702d7 	.word	0x02d702d7
   8126c:	02d701bf 	.word	0x02d701bf
   81270:	02d702d7 	.word	0x02d702d7
   81274:	02d702d7 	.word	0x02d702d7
   81278:	02d702d7 	.word	0x02d702d7
   8127c:	02d702d7 	.word	0x02d702d7
   81280:	01e402d7 	.word	0x01e402d7
   81284:	02d701fa 	.word	0x02d701fa
   81288:	02d702d7 	.word	0x02d702d7
   8128c:	01fa0216 	.word	0x01fa0216
   81290:	02d702d7 	.word	0x02d702d7
   81294:	02d7021b 	.word	0x02d7021b
   81298:	00890228 	.word	0x00890228
   8129c:	027d0266 	.word	0x027d0266
   812a0:	023a02d7 	.word	0x023a02d7
   812a4:	011902d7 	.word	0x011902d7
   812a8:	02d702d7 	.word	0x02d702d7
   812ac:	02af      	.short	0x02af
   812ae:	3608      	adds	r6, #8
   812b0:	9809      	ldr	r0, [sp, #36]	; 0x24
   812b2:	4428      	add	r0, r5
   812b4:	9009      	str	r0, [sp, #36]	; 0x24
   812b6:	e786      	b.n	811c6 <_vfiprintf_r+0xb6>
   812b8:	9806      	ldr	r0, [sp, #24]
   812ba:	9902      	ldr	r1, [sp, #8]
   812bc:	f000 fd90 	bl	81de0 <__swsetup_r>
   812c0:	b9b0      	cbnz	r0, 812f0 <_vfiprintf_r+0x1e0>
   812c2:	9d02      	ldr	r5, [sp, #8]
   812c4:	89aa      	ldrh	r2, [r5, #12]
   812c6:	f002 021a 	and.w	r2, r2, #26
   812ca:	2a0a      	cmp	r2, #10
   812cc:	f47f af49 	bne.w	81162 <_vfiprintf_r+0x52>
   812d0:	f8dd b008 	ldr.w	fp, [sp, #8]
   812d4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   812d8:	2b00      	cmp	r3, #0
   812da:	f6ff af42 	blt.w	81162 <_vfiprintf_r+0x52>
   812de:	9806      	ldr	r0, [sp, #24]
   812e0:	4659      	mov	r1, fp
   812e2:	4642      	mov	r2, r8
   812e4:	4623      	mov	r3, r4
   812e6:	f000 fd3d 	bl	81d64 <__sbprintf>
   812ea:	b031      	add	sp, #196	; 0xc4
   812ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   812f0:	f04f 30ff 	mov.w	r0, #4294967295
   812f4:	b031      	add	sp, #196	; 0xc4
   812f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   812fa:	f000 fea3 	bl	82044 <__sinit>
   812fe:	e714      	b.n	8112a <_vfiprintf_r+0x1a>
   81300:	4240      	negs	r0, r0
   81302:	9308      	str	r3, [sp, #32]
   81304:	f04a 0a04 	orr.w	sl, sl, #4
   81308:	f898 3000 	ldrb.w	r3, [r8]
   8130c:	e76d      	b.n	811ea <_vfiprintf_r+0xda>
   8130e:	f01a 0320 	ands.w	r3, sl, #32
   81312:	9004      	str	r0, [sp, #16]
   81314:	46ac      	mov	ip, r5
   81316:	f000 80f4 	beq.w	81502 <_vfiprintf_r+0x3f2>
   8131a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8131e:	f10b 0307 	add.w	r3, fp, #7
   81322:	f023 0307 	bic.w	r3, r3, #7
   81326:	f103 0408 	add.w	r4, r3, #8
   8132a:	9408      	str	r4, [sp, #32]
   8132c:	e9d3 4500 	ldrd	r4, r5, [r3]
   81330:	2300      	movs	r3, #0
   81332:	f04f 0000 	mov.w	r0, #0
   81336:	2100      	movs	r1, #0
   81338:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   8133c:	f8cd c014 	str.w	ip, [sp, #20]
   81340:	9107      	str	r1, [sp, #28]
   81342:	f1bc 0f00 	cmp.w	ip, #0
   81346:	bfa8      	it	ge
   81348:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   8134c:	ea54 0205 	orrs.w	r2, r4, r5
   81350:	f040 80ad 	bne.w	814ae <_vfiprintf_r+0x39e>
   81354:	f1bc 0f00 	cmp.w	ip, #0
   81358:	f040 80a9 	bne.w	814ae <_vfiprintf_r+0x39e>
   8135c:	2b00      	cmp	r3, #0
   8135e:	f040 83c0 	bne.w	81ae2 <_vfiprintf_r+0x9d2>
   81362:	f01a 0f01 	tst.w	sl, #1
   81366:	f000 83bc 	beq.w	81ae2 <_vfiprintf_r+0x9d2>
   8136a:	2330      	movs	r3, #48	; 0x30
   8136c:	af30      	add	r7, sp, #192	; 0xc0
   8136e:	f807 3d41 	strb.w	r3, [r7, #-65]!
   81372:	ebc7 0409 	rsb	r4, r7, r9
   81376:	9405      	str	r4, [sp, #20]
   81378:	f8dd b014 	ldr.w	fp, [sp, #20]
   8137c:	9c07      	ldr	r4, [sp, #28]
   8137e:	45e3      	cmp	fp, ip
   81380:	bfb8      	it	lt
   81382:	46e3      	movlt	fp, ip
   81384:	f8cd b00c 	str.w	fp, [sp, #12]
   81388:	b11c      	cbz	r4, 81392 <_vfiprintf_r+0x282>
   8138a:	f10b 0b01 	add.w	fp, fp, #1
   8138e:	f8cd b00c 	str.w	fp, [sp, #12]
   81392:	f01a 0502 	ands.w	r5, sl, #2
   81396:	9507      	str	r5, [sp, #28]
   81398:	d005      	beq.n	813a6 <_vfiprintf_r+0x296>
   8139a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8139e:	f10b 0b02 	add.w	fp, fp, #2
   813a2:	f8cd b00c 	str.w	fp, [sp, #12]
   813a6:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   813aa:	930b      	str	r3, [sp, #44]	; 0x2c
   813ac:	f040 821b 	bne.w	817e6 <_vfiprintf_r+0x6d6>
   813b0:	9d04      	ldr	r5, [sp, #16]
   813b2:	f8dd b00c 	ldr.w	fp, [sp, #12]
   813b6:	ebcb 0405 	rsb	r4, fp, r5
   813ba:	2c00      	cmp	r4, #0
   813bc:	f340 8213 	ble.w	817e6 <_vfiprintf_r+0x6d6>
   813c0:	2c10      	cmp	r4, #16
   813c2:	f340 8489 	ble.w	81cd8 <_vfiprintf_r+0xbc8>
   813c6:	4dbe      	ldr	r5, [pc, #760]	; (816c0 <_vfiprintf_r+0x5b0>)
   813c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   813ca:	462b      	mov	r3, r5
   813cc:	9814      	ldr	r0, [sp, #80]	; 0x50
   813ce:	4625      	mov	r5, r4
   813d0:	f04f 0b10 	mov.w	fp, #16
   813d4:	4664      	mov	r4, ip
   813d6:	46b4      	mov	ip, r6
   813d8:	461e      	mov	r6, r3
   813da:	e006      	b.n	813ea <_vfiprintf_r+0x2da>
   813dc:	1c83      	adds	r3, r0, #2
   813de:	f10c 0c08 	add.w	ip, ip, #8
   813e2:	4608      	mov	r0, r1
   813e4:	3d10      	subs	r5, #16
   813e6:	2d10      	cmp	r5, #16
   813e8:	dd11      	ble.n	8140e <_vfiprintf_r+0x2fe>
   813ea:	1c41      	adds	r1, r0, #1
   813ec:	3210      	adds	r2, #16
   813ee:	2907      	cmp	r1, #7
   813f0:	9215      	str	r2, [sp, #84]	; 0x54
   813f2:	e88c 0840 	stmia.w	ip, {r6, fp}
   813f6:	9114      	str	r1, [sp, #80]	; 0x50
   813f8:	ddf0      	ble.n	813dc <_vfiprintf_r+0x2cc>
   813fa:	2a00      	cmp	r2, #0
   813fc:	f040 81e6 	bne.w	817cc <_vfiprintf_r+0x6bc>
   81400:	3d10      	subs	r5, #16
   81402:	2d10      	cmp	r5, #16
   81404:	f04f 0301 	mov.w	r3, #1
   81408:	4610      	mov	r0, r2
   8140a:	46cc      	mov	ip, r9
   8140c:	dced      	bgt.n	813ea <_vfiprintf_r+0x2da>
   8140e:	4631      	mov	r1, r6
   81410:	4666      	mov	r6, ip
   81412:	46a4      	mov	ip, r4
   81414:	462c      	mov	r4, r5
   81416:	460d      	mov	r5, r1
   81418:	4422      	add	r2, r4
   8141a:	2b07      	cmp	r3, #7
   8141c:	9215      	str	r2, [sp, #84]	; 0x54
   8141e:	6035      	str	r5, [r6, #0]
   81420:	6074      	str	r4, [r6, #4]
   81422:	9314      	str	r3, [sp, #80]	; 0x50
   81424:	f300 836d 	bgt.w	81b02 <_vfiprintf_r+0x9f2>
   81428:	3608      	adds	r6, #8
   8142a:	1c59      	adds	r1, r3, #1
   8142c:	e1de      	b.n	817ec <_vfiprintf_r+0x6dc>
   8142e:	f01a 0f20 	tst.w	sl, #32
   81432:	9004      	str	r0, [sp, #16]
   81434:	46ac      	mov	ip, r5
   81436:	f000 808d 	beq.w	81554 <_vfiprintf_r+0x444>
   8143a:	9d08      	ldr	r5, [sp, #32]
   8143c:	1deb      	adds	r3, r5, #7
   8143e:	f023 0307 	bic.w	r3, r3, #7
   81442:	f103 0b08 	add.w	fp, r3, #8
   81446:	e9d3 4500 	ldrd	r4, r5, [r3]
   8144a:	f8cd b020 	str.w	fp, [sp, #32]
   8144e:	2301      	movs	r3, #1
   81450:	e76f      	b.n	81332 <_vfiprintf_r+0x222>
   81452:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   81456:	f898 3000 	ldrb.w	r3, [r8]
   8145a:	e6c6      	b.n	811ea <_vfiprintf_r+0xda>
   8145c:	f04a 0a10 	orr.w	sl, sl, #16
   81460:	f01a 0f20 	tst.w	sl, #32
   81464:	9004      	str	r0, [sp, #16]
   81466:	46ac      	mov	ip, r5
   81468:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8146c:	f000 80c8 	beq.w	81600 <_vfiprintf_r+0x4f0>
   81470:	9c08      	ldr	r4, [sp, #32]
   81472:	1de1      	adds	r1, r4, #7
   81474:	f021 0107 	bic.w	r1, r1, #7
   81478:	e9d1 2300 	ldrd	r2, r3, [r1]
   8147c:	3108      	adds	r1, #8
   8147e:	9108      	str	r1, [sp, #32]
   81480:	4614      	mov	r4, r2
   81482:	461d      	mov	r5, r3
   81484:	2a00      	cmp	r2, #0
   81486:	f173 0b00 	sbcs.w	fp, r3, #0
   8148a:	f2c0 83ce 	blt.w	81c2a <_vfiprintf_r+0xb1a>
   8148e:	f1bc 0f00 	cmp.w	ip, #0
   81492:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81496:	bfa8      	it	ge
   81498:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   8149c:	ea54 0205 	orrs.w	r2, r4, r5
   814a0:	9007      	str	r0, [sp, #28]
   814a2:	f8cd c014 	str.w	ip, [sp, #20]
   814a6:	f04f 0301 	mov.w	r3, #1
   814aa:	f43f af53 	beq.w	81354 <_vfiprintf_r+0x244>
   814ae:	2b01      	cmp	r3, #1
   814b0:	f000 8319 	beq.w	81ae6 <_vfiprintf_r+0x9d6>
   814b4:	2b02      	cmp	r3, #2
   814b6:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   814ba:	f040 824c 	bne.w	81956 <_vfiprintf_r+0x846>
   814be:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   814c2:	4619      	mov	r1, r3
   814c4:	f004 000f 	and.w	r0, r4, #15
   814c8:	0922      	lsrs	r2, r4, #4
   814ca:	f81b 0000 	ldrb.w	r0, [fp, r0]
   814ce:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   814d2:	092b      	lsrs	r3, r5, #4
   814d4:	7008      	strb	r0, [r1, #0]
   814d6:	ea52 0003 	orrs.w	r0, r2, r3
   814da:	460f      	mov	r7, r1
   814dc:	4614      	mov	r4, r2
   814de:	461d      	mov	r5, r3
   814e0:	f101 31ff 	add.w	r1, r1, #4294967295
   814e4:	d1ee      	bne.n	814c4 <_vfiprintf_r+0x3b4>
   814e6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   814ea:	ebc7 0309 	rsb	r3, r7, r9
   814ee:	9305      	str	r3, [sp, #20]
   814f0:	e742      	b.n	81378 <_vfiprintf_r+0x268>
   814f2:	f04a 0a10 	orr.w	sl, sl, #16
   814f6:	f01a 0320 	ands.w	r3, sl, #32
   814fa:	9004      	str	r0, [sp, #16]
   814fc:	46ac      	mov	ip, r5
   814fe:	f47f af0c 	bne.w	8131a <_vfiprintf_r+0x20a>
   81502:	f01a 0210 	ands.w	r2, sl, #16
   81506:	f040 8311 	bne.w	81b2c <_vfiprintf_r+0xa1c>
   8150a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   8150e:	f000 830d 	beq.w	81b2c <_vfiprintf_r+0xa1c>
   81512:	f8dd b020 	ldr.w	fp, [sp, #32]
   81516:	4613      	mov	r3, r2
   81518:	f8bb 4000 	ldrh.w	r4, [fp]
   8151c:	f10b 0b04 	add.w	fp, fp, #4
   81520:	2500      	movs	r5, #0
   81522:	f8cd b020 	str.w	fp, [sp, #32]
   81526:	e704      	b.n	81332 <_vfiprintf_r+0x222>
   81528:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8152c:	2000      	movs	r0, #0
   8152e:	f818 3b01 	ldrb.w	r3, [r8], #1
   81532:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81536:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   8153a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8153e:	2a09      	cmp	r2, #9
   81540:	d9f5      	bls.n	8152e <_vfiprintf_r+0x41e>
   81542:	e654      	b.n	811ee <_vfiprintf_r+0xde>
   81544:	f04a 0a10 	orr.w	sl, sl, #16
   81548:	f01a 0f20 	tst.w	sl, #32
   8154c:	9004      	str	r0, [sp, #16]
   8154e:	46ac      	mov	ip, r5
   81550:	f47f af73 	bne.w	8143a <_vfiprintf_r+0x32a>
   81554:	f01a 0f10 	tst.w	sl, #16
   81558:	f040 82ef 	bne.w	81b3a <_vfiprintf_r+0xa2a>
   8155c:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81560:	f000 82eb 	beq.w	81b3a <_vfiprintf_r+0xa2a>
   81564:	f8dd b020 	ldr.w	fp, [sp, #32]
   81568:	2500      	movs	r5, #0
   8156a:	f8bb 4000 	ldrh.w	r4, [fp]
   8156e:	f10b 0b04 	add.w	fp, fp, #4
   81572:	2301      	movs	r3, #1
   81574:	f8cd b020 	str.w	fp, [sp, #32]
   81578:	e6db      	b.n	81332 <_vfiprintf_r+0x222>
   8157a:	46ac      	mov	ip, r5
   8157c:	4d51      	ldr	r5, [pc, #324]	; (816c4 <_vfiprintf_r+0x5b4>)
   8157e:	f01a 0f20 	tst.w	sl, #32
   81582:	9004      	str	r0, [sp, #16]
   81584:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81588:	950a      	str	r5, [sp, #40]	; 0x28
   8158a:	f000 80f0 	beq.w	8176e <_vfiprintf_r+0x65e>
   8158e:	9d08      	ldr	r5, [sp, #32]
   81590:	1dea      	adds	r2, r5, #7
   81592:	f022 0207 	bic.w	r2, r2, #7
   81596:	f102 0b08 	add.w	fp, r2, #8
   8159a:	f8cd b020 	str.w	fp, [sp, #32]
   8159e:	e9d2 4500 	ldrd	r4, r5, [r2]
   815a2:	f01a 0f01 	tst.w	sl, #1
   815a6:	f000 82aa 	beq.w	81afe <_vfiprintf_r+0x9ee>
   815aa:	ea54 0b05 	orrs.w	fp, r4, r5
   815ae:	f000 82a6 	beq.w	81afe <_vfiprintf_r+0x9ee>
   815b2:	2230      	movs	r2, #48	; 0x30
   815b4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   815b8:	f04a 0a02 	orr.w	sl, sl, #2
   815bc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   815c0:	2302      	movs	r3, #2
   815c2:	e6b6      	b.n	81332 <_vfiprintf_r+0x222>
   815c4:	9b08      	ldr	r3, [sp, #32]
   815c6:	f8dd b020 	ldr.w	fp, [sp, #32]
   815ca:	681b      	ldr	r3, [r3, #0]
   815cc:	2401      	movs	r4, #1
   815ce:	f04f 0500 	mov.w	r5, #0
   815d2:	f10b 0b04 	add.w	fp, fp, #4
   815d6:	9004      	str	r0, [sp, #16]
   815d8:	9403      	str	r4, [sp, #12]
   815da:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   815de:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   815e2:	f8cd b020 	str.w	fp, [sp, #32]
   815e6:	9405      	str	r4, [sp, #20]
   815e8:	af16      	add	r7, sp, #88	; 0x58
   815ea:	f04f 0c00 	mov.w	ip, #0
   815ee:	e6d0      	b.n	81392 <_vfiprintf_r+0x282>
   815f0:	f01a 0f20 	tst.w	sl, #32
   815f4:	9004      	str	r0, [sp, #16]
   815f6:	46ac      	mov	ip, r5
   815f8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   815fc:	f47f af38 	bne.w	81470 <_vfiprintf_r+0x360>
   81600:	f01a 0f10 	tst.w	sl, #16
   81604:	f040 82a7 	bne.w	81b56 <_vfiprintf_r+0xa46>
   81608:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8160c:	f000 82a3 	beq.w	81b56 <_vfiprintf_r+0xa46>
   81610:	f8dd b020 	ldr.w	fp, [sp, #32]
   81614:	f9bb 4000 	ldrsh.w	r4, [fp]
   81618:	f10b 0b04 	add.w	fp, fp, #4
   8161c:	17e5      	asrs	r5, r4, #31
   8161e:	4622      	mov	r2, r4
   81620:	462b      	mov	r3, r5
   81622:	f8cd b020 	str.w	fp, [sp, #32]
   81626:	e72d      	b.n	81484 <_vfiprintf_r+0x374>
   81628:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   8162c:	f898 3000 	ldrb.w	r3, [r8]
   81630:	e5db      	b.n	811ea <_vfiprintf_r+0xda>
   81632:	f898 3000 	ldrb.w	r3, [r8]
   81636:	4642      	mov	r2, r8
   81638:	2b6c      	cmp	r3, #108	; 0x6c
   8163a:	bf03      	ittte	eq
   8163c:	f108 0801 	addeq.w	r8, r8, #1
   81640:	f04a 0a20 	orreq.w	sl, sl, #32
   81644:	7853      	ldrbeq	r3, [r2, #1]
   81646:	f04a 0a10 	orrne.w	sl, sl, #16
   8164a:	e5ce      	b.n	811ea <_vfiprintf_r+0xda>
   8164c:	f01a 0f20 	tst.w	sl, #32
   81650:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81654:	f000 82f7 	beq.w	81c46 <_vfiprintf_r+0xb36>
   81658:	9c08      	ldr	r4, [sp, #32]
   8165a:	6821      	ldr	r1, [r4, #0]
   8165c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8165e:	17e5      	asrs	r5, r4, #31
   81660:	462b      	mov	r3, r5
   81662:	9d08      	ldr	r5, [sp, #32]
   81664:	4622      	mov	r2, r4
   81666:	3504      	adds	r5, #4
   81668:	9508      	str	r5, [sp, #32]
   8166a:	e9c1 2300 	strd	r2, r3, [r1]
   8166e:	e582      	b.n	81176 <_vfiprintf_r+0x66>
   81670:	9c08      	ldr	r4, [sp, #32]
   81672:	46ac      	mov	ip, r5
   81674:	6827      	ldr	r7, [r4, #0]
   81676:	f04f 0500 	mov.w	r5, #0
   8167a:	9004      	str	r0, [sp, #16]
   8167c:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81680:	3404      	adds	r4, #4
   81682:	2f00      	cmp	r7, #0
   81684:	f000 8332 	beq.w	81cec <_vfiprintf_r+0xbdc>
   81688:	f1bc 0f00 	cmp.w	ip, #0
   8168c:	4638      	mov	r0, r7
   8168e:	f2c0 8307 	blt.w	81ca0 <_vfiprintf_r+0xb90>
   81692:	4662      	mov	r2, ip
   81694:	2100      	movs	r1, #0
   81696:	f8cd c004 	str.w	ip, [sp, #4]
   8169a:	f001 fbb1 	bl	82e00 <memchr>
   8169e:	f8dd c004 	ldr.w	ip, [sp, #4]
   816a2:	2800      	cmp	r0, #0
   816a4:	f000 833a 	beq.w	81d1c <_vfiprintf_r+0xc0c>
   816a8:	1bc0      	subs	r0, r0, r7
   816aa:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   816ae:	4560      	cmp	r0, ip
   816b0:	bfa8      	it	ge
   816b2:	4660      	movge	r0, ip
   816b4:	9005      	str	r0, [sp, #20]
   816b6:	9408      	str	r4, [sp, #32]
   816b8:	9507      	str	r5, [sp, #28]
   816ba:	f04f 0c00 	mov.w	ip, #0
   816be:	e65b      	b.n	81378 <_vfiprintf_r+0x268>
   816c0:	00083ebc 	.word	0x00083ebc
   816c4:	00083e7c 	.word	0x00083e7c
   816c8:	9b08      	ldr	r3, [sp, #32]
   816ca:	f8dd b020 	ldr.w	fp, [sp, #32]
   816ce:	9004      	str	r0, [sp, #16]
   816d0:	48b2      	ldr	r0, [pc, #712]	; (8199c <_vfiprintf_r+0x88c>)
   816d2:	681c      	ldr	r4, [r3, #0]
   816d4:	2230      	movs	r2, #48	; 0x30
   816d6:	2378      	movs	r3, #120	; 0x78
   816d8:	f10b 0b04 	add.w	fp, fp, #4
   816dc:	46ac      	mov	ip, r5
   816de:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   816e2:	f04a 0a02 	orr.w	sl, sl, #2
   816e6:	f8cd b020 	str.w	fp, [sp, #32]
   816ea:	2500      	movs	r5, #0
   816ec:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   816f0:	900a      	str	r0, [sp, #40]	; 0x28
   816f2:	2302      	movs	r3, #2
   816f4:	e61d      	b.n	81332 <_vfiprintf_r+0x222>
   816f6:	f04a 0a20 	orr.w	sl, sl, #32
   816fa:	f898 3000 	ldrb.w	r3, [r8]
   816fe:	e574      	b.n	811ea <_vfiprintf_r+0xda>
   81700:	f8dd b020 	ldr.w	fp, [sp, #32]
   81704:	f8db 0000 	ldr.w	r0, [fp]
   81708:	f10b 0304 	add.w	r3, fp, #4
   8170c:	2800      	cmp	r0, #0
   8170e:	f6ff adf7 	blt.w	81300 <_vfiprintf_r+0x1f0>
   81712:	9308      	str	r3, [sp, #32]
   81714:	f898 3000 	ldrb.w	r3, [r8]
   81718:	e567      	b.n	811ea <_vfiprintf_r+0xda>
   8171a:	f898 3000 	ldrb.w	r3, [r8]
   8171e:	212b      	movs	r1, #43	; 0x2b
   81720:	e563      	b.n	811ea <_vfiprintf_r+0xda>
   81722:	f898 3000 	ldrb.w	r3, [r8]
   81726:	f108 0401 	add.w	r4, r8, #1
   8172a:	2b2a      	cmp	r3, #42	; 0x2a
   8172c:	f000 8305 	beq.w	81d3a <_vfiprintf_r+0xc2a>
   81730:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81734:	2a09      	cmp	r2, #9
   81736:	bf98      	it	ls
   81738:	2500      	movls	r5, #0
   8173a:	f200 82fa 	bhi.w	81d32 <_vfiprintf_r+0xc22>
   8173e:	f814 3b01 	ldrb.w	r3, [r4], #1
   81742:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81746:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   8174a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8174e:	2a09      	cmp	r2, #9
   81750:	d9f5      	bls.n	8173e <_vfiprintf_r+0x62e>
   81752:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   81756:	46a0      	mov	r8, r4
   81758:	e549      	b.n	811ee <_vfiprintf_r+0xde>
   8175a:	4c90      	ldr	r4, [pc, #576]	; (8199c <_vfiprintf_r+0x88c>)
   8175c:	f01a 0f20 	tst.w	sl, #32
   81760:	9004      	str	r0, [sp, #16]
   81762:	46ac      	mov	ip, r5
   81764:	940a      	str	r4, [sp, #40]	; 0x28
   81766:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8176a:	f47f af10 	bne.w	8158e <_vfiprintf_r+0x47e>
   8176e:	f01a 0f10 	tst.w	sl, #16
   81772:	f040 81ea 	bne.w	81b4a <_vfiprintf_r+0xa3a>
   81776:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8177a:	f000 81e6 	beq.w	81b4a <_vfiprintf_r+0xa3a>
   8177e:	f8dd b020 	ldr.w	fp, [sp, #32]
   81782:	2500      	movs	r5, #0
   81784:	f8bb 4000 	ldrh.w	r4, [fp]
   81788:	f10b 0b04 	add.w	fp, fp, #4
   8178c:	f8cd b020 	str.w	fp, [sp, #32]
   81790:	e707      	b.n	815a2 <_vfiprintf_r+0x492>
   81792:	f898 3000 	ldrb.w	r3, [r8]
   81796:	2900      	cmp	r1, #0
   81798:	f47f ad27 	bne.w	811ea <_vfiprintf_r+0xda>
   8179c:	2120      	movs	r1, #32
   8179e:	e524      	b.n	811ea <_vfiprintf_r+0xda>
   817a0:	f04a 0a01 	orr.w	sl, sl, #1
   817a4:	f898 3000 	ldrb.w	r3, [r8]
   817a8:	e51f      	b.n	811ea <_vfiprintf_r+0xda>
   817aa:	9004      	str	r0, [sp, #16]
   817ac:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   817b0:	2b00      	cmp	r3, #0
   817b2:	f000 80f9 	beq.w	819a8 <_vfiprintf_r+0x898>
   817b6:	2501      	movs	r5, #1
   817b8:	f04f 0b00 	mov.w	fp, #0
   817bc:	9503      	str	r5, [sp, #12]
   817be:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   817c2:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   817c6:	9505      	str	r5, [sp, #20]
   817c8:	af16      	add	r7, sp, #88	; 0x58
   817ca:	e70e      	b.n	815ea <_vfiprintf_r+0x4da>
   817cc:	9806      	ldr	r0, [sp, #24]
   817ce:	9902      	ldr	r1, [sp, #8]
   817d0:	aa13      	add	r2, sp, #76	; 0x4c
   817d2:	f7ff fc61 	bl	81098 <__sprint_r.part.0>
   817d6:	2800      	cmp	r0, #0
   817d8:	f040 80ed 	bne.w	819b6 <_vfiprintf_r+0x8a6>
   817dc:	9814      	ldr	r0, [sp, #80]	; 0x50
   817de:	9a15      	ldr	r2, [sp, #84]	; 0x54
   817e0:	1c43      	adds	r3, r0, #1
   817e2:	46cc      	mov	ip, r9
   817e4:	e5fe      	b.n	813e4 <_vfiprintf_r+0x2d4>
   817e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   817e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   817ea:	1c59      	adds	r1, r3, #1
   817ec:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   817f0:	b168      	cbz	r0, 8180e <_vfiprintf_r+0x6fe>
   817f2:	3201      	adds	r2, #1
   817f4:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   817f8:	2301      	movs	r3, #1
   817fa:	2907      	cmp	r1, #7
   817fc:	9215      	str	r2, [sp, #84]	; 0x54
   817fe:	9114      	str	r1, [sp, #80]	; 0x50
   81800:	e886 0009 	stmia.w	r6, {r0, r3}
   81804:	f300 8160 	bgt.w	81ac8 <_vfiprintf_r+0x9b8>
   81808:	460b      	mov	r3, r1
   8180a:	3608      	adds	r6, #8
   8180c:	3101      	adds	r1, #1
   8180e:	9c07      	ldr	r4, [sp, #28]
   81810:	b164      	cbz	r4, 8182c <_vfiprintf_r+0x71c>
   81812:	3202      	adds	r2, #2
   81814:	a812      	add	r0, sp, #72	; 0x48
   81816:	2302      	movs	r3, #2
   81818:	2907      	cmp	r1, #7
   8181a:	9215      	str	r2, [sp, #84]	; 0x54
   8181c:	9114      	str	r1, [sp, #80]	; 0x50
   8181e:	e886 0009 	stmia.w	r6, {r0, r3}
   81822:	f300 8157 	bgt.w	81ad4 <_vfiprintf_r+0x9c4>
   81826:	460b      	mov	r3, r1
   81828:	3608      	adds	r6, #8
   8182a:	3101      	adds	r1, #1
   8182c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8182e:	2d80      	cmp	r5, #128	; 0x80
   81830:	f000 8101 	beq.w	81a36 <_vfiprintf_r+0x926>
   81834:	9d05      	ldr	r5, [sp, #20]
   81836:	ebc5 040c 	rsb	r4, r5, ip
   8183a:	2c00      	cmp	r4, #0
   8183c:	dd2f      	ble.n	8189e <_vfiprintf_r+0x78e>
   8183e:	2c10      	cmp	r4, #16
   81840:	4d57      	ldr	r5, [pc, #348]	; (819a0 <_vfiprintf_r+0x890>)
   81842:	dd22      	ble.n	8188a <_vfiprintf_r+0x77a>
   81844:	4630      	mov	r0, r6
   81846:	f04f 0b10 	mov.w	fp, #16
   8184a:	462e      	mov	r6, r5
   8184c:	4625      	mov	r5, r4
   8184e:	9c06      	ldr	r4, [sp, #24]
   81850:	e006      	b.n	81860 <_vfiprintf_r+0x750>
   81852:	f103 0c02 	add.w	ip, r3, #2
   81856:	3008      	adds	r0, #8
   81858:	460b      	mov	r3, r1
   8185a:	3d10      	subs	r5, #16
   8185c:	2d10      	cmp	r5, #16
   8185e:	dd10      	ble.n	81882 <_vfiprintf_r+0x772>
   81860:	1c59      	adds	r1, r3, #1
   81862:	3210      	adds	r2, #16
   81864:	2907      	cmp	r1, #7
   81866:	9215      	str	r2, [sp, #84]	; 0x54
   81868:	e880 0840 	stmia.w	r0, {r6, fp}
   8186c:	9114      	str	r1, [sp, #80]	; 0x50
   8186e:	ddf0      	ble.n	81852 <_vfiprintf_r+0x742>
   81870:	2a00      	cmp	r2, #0
   81872:	d163      	bne.n	8193c <_vfiprintf_r+0x82c>
   81874:	3d10      	subs	r5, #16
   81876:	2d10      	cmp	r5, #16
   81878:	f04f 0c01 	mov.w	ip, #1
   8187c:	4613      	mov	r3, r2
   8187e:	4648      	mov	r0, r9
   81880:	dcee      	bgt.n	81860 <_vfiprintf_r+0x750>
   81882:	462c      	mov	r4, r5
   81884:	4661      	mov	r1, ip
   81886:	4635      	mov	r5, r6
   81888:	4606      	mov	r6, r0
   8188a:	4422      	add	r2, r4
   8188c:	2907      	cmp	r1, #7
   8188e:	9215      	str	r2, [sp, #84]	; 0x54
   81890:	6035      	str	r5, [r6, #0]
   81892:	6074      	str	r4, [r6, #4]
   81894:	9114      	str	r1, [sp, #80]	; 0x50
   81896:	f300 80c1 	bgt.w	81a1c <_vfiprintf_r+0x90c>
   8189a:	3608      	adds	r6, #8
   8189c:	3101      	adds	r1, #1
   8189e:	9d05      	ldr	r5, [sp, #20]
   818a0:	2907      	cmp	r1, #7
   818a2:	442a      	add	r2, r5
   818a4:	9215      	str	r2, [sp, #84]	; 0x54
   818a6:	6037      	str	r7, [r6, #0]
   818a8:	6075      	str	r5, [r6, #4]
   818aa:	9114      	str	r1, [sp, #80]	; 0x50
   818ac:	f340 80c1 	ble.w	81a32 <_vfiprintf_r+0x922>
   818b0:	2a00      	cmp	r2, #0
   818b2:	f040 8130 	bne.w	81b16 <_vfiprintf_r+0xa06>
   818b6:	9214      	str	r2, [sp, #80]	; 0x50
   818b8:	464e      	mov	r6, r9
   818ba:	f01a 0f04 	tst.w	sl, #4
   818be:	f000 808b 	beq.w	819d8 <_vfiprintf_r+0x8c8>
   818c2:	9d04      	ldr	r5, [sp, #16]
   818c4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   818c8:	ebcb 0405 	rsb	r4, fp, r5
   818cc:	2c00      	cmp	r4, #0
   818ce:	f340 8083 	ble.w	819d8 <_vfiprintf_r+0x8c8>
   818d2:	2c10      	cmp	r4, #16
   818d4:	f340 821e 	ble.w	81d14 <_vfiprintf_r+0xc04>
   818d8:	9914      	ldr	r1, [sp, #80]	; 0x50
   818da:	4d32      	ldr	r5, [pc, #200]	; (819a4 <_vfiprintf_r+0x894>)
   818dc:	2710      	movs	r7, #16
   818de:	f8dd a018 	ldr.w	sl, [sp, #24]
   818e2:	f8dd b008 	ldr.w	fp, [sp, #8]
   818e6:	e005      	b.n	818f4 <_vfiprintf_r+0x7e4>
   818e8:	1c88      	adds	r0, r1, #2
   818ea:	3608      	adds	r6, #8
   818ec:	4619      	mov	r1, r3
   818ee:	3c10      	subs	r4, #16
   818f0:	2c10      	cmp	r4, #16
   818f2:	dd10      	ble.n	81916 <_vfiprintf_r+0x806>
   818f4:	1c4b      	adds	r3, r1, #1
   818f6:	3210      	adds	r2, #16
   818f8:	2b07      	cmp	r3, #7
   818fa:	9215      	str	r2, [sp, #84]	; 0x54
   818fc:	e886 00a0 	stmia.w	r6, {r5, r7}
   81900:	9314      	str	r3, [sp, #80]	; 0x50
   81902:	ddf1      	ble.n	818e8 <_vfiprintf_r+0x7d8>
   81904:	2a00      	cmp	r2, #0
   81906:	d17d      	bne.n	81a04 <_vfiprintf_r+0x8f4>
   81908:	3c10      	subs	r4, #16
   8190a:	2c10      	cmp	r4, #16
   8190c:	f04f 0001 	mov.w	r0, #1
   81910:	4611      	mov	r1, r2
   81912:	464e      	mov	r6, r9
   81914:	dcee      	bgt.n	818f4 <_vfiprintf_r+0x7e4>
   81916:	4422      	add	r2, r4
   81918:	2807      	cmp	r0, #7
   8191a:	9215      	str	r2, [sp, #84]	; 0x54
   8191c:	6035      	str	r5, [r6, #0]
   8191e:	6074      	str	r4, [r6, #4]
   81920:	9014      	str	r0, [sp, #80]	; 0x50
   81922:	dd59      	ble.n	819d8 <_vfiprintf_r+0x8c8>
   81924:	2a00      	cmp	r2, #0
   81926:	d14f      	bne.n	819c8 <_vfiprintf_r+0x8b8>
   81928:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8192a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8192e:	9d04      	ldr	r5, [sp, #16]
   81930:	45ab      	cmp	fp, r5
   81932:	bfac      	ite	ge
   81934:	445c      	addge	r4, fp
   81936:	1964      	addlt	r4, r4, r5
   81938:	9409      	str	r4, [sp, #36]	; 0x24
   8193a:	e05e      	b.n	819fa <_vfiprintf_r+0x8ea>
   8193c:	4620      	mov	r0, r4
   8193e:	9902      	ldr	r1, [sp, #8]
   81940:	aa13      	add	r2, sp, #76	; 0x4c
   81942:	f7ff fba9 	bl	81098 <__sprint_r.part.0>
   81946:	2800      	cmp	r0, #0
   81948:	d135      	bne.n	819b6 <_vfiprintf_r+0x8a6>
   8194a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8194c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8194e:	f103 0c01 	add.w	ip, r3, #1
   81952:	4648      	mov	r0, r9
   81954:	e781      	b.n	8185a <_vfiprintf_r+0x74a>
   81956:	08e0      	lsrs	r0, r4, #3
   81958:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   8195c:	f004 0207 	and.w	r2, r4, #7
   81960:	08e9      	lsrs	r1, r5, #3
   81962:	3230      	adds	r2, #48	; 0x30
   81964:	ea50 0b01 	orrs.w	fp, r0, r1
   81968:	461f      	mov	r7, r3
   8196a:	701a      	strb	r2, [r3, #0]
   8196c:	4604      	mov	r4, r0
   8196e:	460d      	mov	r5, r1
   81970:	f103 33ff 	add.w	r3, r3, #4294967295
   81974:	d1ef      	bne.n	81956 <_vfiprintf_r+0x846>
   81976:	f01a 0f01 	tst.w	sl, #1
   8197a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   8197e:	4639      	mov	r1, r7
   81980:	f000 80b9 	beq.w	81af6 <_vfiprintf_r+0x9e6>
   81984:	2a30      	cmp	r2, #48	; 0x30
   81986:	f43f acf4 	beq.w	81372 <_vfiprintf_r+0x262>
   8198a:	461f      	mov	r7, r3
   8198c:	ebc7 0509 	rsb	r5, r7, r9
   81990:	2330      	movs	r3, #48	; 0x30
   81992:	9505      	str	r5, [sp, #20]
   81994:	f801 3c01 	strb.w	r3, [r1, #-1]
   81998:	e4ee      	b.n	81378 <_vfiprintf_r+0x268>
   8199a:	bf00      	nop
   8199c:	00083e90 	.word	0x00083e90
   819a0:	00083eac 	.word	0x00083eac
   819a4:	00083ebc 	.word	0x00083ebc
   819a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   819aa:	b123      	cbz	r3, 819b6 <_vfiprintf_r+0x8a6>
   819ac:	9806      	ldr	r0, [sp, #24]
   819ae:	9902      	ldr	r1, [sp, #8]
   819b0:	aa13      	add	r2, sp, #76	; 0x4c
   819b2:	f7ff fb71 	bl	81098 <__sprint_r.part.0>
   819b6:	9c02      	ldr	r4, [sp, #8]
   819b8:	89a3      	ldrh	r3, [r4, #12]
   819ba:	065b      	lsls	r3, r3, #25
   819bc:	f53f ac98 	bmi.w	812f0 <_vfiprintf_r+0x1e0>
   819c0:	9809      	ldr	r0, [sp, #36]	; 0x24
   819c2:	b031      	add	sp, #196	; 0xc4
   819c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   819c8:	9806      	ldr	r0, [sp, #24]
   819ca:	9902      	ldr	r1, [sp, #8]
   819cc:	aa13      	add	r2, sp, #76	; 0x4c
   819ce:	f7ff fb63 	bl	81098 <__sprint_r.part.0>
   819d2:	2800      	cmp	r0, #0
   819d4:	d1ef      	bne.n	819b6 <_vfiprintf_r+0x8a6>
   819d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   819d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   819da:	f8dd b00c 	ldr.w	fp, [sp, #12]
   819de:	9d04      	ldr	r5, [sp, #16]
   819e0:	45ab      	cmp	fp, r5
   819e2:	bfac      	ite	ge
   819e4:	445c      	addge	r4, fp
   819e6:	1964      	addlt	r4, r4, r5
   819e8:	9409      	str	r4, [sp, #36]	; 0x24
   819ea:	b132      	cbz	r2, 819fa <_vfiprintf_r+0x8ea>
   819ec:	9806      	ldr	r0, [sp, #24]
   819ee:	9902      	ldr	r1, [sp, #8]
   819f0:	aa13      	add	r2, sp, #76	; 0x4c
   819f2:	f7ff fb51 	bl	81098 <__sprint_r.part.0>
   819f6:	2800      	cmp	r0, #0
   819f8:	d1dd      	bne.n	819b6 <_vfiprintf_r+0x8a6>
   819fa:	2000      	movs	r0, #0
   819fc:	9014      	str	r0, [sp, #80]	; 0x50
   819fe:	464e      	mov	r6, r9
   81a00:	f7ff bbb9 	b.w	81176 <_vfiprintf_r+0x66>
   81a04:	4650      	mov	r0, sl
   81a06:	4659      	mov	r1, fp
   81a08:	aa13      	add	r2, sp, #76	; 0x4c
   81a0a:	f7ff fb45 	bl	81098 <__sprint_r.part.0>
   81a0e:	2800      	cmp	r0, #0
   81a10:	d1d1      	bne.n	819b6 <_vfiprintf_r+0x8a6>
   81a12:	9914      	ldr	r1, [sp, #80]	; 0x50
   81a14:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81a16:	1c48      	adds	r0, r1, #1
   81a18:	464e      	mov	r6, r9
   81a1a:	e768      	b.n	818ee <_vfiprintf_r+0x7de>
   81a1c:	2a00      	cmp	r2, #0
   81a1e:	f040 80f7 	bne.w	81c10 <_vfiprintf_r+0xb00>
   81a22:	9c05      	ldr	r4, [sp, #20]
   81a24:	2301      	movs	r3, #1
   81a26:	9720      	str	r7, [sp, #128]	; 0x80
   81a28:	9421      	str	r4, [sp, #132]	; 0x84
   81a2a:	9415      	str	r4, [sp, #84]	; 0x54
   81a2c:	4622      	mov	r2, r4
   81a2e:	9314      	str	r3, [sp, #80]	; 0x50
   81a30:	464e      	mov	r6, r9
   81a32:	3608      	adds	r6, #8
   81a34:	e741      	b.n	818ba <_vfiprintf_r+0x7aa>
   81a36:	9d04      	ldr	r5, [sp, #16]
   81a38:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81a3c:	ebcb 0405 	rsb	r4, fp, r5
   81a40:	2c00      	cmp	r4, #0
   81a42:	f77f aef7 	ble.w	81834 <_vfiprintf_r+0x724>
   81a46:	2c10      	cmp	r4, #16
   81a48:	4da6      	ldr	r5, [pc, #664]	; (81ce4 <_vfiprintf_r+0xbd4>)
   81a4a:	f340 8170 	ble.w	81d2e <_vfiprintf_r+0xc1e>
   81a4e:	4629      	mov	r1, r5
   81a50:	f04f 0b10 	mov.w	fp, #16
   81a54:	4625      	mov	r5, r4
   81a56:	4664      	mov	r4, ip
   81a58:	46b4      	mov	ip, r6
   81a5a:	460e      	mov	r6, r1
   81a5c:	e006      	b.n	81a6c <_vfiprintf_r+0x95c>
   81a5e:	1c98      	adds	r0, r3, #2
   81a60:	f10c 0c08 	add.w	ip, ip, #8
   81a64:	460b      	mov	r3, r1
   81a66:	3d10      	subs	r5, #16
   81a68:	2d10      	cmp	r5, #16
   81a6a:	dd0f      	ble.n	81a8c <_vfiprintf_r+0x97c>
   81a6c:	1c59      	adds	r1, r3, #1
   81a6e:	3210      	adds	r2, #16
   81a70:	2907      	cmp	r1, #7
   81a72:	9215      	str	r2, [sp, #84]	; 0x54
   81a74:	e88c 0840 	stmia.w	ip, {r6, fp}
   81a78:	9114      	str	r1, [sp, #80]	; 0x50
   81a7a:	ddf0      	ble.n	81a5e <_vfiprintf_r+0x94e>
   81a7c:	b9ba      	cbnz	r2, 81aae <_vfiprintf_r+0x99e>
   81a7e:	3d10      	subs	r5, #16
   81a80:	2d10      	cmp	r5, #16
   81a82:	f04f 0001 	mov.w	r0, #1
   81a86:	4613      	mov	r3, r2
   81a88:	46cc      	mov	ip, r9
   81a8a:	dcef      	bgt.n	81a6c <_vfiprintf_r+0x95c>
   81a8c:	4633      	mov	r3, r6
   81a8e:	4666      	mov	r6, ip
   81a90:	46a4      	mov	ip, r4
   81a92:	462c      	mov	r4, r5
   81a94:	461d      	mov	r5, r3
   81a96:	4422      	add	r2, r4
   81a98:	2807      	cmp	r0, #7
   81a9a:	9215      	str	r2, [sp, #84]	; 0x54
   81a9c:	6035      	str	r5, [r6, #0]
   81a9e:	6074      	str	r4, [r6, #4]
   81aa0:	9014      	str	r0, [sp, #80]	; 0x50
   81aa2:	f300 80af 	bgt.w	81c04 <_vfiprintf_r+0xaf4>
   81aa6:	3608      	adds	r6, #8
   81aa8:	1c41      	adds	r1, r0, #1
   81aaa:	4603      	mov	r3, r0
   81aac:	e6c2      	b.n	81834 <_vfiprintf_r+0x724>
   81aae:	9806      	ldr	r0, [sp, #24]
   81ab0:	9902      	ldr	r1, [sp, #8]
   81ab2:	aa13      	add	r2, sp, #76	; 0x4c
   81ab4:	f7ff faf0 	bl	81098 <__sprint_r.part.0>
   81ab8:	2800      	cmp	r0, #0
   81aba:	f47f af7c 	bne.w	819b6 <_vfiprintf_r+0x8a6>
   81abe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81ac0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81ac2:	1c58      	adds	r0, r3, #1
   81ac4:	46cc      	mov	ip, r9
   81ac6:	e7ce      	b.n	81a66 <_vfiprintf_r+0x956>
   81ac8:	2a00      	cmp	r2, #0
   81aca:	d179      	bne.n	81bc0 <_vfiprintf_r+0xab0>
   81acc:	4619      	mov	r1, r3
   81ace:	464e      	mov	r6, r9
   81ad0:	4613      	mov	r3, r2
   81ad2:	e69c      	b.n	8180e <_vfiprintf_r+0x6fe>
   81ad4:	2a00      	cmp	r2, #0
   81ad6:	f040 8084 	bne.w	81be2 <_vfiprintf_r+0xad2>
   81ada:	2101      	movs	r1, #1
   81adc:	4613      	mov	r3, r2
   81ade:	464e      	mov	r6, r9
   81ae0:	e6a4      	b.n	8182c <_vfiprintf_r+0x71c>
   81ae2:	464f      	mov	r7, r9
   81ae4:	e448      	b.n	81378 <_vfiprintf_r+0x268>
   81ae6:	2d00      	cmp	r5, #0
   81ae8:	bf08      	it	eq
   81aea:	2c0a      	cmpeq	r4, #10
   81aec:	d246      	bcs.n	81b7c <_vfiprintf_r+0xa6c>
   81aee:	3430      	adds	r4, #48	; 0x30
   81af0:	af30      	add	r7, sp, #192	; 0xc0
   81af2:	f807 4d41 	strb.w	r4, [r7, #-65]!
   81af6:	ebc7 0309 	rsb	r3, r7, r9
   81afa:	9305      	str	r3, [sp, #20]
   81afc:	e43c      	b.n	81378 <_vfiprintf_r+0x268>
   81afe:	2302      	movs	r3, #2
   81b00:	e417      	b.n	81332 <_vfiprintf_r+0x222>
   81b02:	2a00      	cmp	r2, #0
   81b04:	f040 80af 	bne.w	81c66 <_vfiprintf_r+0xb56>
   81b08:	4613      	mov	r3, r2
   81b0a:	2101      	movs	r1, #1
   81b0c:	464e      	mov	r6, r9
   81b0e:	e66d      	b.n	817ec <_vfiprintf_r+0x6dc>
   81b10:	4644      	mov	r4, r8
   81b12:	f7ff bb58 	b.w	811c6 <_vfiprintf_r+0xb6>
   81b16:	9806      	ldr	r0, [sp, #24]
   81b18:	9902      	ldr	r1, [sp, #8]
   81b1a:	aa13      	add	r2, sp, #76	; 0x4c
   81b1c:	f7ff fabc 	bl	81098 <__sprint_r.part.0>
   81b20:	2800      	cmp	r0, #0
   81b22:	f47f af48 	bne.w	819b6 <_vfiprintf_r+0x8a6>
   81b26:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b28:	464e      	mov	r6, r9
   81b2a:	e6c6      	b.n	818ba <_vfiprintf_r+0x7aa>
   81b2c:	9d08      	ldr	r5, [sp, #32]
   81b2e:	682c      	ldr	r4, [r5, #0]
   81b30:	3504      	adds	r5, #4
   81b32:	9508      	str	r5, [sp, #32]
   81b34:	2500      	movs	r5, #0
   81b36:	f7ff bbfc 	b.w	81332 <_vfiprintf_r+0x222>
   81b3a:	9d08      	ldr	r5, [sp, #32]
   81b3c:	2301      	movs	r3, #1
   81b3e:	682c      	ldr	r4, [r5, #0]
   81b40:	3504      	adds	r5, #4
   81b42:	9508      	str	r5, [sp, #32]
   81b44:	2500      	movs	r5, #0
   81b46:	f7ff bbf4 	b.w	81332 <_vfiprintf_r+0x222>
   81b4a:	9d08      	ldr	r5, [sp, #32]
   81b4c:	682c      	ldr	r4, [r5, #0]
   81b4e:	3504      	adds	r5, #4
   81b50:	9508      	str	r5, [sp, #32]
   81b52:	2500      	movs	r5, #0
   81b54:	e525      	b.n	815a2 <_vfiprintf_r+0x492>
   81b56:	9d08      	ldr	r5, [sp, #32]
   81b58:	682c      	ldr	r4, [r5, #0]
   81b5a:	3504      	adds	r5, #4
   81b5c:	9508      	str	r5, [sp, #32]
   81b5e:	17e5      	asrs	r5, r4, #31
   81b60:	4622      	mov	r2, r4
   81b62:	462b      	mov	r3, r5
   81b64:	e48e      	b.n	81484 <_vfiprintf_r+0x374>
   81b66:	9806      	ldr	r0, [sp, #24]
   81b68:	9902      	ldr	r1, [sp, #8]
   81b6a:	aa13      	add	r2, sp, #76	; 0x4c
   81b6c:	f7ff fa94 	bl	81098 <__sprint_r.part.0>
   81b70:	2800      	cmp	r0, #0
   81b72:	f47f af20 	bne.w	819b6 <_vfiprintf_r+0x8a6>
   81b76:	464e      	mov	r6, r9
   81b78:	f7ff bb9a 	b.w	812b0 <_vfiprintf_r+0x1a0>
   81b7c:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   81b80:	9603      	str	r6, [sp, #12]
   81b82:	465e      	mov	r6, fp
   81b84:	46e3      	mov	fp, ip
   81b86:	4620      	mov	r0, r4
   81b88:	4629      	mov	r1, r5
   81b8a:	220a      	movs	r2, #10
   81b8c:	2300      	movs	r3, #0
   81b8e:	f001 fe5f 	bl	83850 <__aeabi_uldivmod>
   81b92:	3230      	adds	r2, #48	; 0x30
   81b94:	7032      	strb	r2, [r6, #0]
   81b96:	4620      	mov	r0, r4
   81b98:	4629      	mov	r1, r5
   81b9a:	220a      	movs	r2, #10
   81b9c:	2300      	movs	r3, #0
   81b9e:	f001 fe57 	bl	83850 <__aeabi_uldivmod>
   81ba2:	4604      	mov	r4, r0
   81ba4:	460d      	mov	r5, r1
   81ba6:	ea54 0005 	orrs.w	r0, r4, r5
   81baa:	4637      	mov	r7, r6
   81bac:	f106 36ff 	add.w	r6, r6, #4294967295
   81bb0:	d1e9      	bne.n	81b86 <_vfiprintf_r+0xa76>
   81bb2:	ebc7 0309 	rsb	r3, r7, r9
   81bb6:	46dc      	mov	ip, fp
   81bb8:	9e03      	ldr	r6, [sp, #12]
   81bba:	9305      	str	r3, [sp, #20]
   81bbc:	f7ff bbdc 	b.w	81378 <_vfiprintf_r+0x268>
   81bc0:	9806      	ldr	r0, [sp, #24]
   81bc2:	9902      	ldr	r1, [sp, #8]
   81bc4:	aa13      	add	r2, sp, #76	; 0x4c
   81bc6:	f8cd c004 	str.w	ip, [sp, #4]
   81bca:	f7ff fa65 	bl	81098 <__sprint_r.part.0>
   81bce:	f8dd c004 	ldr.w	ip, [sp, #4]
   81bd2:	2800      	cmp	r0, #0
   81bd4:	f47f aeef 	bne.w	819b6 <_vfiprintf_r+0x8a6>
   81bd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81bda:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81bdc:	1c59      	adds	r1, r3, #1
   81bde:	464e      	mov	r6, r9
   81be0:	e615      	b.n	8180e <_vfiprintf_r+0x6fe>
   81be2:	9806      	ldr	r0, [sp, #24]
   81be4:	9902      	ldr	r1, [sp, #8]
   81be6:	aa13      	add	r2, sp, #76	; 0x4c
   81be8:	f8cd c004 	str.w	ip, [sp, #4]
   81bec:	f7ff fa54 	bl	81098 <__sprint_r.part.0>
   81bf0:	f8dd c004 	ldr.w	ip, [sp, #4]
   81bf4:	2800      	cmp	r0, #0
   81bf6:	f47f aede 	bne.w	819b6 <_vfiprintf_r+0x8a6>
   81bfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81bfc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81bfe:	1c59      	adds	r1, r3, #1
   81c00:	464e      	mov	r6, r9
   81c02:	e613      	b.n	8182c <_vfiprintf_r+0x71c>
   81c04:	2a00      	cmp	r2, #0
   81c06:	d156      	bne.n	81cb6 <_vfiprintf_r+0xba6>
   81c08:	2101      	movs	r1, #1
   81c0a:	4613      	mov	r3, r2
   81c0c:	464e      	mov	r6, r9
   81c0e:	e611      	b.n	81834 <_vfiprintf_r+0x724>
   81c10:	9806      	ldr	r0, [sp, #24]
   81c12:	9902      	ldr	r1, [sp, #8]
   81c14:	aa13      	add	r2, sp, #76	; 0x4c
   81c16:	f7ff fa3f 	bl	81098 <__sprint_r.part.0>
   81c1a:	2800      	cmp	r0, #0
   81c1c:	f47f aecb 	bne.w	819b6 <_vfiprintf_r+0x8a6>
   81c20:	9914      	ldr	r1, [sp, #80]	; 0x50
   81c22:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81c24:	3101      	adds	r1, #1
   81c26:	464e      	mov	r6, r9
   81c28:	e639      	b.n	8189e <_vfiprintf_r+0x78e>
   81c2a:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   81c2e:	4264      	negs	r4, r4
   81c30:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   81c34:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81c38:	f8cd b01c 	str.w	fp, [sp, #28]
   81c3c:	f8cd c014 	str.w	ip, [sp, #20]
   81c40:	2301      	movs	r3, #1
   81c42:	f7ff bb7e 	b.w	81342 <_vfiprintf_r+0x232>
   81c46:	f01a 0f10 	tst.w	sl, #16
   81c4a:	d11d      	bne.n	81c88 <_vfiprintf_r+0xb78>
   81c4c:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81c50:	d058      	beq.n	81d04 <_vfiprintf_r+0xbf4>
   81c52:	9d08      	ldr	r5, [sp, #32]
   81c54:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   81c58:	682b      	ldr	r3, [r5, #0]
   81c5a:	3504      	adds	r5, #4
   81c5c:	9508      	str	r5, [sp, #32]
   81c5e:	f8a3 b000 	strh.w	fp, [r3]
   81c62:	f7ff ba88 	b.w	81176 <_vfiprintf_r+0x66>
   81c66:	9806      	ldr	r0, [sp, #24]
   81c68:	9902      	ldr	r1, [sp, #8]
   81c6a:	aa13      	add	r2, sp, #76	; 0x4c
   81c6c:	f8cd c004 	str.w	ip, [sp, #4]
   81c70:	f7ff fa12 	bl	81098 <__sprint_r.part.0>
   81c74:	f8dd c004 	ldr.w	ip, [sp, #4]
   81c78:	2800      	cmp	r0, #0
   81c7a:	f47f ae9c 	bne.w	819b6 <_vfiprintf_r+0x8a6>
   81c7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81c80:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81c82:	1c59      	adds	r1, r3, #1
   81c84:	464e      	mov	r6, r9
   81c86:	e5b1      	b.n	817ec <_vfiprintf_r+0x6dc>
   81c88:	f8dd b020 	ldr.w	fp, [sp, #32]
   81c8c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81c8e:	f8db 3000 	ldr.w	r3, [fp]
   81c92:	f10b 0b04 	add.w	fp, fp, #4
   81c96:	f8cd b020 	str.w	fp, [sp, #32]
   81c9a:	601c      	str	r4, [r3, #0]
   81c9c:	f7ff ba6b 	b.w	81176 <_vfiprintf_r+0x66>
   81ca0:	9408      	str	r4, [sp, #32]
   81ca2:	f001 fc0b 	bl	834bc <strlen>
   81ca6:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   81caa:	9005      	str	r0, [sp, #20]
   81cac:	9407      	str	r4, [sp, #28]
   81cae:	f04f 0c00 	mov.w	ip, #0
   81cb2:	f7ff bb61 	b.w	81378 <_vfiprintf_r+0x268>
   81cb6:	9806      	ldr	r0, [sp, #24]
   81cb8:	9902      	ldr	r1, [sp, #8]
   81cba:	aa13      	add	r2, sp, #76	; 0x4c
   81cbc:	f8cd c004 	str.w	ip, [sp, #4]
   81cc0:	f7ff f9ea 	bl	81098 <__sprint_r.part.0>
   81cc4:	f8dd c004 	ldr.w	ip, [sp, #4]
   81cc8:	2800      	cmp	r0, #0
   81cca:	f47f ae74 	bne.w	819b6 <_vfiprintf_r+0x8a6>
   81cce:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81cd0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81cd2:	1c59      	adds	r1, r3, #1
   81cd4:	464e      	mov	r6, r9
   81cd6:	e5ad      	b.n	81834 <_vfiprintf_r+0x724>
   81cd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81cda:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81cdc:	3301      	adds	r3, #1
   81cde:	4d02      	ldr	r5, [pc, #8]	; (81ce8 <_vfiprintf_r+0xbd8>)
   81ce0:	f7ff bb9a 	b.w	81418 <_vfiprintf_r+0x308>
   81ce4:	00083eac 	.word	0x00083eac
   81ce8:	00083ebc 	.word	0x00083ebc
   81cec:	f1bc 0f06 	cmp.w	ip, #6
   81cf0:	bf34      	ite	cc
   81cf2:	4663      	movcc	r3, ip
   81cf4:	2306      	movcs	r3, #6
   81cf6:	9408      	str	r4, [sp, #32]
   81cf8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   81cfc:	9305      	str	r3, [sp, #20]
   81cfe:	9403      	str	r4, [sp, #12]
   81d00:	4f16      	ldr	r7, [pc, #88]	; (81d5c <_vfiprintf_r+0xc4c>)
   81d02:	e472      	b.n	815ea <_vfiprintf_r+0x4da>
   81d04:	9c08      	ldr	r4, [sp, #32]
   81d06:	9d09      	ldr	r5, [sp, #36]	; 0x24
   81d08:	6823      	ldr	r3, [r4, #0]
   81d0a:	3404      	adds	r4, #4
   81d0c:	9408      	str	r4, [sp, #32]
   81d0e:	601d      	str	r5, [r3, #0]
   81d10:	f7ff ba31 	b.w	81176 <_vfiprintf_r+0x66>
   81d14:	9814      	ldr	r0, [sp, #80]	; 0x50
   81d16:	4d12      	ldr	r5, [pc, #72]	; (81d60 <_vfiprintf_r+0xc50>)
   81d18:	3001      	adds	r0, #1
   81d1a:	e5fc      	b.n	81916 <_vfiprintf_r+0x806>
   81d1c:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81d20:	f8cd c014 	str.w	ip, [sp, #20]
   81d24:	9507      	str	r5, [sp, #28]
   81d26:	9408      	str	r4, [sp, #32]
   81d28:	4684      	mov	ip, r0
   81d2a:	f7ff bb25 	b.w	81378 <_vfiprintf_r+0x268>
   81d2e:	4608      	mov	r0, r1
   81d30:	e6b1      	b.n	81a96 <_vfiprintf_r+0x986>
   81d32:	46a0      	mov	r8, r4
   81d34:	2500      	movs	r5, #0
   81d36:	f7ff ba5a 	b.w	811ee <_vfiprintf_r+0xde>
   81d3a:	f8dd b020 	ldr.w	fp, [sp, #32]
   81d3e:	f898 3001 	ldrb.w	r3, [r8, #1]
   81d42:	f8db 5000 	ldr.w	r5, [fp]
   81d46:	f10b 0204 	add.w	r2, fp, #4
   81d4a:	2d00      	cmp	r5, #0
   81d4c:	9208      	str	r2, [sp, #32]
   81d4e:	46a0      	mov	r8, r4
   81d50:	f6bf aa4b 	bge.w	811ea <_vfiprintf_r+0xda>
   81d54:	f04f 35ff 	mov.w	r5, #4294967295
   81d58:	f7ff ba47 	b.w	811ea <_vfiprintf_r+0xda>
   81d5c:	00083ea4 	.word	0x00083ea4
   81d60:	00083ebc 	.word	0x00083ebc

00081d64 <__sbprintf>:
   81d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81d68:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   81d6a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   81d6e:	4688      	mov	r8, r1
   81d70:	9719      	str	r7, [sp, #100]	; 0x64
   81d72:	f8d8 701c 	ldr.w	r7, [r8, #28]
   81d76:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   81d7a:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   81d7e:	9707      	str	r7, [sp, #28]
   81d80:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   81d84:	ac1a      	add	r4, sp, #104	; 0x68
   81d86:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81d8a:	f02a 0a02 	bic.w	sl, sl, #2
   81d8e:	2600      	movs	r6, #0
   81d90:	4669      	mov	r1, sp
   81d92:	9400      	str	r4, [sp, #0]
   81d94:	9404      	str	r4, [sp, #16]
   81d96:	9502      	str	r5, [sp, #8]
   81d98:	9505      	str	r5, [sp, #20]
   81d9a:	f8ad a00c 	strh.w	sl, [sp, #12]
   81d9e:	f8ad 900e 	strh.w	r9, [sp, #14]
   81da2:	9709      	str	r7, [sp, #36]	; 0x24
   81da4:	9606      	str	r6, [sp, #24]
   81da6:	4605      	mov	r5, r0
   81da8:	f7ff f9b2 	bl	81110 <_vfiprintf_r>
   81dac:	1e04      	subs	r4, r0, #0
   81dae:	db07      	blt.n	81dc0 <__sbprintf+0x5c>
   81db0:	4628      	mov	r0, r5
   81db2:	4669      	mov	r1, sp
   81db4:	f000 f92a 	bl	8200c <_fflush_r>
   81db8:	42b0      	cmp	r0, r6
   81dba:	bf18      	it	ne
   81dbc:	f04f 34ff 	movne.w	r4, #4294967295
   81dc0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81dc4:	065b      	lsls	r3, r3, #25
   81dc6:	d505      	bpl.n	81dd4 <__sbprintf+0x70>
   81dc8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81dd0:	f8a8 300c 	strh.w	r3, [r8, #12]
   81dd4:	4620      	mov	r0, r4
   81dd6:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   81dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81dde:	bf00      	nop

00081de0 <__swsetup_r>:
   81de0:	4b2f      	ldr	r3, [pc, #188]	; (81ea0 <__swsetup_r+0xc0>)
   81de2:	b570      	push	{r4, r5, r6, lr}
   81de4:	4606      	mov	r6, r0
   81de6:	6818      	ldr	r0, [r3, #0]
   81de8:	460c      	mov	r4, r1
   81dea:	b110      	cbz	r0, 81df2 <__swsetup_r+0x12>
   81dec:	6b82      	ldr	r2, [r0, #56]	; 0x38
   81dee:	2a00      	cmp	r2, #0
   81df0:	d036      	beq.n	81e60 <__swsetup_r+0x80>
   81df2:	89a5      	ldrh	r5, [r4, #12]
   81df4:	b2ab      	uxth	r3, r5
   81df6:	0719      	lsls	r1, r3, #28
   81df8:	d50c      	bpl.n	81e14 <__swsetup_r+0x34>
   81dfa:	6922      	ldr	r2, [r4, #16]
   81dfc:	b1aa      	cbz	r2, 81e2a <__swsetup_r+0x4a>
   81dfe:	f013 0101 	ands.w	r1, r3, #1
   81e02:	d01e      	beq.n	81e42 <__swsetup_r+0x62>
   81e04:	6963      	ldr	r3, [r4, #20]
   81e06:	2100      	movs	r1, #0
   81e08:	425b      	negs	r3, r3
   81e0a:	61a3      	str	r3, [r4, #24]
   81e0c:	60a1      	str	r1, [r4, #8]
   81e0e:	b1f2      	cbz	r2, 81e4e <__swsetup_r+0x6e>
   81e10:	2000      	movs	r0, #0
   81e12:	bd70      	pop	{r4, r5, r6, pc}
   81e14:	06da      	lsls	r2, r3, #27
   81e16:	d53a      	bpl.n	81e8e <__swsetup_r+0xae>
   81e18:	075b      	lsls	r3, r3, #29
   81e1a:	d424      	bmi.n	81e66 <__swsetup_r+0x86>
   81e1c:	6922      	ldr	r2, [r4, #16]
   81e1e:	f045 0308 	orr.w	r3, r5, #8
   81e22:	81a3      	strh	r3, [r4, #12]
   81e24:	b29b      	uxth	r3, r3
   81e26:	2a00      	cmp	r2, #0
   81e28:	d1e9      	bne.n	81dfe <__swsetup_r+0x1e>
   81e2a:	f403 7120 	and.w	r1, r3, #640	; 0x280
   81e2e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   81e32:	d0e4      	beq.n	81dfe <__swsetup_r+0x1e>
   81e34:	4630      	mov	r0, r6
   81e36:	4621      	mov	r1, r4
   81e38:	f000 fcce 	bl	827d8 <__smakebuf_r>
   81e3c:	89a3      	ldrh	r3, [r4, #12]
   81e3e:	6922      	ldr	r2, [r4, #16]
   81e40:	e7dd      	b.n	81dfe <__swsetup_r+0x1e>
   81e42:	0798      	lsls	r0, r3, #30
   81e44:	bf58      	it	pl
   81e46:	6961      	ldrpl	r1, [r4, #20]
   81e48:	60a1      	str	r1, [r4, #8]
   81e4a:	2a00      	cmp	r2, #0
   81e4c:	d1e0      	bne.n	81e10 <__swsetup_r+0x30>
   81e4e:	89a3      	ldrh	r3, [r4, #12]
   81e50:	061a      	lsls	r2, r3, #24
   81e52:	d5dd      	bpl.n	81e10 <__swsetup_r+0x30>
   81e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81e58:	81a3      	strh	r3, [r4, #12]
   81e5a:	f04f 30ff 	mov.w	r0, #4294967295
   81e5e:	bd70      	pop	{r4, r5, r6, pc}
   81e60:	f000 f8f0 	bl	82044 <__sinit>
   81e64:	e7c5      	b.n	81df2 <__swsetup_r+0x12>
   81e66:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81e68:	b149      	cbz	r1, 81e7e <__swsetup_r+0x9e>
   81e6a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81e6e:	4299      	cmp	r1, r3
   81e70:	d003      	beq.n	81e7a <__swsetup_r+0x9a>
   81e72:	4630      	mov	r0, r6
   81e74:	f000 fa2a 	bl	822cc <_free_r>
   81e78:	89a5      	ldrh	r5, [r4, #12]
   81e7a:	2300      	movs	r3, #0
   81e7c:	6323      	str	r3, [r4, #48]	; 0x30
   81e7e:	6922      	ldr	r2, [r4, #16]
   81e80:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   81e84:	2100      	movs	r1, #0
   81e86:	b2ad      	uxth	r5, r5
   81e88:	6022      	str	r2, [r4, #0]
   81e8a:	6061      	str	r1, [r4, #4]
   81e8c:	e7c7      	b.n	81e1e <__swsetup_r+0x3e>
   81e8e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   81e92:	2309      	movs	r3, #9
   81e94:	6033      	str	r3, [r6, #0]
   81e96:	f04f 30ff 	mov.w	r0, #4294967295
   81e9a:	81a5      	strh	r5, [r4, #12]
   81e9c:	bd70      	pop	{r4, r5, r6, pc}
   81e9e:	bf00      	nop
   81ea0:	20070560 	.word	0x20070560

00081ea4 <register_fini>:
   81ea4:	4b02      	ldr	r3, [pc, #8]	; (81eb0 <register_fini+0xc>)
   81ea6:	b113      	cbz	r3, 81eae <register_fini+0xa>
   81ea8:	4802      	ldr	r0, [pc, #8]	; (81eb4 <register_fini+0x10>)
   81eaa:	f000 b805 	b.w	81eb8 <atexit>
   81eae:	4770      	bx	lr
   81eb0:	00000000 	.word	0x00000000
   81eb4:	00082141 	.word	0x00082141

00081eb8 <atexit>:
   81eb8:	4601      	mov	r1, r0
   81eba:	2000      	movs	r0, #0
   81ebc:	4602      	mov	r2, r0
   81ebe:	4603      	mov	r3, r0
   81ec0:	f001 bbca 	b.w	83658 <__register_exitproc>

00081ec4 <__sflush_r>:
   81ec4:	898b      	ldrh	r3, [r1, #12]
   81ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81eca:	b29a      	uxth	r2, r3
   81ecc:	460d      	mov	r5, r1
   81ece:	0711      	lsls	r1, r2, #28
   81ed0:	4680      	mov	r8, r0
   81ed2:	d43c      	bmi.n	81f4e <__sflush_r+0x8a>
   81ed4:	686a      	ldr	r2, [r5, #4]
   81ed6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81eda:	2a00      	cmp	r2, #0
   81edc:	81ab      	strh	r3, [r5, #12]
   81ede:	dd59      	ble.n	81f94 <__sflush_r+0xd0>
   81ee0:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81ee2:	2c00      	cmp	r4, #0
   81ee4:	d04b      	beq.n	81f7e <__sflush_r+0xba>
   81ee6:	b29b      	uxth	r3, r3
   81ee8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   81eec:	2100      	movs	r1, #0
   81eee:	b292      	uxth	r2, r2
   81ef0:	f8d8 6000 	ldr.w	r6, [r8]
   81ef4:	f8c8 1000 	str.w	r1, [r8]
   81ef8:	2a00      	cmp	r2, #0
   81efa:	d04f      	beq.n	81f9c <__sflush_r+0xd8>
   81efc:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81efe:	075f      	lsls	r7, r3, #29
   81f00:	d505      	bpl.n	81f0e <__sflush_r+0x4a>
   81f02:	6869      	ldr	r1, [r5, #4]
   81f04:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   81f06:	1a52      	subs	r2, r2, r1
   81f08:	b10b      	cbz	r3, 81f0e <__sflush_r+0x4a>
   81f0a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81f0c:	1ad2      	subs	r2, r2, r3
   81f0e:	4640      	mov	r0, r8
   81f10:	69e9      	ldr	r1, [r5, #28]
   81f12:	2300      	movs	r3, #0
   81f14:	47a0      	blx	r4
   81f16:	1c44      	adds	r4, r0, #1
   81f18:	d04a      	beq.n	81fb0 <__sflush_r+0xec>
   81f1a:	89ab      	ldrh	r3, [r5, #12]
   81f1c:	692a      	ldr	r2, [r5, #16]
   81f1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81f22:	b29b      	uxth	r3, r3
   81f24:	2100      	movs	r1, #0
   81f26:	602a      	str	r2, [r5, #0]
   81f28:	04da      	lsls	r2, r3, #19
   81f2a:	81ab      	strh	r3, [r5, #12]
   81f2c:	6069      	str	r1, [r5, #4]
   81f2e:	d44c      	bmi.n	81fca <__sflush_r+0x106>
   81f30:	6b29      	ldr	r1, [r5, #48]	; 0x30
   81f32:	f8c8 6000 	str.w	r6, [r8]
   81f36:	b311      	cbz	r1, 81f7e <__sflush_r+0xba>
   81f38:	f105 0340 	add.w	r3, r5, #64	; 0x40
   81f3c:	4299      	cmp	r1, r3
   81f3e:	d002      	beq.n	81f46 <__sflush_r+0x82>
   81f40:	4640      	mov	r0, r8
   81f42:	f000 f9c3 	bl	822cc <_free_r>
   81f46:	2000      	movs	r0, #0
   81f48:	6328      	str	r0, [r5, #48]	; 0x30
   81f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f4e:	692e      	ldr	r6, [r5, #16]
   81f50:	b1ae      	cbz	r6, 81f7e <__sflush_r+0xba>
   81f52:	0791      	lsls	r1, r2, #30
   81f54:	682c      	ldr	r4, [r5, #0]
   81f56:	bf0c      	ite	eq
   81f58:	696b      	ldreq	r3, [r5, #20]
   81f5a:	2300      	movne	r3, #0
   81f5c:	602e      	str	r6, [r5, #0]
   81f5e:	1ba4      	subs	r4, r4, r6
   81f60:	60ab      	str	r3, [r5, #8]
   81f62:	e00a      	b.n	81f7a <__sflush_r+0xb6>
   81f64:	4632      	mov	r2, r6
   81f66:	4623      	mov	r3, r4
   81f68:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   81f6a:	4640      	mov	r0, r8
   81f6c:	69e9      	ldr	r1, [r5, #28]
   81f6e:	47b8      	blx	r7
   81f70:	2800      	cmp	r0, #0
   81f72:	ebc0 0404 	rsb	r4, r0, r4
   81f76:	4406      	add	r6, r0
   81f78:	dd04      	ble.n	81f84 <__sflush_r+0xc0>
   81f7a:	2c00      	cmp	r4, #0
   81f7c:	dcf2      	bgt.n	81f64 <__sflush_r+0xa0>
   81f7e:	2000      	movs	r0, #0
   81f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f84:	89ab      	ldrh	r3, [r5, #12]
   81f86:	f04f 30ff 	mov.w	r0, #4294967295
   81f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f8e:	81ab      	strh	r3, [r5, #12]
   81f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f94:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   81f96:	2a00      	cmp	r2, #0
   81f98:	dca2      	bgt.n	81ee0 <__sflush_r+0x1c>
   81f9a:	e7f0      	b.n	81f7e <__sflush_r+0xba>
   81f9c:	2301      	movs	r3, #1
   81f9e:	4640      	mov	r0, r8
   81fa0:	69e9      	ldr	r1, [r5, #28]
   81fa2:	47a0      	blx	r4
   81fa4:	1c43      	adds	r3, r0, #1
   81fa6:	4602      	mov	r2, r0
   81fa8:	d01e      	beq.n	81fe8 <__sflush_r+0x124>
   81faa:	89ab      	ldrh	r3, [r5, #12]
   81fac:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81fae:	e7a6      	b.n	81efe <__sflush_r+0x3a>
   81fb0:	f8d8 3000 	ldr.w	r3, [r8]
   81fb4:	b95b      	cbnz	r3, 81fce <__sflush_r+0x10a>
   81fb6:	89aa      	ldrh	r2, [r5, #12]
   81fb8:	6929      	ldr	r1, [r5, #16]
   81fba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   81fbe:	b292      	uxth	r2, r2
   81fc0:	606b      	str	r3, [r5, #4]
   81fc2:	04d3      	lsls	r3, r2, #19
   81fc4:	81aa      	strh	r2, [r5, #12]
   81fc6:	6029      	str	r1, [r5, #0]
   81fc8:	d5b2      	bpl.n	81f30 <__sflush_r+0x6c>
   81fca:	6528      	str	r0, [r5, #80]	; 0x50
   81fcc:	e7b0      	b.n	81f30 <__sflush_r+0x6c>
   81fce:	2b1d      	cmp	r3, #29
   81fd0:	d001      	beq.n	81fd6 <__sflush_r+0x112>
   81fd2:	2b16      	cmp	r3, #22
   81fd4:	d113      	bne.n	81ffe <__sflush_r+0x13a>
   81fd6:	89a9      	ldrh	r1, [r5, #12]
   81fd8:	692b      	ldr	r3, [r5, #16]
   81fda:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   81fde:	2200      	movs	r2, #0
   81fe0:	81a9      	strh	r1, [r5, #12]
   81fe2:	602b      	str	r3, [r5, #0]
   81fe4:	606a      	str	r2, [r5, #4]
   81fe6:	e7a3      	b.n	81f30 <__sflush_r+0x6c>
   81fe8:	f8d8 3000 	ldr.w	r3, [r8]
   81fec:	2b00      	cmp	r3, #0
   81fee:	d0dc      	beq.n	81faa <__sflush_r+0xe6>
   81ff0:	2b1d      	cmp	r3, #29
   81ff2:	d001      	beq.n	81ff8 <__sflush_r+0x134>
   81ff4:	2b16      	cmp	r3, #22
   81ff6:	d1c5      	bne.n	81f84 <__sflush_r+0xc0>
   81ff8:	f8c8 6000 	str.w	r6, [r8]
   81ffc:	e7bf      	b.n	81f7e <__sflush_r+0xba>
   81ffe:	89ab      	ldrh	r3, [r5, #12]
   82000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82004:	81ab      	strh	r3, [r5, #12]
   82006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8200a:	bf00      	nop

0008200c <_fflush_r>:
   8200c:	b510      	push	{r4, lr}
   8200e:	4604      	mov	r4, r0
   82010:	b082      	sub	sp, #8
   82012:	b108      	cbz	r0, 82018 <_fflush_r+0xc>
   82014:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82016:	b153      	cbz	r3, 8202e <_fflush_r+0x22>
   82018:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   8201c:	b908      	cbnz	r0, 82022 <_fflush_r+0x16>
   8201e:	b002      	add	sp, #8
   82020:	bd10      	pop	{r4, pc}
   82022:	4620      	mov	r0, r4
   82024:	b002      	add	sp, #8
   82026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8202a:	f7ff bf4b 	b.w	81ec4 <__sflush_r>
   8202e:	9101      	str	r1, [sp, #4]
   82030:	f000 f808 	bl	82044 <__sinit>
   82034:	9901      	ldr	r1, [sp, #4]
   82036:	e7ef      	b.n	82018 <_fflush_r+0xc>

00082038 <_cleanup_r>:
   82038:	4901      	ldr	r1, [pc, #4]	; (82040 <_cleanup_r+0x8>)
   8203a:	f000 bb9f 	b.w	8277c <_fwalk>
   8203e:	bf00      	nop
   82040:	000837a5 	.word	0x000837a5

00082044 <__sinit>:
   82044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82048:	6b84      	ldr	r4, [r0, #56]	; 0x38
   8204a:	b083      	sub	sp, #12
   8204c:	4607      	mov	r7, r0
   8204e:	2c00      	cmp	r4, #0
   82050:	d165      	bne.n	8211e <__sinit+0xda>
   82052:	687d      	ldr	r5, [r7, #4]
   82054:	4833      	ldr	r0, [pc, #204]	; (82124 <__sinit+0xe0>)
   82056:	2304      	movs	r3, #4
   82058:	2103      	movs	r1, #3
   8205a:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   8205e:	63f8      	str	r0, [r7, #60]	; 0x3c
   82060:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82064:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82068:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   8206c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82070:	81ab      	strh	r3, [r5, #12]
   82072:	602c      	str	r4, [r5, #0]
   82074:	606c      	str	r4, [r5, #4]
   82076:	60ac      	str	r4, [r5, #8]
   82078:	666c      	str	r4, [r5, #100]	; 0x64
   8207a:	81ec      	strh	r4, [r5, #14]
   8207c:	612c      	str	r4, [r5, #16]
   8207e:	616c      	str	r4, [r5, #20]
   82080:	61ac      	str	r4, [r5, #24]
   82082:	4621      	mov	r1, r4
   82084:	2208      	movs	r2, #8
   82086:	f7fe ff35 	bl	80ef4 <memset>
   8208a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82128 <__sinit+0xe4>
   8208e:	68be      	ldr	r6, [r7, #8]
   82090:	f8df a098 	ldr.w	sl, [pc, #152]	; 8212c <__sinit+0xe8>
   82094:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82130 <__sinit+0xec>
   82098:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82134 <__sinit+0xf0>
   8209c:	2301      	movs	r3, #1
   8209e:	2209      	movs	r2, #9
   820a0:	61ed      	str	r5, [r5, #28]
   820a2:	f8c5 b020 	str.w	fp, [r5, #32]
   820a6:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   820aa:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   820ae:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   820b2:	4621      	mov	r1, r4
   820b4:	81f3      	strh	r3, [r6, #14]
   820b6:	81b2      	strh	r2, [r6, #12]
   820b8:	6034      	str	r4, [r6, #0]
   820ba:	6074      	str	r4, [r6, #4]
   820bc:	60b4      	str	r4, [r6, #8]
   820be:	6674      	str	r4, [r6, #100]	; 0x64
   820c0:	6134      	str	r4, [r6, #16]
   820c2:	6174      	str	r4, [r6, #20]
   820c4:	61b4      	str	r4, [r6, #24]
   820c6:	2208      	movs	r2, #8
   820c8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   820cc:	9301      	str	r3, [sp, #4]
   820ce:	f7fe ff11 	bl	80ef4 <memset>
   820d2:	68fd      	ldr	r5, [r7, #12]
   820d4:	2012      	movs	r0, #18
   820d6:	2202      	movs	r2, #2
   820d8:	61f6      	str	r6, [r6, #28]
   820da:	f8c6 b020 	str.w	fp, [r6, #32]
   820de:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   820e2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   820e6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   820ea:	4621      	mov	r1, r4
   820ec:	81a8      	strh	r0, [r5, #12]
   820ee:	81ea      	strh	r2, [r5, #14]
   820f0:	602c      	str	r4, [r5, #0]
   820f2:	606c      	str	r4, [r5, #4]
   820f4:	60ac      	str	r4, [r5, #8]
   820f6:	666c      	str	r4, [r5, #100]	; 0x64
   820f8:	612c      	str	r4, [r5, #16]
   820fa:	616c      	str	r4, [r5, #20]
   820fc:	61ac      	str	r4, [r5, #24]
   820fe:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82102:	2208      	movs	r2, #8
   82104:	f7fe fef6 	bl	80ef4 <memset>
   82108:	9b01      	ldr	r3, [sp, #4]
   8210a:	61ed      	str	r5, [r5, #28]
   8210c:	f8c5 b020 	str.w	fp, [r5, #32]
   82110:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82114:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82118:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8211c:	63bb      	str	r3, [r7, #56]	; 0x38
   8211e:	b003      	add	sp, #12
   82120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82124:	00082039 	.word	0x00082039
   82128:	00083439 	.word	0x00083439
   8212c:	0008345d 	.word	0x0008345d
   82130:	00083495 	.word	0x00083495
   82134:	000834b5 	.word	0x000834b5

00082138 <__sfp_lock_acquire>:
   82138:	4770      	bx	lr
   8213a:	bf00      	nop

0008213c <__sfp_lock_release>:
   8213c:	4770      	bx	lr
   8213e:	bf00      	nop

00082140 <__libc_fini_array>:
   82140:	b538      	push	{r3, r4, r5, lr}
   82142:	4d09      	ldr	r5, [pc, #36]	; (82168 <__libc_fini_array+0x28>)
   82144:	4c09      	ldr	r4, [pc, #36]	; (8216c <__libc_fini_array+0x2c>)
   82146:	1b64      	subs	r4, r4, r5
   82148:	10a4      	asrs	r4, r4, #2
   8214a:	bf18      	it	ne
   8214c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82150:	d005      	beq.n	8215e <__libc_fini_array+0x1e>
   82152:	3c01      	subs	r4, #1
   82154:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82158:	4798      	blx	r3
   8215a:	2c00      	cmp	r4, #0
   8215c:	d1f9      	bne.n	82152 <__libc_fini_array+0x12>
   8215e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82162:	f001 bebd 	b.w	83ee0 <_fini>
   82166:	bf00      	nop
   82168:	00083eec 	.word	0x00083eec
   8216c:	00083ef0 	.word	0x00083ef0

00082170 <_fputwc_r>:
   82170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82174:	8993      	ldrh	r3, [r2, #12]
   82176:	460f      	mov	r7, r1
   82178:	0499      	lsls	r1, r3, #18
   8217a:	b082      	sub	sp, #8
   8217c:	4614      	mov	r4, r2
   8217e:	4680      	mov	r8, r0
   82180:	d406      	bmi.n	82190 <_fputwc_r+0x20>
   82182:	6e52      	ldr	r2, [r2, #100]	; 0x64
   82184:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8218c:	81a3      	strh	r3, [r4, #12]
   8218e:	6662      	str	r2, [r4, #100]	; 0x64
   82190:	f000 fb1c 	bl	827cc <__locale_mb_cur_max>
   82194:	2801      	cmp	r0, #1
   82196:	d03e      	beq.n	82216 <_fputwc_r+0xa6>
   82198:	463a      	mov	r2, r7
   8219a:	4640      	mov	r0, r8
   8219c:	a901      	add	r1, sp, #4
   8219e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   821a2:	f001 fa0f 	bl	835c4 <_wcrtomb_r>
   821a6:	1c42      	adds	r2, r0, #1
   821a8:	4606      	mov	r6, r0
   821aa:	d02d      	beq.n	82208 <_fputwc_r+0x98>
   821ac:	2800      	cmp	r0, #0
   821ae:	d03a      	beq.n	82226 <_fputwc_r+0xb6>
   821b0:	f89d 1004 	ldrb.w	r1, [sp, #4]
   821b4:	2500      	movs	r5, #0
   821b6:	e009      	b.n	821cc <_fputwc_r+0x5c>
   821b8:	6823      	ldr	r3, [r4, #0]
   821ba:	7019      	strb	r1, [r3, #0]
   821bc:	6823      	ldr	r3, [r4, #0]
   821be:	3301      	adds	r3, #1
   821c0:	6023      	str	r3, [r4, #0]
   821c2:	3501      	adds	r5, #1
   821c4:	42b5      	cmp	r5, r6
   821c6:	d22e      	bcs.n	82226 <_fputwc_r+0xb6>
   821c8:	ab01      	add	r3, sp, #4
   821ca:	5ce9      	ldrb	r1, [r5, r3]
   821cc:	68a3      	ldr	r3, [r4, #8]
   821ce:	3b01      	subs	r3, #1
   821d0:	2b00      	cmp	r3, #0
   821d2:	60a3      	str	r3, [r4, #8]
   821d4:	daf0      	bge.n	821b8 <_fputwc_r+0x48>
   821d6:	69a2      	ldr	r2, [r4, #24]
   821d8:	4293      	cmp	r3, r2
   821da:	db06      	blt.n	821ea <_fputwc_r+0x7a>
   821dc:	6823      	ldr	r3, [r4, #0]
   821de:	7019      	strb	r1, [r3, #0]
   821e0:	6823      	ldr	r3, [r4, #0]
   821e2:	7819      	ldrb	r1, [r3, #0]
   821e4:	3301      	adds	r3, #1
   821e6:	290a      	cmp	r1, #10
   821e8:	d1ea      	bne.n	821c0 <_fputwc_r+0x50>
   821ea:	4640      	mov	r0, r8
   821ec:	4622      	mov	r2, r4
   821ee:	f001 f995 	bl	8351c <__swbuf_r>
   821f2:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   821f6:	4258      	negs	r0, r3
   821f8:	4158      	adcs	r0, r3
   821fa:	2800      	cmp	r0, #0
   821fc:	d0e1      	beq.n	821c2 <_fputwc_r+0x52>
   821fe:	f04f 30ff 	mov.w	r0, #4294967295
   82202:	b002      	add	sp, #8
   82204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82208:	89a3      	ldrh	r3, [r4, #12]
   8220a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8220e:	81a3      	strh	r3, [r4, #12]
   82210:	b002      	add	sp, #8
   82212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82216:	1e7b      	subs	r3, r7, #1
   82218:	2bfe      	cmp	r3, #254	; 0xfe
   8221a:	d8bd      	bhi.n	82198 <_fputwc_r+0x28>
   8221c:	b2f9      	uxtb	r1, r7
   8221e:	4606      	mov	r6, r0
   82220:	f88d 1004 	strb.w	r1, [sp, #4]
   82224:	e7c6      	b.n	821b4 <_fputwc_r+0x44>
   82226:	4638      	mov	r0, r7
   82228:	b002      	add	sp, #8
   8222a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8222e:	bf00      	nop

00082230 <_malloc_trim_r>:
   82230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82232:	4d23      	ldr	r5, [pc, #140]	; (822c0 <_malloc_trim_r+0x90>)
   82234:	460f      	mov	r7, r1
   82236:	4604      	mov	r4, r0
   82238:	f000 ff08 	bl	8304c <__malloc_lock>
   8223c:	68ab      	ldr	r3, [r5, #8]
   8223e:	685e      	ldr	r6, [r3, #4]
   82240:	f026 0603 	bic.w	r6, r6, #3
   82244:	1bf1      	subs	r1, r6, r7
   82246:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   8224a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8224e:	f021 010f 	bic.w	r1, r1, #15
   82252:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   82256:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   8225a:	db07      	blt.n	8226c <_malloc_trim_r+0x3c>
   8225c:	4620      	mov	r0, r4
   8225e:	2100      	movs	r1, #0
   82260:	f001 f8d8 	bl	83414 <_sbrk_r>
   82264:	68ab      	ldr	r3, [r5, #8]
   82266:	4433      	add	r3, r6
   82268:	4298      	cmp	r0, r3
   8226a:	d004      	beq.n	82276 <_malloc_trim_r+0x46>
   8226c:	4620      	mov	r0, r4
   8226e:	f000 feef 	bl	83050 <__malloc_unlock>
   82272:	2000      	movs	r0, #0
   82274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82276:	4620      	mov	r0, r4
   82278:	4279      	negs	r1, r7
   8227a:	f001 f8cb 	bl	83414 <_sbrk_r>
   8227e:	3001      	adds	r0, #1
   82280:	d00d      	beq.n	8229e <_malloc_trim_r+0x6e>
   82282:	4b10      	ldr	r3, [pc, #64]	; (822c4 <_malloc_trim_r+0x94>)
   82284:	68aa      	ldr	r2, [r5, #8]
   82286:	6819      	ldr	r1, [r3, #0]
   82288:	1bf6      	subs	r6, r6, r7
   8228a:	f046 0601 	orr.w	r6, r6, #1
   8228e:	4620      	mov	r0, r4
   82290:	1bc9      	subs	r1, r1, r7
   82292:	6056      	str	r6, [r2, #4]
   82294:	6019      	str	r1, [r3, #0]
   82296:	f000 fedb 	bl	83050 <__malloc_unlock>
   8229a:	2001      	movs	r0, #1
   8229c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8229e:	4620      	mov	r0, r4
   822a0:	2100      	movs	r1, #0
   822a2:	f001 f8b7 	bl	83414 <_sbrk_r>
   822a6:	68ab      	ldr	r3, [r5, #8]
   822a8:	1ac2      	subs	r2, r0, r3
   822aa:	2a0f      	cmp	r2, #15
   822ac:	ddde      	ble.n	8226c <_malloc_trim_r+0x3c>
   822ae:	4d06      	ldr	r5, [pc, #24]	; (822c8 <_malloc_trim_r+0x98>)
   822b0:	4904      	ldr	r1, [pc, #16]	; (822c4 <_malloc_trim_r+0x94>)
   822b2:	682d      	ldr	r5, [r5, #0]
   822b4:	f042 0201 	orr.w	r2, r2, #1
   822b8:	1b40      	subs	r0, r0, r5
   822ba:	605a      	str	r2, [r3, #4]
   822bc:	6008      	str	r0, [r1, #0]
   822be:	e7d5      	b.n	8226c <_malloc_trim_r+0x3c>
   822c0:	20070588 	.word	0x20070588
   822c4:	20070ad8 	.word	0x20070ad8
   822c8:	20070994 	.word	0x20070994

000822cc <_free_r>:
   822cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   822d0:	460d      	mov	r5, r1
   822d2:	4606      	mov	r6, r0
   822d4:	2900      	cmp	r1, #0
   822d6:	d055      	beq.n	82384 <_free_r+0xb8>
   822d8:	f000 feb8 	bl	8304c <__malloc_lock>
   822dc:	f855 1c04 	ldr.w	r1, [r5, #-4]
   822e0:	f8df c170 	ldr.w	ip, [pc, #368]	; 82454 <_free_r+0x188>
   822e4:	f1a5 0408 	sub.w	r4, r5, #8
   822e8:	f021 0301 	bic.w	r3, r1, #1
   822ec:	18e2      	adds	r2, r4, r3
   822ee:	f8dc 0008 	ldr.w	r0, [ip, #8]
   822f2:	6857      	ldr	r7, [r2, #4]
   822f4:	4290      	cmp	r0, r2
   822f6:	f027 0703 	bic.w	r7, r7, #3
   822fa:	d068      	beq.n	823ce <_free_r+0x102>
   822fc:	f011 0101 	ands.w	r1, r1, #1
   82300:	6057      	str	r7, [r2, #4]
   82302:	d032      	beq.n	8236a <_free_r+0x9e>
   82304:	2100      	movs	r1, #0
   82306:	19d0      	adds	r0, r2, r7
   82308:	6840      	ldr	r0, [r0, #4]
   8230a:	07c0      	lsls	r0, r0, #31
   8230c:	d406      	bmi.n	8231c <_free_r+0x50>
   8230e:	443b      	add	r3, r7
   82310:	6890      	ldr	r0, [r2, #8]
   82312:	2900      	cmp	r1, #0
   82314:	d04d      	beq.n	823b2 <_free_r+0xe6>
   82316:	68d2      	ldr	r2, [r2, #12]
   82318:	60c2      	str	r2, [r0, #12]
   8231a:	6090      	str	r0, [r2, #8]
   8231c:	f043 0201 	orr.w	r2, r3, #1
   82320:	6062      	str	r2, [r4, #4]
   82322:	50e3      	str	r3, [r4, r3]
   82324:	b9e1      	cbnz	r1, 82360 <_free_r+0x94>
   82326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8232a:	d32d      	bcc.n	82388 <_free_r+0xbc>
   8232c:	0a5a      	lsrs	r2, r3, #9
   8232e:	2a04      	cmp	r2, #4
   82330:	d869      	bhi.n	82406 <_free_r+0x13a>
   82332:	0998      	lsrs	r0, r3, #6
   82334:	3038      	adds	r0, #56	; 0x38
   82336:	0041      	lsls	r1, r0, #1
   82338:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   8233c:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82340:	4944      	ldr	r1, [pc, #272]	; (82454 <_free_r+0x188>)
   82342:	4562      	cmp	r2, ip
   82344:	d065      	beq.n	82412 <_free_r+0x146>
   82346:	6851      	ldr	r1, [r2, #4]
   82348:	f021 0103 	bic.w	r1, r1, #3
   8234c:	428b      	cmp	r3, r1
   8234e:	d202      	bcs.n	82356 <_free_r+0x8a>
   82350:	6892      	ldr	r2, [r2, #8]
   82352:	4594      	cmp	ip, r2
   82354:	d1f7      	bne.n	82346 <_free_r+0x7a>
   82356:	68d3      	ldr	r3, [r2, #12]
   82358:	60e3      	str	r3, [r4, #12]
   8235a:	60a2      	str	r2, [r4, #8]
   8235c:	609c      	str	r4, [r3, #8]
   8235e:	60d4      	str	r4, [r2, #12]
   82360:	4630      	mov	r0, r6
   82362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82366:	f000 be73 	b.w	83050 <__malloc_unlock>
   8236a:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8236e:	f10c 0808 	add.w	r8, ip, #8
   82372:	1b64      	subs	r4, r4, r5
   82374:	68a0      	ldr	r0, [r4, #8]
   82376:	442b      	add	r3, r5
   82378:	4540      	cmp	r0, r8
   8237a:	d042      	beq.n	82402 <_free_r+0x136>
   8237c:	68e5      	ldr	r5, [r4, #12]
   8237e:	60c5      	str	r5, [r0, #12]
   82380:	60a8      	str	r0, [r5, #8]
   82382:	e7c0      	b.n	82306 <_free_r+0x3a>
   82384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82388:	08db      	lsrs	r3, r3, #3
   8238a:	109a      	asrs	r2, r3, #2
   8238c:	2001      	movs	r0, #1
   8238e:	4090      	lsls	r0, r2
   82390:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82394:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82398:	689a      	ldr	r2, [r3, #8]
   8239a:	4301      	orrs	r1, r0
   8239c:	60a2      	str	r2, [r4, #8]
   8239e:	60e3      	str	r3, [r4, #12]
   823a0:	f8cc 1004 	str.w	r1, [ip, #4]
   823a4:	4630      	mov	r0, r6
   823a6:	609c      	str	r4, [r3, #8]
   823a8:	60d4      	str	r4, [r2, #12]
   823aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   823ae:	f000 be4f 	b.w	83050 <__malloc_unlock>
   823b2:	4d29      	ldr	r5, [pc, #164]	; (82458 <_free_r+0x18c>)
   823b4:	42a8      	cmp	r0, r5
   823b6:	d1ae      	bne.n	82316 <_free_r+0x4a>
   823b8:	f043 0201 	orr.w	r2, r3, #1
   823bc:	f8cc 4014 	str.w	r4, [ip, #20]
   823c0:	f8cc 4010 	str.w	r4, [ip, #16]
   823c4:	60e0      	str	r0, [r4, #12]
   823c6:	60a0      	str	r0, [r4, #8]
   823c8:	6062      	str	r2, [r4, #4]
   823ca:	50e3      	str	r3, [r4, r3]
   823cc:	e7c8      	b.n	82360 <_free_r+0x94>
   823ce:	441f      	add	r7, r3
   823d0:	07cb      	lsls	r3, r1, #31
   823d2:	d407      	bmi.n	823e4 <_free_r+0x118>
   823d4:	f855 1c08 	ldr.w	r1, [r5, #-8]
   823d8:	1a64      	subs	r4, r4, r1
   823da:	68e3      	ldr	r3, [r4, #12]
   823dc:	68a2      	ldr	r2, [r4, #8]
   823de:	440f      	add	r7, r1
   823e0:	60d3      	str	r3, [r2, #12]
   823e2:	609a      	str	r2, [r3, #8]
   823e4:	4b1d      	ldr	r3, [pc, #116]	; (8245c <_free_r+0x190>)
   823e6:	f047 0201 	orr.w	r2, r7, #1
   823ea:	681b      	ldr	r3, [r3, #0]
   823ec:	6062      	str	r2, [r4, #4]
   823ee:	429f      	cmp	r7, r3
   823f0:	f8cc 4008 	str.w	r4, [ip, #8]
   823f4:	d3b4      	bcc.n	82360 <_free_r+0x94>
   823f6:	4b1a      	ldr	r3, [pc, #104]	; (82460 <_free_r+0x194>)
   823f8:	4630      	mov	r0, r6
   823fa:	6819      	ldr	r1, [r3, #0]
   823fc:	f7ff ff18 	bl	82230 <_malloc_trim_r>
   82400:	e7ae      	b.n	82360 <_free_r+0x94>
   82402:	2101      	movs	r1, #1
   82404:	e77f      	b.n	82306 <_free_r+0x3a>
   82406:	2a14      	cmp	r2, #20
   82408:	d80b      	bhi.n	82422 <_free_r+0x156>
   8240a:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   8240e:	0041      	lsls	r1, r0, #1
   82410:	e792      	b.n	82338 <_free_r+0x6c>
   82412:	1080      	asrs	r0, r0, #2
   82414:	2501      	movs	r5, #1
   82416:	4085      	lsls	r5, r0
   82418:	6848      	ldr	r0, [r1, #4]
   8241a:	4613      	mov	r3, r2
   8241c:	4328      	orrs	r0, r5
   8241e:	6048      	str	r0, [r1, #4]
   82420:	e79a      	b.n	82358 <_free_r+0x8c>
   82422:	2a54      	cmp	r2, #84	; 0x54
   82424:	d803      	bhi.n	8242e <_free_r+0x162>
   82426:	0b18      	lsrs	r0, r3, #12
   82428:	306e      	adds	r0, #110	; 0x6e
   8242a:	0041      	lsls	r1, r0, #1
   8242c:	e784      	b.n	82338 <_free_r+0x6c>
   8242e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82432:	d803      	bhi.n	8243c <_free_r+0x170>
   82434:	0bd8      	lsrs	r0, r3, #15
   82436:	3077      	adds	r0, #119	; 0x77
   82438:	0041      	lsls	r1, r0, #1
   8243a:	e77d      	b.n	82338 <_free_r+0x6c>
   8243c:	f240 5154 	movw	r1, #1364	; 0x554
   82440:	428a      	cmp	r2, r1
   82442:	d803      	bhi.n	8244c <_free_r+0x180>
   82444:	0c98      	lsrs	r0, r3, #18
   82446:	307c      	adds	r0, #124	; 0x7c
   82448:	0041      	lsls	r1, r0, #1
   8244a:	e775      	b.n	82338 <_free_r+0x6c>
   8244c:	21fc      	movs	r1, #252	; 0xfc
   8244e:	207e      	movs	r0, #126	; 0x7e
   82450:	e772      	b.n	82338 <_free_r+0x6c>
   82452:	bf00      	nop
   82454:	20070588 	.word	0x20070588
   82458:	20070590 	.word	0x20070590
   8245c:	20070990 	.word	0x20070990
   82460:	20070ad4 	.word	0x20070ad4

00082464 <__sfvwrite_r>:
   82464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82468:	6893      	ldr	r3, [r2, #8]
   8246a:	b083      	sub	sp, #12
   8246c:	4616      	mov	r6, r2
   8246e:	4681      	mov	r9, r0
   82470:	460c      	mov	r4, r1
   82472:	b32b      	cbz	r3, 824c0 <__sfvwrite_r+0x5c>
   82474:	898b      	ldrh	r3, [r1, #12]
   82476:	0719      	lsls	r1, r3, #28
   82478:	d526      	bpl.n	824c8 <__sfvwrite_r+0x64>
   8247a:	6922      	ldr	r2, [r4, #16]
   8247c:	b322      	cbz	r2, 824c8 <__sfvwrite_r+0x64>
   8247e:	f003 0202 	and.w	r2, r3, #2
   82482:	b292      	uxth	r2, r2
   82484:	6835      	ldr	r5, [r6, #0]
   82486:	2a00      	cmp	r2, #0
   82488:	d02c      	beq.n	824e4 <__sfvwrite_r+0x80>
   8248a:	f04f 0a00 	mov.w	sl, #0
   8248e:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 82778 <__sfvwrite_r+0x314>
   82492:	46d0      	mov	r8, sl
   82494:	45d8      	cmp	r8, fp
   82496:	bf34      	ite	cc
   82498:	4643      	movcc	r3, r8
   8249a:	465b      	movcs	r3, fp
   8249c:	4652      	mov	r2, sl
   8249e:	4648      	mov	r0, r9
   824a0:	f1b8 0f00 	cmp.w	r8, #0
   824a4:	d04f      	beq.n	82546 <__sfvwrite_r+0xe2>
   824a6:	69e1      	ldr	r1, [r4, #28]
   824a8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   824aa:	47b8      	blx	r7
   824ac:	2800      	cmp	r0, #0
   824ae:	dd56      	ble.n	8255e <__sfvwrite_r+0xfa>
   824b0:	68b3      	ldr	r3, [r6, #8]
   824b2:	4482      	add	sl, r0
   824b4:	1a1b      	subs	r3, r3, r0
   824b6:	ebc0 0808 	rsb	r8, r0, r8
   824ba:	60b3      	str	r3, [r6, #8]
   824bc:	2b00      	cmp	r3, #0
   824be:	d1e9      	bne.n	82494 <__sfvwrite_r+0x30>
   824c0:	2000      	movs	r0, #0
   824c2:	b003      	add	sp, #12
   824c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   824c8:	4648      	mov	r0, r9
   824ca:	4621      	mov	r1, r4
   824cc:	f7ff fc88 	bl	81de0 <__swsetup_r>
   824d0:	2800      	cmp	r0, #0
   824d2:	f040 8148 	bne.w	82766 <__sfvwrite_r+0x302>
   824d6:	89a3      	ldrh	r3, [r4, #12]
   824d8:	6835      	ldr	r5, [r6, #0]
   824da:	f003 0202 	and.w	r2, r3, #2
   824de:	b292      	uxth	r2, r2
   824e0:	2a00      	cmp	r2, #0
   824e2:	d1d2      	bne.n	8248a <__sfvwrite_r+0x26>
   824e4:	f013 0a01 	ands.w	sl, r3, #1
   824e8:	d142      	bne.n	82570 <__sfvwrite_r+0x10c>
   824ea:	46d0      	mov	r8, sl
   824ec:	f1b8 0f00 	cmp.w	r8, #0
   824f0:	d023      	beq.n	8253a <__sfvwrite_r+0xd6>
   824f2:	059a      	lsls	r2, r3, #22
   824f4:	68a7      	ldr	r7, [r4, #8]
   824f6:	d576      	bpl.n	825e6 <__sfvwrite_r+0x182>
   824f8:	45b8      	cmp	r8, r7
   824fa:	f0c0 80a4 	bcc.w	82646 <__sfvwrite_r+0x1e2>
   824fe:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82502:	f040 80b2 	bne.w	8266a <__sfvwrite_r+0x206>
   82506:	6820      	ldr	r0, [r4, #0]
   82508:	46bb      	mov	fp, r7
   8250a:	4651      	mov	r1, sl
   8250c:	465a      	mov	r2, fp
   8250e:	f000 fd37 	bl	82f80 <memmove>
   82512:	68a2      	ldr	r2, [r4, #8]
   82514:	6821      	ldr	r1, [r4, #0]
   82516:	1bd2      	subs	r2, r2, r7
   82518:	eb01 030b 	add.w	r3, r1, fp
   8251c:	60a2      	str	r2, [r4, #8]
   8251e:	6023      	str	r3, [r4, #0]
   82520:	4642      	mov	r2, r8
   82522:	68b3      	ldr	r3, [r6, #8]
   82524:	4492      	add	sl, r2
   82526:	1a9b      	subs	r3, r3, r2
   82528:	ebc2 0808 	rsb	r8, r2, r8
   8252c:	60b3      	str	r3, [r6, #8]
   8252e:	2b00      	cmp	r3, #0
   82530:	d0c6      	beq.n	824c0 <__sfvwrite_r+0x5c>
   82532:	89a3      	ldrh	r3, [r4, #12]
   82534:	f1b8 0f00 	cmp.w	r8, #0
   82538:	d1db      	bne.n	824f2 <__sfvwrite_r+0x8e>
   8253a:	f8d5 a000 	ldr.w	sl, [r5]
   8253e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82542:	3508      	adds	r5, #8
   82544:	e7d2      	b.n	824ec <__sfvwrite_r+0x88>
   82546:	f8d5 a000 	ldr.w	sl, [r5]
   8254a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8254e:	3508      	adds	r5, #8
   82550:	e7a0      	b.n	82494 <__sfvwrite_r+0x30>
   82552:	4648      	mov	r0, r9
   82554:	4621      	mov	r1, r4
   82556:	f7ff fd59 	bl	8200c <_fflush_r>
   8255a:	2800      	cmp	r0, #0
   8255c:	d059      	beq.n	82612 <__sfvwrite_r+0x1ae>
   8255e:	89a3      	ldrh	r3, [r4, #12]
   82560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82564:	f04f 30ff 	mov.w	r0, #4294967295
   82568:	81a3      	strh	r3, [r4, #12]
   8256a:	b003      	add	sp, #12
   8256c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82570:	4692      	mov	sl, r2
   82572:	9201      	str	r2, [sp, #4]
   82574:	4693      	mov	fp, r2
   82576:	4690      	mov	r8, r2
   82578:	f1b8 0f00 	cmp.w	r8, #0
   8257c:	d02b      	beq.n	825d6 <__sfvwrite_r+0x172>
   8257e:	9f01      	ldr	r7, [sp, #4]
   82580:	2f00      	cmp	r7, #0
   82582:	d064      	beq.n	8264e <__sfvwrite_r+0x1ea>
   82584:	6820      	ldr	r0, [r4, #0]
   82586:	6921      	ldr	r1, [r4, #16]
   82588:	45c2      	cmp	sl, r8
   8258a:	bf34      	ite	cc
   8258c:	4653      	movcc	r3, sl
   8258e:	4643      	movcs	r3, r8
   82590:	4288      	cmp	r0, r1
   82592:	461f      	mov	r7, r3
   82594:	f8d4 c008 	ldr.w	ip, [r4, #8]
   82598:	6962      	ldr	r2, [r4, #20]
   8259a:	d903      	bls.n	825a4 <__sfvwrite_r+0x140>
   8259c:	4494      	add	ip, r2
   8259e:	4563      	cmp	r3, ip
   825a0:	f300 80ae 	bgt.w	82700 <__sfvwrite_r+0x29c>
   825a4:	4293      	cmp	r3, r2
   825a6:	db36      	blt.n	82616 <__sfvwrite_r+0x1b2>
   825a8:	4613      	mov	r3, r2
   825aa:	6a67      	ldr	r7, [r4, #36]	; 0x24
   825ac:	4648      	mov	r0, r9
   825ae:	69e1      	ldr	r1, [r4, #28]
   825b0:	465a      	mov	r2, fp
   825b2:	47b8      	blx	r7
   825b4:	1e07      	subs	r7, r0, #0
   825b6:	ddd2      	ble.n	8255e <__sfvwrite_r+0xfa>
   825b8:	ebba 0a07 	subs.w	sl, sl, r7
   825bc:	d03a      	beq.n	82634 <__sfvwrite_r+0x1d0>
   825be:	68b3      	ldr	r3, [r6, #8]
   825c0:	44bb      	add	fp, r7
   825c2:	1bdb      	subs	r3, r3, r7
   825c4:	ebc7 0808 	rsb	r8, r7, r8
   825c8:	60b3      	str	r3, [r6, #8]
   825ca:	2b00      	cmp	r3, #0
   825cc:	f43f af78 	beq.w	824c0 <__sfvwrite_r+0x5c>
   825d0:	f1b8 0f00 	cmp.w	r8, #0
   825d4:	d1d3      	bne.n	8257e <__sfvwrite_r+0x11a>
   825d6:	2700      	movs	r7, #0
   825d8:	f8d5 b000 	ldr.w	fp, [r5]
   825dc:	f8d5 8004 	ldr.w	r8, [r5, #4]
   825e0:	9701      	str	r7, [sp, #4]
   825e2:	3508      	adds	r5, #8
   825e4:	e7c8      	b.n	82578 <__sfvwrite_r+0x114>
   825e6:	6820      	ldr	r0, [r4, #0]
   825e8:	6923      	ldr	r3, [r4, #16]
   825ea:	4298      	cmp	r0, r3
   825ec:	d802      	bhi.n	825f4 <__sfvwrite_r+0x190>
   825ee:	6963      	ldr	r3, [r4, #20]
   825f0:	4598      	cmp	r8, r3
   825f2:	d272      	bcs.n	826da <__sfvwrite_r+0x276>
   825f4:	45b8      	cmp	r8, r7
   825f6:	bf38      	it	cc
   825f8:	4647      	movcc	r7, r8
   825fa:	463a      	mov	r2, r7
   825fc:	4651      	mov	r1, sl
   825fe:	f000 fcbf 	bl	82f80 <memmove>
   82602:	68a3      	ldr	r3, [r4, #8]
   82604:	6822      	ldr	r2, [r4, #0]
   82606:	1bdb      	subs	r3, r3, r7
   82608:	443a      	add	r2, r7
   8260a:	60a3      	str	r3, [r4, #8]
   8260c:	6022      	str	r2, [r4, #0]
   8260e:	2b00      	cmp	r3, #0
   82610:	d09f      	beq.n	82552 <__sfvwrite_r+0xee>
   82612:	463a      	mov	r2, r7
   82614:	e785      	b.n	82522 <__sfvwrite_r+0xbe>
   82616:	461a      	mov	r2, r3
   82618:	4659      	mov	r1, fp
   8261a:	9300      	str	r3, [sp, #0]
   8261c:	f000 fcb0 	bl	82f80 <memmove>
   82620:	9b00      	ldr	r3, [sp, #0]
   82622:	68a1      	ldr	r1, [r4, #8]
   82624:	6822      	ldr	r2, [r4, #0]
   82626:	1ac9      	subs	r1, r1, r3
   82628:	ebba 0a07 	subs.w	sl, sl, r7
   8262c:	4413      	add	r3, r2
   8262e:	60a1      	str	r1, [r4, #8]
   82630:	6023      	str	r3, [r4, #0]
   82632:	d1c4      	bne.n	825be <__sfvwrite_r+0x15a>
   82634:	4648      	mov	r0, r9
   82636:	4621      	mov	r1, r4
   82638:	f7ff fce8 	bl	8200c <_fflush_r>
   8263c:	2800      	cmp	r0, #0
   8263e:	d18e      	bne.n	8255e <__sfvwrite_r+0xfa>
   82640:	f8cd a004 	str.w	sl, [sp, #4]
   82644:	e7bb      	b.n	825be <__sfvwrite_r+0x15a>
   82646:	6820      	ldr	r0, [r4, #0]
   82648:	4647      	mov	r7, r8
   8264a:	46c3      	mov	fp, r8
   8264c:	e75d      	b.n	8250a <__sfvwrite_r+0xa6>
   8264e:	4658      	mov	r0, fp
   82650:	210a      	movs	r1, #10
   82652:	4642      	mov	r2, r8
   82654:	f000 fbd4 	bl	82e00 <memchr>
   82658:	2800      	cmp	r0, #0
   8265a:	d07f      	beq.n	8275c <__sfvwrite_r+0x2f8>
   8265c:	f100 0a01 	add.w	sl, r0, #1
   82660:	2701      	movs	r7, #1
   82662:	ebcb 0a0a 	rsb	sl, fp, sl
   82666:	9701      	str	r7, [sp, #4]
   82668:	e78c      	b.n	82584 <__sfvwrite_r+0x120>
   8266a:	6822      	ldr	r2, [r4, #0]
   8266c:	6921      	ldr	r1, [r4, #16]
   8266e:	6967      	ldr	r7, [r4, #20]
   82670:	ebc1 0c02 	rsb	ip, r1, r2
   82674:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82678:	f10c 0201 	add.w	r2, ip, #1
   8267c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   82680:	4442      	add	r2, r8
   82682:	107f      	asrs	r7, r7, #1
   82684:	4297      	cmp	r7, r2
   82686:	bf34      	ite	cc
   82688:	4617      	movcc	r7, r2
   8268a:	463a      	movcs	r2, r7
   8268c:	055b      	lsls	r3, r3, #21
   8268e:	d54f      	bpl.n	82730 <__sfvwrite_r+0x2cc>
   82690:	4611      	mov	r1, r2
   82692:	4648      	mov	r0, r9
   82694:	f8cd c000 	str.w	ip, [sp]
   82698:	f000 f916 	bl	828c8 <_malloc_r>
   8269c:	f8dd c000 	ldr.w	ip, [sp]
   826a0:	4683      	mov	fp, r0
   826a2:	2800      	cmp	r0, #0
   826a4:	d062      	beq.n	8276c <__sfvwrite_r+0x308>
   826a6:	4662      	mov	r2, ip
   826a8:	6921      	ldr	r1, [r4, #16]
   826aa:	f8cd c000 	str.w	ip, [sp]
   826ae:	f000 fbf1 	bl	82e94 <memcpy>
   826b2:	89a2      	ldrh	r2, [r4, #12]
   826b4:	f8dd c000 	ldr.w	ip, [sp]
   826b8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   826bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   826c0:	81a2      	strh	r2, [r4, #12]
   826c2:	eb0b 000c 	add.w	r0, fp, ip
   826c6:	ebcc 0207 	rsb	r2, ip, r7
   826ca:	f8c4 b010 	str.w	fp, [r4, #16]
   826ce:	6167      	str	r7, [r4, #20]
   826d0:	6020      	str	r0, [r4, #0]
   826d2:	60a2      	str	r2, [r4, #8]
   826d4:	4647      	mov	r7, r8
   826d6:	46c3      	mov	fp, r8
   826d8:	e717      	b.n	8250a <__sfvwrite_r+0xa6>
   826da:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   826de:	4590      	cmp	r8, r2
   826e0:	bf38      	it	cc
   826e2:	4642      	movcc	r2, r8
   826e4:	fb92 f2f3 	sdiv	r2, r2, r3
   826e8:	fb02 f303 	mul.w	r3, r2, r3
   826ec:	6a67      	ldr	r7, [r4, #36]	; 0x24
   826ee:	4648      	mov	r0, r9
   826f0:	69e1      	ldr	r1, [r4, #28]
   826f2:	4652      	mov	r2, sl
   826f4:	47b8      	blx	r7
   826f6:	2800      	cmp	r0, #0
   826f8:	f77f af31 	ble.w	8255e <__sfvwrite_r+0xfa>
   826fc:	4602      	mov	r2, r0
   826fe:	e710      	b.n	82522 <__sfvwrite_r+0xbe>
   82700:	4662      	mov	r2, ip
   82702:	4659      	mov	r1, fp
   82704:	f8cd c000 	str.w	ip, [sp]
   82708:	f000 fc3a 	bl	82f80 <memmove>
   8270c:	f8dd c000 	ldr.w	ip, [sp]
   82710:	6823      	ldr	r3, [r4, #0]
   82712:	4648      	mov	r0, r9
   82714:	4463      	add	r3, ip
   82716:	6023      	str	r3, [r4, #0]
   82718:	4621      	mov	r1, r4
   8271a:	f8cd c000 	str.w	ip, [sp]
   8271e:	f7ff fc75 	bl	8200c <_fflush_r>
   82722:	f8dd c000 	ldr.w	ip, [sp]
   82726:	2800      	cmp	r0, #0
   82728:	f47f af19 	bne.w	8255e <__sfvwrite_r+0xfa>
   8272c:	4667      	mov	r7, ip
   8272e:	e743      	b.n	825b8 <__sfvwrite_r+0x154>
   82730:	4648      	mov	r0, r9
   82732:	f8cd c000 	str.w	ip, [sp]
   82736:	f000 fc8d 	bl	83054 <_realloc_r>
   8273a:	f8dd c000 	ldr.w	ip, [sp]
   8273e:	4683      	mov	fp, r0
   82740:	2800      	cmp	r0, #0
   82742:	d1be      	bne.n	826c2 <__sfvwrite_r+0x25e>
   82744:	4648      	mov	r0, r9
   82746:	6921      	ldr	r1, [r4, #16]
   82748:	f7ff fdc0 	bl	822cc <_free_r>
   8274c:	89a3      	ldrh	r3, [r4, #12]
   8274e:	220c      	movs	r2, #12
   82750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82754:	b29b      	uxth	r3, r3
   82756:	f8c9 2000 	str.w	r2, [r9]
   8275a:	e701      	b.n	82560 <__sfvwrite_r+0xfc>
   8275c:	2701      	movs	r7, #1
   8275e:	f108 0a01 	add.w	sl, r8, #1
   82762:	9701      	str	r7, [sp, #4]
   82764:	e70e      	b.n	82584 <__sfvwrite_r+0x120>
   82766:	f04f 30ff 	mov.w	r0, #4294967295
   8276a:	e6aa      	b.n	824c2 <__sfvwrite_r+0x5e>
   8276c:	230c      	movs	r3, #12
   8276e:	f8c9 3000 	str.w	r3, [r9]
   82772:	89a3      	ldrh	r3, [r4, #12]
   82774:	e6f4      	b.n	82560 <__sfvwrite_r+0xfc>
   82776:	bf00      	nop
   82778:	7ffffc00 	.word	0x7ffffc00

0008277c <_fwalk>:
   8277c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82780:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82784:	4688      	mov	r8, r1
   82786:	d019      	beq.n	827bc <_fwalk+0x40>
   82788:	2600      	movs	r6, #0
   8278a:	687d      	ldr	r5, [r7, #4]
   8278c:	68bc      	ldr	r4, [r7, #8]
   8278e:	3d01      	subs	r5, #1
   82790:	d40e      	bmi.n	827b0 <_fwalk+0x34>
   82792:	89a3      	ldrh	r3, [r4, #12]
   82794:	3d01      	subs	r5, #1
   82796:	2b01      	cmp	r3, #1
   82798:	d906      	bls.n	827a8 <_fwalk+0x2c>
   8279a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8279e:	4620      	mov	r0, r4
   827a0:	3301      	adds	r3, #1
   827a2:	d001      	beq.n	827a8 <_fwalk+0x2c>
   827a4:	47c0      	blx	r8
   827a6:	4306      	orrs	r6, r0
   827a8:	1c6b      	adds	r3, r5, #1
   827aa:	f104 0468 	add.w	r4, r4, #104	; 0x68
   827ae:	d1f0      	bne.n	82792 <_fwalk+0x16>
   827b0:	683f      	ldr	r7, [r7, #0]
   827b2:	2f00      	cmp	r7, #0
   827b4:	d1e9      	bne.n	8278a <_fwalk+0xe>
   827b6:	4630      	mov	r0, r6
   827b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   827bc:	463e      	mov	r6, r7
   827be:	4630      	mov	r0, r6
   827c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000827c4 <__locale_charset>:
   827c4:	4800      	ldr	r0, [pc, #0]	; (827c8 <__locale_charset+0x4>)
   827c6:	4770      	bx	lr
   827c8:	20070564 	.word	0x20070564

000827cc <__locale_mb_cur_max>:
   827cc:	4b01      	ldr	r3, [pc, #4]	; (827d4 <__locale_mb_cur_max+0x8>)
   827ce:	6818      	ldr	r0, [r3, #0]
   827d0:	4770      	bx	lr
   827d2:	bf00      	nop
   827d4:	20070584 	.word	0x20070584

000827d8 <__smakebuf_r>:
   827d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   827da:	898b      	ldrh	r3, [r1, #12]
   827dc:	b091      	sub	sp, #68	; 0x44
   827de:	b29a      	uxth	r2, r3
   827e0:	0796      	lsls	r6, r2, #30
   827e2:	460c      	mov	r4, r1
   827e4:	4605      	mov	r5, r0
   827e6:	d437      	bmi.n	82858 <__smakebuf_r+0x80>
   827e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   827ec:	2900      	cmp	r1, #0
   827ee:	db17      	blt.n	82820 <__smakebuf_r+0x48>
   827f0:	aa01      	add	r2, sp, #4
   827f2:	f000 ffdf 	bl	837b4 <_fstat_r>
   827f6:	2800      	cmp	r0, #0
   827f8:	db10      	blt.n	8281c <__smakebuf_r+0x44>
   827fa:	9b02      	ldr	r3, [sp, #8]
   827fc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   82800:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   82804:	424f      	negs	r7, r1
   82806:	414f      	adcs	r7, r1
   82808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   8280c:	d02c      	beq.n	82868 <__smakebuf_r+0x90>
   8280e:	89a3      	ldrh	r3, [r4, #12]
   82810:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82814:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82818:	81a3      	strh	r3, [r4, #12]
   8281a:	e00b      	b.n	82834 <__smakebuf_r+0x5c>
   8281c:	89a3      	ldrh	r3, [r4, #12]
   8281e:	b29a      	uxth	r2, r3
   82820:	f012 0f80 	tst.w	r2, #128	; 0x80
   82824:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82828:	81a3      	strh	r3, [r4, #12]
   8282a:	bf14      	ite	ne
   8282c:	2640      	movne	r6, #64	; 0x40
   8282e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   82832:	2700      	movs	r7, #0
   82834:	4628      	mov	r0, r5
   82836:	4631      	mov	r1, r6
   82838:	f000 f846 	bl	828c8 <_malloc_r>
   8283c:	89a3      	ldrh	r3, [r4, #12]
   8283e:	2800      	cmp	r0, #0
   82840:	d029      	beq.n	82896 <__smakebuf_r+0xbe>
   82842:	4a1b      	ldr	r2, [pc, #108]	; (828b0 <__smakebuf_r+0xd8>)
   82844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82848:	63ea      	str	r2, [r5, #60]	; 0x3c
   8284a:	81a3      	strh	r3, [r4, #12]
   8284c:	6020      	str	r0, [r4, #0]
   8284e:	6120      	str	r0, [r4, #16]
   82850:	6166      	str	r6, [r4, #20]
   82852:	b9a7      	cbnz	r7, 8287e <__smakebuf_r+0xa6>
   82854:	b011      	add	sp, #68	; 0x44
   82856:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82858:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8285c:	2201      	movs	r2, #1
   8285e:	600b      	str	r3, [r1, #0]
   82860:	610b      	str	r3, [r1, #16]
   82862:	614a      	str	r2, [r1, #20]
   82864:	b011      	add	sp, #68	; 0x44
   82866:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82868:	4a12      	ldr	r2, [pc, #72]	; (828b4 <__smakebuf_r+0xdc>)
   8286a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   8286c:	4293      	cmp	r3, r2
   8286e:	d1ce      	bne.n	8280e <__smakebuf_r+0x36>
   82870:	89a3      	ldrh	r3, [r4, #12]
   82872:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82876:	4333      	orrs	r3, r6
   82878:	81a3      	strh	r3, [r4, #12]
   8287a:	64e6      	str	r6, [r4, #76]	; 0x4c
   8287c:	e7da      	b.n	82834 <__smakebuf_r+0x5c>
   8287e:	4628      	mov	r0, r5
   82880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82884:	f000 ffaa 	bl	837dc <_isatty_r>
   82888:	2800      	cmp	r0, #0
   8288a:	d0e3      	beq.n	82854 <__smakebuf_r+0x7c>
   8288c:	89a3      	ldrh	r3, [r4, #12]
   8288e:	f043 0301 	orr.w	r3, r3, #1
   82892:	81a3      	strh	r3, [r4, #12]
   82894:	e7de      	b.n	82854 <__smakebuf_r+0x7c>
   82896:	059a      	lsls	r2, r3, #22
   82898:	d4dc      	bmi.n	82854 <__smakebuf_r+0x7c>
   8289a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8289e:	f043 0302 	orr.w	r3, r3, #2
   828a2:	2101      	movs	r1, #1
   828a4:	81a3      	strh	r3, [r4, #12]
   828a6:	6022      	str	r2, [r4, #0]
   828a8:	6122      	str	r2, [r4, #16]
   828aa:	6161      	str	r1, [r4, #20]
   828ac:	e7d2      	b.n	82854 <__smakebuf_r+0x7c>
   828ae:	bf00      	nop
   828b0:	00082039 	.word	0x00082039
   828b4:	00083495 	.word	0x00083495

000828b8 <malloc>:
   828b8:	4b02      	ldr	r3, [pc, #8]	; (828c4 <malloc+0xc>)
   828ba:	4601      	mov	r1, r0
   828bc:	6818      	ldr	r0, [r3, #0]
   828be:	f000 b803 	b.w	828c8 <_malloc_r>
   828c2:	bf00      	nop
   828c4:	20070560 	.word	0x20070560

000828c8 <_malloc_r>:
   828c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   828cc:	f101 050b 	add.w	r5, r1, #11
   828d0:	2d16      	cmp	r5, #22
   828d2:	b083      	sub	sp, #12
   828d4:	4606      	mov	r6, r0
   828d6:	d927      	bls.n	82928 <_malloc_r+0x60>
   828d8:	f035 0507 	bics.w	r5, r5, #7
   828dc:	d427      	bmi.n	8292e <_malloc_r+0x66>
   828de:	42a9      	cmp	r1, r5
   828e0:	d825      	bhi.n	8292e <_malloc_r+0x66>
   828e2:	4630      	mov	r0, r6
   828e4:	f000 fbb2 	bl	8304c <__malloc_lock>
   828e8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   828ec:	d226      	bcs.n	8293c <_malloc_r+0x74>
   828ee:	4fc1      	ldr	r7, [pc, #772]	; (82bf4 <_malloc_r+0x32c>)
   828f0:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   828f4:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   828f8:	68dc      	ldr	r4, [r3, #12]
   828fa:	429c      	cmp	r4, r3
   828fc:	f000 81d2 	beq.w	82ca4 <_malloc_r+0x3dc>
   82900:	6863      	ldr	r3, [r4, #4]
   82902:	68e2      	ldr	r2, [r4, #12]
   82904:	f023 0303 	bic.w	r3, r3, #3
   82908:	4423      	add	r3, r4
   8290a:	6858      	ldr	r0, [r3, #4]
   8290c:	68a1      	ldr	r1, [r4, #8]
   8290e:	f040 0501 	orr.w	r5, r0, #1
   82912:	60ca      	str	r2, [r1, #12]
   82914:	4630      	mov	r0, r6
   82916:	6091      	str	r1, [r2, #8]
   82918:	605d      	str	r5, [r3, #4]
   8291a:	f000 fb99 	bl	83050 <__malloc_unlock>
   8291e:	3408      	adds	r4, #8
   82920:	4620      	mov	r0, r4
   82922:	b003      	add	sp, #12
   82924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82928:	2510      	movs	r5, #16
   8292a:	42a9      	cmp	r1, r5
   8292c:	d9d9      	bls.n	828e2 <_malloc_r+0x1a>
   8292e:	2400      	movs	r4, #0
   82930:	230c      	movs	r3, #12
   82932:	4620      	mov	r0, r4
   82934:	6033      	str	r3, [r6, #0]
   82936:	b003      	add	sp, #12
   82938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8293c:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82940:	f000 8089 	beq.w	82a56 <_malloc_r+0x18e>
   82944:	f1bc 0f04 	cmp.w	ip, #4
   82948:	f200 8160 	bhi.w	82c0c <_malloc_r+0x344>
   8294c:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82950:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82954:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82958:	4fa6      	ldr	r7, [pc, #664]	; (82bf4 <_malloc_r+0x32c>)
   8295a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8295e:	68cc      	ldr	r4, [r1, #12]
   82960:	42a1      	cmp	r1, r4
   82962:	d105      	bne.n	82970 <_malloc_r+0xa8>
   82964:	e00c      	b.n	82980 <_malloc_r+0xb8>
   82966:	2b00      	cmp	r3, #0
   82968:	da79      	bge.n	82a5e <_malloc_r+0x196>
   8296a:	68e4      	ldr	r4, [r4, #12]
   8296c:	42a1      	cmp	r1, r4
   8296e:	d007      	beq.n	82980 <_malloc_r+0xb8>
   82970:	6862      	ldr	r2, [r4, #4]
   82972:	f022 0203 	bic.w	r2, r2, #3
   82976:	1b53      	subs	r3, r2, r5
   82978:	2b0f      	cmp	r3, #15
   8297a:	ddf4      	ble.n	82966 <_malloc_r+0x9e>
   8297c:	f10c 3cff 	add.w	ip, ip, #4294967295
   82980:	f10c 0c01 	add.w	ip, ip, #1
   82984:	4b9b      	ldr	r3, [pc, #620]	; (82bf4 <_malloc_r+0x32c>)
   82986:	693c      	ldr	r4, [r7, #16]
   82988:	f103 0e08 	add.w	lr, r3, #8
   8298c:	4574      	cmp	r4, lr
   8298e:	f000 817e 	beq.w	82c8e <_malloc_r+0x3c6>
   82992:	6861      	ldr	r1, [r4, #4]
   82994:	f021 0103 	bic.w	r1, r1, #3
   82998:	1b4a      	subs	r2, r1, r5
   8299a:	2a0f      	cmp	r2, #15
   8299c:	f300 8164 	bgt.w	82c68 <_malloc_r+0x3a0>
   829a0:	2a00      	cmp	r2, #0
   829a2:	f8c3 e014 	str.w	lr, [r3, #20]
   829a6:	f8c3 e010 	str.w	lr, [r3, #16]
   829aa:	da69      	bge.n	82a80 <_malloc_r+0x1b8>
   829ac:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   829b0:	f080 813a 	bcs.w	82c28 <_malloc_r+0x360>
   829b4:	08c9      	lsrs	r1, r1, #3
   829b6:	108a      	asrs	r2, r1, #2
   829b8:	f04f 0801 	mov.w	r8, #1
   829bc:	fa08 f802 	lsl.w	r8, r8, r2
   829c0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   829c4:	685a      	ldr	r2, [r3, #4]
   829c6:	6888      	ldr	r0, [r1, #8]
   829c8:	ea48 0202 	orr.w	r2, r8, r2
   829cc:	60a0      	str	r0, [r4, #8]
   829ce:	60e1      	str	r1, [r4, #12]
   829d0:	605a      	str	r2, [r3, #4]
   829d2:	608c      	str	r4, [r1, #8]
   829d4:	60c4      	str	r4, [r0, #12]
   829d6:	ea4f 03ac 	mov.w	r3, ip, asr #2
   829da:	2001      	movs	r0, #1
   829dc:	4098      	lsls	r0, r3
   829de:	4290      	cmp	r0, r2
   829e0:	d85b      	bhi.n	82a9a <_malloc_r+0x1d2>
   829e2:	4202      	tst	r2, r0
   829e4:	d106      	bne.n	829f4 <_malloc_r+0x12c>
   829e6:	f02c 0c03 	bic.w	ip, ip, #3
   829ea:	0040      	lsls	r0, r0, #1
   829ec:	4202      	tst	r2, r0
   829ee:	f10c 0c04 	add.w	ip, ip, #4
   829f2:	d0fa      	beq.n	829ea <_malloc_r+0x122>
   829f4:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   829f8:	4644      	mov	r4, r8
   829fa:	46e1      	mov	r9, ip
   829fc:	68e3      	ldr	r3, [r4, #12]
   829fe:	429c      	cmp	r4, r3
   82a00:	d107      	bne.n	82a12 <_malloc_r+0x14a>
   82a02:	e146      	b.n	82c92 <_malloc_r+0x3ca>
   82a04:	2a00      	cmp	r2, #0
   82a06:	f280 8157 	bge.w	82cb8 <_malloc_r+0x3f0>
   82a0a:	68db      	ldr	r3, [r3, #12]
   82a0c:	429c      	cmp	r4, r3
   82a0e:	f000 8140 	beq.w	82c92 <_malloc_r+0x3ca>
   82a12:	6859      	ldr	r1, [r3, #4]
   82a14:	f021 0103 	bic.w	r1, r1, #3
   82a18:	1b4a      	subs	r2, r1, r5
   82a1a:	2a0f      	cmp	r2, #15
   82a1c:	ddf2      	ble.n	82a04 <_malloc_r+0x13c>
   82a1e:	461c      	mov	r4, r3
   82a20:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82a24:	68d9      	ldr	r1, [r3, #12]
   82a26:	f045 0901 	orr.w	r9, r5, #1
   82a2a:	f042 0801 	orr.w	r8, r2, #1
   82a2e:	441d      	add	r5, r3
   82a30:	f8c3 9004 	str.w	r9, [r3, #4]
   82a34:	4630      	mov	r0, r6
   82a36:	f8cc 100c 	str.w	r1, [ip, #12]
   82a3a:	f8c1 c008 	str.w	ip, [r1, #8]
   82a3e:	617d      	str	r5, [r7, #20]
   82a40:	613d      	str	r5, [r7, #16]
   82a42:	f8c5 e00c 	str.w	lr, [r5, #12]
   82a46:	f8c5 e008 	str.w	lr, [r5, #8]
   82a4a:	f8c5 8004 	str.w	r8, [r5, #4]
   82a4e:	50aa      	str	r2, [r5, r2]
   82a50:	f000 fafe 	bl	83050 <__malloc_unlock>
   82a54:	e764      	b.n	82920 <_malloc_r+0x58>
   82a56:	217e      	movs	r1, #126	; 0x7e
   82a58:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   82a5c:	e77c      	b.n	82958 <_malloc_r+0x90>
   82a5e:	4422      	add	r2, r4
   82a60:	6850      	ldr	r0, [r2, #4]
   82a62:	68e3      	ldr	r3, [r4, #12]
   82a64:	68a1      	ldr	r1, [r4, #8]
   82a66:	f040 0501 	orr.w	r5, r0, #1
   82a6a:	60cb      	str	r3, [r1, #12]
   82a6c:	4630      	mov	r0, r6
   82a6e:	6099      	str	r1, [r3, #8]
   82a70:	6055      	str	r5, [r2, #4]
   82a72:	f000 faed 	bl	83050 <__malloc_unlock>
   82a76:	3408      	adds	r4, #8
   82a78:	4620      	mov	r0, r4
   82a7a:	b003      	add	sp, #12
   82a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a80:	4421      	add	r1, r4
   82a82:	684b      	ldr	r3, [r1, #4]
   82a84:	4630      	mov	r0, r6
   82a86:	f043 0301 	orr.w	r3, r3, #1
   82a8a:	604b      	str	r3, [r1, #4]
   82a8c:	f000 fae0 	bl	83050 <__malloc_unlock>
   82a90:	3408      	adds	r4, #8
   82a92:	4620      	mov	r0, r4
   82a94:	b003      	add	sp, #12
   82a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a9a:	68bc      	ldr	r4, [r7, #8]
   82a9c:	6863      	ldr	r3, [r4, #4]
   82a9e:	f023 0903 	bic.w	r9, r3, #3
   82aa2:	45a9      	cmp	r9, r5
   82aa4:	d304      	bcc.n	82ab0 <_malloc_r+0x1e8>
   82aa6:	ebc5 0309 	rsb	r3, r5, r9
   82aaa:	2b0f      	cmp	r3, #15
   82aac:	f300 8091 	bgt.w	82bd2 <_malloc_r+0x30a>
   82ab0:	4b51      	ldr	r3, [pc, #324]	; (82bf8 <_malloc_r+0x330>)
   82ab2:	4a52      	ldr	r2, [pc, #328]	; (82bfc <_malloc_r+0x334>)
   82ab4:	6819      	ldr	r1, [r3, #0]
   82ab6:	6813      	ldr	r3, [r2, #0]
   82ab8:	eb05 0a01 	add.w	sl, r5, r1
   82abc:	3301      	adds	r3, #1
   82abe:	eb04 0b09 	add.w	fp, r4, r9
   82ac2:	f000 8161 	beq.w	82d88 <_malloc_r+0x4c0>
   82ac6:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   82aca:	f10a 0a0f 	add.w	sl, sl, #15
   82ace:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   82ad2:	f02a 0a0f 	bic.w	sl, sl, #15
   82ad6:	4630      	mov	r0, r6
   82ad8:	4651      	mov	r1, sl
   82ada:	9201      	str	r2, [sp, #4]
   82adc:	f000 fc9a 	bl	83414 <_sbrk_r>
   82ae0:	f1b0 3fff 	cmp.w	r0, #4294967295
   82ae4:	4680      	mov	r8, r0
   82ae6:	9a01      	ldr	r2, [sp, #4]
   82ae8:	f000 8101 	beq.w	82cee <_malloc_r+0x426>
   82aec:	4583      	cmp	fp, r0
   82aee:	f200 80fb 	bhi.w	82ce8 <_malloc_r+0x420>
   82af2:	f8df c114 	ldr.w	ip, [pc, #276]	; 82c08 <_malloc_r+0x340>
   82af6:	45c3      	cmp	fp, r8
   82af8:	f8dc 3000 	ldr.w	r3, [ip]
   82afc:	4453      	add	r3, sl
   82afe:	f8cc 3000 	str.w	r3, [ip]
   82b02:	f000 814a 	beq.w	82d9a <_malloc_r+0x4d2>
   82b06:	6812      	ldr	r2, [r2, #0]
   82b08:	493c      	ldr	r1, [pc, #240]	; (82bfc <_malloc_r+0x334>)
   82b0a:	3201      	adds	r2, #1
   82b0c:	bf1b      	ittet	ne
   82b0e:	ebcb 0b08 	rsbne	fp, fp, r8
   82b12:	445b      	addne	r3, fp
   82b14:	f8c1 8000 	streq.w	r8, [r1]
   82b18:	f8cc 3000 	strne.w	r3, [ip]
   82b1c:	f018 0307 	ands.w	r3, r8, #7
   82b20:	f000 8114 	beq.w	82d4c <_malloc_r+0x484>
   82b24:	f1c3 0208 	rsb	r2, r3, #8
   82b28:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   82b2c:	4490      	add	r8, r2
   82b2e:	3308      	adds	r3, #8
   82b30:	44c2      	add	sl, r8
   82b32:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   82b36:	ebca 0a03 	rsb	sl, sl, r3
   82b3a:	4651      	mov	r1, sl
   82b3c:	4630      	mov	r0, r6
   82b3e:	f8cd c004 	str.w	ip, [sp, #4]
   82b42:	f000 fc67 	bl	83414 <_sbrk_r>
   82b46:	1c43      	adds	r3, r0, #1
   82b48:	f8dd c004 	ldr.w	ip, [sp, #4]
   82b4c:	f000 8135 	beq.w	82dba <_malloc_r+0x4f2>
   82b50:	ebc8 0200 	rsb	r2, r8, r0
   82b54:	4452      	add	r2, sl
   82b56:	f042 0201 	orr.w	r2, r2, #1
   82b5a:	f8dc 3000 	ldr.w	r3, [ip]
   82b5e:	42bc      	cmp	r4, r7
   82b60:	4453      	add	r3, sl
   82b62:	f8c7 8008 	str.w	r8, [r7, #8]
   82b66:	f8cc 3000 	str.w	r3, [ip]
   82b6a:	f8c8 2004 	str.w	r2, [r8, #4]
   82b6e:	f8df a098 	ldr.w	sl, [pc, #152]	; 82c08 <_malloc_r+0x340>
   82b72:	d015      	beq.n	82ba0 <_malloc_r+0x2d8>
   82b74:	f1b9 0f0f 	cmp.w	r9, #15
   82b78:	f240 80eb 	bls.w	82d52 <_malloc_r+0x48a>
   82b7c:	6861      	ldr	r1, [r4, #4]
   82b7e:	f1a9 020c 	sub.w	r2, r9, #12
   82b82:	f022 0207 	bic.w	r2, r2, #7
   82b86:	f001 0101 	and.w	r1, r1, #1
   82b8a:	ea42 0e01 	orr.w	lr, r2, r1
   82b8e:	2005      	movs	r0, #5
   82b90:	18a1      	adds	r1, r4, r2
   82b92:	2a0f      	cmp	r2, #15
   82b94:	f8c4 e004 	str.w	lr, [r4, #4]
   82b98:	6048      	str	r0, [r1, #4]
   82b9a:	6088      	str	r0, [r1, #8]
   82b9c:	f200 8111 	bhi.w	82dc2 <_malloc_r+0x4fa>
   82ba0:	4a17      	ldr	r2, [pc, #92]	; (82c00 <_malloc_r+0x338>)
   82ba2:	68bc      	ldr	r4, [r7, #8]
   82ba4:	6811      	ldr	r1, [r2, #0]
   82ba6:	428b      	cmp	r3, r1
   82ba8:	bf88      	it	hi
   82baa:	6013      	strhi	r3, [r2, #0]
   82bac:	4a15      	ldr	r2, [pc, #84]	; (82c04 <_malloc_r+0x33c>)
   82bae:	6811      	ldr	r1, [r2, #0]
   82bb0:	428b      	cmp	r3, r1
   82bb2:	bf88      	it	hi
   82bb4:	6013      	strhi	r3, [r2, #0]
   82bb6:	6862      	ldr	r2, [r4, #4]
   82bb8:	f022 0203 	bic.w	r2, r2, #3
   82bbc:	4295      	cmp	r5, r2
   82bbe:	ebc5 0302 	rsb	r3, r5, r2
   82bc2:	d801      	bhi.n	82bc8 <_malloc_r+0x300>
   82bc4:	2b0f      	cmp	r3, #15
   82bc6:	dc04      	bgt.n	82bd2 <_malloc_r+0x30a>
   82bc8:	4630      	mov	r0, r6
   82bca:	f000 fa41 	bl	83050 <__malloc_unlock>
   82bce:	2400      	movs	r4, #0
   82bd0:	e6a6      	b.n	82920 <_malloc_r+0x58>
   82bd2:	f045 0201 	orr.w	r2, r5, #1
   82bd6:	f043 0301 	orr.w	r3, r3, #1
   82bda:	4425      	add	r5, r4
   82bdc:	6062      	str	r2, [r4, #4]
   82bde:	4630      	mov	r0, r6
   82be0:	60bd      	str	r5, [r7, #8]
   82be2:	606b      	str	r3, [r5, #4]
   82be4:	f000 fa34 	bl	83050 <__malloc_unlock>
   82be8:	3408      	adds	r4, #8
   82bea:	4620      	mov	r0, r4
   82bec:	b003      	add	sp, #12
   82bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82bf2:	bf00      	nop
   82bf4:	20070588 	.word	0x20070588
   82bf8:	20070ad4 	.word	0x20070ad4
   82bfc:	20070994 	.word	0x20070994
   82c00:	20070ad0 	.word	0x20070ad0
   82c04:	20070acc 	.word	0x20070acc
   82c08:	20070ad8 	.word	0x20070ad8
   82c0c:	f1bc 0f14 	cmp.w	ip, #20
   82c10:	d961      	bls.n	82cd6 <_malloc_r+0x40e>
   82c12:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   82c16:	f200 808f 	bhi.w	82d38 <_malloc_r+0x470>
   82c1a:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   82c1e:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   82c22:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82c26:	e697      	b.n	82958 <_malloc_r+0x90>
   82c28:	0a4b      	lsrs	r3, r1, #9
   82c2a:	2b04      	cmp	r3, #4
   82c2c:	d958      	bls.n	82ce0 <_malloc_r+0x418>
   82c2e:	2b14      	cmp	r3, #20
   82c30:	f200 80ad 	bhi.w	82d8e <_malloc_r+0x4c6>
   82c34:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   82c38:	0050      	lsls	r0, r2, #1
   82c3a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   82c3e:	6883      	ldr	r3, [r0, #8]
   82c40:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82dfc <_malloc_r+0x534>
   82c44:	4283      	cmp	r3, r0
   82c46:	f000 808a 	beq.w	82d5e <_malloc_r+0x496>
   82c4a:	685a      	ldr	r2, [r3, #4]
   82c4c:	f022 0203 	bic.w	r2, r2, #3
   82c50:	4291      	cmp	r1, r2
   82c52:	d202      	bcs.n	82c5a <_malloc_r+0x392>
   82c54:	689b      	ldr	r3, [r3, #8]
   82c56:	4298      	cmp	r0, r3
   82c58:	d1f7      	bne.n	82c4a <_malloc_r+0x382>
   82c5a:	68d9      	ldr	r1, [r3, #12]
   82c5c:	687a      	ldr	r2, [r7, #4]
   82c5e:	60e1      	str	r1, [r4, #12]
   82c60:	60a3      	str	r3, [r4, #8]
   82c62:	608c      	str	r4, [r1, #8]
   82c64:	60dc      	str	r4, [r3, #12]
   82c66:	e6b6      	b.n	829d6 <_malloc_r+0x10e>
   82c68:	f045 0701 	orr.w	r7, r5, #1
   82c6c:	f042 0101 	orr.w	r1, r2, #1
   82c70:	4425      	add	r5, r4
   82c72:	6067      	str	r7, [r4, #4]
   82c74:	4630      	mov	r0, r6
   82c76:	615d      	str	r5, [r3, #20]
   82c78:	611d      	str	r5, [r3, #16]
   82c7a:	f8c5 e00c 	str.w	lr, [r5, #12]
   82c7e:	f8c5 e008 	str.w	lr, [r5, #8]
   82c82:	6069      	str	r1, [r5, #4]
   82c84:	50aa      	str	r2, [r5, r2]
   82c86:	3408      	adds	r4, #8
   82c88:	f000 f9e2 	bl	83050 <__malloc_unlock>
   82c8c:	e648      	b.n	82920 <_malloc_r+0x58>
   82c8e:	685a      	ldr	r2, [r3, #4]
   82c90:	e6a1      	b.n	829d6 <_malloc_r+0x10e>
   82c92:	f109 0901 	add.w	r9, r9, #1
   82c96:	f019 0f03 	tst.w	r9, #3
   82c9a:	f104 0408 	add.w	r4, r4, #8
   82c9e:	f47f aead 	bne.w	829fc <_malloc_r+0x134>
   82ca2:	e02d      	b.n	82d00 <_malloc_r+0x438>
   82ca4:	f104 0308 	add.w	r3, r4, #8
   82ca8:	6964      	ldr	r4, [r4, #20]
   82caa:	42a3      	cmp	r3, r4
   82cac:	bf08      	it	eq
   82cae:	f10c 0c02 	addeq.w	ip, ip, #2
   82cb2:	f43f ae67 	beq.w	82984 <_malloc_r+0xbc>
   82cb6:	e623      	b.n	82900 <_malloc_r+0x38>
   82cb8:	4419      	add	r1, r3
   82cba:	6848      	ldr	r0, [r1, #4]
   82cbc:	461c      	mov	r4, r3
   82cbe:	f854 2f08 	ldr.w	r2, [r4, #8]!
   82cc2:	68db      	ldr	r3, [r3, #12]
   82cc4:	f040 0501 	orr.w	r5, r0, #1
   82cc8:	604d      	str	r5, [r1, #4]
   82cca:	4630      	mov	r0, r6
   82ccc:	60d3      	str	r3, [r2, #12]
   82cce:	609a      	str	r2, [r3, #8]
   82cd0:	f000 f9be 	bl	83050 <__malloc_unlock>
   82cd4:	e624      	b.n	82920 <_malloc_r+0x58>
   82cd6:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   82cda:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82cde:	e63b      	b.n	82958 <_malloc_r+0x90>
   82ce0:	098a      	lsrs	r2, r1, #6
   82ce2:	3238      	adds	r2, #56	; 0x38
   82ce4:	0050      	lsls	r0, r2, #1
   82ce6:	e7a8      	b.n	82c3a <_malloc_r+0x372>
   82ce8:	42bc      	cmp	r4, r7
   82cea:	f43f af02 	beq.w	82af2 <_malloc_r+0x22a>
   82cee:	68bc      	ldr	r4, [r7, #8]
   82cf0:	6862      	ldr	r2, [r4, #4]
   82cf2:	f022 0203 	bic.w	r2, r2, #3
   82cf6:	e761      	b.n	82bbc <_malloc_r+0x2f4>
   82cf8:	f8d8 8000 	ldr.w	r8, [r8]
   82cfc:	4598      	cmp	r8, r3
   82cfe:	d17a      	bne.n	82df6 <_malloc_r+0x52e>
   82d00:	f01c 0f03 	tst.w	ip, #3
   82d04:	f1a8 0308 	sub.w	r3, r8, #8
   82d08:	f10c 3cff 	add.w	ip, ip, #4294967295
   82d0c:	d1f4      	bne.n	82cf8 <_malloc_r+0x430>
   82d0e:	687b      	ldr	r3, [r7, #4]
   82d10:	ea23 0300 	bic.w	r3, r3, r0
   82d14:	607b      	str	r3, [r7, #4]
   82d16:	0040      	lsls	r0, r0, #1
   82d18:	4298      	cmp	r0, r3
   82d1a:	f63f aebe 	bhi.w	82a9a <_malloc_r+0x1d2>
   82d1e:	2800      	cmp	r0, #0
   82d20:	f43f aebb 	beq.w	82a9a <_malloc_r+0x1d2>
   82d24:	4203      	tst	r3, r0
   82d26:	46cc      	mov	ip, r9
   82d28:	f47f ae64 	bne.w	829f4 <_malloc_r+0x12c>
   82d2c:	0040      	lsls	r0, r0, #1
   82d2e:	4203      	tst	r3, r0
   82d30:	f10c 0c04 	add.w	ip, ip, #4
   82d34:	d0fa      	beq.n	82d2c <_malloc_r+0x464>
   82d36:	e65d      	b.n	829f4 <_malloc_r+0x12c>
   82d38:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   82d3c:	d819      	bhi.n	82d72 <_malloc_r+0x4aa>
   82d3e:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   82d42:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   82d46:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82d4a:	e605      	b.n	82958 <_malloc_r+0x90>
   82d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82d50:	e6ee      	b.n	82b30 <_malloc_r+0x268>
   82d52:	2301      	movs	r3, #1
   82d54:	f8c8 3004 	str.w	r3, [r8, #4]
   82d58:	4644      	mov	r4, r8
   82d5a:	2200      	movs	r2, #0
   82d5c:	e72e      	b.n	82bbc <_malloc_r+0x2f4>
   82d5e:	1092      	asrs	r2, r2, #2
   82d60:	2001      	movs	r0, #1
   82d62:	4090      	lsls	r0, r2
   82d64:	f8d8 2004 	ldr.w	r2, [r8, #4]
   82d68:	4619      	mov	r1, r3
   82d6a:	4302      	orrs	r2, r0
   82d6c:	f8c8 2004 	str.w	r2, [r8, #4]
   82d70:	e775      	b.n	82c5e <_malloc_r+0x396>
   82d72:	f240 5354 	movw	r3, #1364	; 0x554
   82d76:	459c      	cmp	ip, r3
   82d78:	d81b      	bhi.n	82db2 <_malloc_r+0x4ea>
   82d7a:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   82d7e:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   82d82:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82d86:	e5e7      	b.n	82958 <_malloc_r+0x90>
   82d88:	f10a 0a10 	add.w	sl, sl, #16
   82d8c:	e6a3      	b.n	82ad6 <_malloc_r+0x20e>
   82d8e:	2b54      	cmp	r3, #84	; 0x54
   82d90:	d81f      	bhi.n	82dd2 <_malloc_r+0x50a>
   82d92:	0b0a      	lsrs	r2, r1, #12
   82d94:	326e      	adds	r2, #110	; 0x6e
   82d96:	0050      	lsls	r0, r2, #1
   82d98:	e74f      	b.n	82c3a <_malloc_r+0x372>
   82d9a:	f3cb 010b 	ubfx	r1, fp, #0, #12
   82d9e:	2900      	cmp	r1, #0
   82da0:	f47f aeb1 	bne.w	82b06 <_malloc_r+0x23e>
   82da4:	eb0a 0109 	add.w	r1, sl, r9
   82da8:	68ba      	ldr	r2, [r7, #8]
   82daa:	f041 0101 	orr.w	r1, r1, #1
   82dae:	6051      	str	r1, [r2, #4]
   82db0:	e6f6      	b.n	82ba0 <_malloc_r+0x2d8>
   82db2:	21fc      	movs	r1, #252	; 0xfc
   82db4:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   82db8:	e5ce      	b.n	82958 <_malloc_r+0x90>
   82dba:	2201      	movs	r2, #1
   82dbc:	f04f 0a00 	mov.w	sl, #0
   82dc0:	e6cb      	b.n	82b5a <_malloc_r+0x292>
   82dc2:	f104 0108 	add.w	r1, r4, #8
   82dc6:	4630      	mov	r0, r6
   82dc8:	f7ff fa80 	bl	822cc <_free_r>
   82dcc:	f8da 3000 	ldr.w	r3, [sl]
   82dd0:	e6e6      	b.n	82ba0 <_malloc_r+0x2d8>
   82dd2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82dd6:	d803      	bhi.n	82de0 <_malloc_r+0x518>
   82dd8:	0bca      	lsrs	r2, r1, #15
   82dda:	3277      	adds	r2, #119	; 0x77
   82ddc:	0050      	lsls	r0, r2, #1
   82dde:	e72c      	b.n	82c3a <_malloc_r+0x372>
   82de0:	f240 5254 	movw	r2, #1364	; 0x554
   82de4:	4293      	cmp	r3, r2
   82de6:	d803      	bhi.n	82df0 <_malloc_r+0x528>
   82de8:	0c8a      	lsrs	r2, r1, #18
   82dea:	327c      	adds	r2, #124	; 0x7c
   82dec:	0050      	lsls	r0, r2, #1
   82dee:	e724      	b.n	82c3a <_malloc_r+0x372>
   82df0:	20fc      	movs	r0, #252	; 0xfc
   82df2:	227e      	movs	r2, #126	; 0x7e
   82df4:	e721      	b.n	82c3a <_malloc_r+0x372>
   82df6:	687b      	ldr	r3, [r7, #4]
   82df8:	e78d      	b.n	82d16 <_malloc_r+0x44e>
   82dfa:	bf00      	nop
   82dfc:	20070588 	.word	0x20070588

00082e00 <memchr>:
   82e00:	0783      	lsls	r3, r0, #30
   82e02:	b470      	push	{r4, r5, r6}
   82e04:	b2c9      	uxtb	r1, r1
   82e06:	d040      	beq.n	82e8a <memchr+0x8a>
   82e08:	1e54      	subs	r4, r2, #1
   82e0a:	b32a      	cbz	r2, 82e58 <memchr+0x58>
   82e0c:	7803      	ldrb	r3, [r0, #0]
   82e0e:	428b      	cmp	r3, r1
   82e10:	d023      	beq.n	82e5a <memchr+0x5a>
   82e12:	1c43      	adds	r3, r0, #1
   82e14:	e004      	b.n	82e20 <memchr+0x20>
   82e16:	b1fc      	cbz	r4, 82e58 <memchr+0x58>
   82e18:	7805      	ldrb	r5, [r0, #0]
   82e1a:	4614      	mov	r4, r2
   82e1c:	428d      	cmp	r5, r1
   82e1e:	d01c      	beq.n	82e5a <memchr+0x5a>
   82e20:	f013 0f03 	tst.w	r3, #3
   82e24:	4618      	mov	r0, r3
   82e26:	f104 32ff 	add.w	r2, r4, #4294967295
   82e2a:	f103 0301 	add.w	r3, r3, #1
   82e2e:	d1f2      	bne.n	82e16 <memchr+0x16>
   82e30:	2c03      	cmp	r4, #3
   82e32:	d814      	bhi.n	82e5e <memchr+0x5e>
   82e34:	1e65      	subs	r5, r4, #1
   82e36:	b354      	cbz	r4, 82e8e <memchr+0x8e>
   82e38:	7803      	ldrb	r3, [r0, #0]
   82e3a:	428b      	cmp	r3, r1
   82e3c:	d00d      	beq.n	82e5a <memchr+0x5a>
   82e3e:	1c42      	adds	r2, r0, #1
   82e40:	2300      	movs	r3, #0
   82e42:	e002      	b.n	82e4a <memchr+0x4a>
   82e44:	7804      	ldrb	r4, [r0, #0]
   82e46:	428c      	cmp	r4, r1
   82e48:	d007      	beq.n	82e5a <memchr+0x5a>
   82e4a:	42ab      	cmp	r3, r5
   82e4c:	4610      	mov	r0, r2
   82e4e:	f103 0301 	add.w	r3, r3, #1
   82e52:	f102 0201 	add.w	r2, r2, #1
   82e56:	d1f5      	bne.n	82e44 <memchr+0x44>
   82e58:	2000      	movs	r0, #0
   82e5a:	bc70      	pop	{r4, r5, r6}
   82e5c:	4770      	bx	lr
   82e5e:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   82e62:	4603      	mov	r3, r0
   82e64:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   82e68:	681a      	ldr	r2, [r3, #0]
   82e6a:	4618      	mov	r0, r3
   82e6c:	4072      	eors	r2, r6
   82e6e:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   82e72:	ea25 0202 	bic.w	r2, r5, r2
   82e76:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   82e7a:	f103 0304 	add.w	r3, r3, #4
   82e7e:	d1d9      	bne.n	82e34 <memchr+0x34>
   82e80:	3c04      	subs	r4, #4
   82e82:	2c03      	cmp	r4, #3
   82e84:	4618      	mov	r0, r3
   82e86:	d8ef      	bhi.n	82e68 <memchr+0x68>
   82e88:	e7d4      	b.n	82e34 <memchr+0x34>
   82e8a:	4614      	mov	r4, r2
   82e8c:	e7d0      	b.n	82e30 <memchr+0x30>
   82e8e:	4620      	mov	r0, r4
   82e90:	e7e3      	b.n	82e5a <memchr+0x5a>
   82e92:	bf00      	nop

00082e94 <memcpy>:
   82e94:	4684      	mov	ip, r0
   82e96:	ea41 0300 	orr.w	r3, r1, r0
   82e9a:	f013 0303 	ands.w	r3, r3, #3
   82e9e:	d149      	bne.n	82f34 <memcpy+0xa0>
   82ea0:	3a40      	subs	r2, #64	; 0x40
   82ea2:	d323      	bcc.n	82eec <memcpy+0x58>
   82ea4:	680b      	ldr	r3, [r1, #0]
   82ea6:	6003      	str	r3, [r0, #0]
   82ea8:	684b      	ldr	r3, [r1, #4]
   82eaa:	6043      	str	r3, [r0, #4]
   82eac:	688b      	ldr	r3, [r1, #8]
   82eae:	6083      	str	r3, [r0, #8]
   82eb0:	68cb      	ldr	r3, [r1, #12]
   82eb2:	60c3      	str	r3, [r0, #12]
   82eb4:	690b      	ldr	r3, [r1, #16]
   82eb6:	6103      	str	r3, [r0, #16]
   82eb8:	694b      	ldr	r3, [r1, #20]
   82eba:	6143      	str	r3, [r0, #20]
   82ebc:	698b      	ldr	r3, [r1, #24]
   82ebe:	6183      	str	r3, [r0, #24]
   82ec0:	69cb      	ldr	r3, [r1, #28]
   82ec2:	61c3      	str	r3, [r0, #28]
   82ec4:	6a0b      	ldr	r3, [r1, #32]
   82ec6:	6203      	str	r3, [r0, #32]
   82ec8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82eca:	6243      	str	r3, [r0, #36]	; 0x24
   82ecc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82ece:	6283      	str	r3, [r0, #40]	; 0x28
   82ed0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82ed2:	62c3      	str	r3, [r0, #44]	; 0x2c
   82ed4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82ed6:	6303      	str	r3, [r0, #48]	; 0x30
   82ed8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82eda:	6343      	str	r3, [r0, #52]	; 0x34
   82edc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82ede:	6383      	str	r3, [r0, #56]	; 0x38
   82ee0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82ee2:	63c3      	str	r3, [r0, #60]	; 0x3c
   82ee4:	3040      	adds	r0, #64	; 0x40
   82ee6:	3140      	adds	r1, #64	; 0x40
   82ee8:	3a40      	subs	r2, #64	; 0x40
   82eea:	d2db      	bcs.n	82ea4 <memcpy+0x10>
   82eec:	3230      	adds	r2, #48	; 0x30
   82eee:	d30b      	bcc.n	82f08 <memcpy+0x74>
   82ef0:	680b      	ldr	r3, [r1, #0]
   82ef2:	6003      	str	r3, [r0, #0]
   82ef4:	684b      	ldr	r3, [r1, #4]
   82ef6:	6043      	str	r3, [r0, #4]
   82ef8:	688b      	ldr	r3, [r1, #8]
   82efa:	6083      	str	r3, [r0, #8]
   82efc:	68cb      	ldr	r3, [r1, #12]
   82efe:	60c3      	str	r3, [r0, #12]
   82f00:	3010      	adds	r0, #16
   82f02:	3110      	adds	r1, #16
   82f04:	3a10      	subs	r2, #16
   82f06:	d2f3      	bcs.n	82ef0 <memcpy+0x5c>
   82f08:	320c      	adds	r2, #12
   82f0a:	d305      	bcc.n	82f18 <memcpy+0x84>
   82f0c:	f851 3b04 	ldr.w	r3, [r1], #4
   82f10:	f840 3b04 	str.w	r3, [r0], #4
   82f14:	3a04      	subs	r2, #4
   82f16:	d2f9      	bcs.n	82f0c <memcpy+0x78>
   82f18:	3204      	adds	r2, #4
   82f1a:	d008      	beq.n	82f2e <memcpy+0x9a>
   82f1c:	07d2      	lsls	r2, r2, #31
   82f1e:	bf1c      	itt	ne
   82f20:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82f24:	f800 3b01 	strbne.w	r3, [r0], #1
   82f28:	d301      	bcc.n	82f2e <memcpy+0x9a>
   82f2a:	880b      	ldrh	r3, [r1, #0]
   82f2c:	8003      	strh	r3, [r0, #0]
   82f2e:	4660      	mov	r0, ip
   82f30:	4770      	bx	lr
   82f32:	bf00      	nop
   82f34:	2a08      	cmp	r2, #8
   82f36:	d313      	bcc.n	82f60 <memcpy+0xcc>
   82f38:	078b      	lsls	r3, r1, #30
   82f3a:	d0b1      	beq.n	82ea0 <memcpy+0xc>
   82f3c:	f010 0303 	ands.w	r3, r0, #3
   82f40:	d0ae      	beq.n	82ea0 <memcpy+0xc>
   82f42:	f1c3 0304 	rsb	r3, r3, #4
   82f46:	1ad2      	subs	r2, r2, r3
   82f48:	07db      	lsls	r3, r3, #31
   82f4a:	bf1c      	itt	ne
   82f4c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82f50:	f800 3b01 	strbne.w	r3, [r0], #1
   82f54:	d3a4      	bcc.n	82ea0 <memcpy+0xc>
   82f56:	f831 3b02 	ldrh.w	r3, [r1], #2
   82f5a:	f820 3b02 	strh.w	r3, [r0], #2
   82f5e:	e79f      	b.n	82ea0 <memcpy+0xc>
   82f60:	3a04      	subs	r2, #4
   82f62:	d3d9      	bcc.n	82f18 <memcpy+0x84>
   82f64:	3a01      	subs	r2, #1
   82f66:	f811 3b01 	ldrb.w	r3, [r1], #1
   82f6a:	f800 3b01 	strb.w	r3, [r0], #1
   82f6e:	d2f9      	bcs.n	82f64 <memcpy+0xd0>
   82f70:	780b      	ldrb	r3, [r1, #0]
   82f72:	7003      	strb	r3, [r0, #0]
   82f74:	784b      	ldrb	r3, [r1, #1]
   82f76:	7043      	strb	r3, [r0, #1]
   82f78:	788b      	ldrb	r3, [r1, #2]
   82f7a:	7083      	strb	r3, [r0, #2]
   82f7c:	4660      	mov	r0, ip
   82f7e:	4770      	bx	lr

00082f80 <memmove>:
   82f80:	4288      	cmp	r0, r1
   82f82:	b4f0      	push	{r4, r5, r6, r7}
   82f84:	d910      	bls.n	82fa8 <memmove+0x28>
   82f86:	188c      	adds	r4, r1, r2
   82f88:	42a0      	cmp	r0, r4
   82f8a:	d20d      	bcs.n	82fa8 <memmove+0x28>
   82f8c:	1885      	adds	r5, r0, r2
   82f8e:	1e53      	subs	r3, r2, #1
   82f90:	b142      	cbz	r2, 82fa4 <memmove+0x24>
   82f92:	4621      	mov	r1, r4
   82f94:	462a      	mov	r2, r5
   82f96:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   82f9a:	3b01      	subs	r3, #1
   82f9c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   82fa0:	1c5c      	adds	r4, r3, #1
   82fa2:	d1f8      	bne.n	82f96 <memmove+0x16>
   82fa4:	bcf0      	pop	{r4, r5, r6, r7}
   82fa6:	4770      	bx	lr
   82fa8:	2a0f      	cmp	r2, #15
   82faa:	d944      	bls.n	83036 <memmove+0xb6>
   82fac:	ea40 0301 	orr.w	r3, r0, r1
   82fb0:	079b      	lsls	r3, r3, #30
   82fb2:	d144      	bne.n	8303e <memmove+0xbe>
   82fb4:	f1a2 0710 	sub.w	r7, r2, #16
   82fb8:	093f      	lsrs	r7, r7, #4
   82fba:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   82fbe:	3610      	adds	r6, #16
   82fc0:	460c      	mov	r4, r1
   82fc2:	4603      	mov	r3, r0
   82fc4:	6825      	ldr	r5, [r4, #0]
   82fc6:	3310      	adds	r3, #16
   82fc8:	f843 5c10 	str.w	r5, [r3, #-16]
   82fcc:	6865      	ldr	r5, [r4, #4]
   82fce:	3410      	adds	r4, #16
   82fd0:	f843 5c0c 	str.w	r5, [r3, #-12]
   82fd4:	f854 5c08 	ldr.w	r5, [r4, #-8]
   82fd8:	f843 5c08 	str.w	r5, [r3, #-8]
   82fdc:	f854 5c04 	ldr.w	r5, [r4, #-4]
   82fe0:	f843 5c04 	str.w	r5, [r3, #-4]
   82fe4:	42b3      	cmp	r3, r6
   82fe6:	d1ed      	bne.n	82fc4 <memmove+0x44>
   82fe8:	1c7b      	adds	r3, r7, #1
   82fea:	f002 0c0f 	and.w	ip, r2, #15
   82fee:	011b      	lsls	r3, r3, #4
   82ff0:	f1bc 0f03 	cmp.w	ip, #3
   82ff4:	4419      	add	r1, r3
   82ff6:	4403      	add	r3, r0
   82ff8:	d923      	bls.n	83042 <memmove+0xc2>
   82ffa:	460e      	mov	r6, r1
   82ffc:	461d      	mov	r5, r3
   82ffe:	4664      	mov	r4, ip
   83000:	f856 7b04 	ldr.w	r7, [r6], #4
   83004:	3c04      	subs	r4, #4
   83006:	2c03      	cmp	r4, #3
   83008:	f845 7b04 	str.w	r7, [r5], #4
   8300c:	d8f8      	bhi.n	83000 <memmove+0x80>
   8300e:	f1ac 0404 	sub.w	r4, ip, #4
   83012:	f024 0403 	bic.w	r4, r4, #3
   83016:	3404      	adds	r4, #4
   83018:	f002 0203 	and.w	r2, r2, #3
   8301c:	4423      	add	r3, r4
   8301e:	4421      	add	r1, r4
   83020:	2a00      	cmp	r2, #0
   83022:	d0bf      	beq.n	82fa4 <memmove+0x24>
   83024:	441a      	add	r2, r3
   83026:	f811 4b01 	ldrb.w	r4, [r1], #1
   8302a:	f803 4b01 	strb.w	r4, [r3], #1
   8302e:	4293      	cmp	r3, r2
   83030:	d1f9      	bne.n	83026 <memmove+0xa6>
   83032:	bcf0      	pop	{r4, r5, r6, r7}
   83034:	4770      	bx	lr
   83036:	4603      	mov	r3, r0
   83038:	2a00      	cmp	r2, #0
   8303a:	d1f3      	bne.n	83024 <memmove+0xa4>
   8303c:	e7b2      	b.n	82fa4 <memmove+0x24>
   8303e:	4603      	mov	r3, r0
   83040:	e7f0      	b.n	83024 <memmove+0xa4>
   83042:	4662      	mov	r2, ip
   83044:	2a00      	cmp	r2, #0
   83046:	d1ed      	bne.n	83024 <memmove+0xa4>
   83048:	e7ac      	b.n	82fa4 <memmove+0x24>
   8304a:	bf00      	nop

0008304c <__malloc_lock>:
   8304c:	4770      	bx	lr
   8304e:	bf00      	nop

00083050 <__malloc_unlock>:
   83050:	4770      	bx	lr
   83052:	bf00      	nop

00083054 <_realloc_r>:
   83054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83058:	460c      	mov	r4, r1
   8305a:	b083      	sub	sp, #12
   8305c:	4690      	mov	r8, r2
   8305e:	4681      	mov	r9, r0
   83060:	2900      	cmp	r1, #0
   83062:	f000 80ba 	beq.w	831da <_realloc_r+0x186>
   83066:	f7ff fff1 	bl	8304c <__malloc_lock>
   8306a:	f108 060b 	add.w	r6, r8, #11
   8306e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83072:	2e16      	cmp	r6, #22
   83074:	f023 0503 	bic.w	r5, r3, #3
   83078:	f1a4 0708 	sub.w	r7, r4, #8
   8307c:	d84b      	bhi.n	83116 <_realloc_r+0xc2>
   8307e:	2110      	movs	r1, #16
   83080:	460e      	mov	r6, r1
   83082:	45b0      	cmp	r8, r6
   83084:	d84c      	bhi.n	83120 <_realloc_r+0xcc>
   83086:	428d      	cmp	r5, r1
   83088:	da51      	bge.n	8312e <_realloc_r+0xda>
   8308a:	f8df b384 	ldr.w	fp, [pc, #900]	; 83410 <_realloc_r+0x3bc>
   8308e:	1978      	adds	r0, r7, r5
   83090:	f8db e008 	ldr.w	lr, [fp, #8]
   83094:	4586      	cmp	lr, r0
   83096:	f000 80a6 	beq.w	831e6 <_realloc_r+0x192>
   8309a:	6842      	ldr	r2, [r0, #4]
   8309c:	f022 0c01 	bic.w	ip, r2, #1
   830a0:	4484      	add	ip, r0
   830a2:	f8dc c004 	ldr.w	ip, [ip, #4]
   830a6:	f01c 0f01 	tst.w	ip, #1
   830aa:	d054      	beq.n	83156 <_realloc_r+0x102>
   830ac:	2200      	movs	r2, #0
   830ae:	4610      	mov	r0, r2
   830b0:	07db      	lsls	r3, r3, #31
   830b2:	d46f      	bmi.n	83194 <_realloc_r+0x140>
   830b4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   830b8:	ebc3 0a07 	rsb	sl, r3, r7
   830bc:	f8da 3004 	ldr.w	r3, [sl, #4]
   830c0:	f023 0303 	bic.w	r3, r3, #3
   830c4:	442b      	add	r3, r5
   830c6:	2800      	cmp	r0, #0
   830c8:	d062      	beq.n	83190 <_realloc_r+0x13c>
   830ca:	4570      	cmp	r0, lr
   830cc:	f000 80e9 	beq.w	832a2 <_realloc_r+0x24e>
   830d0:	eb02 0e03 	add.w	lr, r2, r3
   830d4:	458e      	cmp	lr, r1
   830d6:	db5b      	blt.n	83190 <_realloc_r+0x13c>
   830d8:	68c3      	ldr	r3, [r0, #12]
   830da:	6882      	ldr	r2, [r0, #8]
   830dc:	46d0      	mov	r8, sl
   830de:	60d3      	str	r3, [r2, #12]
   830e0:	609a      	str	r2, [r3, #8]
   830e2:	f858 1f08 	ldr.w	r1, [r8, #8]!
   830e6:	f8da 300c 	ldr.w	r3, [sl, #12]
   830ea:	1f2a      	subs	r2, r5, #4
   830ec:	2a24      	cmp	r2, #36	; 0x24
   830ee:	60cb      	str	r3, [r1, #12]
   830f0:	6099      	str	r1, [r3, #8]
   830f2:	f200 8123 	bhi.w	8333c <_realloc_r+0x2e8>
   830f6:	2a13      	cmp	r2, #19
   830f8:	f240 80b0 	bls.w	8325c <_realloc_r+0x208>
   830fc:	6823      	ldr	r3, [r4, #0]
   830fe:	2a1b      	cmp	r2, #27
   83100:	f8ca 3008 	str.w	r3, [sl, #8]
   83104:	6863      	ldr	r3, [r4, #4]
   83106:	f8ca 300c 	str.w	r3, [sl, #12]
   8310a:	f200 812b 	bhi.w	83364 <_realloc_r+0x310>
   8310e:	3408      	adds	r4, #8
   83110:	f10a 0310 	add.w	r3, sl, #16
   83114:	e0a3      	b.n	8325e <_realloc_r+0x20a>
   83116:	f026 0607 	bic.w	r6, r6, #7
   8311a:	2e00      	cmp	r6, #0
   8311c:	4631      	mov	r1, r6
   8311e:	dab0      	bge.n	83082 <_realloc_r+0x2e>
   83120:	230c      	movs	r3, #12
   83122:	2000      	movs	r0, #0
   83124:	f8c9 3000 	str.w	r3, [r9]
   83128:	b003      	add	sp, #12
   8312a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8312e:	46a0      	mov	r8, r4
   83130:	1baa      	subs	r2, r5, r6
   83132:	2a0f      	cmp	r2, #15
   83134:	f003 0301 	and.w	r3, r3, #1
   83138:	d81a      	bhi.n	83170 <_realloc_r+0x11c>
   8313a:	432b      	orrs	r3, r5
   8313c:	607b      	str	r3, [r7, #4]
   8313e:	443d      	add	r5, r7
   83140:	686b      	ldr	r3, [r5, #4]
   83142:	f043 0301 	orr.w	r3, r3, #1
   83146:	606b      	str	r3, [r5, #4]
   83148:	4648      	mov	r0, r9
   8314a:	f7ff ff81 	bl	83050 <__malloc_unlock>
   8314e:	4640      	mov	r0, r8
   83150:	b003      	add	sp, #12
   83152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83156:	f022 0203 	bic.w	r2, r2, #3
   8315a:	eb02 0c05 	add.w	ip, r2, r5
   8315e:	458c      	cmp	ip, r1
   83160:	dba6      	blt.n	830b0 <_realloc_r+0x5c>
   83162:	68c2      	ldr	r2, [r0, #12]
   83164:	6881      	ldr	r1, [r0, #8]
   83166:	46a0      	mov	r8, r4
   83168:	60ca      	str	r2, [r1, #12]
   8316a:	4665      	mov	r5, ip
   8316c:	6091      	str	r1, [r2, #8]
   8316e:	e7df      	b.n	83130 <_realloc_r+0xdc>
   83170:	19b9      	adds	r1, r7, r6
   83172:	4333      	orrs	r3, r6
   83174:	f042 0001 	orr.w	r0, r2, #1
   83178:	607b      	str	r3, [r7, #4]
   8317a:	440a      	add	r2, r1
   8317c:	6048      	str	r0, [r1, #4]
   8317e:	6853      	ldr	r3, [r2, #4]
   83180:	3108      	adds	r1, #8
   83182:	f043 0301 	orr.w	r3, r3, #1
   83186:	6053      	str	r3, [r2, #4]
   83188:	4648      	mov	r0, r9
   8318a:	f7ff f89f 	bl	822cc <_free_r>
   8318e:	e7db      	b.n	83148 <_realloc_r+0xf4>
   83190:	428b      	cmp	r3, r1
   83192:	da33      	bge.n	831fc <_realloc_r+0x1a8>
   83194:	4641      	mov	r1, r8
   83196:	4648      	mov	r0, r9
   83198:	f7ff fb96 	bl	828c8 <_malloc_r>
   8319c:	4680      	mov	r8, r0
   8319e:	2800      	cmp	r0, #0
   831a0:	d0d2      	beq.n	83148 <_realloc_r+0xf4>
   831a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   831a6:	f1a0 0108 	sub.w	r1, r0, #8
   831aa:	f023 0201 	bic.w	r2, r3, #1
   831ae:	443a      	add	r2, r7
   831b0:	4291      	cmp	r1, r2
   831b2:	f000 80bc 	beq.w	8332e <_realloc_r+0x2da>
   831b6:	1f2a      	subs	r2, r5, #4
   831b8:	2a24      	cmp	r2, #36	; 0x24
   831ba:	d86e      	bhi.n	8329a <_realloc_r+0x246>
   831bc:	2a13      	cmp	r2, #19
   831be:	d842      	bhi.n	83246 <_realloc_r+0x1f2>
   831c0:	4603      	mov	r3, r0
   831c2:	4622      	mov	r2, r4
   831c4:	6811      	ldr	r1, [r2, #0]
   831c6:	6019      	str	r1, [r3, #0]
   831c8:	6851      	ldr	r1, [r2, #4]
   831ca:	6059      	str	r1, [r3, #4]
   831cc:	6892      	ldr	r2, [r2, #8]
   831ce:	609a      	str	r2, [r3, #8]
   831d0:	4621      	mov	r1, r4
   831d2:	4648      	mov	r0, r9
   831d4:	f7ff f87a 	bl	822cc <_free_r>
   831d8:	e7b6      	b.n	83148 <_realloc_r+0xf4>
   831da:	4611      	mov	r1, r2
   831dc:	b003      	add	sp, #12
   831de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   831e2:	f7ff bb71 	b.w	828c8 <_malloc_r>
   831e6:	f8de 2004 	ldr.w	r2, [lr, #4]
   831ea:	f106 0c10 	add.w	ip, r6, #16
   831ee:	f022 0203 	bic.w	r2, r2, #3
   831f2:	1950      	adds	r0, r2, r5
   831f4:	4560      	cmp	r0, ip
   831f6:	da3d      	bge.n	83274 <_realloc_r+0x220>
   831f8:	4670      	mov	r0, lr
   831fa:	e759      	b.n	830b0 <_realloc_r+0x5c>
   831fc:	46d0      	mov	r8, sl
   831fe:	f858 0f08 	ldr.w	r0, [r8, #8]!
   83202:	f8da 100c 	ldr.w	r1, [sl, #12]
   83206:	1f2a      	subs	r2, r5, #4
   83208:	2a24      	cmp	r2, #36	; 0x24
   8320a:	60c1      	str	r1, [r0, #12]
   8320c:	6088      	str	r0, [r1, #8]
   8320e:	f200 80a0 	bhi.w	83352 <_realloc_r+0x2fe>
   83212:	2a13      	cmp	r2, #19
   83214:	f240 809b 	bls.w	8334e <_realloc_r+0x2fa>
   83218:	6821      	ldr	r1, [r4, #0]
   8321a:	2a1b      	cmp	r2, #27
   8321c:	f8ca 1008 	str.w	r1, [sl, #8]
   83220:	6861      	ldr	r1, [r4, #4]
   83222:	f8ca 100c 	str.w	r1, [sl, #12]
   83226:	f200 80b2 	bhi.w	8338e <_realloc_r+0x33a>
   8322a:	3408      	adds	r4, #8
   8322c:	f10a 0210 	add.w	r2, sl, #16
   83230:	6821      	ldr	r1, [r4, #0]
   83232:	461d      	mov	r5, r3
   83234:	6011      	str	r1, [r2, #0]
   83236:	6861      	ldr	r1, [r4, #4]
   83238:	4657      	mov	r7, sl
   8323a:	6051      	str	r1, [r2, #4]
   8323c:	68a3      	ldr	r3, [r4, #8]
   8323e:	6093      	str	r3, [r2, #8]
   83240:	f8da 3004 	ldr.w	r3, [sl, #4]
   83244:	e774      	b.n	83130 <_realloc_r+0xdc>
   83246:	6823      	ldr	r3, [r4, #0]
   83248:	2a1b      	cmp	r2, #27
   8324a:	6003      	str	r3, [r0, #0]
   8324c:	6863      	ldr	r3, [r4, #4]
   8324e:	6043      	str	r3, [r0, #4]
   83250:	d862      	bhi.n	83318 <_realloc_r+0x2c4>
   83252:	f100 0308 	add.w	r3, r0, #8
   83256:	f104 0208 	add.w	r2, r4, #8
   8325a:	e7b3      	b.n	831c4 <_realloc_r+0x170>
   8325c:	4643      	mov	r3, r8
   8325e:	6822      	ldr	r2, [r4, #0]
   83260:	4675      	mov	r5, lr
   83262:	601a      	str	r2, [r3, #0]
   83264:	6862      	ldr	r2, [r4, #4]
   83266:	4657      	mov	r7, sl
   83268:	605a      	str	r2, [r3, #4]
   8326a:	68a2      	ldr	r2, [r4, #8]
   8326c:	609a      	str	r2, [r3, #8]
   8326e:	f8da 3004 	ldr.w	r3, [sl, #4]
   83272:	e75d      	b.n	83130 <_realloc_r+0xdc>
   83274:	1b83      	subs	r3, r0, r6
   83276:	4437      	add	r7, r6
   83278:	f043 0301 	orr.w	r3, r3, #1
   8327c:	f8cb 7008 	str.w	r7, [fp, #8]
   83280:	607b      	str	r3, [r7, #4]
   83282:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83286:	4648      	mov	r0, r9
   83288:	f003 0301 	and.w	r3, r3, #1
   8328c:	431e      	orrs	r6, r3
   8328e:	f844 6c04 	str.w	r6, [r4, #-4]
   83292:	f7ff fedd 	bl	83050 <__malloc_unlock>
   83296:	4620      	mov	r0, r4
   83298:	e75a      	b.n	83150 <_realloc_r+0xfc>
   8329a:	4621      	mov	r1, r4
   8329c:	f7ff fe70 	bl	82f80 <memmove>
   832a0:	e796      	b.n	831d0 <_realloc_r+0x17c>
   832a2:	eb02 0c03 	add.w	ip, r2, r3
   832a6:	f106 0210 	add.w	r2, r6, #16
   832aa:	4594      	cmp	ip, r2
   832ac:	f6ff af70 	blt.w	83190 <_realloc_r+0x13c>
   832b0:	4657      	mov	r7, sl
   832b2:	f857 1f08 	ldr.w	r1, [r7, #8]!
   832b6:	f8da 300c 	ldr.w	r3, [sl, #12]
   832ba:	1f2a      	subs	r2, r5, #4
   832bc:	2a24      	cmp	r2, #36	; 0x24
   832be:	60cb      	str	r3, [r1, #12]
   832c0:	6099      	str	r1, [r3, #8]
   832c2:	f200 8086 	bhi.w	833d2 <_realloc_r+0x37e>
   832c6:	2a13      	cmp	r2, #19
   832c8:	d977      	bls.n	833ba <_realloc_r+0x366>
   832ca:	6823      	ldr	r3, [r4, #0]
   832cc:	2a1b      	cmp	r2, #27
   832ce:	f8ca 3008 	str.w	r3, [sl, #8]
   832d2:	6863      	ldr	r3, [r4, #4]
   832d4:	f8ca 300c 	str.w	r3, [sl, #12]
   832d8:	f200 8084 	bhi.w	833e4 <_realloc_r+0x390>
   832dc:	3408      	adds	r4, #8
   832de:	f10a 0310 	add.w	r3, sl, #16
   832e2:	6822      	ldr	r2, [r4, #0]
   832e4:	601a      	str	r2, [r3, #0]
   832e6:	6862      	ldr	r2, [r4, #4]
   832e8:	605a      	str	r2, [r3, #4]
   832ea:	68a2      	ldr	r2, [r4, #8]
   832ec:	609a      	str	r2, [r3, #8]
   832ee:	ebc6 020c 	rsb	r2, r6, ip
   832f2:	eb0a 0306 	add.w	r3, sl, r6
   832f6:	f042 0201 	orr.w	r2, r2, #1
   832fa:	f8cb 3008 	str.w	r3, [fp, #8]
   832fe:	605a      	str	r2, [r3, #4]
   83300:	f8da 3004 	ldr.w	r3, [sl, #4]
   83304:	4648      	mov	r0, r9
   83306:	f003 0301 	and.w	r3, r3, #1
   8330a:	431e      	orrs	r6, r3
   8330c:	f8ca 6004 	str.w	r6, [sl, #4]
   83310:	f7ff fe9e 	bl	83050 <__malloc_unlock>
   83314:	4638      	mov	r0, r7
   83316:	e71b      	b.n	83150 <_realloc_r+0xfc>
   83318:	68a3      	ldr	r3, [r4, #8]
   8331a:	2a24      	cmp	r2, #36	; 0x24
   8331c:	6083      	str	r3, [r0, #8]
   8331e:	68e3      	ldr	r3, [r4, #12]
   83320:	60c3      	str	r3, [r0, #12]
   83322:	d02b      	beq.n	8337c <_realloc_r+0x328>
   83324:	f100 0310 	add.w	r3, r0, #16
   83328:	f104 0210 	add.w	r2, r4, #16
   8332c:	e74a      	b.n	831c4 <_realloc_r+0x170>
   8332e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   83332:	46a0      	mov	r8, r4
   83334:	f022 0203 	bic.w	r2, r2, #3
   83338:	4415      	add	r5, r2
   8333a:	e6f9      	b.n	83130 <_realloc_r+0xdc>
   8333c:	4621      	mov	r1, r4
   8333e:	4640      	mov	r0, r8
   83340:	4675      	mov	r5, lr
   83342:	4657      	mov	r7, sl
   83344:	f7ff fe1c 	bl	82f80 <memmove>
   83348:	f8da 3004 	ldr.w	r3, [sl, #4]
   8334c:	e6f0      	b.n	83130 <_realloc_r+0xdc>
   8334e:	4642      	mov	r2, r8
   83350:	e76e      	b.n	83230 <_realloc_r+0x1dc>
   83352:	4621      	mov	r1, r4
   83354:	4640      	mov	r0, r8
   83356:	461d      	mov	r5, r3
   83358:	4657      	mov	r7, sl
   8335a:	f7ff fe11 	bl	82f80 <memmove>
   8335e:	f8da 3004 	ldr.w	r3, [sl, #4]
   83362:	e6e5      	b.n	83130 <_realloc_r+0xdc>
   83364:	68a3      	ldr	r3, [r4, #8]
   83366:	2a24      	cmp	r2, #36	; 0x24
   83368:	f8ca 3010 	str.w	r3, [sl, #16]
   8336c:	68e3      	ldr	r3, [r4, #12]
   8336e:	f8ca 3014 	str.w	r3, [sl, #20]
   83372:	d018      	beq.n	833a6 <_realloc_r+0x352>
   83374:	3410      	adds	r4, #16
   83376:	f10a 0318 	add.w	r3, sl, #24
   8337a:	e770      	b.n	8325e <_realloc_r+0x20a>
   8337c:	6922      	ldr	r2, [r4, #16]
   8337e:	f100 0318 	add.w	r3, r0, #24
   83382:	6102      	str	r2, [r0, #16]
   83384:	6961      	ldr	r1, [r4, #20]
   83386:	f104 0218 	add.w	r2, r4, #24
   8338a:	6141      	str	r1, [r0, #20]
   8338c:	e71a      	b.n	831c4 <_realloc_r+0x170>
   8338e:	68a1      	ldr	r1, [r4, #8]
   83390:	2a24      	cmp	r2, #36	; 0x24
   83392:	f8ca 1010 	str.w	r1, [sl, #16]
   83396:	68e1      	ldr	r1, [r4, #12]
   83398:	f8ca 1014 	str.w	r1, [sl, #20]
   8339c:	d00f      	beq.n	833be <_realloc_r+0x36a>
   8339e:	3410      	adds	r4, #16
   833a0:	f10a 0218 	add.w	r2, sl, #24
   833a4:	e744      	b.n	83230 <_realloc_r+0x1dc>
   833a6:	6922      	ldr	r2, [r4, #16]
   833a8:	f10a 0320 	add.w	r3, sl, #32
   833ac:	f8ca 2018 	str.w	r2, [sl, #24]
   833b0:	6962      	ldr	r2, [r4, #20]
   833b2:	3418      	adds	r4, #24
   833b4:	f8ca 201c 	str.w	r2, [sl, #28]
   833b8:	e751      	b.n	8325e <_realloc_r+0x20a>
   833ba:	463b      	mov	r3, r7
   833bc:	e791      	b.n	832e2 <_realloc_r+0x28e>
   833be:	6921      	ldr	r1, [r4, #16]
   833c0:	f10a 0220 	add.w	r2, sl, #32
   833c4:	f8ca 1018 	str.w	r1, [sl, #24]
   833c8:	6961      	ldr	r1, [r4, #20]
   833ca:	3418      	adds	r4, #24
   833cc:	f8ca 101c 	str.w	r1, [sl, #28]
   833d0:	e72e      	b.n	83230 <_realloc_r+0x1dc>
   833d2:	4621      	mov	r1, r4
   833d4:	4638      	mov	r0, r7
   833d6:	f8cd c004 	str.w	ip, [sp, #4]
   833da:	f7ff fdd1 	bl	82f80 <memmove>
   833de:	f8dd c004 	ldr.w	ip, [sp, #4]
   833e2:	e784      	b.n	832ee <_realloc_r+0x29a>
   833e4:	68a3      	ldr	r3, [r4, #8]
   833e6:	2a24      	cmp	r2, #36	; 0x24
   833e8:	f8ca 3010 	str.w	r3, [sl, #16]
   833ec:	68e3      	ldr	r3, [r4, #12]
   833ee:	f8ca 3014 	str.w	r3, [sl, #20]
   833f2:	d003      	beq.n	833fc <_realloc_r+0x3a8>
   833f4:	3410      	adds	r4, #16
   833f6:	f10a 0318 	add.w	r3, sl, #24
   833fa:	e772      	b.n	832e2 <_realloc_r+0x28e>
   833fc:	6922      	ldr	r2, [r4, #16]
   833fe:	f10a 0320 	add.w	r3, sl, #32
   83402:	f8ca 2018 	str.w	r2, [sl, #24]
   83406:	6962      	ldr	r2, [r4, #20]
   83408:	3418      	adds	r4, #24
   8340a:	f8ca 201c 	str.w	r2, [sl, #28]
   8340e:	e768      	b.n	832e2 <_realloc_r+0x28e>
   83410:	20070588 	.word	0x20070588

00083414 <_sbrk_r>:
   83414:	b538      	push	{r3, r4, r5, lr}
   83416:	4c07      	ldr	r4, [pc, #28]	; (83434 <_sbrk_r+0x20>)
   83418:	2300      	movs	r3, #0
   8341a:	4605      	mov	r5, r0
   8341c:	4608      	mov	r0, r1
   8341e:	6023      	str	r3, [r4, #0]
   83420:	f7fd fcda 	bl	80dd8 <_sbrk>
   83424:	1c43      	adds	r3, r0, #1
   83426:	d000      	beq.n	8342a <_sbrk_r+0x16>
   83428:	bd38      	pop	{r3, r4, r5, pc}
   8342a:	6823      	ldr	r3, [r4, #0]
   8342c:	2b00      	cmp	r3, #0
   8342e:	d0fb      	beq.n	83428 <_sbrk_r+0x14>
   83430:	602b      	str	r3, [r5, #0]
   83432:	bd38      	pop	{r3, r4, r5, pc}
   83434:	20070b0c 	.word	0x20070b0c

00083438 <__sread>:
   83438:	b510      	push	{r4, lr}
   8343a:	460c      	mov	r4, r1
   8343c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83440:	f000 f9f2 	bl	83828 <_read_r>
   83444:	2800      	cmp	r0, #0
   83446:	db03      	blt.n	83450 <__sread+0x18>
   83448:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8344a:	4403      	add	r3, r0
   8344c:	6523      	str	r3, [r4, #80]	; 0x50
   8344e:	bd10      	pop	{r4, pc}
   83450:	89a3      	ldrh	r3, [r4, #12]
   83452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83456:	81a3      	strh	r3, [r4, #12]
   83458:	bd10      	pop	{r4, pc}
   8345a:	bf00      	nop

0008345c <__swrite>:
   8345c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83460:	460c      	mov	r4, r1
   83462:	8989      	ldrh	r1, [r1, #12]
   83464:	461d      	mov	r5, r3
   83466:	05cb      	lsls	r3, r1, #23
   83468:	4616      	mov	r6, r2
   8346a:	4607      	mov	r7, r0
   8346c:	d506      	bpl.n	8347c <__swrite+0x20>
   8346e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83472:	2200      	movs	r2, #0
   83474:	2302      	movs	r3, #2
   83476:	f000 f9c3 	bl	83800 <_lseek_r>
   8347a:	89a1      	ldrh	r1, [r4, #12]
   8347c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83480:	81a1      	strh	r1, [r4, #12]
   83482:	4638      	mov	r0, r7
   83484:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83488:	4632      	mov	r2, r6
   8348a:	462b      	mov	r3, r5
   8348c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83490:	f000 b8ce 	b.w	83630 <_write_r>

00083494 <__sseek>:
   83494:	b510      	push	{r4, lr}
   83496:	460c      	mov	r4, r1
   83498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8349c:	f000 f9b0 	bl	83800 <_lseek_r>
   834a0:	89a3      	ldrh	r3, [r4, #12]
   834a2:	1c42      	adds	r2, r0, #1
   834a4:	bf0e      	itee	eq
   834a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   834aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   834ae:	6520      	strne	r0, [r4, #80]	; 0x50
   834b0:	81a3      	strh	r3, [r4, #12]
   834b2:	bd10      	pop	{r4, pc}

000834b4 <__sclose>:
   834b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   834b8:	f000 b922 	b.w	83700 <_close_r>

000834bc <strlen>:
   834bc:	f020 0103 	bic.w	r1, r0, #3
   834c0:	f010 0003 	ands.w	r0, r0, #3
   834c4:	f1c0 0000 	rsb	r0, r0, #0
   834c8:	f851 3b04 	ldr.w	r3, [r1], #4
   834cc:	f100 0c04 	add.w	ip, r0, #4
   834d0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   834d4:	f06f 0200 	mvn.w	r2, #0
   834d8:	bf1c      	itt	ne
   834da:	fa22 f20c 	lsrne.w	r2, r2, ip
   834de:	4313      	orrne	r3, r2
   834e0:	f04f 0c01 	mov.w	ip, #1
   834e4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   834e8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   834ec:	eba3 020c 	sub.w	r2, r3, ip
   834f0:	ea22 0203 	bic.w	r2, r2, r3
   834f4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   834f8:	bf04      	itt	eq
   834fa:	f851 3b04 	ldreq.w	r3, [r1], #4
   834fe:	3004      	addeq	r0, #4
   83500:	d0f4      	beq.n	834ec <strlen+0x30>
   83502:	f013 0fff 	tst.w	r3, #255	; 0xff
   83506:	bf1f      	itttt	ne
   83508:	3001      	addne	r0, #1
   8350a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   8350e:	3001      	addne	r0, #1
   83510:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   83514:	bf18      	it	ne
   83516:	3001      	addne	r0, #1
   83518:	4770      	bx	lr
   8351a:	bf00      	nop

0008351c <__swbuf_r>:
   8351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8351e:	460d      	mov	r5, r1
   83520:	4614      	mov	r4, r2
   83522:	4607      	mov	r7, r0
   83524:	b110      	cbz	r0, 8352c <__swbuf_r+0x10>
   83526:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83528:	2b00      	cmp	r3, #0
   8352a:	d048      	beq.n	835be <__swbuf_r+0xa2>
   8352c:	89a2      	ldrh	r2, [r4, #12]
   8352e:	69a0      	ldr	r0, [r4, #24]
   83530:	b293      	uxth	r3, r2
   83532:	60a0      	str	r0, [r4, #8]
   83534:	0718      	lsls	r0, r3, #28
   83536:	d538      	bpl.n	835aa <__swbuf_r+0x8e>
   83538:	6926      	ldr	r6, [r4, #16]
   8353a:	2e00      	cmp	r6, #0
   8353c:	d035      	beq.n	835aa <__swbuf_r+0x8e>
   8353e:	0499      	lsls	r1, r3, #18
   83540:	b2ed      	uxtb	r5, r5
   83542:	d515      	bpl.n	83570 <__swbuf_r+0x54>
   83544:	6823      	ldr	r3, [r4, #0]
   83546:	6962      	ldr	r2, [r4, #20]
   83548:	1b9e      	subs	r6, r3, r6
   8354a:	4296      	cmp	r6, r2
   8354c:	da1c      	bge.n	83588 <__swbuf_r+0x6c>
   8354e:	3601      	adds	r6, #1
   83550:	68a2      	ldr	r2, [r4, #8]
   83552:	1c59      	adds	r1, r3, #1
   83554:	3a01      	subs	r2, #1
   83556:	60a2      	str	r2, [r4, #8]
   83558:	6021      	str	r1, [r4, #0]
   8355a:	701d      	strb	r5, [r3, #0]
   8355c:	6963      	ldr	r3, [r4, #20]
   8355e:	42b3      	cmp	r3, r6
   83560:	d01a      	beq.n	83598 <__swbuf_r+0x7c>
   83562:	89a3      	ldrh	r3, [r4, #12]
   83564:	07db      	lsls	r3, r3, #31
   83566:	d501      	bpl.n	8356c <__swbuf_r+0x50>
   83568:	2d0a      	cmp	r5, #10
   8356a:	d015      	beq.n	83598 <__swbuf_r+0x7c>
   8356c:	4628      	mov	r0, r5
   8356e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83570:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83572:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83576:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8357a:	6663      	str	r3, [r4, #100]	; 0x64
   8357c:	6823      	ldr	r3, [r4, #0]
   8357e:	81a2      	strh	r2, [r4, #12]
   83580:	6962      	ldr	r2, [r4, #20]
   83582:	1b9e      	subs	r6, r3, r6
   83584:	4296      	cmp	r6, r2
   83586:	dbe2      	blt.n	8354e <__swbuf_r+0x32>
   83588:	4638      	mov	r0, r7
   8358a:	4621      	mov	r1, r4
   8358c:	f7fe fd3e 	bl	8200c <_fflush_r>
   83590:	b940      	cbnz	r0, 835a4 <__swbuf_r+0x88>
   83592:	6823      	ldr	r3, [r4, #0]
   83594:	2601      	movs	r6, #1
   83596:	e7db      	b.n	83550 <__swbuf_r+0x34>
   83598:	4638      	mov	r0, r7
   8359a:	4621      	mov	r1, r4
   8359c:	f7fe fd36 	bl	8200c <_fflush_r>
   835a0:	2800      	cmp	r0, #0
   835a2:	d0e3      	beq.n	8356c <__swbuf_r+0x50>
   835a4:	f04f 30ff 	mov.w	r0, #4294967295
   835a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   835aa:	4638      	mov	r0, r7
   835ac:	4621      	mov	r1, r4
   835ae:	f7fe fc17 	bl	81de0 <__swsetup_r>
   835b2:	2800      	cmp	r0, #0
   835b4:	d1f6      	bne.n	835a4 <__swbuf_r+0x88>
   835b6:	89a2      	ldrh	r2, [r4, #12]
   835b8:	6926      	ldr	r6, [r4, #16]
   835ba:	b293      	uxth	r3, r2
   835bc:	e7bf      	b.n	8353e <__swbuf_r+0x22>
   835be:	f7fe fd41 	bl	82044 <__sinit>
   835c2:	e7b3      	b.n	8352c <__swbuf_r+0x10>

000835c4 <_wcrtomb_r>:
   835c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   835c8:	461e      	mov	r6, r3
   835ca:	b086      	sub	sp, #24
   835cc:	460c      	mov	r4, r1
   835ce:	4605      	mov	r5, r0
   835d0:	4617      	mov	r7, r2
   835d2:	4b0f      	ldr	r3, [pc, #60]	; (83610 <_wcrtomb_r+0x4c>)
   835d4:	b191      	cbz	r1, 835fc <_wcrtomb_r+0x38>
   835d6:	f8d3 8000 	ldr.w	r8, [r3]
   835da:	f7ff f8f3 	bl	827c4 <__locale_charset>
   835de:	9600      	str	r6, [sp, #0]
   835e0:	4603      	mov	r3, r0
   835e2:	4621      	mov	r1, r4
   835e4:	463a      	mov	r2, r7
   835e6:	4628      	mov	r0, r5
   835e8:	47c0      	blx	r8
   835ea:	1c43      	adds	r3, r0, #1
   835ec:	d103      	bne.n	835f6 <_wcrtomb_r+0x32>
   835ee:	2200      	movs	r2, #0
   835f0:	238a      	movs	r3, #138	; 0x8a
   835f2:	6032      	str	r2, [r6, #0]
   835f4:	602b      	str	r3, [r5, #0]
   835f6:	b006      	add	sp, #24
   835f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   835fc:	681f      	ldr	r7, [r3, #0]
   835fe:	f7ff f8e1 	bl	827c4 <__locale_charset>
   83602:	9600      	str	r6, [sp, #0]
   83604:	4603      	mov	r3, r0
   83606:	4622      	mov	r2, r4
   83608:	4628      	mov	r0, r5
   8360a:	a903      	add	r1, sp, #12
   8360c:	47b8      	blx	r7
   8360e:	e7ec      	b.n	835ea <_wcrtomb_r+0x26>
   83610:	20070998 	.word	0x20070998

00083614 <__ascii_wctomb>:
   83614:	b121      	cbz	r1, 83620 <__ascii_wctomb+0xc>
   83616:	2aff      	cmp	r2, #255	; 0xff
   83618:	d804      	bhi.n	83624 <__ascii_wctomb+0x10>
   8361a:	700a      	strb	r2, [r1, #0]
   8361c:	2001      	movs	r0, #1
   8361e:	4770      	bx	lr
   83620:	4608      	mov	r0, r1
   83622:	4770      	bx	lr
   83624:	238a      	movs	r3, #138	; 0x8a
   83626:	6003      	str	r3, [r0, #0]
   83628:	f04f 30ff 	mov.w	r0, #4294967295
   8362c:	4770      	bx	lr
   8362e:	bf00      	nop

00083630 <_write_r>:
   83630:	b570      	push	{r4, r5, r6, lr}
   83632:	4c08      	ldr	r4, [pc, #32]	; (83654 <_write_r+0x24>)
   83634:	4606      	mov	r6, r0
   83636:	2500      	movs	r5, #0
   83638:	4608      	mov	r0, r1
   8363a:	4611      	mov	r1, r2
   8363c:	461a      	mov	r2, r3
   8363e:	6025      	str	r5, [r4, #0]
   83640:	f7fc ffbe 	bl	805c0 <_write>
   83644:	1c43      	adds	r3, r0, #1
   83646:	d000      	beq.n	8364a <_write_r+0x1a>
   83648:	bd70      	pop	{r4, r5, r6, pc}
   8364a:	6823      	ldr	r3, [r4, #0]
   8364c:	2b00      	cmp	r3, #0
   8364e:	d0fb      	beq.n	83648 <_write_r+0x18>
   83650:	6033      	str	r3, [r6, #0]
   83652:	bd70      	pop	{r4, r5, r6, pc}
   83654:	20070b0c 	.word	0x20070b0c

00083658 <__register_exitproc>:
   83658:	b5f0      	push	{r4, r5, r6, r7, lr}
   8365a:	4c27      	ldr	r4, [pc, #156]	; (836f8 <__register_exitproc+0xa0>)
   8365c:	b085      	sub	sp, #20
   8365e:	6826      	ldr	r6, [r4, #0]
   83660:	4607      	mov	r7, r0
   83662:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   83666:	2c00      	cmp	r4, #0
   83668:	d040      	beq.n	836ec <__register_exitproc+0x94>
   8366a:	6865      	ldr	r5, [r4, #4]
   8366c:	2d1f      	cmp	r5, #31
   8366e:	dd1e      	ble.n	836ae <__register_exitproc+0x56>
   83670:	4822      	ldr	r0, [pc, #136]	; (836fc <__register_exitproc+0xa4>)
   83672:	b918      	cbnz	r0, 8367c <__register_exitproc+0x24>
   83674:	f04f 30ff 	mov.w	r0, #4294967295
   83678:	b005      	add	sp, #20
   8367a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8367c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83680:	9103      	str	r1, [sp, #12]
   83682:	9202      	str	r2, [sp, #8]
   83684:	9301      	str	r3, [sp, #4]
   83686:	f7ff f917 	bl	828b8 <malloc>
   8368a:	9903      	ldr	r1, [sp, #12]
   8368c:	4604      	mov	r4, r0
   8368e:	9a02      	ldr	r2, [sp, #8]
   83690:	9b01      	ldr	r3, [sp, #4]
   83692:	2800      	cmp	r0, #0
   83694:	d0ee      	beq.n	83674 <__register_exitproc+0x1c>
   83696:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   8369a:	2000      	movs	r0, #0
   8369c:	6025      	str	r5, [r4, #0]
   8369e:	6060      	str	r0, [r4, #4]
   836a0:	4605      	mov	r5, r0
   836a2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   836a6:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   836aa:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   836ae:	b93f      	cbnz	r7, 836c0 <__register_exitproc+0x68>
   836b0:	1c6b      	adds	r3, r5, #1
   836b2:	2000      	movs	r0, #0
   836b4:	3502      	adds	r5, #2
   836b6:	6063      	str	r3, [r4, #4]
   836b8:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   836bc:	b005      	add	sp, #20
   836be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   836c0:	2601      	movs	r6, #1
   836c2:	40ae      	lsls	r6, r5
   836c4:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   836c8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   836cc:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   836d0:	2f02      	cmp	r7, #2
   836d2:	ea42 0206 	orr.w	r2, r2, r6
   836d6:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   836da:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   836de:	d1e7      	bne.n	836b0 <__register_exitproc+0x58>
   836e0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   836e4:	431e      	orrs	r6, r3
   836e6:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   836ea:	e7e1      	b.n	836b0 <__register_exitproc+0x58>
   836ec:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   836f0:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   836f4:	e7b9      	b.n	8366a <__register_exitproc+0x12>
   836f6:	bf00      	nop
   836f8:	00083e78 	.word	0x00083e78
   836fc:	000828b9 	.word	0x000828b9

00083700 <_close_r>:
   83700:	b538      	push	{r3, r4, r5, lr}
   83702:	4c07      	ldr	r4, [pc, #28]	; (83720 <_close_r+0x20>)
   83704:	2300      	movs	r3, #0
   83706:	4605      	mov	r5, r0
   83708:	4608      	mov	r0, r1
   8370a:	6023      	str	r3, [r4, #0]
   8370c:	f7fd fb7e 	bl	80e0c <_close>
   83710:	1c43      	adds	r3, r0, #1
   83712:	d000      	beq.n	83716 <_close_r+0x16>
   83714:	bd38      	pop	{r3, r4, r5, pc}
   83716:	6823      	ldr	r3, [r4, #0]
   83718:	2b00      	cmp	r3, #0
   8371a:	d0fb      	beq.n	83714 <_close_r+0x14>
   8371c:	602b      	str	r3, [r5, #0]
   8371e:	bd38      	pop	{r3, r4, r5, pc}
   83720:	20070b0c 	.word	0x20070b0c

00083724 <_fclose_r>:
   83724:	b570      	push	{r4, r5, r6, lr}
   83726:	460c      	mov	r4, r1
   83728:	4605      	mov	r5, r0
   8372a:	b131      	cbz	r1, 8373a <_fclose_r+0x16>
   8372c:	b110      	cbz	r0, 83734 <_fclose_r+0x10>
   8372e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83730:	2b00      	cmp	r3, #0
   83732:	d02f      	beq.n	83794 <_fclose_r+0x70>
   83734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83738:	b90b      	cbnz	r3, 8373e <_fclose_r+0x1a>
   8373a:	2000      	movs	r0, #0
   8373c:	bd70      	pop	{r4, r5, r6, pc}
   8373e:	4628      	mov	r0, r5
   83740:	4621      	mov	r1, r4
   83742:	f7fe fc63 	bl	8200c <_fflush_r>
   83746:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83748:	4606      	mov	r6, r0
   8374a:	b133      	cbz	r3, 8375a <_fclose_r+0x36>
   8374c:	4628      	mov	r0, r5
   8374e:	69e1      	ldr	r1, [r4, #28]
   83750:	4798      	blx	r3
   83752:	2800      	cmp	r0, #0
   83754:	bfb8      	it	lt
   83756:	f04f 36ff 	movlt.w	r6, #4294967295
   8375a:	89a3      	ldrh	r3, [r4, #12]
   8375c:	061b      	lsls	r3, r3, #24
   8375e:	d41c      	bmi.n	8379a <_fclose_r+0x76>
   83760:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83762:	b141      	cbz	r1, 83776 <_fclose_r+0x52>
   83764:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83768:	4299      	cmp	r1, r3
   8376a:	d002      	beq.n	83772 <_fclose_r+0x4e>
   8376c:	4628      	mov	r0, r5
   8376e:	f7fe fdad 	bl	822cc <_free_r>
   83772:	2300      	movs	r3, #0
   83774:	6323      	str	r3, [r4, #48]	; 0x30
   83776:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83778:	b121      	cbz	r1, 83784 <_fclose_r+0x60>
   8377a:	4628      	mov	r0, r5
   8377c:	f7fe fda6 	bl	822cc <_free_r>
   83780:	2300      	movs	r3, #0
   83782:	6463      	str	r3, [r4, #68]	; 0x44
   83784:	f7fe fcd8 	bl	82138 <__sfp_lock_acquire>
   83788:	2300      	movs	r3, #0
   8378a:	81a3      	strh	r3, [r4, #12]
   8378c:	f7fe fcd6 	bl	8213c <__sfp_lock_release>
   83790:	4630      	mov	r0, r6
   83792:	bd70      	pop	{r4, r5, r6, pc}
   83794:	f7fe fc56 	bl	82044 <__sinit>
   83798:	e7cc      	b.n	83734 <_fclose_r+0x10>
   8379a:	4628      	mov	r0, r5
   8379c:	6921      	ldr	r1, [r4, #16]
   8379e:	f7fe fd95 	bl	822cc <_free_r>
   837a2:	e7dd      	b.n	83760 <_fclose_r+0x3c>

000837a4 <fclose>:
   837a4:	4b02      	ldr	r3, [pc, #8]	; (837b0 <fclose+0xc>)
   837a6:	4601      	mov	r1, r0
   837a8:	6818      	ldr	r0, [r3, #0]
   837aa:	f7ff bfbb 	b.w	83724 <_fclose_r>
   837ae:	bf00      	nop
   837b0:	20070560 	.word	0x20070560

000837b4 <_fstat_r>:
   837b4:	b538      	push	{r3, r4, r5, lr}
   837b6:	4c08      	ldr	r4, [pc, #32]	; (837d8 <_fstat_r+0x24>)
   837b8:	2300      	movs	r3, #0
   837ba:	4605      	mov	r5, r0
   837bc:	4608      	mov	r0, r1
   837be:	4611      	mov	r1, r2
   837c0:	6023      	str	r3, [r4, #0]
   837c2:	f7fd fb27 	bl	80e14 <_fstat>
   837c6:	1c43      	adds	r3, r0, #1
   837c8:	d000      	beq.n	837cc <_fstat_r+0x18>
   837ca:	bd38      	pop	{r3, r4, r5, pc}
   837cc:	6823      	ldr	r3, [r4, #0]
   837ce:	2b00      	cmp	r3, #0
   837d0:	d0fb      	beq.n	837ca <_fstat_r+0x16>
   837d2:	602b      	str	r3, [r5, #0]
   837d4:	bd38      	pop	{r3, r4, r5, pc}
   837d6:	bf00      	nop
   837d8:	20070b0c 	.word	0x20070b0c

000837dc <_isatty_r>:
   837dc:	b538      	push	{r3, r4, r5, lr}
   837de:	4c07      	ldr	r4, [pc, #28]	; (837fc <_isatty_r+0x20>)
   837e0:	2300      	movs	r3, #0
   837e2:	4605      	mov	r5, r0
   837e4:	4608      	mov	r0, r1
   837e6:	6023      	str	r3, [r4, #0]
   837e8:	f7fd fb1a 	bl	80e20 <_isatty>
   837ec:	1c43      	adds	r3, r0, #1
   837ee:	d000      	beq.n	837f2 <_isatty_r+0x16>
   837f0:	bd38      	pop	{r3, r4, r5, pc}
   837f2:	6823      	ldr	r3, [r4, #0]
   837f4:	2b00      	cmp	r3, #0
   837f6:	d0fb      	beq.n	837f0 <_isatty_r+0x14>
   837f8:	602b      	str	r3, [r5, #0]
   837fa:	bd38      	pop	{r3, r4, r5, pc}
   837fc:	20070b0c 	.word	0x20070b0c

00083800 <_lseek_r>:
   83800:	b570      	push	{r4, r5, r6, lr}
   83802:	4c08      	ldr	r4, [pc, #32]	; (83824 <_lseek_r+0x24>)
   83804:	4606      	mov	r6, r0
   83806:	2500      	movs	r5, #0
   83808:	4608      	mov	r0, r1
   8380a:	4611      	mov	r1, r2
   8380c:	461a      	mov	r2, r3
   8380e:	6025      	str	r5, [r4, #0]
   83810:	f7fd fb08 	bl	80e24 <_lseek>
   83814:	1c43      	adds	r3, r0, #1
   83816:	d000      	beq.n	8381a <_lseek_r+0x1a>
   83818:	bd70      	pop	{r4, r5, r6, pc}
   8381a:	6823      	ldr	r3, [r4, #0]
   8381c:	2b00      	cmp	r3, #0
   8381e:	d0fb      	beq.n	83818 <_lseek_r+0x18>
   83820:	6033      	str	r3, [r6, #0]
   83822:	bd70      	pop	{r4, r5, r6, pc}
   83824:	20070b0c 	.word	0x20070b0c

00083828 <_read_r>:
   83828:	b570      	push	{r4, r5, r6, lr}
   8382a:	4c08      	ldr	r4, [pc, #32]	; (8384c <_read_r+0x24>)
   8382c:	4606      	mov	r6, r0
   8382e:	2500      	movs	r5, #0
   83830:	4608      	mov	r0, r1
   83832:	4611      	mov	r1, r2
   83834:	461a      	mov	r2, r3
   83836:	6025      	str	r5, [r4, #0]
   83838:	f7fc fc86 	bl	80148 <_read>
   8383c:	1c43      	adds	r3, r0, #1
   8383e:	d000      	beq.n	83842 <_read_r+0x1a>
   83840:	bd70      	pop	{r4, r5, r6, pc}
   83842:	6823      	ldr	r3, [r4, #0]
   83844:	2b00      	cmp	r3, #0
   83846:	d0fb      	beq.n	83840 <_read_r+0x18>
   83848:	6033      	str	r3, [r6, #0]
   8384a:	bd70      	pop	{r4, r5, r6, pc}
   8384c:	20070b0c 	.word	0x20070b0c

00083850 <__aeabi_uldivmod>:
   83850:	b94b      	cbnz	r3, 83866 <__aeabi_uldivmod+0x16>
   83852:	b942      	cbnz	r2, 83866 <__aeabi_uldivmod+0x16>
   83854:	2900      	cmp	r1, #0
   83856:	bf08      	it	eq
   83858:	2800      	cmpeq	r0, #0
   8385a:	d002      	beq.n	83862 <__aeabi_uldivmod+0x12>
   8385c:	f04f 31ff 	mov.w	r1, #4294967295
   83860:	4608      	mov	r0, r1
   83862:	f000 b83b 	b.w	838dc <__aeabi_idiv0>
   83866:	b082      	sub	sp, #8
   83868:	46ec      	mov	ip, sp
   8386a:	e92d 5000 	stmdb	sp!, {ip, lr}
   8386e:	f000 f81d 	bl	838ac <__gnu_uldivmod_helper>
   83872:	f8dd e004 	ldr.w	lr, [sp, #4]
   83876:	b002      	add	sp, #8
   83878:	bc0c      	pop	{r2, r3}
   8387a:	4770      	bx	lr

0008387c <__gnu_ldivmod_helper>:
   8387c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83880:	9e08      	ldr	r6, [sp, #32]
   83882:	4614      	mov	r4, r2
   83884:	461d      	mov	r5, r3
   83886:	4680      	mov	r8, r0
   83888:	4689      	mov	r9, r1
   8388a:	f000 f829 	bl	838e0 <__divdi3>
   8388e:	fb04 f301 	mul.w	r3, r4, r1
   83892:	fba4 ab00 	umull	sl, fp, r4, r0
   83896:	fb00 3205 	mla	r2, r0, r5, r3
   8389a:	4493      	add	fp, r2
   8389c:	ebb8 080a 	subs.w	r8, r8, sl
   838a0:	eb69 090b 	sbc.w	r9, r9, fp
   838a4:	e9c6 8900 	strd	r8, r9, [r6]
   838a8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000838ac <__gnu_uldivmod_helper>:
   838ac:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   838b0:	9e08      	ldr	r6, [sp, #32]
   838b2:	4614      	mov	r4, r2
   838b4:	461d      	mov	r5, r3
   838b6:	4680      	mov	r8, r0
   838b8:	4689      	mov	r9, r1
   838ba:	f000 f961 	bl	83b80 <__udivdi3>
   838be:	fb00 f505 	mul.w	r5, r0, r5
   838c2:	fba0 ab04 	umull	sl, fp, r0, r4
   838c6:	fb04 5401 	mla	r4, r4, r1, r5
   838ca:	44a3      	add	fp, r4
   838cc:	ebb8 080a 	subs.w	r8, r8, sl
   838d0:	eb69 090b 	sbc.w	r9, r9, fp
   838d4:	e9c6 8900 	strd	r8, r9, [r6]
   838d8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000838dc <__aeabi_idiv0>:
   838dc:	4770      	bx	lr
   838de:	bf00      	nop

000838e0 <__divdi3>:
   838e0:	2900      	cmp	r1, #0
   838e2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   838e6:	f2c0 80a1 	blt.w	83a2c <__divdi3+0x14c>
   838ea:	2400      	movs	r4, #0
   838ec:	2b00      	cmp	r3, #0
   838ee:	f2c0 8098 	blt.w	83a22 <__divdi3+0x142>
   838f2:	4615      	mov	r5, r2
   838f4:	4606      	mov	r6, r0
   838f6:	460f      	mov	r7, r1
   838f8:	2b00      	cmp	r3, #0
   838fa:	d13f      	bne.n	8397c <__divdi3+0x9c>
   838fc:	428a      	cmp	r2, r1
   838fe:	d958      	bls.n	839b2 <__divdi3+0xd2>
   83900:	fab2 f382 	clz	r3, r2
   83904:	b14b      	cbz	r3, 8391a <__divdi3+0x3a>
   83906:	f1c3 0220 	rsb	r2, r3, #32
   8390a:	fa01 f703 	lsl.w	r7, r1, r3
   8390e:	fa20 f202 	lsr.w	r2, r0, r2
   83912:	409d      	lsls	r5, r3
   83914:	fa00 f603 	lsl.w	r6, r0, r3
   83918:	4317      	orrs	r7, r2
   8391a:	0c29      	lsrs	r1, r5, #16
   8391c:	fbb7 f2f1 	udiv	r2, r7, r1
   83920:	fb01 7712 	mls	r7, r1, r2, r7
   83924:	b2a8      	uxth	r0, r5
   83926:	fb00 f302 	mul.w	r3, r0, r2
   8392a:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   8392e:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   83932:	42bb      	cmp	r3, r7
   83934:	d909      	bls.n	8394a <__divdi3+0x6a>
   83936:	197f      	adds	r7, r7, r5
   83938:	f102 3cff 	add.w	ip, r2, #4294967295
   8393c:	f080 8105 	bcs.w	83b4a <__divdi3+0x26a>
   83940:	42bb      	cmp	r3, r7
   83942:	f240 8102 	bls.w	83b4a <__divdi3+0x26a>
   83946:	3a02      	subs	r2, #2
   83948:	442f      	add	r7, r5
   8394a:	1aff      	subs	r7, r7, r3
   8394c:	fbb7 f3f1 	udiv	r3, r7, r1
   83950:	fb01 7113 	mls	r1, r1, r3, r7
   83954:	fb00 f003 	mul.w	r0, r0, r3
   83958:	b2b6      	uxth	r6, r6
   8395a:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   8395e:	4288      	cmp	r0, r1
   83960:	d908      	bls.n	83974 <__divdi3+0x94>
   83962:	1949      	adds	r1, r1, r5
   83964:	f103 37ff 	add.w	r7, r3, #4294967295
   83968:	f080 80f1 	bcs.w	83b4e <__divdi3+0x26e>
   8396c:	4288      	cmp	r0, r1
   8396e:	f240 80ee 	bls.w	83b4e <__divdi3+0x26e>
   83972:	3b02      	subs	r3, #2
   83974:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83978:	2300      	movs	r3, #0
   8397a:	e003      	b.n	83984 <__divdi3+0xa4>
   8397c:	428b      	cmp	r3, r1
   8397e:	d90a      	bls.n	83996 <__divdi3+0xb6>
   83980:	2300      	movs	r3, #0
   83982:	461a      	mov	r2, r3
   83984:	4610      	mov	r0, r2
   83986:	4619      	mov	r1, r3
   83988:	b114      	cbz	r4, 83990 <__divdi3+0xb0>
   8398a:	4240      	negs	r0, r0
   8398c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83990:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83994:	4770      	bx	lr
   83996:	fab3 f883 	clz	r8, r3
   8399a:	f1b8 0f00 	cmp.w	r8, #0
   8399e:	f040 8088 	bne.w	83ab2 <__divdi3+0x1d2>
   839a2:	428b      	cmp	r3, r1
   839a4:	d302      	bcc.n	839ac <__divdi3+0xcc>
   839a6:	4282      	cmp	r2, r0
   839a8:	f200 80e2 	bhi.w	83b70 <__divdi3+0x290>
   839ac:	2300      	movs	r3, #0
   839ae:	2201      	movs	r2, #1
   839b0:	e7e8      	b.n	83984 <__divdi3+0xa4>
   839b2:	b912      	cbnz	r2, 839ba <__divdi3+0xda>
   839b4:	2301      	movs	r3, #1
   839b6:	fbb3 f5f2 	udiv	r5, r3, r2
   839ba:	fab5 f285 	clz	r2, r5
   839be:	2a00      	cmp	r2, #0
   839c0:	d13a      	bne.n	83a38 <__divdi3+0x158>
   839c2:	1b7f      	subs	r7, r7, r5
   839c4:	0c28      	lsrs	r0, r5, #16
   839c6:	fa1f fc85 	uxth.w	ip, r5
   839ca:	2301      	movs	r3, #1
   839cc:	fbb7 f1f0 	udiv	r1, r7, r0
   839d0:	fb00 7711 	mls	r7, r0, r1, r7
   839d4:	fb0c f201 	mul.w	r2, ip, r1
   839d8:	ea4f 4816 	mov.w	r8, r6, lsr #16
   839dc:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   839e0:	42ba      	cmp	r2, r7
   839e2:	d907      	bls.n	839f4 <__divdi3+0x114>
   839e4:	197f      	adds	r7, r7, r5
   839e6:	f101 38ff 	add.w	r8, r1, #4294967295
   839ea:	d202      	bcs.n	839f2 <__divdi3+0x112>
   839ec:	42ba      	cmp	r2, r7
   839ee:	f200 80c4 	bhi.w	83b7a <__divdi3+0x29a>
   839f2:	4641      	mov	r1, r8
   839f4:	1abf      	subs	r7, r7, r2
   839f6:	fbb7 f2f0 	udiv	r2, r7, r0
   839fa:	fb00 7012 	mls	r0, r0, r2, r7
   839fe:	fb0c fc02 	mul.w	ip, ip, r2
   83a02:	b2b6      	uxth	r6, r6
   83a04:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   83a08:	4584      	cmp	ip, r0
   83a0a:	d907      	bls.n	83a1c <__divdi3+0x13c>
   83a0c:	1940      	adds	r0, r0, r5
   83a0e:	f102 37ff 	add.w	r7, r2, #4294967295
   83a12:	d202      	bcs.n	83a1a <__divdi3+0x13a>
   83a14:	4584      	cmp	ip, r0
   83a16:	f200 80ae 	bhi.w	83b76 <__divdi3+0x296>
   83a1a:	463a      	mov	r2, r7
   83a1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   83a20:	e7b0      	b.n	83984 <__divdi3+0xa4>
   83a22:	43e4      	mvns	r4, r4
   83a24:	4252      	negs	r2, r2
   83a26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83a2a:	e762      	b.n	838f2 <__divdi3+0x12>
   83a2c:	4240      	negs	r0, r0
   83a2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83a32:	f04f 34ff 	mov.w	r4, #4294967295
   83a36:	e759      	b.n	838ec <__divdi3+0xc>
   83a38:	4095      	lsls	r5, r2
   83a3a:	f1c2 0920 	rsb	r9, r2, #32
   83a3e:	fa27 f109 	lsr.w	r1, r7, r9
   83a42:	fa26 f909 	lsr.w	r9, r6, r9
   83a46:	4097      	lsls	r7, r2
   83a48:	0c28      	lsrs	r0, r5, #16
   83a4a:	fbb1 f8f0 	udiv	r8, r1, r0
   83a4e:	fb00 1118 	mls	r1, r0, r8, r1
   83a52:	fa1f fc85 	uxth.w	ip, r5
   83a56:	fb0c f308 	mul.w	r3, ip, r8
   83a5a:	ea49 0907 	orr.w	r9, r9, r7
   83a5e:	ea4f 4719 	mov.w	r7, r9, lsr #16
   83a62:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   83a66:	428b      	cmp	r3, r1
   83a68:	fa06 f602 	lsl.w	r6, r6, r2
   83a6c:	d908      	bls.n	83a80 <__divdi3+0x1a0>
   83a6e:	1949      	adds	r1, r1, r5
   83a70:	f108 32ff 	add.w	r2, r8, #4294967295
   83a74:	d27a      	bcs.n	83b6c <__divdi3+0x28c>
   83a76:	428b      	cmp	r3, r1
   83a78:	d978      	bls.n	83b6c <__divdi3+0x28c>
   83a7a:	f1a8 0802 	sub.w	r8, r8, #2
   83a7e:	4429      	add	r1, r5
   83a80:	1ac9      	subs	r1, r1, r3
   83a82:	fbb1 f3f0 	udiv	r3, r1, r0
   83a86:	fb00 1713 	mls	r7, r0, r3, r1
   83a8a:	fb0c f203 	mul.w	r2, ip, r3
   83a8e:	fa1f f989 	uxth.w	r9, r9
   83a92:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   83a96:	42ba      	cmp	r2, r7
   83a98:	d907      	bls.n	83aaa <__divdi3+0x1ca>
   83a9a:	197f      	adds	r7, r7, r5
   83a9c:	f103 31ff 	add.w	r1, r3, #4294967295
   83aa0:	d260      	bcs.n	83b64 <__divdi3+0x284>
   83aa2:	42ba      	cmp	r2, r7
   83aa4:	d95e      	bls.n	83b64 <__divdi3+0x284>
   83aa6:	3b02      	subs	r3, #2
   83aa8:	442f      	add	r7, r5
   83aaa:	1abf      	subs	r7, r7, r2
   83aac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83ab0:	e78c      	b.n	839cc <__divdi3+0xec>
   83ab2:	f1c8 0220 	rsb	r2, r8, #32
   83ab6:	fa25 f102 	lsr.w	r1, r5, r2
   83aba:	fa03 fc08 	lsl.w	ip, r3, r8
   83abe:	fa27 f302 	lsr.w	r3, r7, r2
   83ac2:	fa20 f202 	lsr.w	r2, r0, r2
   83ac6:	fa07 f708 	lsl.w	r7, r7, r8
   83aca:	ea41 0c0c 	orr.w	ip, r1, ip
   83ace:	ea4f 491c 	mov.w	r9, ip, lsr #16
   83ad2:	fbb3 f1f9 	udiv	r1, r3, r9
   83ad6:	fb09 3311 	mls	r3, r9, r1, r3
   83ada:	fa1f fa8c 	uxth.w	sl, ip
   83ade:	fb0a fb01 	mul.w	fp, sl, r1
   83ae2:	4317      	orrs	r7, r2
   83ae4:	0c3a      	lsrs	r2, r7, #16
   83ae6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83aea:	459b      	cmp	fp, r3
   83aec:	fa05 f008 	lsl.w	r0, r5, r8
   83af0:	d908      	bls.n	83b04 <__divdi3+0x224>
   83af2:	eb13 030c 	adds.w	r3, r3, ip
   83af6:	f101 32ff 	add.w	r2, r1, #4294967295
   83afa:	d235      	bcs.n	83b68 <__divdi3+0x288>
   83afc:	459b      	cmp	fp, r3
   83afe:	d933      	bls.n	83b68 <__divdi3+0x288>
   83b00:	3902      	subs	r1, #2
   83b02:	4463      	add	r3, ip
   83b04:	ebcb 0303 	rsb	r3, fp, r3
   83b08:	fbb3 f2f9 	udiv	r2, r3, r9
   83b0c:	fb09 3312 	mls	r3, r9, r2, r3
   83b10:	fb0a fa02 	mul.w	sl, sl, r2
   83b14:	b2bf      	uxth	r7, r7
   83b16:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   83b1a:	45ba      	cmp	sl, r7
   83b1c:	d908      	bls.n	83b30 <__divdi3+0x250>
   83b1e:	eb17 070c 	adds.w	r7, r7, ip
   83b22:	f102 33ff 	add.w	r3, r2, #4294967295
   83b26:	d21b      	bcs.n	83b60 <__divdi3+0x280>
   83b28:	45ba      	cmp	sl, r7
   83b2a:	d919      	bls.n	83b60 <__divdi3+0x280>
   83b2c:	3a02      	subs	r2, #2
   83b2e:	4467      	add	r7, ip
   83b30:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   83b34:	fba5 0100 	umull	r0, r1, r5, r0
   83b38:	ebca 0707 	rsb	r7, sl, r7
   83b3c:	428f      	cmp	r7, r1
   83b3e:	f04f 0300 	mov.w	r3, #0
   83b42:	d30a      	bcc.n	83b5a <__divdi3+0x27a>
   83b44:	d005      	beq.n	83b52 <__divdi3+0x272>
   83b46:	462a      	mov	r2, r5
   83b48:	e71c      	b.n	83984 <__divdi3+0xa4>
   83b4a:	4662      	mov	r2, ip
   83b4c:	e6fd      	b.n	8394a <__divdi3+0x6a>
   83b4e:	463b      	mov	r3, r7
   83b50:	e710      	b.n	83974 <__divdi3+0x94>
   83b52:	fa06 f608 	lsl.w	r6, r6, r8
   83b56:	4286      	cmp	r6, r0
   83b58:	d2f5      	bcs.n	83b46 <__divdi3+0x266>
   83b5a:	1e6a      	subs	r2, r5, #1
   83b5c:	2300      	movs	r3, #0
   83b5e:	e711      	b.n	83984 <__divdi3+0xa4>
   83b60:	461a      	mov	r2, r3
   83b62:	e7e5      	b.n	83b30 <__divdi3+0x250>
   83b64:	460b      	mov	r3, r1
   83b66:	e7a0      	b.n	83aaa <__divdi3+0x1ca>
   83b68:	4611      	mov	r1, r2
   83b6a:	e7cb      	b.n	83b04 <__divdi3+0x224>
   83b6c:	4690      	mov	r8, r2
   83b6e:	e787      	b.n	83a80 <__divdi3+0x1a0>
   83b70:	4643      	mov	r3, r8
   83b72:	4642      	mov	r2, r8
   83b74:	e706      	b.n	83984 <__divdi3+0xa4>
   83b76:	3a02      	subs	r2, #2
   83b78:	e750      	b.n	83a1c <__divdi3+0x13c>
   83b7a:	3902      	subs	r1, #2
   83b7c:	442f      	add	r7, r5
   83b7e:	e739      	b.n	839f4 <__divdi3+0x114>

00083b80 <__udivdi3>:
   83b80:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83b84:	4614      	mov	r4, r2
   83b86:	4605      	mov	r5, r0
   83b88:	460e      	mov	r6, r1
   83b8a:	2b00      	cmp	r3, #0
   83b8c:	d143      	bne.n	83c16 <__udivdi3+0x96>
   83b8e:	428a      	cmp	r2, r1
   83b90:	d953      	bls.n	83c3a <__udivdi3+0xba>
   83b92:	fab2 f782 	clz	r7, r2
   83b96:	b157      	cbz	r7, 83bae <__udivdi3+0x2e>
   83b98:	f1c7 0620 	rsb	r6, r7, #32
   83b9c:	fa20 f606 	lsr.w	r6, r0, r6
   83ba0:	fa01 f307 	lsl.w	r3, r1, r7
   83ba4:	fa02 f407 	lsl.w	r4, r2, r7
   83ba8:	fa00 f507 	lsl.w	r5, r0, r7
   83bac:	431e      	orrs	r6, r3
   83bae:	0c21      	lsrs	r1, r4, #16
   83bb0:	fbb6 f2f1 	udiv	r2, r6, r1
   83bb4:	fb01 6612 	mls	r6, r1, r2, r6
   83bb8:	b2a0      	uxth	r0, r4
   83bba:	fb00 f302 	mul.w	r3, r0, r2
   83bbe:	0c2f      	lsrs	r7, r5, #16
   83bc0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   83bc4:	42b3      	cmp	r3, r6
   83bc6:	d909      	bls.n	83bdc <__udivdi3+0x5c>
   83bc8:	1936      	adds	r6, r6, r4
   83bca:	f102 37ff 	add.w	r7, r2, #4294967295
   83bce:	f080 80fd 	bcs.w	83dcc <__udivdi3+0x24c>
   83bd2:	42b3      	cmp	r3, r6
   83bd4:	f240 80fa 	bls.w	83dcc <__udivdi3+0x24c>
   83bd8:	3a02      	subs	r2, #2
   83bda:	4426      	add	r6, r4
   83bdc:	1af6      	subs	r6, r6, r3
   83bde:	fbb6 f3f1 	udiv	r3, r6, r1
   83be2:	fb01 6113 	mls	r1, r1, r3, r6
   83be6:	fb00 f003 	mul.w	r0, r0, r3
   83bea:	b2ad      	uxth	r5, r5
   83bec:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   83bf0:	4288      	cmp	r0, r1
   83bf2:	d908      	bls.n	83c06 <__udivdi3+0x86>
   83bf4:	1909      	adds	r1, r1, r4
   83bf6:	f103 36ff 	add.w	r6, r3, #4294967295
   83bfa:	f080 80e9 	bcs.w	83dd0 <__udivdi3+0x250>
   83bfe:	4288      	cmp	r0, r1
   83c00:	f240 80e6 	bls.w	83dd0 <__udivdi3+0x250>
   83c04:	3b02      	subs	r3, #2
   83c06:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83c0a:	2300      	movs	r3, #0
   83c0c:	4610      	mov	r0, r2
   83c0e:	4619      	mov	r1, r3
   83c10:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83c14:	4770      	bx	lr
   83c16:	428b      	cmp	r3, r1
   83c18:	d84c      	bhi.n	83cb4 <__udivdi3+0x134>
   83c1a:	fab3 f683 	clz	r6, r3
   83c1e:	2e00      	cmp	r6, #0
   83c20:	d14f      	bne.n	83cc2 <__udivdi3+0x142>
   83c22:	428b      	cmp	r3, r1
   83c24:	d302      	bcc.n	83c2c <__udivdi3+0xac>
   83c26:	4282      	cmp	r2, r0
   83c28:	f200 80dd 	bhi.w	83de6 <__udivdi3+0x266>
   83c2c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83c30:	2300      	movs	r3, #0
   83c32:	2201      	movs	r2, #1
   83c34:	4610      	mov	r0, r2
   83c36:	4619      	mov	r1, r3
   83c38:	4770      	bx	lr
   83c3a:	b912      	cbnz	r2, 83c42 <__udivdi3+0xc2>
   83c3c:	2401      	movs	r4, #1
   83c3e:	fbb4 f4f2 	udiv	r4, r4, r2
   83c42:	fab4 f284 	clz	r2, r4
   83c46:	2a00      	cmp	r2, #0
   83c48:	f040 8082 	bne.w	83d50 <__udivdi3+0x1d0>
   83c4c:	1b09      	subs	r1, r1, r4
   83c4e:	0c26      	lsrs	r6, r4, #16
   83c50:	b2a7      	uxth	r7, r4
   83c52:	2301      	movs	r3, #1
   83c54:	fbb1 f0f6 	udiv	r0, r1, r6
   83c58:	fb06 1110 	mls	r1, r6, r0, r1
   83c5c:	fb07 f200 	mul.w	r2, r7, r0
   83c60:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   83c64:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   83c68:	428a      	cmp	r2, r1
   83c6a:	d907      	bls.n	83c7c <__udivdi3+0xfc>
   83c6c:	1909      	adds	r1, r1, r4
   83c6e:	f100 3cff 	add.w	ip, r0, #4294967295
   83c72:	d202      	bcs.n	83c7a <__udivdi3+0xfa>
   83c74:	428a      	cmp	r2, r1
   83c76:	f200 80c8 	bhi.w	83e0a <__udivdi3+0x28a>
   83c7a:	4660      	mov	r0, ip
   83c7c:	1a89      	subs	r1, r1, r2
   83c7e:	fbb1 f2f6 	udiv	r2, r1, r6
   83c82:	fb06 1112 	mls	r1, r6, r2, r1
   83c86:	fb07 f702 	mul.w	r7, r7, r2
   83c8a:	b2ad      	uxth	r5, r5
   83c8c:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   83c90:	42af      	cmp	r7, r5
   83c92:	d908      	bls.n	83ca6 <__udivdi3+0x126>
   83c94:	192c      	adds	r4, r5, r4
   83c96:	f102 31ff 	add.w	r1, r2, #4294967295
   83c9a:	f080 809b 	bcs.w	83dd4 <__udivdi3+0x254>
   83c9e:	42a7      	cmp	r7, r4
   83ca0:	f240 8098 	bls.w	83dd4 <__udivdi3+0x254>
   83ca4:	3a02      	subs	r2, #2
   83ca6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   83caa:	4610      	mov	r0, r2
   83cac:	4619      	mov	r1, r3
   83cae:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83cb2:	4770      	bx	lr
   83cb4:	2300      	movs	r3, #0
   83cb6:	461a      	mov	r2, r3
   83cb8:	4610      	mov	r0, r2
   83cba:	4619      	mov	r1, r3
   83cbc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83cc0:	4770      	bx	lr
   83cc2:	f1c6 0520 	rsb	r5, r6, #32
   83cc6:	fa22 f705 	lsr.w	r7, r2, r5
   83cca:	fa03 f406 	lsl.w	r4, r3, r6
   83cce:	fa21 f305 	lsr.w	r3, r1, r5
   83cd2:	fa01 fb06 	lsl.w	fp, r1, r6
   83cd6:	fa20 f505 	lsr.w	r5, r0, r5
   83cda:	433c      	orrs	r4, r7
   83cdc:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83ce0:	fbb3 fcf8 	udiv	ip, r3, r8
   83ce4:	fb08 331c 	mls	r3, r8, ip, r3
   83ce8:	fa1f f984 	uxth.w	r9, r4
   83cec:	fb09 fa0c 	mul.w	sl, r9, ip
   83cf0:	ea45 0b0b 	orr.w	fp, r5, fp
   83cf4:	ea4f 451b 	mov.w	r5, fp, lsr #16
   83cf8:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   83cfc:	459a      	cmp	sl, r3
   83cfe:	fa02 f206 	lsl.w	r2, r2, r6
   83d02:	d904      	bls.n	83d0e <__udivdi3+0x18e>
   83d04:	191b      	adds	r3, r3, r4
   83d06:	f10c 35ff 	add.w	r5, ip, #4294967295
   83d0a:	d36f      	bcc.n	83dec <__udivdi3+0x26c>
   83d0c:	46ac      	mov	ip, r5
   83d0e:	ebca 0303 	rsb	r3, sl, r3
   83d12:	fbb3 f5f8 	udiv	r5, r3, r8
   83d16:	fb08 3315 	mls	r3, r8, r5, r3
   83d1a:	fb09 f905 	mul.w	r9, r9, r5
   83d1e:	fa1f fb8b 	uxth.w	fp, fp
   83d22:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   83d26:	45b9      	cmp	r9, r7
   83d28:	d904      	bls.n	83d34 <__udivdi3+0x1b4>
   83d2a:	193f      	adds	r7, r7, r4
   83d2c:	f105 33ff 	add.w	r3, r5, #4294967295
   83d30:	d362      	bcc.n	83df8 <__udivdi3+0x278>
   83d32:	461d      	mov	r5, r3
   83d34:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   83d38:	fbac 2302 	umull	r2, r3, ip, r2
   83d3c:	ebc9 0707 	rsb	r7, r9, r7
   83d40:	429f      	cmp	r7, r3
   83d42:	f04f 0500 	mov.w	r5, #0
   83d46:	d34a      	bcc.n	83dde <__udivdi3+0x25e>
   83d48:	d046      	beq.n	83dd8 <__udivdi3+0x258>
   83d4a:	4662      	mov	r2, ip
   83d4c:	462b      	mov	r3, r5
   83d4e:	e75d      	b.n	83c0c <__udivdi3+0x8c>
   83d50:	4094      	lsls	r4, r2
   83d52:	f1c2 0920 	rsb	r9, r2, #32
   83d56:	fa21 fc09 	lsr.w	ip, r1, r9
   83d5a:	4091      	lsls	r1, r2
   83d5c:	fa20 f909 	lsr.w	r9, r0, r9
   83d60:	0c26      	lsrs	r6, r4, #16
   83d62:	fbbc f8f6 	udiv	r8, ip, r6
   83d66:	fb06 cc18 	mls	ip, r6, r8, ip
   83d6a:	b2a7      	uxth	r7, r4
   83d6c:	fb07 f308 	mul.w	r3, r7, r8
   83d70:	ea49 0901 	orr.w	r9, r9, r1
   83d74:	ea4f 4119 	mov.w	r1, r9, lsr #16
   83d78:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   83d7c:	4563      	cmp	r3, ip
   83d7e:	fa00 f502 	lsl.w	r5, r0, r2
   83d82:	d909      	bls.n	83d98 <__udivdi3+0x218>
   83d84:	eb1c 0c04 	adds.w	ip, ip, r4
   83d88:	f108 32ff 	add.w	r2, r8, #4294967295
   83d8c:	d23b      	bcs.n	83e06 <__udivdi3+0x286>
   83d8e:	4563      	cmp	r3, ip
   83d90:	d939      	bls.n	83e06 <__udivdi3+0x286>
   83d92:	f1a8 0802 	sub.w	r8, r8, #2
   83d96:	44a4      	add	ip, r4
   83d98:	ebc3 0c0c 	rsb	ip, r3, ip
   83d9c:	fbbc f3f6 	udiv	r3, ip, r6
   83da0:	fb06 c113 	mls	r1, r6, r3, ip
   83da4:	fb07 f203 	mul.w	r2, r7, r3
   83da8:	fa1f f989 	uxth.w	r9, r9
   83dac:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   83db0:	428a      	cmp	r2, r1
   83db2:	d907      	bls.n	83dc4 <__udivdi3+0x244>
   83db4:	1909      	adds	r1, r1, r4
   83db6:	f103 30ff 	add.w	r0, r3, #4294967295
   83dba:	d222      	bcs.n	83e02 <__udivdi3+0x282>
   83dbc:	428a      	cmp	r2, r1
   83dbe:	d920      	bls.n	83e02 <__udivdi3+0x282>
   83dc0:	3b02      	subs	r3, #2
   83dc2:	4421      	add	r1, r4
   83dc4:	1a89      	subs	r1, r1, r2
   83dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83dca:	e743      	b.n	83c54 <__udivdi3+0xd4>
   83dcc:	463a      	mov	r2, r7
   83dce:	e705      	b.n	83bdc <__udivdi3+0x5c>
   83dd0:	4633      	mov	r3, r6
   83dd2:	e718      	b.n	83c06 <__udivdi3+0x86>
   83dd4:	460a      	mov	r2, r1
   83dd6:	e766      	b.n	83ca6 <__udivdi3+0x126>
   83dd8:	40b0      	lsls	r0, r6
   83dda:	4290      	cmp	r0, r2
   83ddc:	d2b5      	bcs.n	83d4a <__udivdi3+0x1ca>
   83dde:	f10c 32ff 	add.w	r2, ip, #4294967295
   83de2:	2300      	movs	r3, #0
   83de4:	e712      	b.n	83c0c <__udivdi3+0x8c>
   83de6:	4633      	mov	r3, r6
   83de8:	4632      	mov	r2, r6
   83dea:	e70f      	b.n	83c0c <__udivdi3+0x8c>
   83dec:	459a      	cmp	sl, r3
   83dee:	d98d      	bls.n	83d0c <__udivdi3+0x18c>
   83df0:	f1ac 0c02 	sub.w	ip, ip, #2
   83df4:	4423      	add	r3, r4
   83df6:	e78a      	b.n	83d0e <__udivdi3+0x18e>
   83df8:	45b9      	cmp	r9, r7
   83dfa:	d99a      	bls.n	83d32 <__udivdi3+0x1b2>
   83dfc:	3d02      	subs	r5, #2
   83dfe:	4427      	add	r7, r4
   83e00:	e798      	b.n	83d34 <__udivdi3+0x1b4>
   83e02:	4603      	mov	r3, r0
   83e04:	e7de      	b.n	83dc4 <__udivdi3+0x244>
   83e06:	4690      	mov	r8, r2
   83e08:	e7c6      	b.n	83d98 <__udivdi3+0x218>
   83e0a:	3802      	subs	r0, #2
   83e0c:	4421      	add	r1, r4
   83e0e:	e735      	b.n	83c7c <__udivdi3+0xfc>
   83e10:	736e6f43 	.word	0x736e6f43
   83e14:	20656c6f 	.word	0x20656c6f
   83e18:	64616572 	.word	0x64616572
   83e1c:	00000a79 	.word	0x00000a79
   83e20:	3d3d3d3d 	.word	0x3d3d3d3d
   83e24:	3d3d3d3d 	.word	0x3d3d3d3d
   83e28:	3d3d3d3d 	.word	0x3d3d3d3d
   83e2c:	00000a3d 	.word	0x00000a3d
   83e30:	61746f72 	.word	0x61746f72
   83e34:	6c206574 	.word	0x6c206574
   83e38:	0a746665 	.word	0x0a746665
   83e3c:	00000000 	.word	0x00000000
   83e40:	706f7473 	.word	0x706f7473
   83e44:	646e6120 	.word	0x646e6120
   83e48:	766f6d20 	.word	0x766f6d20
   83e4c:	6f662065 	.word	0x6f662065
   83e50:	72617772 	.word	0x72617772
   83e54:	00000a64 	.word	0x00000a64
   83e58:	61746f72 	.word	0x61746f72
   83e5c:	72206574 	.word	0x72206574
   83e60:	74686769 	.word	0x74686769
   83e64:	0000000a 	.word	0x0000000a
   83e68:	6f206f6e 	.word	0x6f206f6e
   83e6c:	63656a62 	.word	0x63656a62
   83e70:	00000a74 	.word	0x00000a74
   83e74:	00000043 	.word	0x00000043

00083e78 <_global_impure_ptr>:
   83e78:	20070138 33323130 37363534 42413938     8.. 0123456789AB
   83e88:	46454443 00000000 33323130 37363534     CDEF....01234567
   83e98:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83ea8:	0000296c                                l)..

00083eac <zeroes.6721>:
   83eac:	30303030 30303030 30303030 30303030     0000000000000000

00083ebc <blanks.6720>:
   83ebc:	20202020 20202020 20202020 20202020                     

00083ecc <_init>:
   83ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83ece:	bf00      	nop
   83ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83ed2:	bc08      	pop	{r3}
   83ed4:	469e      	mov	lr, r3
   83ed6:	4770      	bx	lr

00083ed8 <__init_array_start>:
   83ed8:	00081ea5 	.word	0x00081ea5

00083edc <__frame_dummy_init_array_entry>:
   83edc:	00080119                                ....

00083ee0 <_fini>:
   83ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83ee2:	bf00      	nop
   83ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83ee6:	bc08      	pop	{r3}
   83ee8:	469e      	mov	lr, r3
   83eea:	4770      	bx	lr

00083eec <__fini_array_start>:
   83eec:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900 00000000                       ..=.....

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
2007016c:	00083e74 00000000 00000000 00000000     t>..............
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <_impure_ptr>:
20070560:	20070138                                8.. 

20070564 <lc_ctype_charset>:
20070564:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070584 <__mb_cur_max>:
20070584:	00000001                                ....

20070588 <__malloc_av_>:
	...
20070590:	20070588 20070588 20070590 20070590     ... ... ... ... 
200705a0:	20070598 20070598 200705a0 200705a0     ... ... ... ... 
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 

20070990 <__malloc_trim_threshold>:
20070990:	00020000                                ....

20070994 <__malloc_sbrk_base>:
20070994:	ffffffff                                ....

20070998 <__wctomb>:
20070998:	00083615                                .6..
