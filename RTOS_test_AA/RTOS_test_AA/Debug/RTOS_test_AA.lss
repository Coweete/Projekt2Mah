
RTOS_test_AA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a780  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008a780  0008a780  00012780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a4c  20070000  0008a788  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000083c8  20070a50  0008b1d8  00018a4c  2**3
                  ALLOC
  4 .stack        00002000  20078e18  000935a0  00018a4c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00018a4c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00018a75  2**0
                  CONTENTS, READONLY
  7 .debug_info   00018e3d  00000000  00000000  00018ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004552  00000000  00000000  0003190d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000901f  00000000  00000000  00035e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001008  00000000  00000000  0003ee7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000011a8  00000000  00000000  0003fe86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001d006  00000000  00000000  0004102e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00019b65  00000000  00000000  0005e034  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006b7aa  00000000  00000000  00077b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000033f0  00000000  00000000  000e3344  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007ae18 	.word	0x2007ae18
   80004:	00083145 	.word	0x00083145
   80008:	00083141 	.word	0x00083141
   8000c:	00083141 	.word	0x00083141
   80010:	00083141 	.word	0x00083141
   80014:	00083141 	.word	0x00083141
   80018:	00083141 	.word	0x00083141
	...
   8002c:	000816d9 	.word	0x000816d9
   80030:	00083141 	.word	0x00083141
   80034:	00000000 	.word	0x00000000
   80038:	00081755 	.word	0x00081755
   8003c:	00081791 	.word	0x00081791
   80040:	00083141 	.word	0x00083141
   80044:	00083141 	.word	0x00083141
   80048:	00083141 	.word	0x00083141
   8004c:	00083141 	.word	0x00083141
   80050:	00083141 	.word	0x00083141
   80054:	00083141 	.word	0x00083141
   80058:	00083141 	.word	0x00083141
   8005c:	00083141 	.word	0x00083141
   80060:	00083141 	.word	0x00083141
   80064:	00083141 	.word	0x00083141
   80068:	00000000 	.word	0x00000000
   8006c:	00082fb1 	.word	0x00082fb1
   80070:	00082fc5 	.word	0x00082fc5
   80074:	00082fd9 	.word	0x00082fd9
   80078:	00082fed 	.word	0x00082fed
	...
   80084:	000812b1 	.word	0x000812b1
   80088:	00083141 	.word	0x00083141
   8008c:	00083141 	.word	0x00083141
   80090:	00083141 	.word	0x00083141
   80094:	00083141 	.word	0x00083141
   80098:	00083141 	.word	0x00083141
   8009c:	00083141 	.word	0x00083141
   800a0:	00083141 	.word	0x00083141
   800a4:	00000000 	.word	0x00000000
   800a8:	00083141 	.word	0x00083141
   800ac:	00083141 	.word	0x00083141
   800b0:	00083141 	.word	0x00083141
   800b4:	00083141 	.word	0x00083141
   800b8:	00083141 	.word	0x00083141
   800bc:	00083141 	.word	0x00083141
   800c0:	00083141 	.word	0x00083141
   800c4:	00083141 	.word	0x00083141
   800c8:	00083141 	.word	0x00083141
   800cc:	00083141 	.word	0x00083141
   800d0:	00083141 	.word	0x00083141
   800d4:	00083141 	.word	0x00083141
   800d8:	00083141 	.word	0x00083141
   800dc:	00083141 	.word	0x00083141
   800e0:	00083141 	.word	0x00083141
   800e4:	00083141 	.word	0x00083141
   800e8:	00083141 	.word	0x00083141
   800ec:	00083141 	.word	0x00083141
   800f0:	00083141 	.word	0x00083141

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070a50 	.word	0x20070a50
   80110:	00000000 	.word	0x00000000
   80114:	0008a788 	.word	0x0008a788

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	0008a788 	.word	0x0008a788
   8013c:	20070a54 	.word	0x20070a54
   80140:	0008a788 	.word	0x0008a788
   80144:	00000000 	.word	0x00000000

00080148 <init_twi_functions>:
};

/************************************************************************/
/*Sätter Ardunino Due till Master på twi bussen		                    */
/************************************************************************/
void init_twi_functions(){
   80148:	b500      	push	{lr}
   8014a:	b085      	sub	sp, #20
	twi_master_options_t opt;
	opt.speed = TWI_SPEED;
   8014c:	4b0a      	ldr	r3, [pc, #40]	; (80178 <init_twi_functions+0x30>)
   8014e:	9302      	str	r3, [sp, #8]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_cpu_hz();
   80150:	4b0a      	ldr	r3, [pc, #40]	; (8017c <init_twi_functions+0x34>)
   80152:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
   80154:	2300      	movs	r3, #0
   80156:	f88d 300d 	strb.w	r3, [sp, #13]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8015a:	2016      	movs	r0, #22
   8015c:	4b08      	ldr	r3, [pc, #32]	; (80180 <init_twi_functions+0x38>)
   8015e:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   80160:	4808      	ldr	r0, [pc, #32]	; (80184 <init_twi_functions+0x3c>)
   80162:	a901      	add	r1, sp, #4
   80164:	4b08      	ldr	r3, [pc, #32]	; (80188 <init_twi_functions+0x40>)
   80166:	4798      	blx	r3
	if(twi_master_setup(TWI_MASTER,&opt) == TWI_SUCCESS){
   80168:	b910      	cbnz	r0, 80170 <init_twi_functions+0x28>
		printf("TWI OK");
   8016a:	4808      	ldr	r0, [pc, #32]	; (8018c <init_twi_functions+0x44>)
   8016c:	4b08      	ldr	r3, [pc, #32]	; (80190 <init_twi_functions+0x48>)
   8016e:	4798      	blx	r3
	}
	
}
   80170:	b005      	add	sp, #20
   80172:	f85d fb04 	ldr.w	pc, [sp], #4
   80176:	bf00      	nop
   80178:	000186a0 	.word	0x000186a0
   8017c:	0501bd00 	.word	0x0501bd00
   80180:	000830e9 	.word	0x000830e9
   80184:	4008c000 	.word	0x4008c000
   80188:	000803f9 	.word	0x000803f9
   8018c:	0008a14c 	.word	0x0008a14c
   80190:	00084591 	.word	0x00084591

00080194 <send_package>:
		break;
	}	
}


void  send_package(uint8_t twi_state,uint8_t slave){
   80194:	b570      	push	{r4, r5, r6, lr}
   80196:	4605      	mov	r5, r0
   80198:	460c      	mov	r4, r1
	printf("in send\n");
   8019a:	481a      	ldr	r0, [pc, #104]	; (80204 <send_package+0x70>)
   8019c:	4b1a      	ldr	r3, [pc, #104]	; (80208 <send_package+0x74>)
   8019e:	4798      	blx	r3
	char sts[20];
	
	if(TWI_SLAVE_NAVIGERING == slave){
   801a0:	2c03      	cmp	r4, #3
   801a2:	d116      	bne.n	801d2 <send_package+0x3e>
		printf("NAV PACK");
   801a4:	4819      	ldr	r0, [pc, #100]	; (8020c <send_package+0x78>)
   801a6:	4c18      	ldr	r4, [pc, #96]	; (80208 <send_package+0x74>)
   801a8:	47a0      	blx	r4
		send_data_nav[0] = twi_state;
   801aa:	4a19      	ldr	r2, [pc, #100]	; (80210 <send_package+0x7c>)
   801ac:	7015      	strb	r5, [r2, #0]
		packet_nav.chip = slave;
   801ae:	4b19      	ldr	r3, [pc, #100]	; (80214 <send_package+0x80>)
   801b0:	2103      	movs	r1, #3
   801b2:	7419      	strb	r1, [r3, #16]
		packet_nav.buffer = (void *)send_data_nav;
   801b4:	609a      	str	r2, [r3, #8]
		printf("TRYING TO SEND\n");
   801b6:	4818      	ldr	r0, [pc, #96]	; (80218 <send_package+0x84>)
   801b8:	47a0      	blx	r4
		while(twi_master_write(TWI_MASTER,&packet_nav));
   801ba:	4e18      	ldr	r6, [pc, #96]	; (8021c <send_package+0x88>)
   801bc:	4d15      	ldr	r5, [pc, #84]	; (80214 <send_package+0x80>)
   801be:	4c18      	ldr	r4, [pc, #96]	; (80220 <send_package+0x8c>)
   801c0:	4630      	mov	r0, r6
   801c2:	4629      	mov	r1, r5
   801c4:	47a0      	blx	r4
   801c6:	2800      	cmp	r0, #0
   801c8:	d1fa      	bne.n	801c0 <send_package+0x2c>
		printf("done sending nav\n");
   801ca:	4816      	ldr	r0, [pc, #88]	; (80224 <send_package+0x90>)
   801cc:	4b0e      	ldr	r3, [pc, #56]	; (80208 <send_package+0x74>)
   801ce:	4798      	blx	r3
   801d0:	bd70      	pop	{r4, r5, r6, pc}
		
	}else if(TWI_SLAVE_PABYGGNAD == slave){
   801d2:	2c02      	cmp	r4, #2
   801d4:	d115      	bne.n	80202 <send_package+0x6e>
		printf("PAB PACK0");
   801d6:	4814      	ldr	r0, [pc, #80]	; (80228 <send_package+0x94>)
   801d8:	4c0b      	ldr	r4, [pc, #44]	; (80208 <send_package+0x74>)
   801da:	47a0      	blx	r4
		send_data_pab[0] = twi_state;
   801dc:	4a13      	ldr	r2, [pc, #76]	; (8022c <send_package+0x98>)
   801de:	7015      	strb	r5, [r2, #0]
		packet_pab.chip = slave;
   801e0:	4b13      	ldr	r3, [pc, #76]	; (80230 <send_package+0x9c>)
   801e2:	2102      	movs	r1, #2
   801e4:	7419      	strb	r1, [r3, #16]
		packet_pab.buffer = (void *)send_data_pab;
   801e6:	609a      	str	r2, [r3, #8]
		printf("TRYING TO SEND\n");
   801e8:	480b      	ldr	r0, [pc, #44]	; (80218 <send_package+0x84>)
   801ea:	47a0      	blx	r4
		while(twi_master_write(TWI_MASTER,&packet_pab));
   801ec:	4e0b      	ldr	r6, [pc, #44]	; (8021c <send_package+0x88>)
   801ee:	4d10      	ldr	r5, [pc, #64]	; (80230 <send_package+0x9c>)
   801f0:	4c0b      	ldr	r4, [pc, #44]	; (80220 <send_package+0x8c>)
   801f2:	4630      	mov	r0, r6
   801f4:	4629      	mov	r1, r5
   801f6:	47a0      	blx	r4
   801f8:	2800      	cmp	r0, #0
   801fa:	d1fa      	bne.n	801f2 <send_package+0x5e>
		printf("done sending pab\n");
   801fc:	480d      	ldr	r0, [pc, #52]	; (80234 <send_package+0xa0>)
   801fe:	4b02      	ldr	r3, [pc, #8]	; (80208 <send_package+0x74>)
   80200:	4798      	blx	r3
   80202:	bd70      	pop	{r4, r5, r6, pc}
   80204:	0008a154 	.word	0x0008a154
   80208:	00084591 	.word	0x00084591
   8020c:	0008a160 	.word	0x0008a160
   80210:	20070a70 	.word	0x20070a70
   80214:	20070168 	.word	0x20070168
   80218:	0008a16c 	.word	0x0008a16c
   8021c:	4008c000 	.word	0x4008c000
   80220:	0008050d 	.word	0x0008050d
   80224:	0008a17c 	.word	0x0008a17c
   80228:	0008a190 	.word	0x0008a190
   8022c:	20070a6c 	.word	0x20070a6c
   80230:	20070154 	.word	0x20070154
   80234:	0008a19c 	.word	0x0008a19c

00080238 <receive_package>:
}

/************************************************************************/
/*                                                                      */
/************************************************************************/
void receive_package(uint8_t slave){
   80238:	b570      	push	{r4, r5, r6, lr}
   8023a:	4604      	mov	r4, r0
	printf("Start of receive\n");
   8023c:	4812      	ldr	r0, [pc, #72]	; (80288 <receive_package+0x50>)
   8023e:	4b13      	ldr	r3, [pc, #76]	; (8028c <receive_package+0x54>)
   80240:	4798      	blx	r3
	char str[20];
	
	if (slave == TWI_SLAVE_NAVIGERING){
   80242:	2c03      	cmp	r4, #3
   80244:	d10e      	bne.n	80264 <receive_package+0x2c>
		printf("TRYing to receive nav");
   80246:	4812      	ldr	r0, [pc, #72]	; (80290 <receive_package+0x58>)
   80248:	4b10      	ldr	r3, [pc, #64]	; (8028c <receive_package+0x54>)
   8024a:	4798      	blx	r3
		while(twi_master_read(TWI_MASTER, &packet_received_nav) != TWI_SUCCESS);
   8024c:	4e11      	ldr	r6, [pc, #68]	; (80294 <receive_package+0x5c>)
   8024e:	4d12      	ldr	r5, [pc, #72]	; (80298 <receive_package+0x60>)
   80250:	4c12      	ldr	r4, [pc, #72]	; (8029c <receive_package+0x64>)
   80252:	4630      	mov	r0, r6
   80254:	4629      	mov	r1, r5
   80256:	47a0      	blx	r4
   80258:	2800      	cmp	r0, #0
   8025a:	d1fa      	bne.n	80252 <receive_package+0x1a>
		printf("done sending");
   8025c:	4810      	ldr	r0, [pc, #64]	; (802a0 <receive_package+0x68>)
   8025e:	4b0b      	ldr	r3, [pc, #44]	; (8028c <receive_package+0x54>)
   80260:	4798      	blx	r3
   80262:	bd70      	pop	{r4, r5, r6, pc}
	
	}else if(slave == TWI_SLAVE_PABYGGNAD){
   80264:	2c02      	cmp	r4, #2
   80266:	d10d      	bne.n	80284 <receive_package+0x4c>
		printf("TRYing to receive Pa");
   80268:	480e      	ldr	r0, [pc, #56]	; (802a4 <receive_package+0x6c>)
   8026a:	4b08      	ldr	r3, [pc, #32]	; (8028c <receive_package+0x54>)
   8026c:	4798      	blx	r3
		while(twi_master_read(TWI_MASTER, &packet_received_pab) != TWI_SUCCESS);
   8026e:	4e09      	ldr	r6, [pc, #36]	; (80294 <receive_package+0x5c>)
   80270:	4d0d      	ldr	r5, [pc, #52]	; (802a8 <receive_package+0x70>)
   80272:	4c0a      	ldr	r4, [pc, #40]	; (8029c <receive_package+0x64>)
   80274:	4630      	mov	r0, r6
   80276:	4629      	mov	r1, r5
   80278:	47a0      	blx	r4
   8027a:	2800      	cmp	r0, #0
   8027c:	d1fa      	bne.n	80274 <receive_package+0x3c>
		printf("done sending");
   8027e:	4808      	ldr	r0, [pc, #32]	; (802a0 <receive_package+0x68>)
   80280:	4b02      	ldr	r3, [pc, #8]	; (8028c <receive_package+0x54>)
   80282:	4798      	blx	r3
   80284:	bd70      	pop	{r4, r5, r6, pc}
   80286:	bf00      	nop
   80288:	0008a1b0 	.word	0x0008a1b0
   8028c:	00084591 	.word	0x00084591
   80290:	0008a1c4 	.word	0x0008a1c4
   80294:	4008c000 	.word	0x4008c000
   80298:	20070140 	.word	0x20070140
   8029c:	00080439 	.word	0x00080439
   802a0:	0008a1dc 	.word	0x0008a1dc
   802a4:	0008a1ec 	.word	0x0008a1ec
   802a8:	2007012c 	.word	0x2007012c

000802ac <na_sendstatus>:

/************************************************************************/
/* Tar han om kommunikationen mellan mastern och						*/
/* slaven för positionssytemet											*/
/************************************************************************/
void na_sendstatus(TwiCmd twi_state){
   802ac:	b508      	push	{r3, lr}
	char ar[20];
	switch(twi_state){
   802ae:	3850      	subs	r0, #80	; 0x50
   802b0:	2805      	cmp	r0, #5
   802b2:	d872      	bhi.n	8039a <na_sendstatus+0xee>
   802b4:	e8df f000 	tbb	[pc, r0]
   802b8:	30160e03 	.word	0x30160e03
   802bc:	5c46      	.short	0x5c46
		//Led 1 position
		case XY1:
		send_package(XY1,TWI_SLAVE_NAVIGERING);
   802be:	2050      	movs	r0, #80	; 0x50
   802c0:	2103      	movs	r1, #3
   802c2:	4b36      	ldr	r3, [pc, #216]	; (8039c <na_sendstatus+0xf0>)
   802c4:	4798      	blx	r3
		vTaskDelay(10);
   802c6:	200a      	movs	r0, #10
   802c8:	4b35      	ldr	r3, [pc, #212]	; (803a0 <na_sendstatus+0xf4>)
   802ca:	4798      	blx	r3
		receive_package(TWI_SLAVE_NAVIGERING);
   802cc:	2003      	movs	r0, #3
   802ce:	4b35      	ldr	r3, [pc, #212]	; (803a4 <na_sendstatus+0xf8>)
   802d0:	4798      	blx	r3
		break;
   802d2:	bd08      	pop	{r3, pc}
		
		//Led 2 position
		case XY2:
		send_package(XY2,TWI_SLAVE_NAVIGERING);
   802d4:	2051      	movs	r0, #81	; 0x51
   802d6:	2103      	movs	r1, #3
   802d8:	4b30      	ldr	r3, [pc, #192]	; (8039c <na_sendstatus+0xf0>)
   802da:	4798      	blx	r3
		receive_package(TWI_SLAVE_NAVIGERING);
   802dc:	2003      	movs	r0, #3
   802de:	4b31      	ldr	r3, [pc, #196]	; (803a4 <na_sendstatus+0xf8>)
   802e0:	4798      	blx	r3
		break;
   802e2:	bd08      	pop	{r3, pc}
		
		//socket position
		case SOCKETXY:
		send_package(SOCKETXY,TWI_SLAVE_NAVIGERING);
   802e4:	2052      	movs	r0, #82	; 0x52
   802e6:	2103      	movs	r1, #3
   802e8:	4b2c      	ldr	r3, [pc, #176]	; (8039c <na_sendstatus+0xf0>)
   802ea:	4798      	blx	r3
		delayMicroseconds(50000);
   802ec:	f24c 3050 	movw	r0, #50000	; 0xc350
   802f0:	4b2d      	ldr	r3, [pc, #180]	; (803a8 <na_sendstatus+0xfc>)
   802f2:	4798      	blx	r3
		receive_package(TWI_SLAVE_NAVIGERING);
   802f4:	2003      	movs	r0, #3
   802f6:	4b2b      	ldr	r3, [pc, #172]	; (803a4 <na_sendstatus+0xf8>)
   802f8:	4798      	blx	r3
		objectinfo[0].theObject = SOCK;
   802fa:	4a2c      	ldr	r2, [pc, #176]	; (803ac <na_sendstatus+0x100>)
   802fc:	2302      	movs	r3, #2
   802fe:	7013      	strb	r3, [r2, #0]
		objectinfo[0].xpos = ((data_received_nav[1] << 8) | (data_received_nav[2] << 0));
   80300:	4b2b      	ldr	r3, [pc, #172]	; (803b0 <na_sendstatus+0x104>)
   80302:	7858      	ldrb	r0, [r3, #1]
   80304:	7899      	ldrb	r1, [r3, #2]
   80306:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   8030a:	8051      	strh	r1, [r2, #2]
		objectinfo[0].ypox = ((data_received_nav[3] << 8) | (data_received_nav[4] <<0));
   8030c:	78d9      	ldrb	r1, [r3, #3]
   8030e:	791b      	ldrb	r3, [r3, #4]
   80310:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   80314:	8093      	strh	r3, [r2, #4]
		break;
   80316:	bd08      	pop	{r3, pc}
		
		//Square position
		case SQUAREXY:
		send_package(SQUAREXY,TWI_SLAVE_NAVIGERING);
   80318:	2053      	movs	r0, #83	; 0x53
   8031a:	2103      	movs	r1, #3
   8031c:	4b1f      	ldr	r3, [pc, #124]	; (8039c <na_sendstatus+0xf0>)
   8031e:	4798      	blx	r3
		receive_package(TWI_SLAVE_NAVIGERING);
   80320:	2003      	movs	r0, #3
   80322:	4b20      	ldr	r3, [pc, #128]	; (803a4 <na_sendstatus+0xf8>)
   80324:	4798      	blx	r3
		objectinfo[1].theObject = SQUARE;
   80326:	4a21      	ldr	r2, [pc, #132]	; (803ac <na_sendstatus+0x100>)
   80328:	2303      	movs	r3, #3
   8032a:	7193      	strb	r3, [r2, #6]
		objectinfo[1].xpos = ((data_received_nav[1] << 8) | (data_received_nav[2] << 0));
   8032c:	4b20      	ldr	r3, [pc, #128]	; (803b0 <na_sendstatus+0x104>)
   8032e:	7858      	ldrb	r0, [r3, #1]
   80330:	7899      	ldrb	r1, [r3, #2]
   80332:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   80336:	8111      	strh	r1, [r2, #8]
		objectinfo[1].ypox = ((data_received_nav[3] << 8) | (data_received_nav[4] <<0));
   80338:	78d9      	ldrb	r1, [r3, #3]
   8033a:	791b      	ldrb	r3, [r3, #4]
   8033c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   80340:	8153      	strh	r3, [r2, #10]
		break;
   80342:	bd08      	pop	{r3, pc}
		
		//Glass position
		case GLASSXY:
		send_package(GLASSXY,TWI_SLAVE_NAVIGERING);
   80344:	2054      	movs	r0, #84	; 0x54
   80346:	2103      	movs	r1, #3
   80348:	4b14      	ldr	r3, [pc, #80]	; (8039c <na_sendstatus+0xf0>)
   8034a:	4798      	blx	r3
		receive_package(TWI_SLAVE_NAVIGERING);
   8034c:	2003      	movs	r0, #3
   8034e:	4b15      	ldr	r3, [pc, #84]	; (803a4 <na_sendstatus+0xf8>)
   80350:	4798      	blx	r3
		objectinfo[2].theObject = GLASS;
   80352:	4a16      	ldr	r2, [pc, #88]	; (803ac <na_sendstatus+0x100>)
   80354:	2304      	movs	r3, #4
   80356:	7313      	strb	r3, [r2, #12]
		objectinfo[2].xpos = ((data_received_nav[1] << 8) | (data_received_nav[2] << 0));
   80358:	4b15      	ldr	r3, [pc, #84]	; (803b0 <na_sendstatus+0x104>)
   8035a:	7858      	ldrb	r0, [r3, #1]
   8035c:	7899      	ldrb	r1, [r3, #2]
   8035e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   80362:	81d1      	strh	r1, [r2, #14]
		objectinfo[2].ypox = ((data_received_nav[3] << 8) | (data_received_nav[4] <<0));
   80364:	78d9      	ldrb	r1, [r3, #3]
   80366:	791b      	ldrb	r3, [r3, #4]
   80368:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   8036c:	8213      	strh	r3, [r2, #16]
		break;
   8036e:	bd08      	pop	{r3, pc}
		
		//Boxgal info
		case BOXGOALXY:
		send_package(BOXGOALXY,TWI_SLAVE_NAVIGERING);
   80370:	2055      	movs	r0, #85	; 0x55
   80372:	2103      	movs	r1, #3
   80374:	4b09      	ldr	r3, [pc, #36]	; (8039c <na_sendstatus+0xf0>)
   80376:	4798      	blx	r3
		receive_package(TWI_SLAVE_NAVIGERING);
   80378:	2003      	movs	r0, #3
   8037a:	4b0a      	ldr	r3, [pc, #40]	; (803a4 <na_sendstatus+0xf8>)
   8037c:	4798      	blx	r3
		objectinfo[3].theObject = BOXGOALXY;
   8037e:	4a0b      	ldr	r2, [pc, #44]	; (803ac <na_sendstatus+0x100>)
   80380:	2355      	movs	r3, #85	; 0x55
   80382:	7493      	strb	r3, [r2, #18]
		objectinfo[3].xpos = ((data_received_nav[1] << 8) | (data_received_nav[2] << 0));
   80384:	4b0a      	ldr	r3, [pc, #40]	; (803b0 <na_sendstatus+0x104>)
   80386:	7858      	ldrb	r0, [r3, #1]
   80388:	7899      	ldrb	r1, [r3, #2]
   8038a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   8038e:	8291      	strh	r1, [r2, #20]
		objectinfo[3].ypox = ((data_received_nav[3] << 8) | (data_received_nav[4] <<0));
   80390:	78d9      	ldrb	r1, [r3, #3]
   80392:	791b      	ldrb	r3, [r3, #4]
   80394:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   80398:	82d3      	strh	r3, [r2, #22]
   8039a:	bd08      	pop	{r3, pc}
   8039c:	00080195 	.word	0x00080195
   803a0:	00082479 	.word	0x00082479
   803a4:	00080239 	.word	0x00080239
   803a8:	00081559 	.word	0x00081559
   803ac:	20078db8 	.word	0x20078db8
   803b0:	20070a78 	.word	0x20070a78

000803b4 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   803b4:	4b0f      	ldr	r3, [pc, #60]	; (803f4 <twi_set_speed+0x40>)
   803b6:	4299      	cmp	r1, r3
   803b8:	d819      	bhi.n	803ee <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   803ba:	0049      	lsls	r1, r1, #1
   803bc:	fbb2 f2f1 	udiv	r2, r2, r1
   803c0:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   803c2:	2aff      	cmp	r2, #255	; 0xff
   803c4:	d907      	bls.n	803d6 <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   803c6:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   803c8:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   803ca:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   803cc:	2aff      	cmp	r2, #255	; 0xff
   803ce:	d903      	bls.n	803d8 <twi_set_speed+0x24>
   803d0:	2b07      	cmp	r3, #7
   803d2:	d1f9      	bne.n	803c8 <twi_set_speed+0x14>
   803d4:	e000      	b.n	803d8 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   803d6:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   803d8:	0211      	lsls	r1, r2, #8
   803da:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
   803dc:	041b      	lsls	r3, r3, #16
   803de:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   803e2:	430b      	orrs	r3, r1
   803e4:	b2d2      	uxtb	r2, r2
   803e6:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   803e8:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   803ea:	2000      	movs	r0, #0
   803ec:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   803ee:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   803f0:	4770      	bx	lr
   803f2:	bf00      	nop
   803f4:	00061a80 	.word	0x00061a80

000803f8 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   803f8:	b538      	push	{r3, r4, r5, lr}
   803fa:	4604      	mov	r4, r0
   803fc:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   803fe:	f04f 33ff 	mov.w	r3, #4294967295
   80402:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   80404:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   80406:	2380      	movs	r3, #128	; 0x80
   80408:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   8040a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   8040c:	2308      	movs	r3, #8
   8040e:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80410:	2320      	movs	r3, #32
   80412:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   80414:	2304      	movs	r3, #4
   80416:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   80418:	6849      	ldr	r1, [r1, #4]
   8041a:	682a      	ldr	r2, [r5, #0]
   8041c:	4b05      	ldr	r3, [pc, #20]	; (80434 <twi_master_init+0x3c>)
   8041e:	4798      	blx	r3
   80420:	2801      	cmp	r0, #1
   80422:	bf14      	ite	ne
   80424:	2000      	movne	r0, #0
   80426:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   80428:	7a6b      	ldrb	r3, [r5, #9]
   8042a:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   8042c:	bf04      	itt	eq
   8042e:	2340      	moveq	r3, #64	; 0x40
   80430:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
   80432:	bd38      	pop	{r3, r4, r5, pc}
   80434:	000803b5 	.word	0x000803b5

00080438 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   80438:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
   8043c:	4604      	mov	r4, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   8043e:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   80440:	688e      	ldr	r6, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
   80442:	2b00      	cmp	r3, #0
   80444:	d049      	beq.n	804da <twi_master_read+0xa2>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   80446:	2200      	movs	r2, #0
   80448:	6042      	str	r2, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   8044a:	6848      	ldr	r0, [r1, #4]
   8044c:	0200      	lsls	r0, r0, #8
   8044e:	f400 7040 	and.w	r0, r0, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   80452:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
   80456:	7c0d      	ldrb	r5, [r1, #16]
   80458:	042d      	lsls	r5, r5, #16
   8045a:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
   8045e:	4328      	orrs	r0, r5
   80460:	6060      	str	r0, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   80462:	60e2      	str	r2, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80464:	684a      	ldr	r2, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   80466:	b15a      	cbz	r2, 80480 <twi_master_read+0x48>
		return 0;

	val = addr[0];
   80468:	7808      	ldrb	r0, [r1, #0]
	if (len > 1) {
   8046a:	2a01      	cmp	r2, #1
		val <<= 8;
		val |= addr[1];
   8046c:	bfc4      	itt	gt
   8046e:	784d      	ldrbgt	r5, [r1, #1]
   80470:	ea45 2000 	orrgt.w	r0, r5, r0, lsl #8
	}
	if (len > 2) {
   80474:	2a02      	cmp	r2, #2
   80476:	dd04      	ble.n	80482 <twi_master_read+0x4a>
		val <<= 8;
		val |= addr[2];
   80478:	788a      	ldrb	r2, [r1, #2]
   8047a:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
   8047e:	e000      	b.n	80482 <twi_master_read+0x4a>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   80480:	2000      	movs	r0, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80482:	60e0      	str	r0, [r4, #12]

	/* Send a START condition */
	if (cnt == 1) {
   80484:	2b01      	cmp	r3, #1
   80486:	d104      	bne.n	80492 <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   80488:	2203      	movs	r2, #3
   8048a:	6022      	str	r2, [r4, #0]
		stop_sent = 1;
   8048c:	f04f 0c01 	mov.w	ip, #1
   80490:	e02b      	b.n	804ea <twi_master_read+0xb2>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
   80492:	2201      	movs	r2, #1
   80494:	6022      	str	r2, [r4, #0]
		stop_sent = 0;
   80496:	f04f 0c00 	mov.w	ip, #0
   8049a:	e026      	b.n	804ea <twi_master_read+0xb2>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   8049c:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   8049e:	f411 7f80 	tst.w	r1, #256	; 0x100
   804a2:	d11c      	bne.n	804de <twi_master_read+0xa6>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   804a4:	1e55      	subs	r5, r2, #1
   804a6:	b1e2      	cbz	r2, 804e2 <twi_master_read+0xaa>
   804a8:	462a      	mov	r2, r5
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
   804aa:	2b01      	cmp	r3, #1
   804ac:	d105      	bne.n	804ba <twi_master_read+0x82>
   804ae:	f1bc 0f00 	cmp.w	ip, #0
   804b2:	d102      	bne.n	804ba <twi_master_read+0x82>
			p_twi->TWI_CR = TWI_CR_STOP;
   804b4:	f8c4 9000 	str.w	r9, [r4]
			stop_sent = 1;
   804b8:	46c4      	mov	ip, r8
		}

		if (!(status & TWI_SR_RXRDY)) {
   804ba:	f011 0f02 	tst.w	r1, #2
   804be:	d004      	beq.n	804ca <twi_master_read+0x92>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   804c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
   804c2:	7032      	strb	r2, [r6, #0]

		cnt--;
   804c4:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   804c6:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
   804c8:	463a      	mov	r2, r7
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
   804ca:	2b00      	cmp	r3, #0
   804cc:	d1e6      	bne.n	8049c <twi_master_read+0x64>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   804ce:	6a23      	ldr	r3, [r4, #32]
   804d0:	f013 0f01 	tst.w	r3, #1
   804d4:	d0fb      	beq.n	804ce <twi_master_read+0x96>
	}

	p_twi->TWI_SR;
   804d6:	6a23      	ldr	r3, [r4, #32]

	return TWI_SUCCESS;
   804d8:	e014      	b.n	80504 <twi_master_read+0xcc>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   804da:	2001      	movs	r0, #1
   804dc:	e012      	b.n	80504 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   804de:	2005      	movs	r0, #5
   804e0:	e010      	b.n	80504 <twi_master_read+0xcc>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
   804e2:	2009      	movs	r0, #9
   804e4:	e00e      	b.n	80504 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   804e6:	2005      	movs	r0, #5
   804e8:	e00c      	b.n	80504 <twi_master_read+0xcc>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   804ea:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   804ec:	f411 7080 	ands.w	r0, r1, #256	; 0x100
   804f0:	d1f9      	bne.n	804e6 <twi_master_read+0xae>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   804f2:	f643 2297 	movw	r2, #14999	; 0x3a97
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
   804f6:	f04f 0902 	mov.w	r9, #2
			stop_sent = 1;
   804fa:	f04f 0801 	mov.w	r8, #1
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
   804fe:	f643 2798 	movw	r7, #15000	; 0x3a98
   80502:	e7d2      	b.n	804aa <twi_master_read+0x72>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
   80504:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
   80508:	4770      	bx	lr
   8050a:	bf00      	nop

0008050c <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   8050c:	b470      	push	{r4, r5, r6}
   8050e:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   80510:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   80512:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
   80514:	2a00      	cmp	r2, #0
   80516:	d03f      	beq.n	80598 <twi_master_write+0x8c>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   80518:	2400      	movs	r4, #0
   8051a:	605c      	str	r4, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   8051c:	7c0e      	ldrb	r6, [r1, #16]
   8051e:	0436      	lsls	r6, r6, #16
   80520:	f406 06fe 	and.w	r6, r6, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   80524:	684d      	ldr	r5, [r1, #4]
   80526:	022d      	lsls	r5, r5, #8
   80528:	f405 7540 	and.w	r5, r5, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   8052c:	4335      	orrs	r5, r6
   8052e:	605d      	str	r5, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   80530:	60dc      	str	r4, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80532:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   80534:	b15c      	cbz	r4, 8054e <twi_master_write+0x42>
		return 0;

	val = addr[0];
   80536:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
   80538:	2c01      	cmp	r4, #1
		val <<= 8;
		val |= addr[1];
   8053a:	bfc4      	itt	gt
   8053c:	784e      	ldrbgt	r6, [r1, #1]
   8053e:	ea46 2505 	orrgt.w	r5, r6, r5, lsl #8
	}
	if (len > 2) {
   80542:	2c02      	cmp	r4, #2
   80544:	dd04      	ble.n	80550 <twi_master_write+0x44>
		val <<= 8;
		val |= addr[2];
   80546:	7889      	ldrb	r1, [r1, #2]
   80548:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
   8054c:	e000      	b.n	80550 <twi_master_write+0x44>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   8054e:	2500      	movs	r5, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80550:	60dd      	str	r5, [r3, #12]
   80552:	e00b      	b.n	8056c <twi_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80554:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   80556:	f411 7f80 	tst.w	r1, #256	; 0x100
   8055a:	d11f      	bne.n	8059c <twi_master_write+0x90>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   8055c:	f011 0f04 	tst.w	r1, #4
   80560:	d0f8      	beq.n	80554 <twi_master_write+0x48>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
   80562:	f810 1b01 	ldrb.w	r1, [r0], #1
   80566:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   80568:	3a01      	subs	r2, #1
   8056a:	d007      	beq.n	8057c <twi_master_write+0x70>
		status = p_twi->TWI_SR;
   8056c:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   8056e:	f411 7f80 	tst.w	r1, #256	; 0x100
   80572:	d115      	bne.n	805a0 <twi_master_write+0x94>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   80574:	f011 0f04 	tst.w	r1, #4
   80578:	d1f3      	bne.n	80562 <twi_master_write+0x56>
   8057a:	e7eb      	b.n	80554 <twi_master_write+0x48>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
   8057c:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   8057e:	f412 7080 	ands.w	r0, r2, #256	; 0x100
   80582:	d10f      	bne.n	805a4 <twi_master_write+0x98>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
   80584:	f012 0f04 	tst.w	r2, #4
   80588:	d0f8      	beq.n	8057c <twi_master_write+0x70>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   8058a:	2202      	movs	r2, #2
   8058c:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   8058e:	6a1a      	ldr	r2, [r3, #32]
   80590:	f012 0f01 	tst.w	r2, #1
   80594:	d0fb      	beq.n	8058e <twi_master_write+0x82>
   80596:	e006      	b.n	805a6 <twi_master_write+0x9a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   80598:	2001      	movs	r0, #1
   8059a:	e004      	b.n	805a6 <twi_master_write+0x9a>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   8059c:	2005      	movs	r0, #5
   8059e:	e002      	b.n	805a6 <twi_master_write+0x9a>
   805a0:	2005      	movs	r0, #5
   805a2:	e000      	b.n	805a6 <twi_master_write+0x9a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   805a4:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
   805a6:	bc70      	pop	{r4, r5, r6}
   805a8:	4770      	bx	lr
   805aa:	bf00      	nop

000805ac <calculateDistance>:
 *  Author: Andre & Elias
 */ 

#include "Functions/calculations.h"

int calculateDistance (uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2){ //Avståndet för x1 & y1 = Position, x2 & y2 = Destination
   805ac:	b530      	push	{r4, r5, lr}
   805ae:	b087      	sub	sp, #28
	
	int mot, nar;
	
	nar = x2 - x1;
   805b0:	1a12      	subs	r2, r2, r0
	mot = y2 - y1;
   805b2:	1a5b      	subs	r3, r3, r1
	
	int dist = sqrt((mot*mot)+(nar*nar));
   805b4:	fb02 f202 	mul.w	r2, r2, r2
   805b8:	fb03 2503 	mla	r5, r3, r3, r2
   805bc:	4c0a      	ldr	r4, [pc, #40]	; (805e8 <calculateDistance+0x3c>)
   805be:	4628      	mov	r0, r5
   805c0:	47a0      	blx	r4
   805c2:	4b0a      	ldr	r3, [pc, #40]	; (805ec <calculateDistance+0x40>)
   805c4:	4798      	blx	r3
   805c6:	4b0a      	ldr	r3, [pc, #40]	; (805f0 <calculateDistance+0x44>)
   805c8:	4798      	blx	r3
   805ca:	4604      	mov	r4, r0
	
	char strCalc[20];
	sprintf(strCalc,"\nCalc = %d",dist);
   805cc:	a801      	add	r0, sp, #4
   805ce:	4909      	ldr	r1, [pc, #36]	; (805f4 <calculateDistance+0x48>)
   805d0:	4622      	mov	r2, r4
   805d2:	4b09      	ldr	r3, [pc, #36]	; (805f8 <calculateDistance+0x4c>)
   805d4:	4798      	blx	r3
	printf(strCalc);	
   805d6:	a801      	add	r0, sp, #4
   805d8:	4d08      	ldr	r5, [pc, #32]	; (805fc <calculateDistance+0x50>)
   805da:	47a8      	blx	r5
	printf("Hello?");
   805dc:	4808      	ldr	r0, [pc, #32]	; (80600 <calculateDistance+0x54>)
   805de:	47a8      	blx	r5
	return dist;
	
}
   805e0:	4620      	mov	r0, r4
   805e2:	b007      	add	sp, #28
   805e4:	bd30      	pop	{r4, r5, pc}
   805e6:	bf00      	nop
   805e8:	00083ee5 	.word	0x00083ee5
   805ec:	000834f1 	.word	0x000834f1
   805f0:	000844e5 	.word	0x000844e5
   805f4:	0008a204 	.word	0x0008a204
   805f8:	00084849 	.word	0x00084849
   805fc:	00084591 	.word	0x00084591
   80600:	0008a210 	.word	0x0008a210
   80604:	00000000 	.word	0x00000000

00080608 <calculateAngle>:

int calculateAngle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 ){	//Vinkeln för x1 & y1 = Position, x2 & y2 = Destination
   80608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	
	int mot, nar;
	nar = x2 - x1;
   8060c:	1a16      	subs	r6, r2, r0
	mot = y2 - y1;
   8060e:	1a5f      	subs	r7, r3, r1
	
	
	int angle = (acos(nar/(sqrt((mot*mot)+(nar*nar)))) * (180/M_PI));
   80610:	fb06 f406 	mul.w	r4, r6, r6
   80614:	fb07 4407 	mla	r4, r7, r7, r4
   80618:	f8df 8084 	ldr.w	r8, [pc, #132]	; 806a0 <calculateAngle+0x98>
   8061c:	4620      	mov	r0, r4
   8061e:	47c0      	blx	r8
   80620:	4b19      	ldr	r3, [pc, #100]	; (80688 <calculateAngle+0x80>)
   80622:	4798      	blx	r3
   80624:	4604      	mov	r4, r0
   80626:	460d      	mov	r5, r1
   80628:	4630      	mov	r0, r6
   8062a:	47c0      	blx	r8
   8062c:	4622      	mov	r2, r4
   8062e:	462b      	mov	r3, r5
   80630:	4c16      	ldr	r4, [pc, #88]	; (8068c <calculateAngle+0x84>)
   80632:	47a0      	blx	r4
   80634:	4b16      	ldr	r3, [pc, #88]	; (80690 <calculateAngle+0x88>)
   80636:	4798      	blx	r3
   80638:	a311      	add	r3, pc, #68	; (adr r3, 80680 <calculateAngle+0x78>)
   8063a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8063e:	4c15      	ldr	r4, [pc, #84]	; (80694 <calculateAngle+0x8c>)
   80640:	47a0      	blx	r4
   80642:	4b15      	ldr	r3, [pc, #84]	; (80698 <calculateAngle+0x90>)
   80644:	4798      	blx	r3
	
	if(nar < 0 && mot > 0){
   80646:	2e00      	cmp	r6, #0
   80648:	da07      	bge.n	8065a <calculateAngle+0x52>
   8064a:	2f00      	cmp	r7, #0
   8064c:	dd01      	ble.n	80652 <calculateAngle+0x4a>
		angle = angle + 90;
   8064e:	305a      	adds	r0, #90	; 0x5a
   80650:	e009      	b.n	80666 <calculateAngle+0x5e>
	}
	else if(nar < 0 && mot < 0){
   80652:	2f00      	cmp	r7, #0
   80654:	da07      	bge.n	80666 <calculateAngle+0x5e>
		angle = angle + 180;
   80656:	30b4      	adds	r0, #180	; 0xb4
   80658:	e005      	b.n	80666 <calculateAngle+0x5e>
	}
	else if(nar > 0 && mot < 0){
   8065a:	2e00      	cmp	r6, #0
   8065c:	dd03      	ble.n	80666 <calculateAngle+0x5e>
   8065e:	2f00      	cmp	r7, #0
		angle = angle + 270;
   80660:	bfb8      	it	lt
   80662:	f500 7087 	addlt.w	r0, r0, #270	; 0x10e
	}
	
	angle = angle % 360;
   80666:	4a0d      	ldr	r2, [pc, #52]	; (8069c <calculateAngle+0x94>)
   80668:	fb80 2302 	smull	r2, r3, r0, r2
   8066c:	18c2      	adds	r2, r0, r3
   8066e:	17c3      	asrs	r3, r0, #31
   80670:	ebc3 2322 	rsb	r3, r3, r2, asr #8
	
	return angle;
}
   80674:	f44f 72b4 	mov.w	r2, #360	; 0x168
   80678:	fb02 0013 	mls	r0, r2, r3, r0
   8067c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80680:	1a63c1f8 	.word	0x1a63c1f8
   80684:	404ca5dc 	.word	0x404ca5dc
   80688:	000834f1 	.word	0x000834f1
   8068c:	00084205 	.word	0x00084205
   80690:	00083449 	.word	0x00083449
   80694:	00083fb1 	.word	0x00083fb1
   80698:	000844e5 	.word	0x000844e5
   8069c:	b60b60b7 	.word	0xb60b60b7
   806a0:	00083ee5 	.word	0x00083ee5
   806a4:	f3af 8000 	nop.w

000806a8 <init_taskFunctions>:
int16_t currentx1,currenty1;


char str[20];

void init_taskFunctions(void){
   806a8:	b570      	push	{r4, r5, r6, lr}
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   806aa:	4b2c      	ldr	r3, [pc, #176]	; (8075c <init_taskFunctions+0xb4>)
   806ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   806b0:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   806b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   806b6:	492a      	ldr	r1, [pc, #168]	; (80760 <init_taskFunctions+0xb8>)
   806b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   806bc:	610b      	str	r3, [r1, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   806be:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   806c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   806c6:	614b      	str	r3, [r1, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   806c8:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   806cc:	4a25      	ldr	r2, [pc, #148]	; (80764 <init_taskFunctions+0xbc>)
   806ce:	2402      	movs	r4, #2
   806d0:	6154      	str	r4, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   806d2:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   806d6:	2008      	movs	r0, #8
   806d8:	6150      	str	r0, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   806da:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   806de:	f44f 7300 	mov.w	r3, #512	; 0x200
   806e2:	6153      	str	r3, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   806e4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   806e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   806ec:	6153      	str	r3, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   806ee:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   806f2:	4b1d      	ldr	r3, [pc, #116]	; (80768 <init_taskFunctions+0xc0>)
   806f4:	2504      	movs	r5, #4
   806f6:	615d      	str	r5, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   806f8:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   806fc:	2601      	movs	r6, #1
   806fe:	6156      	str	r6, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80700:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80704:	6155      	str	r5, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80706:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8070a:	2540      	movs	r5, #64	; 0x40
   8070c:	6155      	str	r5, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8070e:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80712:	2280      	movs	r2, #128	; 0x80
   80714:	614a      	str	r2, [r1, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80716:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8071a:	615c      	str	r4, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8071c:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80720:	6158      	str	r0, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80722:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80726:	f44f 7080 	mov.w	r0, #256	; 0x100
   8072a:	6158      	str	r0, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8072c:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80730:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   80734:	6158      	str	r0, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80736:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8073a:	6148      	str	r0, [r1, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8073c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80740:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   80744:	6159      	str	r1, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80746:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8074a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8074c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80750:	635a      	str	r2, [r3, #52]	; 0x34
	
	ioport_set_pin_level(START_CAMERA,LOW);

	
	
	printf("\nPins OK");
   80752:	4806      	ldr	r0, [pc, #24]	; (8076c <init_taskFunctions+0xc4>)
   80754:	4b06      	ldr	r3, [pc, #24]	; (80770 <init_taskFunctions+0xc8>)
   80756:	4798      	blx	r3
   80758:	bd70      	pop	{r4, r5, r6, pc}
   8075a:	bf00      	nop
   8075c:	400e1000 	.word	0x400e1000
   80760:	400e0e00 	.word	0x400e0e00
   80764:	400e1400 	.word	0x400e1400
   80768:	400e1200 	.word	0x400e1200
   8076c:	0008a218 	.word	0x0008a218
   80770:	00084591 	.word	0x00084591

00080774 <driveForward>:
void resetCounter(void){
	interruptCounter = 0;
}


int driveForward(void){
   80774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	r_count = 0;
   80778:	4d52      	ldr	r5, [pc, #328]	; (808c4 <driveForward+0x150>)
   8077a:	2300      	movs	r3, #0
   8077c:	602b      	str	r3, [r5, #0]
	l_count = 0;
   8077e:	4e52      	ldr	r6, [pc, #328]	; (808c8 <driveForward+0x154>)
   80780:	6033      	str	r3, [r6, #0]
	
	int driveCount = 0;
	
	r_speed=speed;
   80782:	4b52      	ldr	r3, [pc, #328]	; (808cc <driveForward+0x158>)
   80784:	6819      	ldr	r1, [r3, #0]
   80786:	4b52      	ldr	r3, [pc, #328]	; (808d0 <driveForward+0x15c>)
   80788:	6019      	str	r1, [r3, #0]
	l_speed=speed;
   8078a:	4b52      	ldr	r3, [pc, #328]	; (808d4 <driveForward+0x160>)
   8078c:	6019      	str	r1, [r3, #0]
	
	moveForward(l_speed,r_speed);
   8078e:	4608      	mov	r0, r1
   80790:	4b51      	ldr	r3, [pc, #324]	; (808d8 <driveForward+0x164>)
   80792:	4798      	blx	r3
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80794:	4c51      	ldr	r4, [pc, #324]	; (808dc <driveForward+0x168>)
   80796:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
   8079a:	4b51      	ldr	r3, [pc, #324]	; (808e0 <driveForward+0x16c>)
   8079c:	f8d3 c03c 	ldr.w	ip, [r3, #60]	; 0x3c
   807a0:	f8d3 e03c 	ldr.w	lr, [r3, #60]	; 0x3c
   807a4:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
   807a6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   807a8:	4a4e      	ldr	r2, [pc, #312]	; (808e4 <driveForward+0x170>)
   807aa:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
   807ac:	f3c8 38c0 	ubfx	r8, r8, #15, #1
   807b0:	f3cc 0c40 	ubfx	ip, ip, #1, #1
	

// 	ioport_set_pin_level(R_RESET,LOW);
// 	ioport_set_pin_level(L_RESET,LOW);
	
	r_count = ioport_get_pin_level(R0)+ioport_get_pin_level(R1)*2+ioport_get_pin_level(R2)*4+ioport_get_pin_level(R3)*8
   807b4:	eb08 0c4c 	add.w	ip, r8, ip, lsl #1
   807b8:	f3ce 0ec0 	ubfx	lr, lr, #3, #1
   807bc:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
   807c0:	f3c7 2740 	ubfx	r7, r7, #9, #1
   807c4:	eb0e 07c7 	add.w	r7, lr, r7, lsl #3
   807c8:	f3c0 2080 	ubfx	r0, r0, #10, #1
	+ioport_get_pin_level(R4)*16+ioport_get_pin_level(R5)*32;
   807cc:	eb07 1000 	add.w	r0, r7, r0, lsl #4
   807d0:	f3c1 0180 	ubfx	r1, r1, #2, #1
   807d4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
	

// 	ioport_set_pin_level(R_RESET,LOW);
// 	ioport_set_pin_level(L_RESET,LOW);
	
	r_count = ioport_get_pin_level(R0)+ioport_get_pin_level(R1)*2+ioport_get_pin_level(R2)*4+ioport_get_pin_level(R3)*8
   807d8:	6029      	str	r1, [r5, #0]
   807da:	f8d3 c03c 	ldr.w	ip, [r3, #60]	; 0x3c
   807de:	f8d3 e03c 	ldr.w	lr, [r3, #60]	; 0x3c
   807e2:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
   807e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   807e6:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
   807e8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   807ea:	f00c 0201 	and.w	r2, ip, #1
   807ee:	f3ce 0e80 	ubfx	lr, lr, #2, #1
	+ioport_get_pin_level(R4)*16+ioport_get_pin_level(R5)*32;
	
	l_count = ioport_get_pin_level(L0)+ioport_get_pin_level(L1)*2+ioport_get_pin_level(L2)*4+ioport_get_pin_level(L3)*8
   807f2:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
   807f6:	f3c7 1780 	ubfx	r7, r7, #6, #1
   807fa:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   807fe:	f3c1 11c0 	ubfx	r1, r1, #7, #1
   80802:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   80806:	f3c0 0240 	ubfx	r2, r0, #1, #1
	+ioport_get_pin_level(L4)*16+ioport_get_pin_level(L5)*32;
   8080a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   8080e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   80812:	eb02 1343 	add.w	r3, r2, r3, lsl #5
// 	ioport_set_pin_level(L_RESET,LOW);
	
	r_count = ioport_get_pin_level(R0)+ioport_get_pin_level(R1)*2+ioport_get_pin_level(R2)*4+ioport_get_pin_level(R3)*8
	+ioport_get_pin_level(R4)*16+ioport_get_pin_level(R5)*32;
	
	l_count = ioport_get_pin_level(L0)+ioport_get_pin_level(L1)*2+ioport_get_pin_level(L2)*4+ioport_get_pin_level(L3)*8
   80816:	6033      	str	r3, [r6, #0]
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80818:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80908 <driveForward+0x194>
   8081c:	f04f 6980 	mov.w	r9, #67108864	; 0x4000000
   80820:	f8c8 9030 	str.w	r9, [r8, #48]	; 0x30
   80824:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   80828:	6327      	str	r7, [r4, #48]	; 0x30
	+ioport_get_pin_level(L4)*16+ioport_get_pin_level(L5)*32;
	
	ioport_set_pin_level(R_RESET,HIGH);
	ioport_set_pin_level(L_RESET,HIGH);
	vTaskDelay(3);
   8082a:	2003      	movs	r0, #3
   8082c:	4b2e      	ldr	r3, [pc, #184]	; (808e8 <driveForward+0x174>)
   8082e:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80830:	f8c8 9034 	str.w	r9, [r8, #52]	; 0x34
   80834:	6367      	str	r7, [r4, #52]	; 0x34
	ioport_set_pin_level(R_RESET,LOW);
	ioport_set_pin_level(L_RESET,LOW);
	e = 0 - (r_count - l_count);
   80836:	6832      	ldr	r2, [r6, #0]
   80838:	682b      	ldr	r3, [r5, #0]
   8083a:	1ad2      	subs	r2, r2, r3
   8083c:	4c2b      	ldr	r4, [pc, #172]	; (808ec <driveForward+0x178>)
   8083e:	6022      	str	r2, [r4, #0]
	
	
	sprintf(str,"\nFelvärde: %d",e);
   80840:	4d2b      	ldr	r5, [pc, #172]	; (808f0 <driveForward+0x17c>)
   80842:	4628      	mov	r0, r5
   80844:	492b      	ldr	r1, [pc, #172]	; (808f4 <driveForward+0x180>)
   80846:	4b2c      	ldr	r3, [pc, #176]	; (808f8 <driveForward+0x184>)
   80848:	4798      	blx	r3
	printf(str);
   8084a:	4628      	mov	r0, r5
   8084c:	4b2b      	ldr	r3, [pc, #172]	; (808fc <driveForward+0x188>)
   8084e:	4798      	blx	r3
	
// 	r_speed=speed;
// 	l_speed=speed;
	if(e > 0) {
   80850:	6823      	ldr	r3, [r4, #0]
   80852:	2b00      	cmp	r3, #0
   80854:	dd0c      	ble.n	80870 <driveForward+0xfc>
		
		r_speed=speed-(e*Kp);
   80856:	4a1d      	ldr	r2, [pc, #116]	; (808cc <driveForward+0x158>)
   80858:	6812      	ldr	r2, [r2, #0]
   8085a:	4929      	ldr	r1, [pc, #164]	; (80900 <driveForward+0x18c>)
   8085c:	6809      	ldr	r1, [r1, #0]
   8085e:	fb01 f303 	mul.w	r3, r1, r3
   80862:	1ad0      	subs	r0, r2, r3
   80864:	491a      	ldr	r1, [pc, #104]	; (808d0 <driveForward+0x15c>)
   80866:	6008      	str	r0, [r1, #0]
		l_speed=speed+(e*Kp);
   80868:	4413      	add	r3, r2
   8086a:	491a      	ldr	r1, [pc, #104]	; (808d4 <driveForward+0x160>)
   8086c:	600b      	str	r3, [r1, #0]
   8086e:	e014      	b.n	8089a <driveForward+0x126>
		
	}
	else if (e < 0){
   80870:	2b00      	cmp	r3, #0
   80872:	da0c      	bge.n	8088e <driveForward+0x11a>
		
		r_speed=speed+(e*Kp);
   80874:	4a22      	ldr	r2, [pc, #136]	; (80900 <driveForward+0x18c>)
   80876:	6812      	ldr	r2, [r2, #0]
   80878:	fb02 f303 	mul.w	r3, r2, r3
   8087c:	4a13      	ldr	r2, [pc, #76]	; (808cc <driveForward+0x158>)
   8087e:	6812      	ldr	r2, [r2, #0]
   80880:	1898      	adds	r0, r3, r2
   80882:	4913      	ldr	r1, [pc, #76]	; (808d0 <driveForward+0x15c>)
   80884:	6008      	str	r0, [r1, #0]
		l_speed=speed-(e*Kp);
   80886:	1ad3      	subs	r3, r2, r3
   80888:	4912      	ldr	r1, [pc, #72]	; (808d4 <driveForward+0x160>)
   8088a:	600b      	str	r3, [r1, #0]
   8088c:	e005      	b.n	8089a <driveForward+0x126>
	}
	else{
		moveForward(l_speed,r_speed);
   8088e:	4b11      	ldr	r3, [pc, #68]	; (808d4 <driveForward+0x160>)
   80890:	6818      	ldr	r0, [r3, #0]
   80892:	4b0f      	ldr	r3, [pc, #60]	; (808d0 <driveForward+0x15c>)
   80894:	6819      	ldr	r1, [r3, #0]
   80896:	4b10      	ldr	r3, [pc, #64]	; (808d8 <driveForward+0x164>)
   80898:	4798      	blx	r3
	}

	driveCount = (r_count+l_count)/2;
   8089a:	4b0a      	ldr	r3, [pc, #40]	; (808c4 <driveForward+0x150>)
   8089c:	681c      	ldr	r4, [r3, #0]
   8089e:	4b0a      	ldr	r3, [pc, #40]	; (808c8 <driveForward+0x154>)
   808a0:	681b      	ldr	r3, [r3, #0]
   808a2:	441c      	add	r4, r3
   808a4:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   808a8:	1064      	asrs	r4, r4, #1
	
	sprintf(str,"\ndriveCount = %d",driveCount);
   808aa:	4d11      	ldr	r5, [pc, #68]	; (808f0 <driveForward+0x17c>)
   808ac:	4628      	mov	r0, r5
   808ae:	4915      	ldr	r1, [pc, #84]	; (80904 <driveForward+0x190>)
   808b0:	4622      	mov	r2, r4
   808b2:	4b11      	ldr	r3, [pc, #68]	; (808f8 <driveForward+0x184>)
   808b4:	4798      	blx	r3
	printf(str);
   808b6:	4628      	mov	r0, r5
   808b8:	4b10      	ldr	r3, [pc, #64]	; (808fc <driveForward+0x188>)
   808ba:	4798      	blx	r3
	
	return driveCount;
}
   808bc:	4620      	mov	r0, r4
   808be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   808c2:	bf00      	nop
   808c4:	20070a94 	.word	0x20070a94
   808c8:	20070a80 	.word	0x20070a80
   808cc:	20070180 	.word	0x20070180
   808d0:	20070a8c 	.word	0x20070a8c
   808d4:	20070a90 	.word	0x20070a90
   808d8:	000815dd 	.word	0x000815dd
   808dc:	400e0e00 	.word	0x400e0e00
   808e0:	400e1400 	.word	0x400e1400
   808e4:	400e1200 	.word	0x400e1200
   808e8:	00082479 	.word	0x00082479
   808ec:	20070a88 	.word	0x20070a88
   808f0:	20078de8 	.word	0x20078de8
   808f4:	0008a238 	.word	0x0008a238
   808f8:	00084849 	.word	0x00084849
   808fc:	00084591 	.word	0x00084591
   80900:	2007017c 	.word	0x2007017c
   80904:	0008a248 	.word	0x0008a248
   80908:	400e1000 	.word	0x400e1000

0008090c <rotate>:

int rotate(int turn_angle, int direction){		//Minimum vinkel är fyra
   8090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80910:	4681      	mov	r9, r0
// 	printf(str);
	
	
	int ret = 0;
	
	int reverse_angle = (direction + 180) % 360;
   80912:	31b4      	adds	r1, #180	; 0xb4
   80914:	f8df 8238 	ldr.w	r8, [pc, #568]	; 80b50 <rotate+0x244>
   80918:	fb81 4508 	smull	r4, r5, r1, r8
   8091c:	eb01 0a05 	add.w	sl, r1, r5
   80920:	17cb      	asrs	r3, r1, #31
   80922:	ebc3 2a2a 	rsb	sl, r3, sl, asr #8
   80926:	f44f 77b4 	mov.w	r7, #360	; 0x168
   8092a:	fb07 1a1a 	mls	sl, r7, sl, r1
	
	sprintf(str,"\nreverse_angle: %d",reverse_angle);
   8092e:	4c77      	ldr	r4, [pc, #476]	; (80b0c <rotate+0x200>)
   80930:	4620      	mov	r0, r4
   80932:	4977      	ldr	r1, [pc, #476]	; (80b10 <rotate+0x204>)
   80934:	4652      	mov	r2, sl
   80936:	4e77      	ldr	r6, [pc, #476]	; (80b14 <rotate+0x208>)
   80938:	47b0      	blx	r6
	printf(str);
   8093a:	4620      	mov	r0, r4
   8093c:	4d76      	ldr	r5, [pc, #472]	; (80b18 <rotate+0x20c>)
   8093e:	47a8      	blx	r5

	int direct_angle = ((abs(reverse_angle - 360) + turn_angle) % 360) - 180;
   80940:	f5aa 7ab4 	sub.w	sl, sl, #360	; 0x168
   80944:	f1ba 0f00 	cmp.w	sl, #0
   80948:	bfb8      	it	lt
   8094a:	f1ca 0a00 	rsblt	sl, sl, #0
   8094e:	44d1      	add	r9, sl
   80950:	fb89 2308 	smull	r2, r3, r9, r8
   80954:	eb09 0203 	add.w	r2, r9, r3
   80958:	ea4f 73e9 	mov.w	r3, r9, asr #31
   8095c:	ebc3 2322 	rsb	r3, r3, r2, asr #8
   80960:	fb07 9913 	mls	r9, r7, r3, r9
   80964:	f1a9 09b4 	sub.w	r9, r9, #180	; 0xb4

	sprintf(str,"\ndirect_angle: %d",direct_angle);
   80968:	4620      	mov	r0, r4
   8096a:	496c      	ldr	r1, [pc, #432]	; (80b1c <rotate+0x210>)
   8096c:	464a      	mov	r2, r9
   8096e:	47b0      	blx	r6
	printf(str);
   80970:	4620      	mov	r0, r4
   80972:	47a8      	blx	r5

	r_count = 0;
   80974:	2300      	movs	r3, #0
   80976:	4a6a      	ldr	r2, [pc, #424]	; (80b20 <rotate+0x214>)
   80978:	6013      	str	r3, [r2, #0]
	l_count = 0;
   8097a:	4a6a      	ldr	r2, [pc, #424]	; (80b24 <rotate+0x218>)
   8097c:	6013      	str	r3, [r2, #0]

	printf("\ncount null");
   8097e:	486a      	ldr	r0, [pc, #424]	; (80b28 <rotate+0x21c>)
   80980:	47a8      	blx	r5
   80982:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80986:	4b69      	ldr	r3, [pc, #420]	; (80b2c <rotate+0x220>)
   80988:	635a      	str	r2, [r3, #52]	; 0x34
   8098a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8098e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80992:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(L_RESET,LOW);
	ioport_set_pin_level(R_RESET,LOW);

	//Sväng vänster

	if(direct_angle > 0){
   80994:	f1b9 0f00 	cmp.w	r9, #0
   80998:	dd47      	ble.n	80a2a <rotate+0x11e>
		while(r_count < (abs(direct_angle) / 4)){
   8099a:	f1b9 0f00 	cmp.w	r9, #0
   8099e:	bfb8      	it	lt
   809a0:	f1c9 0900 	rsblt	r9, r9, #0
   809a4:	464e      	mov	r6, r9
   809a6:	f1b9 0f00 	cmp.w	r9, #0
   809aa:	bfb8      	it	lt
   809ac:	f109 0603 	addlt.w	r6, r9, #3
   809b0:	10b6      	asrs	r6, r6, #2
   809b2:	4b5b      	ldr	r3, [pc, #364]	; (80b20 <rotate+0x214>)
   809b4:	6818      	ldr	r0, [r3, #0]
   809b6:	4286      	cmp	r6, r0
   809b8:	dd2c      	ble.n	80a14 <rotate+0x108>
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   809ba:	f8df 8170 	ldr.w	r8, [pc, #368]	; 80b2c <rotate+0x220>
   809be:	4c5c      	ldr	r4, [pc, #368]	; (80b30 <rotate+0x224>)
   809c0:	4f5c      	ldr	r7, [pc, #368]	; (80b34 <rotate+0x228>)
   809c2:	f8d8 c03c 	ldr.w	ip, [r8, #60]	; 0x3c
   809c6:	f8d4 e03c 	ldr.w	lr, [r4, #60]	; 0x3c
   809ca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   809cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   809ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   809d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
			r_count = ioport_get_pin_level(R0)+ioport_get_pin_level(R1)*2+ioport_get_pin_level(R2)*4+ioport_get_pin_level(R3)*8
   809d2:	4d53      	ldr	r5, [pc, #332]	; (80b20 <rotate+0x214>)
   809d4:	f3cc 3cc0 	ubfx	ip, ip, #15, #1
   809d8:	f3ce 0e40 	ubfx	lr, lr, #1, #1
   809dc:	eb0c 0e4e 	add.w	lr, ip, lr, lsl #1
   809e0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   809e4:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   809e8:	f3c1 2140 	ubfx	r1, r1, #9, #1
   809ec:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   809f0:	f3c2 2280 	ubfx	r2, r2, #10, #1
			+ioport_get_pin_level(R4)*16+ioport_get_pin_level(R5)*32;
   809f4:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   809f8:	f3c3 0380 	ubfx	r3, r3, #2, #1
   809fc:	eb02 1343 	add.w	r3, r2, r3, lsl #5

	//Sväng vänster

	if(direct_angle > 0){
		while(r_count < (abs(direct_angle) / 4)){
			r_count = ioport_get_pin_level(R0)+ioport_get_pin_level(R1)*2+ioport_get_pin_level(R2)*4+ioport_get_pin_level(R3)*8
   80a00:	602b      	str	r3, [r5, #0]
			+ioport_get_pin_level(R4)*16+ioport_get_pin_level(R5)*32;
			

			moveForward(1400,1600);
   80a02:	f44f 60af 	mov.w	r0, #1400	; 0x578
   80a06:	f44f 61c8 	mov.w	r1, #1600	; 0x640
   80a0a:	4b4b      	ldr	r3, [pc, #300]	; (80b38 <rotate+0x22c>)
   80a0c:	4798      	blx	r3
	ioport_set_pin_level(R_RESET,LOW);

	//Sväng vänster

	if(direct_angle > 0){
		while(r_count < (abs(direct_angle) / 4)){
   80a0e:	6828      	ldr	r0, [r5, #0]
   80a10:	42b0      	cmp	r0, r6
   80a12:	dbd6      	blt.n	809c2 <rotate+0xb6>

		}
		
		
		
		int count_total = r_count * 4;
   80a14:	0085      	lsls	r5, r0, #2
		//printf("RCOUNT =%d ",r_count);
		sprintf(str,"\ncount_right = %d", count_total);
   80a16:	4c3d      	ldr	r4, [pc, #244]	; (80b0c <rotate+0x200>)
   80a18:	4620      	mov	r0, r4
   80a1a:	4948      	ldr	r1, [pc, #288]	; (80b3c <rotate+0x230>)
   80a1c:	462a      	mov	r2, r5
   80a1e:	4b3d      	ldr	r3, [pc, #244]	; (80b14 <rotate+0x208>)
   80a20:	4798      	blx	r3
		printf(str);
   80a22:	4620      	mov	r0, r4
   80a24:	4b3c      	ldr	r3, [pc, #240]	; (80b18 <rotate+0x20c>)
   80a26:	4798      	blx	r3
   80a28:	e05a      	b.n	80ae0 <rotate+0x1d4>
		
	}

	//Sväng höger

	else if(direct_angle < 0){
   80a2a:	f1b9 0f00 	cmp.w	r9, #0
   80a2e:	da51      	bge.n	80ad4 <rotate+0x1c8>
		while(l_count < (abs(direct_angle) / 4)){
   80a30:	f1b9 0f00 	cmp.w	r9, #0
   80a34:	bfb8      	it	lt
   80a36:	f1c9 0900 	rsblt	r9, r9, #0
   80a3a:	46c8      	mov	r8, r9
   80a3c:	f1b9 0f00 	cmp.w	r9, #0
   80a40:	bfb8      	it	lt
   80a42:	f109 0803 	addlt.w	r8, r9, #3
   80a46:	ea4f 08a8 	mov.w	r8, r8, asr #2
   80a4a:	4b36      	ldr	r3, [pc, #216]	; (80b24 <rotate+0x218>)
   80a4c:	681b      	ldr	r3, [r3, #0]
   80a4e:	4598      	cmp	r8, r3
   80a50:	dd33      	ble.n	80aba <rotate+0x1ae>
   80a52:	4c37      	ldr	r4, [pc, #220]	; (80b30 <rotate+0x224>)
   80a54:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 80b2c <rotate+0x220>
   80a58:	4f36      	ldr	r7, [pc, #216]	; (80b34 <rotate+0x228>)
   80a5a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   80a5c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   80a5e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   80a60:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
   80a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   80a66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   80a68:	f006 0601 	and.w	r6, r6, #1
   80a6c:	f3c5 0580 	ubfx	r5, r5, #2, #1
			l_count = ioport_get_pin_level(L0)+ioport_get_pin_level(L1)*2+ioport_get_pin_level(L2)*4+ioport_get_pin_level(L3)*8
   80a70:	eb06 0545 	add.w	r5, r6, r5, lsl #1
   80a74:	f3c0 1080 	ubfx	r0, r0, #6, #1
   80a78:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   80a7c:	f3c1 11c0 	ubfx	r1, r1, #7, #1
   80a80:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   80a84:	f3c3 0340 	ubfx	r3, r3, #1, #1
			+ioport_get_pin_level(L4)*16+ioport_get_pin_level(L5)*32;
   80a88:	eb01 1303 	add.w	r3, r1, r3, lsl #4
   80a8c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   80a90:	eb03 1242 	add.w	r2, r3, r2, lsl #5

	//Sväng höger

	else if(direct_angle < 0){
		while(l_count < (abs(direct_angle) / 4)){
			l_count = ioport_get_pin_level(L0)+ioport_get_pin_level(L1)*2+ioport_get_pin_level(L2)*4+ioport_get_pin_level(L3)*8
   80a94:	4d23      	ldr	r5, [pc, #140]	; (80b24 <rotate+0x218>)
   80a96:	602a      	str	r2, [r5, #0]
			+ioport_get_pin_level(L4)*16+ioport_get_pin_level(L5)*32;
			
			sprintf(str,"\nl_count = %d", l_count);
   80a98:	4e1c      	ldr	r6, [pc, #112]	; (80b0c <rotate+0x200>)
   80a9a:	4630      	mov	r0, r6
   80a9c:	4928      	ldr	r1, [pc, #160]	; (80b40 <rotate+0x234>)
   80a9e:	4b1d      	ldr	r3, [pc, #116]	; (80b14 <rotate+0x208>)
   80aa0:	4798      	blx	r3
			printf(str);
   80aa2:	4630      	mov	r0, r6
   80aa4:	4b1c      	ldr	r3, [pc, #112]	; (80b18 <rotate+0x20c>)
   80aa6:	4798      	blx	r3

			moveForward(1600,1400);
   80aa8:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   80aac:	f44f 61af 	mov.w	r1, #1400	; 0x578
   80ab0:	4b21      	ldr	r3, [pc, #132]	; (80b38 <rotate+0x22c>)
   80ab2:	4798      	blx	r3
	}

	//Sväng höger

	else if(direct_angle < 0){
		while(l_count < (abs(direct_angle) / 4)){
   80ab4:	682b      	ldr	r3, [r5, #0]
   80ab6:	4543      	cmp	r3, r8
   80ab8:	dbcf      	blt.n	80a5a <rotate+0x14e>

			moveForward(1600,1400);

		}
		
		int count_total = -l_count * 4;
   80aba:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   80abe:	009a      	lsls	r2, r3, #2
   80ac0:	4615      	mov	r5, r2
		sprintf(str,"\ncount_left = %d", count_total);
   80ac2:	4c12      	ldr	r4, [pc, #72]	; (80b0c <rotate+0x200>)
   80ac4:	4620      	mov	r0, r4
   80ac6:	491f      	ldr	r1, [pc, #124]	; (80b44 <rotate+0x238>)
   80ac8:	4b12      	ldr	r3, [pc, #72]	; (80b14 <rotate+0x208>)
   80aca:	4798      	blx	r3
		printf(str);
   80acc:	4620      	mov	r0, r4
   80ace:	4b12      	ldr	r3, [pc, #72]	; (80b18 <rotate+0x20c>)
   80ad0:	4798      	blx	r3
   80ad2:	e005      	b.n	80ae0 <rotate+0x1d4>
	}

	//Stoppa

	else{
		moveForward(1500,1500);
   80ad4:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80ad8:	4601      	mov	r1, r0
   80ada:	4b17      	ldr	r3, [pc, #92]	; (80b38 <rotate+0x22c>)
   80adc:	4798      	blx	r3
// 	
// 	sprintf(str,"\ndirection: %d",direction);
// 	printf(str);
	
	
	int ret = 0;
   80ade:	2500      	movs	r5, #0
	else{
		moveForward(1500,1500);
		
	}
	
	sprintf(str,"\nCounter = %d",interruptCounter);
   80ae0:	4c0a      	ldr	r4, [pc, #40]	; (80b0c <rotate+0x200>)
   80ae2:	4620      	mov	r0, r4
   80ae4:	4918      	ldr	r1, [pc, #96]	; (80b48 <rotate+0x23c>)
   80ae6:	4b19      	ldr	r3, [pc, #100]	; (80b4c <rotate+0x240>)
   80ae8:	681a      	ldr	r2, [r3, #0]
   80aea:	4b0a      	ldr	r3, [pc, #40]	; (80b14 <rotate+0x208>)
   80aec:	4798      	blx	r3
	printf(str);
   80aee:	4620      	mov	r0, r4
   80af0:	4b09      	ldr	r3, [pc, #36]	; (80b18 <rotate+0x20c>)
   80af2:	4798      	blx	r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80af4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80af8:	4b0c      	ldr	r3, [pc, #48]	; (80b2c <rotate+0x220>)
   80afa:	631a      	str	r2, [r3, #48]	; 0x30
   80afc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80b00:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80b04:	631a      	str	r2, [r3, #48]	; 0x30

	ioport_set_pin_level(L_RESET,HIGH);
	ioport_set_pin_level(R_RESET,HIGH);

	return ret;
}
   80b06:	4628      	mov	r0, r5
   80b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80b0c:	20078de8 	.word	0x20078de8
   80b10:	0008a25c 	.word	0x0008a25c
   80b14:	00084849 	.word	0x00084849
   80b18:	00084591 	.word	0x00084591
   80b1c:	0008a270 	.word	0x0008a270
   80b20:	20070a94 	.word	0x20070a94
   80b24:	20070a80 	.word	0x20070a80
   80b28:	0008a284 	.word	0x0008a284
   80b2c:	400e0e00 	.word	0x400e0e00
   80b30:	400e1400 	.word	0x400e1400
   80b34:	400e1200 	.word	0x400e1200
   80b38:	000815dd 	.word	0x000815dd
   80b3c:	0008a290 	.word	0x0008a290
   80b40:	0008a2a4 	.word	0x0008a2a4
   80b44:	0008a2b4 	.word	0x0008a2b4
   80b48:	0008a2c8 	.word	0x0008a2c8
   80b4c:	20070a84 	.word	0x20070a84
   80b50:	b60b60b7 	.word	0xb60b60b7

00080b54 <cameraSearch>:

int cameraSearch(void){
   80b54:	b570      	push	{r4, r5, r6, lr}
   80b56:	2280      	movs	r2, #128	; 0x80
   80b58:	4b21      	ldr	r3, [pc, #132]	; (80be0 <cameraSearch+0x8c>)
   80b5a:	631a      	str	r2, [r3, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80b5c:	461c      	mov	r4, r3
   80b5e:	4d21      	ldr	r5, [pc, #132]	; (80be4 <cameraSearch+0x90>)
			printf("\nTurn around");
		}else if(ioport_get_pin_level(ON_TARGET)){
			r=1;
			printf("\nOn target");
		}else{
			printf("\nError");
   80b60:	4e21      	ldr	r6, [pc, #132]	; (80be8 <cameraSearch+0x94>)
   80b62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	ioport_set_pin_level(START_CAMERA,HIGH);
	
	int r = 0;
	
	while(0 == r){
		if(ioport_get_pin_level(TURN_LEFT)){
   80b64:	f413 7f80 	tst.w	r3, #256	; 0x100
   80b68:	d009      	beq.n	80b7e <cameraSearch+0x2a>
			moveForward(1400,1600);
   80b6a:	f44f 60af 	mov.w	r0, #1400	; 0x578
   80b6e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
   80b72:	4b1e      	ldr	r3, [pc, #120]	; (80bec <cameraSearch+0x98>)
   80b74:	4798      	blx	r3
			printf("\nTurn left");
   80b76:	481e      	ldr	r0, [pc, #120]	; (80bf0 <cameraSearch+0x9c>)
   80b78:	4b1e      	ldr	r3, [pc, #120]	; (80bf4 <cameraSearch+0xa0>)
   80b7a:	4798      	blx	r3
   80b7c:	e7f1      	b.n	80b62 <cameraSearch+0xe>
   80b7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		} 
		else if(ioport_get_pin_level(TURN_RIGHT)){
   80b80:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   80b84:	d009      	beq.n	80b9a <cameraSearch+0x46>
			moveForward(1600,1400);	
   80b86:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   80b8a:	f44f 61af 	mov.w	r1, #1400	; 0x578
   80b8e:	4b17      	ldr	r3, [pc, #92]	; (80bec <cameraSearch+0x98>)
   80b90:	4798      	blx	r3
			printf("\nTurn right");
   80b92:	4819      	ldr	r0, [pc, #100]	; (80bf8 <cameraSearch+0xa4>)
   80b94:	4b17      	ldr	r3, [pc, #92]	; (80bf4 <cameraSearch+0xa0>)
   80b96:	4798      	blx	r3
   80b98:	e7e3      	b.n	80b62 <cameraSearch+0xe>
   80b9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		}
		else if(ioport_get_pin_level(OFF_TARGET)){
   80b9c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   80ba0:	d009      	beq.n	80bb6 <cameraSearch+0x62>
			moveForward(1600,1400);
   80ba2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   80ba6:	f44f 61af 	mov.w	r1, #1400	; 0x578
   80baa:	4b10      	ldr	r3, [pc, #64]	; (80bec <cameraSearch+0x98>)
   80bac:	4798      	blx	r3
			printf("\nTurn around");
   80bae:	4813      	ldr	r0, [pc, #76]	; (80bfc <cameraSearch+0xa8>)
   80bb0:	4b10      	ldr	r3, [pc, #64]	; (80bf4 <cameraSearch+0xa0>)
   80bb2:	4798      	blx	r3
   80bb4:	e7d5      	b.n	80b62 <cameraSearch+0xe>
   80bb6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
		}else if(ioport_get_pin_level(ON_TARGET)){
   80bb8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   80bbc:	d103      	bne.n	80bc6 <cameraSearch+0x72>
			r=1;
			printf("\nOn target");
		}else{
			printf("\nError");
   80bbe:	4630      	mov	r0, r6
   80bc0:	4b0c      	ldr	r3, [pc, #48]	; (80bf4 <cameraSearch+0xa0>)
   80bc2:	4798      	blx	r3
   80bc4:	e7cd      	b.n	80b62 <cameraSearch+0xe>
		else if(ioport_get_pin_level(OFF_TARGET)){
			moveForward(1600,1400);
			printf("\nTurn around");
		}else if(ioport_get_pin_level(ON_TARGET)){
			r=1;
			printf("\nOn target");
   80bc6:	480e      	ldr	r0, [pc, #56]	; (80c00 <cameraSearch+0xac>)
   80bc8:	4b0a      	ldr	r3, [pc, #40]	; (80bf4 <cameraSearch+0xa0>)
   80bca:	4798      	blx	r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80bcc:	2280      	movs	r2, #128	; 0x80
   80bce:	4b04      	ldr	r3, [pc, #16]	; (80be0 <cameraSearch+0x8c>)
   80bd0:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	
	ioport_set_pin_level(START_CAMERA,LOW);
	
	moveForward(1500,1500);
   80bd2:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80bd6:	4601      	mov	r1, r0
   80bd8:	4b04      	ldr	r3, [pc, #16]	; (80bec <cameraSearch+0x98>)
   80bda:	4798      	blx	r3
	
	return r;	
}
   80bdc:	2001      	movs	r0, #1
   80bde:	bd70      	pop	{r4, r5, r6, pc}
   80be0:	400e1200 	.word	0x400e1200
   80be4:	400e0e00 	.word	0x400e0e00
   80be8:	0008a30c 	.word	0x0008a30c
   80bec:	000815dd 	.word	0x000815dd
   80bf0:	0008a2d8 	.word	0x0008a2d8
   80bf4:	00084591 	.word	0x00084591
   80bf8:	0008a2e4 	.word	0x0008a2e4
   80bfc:	0008a2f0 	.word	0x0008a2f0
   80c00:	0008a300 	.word	0x0008a300

00080c04 <getStartData>:
	printf(str);
	currentPos[0] = currentx1;
	currentPos[1] = currenty1;
}

void getStartData(){
   80c04:	b508      	push	{r3, lr}
	na_sendstatus(SOCKETXY);
   80c06:	2052      	movs	r0, #82	; 0x52
   80c08:	4b01      	ldr	r3, [pc, #4]	; (80c10 <getStartData+0xc>)
   80c0a:	4798      	blx	r3
   80c0c:	bd08      	pop	{r3, pc}
   80c0e:	bf00      	nop
   80c10:	000802ad 	.word	0x000802ad

00080c14 <pulseins>:
}




int pulseins(void){
   80c14:	b570      	push	{r4, r5, r6, lr}
	int state = 1;
	int flag = 0,clocktime;
   80c16:	2200      	movs	r2, #0
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80c18:	4c11      	ldr	r4, [pc, #68]	; (80c60 <pulseins+0x4c>)
	while(state){
		if(ioport_get_pin_level(EchoPin) && !flag){
			tc_start(TC0,0);
   80c1a:	4e12      	ldr	r6, [pc, #72]	; (80c64 <pulseins+0x50>)
   80c1c:	4d12      	ldr	r5, [pc, #72]	; (80c68 <pulseins+0x54>)
   80c1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c

int pulseins(void){
	int state = 1;
	int flag = 0,clocktime;
	while(state){
		if(ioport_get_pin_level(EchoPin) && !flag){
   80c20:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80c24:	d005      	beq.n	80c32 <pulseins+0x1e>
   80c26:	b95a      	cbnz	r2, 80c40 <pulseins+0x2c>
			tc_start(TC0,0);
   80c28:	4630      	mov	r0, r6
   80c2a:	2100      	movs	r1, #0
   80c2c:	47a8      	blx	r5
			flag = 1;
   80c2e:	2201      	movs	r2, #1
   80c30:	e006      	b.n	80c40 <pulseins+0x2c>
   80c32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		}
		if(!ioport_get_pin_level(EchoPin) && flag)
   80c34:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80c38:	d1f1      	bne.n	80c1e <pulseins+0xa>
   80c3a:	2a00      	cmp	r2, #0
   80c3c:	d0ef      	beq.n	80c1e <pulseins+0xa>
   80c3e:	e003      	b.n	80c48 <pulseins+0x34>
   80c40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80c42:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80c46:	d1ea      	bne.n	80c1e <pulseins+0xa>
		{
			clocktime = tc_read_cv(TC0,0);
   80c48:	4c06      	ldr	r4, [pc, #24]	; (80c64 <pulseins+0x50>)
   80c4a:	4620      	mov	r0, r4
   80c4c:	2100      	movs	r1, #0
   80c4e:	4b07      	ldr	r3, [pc, #28]	; (80c6c <pulseins+0x58>)
   80c50:	4798      	blx	r3
   80c52:	4605      	mov	r5, r0
			tc_stop(TC0,0);
   80c54:	4620      	mov	r0, r4
   80c56:	2100      	movs	r1, #0
   80c58:	4b05      	ldr	r3, [pc, #20]	; (80c70 <pulseins+0x5c>)
   80c5a:	4798      	blx	r3
			flag = 0;
			state = 0;
		}
	}
	return clocktime;
}
   80c5c:	4628      	mov	r0, r5
   80c5e:	bd70      	pop	{r4, r5, r6, pc}
   80c60:	400e1200 	.word	0x400e1200
   80c64:	40080000 	.word	0x40080000
   80c68:	0008114d 	.word	0x0008114d
   80c6c:	0008115d 	.word	0x0008115d
   80c70:	00081155 	.word	0x00081155
   80c74:	00000000 	.word	0x00000000

00080c78 <task_ultraLjud>:
xSemaphoreHandle main_semafor = 0;


xQueueHandle taskQueue = 0;

void task_ultraLjud(void *pvParameters){
   80c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c7c:	b085      	sub	sp, #20
	
	vSemaphoreCreateBinary(signal_semafor);
   80c7e:	2001      	movs	r0, #1
   80c80:	2100      	movs	r1, #0
   80c82:	2203      	movs	r2, #3
   80c84:	4b84      	ldr	r3, [pc, #528]	; (80e98 <task_ultraLjud+0x220>)
   80c86:	4798      	blx	r3
   80c88:	4b84      	ldr	r3, [pc, #528]	; (80e9c <task_ultraLjud+0x224>)
   80c8a:	6018      	str	r0, [r3, #0]
   80c8c:	b120      	cbz	r0, 80c98 <task_ultraLjud+0x20>
   80c8e:	2100      	movs	r1, #0
   80c90:	460a      	mov	r2, r1
   80c92:	460b      	mov	r3, r1
   80c94:	4c82      	ldr	r4, [pc, #520]	; (80ea0 <task_ultraLjud+0x228>)
   80c96:	47a0      	blx	r4
	vSemaphoreCreateBinary(regulate_semafor);
   80c98:	2001      	movs	r0, #1
   80c9a:	2100      	movs	r1, #0
   80c9c:	2203      	movs	r2, #3
   80c9e:	4b7e      	ldr	r3, [pc, #504]	; (80e98 <task_ultraLjud+0x220>)
   80ca0:	4798      	blx	r3
   80ca2:	4b80      	ldr	r3, [pc, #512]	; (80ea4 <task_ultraLjud+0x22c>)
   80ca4:	6018      	str	r0, [r3, #0]
   80ca6:	b120      	cbz	r0, 80cb2 <task_ultraLjud+0x3a>
   80ca8:	2100      	movs	r1, #0
   80caa:	460a      	mov	r2, r1
   80cac:	460b      	mov	r3, r1
   80cae:	4c7c      	ldr	r4, [pc, #496]	; (80ea0 <task_ultraLjud+0x228>)
   80cb0:	47a0      	blx	r4
	vSemaphoreCreateBinary(main_semafor);
   80cb2:	2001      	movs	r0, #1
   80cb4:	2100      	movs	r1, #0
   80cb6:	2203      	movs	r2, #3
   80cb8:	4b77      	ldr	r3, [pc, #476]	; (80e98 <task_ultraLjud+0x220>)
   80cba:	4798      	blx	r3
   80cbc:	4b7a      	ldr	r3, [pc, #488]	; (80ea8 <task_ultraLjud+0x230>)
   80cbe:	6018      	str	r0, [r3, #0]
   80cc0:	b120      	cbz	r0, 80ccc <task_ultraLjud+0x54>
   80cc2:	2100      	movs	r1, #0
   80cc4:	460a      	mov	r2, r1
   80cc6:	460b      	mov	r3, r1
   80cc8:	4c75      	ldr	r4, [pc, #468]	; (80ea0 <task_ultraLjud+0x228>)
   80cca:	47a0      	blx	r4
	
	taskQueue = xQueueCreate(5,sizeof(int));
   80ccc:	2005      	movs	r0, #5
   80cce:	2104      	movs	r1, #4
   80cd0:	2200      	movs	r2, #0
   80cd2:	4b71      	ldr	r3, [pc, #452]	; (80e98 <task_ultraLjud+0x220>)
   80cd4:	4798      	blx	r3
   80cd6:	4b75      	ldr	r3, [pc, #468]	; (80eac <task_ultraLjud+0x234>)
   80cd8:	6018      	str	r0, [r3, #0]
	
	
	printf("\nTask Ultraljud");
   80cda:	4875      	ldr	r0, [pc, #468]	; (80eb0 <task_ultraLjud+0x238>)
   80cdc:	4c75      	ldr	r4, [pc, #468]	; (80eb4 <task_ultraLjud+0x23c>)
   80cde:	47a0      	blx	r4
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 500;
	xLastWakeTime = xTaskGetTickCount();
   80ce0:	4b75      	ldr	r3, [pc, #468]	; (80eb8 <task_ultraLjud+0x240>)
   80ce2:	4798      	blx	r3
   80ce4:	f8ad 000e 	strh.w	r0, [sp, #14]
	
	printf("\nGet start data");
   80ce8:	4874      	ldr	r0, [pc, #464]	; (80ebc <task_ultraLjud+0x244>)
   80cea:	47a0      	blx	r4
	getStartData();
   80cec:	4b74      	ldr	r3, [pc, #464]	; (80ec0 <task_ultraLjud+0x248>)
   80cee:	4798      	blx	r3
	sprintf(str,"\nstart data. x=%d y=%d",objectinfo[0].xpos,objectinfo[0].ypox);
   80cf0:	4d74      	ldr	r5, [pc, #464]	; (80ec4 <task_ultraLjud+0x24c>)
   80cf2:	4b75      	ldr	r3, [pc, #468]	; (80ec8 <task_ultraLjud+0x250>)
   80cf4:	4628      	mov	r0, r5
   80cf6:	4975      	ldr	r1, [pc, #468]	; (80ecc <task_ultraLjud+0x254>)
   80cf8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   80cfc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   80d00:	4e73      	ldr	r6, [pc, #460]	; (80ed0 <task_ultraLjud+0x258>)
   80d02:	47b0      	blx	r6
	printf(str);
   80d04:	4628      	mov	r0, r5
   80d06:	47a0      	blx	r4
	
	while (1){
		
		vTaskDelayUntil(&xLastWakeTime,xTimeIncrement);
   80d08:	f8df 9244 	ldr.w	r9, [pc, #580]	; 80f50 <task_ultraLjud+0x2d8>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80d0c:	f8df b244 	ldr.w	fp, [pc, #580]	; 80f54 <task_ultraLjud+0x2dc>
		long duration;
		ioport_set_pin_level(TriggerPin,HIGH);
		delayMicroseconds(10000);
		ioport_set_pin_level(TriggerPin,LOW);
		duration = pulseins();
		sensordistance = (duration/42)/58.2;
   80d10:	f8df a244 	ldr.w	sl, [pc, #580]	; 80f58 <task_ultraLjud+0x2e0>
	sprintf(str,"\nstart data. x=%d y=%d",objectinfo[0].xpos,objectinfo[0].ypox);
	printf(str);
	
	while (1){
		
		vTaskDelayUntil(&xLastWakeTime,xTimeIncrement);
   80d14:	f10d 000e 	add.w	r0, sp, #14
   80d18:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   80d1c:	47c8      	blx	r9
   80d1e:	f44f 0480 	mov.w	r4, #4194304	; 0x400000
   80d22:	f8cb 4030 	str.w	r4, [fp, #48]	; 0x30
		
		long duration;
		ioport_set_pin_level(TriggerPin,HIGH);
		delayMicroseconds(10000);
   80d26:	f242 7010 	movw	r0, #10000	; 0x2710
   80d2a:	4b6a      	ldr	r3, [pc, #424]	; (80ed4 <task_ultraLjud+0x25c>)
   80d2c:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80d2e:	f8cb 4034 	str.w	r4, [fp, #52]	; 0x34
		ioport_set_pin_level(TriggerPin,LOW);
		duration = pulseins();
   80d32:	4b69      	ldr	r3, [pc, #420]	; (80ed8 <task_ultraLjud+0x260>)
   80d34:	4798      	blx	r3
		sensordistance = (duration/42)/58.2;
   80d36:	fb8a 1300 	smull	r1, r3, sl, r0
   80d3a:	17c0      	asrs	r0, r0, #31
   80d3c:	ebc0 00e3 	rsb	r0, r0, r3, asr #3
   80d40:	4b66      	ldr	r3, [pc, #408]	; (80edc <task_ultraLjud+0x264>)
   80d42:	4798      	blx	r3
   80d44:	a350      	add	r3, pc, #320	; (adr r3, 80e88 <task_ultraLjud+0x210>)
   80d46:	e9d3 2300 	ldrd	r2, r3, [r3]
   80d4a:	4c65      	ldr	r4, [pc, #404]	; (80ee0 <task_ultraLjud+0x268>)
   80d4c:	47a0      	blx	r4
   80d4e:	4b65      	ldr	r3, [pc, #404]	; (80ee4 <task_ultraLjud+0x26c>)
   80d50:	4798      	blx	r3
   80d52:	4b65      	ldr	r3, [pc, #404]	; (80ee8 <task_ultraLjud+0x270>)
   80d54:	6018      	str	r0, [r3, #0]
		
		switch (main_case)
   80d56:	4b65      	ldr	r3, [pc, #404]	; (80eec <task_ultraLjud+0x274>)
   80d58:	681b      	ldr	r3, [r3, #0]
   80d5a:	2b02      	cmp	r3, #2
   80d5c:	d03f      	beq.n	80dde <task_ultraLjud+0x166>
   80d5e:	2b03      	cmp	r3, #3
   80d60:	f000 808a 	beq.w	80e78 <task_ultraLjud+0x200>
   80d64:	2b01      	cmp	r3, #1
   80d66:	f040 808b 	bne.w	80e80 <task_ultraLjud+0x208>
		{
		case 1:
			printf("\nMain case 1");
   80d6a:	4861      	ldr	r0, [pc, #388]	; (80ef0 <task_ultraLjud+0x278>)
   80d6c:	4d51      	ldr	r5, [pc, #324]	; (80eb4 <task_ultraLjud+0x23c>)
   80d6e:	47a8      	blx	r5
			getStartData();
   80d70:	4b53      	ldr	r3, [pc, #332]	; (80ec0 <task_ultraLjud+0x248>)
   80d72:	4798      	blx	r3
			targetAngle = calculateAngle(currentPos[0],currentPos[1],objectinfo[0].xpos,objectinfo[0].ypox);		//Fungerar
   80d74:	4a5f      	ldr	r2, [pc, #380]	; (80ef4 <task_ultraLjud+0x27c>)
   80d76:	4b54      	ldr	r3, [pc, #336]	; (80ec8 <task_ultraLjud+0x250>)
   80d78:	8810      	ldrh	r0, [r2, #0]
   80d7a:	8851      	ldrh	r1, [r2, #2]
   80d7c:	885a      	ldrh	r2, [r3, #2]
   80d7e:	889b      	ldrh	r3, [r3, #4]
   80d80:	4c5d      	ldr	r4, [pc, #372]	; (80ef8 <task_ultraLjud+0x280>)
   80d82:	47a0      	blx	r4
   80d84:	4602      	mov	r2, r0
   80d86:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 80f5c <task_ultraLjud+0x2e4>
   80d8a:	f8c8 0000 	str.w	r0, [r8]
			sprintf(str,"\ntarget angle = %d",targetAngle);
   80d8e:	4c4d      	ldr	r4, [pc, #308]	; (80ec4 <task_ultraLjud+0x24c>)
   80d90:	4620      	mov	r0, r4
   80d92:	495a      	ldr	r1, [pc, #360]	; (80efc <task_ultraLjud+0x284>)
   80d94:	4f4e      	ldr	r7, [pc, #312]	; (80ed0 <task_ultraLjud+0x258>)
   80d96:	47b8      	blx	r7
			printf(str);	
   80d98:	4620      	mov	r0, r4
   80d9a:	47a8      	blx	r5
			addAngle = rotate(targetAngle,currentAngle);
   80d9c:	4e58      	ldr	r6, [pc, #352]	; (80f00 <task_ultraLjud+0x288>)
   80d9e:	f8d8 0000 	ldr.w	r0, [r8]
   80da2:	6831      	ldr	r1, [r6, #0]
   80da4:	4b57      	ldr	r3, [pc, #348]	; (80f04 <task_ultraLjud+0x28c>)
   80da6:	4798      	blx	r3
   80da8:	4b57      	ldr	r3, [pc, #348]	; (80f08 <task_ultraLjud+0x290>)
   80daa:	6018      	str	r0, [r3, #0]
			
			currentAngle = (currentAngle + 360 + addAngle) % 360;
   80dac:	6833      	ldr	r3, [r6, #0]
   80dae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
   80db2:	4418      	add	r0, r3
   80db4:	4955      	ldr	r1, [pc, #340]	; (80f0c <task_ultraLjud+0x294>)
   80db6:	fb80 2301 	smull	r2, r3, r0, r1
   80dba:	18c2      	adds	r2, r0, r3
   80dbc:	17c3      	asrs	r3, r0, #31
   80dbe:	ebc3 2222 	rsb	r2, r3, r2, asr #8
   80dc2:	f44f 73b4 	mov.w	r3, #360	; 0x168
   80dc6:	fb03 0212 	mls	r2, r3, r2, r0
   80dca:	6032      	str	r2, [r6, #0]
			
			sprintf(str,"\ncurrentAngle = %d",currentAngle);
   80dcc:	4620      	mov	r0, r4
   80dce:	4950      	ldr	r1, [pc, #320]	; (80f10 <task_ultraLjud+0x298>)
   80dd0:	47b8      	blx	r7
			printf(str);
   80dd2:	4620      	mov	r0, r4
   80dd4:	47a8      	blx	r5
				
			main_case = 2;
   80dd6:	2202      	movs	r2, #2
   80dd8:	4b44      	ldr	r3, [pc, #272]	; (80eec <task_ultraLjud+0x274>)
   80dda:	601a      	str	r2, [r3, #0]

			break;
   80ddc:	e79a      	b.n	80d14 <task_ultraLjud+0x9c>
		case 2:
			printf("\nMain case 2");
   80dde:	484d      	ldr	r0, [pc, #308]	; (80f14 <task_ultraLjud+0x29c>)
   80de0:	4d34      	ldr	r5, [pc, #208]	; (80eb4 <task_ultraLjud+0x23c>)
   80de2:	47a8      	blx	r5
			targetDistance = calculateDistance(xtest1,ytest1,xtest2,ytest2);
   80de4:	4b4c      	ldr	r3, [pc, #304]	; (80f18 <task_ultraLjud+0x2a0>)
   80de6:	8818      	ldrh	r0, [r3, #0]
   80de8:	4b4c      	ldr	r3, [pc, #304]	; (80f1c <task_ultraLjud+0x2a4>)
   80dea:	8819      	ldrh	r1, [r3, #0]
   80dec:	4b4c      	ldr	r3, [pc, #304]	; (80f20 <task_ultraLjud+0x2a8>)
   80dee:	881a      	ldrh	r2, [r3, #0]
   80df0:	4b4c      	ldr	r3, [pc, #304]	; (80f24 <task_ultraLjud+0x2ac>)
   80df2:	881b      	ldrh	r3, [r3, #0]
   80df4:	4c4c      	ldr	r4, [pc, #304]	; (80f28 <task_ultraLjud+0x2b0>)
   80df6:	47a0      	blx	r4
   80df8:	4602      	mov	r2, r0
   80dfa:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80f60 <task_ultraLjud+0x2e8>
   80dfe:	f8c8 0000 	str.w	r0, [r8]
			
			sprintf(str,"\ndistance to target = %d",targetDistance);
   80e02:	4e30      	ldr	r6, [pc, #192]	; (80ec4 <task_ultraLjud+0x24c>)
   80e04:	4630      	mov	r0, r6
   80e06:	4949      	ldr	r1, [pc, #292]	; (80f2c <task_ultraLjud+0x2b4>)
   80e08:	4f31      	ldr	r7, [pc, #196]	; (80ed0 <task_ultraLjud+0x258>)
   80e0a:	47b8      	blx	r7
			printf(str);
   80e0c:	4630      	mov	r0, r6
   80e0e:	47a8      	blx	r5
			
			
			
			drivenToTarget = drivenToTarget + (driveForward() * 1.36);
   80e10:	4c47      	ldr	r4, [pc, #284]	; (80f30 <task_ultraLjud+0x2b8>)
   80e12:	6820      	ldr	r0, [r4, #0]
   80e14:	4a31      	ldr	r2, [pc, #196]	; (80edc <task_ultraLjud+0x264>)
   80e16:	4790      	blx	r2
   80e18:	e9cd 0100 	strd	r0, r1, [sp]
   80e1c:	4b45      	ldr	r3, [pc, #276]	; (80f34 <task_ultraLjud+0x2bc>)
   80e1e:	4798      	blx	r3
   80e20:	4b2e      	ldr	r3, [pc, #184]	; (80edc <task_ultraLjud+0x264>)
   80e22:	4798      	blx	r3
   80e24:	a31a      	add	r3, pc, #104	; (adr r3, 80e90 <task_ultraLjud+0x218>)
   80e26:	e9d3 2300 	ldrd	r2, r3, [r3]
   80e2a:	f8df c138 	ldr.w	ip, [pc, #312]	; 80f64 <task_ultraLjud+0x2ec>
   80e2e:	47e0      	blx	ip
   80e30:	4602      	mov	r2, r0
   80e32:	460b      	mov	r3, r1
   80e34:	e9dd 0100 	ldrd	r0, r1, [sp]
   80e38:	f8df c12c 	ldr.w	ip, [pc, #300]	; 80f68 <task_ultraLjud+0x2f0>
   80e3c:	47e0      	blx	ip
   80e3e:	4b29      	ldr	r3, [pc, #164]	; (80ee4 <task_ultraLjud+0x26c>)
   80e40:	4798      	blx	r3
   80e42:	6020      	str	r0, [r4, #0]
			printf("\nDistance drive");
   80e44:	483c      	ldr	r0, [pc, #240]	; (80f38 <task_ultraLjud+0x2c0>)
   80e46:	47a8      	blx	r5
			
			sprintf(str,"\ndriven to target = %d",drivenToTarget);
   80e48:	4630      	mov	r0, r6
   80e4a:	493c      	ldr	r1, [pc, #240]	; (80f3c <task_ultraLjud+0x2c4>)
   80e4c:	6822      	ldr	r2, [r4, #0]
   80e4e:	47b8      	blx	r7
			printf(str);
   80e50:	4630      	mov	r0, r6
   80e52:	47a8      	blx	r5
			
			

			if(30 > (targetDistance-drivenToTarget)){
   80e54:	f8d8 2000 	ldr.w	r2, [r8]
   80e58:	6823      	ldr	r3, [r4, #0]
   80e5a:	1ad3      	subs	r3, r2, r3
   80e5c:	2b1d      	cmp	r3, #29
   80e5e:	f73f af59 	bgt.w	80d14 <task_ultraLjud+0x9c>
				moveForward(1500,1500);
   80e62:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80e66:	4601      	mov	r1, r0
   80e68:	4b35      	ldr	r3, [pc, #212]	; (80f40 <task_ultraLjud+0x2c8>)
   80e6a:	4798      	blx	r3
				printf("\nDistance stop");
   80e6c:	4835      	ldr	r0, [pc, #212]	; (80f44 <task_ultraLjud+0x2cc>)
   80e6e:	47a8      	blx	r5
				main_case = 3;
   80e70:	2203      	movs	r2, #3
   80e72:	4b1e      	ldr	r3, [pc, #120]	; (80eec <task_ultraLjud+0x274>)
   80e74:	601a      	str	r2, [r3, #0]
   80e76:	e74d      	b.n	80d14 <task_ultraLjud+0x9c>
			} 
			
			break;
		case 3:
			printf("\nMain case 3");
   80e78:	4833      	ldr	r0, [pc, #204]	; (80f48 <task_ultraLjud+0x2d0>)
   80e7a:	4b0e      	ldr	r3, [pc, #56]	; (80eb4 <task_ultraLjud+0x23c>)
   80e7c:	4798      	blx	r3
			
			break;
   80e7e:	e749      	b.n	80d14 <task_ultraLjud+0x9c>
		default:	
			printf("\nmain default");
   80e80:	4832      	ldr	r0, [pc, #200]	; (80f4c <task_ultraLjud+0x2d4>)
   80e82:	4b0c      	ldr	r3, [pc, #48]	; (80eb4 <task_ultraLjud+0x23c>)
   80e84:	4798      	blx	r3
			break;
   80e86:	e745      	b.n	80d14 <task_ultraLjud+0x9c>
   80e88:	9999999a 	.word	0x9999999a
   80e8c:	404d1999 	.word	0x404d1999
   80e90:	5c28f5c3 	.word	0x5c28f5c3
   80e94:	3ff5c28f 	.word	0x3ff5c28f
   80e98:	00081af1 	.word	0x00081af1
   80e9c:	20070aa8 	.word	0x20070aa8
   80ea0:	00081b49 	.word	0x00081b49
   80ea4:	20070ab0 	.word	0x20070ab0
   80ea8:	20070aa4 	.word	0x20070aa4
   80eac:	20070aac 	.word	0x20070aac
   80eb0:	0008a328 	.word	0x0008a328
   80eb4:	00084591 	.word	0x00084591
   80eb8:	0008218d 	.word	0x0008218d
   80ebc:	0008a338 	.word	0x0008a338
   80ec0:	00080c05 	.word	0x00080c05
   80ec4:	20078de8 	.word	0x20078de8
   80ec8:	20078db8 	.word	0x20078db8
   80ecc:	0008a348 	.word	0x0008a348
   80ed0:	00084849 	.word	0x00084849
   80ed4:	00081559 	.word	0x00081559
   80ed8:	00080c15 	.word	0x00080c15
   80edc:	00083ee5 	.word	0x00083ee5
   80ee0:	00084205 	.word	0x00084205
   80ee4:	000844e5 	.word	0x000844e5
   80ee8:	20070188 	.word	0x20070188
   80eec:	2007018c 	.word	0x2007018c
   80ef0:	0008a360 	.word	0x0008a360
   80ef4:	20078ddc 	.word	0x20078ddc
   80ef8:	00080609 	.word	0x00080609
   80efc:	0008a370 	.word	0x0008a370
   80f00:	20070194 	.word	0x20070194
   80f04:	0008090d 	.word	0x0008090d
   80f08:	20070a98 	.word	0x20070a98
   80f0c:	b60b60b7 	.word	0xb60b60b7
   80f10:	0008a384 	.word	0x0008a384
   80f14:	0008a398 	.word	0x0008a398
   80f18:	20070abc 	.word	0x20070abc
   80f1c:	20070a9c 	.word	0x20070a9c
   80f20:	20070184 	.word	0x20070184
   80f24:	20070186 	.word	0x20070186
   80f28:	000805ad 	.word	0x000805ad
   80f2c:	0008a3a8 	.word	0x0008a3a8
   80f30:	20070ab4 	.word	0x20070ab4
   80f34:	00080775 	.word	0x00080775
   80f38:	0008a3c4 	.word	0x0008a3c4
   80f3c:	0008a3d4 	.word	0x0008a3d4
   80f40:	000815dd 	.word	0x000815dd
   80f44:	0008a3ec 	.word	0x0008a3ec
   80f48:	0008a3fc 	.word	0x0008a3fc
   80f4c:	0008a40c 	.word	0x0008a40c
   80f50:	000823e1 	.word	0x000823e1
   80f54:	400e1200 	.word	0x400e1200
   80f58:	30c30c31 	.word	0x30c30c31
   80f5c:	20070ab8 	.word	0x20070ab8
   80f60:	20070aa0 	.word	0x20070aa0
   80f64:	00083fb1 	.word	0x00083fb1
   80f68:	00083c4d 	.word	0x00083c4d
   80f6c:	f3af 8000 	nop.w

00080f70 <init_sensor>:
		}
	}
	return clocktime;
}

void init_sensor(void){
   80f70:	b510      	push	{r4, lr}
	printf("\nInit sensor OK");
   80f72:	4808      	ldr	r0, [pc, #32]	; (80f94 <init_sensor+0x24>)
   80f74:	4c08      	ldr	r4, [pc, #32]	; (80f98 <init_sensor+0x28>)
   80f76:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80f78:	4b08      	ldr	r3, [pc, #32]	; (80f9c <init_sensor+0x2c>)
   80f7a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80f7e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80f80:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80f84:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80f88:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80f8a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(TriggerPin,IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(EchoPin,IOPORT_DIR_INPUT);
	printf("\nSet Echo & Trigger OK");
   80f8e:	4804      	ldr	r0, [pc, #16]	; (80fa0 <init_sensor+0x30>)
   80f90:	47a0      	blx	r4
   80f92:	bd10      	pop	{r4, pc}
   80f94:	0008a41c 	.word	0x0008a41c
   80f98:	00084591 	.word	0x00084591
   80f9c:	400e1200 	.word	0x400e1200
   80fa0:	0008a42c 	.word	0x0008a42c

00080fa4 <task_Regulate>:
	
	
	
}

void task_Regulate(void *pvParameters){
   80fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80fa8:	b082      	sub	sp, #8
	
	
	
	portTickType xLastWakeTimeRegulate;
	const portTickType xTimeIncrementRegulate = 10;
	xLastWakeTimeRegulate = xTaskGetTickCount();
   80faa:	4b27      	ldr	r3, [pc, #156]	; (81048 <task_Regulate+0xa4>)
   80fac:	4798      	blx	r3
   80fae:	f8ad 0002 	strh.w	r0, [sp, #2]
	
	
	
	while(1){
		
		vTaskDelayUntil(&xLastWakeTimeRegulate,xTimeIncrementRegulate);
   80fb2:	4e26      	ldr	r6, [pc, #152]	; (8104c <task_Regulate+0xa8>)
		

		if(xSemaphoreTake(regulate_semafor,100)){
   80fb4:	4d26      	ldr	r5, [pc, #152]	; (81050 <task_Regulate+0xac>)
   80fb6:	4c27      	ldr	r4, [pc, #156]	; (81054 <task_Regulate+0xb0>)
			
			if(xQueueReceive(taskQueue,&ir,20)){
   80fb8:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 81090 <task_Regulate+0xec>
	
	
	
	while(1){
		
		vTaskDelayUntil(&xLastWakeTimeRegulate,xTimeIncrementRegulate);
   80fbc:	f10d 0002 	add.w	r0, sp, #2
   80fc0:	210a      	movs	r1, #10
   80fc2:	47b0      	blx	r6
		

		if(xSemaphoreTake(regulate_semafor,100)){
   80fc4:	6828      	ldr	r0, [r5, #0]
   80fc6:	2100      	movs	r1, #0
   80fc8:	2264      	movs	r2, #100	; 0x64
   80fca:	460b      	mov	r3, r1
   80fcc:	47a0      	blx	r4
   80fce:	2800      	cmp	r0, #0
   80fd0:	d0f4      	beq.n	80fbc <task_Regulate+0x18>
			
			if(xQueueReceive(taskQueue,&ir,20)){
   80fd2:	f8d8 0000 	ldr.w	r0, [r8]
   80fd6:	a901      	add	r1, sp, #4
   80fd8:	2214      	movs	r2, #20
   80fda:	2300      	movs	r3, #0
   80fdc:	47a0      	blx	r4
   80fde:	b148      	cbz	r0, 80ff4 <task_Regulate+0x50>
				sprintf(str, "\nReceived: %d", ir);
   80fe0:	4f1d      	ldr	r7, [pc, #116]	; (81058 <task_Regulate+0xb4>)
   80fe2:	4638      	mov	r0, r7
   80fe4:	491d      	ldr	r1, [pc, #116]	; (8105c <task_Regulate+0xb8>)
   80fe6:	9a01      	ldr	r2, [sp, #4]
   80fe8:	4b1d      	ldr	r3, [pc, #116]	; (81060 <task_Regulate+0xbc>)
   80fea:	4798      	blx	r3
				printf(str);
   80fec:	4638      	mov	r0, r7
   80fee:	4b1d      	ldr	r3, [pc, #116]	; (81064 <task_Regulate+0xc0>)
   80ff0:	4798      	blx	r3
   80ff2:	e002      	b.n	80ffa <task_Regulate+0x56>
				}else{
				printf("\nFailed to receive");
   80ff4:	481c      	ldr	r0, [pc, #112]	; (81068 <task_Regulate+0xc4>)
   80ff6:	4b1b      	ldr	r3, [pc, #108]	; (81064 <task_Regulate+0xc0>)
   80ff8:	4798      	blx	r3
			}
			
			switch (ir)
   80ffa:	9b01      	ldr	r3, [sp, #4]
   80ffc:	2b01      	cmp	r3, #1
   80ffe:	d005      	beq.n	8100c <task_Regulate+0x68>
   81000:	2b02      	cmp	r3, #2
   81002:	d012      	beq.n	8102a <task_Regulate+0x86>
   81004:	b9e3      	cbnz	r3, 81040 <task_Regulate+0x9c>
			{
			case 0:					//Kör framåt
				driveForward();					//Kör tills den inte gör det
   81006:	4b19      	ldr	r3, [pc, #100]	; (8106c <task_Regulate+0xc8>)
   81008:	4798      	blx	r3
				break;
   8100a:	e7d7      	b.n	80fbc <task_Regulate+0x18>
			case 1:					//Sväng
				if(rotate(angle, dir)){			//angle = slut-riktning, dir = nuvarande riktning
   8100c:	4b18      	ldr	r3, [pc, #96]	; (81070 <task_Regulate+0xcc>)
   8100e:	6818      	ldr	r0, [r3, #0]
   81010:	4b18      	ldr	r3, [pc, #96]	; (81074 <task_Regulate+0xd0>)
   81012:	6819      	ldr	r1, [r3, #0]
   81014:	4b18      	ldr	r3, [pc, #96]	; (81078 <task_Regulate+0xd4>)
   81016:	4798      	blx	r3
   81018:	b118      	cbz	r0, 81022 <task_Regulate+0x7e>
					n=3;
   8101a:	2203      	movs	r2, #3
   8101c:	4b17      	ldr	r3, [pc, #92]	; (8107c <task_Regulate+0xd8>)
   8101e:	601a      	str	r2, [r3, #0]
   81020:	e7cc      	b.n	80fbc <task_Regulate+0x18>
				}else{
					printf("\nRotate not completed");
   81022:	4817      	ldr	r0, [pc, #92]	; (81080 <task_Regulate+0xdc>)
   81024:	4b0f      	ldr	r3, [pc, #60]	; (81064 <task_Regulate+0xc0>)
   81026:	4798      	blx	r3
   81028:	e7c8      	b.n	80fbc <task_Regulate+0x18>
				}
				break;
			case 2:					//Sensor-sök
				if(cameraSearch()){
   8102a:	4b16      	ldr	r3, [pc, #88]	; (81084 <task_Regulate+0xe0>)
   8102c:	4798      	blx	r3
   8102e:	b118      	cbz	r0, 81038 <task_Regulate+0x94>
					n=3;
   81030:	2203      	movs	r2, #3
   81032:	4b12      	ldr	r3, [pc, #72]	; (8107c <task_Regulate+0xd8>)
   81034:	601a      	str	r2, [r3, #0]
   81036:	e7c1      	b.n	80fbc <task_Regulate+0x18>
				}else{
					printf("\nObject not found");
   81038:	4813      	ldr	r0, [pc, #76]	; (81088 <task_Regulate+0xe4>)
   8103a:	4b0a      	ldr	r3, [pc, #40]	; (81064 <task_Regulate+0xc0>)
   8103c:	4798      	blx	r3
   8103e:	e7bd      	b.n	80fbc <task_Regulate+0x18>
				}
				break;
			default:
				printf("\nDefault");
   81040:	4812      	ldr	r0, [pc, #72]	; (8108c <task_Regulate+0xe8>)
   81042:	4b08      	ldr	r3, [pc, #32]	; (81064 <task_Regulate+0xc0>)
   81044:	4798      	blx	r3
				break;
   81046:	e7b9      	b.n	80fbc <task_Regulate+0x18>
   81048:	0008218d 	.word	0x0008218d
   8104c:	000823e1 	.word	0x000823e1
   81050:	20070ab0 	.word	0x20070ab0
   81054:	00081cfd 	.word	0x00081cfd
   81058:	20078de8 	.word	0x20078de8
   8105c:	0008a444 	.word	0x0008a444
   81060:	00084849 	.word	0x00084849
   81064:	00084591 	.word	0x00084591
   81068:	0008a454 	.word	0x0008a454
   8106c:	00080775 	.word	0x00080775
   81070:	20070198 	.word	0x20070198
   81074:	20070190 	.word	0x20070190
   81078:	0008090d 	.word	0x0008090d
   8107c:	20070ac0 	.word	0x20070ac0
   81080:	0008a468 	.word	0x0008a468
   81084:	00080b55 	.word	0x00080b55
   81088:	0008a480 	.word	0x0008a480
   8108c:	0008a494 	.word	0x0008a494
   81090:	20070aac 	.word	0x20070aac

00081094 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   81094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81098:	460c      	mov	r4, r1
   8109a:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   8109c:	b960      	cbnz	r0, 810b8 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   8109e:	2a00      	cmp	r2, #0
   810a0:	dd0e      	ble.n	810c0 <_read+0x2c>
   810a2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   810a4:	4e09      	ldr	r6, [pc, #36]	; (810cc <_read+0x38>)
   810a6:	4d0a      	ldr	r5, [pc, #40]	; (810d0 <_read+0x3c>)
   810a8:	6830      	ldr	r0, [r6, #0]
   810aa:	4621      	mov	r1, r4
   810ac:	682b      	ldr	r3, [r5, #0]
   810ae:	4798      	blx	r3
		ptr++;
   810b0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   810b2:	42bc      	cmp	r4, r7
   810b4:	d1f8      	bne.n	810a8 <_read+0x14>
   810b6:	e006      	b.n	810c6 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   810b8:	f04f 30ff 	mov.w	r0, #4294967295
   810bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   810c0:	2000      	movs	r0, #0
   810c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   810c6:	4640      	mov	r0, r8
	}
	return nChars;
}
   810c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   810cc:	20078e10 	.word	0x20078e10
   810d0:	20078e08 	.word	0x20078e08

000810d4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   810d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   810d8:	460e      	mov	r6, r1
   810da:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   810dc:	3801      	subs	r0, #1
   810de:	2802      	cmp	r0, #2
   810e0:	d80f      	bhi.n	81102 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   810e2:	b192      	cbz	r2, 8110a <_write+0x36>
   810e4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   810e6:	f8df 803c 	ldr.w	r8, [pc, #60]	; 81124 <_write+0x50>
   810ea:	4f0d      	ldr	r7, [pc, #52]	; (81120 <_write+0x4c>)
   810ec:	f8d8 0000 	ldr.w	r0, [r8]
   810f0:	5d31      	ldrb	r1, [r6, r4]
   810f2:	683b      	ldr	r3, [r7, #0]
   810f4:	4798      	blx	r3
   810f6:	2800      	cmp	r0, #0
   810f8:	db0a      	blt.n	81110 <_write+0x3c>
			return -1;
		}
		++nChars;
   810fa:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   810fc:	42a5      	cmp	r5, r4
   810fe:	d1f5      	bne.n	810ec <_write+0x18>
   81100:	e00a      	b.n	81118 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   81102:	f04f 30ff 	mov.w	r0, #4294967295
   81106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   8110a:	2000      	movs	r0, #0
   8110c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   81110:	f04f 30ff 	mov.w	r0, #4294967295
   81114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   81118:	4620      	mov	r0, r4
	}
	return nChars;
}
   8111a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8111e:	bf00      	nop
   81120:	20078e0c 	.word	0x20078e0c
   81124:	20078e10 	.word	0x20078e10

00081128 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   81128:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8112a:	0189      	lsls	r1, r1, #6
   8112c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   8112e:	2402      	movs	r4, #2
   81130:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   81132:	f04f 31ff 	mov.w	r1, #4294967295
   81136:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   81138:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   8113a:	605a      	str	r2, [r3, #4]
}
   8113c:	f85d 4b04 	ldr.w	r4, [sp], #4
   81140:	4770      	bx	lr
   81142:	bf00      	nop

00081144 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   81144:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   81148:	4770      	bx	lr
   8114a:	bf00      	nop

0008114c <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   8114c:	0189      	lsls	r1, r1, #6
   8114e:	2305      	movs	r3, #5
   81150:	5043      	str	r3, [r0, r1]
   81152:	4770      	bx	lr

00081154 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   81154:	0189      	lsls	r1, r1, #6
   81156:	2302      	movs	r3, #2
   81158:	5043      	str	r3, [r0, r1]
   8115a:	4770      	bx	lr

0008115c <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   8115c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   81160:	6908      	ldr	r0, [r1, #16]
}
   81162:	4770      	bx	lr

00081164 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81164:	6943      	ldr	r3, [r0, #20]
   81166:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8116a:	bf1d      	ittte	ne
   8116c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   81170:	61c1      	strne	r1, [r0, #28]
	return 0;
   81172:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   81174:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   81176:	4770      	bx	lr

00081178 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81178:	6943      	ldr	r3, [r0, #20]
   8117a:	f013 0f01 	tst.w	r3, #1
   8117e:	d005      	beq.n	8118c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81180:	6983      	ldr	r3, [r0, #24]
   81182:	f3c3 0308 	ubfx	r3, r3, #0, #9
   81186:	600b      	str	r3, [r1, #0]

	return 0;
   81188:	2000      	movs	r0, #0
   8118a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8118c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8118e:	4770      	bx	lr

00081190 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   81190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81194:	b083      	sub	sp, #12
   81196:	4605      	mov	r5, r0
	while (len) {
   81198:	4690      	mov	r8, r2
   8119a:	2a00      	cmp	r2, #0
   8119c:	d047      	beq.n	8122e <usart_serial_read_packet+0x9e>
   8119e:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   811a0:	4f25      	ldr	r7, [pc, #148]	; (81238 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   811a2:	4c26      	ldr	r4, [pc, #152]	; (8123c <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   811a4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 81250 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   811a8:	f8df b094 	ldr.w	fp, [pc, #148]	; 81240 <usart_serial_read_packet+0xb0>
   811ac:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   811b0:	2300      	movs	r3, #0
   811b2:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   811b4:	4b22      	ldr	r3, [pc, #136]	; (81240 <usart_serial_read_packet+0xb0>)
   811b6:	429d      	cmp	r5, r3
   811b8:	d106      	bne.n	811c8 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   811ba:	4658      	mov	r0, fp
   811bc:	4649      	mov	r1, r9
   811be:	4b21      	ldr	r3, [pc, #132]	; (81244 <usart_serial_read_packet+0xb4>)
   811c0:	4798      	blx	r3
   811c2:	2800      	cmp	r0, #0
   811c4:	d1f9      	bne.n	811ba <usart_serial_read_packet+0x2a>
   811c6:	e019      	b.n	811fc <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   811c8:	4b1f      	ldr	r3, [pc, #124]	; (81248 <usart_serial_read_packet+0xb8>)
   811ca:	429d      	cmp	r5, r3
   811cc:	d109      	bne.n	811e2 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   811ce:	4699      	mov	r9, r3
   811d0:	4648      	mov	r0, r9
   811d2:	a901      	add	r1, sp, #4
   811d4:	47a0      	blx	r4
   811d6:	2800      	cmp	r0, #0
   811d8:	d1fa      	bne.n	811d0 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   811da:	9b01      	ldr	r3, [sp, #4]
   811dc:	f806 3c01 	strb.w	r3, [r6, #-1]
   811e0:	e017      	b.n	81212 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   811e2:	4b1a      	ldr	r3, [pc, #104]	; (8124c <usart_serial_read_packet+0xbc>)
   811e4:	429d      	cmp	r5, r3
   811e6:	d109      	bne.n	811fc <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   811e8:	4699      	mov	r9, r3
   811ea:	4648      	mov	r0, r9
   811ec:	a901      	add	r1, sp, #4
   811ee:	47a0      	blx	r4
   811f0:	2800      	cmp	r0, #0
   811f2:	d1fa      	bne.n	811ea <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   811f4:	9b01      	ldr	r3, [sp, #4]
   811f6:	f806 3c01 	strb.w	r3, [r6, #-1]
   811fa:	e014      	b.n	81226 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   811fc:	4555      	cmp	r5, sl
   811fe:	d108      	bne.n	81212 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   81200:	4650      	mov	r0, sl
   81202:	a901      	add	r1, sp, #4
   81204:	47a0      	blx	r4
   81206:	2800      	cmp	r0, #0
   81208:	d1fa      	bne.n	81200 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   8120a:	9b01      	ldr	r3, [sp, #4]
   8120c:	f806 3c01 	strb.w	r3, [r6, #-1]
   81210:	e009      	b.n	81226 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81212:	42bd      	cmp	r5, r7
   81214:	d107      	bne.n	81226 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   81216:	4638      	mov	r0, r7
   81218:	a901      	add	r1, sp, #4
   8121a:	47a0      	blx	r4
   8121c:	2800      	cmp	r0, #0
   8121e:	d1fa      	bne.n	81216 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   81220:	9b01      	ldr	r3, [sp, #4]
   81222:	f806 3c01 	strb.w	r3, [r6, #-1]
   81226:	3601      	adds	r6, #1
   81228:	f1b8 0801 	subs.w	r8, r8, #1
   8122c:	d1be      	bne.n	811ac <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   8122e:	2000      	movs	r0, #0
   81230:	b003      	add	sp, #12
   81232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81236:	bf00      	nop
   81238:	400a4000 	.word	0x400a4000
   8123c:	00081179 	.word	0x00081179
   81240:	400e0800 	.word	0x400e0800
   81244:	0008129d 	.word	0x0008129d
   81248:	40098000 	.word	0x40098000
   8124c:	4009c000 	.word	0x4009c000
   81250:	400a0000 	.word	0x400a0000

00081254 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81254:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81256:	23ac      	movs	r3, #172	; 0xac
   81258:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8125a:	680a      	ldr	r2, [r1, #0]
   8125c:	684b      	ldr	r3, [r1, #4]
   8125e:	fbb2 f3f3 	udiv	r3, r2, r3
   81262:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81264:	1e5c      	subs	r4, r3, #1
   81266:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8126a:	4294      	cmp	r4, r2
   8126c:	d80a      	bhi.n	81284 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   8126e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81270:	688b      	ldr	r3, [r1, #8]
   81272:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81274:	f240 2302 	movw	r3, #514	; 0x202
   81278:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8127c:	2350      	movs	r3, #80	; 0x50
   8127e:	6003      	str	r3, [r0, #0]

	return 0;
   81280:	2000      	movs	r0, #0
   81282:	e000      	b.n	81286 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   81284:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   81286:	f85d 4b04 	ldr.w	r4, [sp], #4
   8128a:	4770      	bx	lr

0008128c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8128c:	6943      	ldr	r3, [r0, #20]
   8128e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   81292:	bf1a      	itte	ne
   81294:	61c1      	strne	r1, [r0, #28]
	return 0;
   81296:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   81298:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   8129a:	4770      	bx	lr

0008129c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8129c:	6943      	ldr	r3, [r0, #20]
   8129e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   812a2:	bf1d      	ittte	ne
   812a4:	6983      	ldrne	r3, [r0, #24]
   812a6:	700b      	strbne	r3, [r1, #0]
	return 0;
   812a8:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   812aa:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   812ac:	4770      	bx	lr
   812ae:	bf00      	nop

000812b0 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   812b0:	b500      	push	{lr}
   812b2:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   812b4:	4811      	ldr	r0, [pc, #68]	; (812fc <USART0_Handler+0x4c>)
   812b6:	f10d 0107 	add.w	r1, sp, #7
   812ba:	2201      	movs	r2, #1
   812bc:	4b10      	ldr	r3, [pc, #64]	; (81300 <USART0_Handler+0x50>)
   812be:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   812c0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   812c2:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   812c6:	2200      	movs	r2, #0
   812c8:	4b0e      	ldr	r3, [pc, #56]	; (81304 <USART0_Handler+0x54>)
   812ca:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   812cc:	4b0e      	ldr	r3, [pc, #56]	; (81308 <USART0_Handler+0x58>)
   812ce:	781b      	ldrb	r3, [r3, #0]
   812d0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   812d4:	4a0d      	ldr	r2, [pc, #52]	; (8130c <USART0_Handler+0x5c>)
   812d6:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   812d8:	2b9b      	cmp	r3, #155	; 0x9b
   812da:	d103      	bne.n	812e4 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   812dc:	2200      	movs	r2, #0
   812de:	4b0a      	ldr	r3, [pc, #40]	; (81308 <USART0_Handler+0x58>)
   812e0:	701a      	strb	r2, [r3, #0]
   812e2:	e002      	b.n	812ea <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   812e4:	3301      	adds	r3, #1
   812e6:	4a08      	ldr	r2, [pc, #32]	; (81308 <USART0_Handler+0x58>)
   812e8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   812ea:	2201      	movs	r2, #1
   812ec:	4b05      	ldr	r3, [pc, #20]	; (81304 <USART0_Handler+0x54>)
   812ee:	701a      	strb	r2, [r3, #0]
   812f0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   812f4:	b662      	cpsie	i
}
   812f6:	b003      	add	sp, #12
   812f8:	f85d fb04 	ldr.w	pc, [sp], #4
   812fc:	40098000 	.word	0x40098000
   81300:	00081191 	.word	0x00081191
   81304:	200701a6 	.word	0x200701a6
   81308:	20070b60 	.word	0x20070b60
   8130c:	20070ac4 	.word	0x20070ac4

00081310 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   81310:	b5f0      	push	{r4, r5, r6, r7, lr}
   81312:	b083      	sub	sp, #12
   81314:	4604      	mov	r4, r0
   81316:	460d      	mov	r5, r1
	uint32_t val = 0;
   81318:	2300      	movs	r3, #0
   8131a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8131c:	4b1f      	ldr	r3, [pc, #124]	; (8139c <usart_serial_getchar+0x8c>)
   8131e:	4298      	cmp	r0, r3
   81320:	d107      	bne.n	81332 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   81322:	461f      	mov	r7, r3
   81324:	4e1e      	ldr	r6, [pc, #120]	; (813a0 <usart_serial_getchar+0x90>)
   81326:	4638      	mov	r0, r7
   81328:	4629      	mov	r1, r5
   8132a:	47b0      	blx	r6
   8132c:	2800      	cmp	r0, #0
   8132e:	d1fa      	bne.n	81326 <usart_serial_getchar+0x16>
   81330:	e019      	b.n	81366 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81332:	4b1c      	ldr	r3, [pc, #112]	; (813a4 <usart_serial_getchar+0x94>)
   81334:	4298      	cmp	r0, r3
   81336:	d109      	bne.n	8134c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   81338:	461f      	mov	r7, r3
   8133a:	4e1b      	ldr	r6, [pc, #108]	; (813a8 <usart_serial_getchar+0x98>)
   8133c:	4638      	mov	r0, r7
   8133e:	a901      	add	r1, sp, #4
   81340:	47b0      	blx	r6
   81342:	2800      	cmp	r0, #0
   81344:	d1fa      	bne.n	8133c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   81346:	9b01      	ldr	r3, [sp, #4]
   81348:	702b      	strb	r3, [r5, #0]
   8134a:	e019      	b.n	81380 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8134c:	4b17      	ldr	r3, [pc, #92]	; (813ac <usart_serial_getchar+0x9c>)
   8134e:	4298      	cmp	r0, r3
   81350:	d109      	bne.n	81366 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   81352:	461e      	mov	r6, r3
   81354:	4c14      	ldr	r4, [pc, #80]	; (813a8 <usart_serial_getchar+0x98>)
   81356:	4630      	mov	r0, r6
   81358:	a901      	add	r1, sp, #4
   8135a:	47a0      	blx	r4
   8135c:	2800      	cmp	r0, #0
   8135e:	d1fa      	bne.n	81356 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   81360:	9b01      	ldr	r3, [sp, #4]
   81362:	702b      	strb	r3, [r5, #0]
   81364:	e018      	b.n	81398 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81366:	4b12      	ldr	r3, [pc, #72]	; (813b0 <usart_serial_getchar+0xa0>)
   81368:	429c      	cmp	r4, r3
   8136a:	d109      	bne.n	81380 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   8136c:	461e      	mov	r6, r3
   8136e:	4c0e      	ldr	r4, [pc, #56]	; (813a8 <usart_serial_getchar+0x98>)
   81370:	4630      	mov	r0, r6
   81372:	a901      	add	r1, sp, #4
   81374:	47a0      	blx	r4
   81376:	2800      	cmp	r0, #0
   81378:	d1fa      	bne.n	81370 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8137a:	9b01      	ldr	r3, [sp, #4]
   8137c:	702b      	strb	r3, [r5, #0]
   8137e:	e00b      	b.n	81398 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81380:	4b0c      	ldr	r3, [pc, #48]	; (813b4 <usart_serial_getchar+0xa4>)
   81382:	429c      	cmp	r4, r3
   81384:	d108      	bne.n	81398 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   81386:	461e      	mov	r6, r3
   81388:	4c07      	ldr	r4, [pc, #28]	; (813a8 <usart_serial_getchar+0x98>)
   8138a:	4630      	mov	r0, r6
   8138c:	a901      	add	r1, sp, #4
   8138e:	47a0      	blx	r4
   81390:	2800      	cmp	r0, #0
   81392:	d1fa      	bne.n	8138a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   81394:	9b01      	ldr	r3, [sp, #4]
   81396:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   81398:	b003      	add	sp, #12
   8139a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8139c:	400e0800 	.word	0x400e0800
   813a0:	0008129d 	.word	0x0008129d
   813a4:	40098000 	.word	0x40098000
   813a8:	00081179 	.word	0x00081179
   813ac:	4009c000 	.word	0x4009c000
   813b0:	400a0000 	.word	0x400a0000
   813b4:	400a4000 	.word	0x400a4000

000813b8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   813b8:	b570      	push	{r4, r5, r6, lr}
   813ba:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   813bc:	4b21      	ldr	r3, [pc, #132]	; (81444 <usart_serial_putchar+0x8c>)
   813be:	4298      	cmp	r0, r3
   813c0:	d107      	bne.n	813d2 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   813c2:	461e      	mov	r6, r3
   813c4:	4d20      	ldr	r5, [pc, #128]	; (81448 <usart_serial_putchar+0x90>)
   813c6:	4630      	mov	r0, r6
   813c8:	4621      	mov	r1, r4
   813ca:	47a8      	blx	r5
   813cc:	2800      	cmp	r0, #0
   813ce:	d1fa      	bne.n	813c6 <usart_serial_putchar+0xe>
   813d0:	e02b      	b.n	8142a <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   813d2:	4b1e      	ldr	r3, [pc, #120]	; (8144c <usart_serial_putchar+0x94>)
   813d4:	4298      	cmp	r0, r3
   813d6:	d107      	bne.n	813e8 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   813d8:	461e      	mov	r6, r3
   813da:	4d1d      	ldr	r5, [pc, #116]	; (81450 <usart_serial_putchar+0x98>)
   813dc:	4630      	mov	r0, r6
   813de:	4621      	mov	r1, r4
   813e0:	47a8      	blx	r5
   813e2:	2800      	cmp	r0, #0
   813e4:	d1fa      	bne.n	813dc <usart_serial_putchar+0x24>
   813e6:	e022      	b.n	8142e <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   813e8:	4b1a      	ldr	r3, [pc, #104]	; (81454 <usart_serial_putchar+0x9c>)
   813ea:	4298      	cmp	r0, r3
   813ec:	d107      	bne.n	813fe <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   813ee:	461e      	mov	r6, r3
   813f0:	4d17      	ldr	r5, [pc, #92]	; (81450 <usart_serial_putchar+0x98>)
   813f2:	4630      	mov	r0, r6
   813f4:	4621      	mov	r1, r4
   813f6:	47a8      	blx	r5
   813f8:	2800      	cmp	r0, #0
   813fa:	d1fa      	bne.n	813f2 <usart_serial_putchar+0x3a>
   813fc:	e019      	b.n	81432 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   813fe:	4b16      	ldr	r3, [pc, #88]	; (81458 <usart_serial_putchar+0xa0>)
   81400:	4298      	cmp	r0, r3
   81402:	d107      	bne.n	81414 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   81404:	461e      	mov	r6, r3
   81406:	4d12      	ldr	r5, [pc, #72]	; (81450 <usart_serial_putchar+0x98>)
   81408:	4630      	mov	r0, r6
   8140a:	4621      	mov	r1, r4
   8140c:	47a8      	blx	r5
   8140e:	2800      	cmp	r0, #0
   81410:	d1fa      	bne.n	81408 <usart_serial_putchar+0x50>
   81412:	e010      	b.n	81436 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81414:	4b11      	ldr	r3, [pc, #68]	; (8145c <usart_serial_putchar+0xa4>)
   81416:	4298      	cmp	r0, r3
   81418:	d10f      	bne.n	8143a <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   8141a:	461e      	mov	r6, r3
   8141c:	4d0c      	ldr	r5, [pc, #48]	; (81450 <usart_serial_putchar+0x98>)
   8141e:	4630      	mov	r0, r6
   81420:	4621      	mov	r1, r4
   81422:	47a8      	blx	r5
   81424:	2800      	cmp	r0, #0
   81426:	d1fa      	bne.n	8141e <usart_serial_putchar+0x66>
   81428:	e009      	b.n	8143e <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   8142a:	2001      	movs	r0, #1
   8142c:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8142e:	2001      	movs	r0, #1
   81430:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81432:	2001      	movs	r0, #1
   81434:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81436:	2001      	movs	r0, #1
   81438:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8143a:	2000      	movs	r0, #0
   8143c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8143e:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   81440:	bd70      	pop	{r4, r5, r6, pc}
   81442:	bf00      	nop
   81444:	400e0800 	.word	0x400e0800
   81448:	0008128d 	.word	0x0008128d
   8144c:	40098000 	.word	0x40098000
   81450:	00081165 	.word	0x00081165
   81454:	4009c000 	.word	0x4009c000
   81458:	400a0000 	.word	0x400a0000
   8145c:	400a4000 	.word	0x400a4000

00081460 <configure_console>:
#include <asf.h>
#include "conf_board.h"
#include "Functions/ConsoleFunctions.h"

void configure_console(void)
{
   81460:	b530      	push	{r4, r5, lr}
   81462:	b085      	sub	sp, #20
   81464:	2008      	movs	r0, #8
   81466:	4d19      	ldr	r5, [pc, #100]	; (814cc <configure_console+0x6c>)
   81468:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8146a:	4c19      	ldr	r4, [pc, #100]	; (814d0 <configure_console+0x70>)
   8146c:	4b19      	ldr	r3, [pc, #100]	; (814d4 <configure_console+0x74>)
   8146e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81470:	4a19      	ldr	r2, [pc, #100]	; (814d8 <configure_console+0x78>)
   81472:	4b1a      	ldr	r3, [pc, #104]	; (814dc <configure_console+0x7c>)
   81474:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81476:	4a1a      	ldr	r2, [pc, #104]	; (814e0 <configure_console+0x80>)
   81478:	4b1a      	ldr	r3, [pc, #104]	; (814e4 <configure_console+0x84>)
   8147a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8147c:	4b1a      	ldr	r3, [pc, #104]	; (814e8 <configure_console+0x88>)
   8147e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   81480:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   81484:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   81486:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8148a:	9303      	str	r3, [sp, #12]
   8148c:	2008      	movs	r0, #8
   8148e:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   81490:	4620      	mov	r0, r4
   81492:	a901      	add	r1, sp, #4
   81494:	4b15      	ldr	r3, [pc, #84]	; (814ec <configure_console+0x8c>)
   81496:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81498:	4d15      	ldr	r5, [pc, #84]	; (814f0 <configure_console+0x90>)
   8149a:	682b      	ldr	r3, [r5, #0]
   8149c:	6898      	ldr	r0, [r3, #8]
   8149e:	2100      	movs	r1, #0
   814a0:	4c14      	ldr	r4, [pc, #80]	; (814f4 <configure_console+0x94>)
   814a2:	47a0      	blx	r4
	setbuf(stdin, NULL);
   814a4:	682b      	ldr	r3, [r5, #0]
   814a6:	6858      	ldr	r0, [r3, #4]
   814a8:	2100      	movs	r1, #0
   814aa:	47a0      	blx	r4
	};
	
	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	printf("Konsolen reado\n");
   814ac:	4812      	ldr	r0, [pc, #72]	; (814f8 <configure_console+0x98>)
   814ae:	4c13      	ldr	r4, [pc, #76]	; (814fc <configure_console+0x9c>)
   814b0:	47a0      	blx	r4
	printf("===============\n");
   814b2:	4813      	ldr	r0, [pc, #76]	; (81500 <configure_console+0xa0>)
   814b4:	47a0      	blx	r4
	printf("-- %s\n\r", BOARD_NAME);
   814b6:	4813      	ldr	r0, [pc, #76]	; (81504 <configure_console+0xa4>)
   814b8:	4913      	ldr	r1, [pc, #76]	; (81508 <configure_console+0xa8>)
   814ba:	47a0      	blx	r4
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
   814bc:	4813      	ldr	r0, [pc, #76]	; (8150c <configure_console+0xac>)
   814be:	4914      	ldr	r1, [pc, #80]	; (81510 <configure_console+0xb0>)
   814c0:	4a14      	ldr	r2, [pc, #80]	; (81514 <configure_console+0xb4>)
   814c2:	47a0      	blx	r4
	printf("Whilesatsen");
   814c4:	4814      	ldr	r0, [pc, #80]	; (81518 <configure_console+0xb8>)
   814c6:	47a0      	blx	r4
   814c8:	b005      	add	sp, #20
   814ca:	bd30      	pop	{r4, r5, pc}
   814cc:	000830e9 	.word	0x000830e9
   814d0:	400e0800 	.word	0x400e0800
   814d4:	20078e10 	.word	0x20078e10
   814d8:	000813b9 	.word	0x000813b9
   814dc:	20078e0c 	.word	0x20078e0c
   814e0:	00081311 	.word	0x00081311
   814e4:	20078e08 	.word	0x20078e08
   814e8:	0501bd00 	.word	0x0501bd00
   814ec:	00081255 	.word	0x00081255
   814f0:	200705d8 	.word	0x200705d8
   814f4:	00084739 	.word	0x00084739
   814f8:	0008a4a0 	.word	0x0008a4a0
   814fc:	00084591 	.word	0x00084591
   81500:	0008a4b0 	.word	0x0008a4b0
   81504:	0008a4c4 	.word	0x0008a4c4
   81508:	0008a4cc 	.word	0x0008a4cc
   8150c:	0008a4dc 	.word	0x0008a4dc
   81510:	0008a4f4 	.word	0x0008a4f4
   81514:	0008a500 	.word	0x0008a500
   81518:	0008a50c 	.word	0x0008a50c

0008151c <delayInit>:

#include "asf.h"
#include "Functions/DelayFunctions.h"

void delayInit(void)		/* Initializes the timer used for delays */
{
   8151c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);
   8151e:	201b      	movs	r0, #27
   81520:	4b08      	ldr	r3, [pc, #32]	; (81544 <delayInit+0x28>)
   81522:	4798      	blx	r3
	tc_init(TC0,0,0);		 /* TC0, channel 0, TCLK1 och capturemode */
   81524:	4c08      	ldr	r4, [pc, #32]	; (81548 <delayInit+0x2c>)
   81526:	4620      	mov	r0, r4
   81528:	2100      	movs	r1, #0
   8152a:	460a      	mov	r2, r1
   8152c:	4b07      	ldr	r3, [pc, #28]	; (8154c <delayInit+0x30>)
   8152e:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   81530:	4620      	mov	r0, r4
   81532:	2100      	movs	r1, #0
   81534:	4b06      	ldr	r3, [pc, #24]	; (81550 <delayInit+0x34>)
   81536:	4798      	blx	r3
	tc_stop(TC0,0);			/* making sure the timer does not run  */
   81538:	4620      	mov	r0, r4
   8153a:	2100      	movs	r1, #0
   8153c:	4b05      	ldr	r3, [pc, #20]	; (81554 <delayInit+0x38>)
   8153e:	4798      	blx	r3
   81540:	bd10      	pop	{r4, pc}
   81542:	bf00      	nop
   81544:	000830e9 	.word	0x000830e9
   81548:	40080000 	.word	0x40080000
   8154c:	00081129 	.word	0x00081129
   81550:	00081145 	.word	0x00081145
   81554:	00081155 	.word	0x00081155

00081558 <delayMicroseconds>:
}


void delayMicroseconds(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   81558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8155a:	4604      	mov	r4, r0
	tc_start(TC0,0);
   8155c:	4809      	ldr	r0, [pc, #36]	; (81584 <delayMicroseconds+0x2c>)
   8155e:	2100      	movs	r1, #0
   81560:	4b09      	ldr	r3, [pc, #36]	; (81588 <delayMicroseconds+0x30>)
   81562:	4798      	blx	r3
	while (tc_read_cv(TC0,0) < us*42); /* Only works in newere version of ASF */
   81564:	272a      	movs	r7, #42	; 0x2a
   81566:	fb07 f704 	mul.w	r7, r7, r4
   8156a:	4e06      	ldr	r6, [pc, #24]	; (81584 <delayMicroseconds+0x2c>)
   8156c:	2500      	movs	r5, #0
   8156e:	4c07      	ldr	r4, [pc, #28]	; (8158c <delayMicroseconds+0x34>)
   81570:	4630      	mov	r0, r6
   81572:	4629      	mov	r1, r5
   81574:	47a0      	blx	r4
   81576:	42b8      	cmp	r0, r7
   81578:	d3fa      	bcc.n	81570 <delayMicroseconds+0x18>
	tc_stop(TC0,0);
   8157a:	4802      	ldr	r0, [pc, #8]	; (81584 <delayMicroseconds+0x2c>)
   8157c:	2100      	movs	r1, #0
   8157e:	4b04      	ldr	r3, [pc, #16]	; (81590 <delayMicroseconds+0x38>)
   81580:	4798      	blx	r3
   81582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81584:	40080000 	.word	0x40080000
   81588:	0008114d 	.word	0x0008114d
   8158c:	0008115d 	.word	0x0008115d
   81590:	00081155 	.word	0x00081155

00081594 <initMotor>:
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81594:	4b04      	ldr	r3, [pc, #16]	; (815a8 <initMotor+0x14>)
   81596:	2210      	movs	r2, #16
   81598:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8159a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8159e:	2220      	movs	r2, #32
   815a0:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   815a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   815a6:	4770      	bx	lr
   815a8:	400e1200 	.word	0x400e1200

000815ac <pulseLeft>:
}




void pulseLeft(int p1){
   815ac:	b538      	push	{r3, r4, r5, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   815ae:	4c03      	ldr	r4, [pc, #12]	; (815bc <pulseLeft+0x10>)
   815b0:	2510      	movs	r5, #16
   815b2:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LEFT,HIGH);
	delayMicroseconds(p1);
   815b4:	4b02      	ldr	r3, [pc, #8]	; (815c0 <pulseLeft+0x14>)
   815b6:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   815b8:	6365      	str	r5, [r4, #52]	; 0x34
   815ba:	bd38      	pop	{r3, r4, r5, pc}
   815bc:	400e1200 	.word	0x400e1200
   815c0:	00081559 	.word	0x00081559

000815c4 <pulseRight>:
	ioport_set_pin_level(LEFT,LOW);
}
void pulseRight(int p2){
   815c4:	b538      	push	{r3, r4, r5, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   815c6:	4c03      	ldr	r4, [pc, #12]	; (815d4 <pulseRight+0x10>)
   815c8:	2520      	movs	r5, #32
   815ca:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(RIGHT,HIGH);
	delayMicroseconds(p2);
   815cc:	4b02      	ldr	r3, [pc, #8]	; (815d8 <pulseRight+0x14>)
   815ce:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   815d0:	6365      	str	r5, [r4, #52]	; 0x34
   815d2:	bd38      	pop	{r3, r4, r5, pc}
   815d4:	400e1200 	.word	0x400e1200
   815d8:	00081559 	.word	0x00081559

000815dc <moveForward>:
	ioport_set_pin_level(RIGHT,LOW);
}

void moveForward(int l,int r){
   815dc:	b510      	push	{r4, lr}
   815de:	460c      	mov	r4, r1
	pulseLeft(l);
   815e0:	4b04      	ldr	r3, [pc, #16]	; (815f4 <moveForward+0x18>)
   815e2:	4798      	blx	r3
	pulseRight(r);
   815e4:	4620      	mov	r0, r4
   815e6:	4b04      	ldr	r3, [pc, #16]	; (815f8 <moveForward+0x1c>)
   815e8:	4798      	blx	r3
	delayMicroseconds(5250);
   815ea:	f241 4082 	movw	r0, #5250	; 0x1482
   815ee:	4b03      	ldr	r3, [pc, #12]	; (815fc <moveForward+0x20>)
   815f0:	4798      	blx	r3
   815f2:	bd10      	pop	{r4, pc}
   815f4:	000815ad 	.word	0x000815ad
   815f8:	000815c5 	.word	0x000815c5
   815fc:	00081559 	.word	0x00081559

00081600 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   81600:	f100 0308 	add.w	r3, r0, #8
   81604:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   81606:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8160a:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   8160c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   8160e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   81610:	2300      	movs	r3, #0
   81612:	6003      	str	r3, [r0, #0]
   81614:	4770      	bx	lr
   81616:	bf00      	nop

00081618 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   81618:	2300      	movs	r3, #0
   8161a:	6103      	str	r3, [r0, #16]
   8161c:	4770      	bx	lr
   8161e:	bf00      	nop

00081620 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   81620:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   81622:	685a      	ldr	r2, [r3, #4]
   81624:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   81626:	6842      	ldr	r2, [r0, #4]
   81628:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8162a:	685a      	ldr	r2, [r3, #4]
   8162c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8162e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   81630:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81632:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81634:	6803      	ldr	r3, [r0, #0]
   81636:	3301      	adds	r3, #1
   81638:	6003      	str	r3, [r0, #0]
   8163a:	4770      	bx	lr

0008163c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   8163c:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   8163e:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   81640:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81644:	429c      	cmp	r4, r3
   81646:	d101      	bne.n	8164c <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   81648:	6903      	ldr	r3, [r0, #16]
   8164a:	e00c      	b.n	81666 <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   8164c:	f100 0308 	add.w	r3, r0, #8
   81650:	68c2      	ldr	r2, [r0, #12]
   81652:	8812      	ldrh	r2, [r2, #0]
   81654:	b292      	uxth	r2, r2
   81656:	4294      	cmp	r4, r2
   81658:	d305      	bcc.n	81666 <vListInsert+0x2a>
   8165a:	685b      	ldr	r3, [r3, #4]
   8165c:	685a      	ldr	r2, [r3, #4]
   8165e:	8812      	ldrh	r2, [r2, #0]
   81660:	b292      	uxth	r2, r2
   81662:	4294      	cmp	r4, r2
   81664:	d2f9      	bcs.n	8165a <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   81666:	685a      	ldr	r2, [r3, #4]
   81668:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8166a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   8166c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   8166e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81670:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81672:	6803      	ldr	r3, [r0, #0]
   81674:	3301      	adds	r3, #1
   81676:	6003      	str	r3, [r0, #0]
}
   81678:	f85d 4b04 	ldr.w	r4, [sp], #4
   8167c:	4770      	bx	lr
   8167e:	bf00      	nop

00081680 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   81680:	6843      	ldr	r3, [r0, #4]
   81682:	6882      	ldr	r2, [r0, #8]
   81684:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   81686:	6883      	ldr	r3, [r0, #8]
   81688:	6842      	ldr	r2, [r0, #4]
   8168a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   8168c:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8168e:	685a      	ldr	r2, [r3, #4]
   81690:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   81692:	bf04      	itt	eq
   81694:	6882      	ldreq	r2, [r0, #8]
   81696:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   81698:	2200      	movs	r2, #0
   8169a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   8169c:	681a      	ldr	r2, [r3, #0]
   8169e:	3a01      	subs	r2, #1
   816a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   816a2:	6818      	ldr	r0, [r3, #0]
}
   816a4:	4770      	bx	lr
   816a6:	bf00      	nop

000816a8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   816a8:	4803      	ldr	r0, [pc, #12]	; (816b8 <prvPortStartFirstTask+0x10>)
   816aa:	6800      	ldr	r0, [r0, #0]
   816ac:	6800      	ldr	r0, [r0, #0]
   816ae:	f380 8808 	msr	MSP, r0
   816b2:	b662      	cpsie	i
   816b4:	df00      	svc	0
   816b6:	bf00      	nop
   816b8:	e000ed08 	.word	0xe000ed08

000816bc <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   816bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   816c0:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   816c4:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   816c8:	2300      	movs	r3, #0
   816ca:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   816ce:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   816d2:	3840      	subs	r0, #64	; 0x40
   816d4:	4770      	bx	lr
   816d6:	bf00      	nop

000816d8 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   816d8:	4b06      	ldr	r3, [pc, #24]	; (816f4 <pxCurrentTCBConst2>)
   816da:	6819      	ldr	r1, [r3, #0]
   816dc:	6808      	ldr	r0, [r1, #0]
   816de:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   816e2:	f380 8809 	msr	PSP, r0
   816e6:	f04f 0000 	mov.w	r0, #0
   816ea:	f380 8811 	msr	BASEPRI, r0
   816ee:	f04e 0e0d 	orr.w	lr, lr, #13
   816f2:	4770      	bx	lr

000816f4 <pxCurrentTCBConst2>:
   816f4:	20078c90 	.word	0x20078c90

000816f8 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   816f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   816fc:	4b01      	ldr	r3, [pc, #4]	; (81704 <vPortYieldFromISR+0xc>)
   816fe:	601a      	str	r2, [r3, #0]
   81700:	4770      	bx	lr
   81702:	bf00      	nop
   81704:	e000ed04 	.word	0xe000ed04

00081708 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   81708:	f3ef 8011 	mrs	r0, BASEPRI
   8170c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   81710:	f381 8811 	msr	BASEPRI, r1
   81714:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   81716:	2000      	movs	r0, #0

00081718 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   81718:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   8171a:	4b03      	ldr	r3, [pc, #12]	; (81728 <vPortEnterCritical+0x10>)
   8171c:	4798      	blx	r3
	uxCriticalNesting++;
   8171e:	4b03      	ldr	r3, [pc, #12]	; (8172c <vPortEnterCritical+0x14>)
   81720:	681a      	ldr	r2, [r3, #0]
   81722:	3201      	adds	r2, #1
   81724:	601a      	str	r2, [r3, #0]
   81726:	bd08      	pop	{r3, pc}
   81728:	00081709 	.word	0x00081709
   8172c:	2007019c 	.word	0x2007019c

00081730 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   81730:	f380 8811 	msr	BASEPRI, r0
   81734:	4770      	bx	lr
   81736:	bf00      	nop

00081738 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   81738:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   8173a:	4a04      	ldr	r2, [pc, #16]	; (8174c <vPortExitCritical+0x14>)
   8173c:	6813      	ldr	r3, [r2, #0]
   8173e:	3b01      	subs	r3, #1
   81740:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   81742:	b913      	cbnz	r3, 8174a <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   81744:	2000      	movs	r0, #0
   81746:	4b02      	ldr	r3, [pc, #8]	; (81750 <vPortExitCritical+0x18>)
   81748:	4798      	blx	r3
   8174a:	bd08      	pop	{r3, pc}
   8174c:	2007019c 	.word	0x2007019c
   81750:	00081731 	.word	0x00081731

00081754 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   81754:	f3ef 8009 	mrs	r0, PSP
   81758:	4b0c      	ldr	r3, [pc, #48]	; (8178c <pxCurrentTCBConst>)
   8175a:	681a      	ldr	r2, [r3, #0]
   8175c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81760:	6010      	str	r0, [r2, #0]
   81762:	e92d 4008 	stmdb	sp!, {r3, lr}
   81766:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8176a:	f380 8811 	msr	BASEPRI, r0
   8176e:	f000 feeb 	bl	82548 <vTaskSwitchContext>
   81772:	f04f 0000 	mov.w	r0, #0
   81776:	f380 8811 	msr	BASEPRI, r0
   8177a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8177e:	6819      	ldr	r1, [r3, #0]
   81780:	6808      	ldr	r0, [r1, #0]
   81782:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81786:	f380 8809 	msr	PSP, r0
   8178a:	4770      	bx	lr

0008178c <pxCurrentTCBConst>:
   8178c:	20078c90 	.word	0x20078c90

00081790 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   81790:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81796:	4b05      	ldr	r3, [pc, #20]	; (817ac <SysTick_Handler+0x1c>)
   81798:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   8179a:	4b05      	ldr	r3, [pc, #20]	; (817b0 <SysTick_Handler+0x20>)
   8179c:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8179e:	4b05      	ldr	r3, [pc, #20]	; (817b4 <SysTick_Handler+0x24>)
   817a0:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   817a2:	2000      	movs	r0, #0
   817a4:	4b04      	ldr	r3, [pc, #16]	; (817b8 <SysTick_Handler+0x28>)
   817a6:	4798      	blx	r3
   817a8:	bd08      	pop	{r3, pc}
   817aa:	bf00      	nop
   817ac:	e000ed04 	.word	0xe000ed04
   817b0:	00081709 	.word	0x00081709
   817b4:	000821ad 	.word	0x000821ad
   817b8:	00081731 	.word	0x00081731

000817bc <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   817bc:	4a03      	ldr	r2, [pc, #12]	; (817cc <vPortSetupTimerInterrupt+0x10>)
   817be:	4b04      	ldr	r3, [pc, #16]	; (817d0 <vPortSetupTimerInterrupt+0x14>)
   817c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   817c2:	2207      	movs	r2, #7
   817c4:	3b04      	subs	r3, #4
   817c6:	601a      	str	r2, [r3, #0]
   817c8:	4770      	bx	lr
   817ca:	bf00      	nop
   817cc:	0001481f 	.word	0x0001481f
   817d0:	e000e014 	.word	0xe000e014

000817d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   817d4:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   817d6:	4b09      	ldr	r3, [pc, #36]	; (817fc <xPortStartScheduler+0x28>)
   817d8:	681a      	ldr	r2, [r3, #0]
   817da:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   817de:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   817e0:	681a      	ldr	r2, [r3, #0]
   817e2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   817e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   817e8:	4b05      	ldr	r3, [pc, #20]	; (81800 <xPortStartScheduler+0x2c>)
   817ea:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   817ec:	2400      	movs	r4, #0
   817ee:	4b05      	ldr	r3, [pc, #20]	; (81804 <xPortStartScheduler+0x30>)
   817f0:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   817f2:	4b05      	ldr	r3, [pc, #20]	; (81808 <xPortStartScheduler+0x34>)
   817f4:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   817f6:	4620      	mov	r0, r4
   817f8:	bd10      	pop	{r4, pc}
   817fa:	bf00      	nop
   817fc:	e000ed20 	.word	0xe000ed20
   81800:	000817bd 	.word	0x000817bd
   81804:	2007019c 	.word	0x2007019c
   81808:	000816a9 	.word	0x000816a9

0008180c <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   8180c:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   8180e:	4a13      	ldr	r2, [pc, #76]	; (8185c <prvInsertBlockIntoFreeList+0x50>)
   81810:	6813      	ldr	r3, [r2, #0]
   81812:	4283      	cmp	r3, r0
   81814:	d201      	bcs.n	8181a <prvInsertBlockIntoFreeList+0xe>
   81816:	461a      	mov	r2, r3
   81818:	e7fa      	b.n	81810 <prvInsertBlockIntoFreeList+0x4>
   8181a:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   8181c:	6854      	ldr	r4, [r2, #4]
   8181e:	1915      	adds	r5, r2, r4
   81820:	4285      	cmp	r5, r0
   81822:	d103      	bne.n	8182c <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   81824:	6868      	ldr	r0, [r5, #4]
   81826:	4404      	add	r4, r0
   81828:	6054      	str	r4, [r2, #4]
   8182a:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   8182c:	6842      	ldr	r2, [r0, #4]
   8182e:	1884      	adds	r4, r0, r2
   81830:	42a3      	cmp	r3, r4
   81832:	d10c      	bne.n	8184e <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   81834:	4c0a      	ldr	r4, [pc, #40]	; (81860 <prvInsertBlockIntoFreeList+0x54>)
   81836:	6824      	ldr	r4, [r4, #0]
   81838:	429c      	cmp	r4, r3
   8183a:	d006      	beq.n	8184a <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   8183c:	685b      	ldr	r3, [r3, #4]
   8183e:	441a      	add	r2, r3
   81840:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   81842:	680b      	ldr	r3, [r1, #0]
   81844:	681b      	ldr	r3, [r3, #0]
   81846:	6003      	str	r3, [r0, #0]
   81848:	e002      	b.n	81850 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   8184a:	6003      	str	r3, [r0, #0]
   8184c:	e000      	b.n	81850 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   8184e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   81850:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   81852:	bf18      	it	ne
   81854:	6008      	strne	r0, [r1, #0]
	}
}
   81856:	bc30      	pop	{r4, r5}
   81858:	4770      	bx	lr
   8185a:	bf00      	nop
   8185c:	20078b6c 	.word	0x20078b6c
   81860:	20078b68 	.word	0x20078b68

00081864 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   81864:	b538      	push	{r3, r4, r5, lr}
   81866:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   81868:	4b28      	ldr	r3, [pc, #160]	; (8190c <pvPortMalloc+0xa8>)
   8186a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   8186c:	4b28      	ldr	r3, [pc, #160]	; (81910 <pvPortMalloc+0xac>)
   8186e:	681b      	ldr	r3, [r3, #0]
   81870:	b99b      	cbnz	r3, 8189a <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   81872:	4a28      	ldr	r2, [pc, #160]	; (81914 <pvPortMalloc+0xb0>)
   81874:	4b28      	ldr	r3, [pc, #160]	; (81918 <pvPortMalloc+0xb4>)
   81876:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   81878:	2100      	movs	r1, #0
   8187a:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   8187c:	f647 72f0 	movw	r2, #32752	; 0x7ff0
   81880:	1898      	adds	r0, r3, r2
   81882:	4d23      	ldr	r5, [pc, #140]	; (81910 <pvPortMalloc+0xac>)
   81884:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   81886:	f647 75f4 	movw	r5, #32756	; 0x7ff4
   8188a:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   8188c:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   8188e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   81890:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   81892:	4b22      	ldr	r3, [pc, #136]	; (8191c <pvPortMalloc+0xb8>)
   81894:	681a      	ldr	r2, [r3, #0]
   81896:	3a10      	subs	r2, #16
   81898:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   8189a:	2c00      	cmp	r4, #0
   8189c:	d02d      	beq.n	818fa <pvPortMalloc+0x96>
		{
			xWantedSize += heapSTRUCT_SIZE;
   8189e:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   818a2:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   818a6:	bf1c      	itt	ne
   818a8:	f022 0207 	bicne.w	r2, r2, #7
   818ac:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   818ae:	1e51      	subs	r1, r2, #1
   818b0:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   818b4:	4299      	cmp	r1, r3
   818b6:	d822      	bhi.n	818fe <pvPortMalloc+0x9a>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   818b8:	4916      	ldr	r1, [pc, #88]	; (81914 <pvPortMalloc+0xb0>)
   818ba:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   818bc:	6863      	ldr	r3, [r4, #4]
   818be:	429a      	cmp	r2, r3
   818c0:	d904      	bls.n	818cc <pvPortMalloc+0x68>
   818c2:	6823      	ldr	r3, [r4, #0]
   818c4:	b113      	cbz	r3, 818cc <pvPortMalloc+0x68>
   818c6:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   818c8:	461c      	mov	r4, r3
   818ca:	e7f7      	b.n	818bc <pvPortMalloc+0x58>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   818cc:	4b10      	ldr	r3, [pc, #64]	; (81910 <pvPortMalloc+0xac>)
   818ce:	681b      	ldr	r3, [r3, #0]
   818d0:	429c      	cmp	r4, r3
   818d2:	d016      	beq.n	81902 <pvPortMalloc+0x9e>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   818d4:	680d      	ldr	r5, [r1, #0]
   818d6:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   818d8:	6823      	ldr	r3, [r4, #0]
   818da:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   818dc:	6863      	ldr	r3, [r4, #4]
   818de:	1a9b      	subs	r3, r3, r2
   818e0:	2b20      	cmp	r3, #32
   818e2:	d904      	bls.n	818ee <pvPortMalloc+0x8a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   818e4:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   818e6:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   818e8:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   818ea:	4b0d      	ldr	r3, [pc, #52]	; (81920 <pvPortMalloc+0xbc>)
   818ec:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   818ee:	4b0b      	ldr	r3, [pc, #44]	; (8191c <pvPortMalloc+0xb8>)
   818f0:	681a      	ldr	r2, [r3, #0]
   818f2:	6861      	ldr	r1, [r4, #4]
   818f4:	1a52      	subs	r2, r2, r1
   818f6:	601a      	str	r2, [r3, #0]
   818f8:	e004      	b.n	81904 <pvPortMalloc+0xa0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   818fa:	2500      	movs	r5, #0
   818fc:	e002      	b.n	81904 <pvPortMalloc+0xa0>
   818fe:	2500      	movs	r5, #0
   81900:	e000      	b.n	81904 <pvPortMalloc+0xa0>
   81902:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   81904:	4b07      	ldr	r3, [pc, #28]	; (81924 <pvPortMalloc+0xc0>)
   81906:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   81908:	4628      	mov	r0, r5
   8190a:	bd38      	pop	{r3, r4, r5, pc}
   8190c:	0008217d 	.word	0x0008217d
   81910:	20078b68 	.word	0x20078b68
   81914:	20078b6c 	.word	0x20078b6c
   81918:	20070b68 	.word	0x20070b68
   8191c:	200701a0 	.word	0x200701a0
   81920:	0008180d 	.word	0x0008180d
   81924:	000822d9 	.word	0x000822d9

00081928 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   81928:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   8192a:	4604      	mov	r4, r0
   8192c:	b168      	cbz	r0, 8194a <vPortFree+0x22>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   8192e:	4b07      	ldr	r3, [pc, #28]	; (8194c <vPortFree+0x24>)
   81930:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   81932:	4b07      	ldr	r3, [pc, #28]	; (81950 <vPortFree+0x28>)
   81934:	6819      	ldr	r1, [r3, #0]
   81936:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   8193a:	440a      	add	r2, r1
   8193c:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   8193e:	f1a4 0010 	sub.w	r0, r4, #16
   81942:	4b04      	ldr	r3, [pc, #16]	; (81954 <vPortFree+0x2c>)
   81944:	4798      	blx	r3
		}
		xTaskResumeAll();
   81946:	4b04      	ldr	r3, [pc, #16]	; (81958 <vPortFree+0x30>)
   81948:	4798      	blx	r3
   8194a:	bd10      	pop	{r4, pc}
   8194c:	0008217d 	.word	0x0008217d
   81950:	200701a0 	.word	0x200701a0
   81954:	0008180d 	.word	0x0008180d
   81958:	000822d9 	.word	0x000822d9

0008195c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   8195c:	b510      	push	{r4, lr}
   8195e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   81960:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81962:	b93b      	cbnz	r3, 81974 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81964:	6803      	ldr	r3, [r0, #0]
   81966:	bb1b      	cbnz	r3, 819b0 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   81968:	6840      	ldr	r0, [r0, #4]
   8196a:	4b13      	ldr	r3, [pc, #76]	; (819b8 <prvCopyDataToQueue+0x5c>)
   8196c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   8196e:	2300      	movs	r3, #0
   81970:	6063      	str	r3, [r4, #4]
   81972:	e01d      	b.n	819b0 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   81974:	b96a      	cbnz	r2, 81992 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81976:	6880      	ldr	r0, [r0, #8]
   81978:	461a      	mov	r2, r3
   8197a:	4b10      	ldr	r3, [pc, #64]	; (819bc <prvCopyDataToQueue+0x60>)
   8197c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   8197e:	68a2      	ldr	r2, [r4, #8]
   81980:	6c23      	ldr	r3, [r4, #64]	; 0x40
   81982:	4413      	add	r3, r2
   81984:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   81986:	6862      	ldr	r2, [r4, #4]
   81988:	4293      	cmp	r3, r2
   8198a:	d311      	bcc.n	819b0 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   8198c:	6823      	ldr	r3, [r4, #0]
   8198e:	60a3      	str	r3, [r4, #8]
   81990:	e00e      	b.n	819b0 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81992:	68c0      	ldr	r0, [r0, #12]
   81994:	461a      	mov	r2, r3
   81996:	4b09      	ldr	r3, [pc, #36]	; (819bc <prvCopyDataToQueue+0x60>)
   81998:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   8199a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   8199c:	4252      	negs	r2, r2
   8199e:	68e3      	ldr	r3, [r4, #12]
   819a0:	4413      	add	r3, r2
   819a2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   819a4:	6821      	ldr	r1, [r4, #0]
   819a6:	428b      	cmp	r3, r1
   819a8:	d202      	bcs.n	819b0 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   819aa:	6863      	ldr	r3, [r4, #4]
   819ac:	441a      	add	r2, r3
   819ae:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   819b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   819b2:	3301      	adds	r3, #1
   819b4:	63a3      	str	r3, [r4, #56]	; 0x38
   819b6:	bd10      	pop	{r4, pc}
   819b8:	00082871 	.word	0x00082871
   819bc:	000845b9 	.word	0x000845b9

000819c0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   819c0:	b538      	push	{r3, r4, r5, lr}
   819c2:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   819c4:	6805      	ldr	r5, [r0, #0]
   819c6:	b15d      	cbz	r5, 819e0 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   819c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
   819ca:	68c4      	ldr	r4, [r0, #12]
   819cc:	4414      	add	r4, r2
   819ce:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   819d0:	6840      	ldr	r0, [r0, #4]
   819d2:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   819d4:	bf28      	it	cs
   819d6:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   819d8:	4608      	mov	r0, r1
   819da:	68d9      	ldr	r1, [r3, #12]
   819dc:	4b01      	ldr	r3, [pc, #4]	; (819e4 <prvCopyDataFromQueue+0x24>)
   819de:	4798      	blx	r3
   819e0:	bd38      	pop	{r3, r4, r5, pc}
   819e2:	bf00      	nop
   819e4:	000845b9 	.word	0x000845b9

000819e8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   819e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   819ea:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   819ec:	4b1d      	ldr	r3, [pc, #116]	; (81a64 <prvUnlockQueue+0x7c>)
   819ee:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   819f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   819f2:	2b00      	cmp	r3, #0
   819f4:	dd12      	ble.n	81a1c <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   819f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   819f8:	b183      	cbz	r3, 81a1c <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   819fa:	f104 0624 	add.w	r6, r4, #36	; 0x24
   819fe:	4d1a      	ldr	r5, [pc, #104]	; (81a68 <prvUnlockQueue+0x80>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81a00:	4f1a      	ldr	r7, [pc, #104]	; (81a6c <prvUnlockQueue+0x84>)
   81a02:	e001      	b.n	81a08 <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81a04:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81a06:	b14b      	cbz	r3, 81a1c <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81a08:	4630      	mov	r0, r6
   81a0a:	47a8      	blx	r5
   81a0c:	b100      	cbz	r0, 81a10 <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81a0e:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   81a10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81a12:	3b01      	subs	r3, #1
   81a14:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81a16:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81a18:	2b00      	cmp	r3, #0
   81a1a:	dcf3      	bgt.n	81a04 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   81a1c:	f04f 33ff 	mov.w	r3, #4294967295
   81a20:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   81a22:	4b13      	ldr	r3, [pc, #76]	; (81a70 <prvUnlockQueue+0x88>)
   81a24:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   81a26:	4b0f      	ldr	r3, [pc, #60]	; (81a64 <prvUnlockQueue+0x7c>)
   81a28:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81a2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81a2c:	2b00      	cmp	r3, #0
   81a2e:	dd12      	ble.n	81a56 <prvUnlockQueue+0x6e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81a30:	6923      	ldr	r3, [r4, #16]
   81a32:	b183      	cbz	r3, 81a56 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81a34:	f104 0610 	add.w	r6, r4, #16
   81a38:	4d0b      	ldr	r5, [pc, #44]	; (81a68 <prvUnlockQueue+0x80>)
				{
					vTaskMissedYield();
   81a3a:	4f0c      	ldr	r7, [pc, #48]	; (81a6c <prvUnlockQueue+0x84>)
   81a3c:	e001      	b.n	81a42 <prvUnlockQueue+0x5a>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81a3e:	6923      	ldr	r3, [r4, #16]
   81a40:	b14b      	cbz	r3, 81a56 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81a42:	4630      	mov	r0, r6
   81a44:	47a8      	blx	r5
   81a46:	b100      	cbz	r0, 81a4a <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
   81a48:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   81a4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81a4c:	3b01      	subs	r3, #1
   81a4e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81a50:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81a52:	2b00      	cmp	r3, #0
   81a54:	dcf3      	bgt.n	81a3e <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   81a56:	f04f 33ff 	mov.w	r3, #4294967295
   81a5a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   81a5c:	4b04      	ldr	r3, [pc, #16]	; (81a70 <prvUnlockQueue+0x88>)
   81a5e:	4798      	blx	r3
   81a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81a62:	bf00      	nop
   81a64:	00081719 	.word	0x00081719
   81a68:	00082685 	.word	0x00082685
   81a6c:	000827bd 	.word	0x000827bd
   81a70:	00081739 	.word	0x00081739

00081a74 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   81a74:	b538      	push	{r3, r4, r5, lr}
   81a76:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   81a78:	4604      	mov	r4, r0
   81a7a:	b918      	cbnz	r0, 81a84 <xQueueGenericReset+0x10>
   81a7c:	4b16      	ldr	r3, [pc, #88]	; (81ad8 <xQueueGenericReset+0x64>)
   81a7e:	4798      	blx	r3
   81a80:	bf00      	nop
   81a82:	e7fd      	b.n	81a80 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
   81a84:	4b15      	ldr	r3, [pc, #84]	; (81adc <xQueueGenericReset+0x68>)
   81a86:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   81a88:	6823      	ldr	r3, [r4, #0]
   81a8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   81a8c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   81a8e:	fb00 f002 	mul.w	r0, r0, r2
   81a92:	1819      	adds	r1, r3, r0
   81a94:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   81a96:	2100      	movs	r1, #0
   81a98:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   81a9a:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   81a9c:	1a82      	subs	r2, r0, r2
   81a9e:	4413      	add	r3, r2
   81aa0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   81aa2:	f04f 33ff 	mov.w	r3, #4294967295
   81aa6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   81aa8:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   81aaa:	b955      	cbnz	r5, 81ac2 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81aac:	6923      	ldr	r3, [r4, #16]
   81aae:	b17b      	cbz	r3, 81ad0 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81ab0:	f104 0010 	add.w	r0, r4, #16
   81ab4:	4b0a      	ldr	r3, [pc, #40]	; (81ae0 <xQueueGenericReset+0x6c>)
   81ab6:	4798      	blx	r3
   81ab8:	2801      	cmp	r0, #1
   81aba:	d109      	bne.n	81ad0 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   81abc:	4b09      	ldr	r3, [pc, #36]	; (81ae4 <xQueueGenericReset+0x70>)
   81abe:	4798      	blx	r3
   81ac0:	e006      	b.n	81ad0 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   81ac2:	f104 0010 	add.w	r0, r4, #16
   81ac6:	4d08      	ldr	r5, [pc, #32]	; (81ae8 <xQueueGenericReset+0x74>)
   81ac8:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   81aca:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81ace:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   81ad0:	4b06      	ldr	r3, [pc, #24]	; (81aec <xQueueGenericReset+0x78>)
   81ad2:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   81ad4:	2001      	movs	r0, #1
   81ad6:	bd38      	pop	{r3, r4, r5, pc}
   81ad8:	00081709 	.word	0x00081709
   81adc:	00081719 	.word	0x00081719
   81ae0:	00082685 	.word	0x00082685
   81ae4:	000816f9 	.word	0x000816f9
   81ae8:	00081601 	.word	0x00081601
   81aec:	00081739 	.word	0x00081739

00081af0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   81af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81af2:	460d      	mov	r5, r1
   81af4:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   81af6:	4606      	mov	r6, r0
   81af8:	b188      	cbz	r0, 81b1e <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   81afa:	2050      	movs	r0, #80	; 0x50
   81afc:	4b0e      	ldr	r3, [pc, #56]	; (81b38 <xQueueGenericCreate+0x48>)
   81afe:	4798      	blx	r3
		if( pxNewQueue != NULL )
   81b00:	4604      	mov	r4, r0
   81b02:	b160      	cbz	r0, 81b1e <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   81b04:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   81b08:	3001      	adds	r0, #1
   81b0a:	4b0b      	ldr	r3, [pc, #44]	; (81b38 <xQueueGenericCreate+0x48>)
   81b0c:	4798      	blx	r3
   81b0e:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   81b10:	b940      	cbnz	r0, 81b24 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   81b12:	4620      	mov	r0, r4
   81b14:	4b09      	ldr	r3, [pc, #36]	; (81b3c <xQueueGenericCreate+0x4c>)
   81b16:	4798      	blx	r3
   81b18:	e001      	b.n	81b1e <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   81b1a:	bf00      	nop
   81b1c:	e7fd      	b.n	81b1a <xQueueGenericCreate+0x2a>
   81b1e:	4b08      	ldr	r3, [pc, #32]	; (81b40 <xQueueGenericCreate+0x50>)
   81b20:	4798      	blx	r3
   81b22:	e7fa      	b.n	81b1a <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   81b24:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   81b26:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   81b28:	4620      	mov	r0, r4
   81b2a:	2101      	movs	r1, #1
   81b2c:	4b05      	ldr	r3, [pc, #20]	; (81b44 <xQueueGenericCreate+0x54>)
   81b2e:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   81b30:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   81b34:	4620      	mov	r0, r4
   81b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81b38:	00081865 	.word	0x00081865
   81b3c:	00081929 	.word	0x00081929
   81b40:	00081709 	.word	0x00081709
   81b44:	00081a75 	.word	0x00081a75

00081b48 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81b4c:	b085      	sub	sp, #20
   81b4e:	468a      	mov	sl, r1
   81b50:	469b      	mov	fp, r3
   81b52:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   81b56:	4604      	mov	r4, r0
   81b58:	b918      	cbnz	r0, 81b62 <xQueueGenericSend+0x1a>
   81b5a:	4b38      	ldr	r3, [pc, #224]	; (81c3c <xQueueGenericSend+0xf4>)
   81b5c:	4798      	blx	r3
   81b5e:	bf00      	nop
   81b60:	e7fd      	b.n	81b5e <xQueueGenericSend+0x16>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81b62:	b909      	cbnz	r1, 81b68 <xQueueGenericSend+0x20>
   81b64:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81b66:	b91b      	cbnz	r3, 81b70 <xQueueGenericSend+0x28>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81b68:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81b6a:	4e35      	ldr	r6, [pc, #212]	; (81c40 <xQueueGenericSend+0xf8>)
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81b6c:	4d35      	ldr	r5, [pc, #212]	; (81c44 <xQueueGenericSend+0xfc>)
   81b6e:	e003      	b.n	81b78 <xQueueGenericSend+0x30>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81b70:	4b32      	ldr	r3, [pc, #200]	; (81c3c <xQueueGenericSend+0xf4>)
   81b72:	4798      	blx	r3
   81b74:	bf00      	nop
   81b76:	e7fd      	b.n	81b74 <xQueueGenericSend+0x2c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81b78:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81b7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81b7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81b7e:	429a      	cmp	r2, r3
   81b80:	d212      	bcs.n	81ba8 <xQueueGenericSend+0x60>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81b82:	4620      	mov	r0, r4
   81b84:	4651      	mov	r1, sl
   81b86:	465a      	mov	r2, fp
   81b88:	4b2f      	ldr	r3, [pc, #188]	; (81c48 <xQueueGenericSend+0x100>)
   81b8a:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81b8e:	b13b      	cbz	r3, 81ba0 <xQueueGenericSend+0x58>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   81b90:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81b94:	4b2d      	ldr	r3, [pc, #180]	; (81c4c <xQueueGenericSend+0x104>)
   81b96:	4798      	blx	r3
   81b98:	2801      	cmp	r0, #1
   81b9a:	d101      	bne.n	81ba0 <xQueueGenericSend+0x58>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   81b9c:	4b2c      	ldr	r3, [pc, #176]	; (81c50 <xQueueGenericSend+0x108>)
   81b9e:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   81ba0:	4b28      	ldr	r3, [pc, #160]	; (81c44 <xQueueGenericSend+0xfc>)
   81ba2:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   81ba4:	2001      	movs	r0, #1
   81ba6:	e046      	b.n	81c36 <xQueueGenericSend+0xee>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81ba8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   81bac:	b91b      	cbnz	r3, 81bb6 <xQueueGenericSend+0x6e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81bae:	4b25      	ldr	r3, [pc, #148]	; (81c44 <xQueueGenericSend+0xfc>)
   81bb0:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   81bb2:	2000      	movs	r0, #0
   81bb4:	e03f      	b.n	81c36 <xQueueGenericSend+0xee>
				}
				else if( xEntryTimeSet == pdFALSE )
   81bb6:	b91f      	cbnz	r7, 81bc0 <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81bb8:	a802      	add	r0, sp, #8
   81bba:	4b26      	ldr	r3, [pc, #152]	; (81c54 <xQueueGenericSend+0x10c>)
   81bbc:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   81bbe:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81bc0:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81bc2:	4b25      	ldr	r3, [pc, #148]	; (81c58 <xQueueGenericSend+0x110>)
   81bc4:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81bc6:	47b0      	blx	r6
   81bc8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81bca:	f1b3 3fff 	cmp.w	r3, #4294967295
   81bce:	bf04      	itt	eq
   81bd0:	2300      	moveq	r3, #0
   81bd2:	6463      	streq	r3, [r4, #68]	; 0x44
   81bd4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
   81bda:	bf04      	itt	eq
   81bdc:	2300      	moveq	r3, #0
   81bde:	64a3      	streq	r3, [r4, #72]	; 0x48
   81be0:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81be2:	a802      	add	r0, sp, #8
   81be4:	f10d 0106 	add.w	r1, sp, #6
   81be8:	4b1c      	ldr	r3, [pc, #112]	; (81c5c <xQueueGenericSend+0x114>)
   81bea:	4798      	blx	r3
   81bec:	b9e8      	cbnz	r0, 81c2a <xQueueGenericSend+0xe2>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81bee:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   81bf0:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   81bf4:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   81bf8:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   81bfa:	45c1      	cmp	r9, r8
   81bfc:	d10f      	bne.n	81c1e <xQueueGenericSend+0xd6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   81bfe:	f104 0010 	add.w	r0, r4, #16
   81c02:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   81c06:	4b16      	ldr	r3, [pc, #88]	; (81c60 <xQueueGenericSend+0x118>)
   81c08:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   81c0a:	4620      	mov	r0, r4
   81c0c:	4b15      	ldr	r3, [pc, #84]	; (81c64 <xQueueGenericSend+0x11c>)
   81c0e:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   81c10:	4b15      	ldr	r3, [pc, #84]	; (81c68 <xQueueGenericSend+0x120>)
   81c12:	4798      	blx	r3
   81c14:	2800      	cmp	r0, #0
   81c16:	d1af      	bne.n	81b78 <xQueueGenericSend+0x30>
				{
					portYIELD_WITHIN_API();
   81c18:	4b0d      	ldr	r3, [pc, #52]	; (81c50 <xQueueGenericSend+0x108>)
   81c1a:	4798      	blx	r3
   81c1c:	e7ac      	b.n	81b78 <xQueueGenericSend+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81c1e:	4620      	mov	r0, r4
   81c20:	4b10      	ldr	r3, [pc, #64]	; (81c64 <xQueueGenericSend+0x11c>)
   81c22:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81c24:	4b10      	ldr	r3, [pc, #64]	; (81c68 <xQueueGenericSend+0x120>)
   81c26:	4798      	blx	r3
   81c28:	e7a6      	b.n	81b78 <xQueueGenericSend+0x30>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   81c2a:	4620      	mov	r0, r4
   81c2c:	4b0d      	ldr	r3, [pc, #52]	; (81c64 <xQueueGenericSend+0x11c>)
   81c2e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81c30:	4b0d      	ldr	r3, [pc, #52]	; (81c68 <xQueueGenericSend+0x120>)
   81c32:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   81c34:	2000      	movs	r0, #0
		}
	}
}
   81c36:	b005      	add	sp, #20
   81c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c3c:	00081709 	.word	0x00081709
   81c40:	00081719 	.word	0x00081719
   81c44:	00081739 	.word	0x00081739
   81c48:	0008195d 	.word	0x0008195d
   81c4c:	00082685 	.word	0x00082685
   81c50:	000816f9 	.word	0x000816f9
   81c54:	00082709 	.word	0x00082709
   81c58:	0008217d 	.word	0x0008217d
   81c5c:	00082731 	.word	0x00082731
   81c60:	000825d9 	.word	0x000825d9
   81c64:	000819e9 	.word	0x000819e9
   81c68:	000822d9 	.word	0x000822d9

00081c6c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   81c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81c70:	460e      	mov	r6, r1
   81c72:	4615      	mov	r5, r2
   81c74:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   81c76:	4604      	mov	r4, r0
   81c78:	b918      	cbnz	r0, 81c82 <xQueueGenericSendFromISR+0x16>
   81c7a:	4b1c      	ldr	r3, [pc, #112]	; (81cec <xQueueGenericSendFromISR+0x80>)
   81c7c:	4798      	blx	r3
   81c7e:	bf00      	nop
   81c80:	e7fd      	b.n	81c7e <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81c82:	b929      	cbnz	r1, 81c90 <xQueueGenericSendFromISR+0x24>
   81c84:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81c86:	b11b      	cbz	r3, 81c90 <xQueueGenericSendFromISR+0x24>
   81c88:	4b18      	ldr	r3, [pc, #96]	; (81cec <xQueueGenericSendFromISR+0x80>)
   81c8a:	4798      	blx	r3
   81c8c:	bf00      	nop
   81c8e:	e7fd      	b.n	81c8c <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   81c90:	4b16      	ldr	r3, [pc, #88]	; (81cec <xQueueGenericSendFromISR+0x80>)
   81c92:	4798      	blx	r3
   81c94:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81c96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81c98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81c9a:	429a      	cmp	r2, r3
   81c9c:	d218      	bcs.n	81cd0 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81c9e:	4620      	mov	r0, r4
   81ca0:	4631      	mov	r1, r6
   81ca2:	4642      	mov	r2, r8
   81ca4:	4b12      	ldr	r3, [pc, #72]	; (81cf0 <xQueueGenericSendFromISR+0x84>)
   81ca6:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   81ca8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81caa:	f1b3 3fff 	cmp.w	r3, #4294967295
   81cae:	d10a      	bne.n	81cc6 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81cb2:	b17b      	cbz	r3, 81cd4 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81cb4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81cb8:	4b0e      	ldr	r3, [pc, #56]	; (81cf4 <xQueueGenericSendFromISR+0x88>)
   81cba:	4798      	blx	r3
   81cbc:	b160      	cbz	r0, 81cd8 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   81cbe:	b16d      	cbz	r5, 81cdc <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   81cc0:	2401      	movs	r4, #1
   81cc2:	602c      	str	r4, [r5, #0]
   81cc4:	e00b      	b.n	81cde <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   81cc6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81cc8:	3301      	adds	r3, #1
   81cca:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   81ccc:	2401      	movs	r4, #1
   81cce:	e006      	b.n	81cde <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81cd0:	2400      	movs	r4, #0
   81cd2:	e004      	b.n	81cde <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   81cd4:	2401      	movs	r4, #1
   81cd6:	e002      	b.n	81cde <xQueueGenericSendFromISR+0x72>
   81cd8:	2401      	movs	r4, #1
   81cda:	e000      	b.n	81cde <xQueueGenericSendFromISR+0x72>
   81cdc:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   81cde:	4638      	mov	r0, r7
   81ce0:	4b05      	ldr	r3, [pc, #20]	; (81cf8 <xQueueGenericSendFromISR+0x8c>)
   81ce2:	4798      	blx	r3

	return xReturn;
}
   81ce4:	4620      	mov	r0, r4
   81ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81cea:	bf00      	nop
   81cec:	00081709 	.word	0x00081709
   81cf0:	0008195d 	.word	0x0008195d
   81cf4:	00082685 	.word	0x00082685
   81cf8:	00081731 	.word	0x00081731

00081cfc <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   81cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81d00:	b085      	sub	sp, #20
   81d02:	4689      	mov	r9, r1
   81d04:	469a      	mov	sl, r3
   81d06:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   81d0a:	4604      	mov	r4, r0
   81d0c:	b918      	cbnz	r0, 81d16 <xQueueGenericReceive+0x1a>
   81d0e:	4b46      	ldr	r3, [pc, #280]	; (81e28 <xQueueGenericReceive+0x12c>)
   81d10:	4798      	blx	r3
   81d12:	bf00      	nop
   81d14:	e7fd      	b.n	81d12 <xQueueGenericReceive+0x16>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81d16:	b909      	cbnz	r1, 81d1c <xQueueGenericReceive+0x20>
   81d18:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81d1a:	b92b      	cbnz	r3, 81d28 <xQueueGenericReceive+0x2c>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   81d1c:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81d1e:	4e43      	ldr	r6, [pc, #268]	; (81e2c <xQueueGenericReceive+0x130>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81d20:	f8df b138 	ldr.w	fp, [pc, #312]	; 81e5c <xQueueGenericReceive+0x160>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81d24:	4d42      	ldr	r5, [pc, #264]	; (81e30 <xQueueGenericReceive+0x134>)
   81d26:	e003      	b.n	81d30 <xQueueGenericReceive+0x34>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81d28:	4b3f      	ldr	r3, [pc, #252]	; (81e28 <xQueueGenericReceive+0x12c>)
   81d2a:	4798      	blx	r3
   81d2c:	bf00      	nop
   81d2e:	e7fd      	b.n	81d2c <xQueueGenericReceive+0x30>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81d30:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   81d32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81d34:	2b00      	cmp	r3, #0
   81d36:	d028      	beq.n	81d8a <xQueueGenericReceive+0x8e>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   81d38:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   81d3a:	4620      	mov	r0, r4
   81d3c:	4649      	mov	r1, r9
   81d3e:	4b3d      	ldr	r3, [pc, #244]	; (81e34 <xQueueGenericReceive+0x138>)
   81d40:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   81d42:	f1ba 0f00 	cmp.w	sl, #0
   81d46:	d112      	bne.n	81d6e <xQueueGenericReceive+0x72>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   81d48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81d4a:	3b01      	subs	r3, #1
   81d4c:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81d4e:	6823      	ldr	r3, [r4, #0]
   81d50:	b913      	cbnz	r3, 81d58 <xQueueGenericReceive+0x5c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   81d52:	4b39      	ldr	r3, [pc, #228]	; (81e38 <xQueueGenericReceive+0x13c>)
   81d54:	4798      	blx	r3
   81d56:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81d58:	6923      	ldr	r3, [r4, #16]
   81d5a:	b193      	cbz	r3, 81d82 <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81d5c:	f104 0010 	add.w	r0, r4, #16
   81d60:	4b36      	ldr	r3, [pc, #216]	; (81e3c <xQueueGenericReceive+0x140>)
   81d62:	4798      	blx	r3
   81d64:	2801      	cmp	r0, #1
   81d66:	d10c      	bne.n	81d82 <xQueueGenericReceive+0x86>
						{
							portYIELD_WITHIN_API();
   81d68:	4b35      	ldr	r3, [pc, #212]	; (81e40 <xQueueGenericReceive+0x144>)
   81d6a:	4798      	blx	r3
   81d6c:	e009      	b.n	81d82 <xQueueGenericReceive+0x86>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   81d6e:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81d72:	b133      	cbz	r3, 81d82 <xQueueGenericReceive+0x86>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81d74:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81d78:	4b30      	ldr	r3, [pc, #192]	; (81e3c <xQueueGenericReceive+0x140>)
   81d7a:	4798      	blx	r3
   81d7c:	b108      	cbz	r0, 81d82 <xQueueGenericReceive+0x86>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   81d7e:	4b30      	ldr	r3, [pc, #192]	; (81e40 <xQueueGenericReceive+0x144>)
   81d80:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   81d82:	4b2b      	ldr	r3, [pc, #172]	; (81e30 <xQueueGenericReceive+0x134>)
   81d84:	4798      	blx	r3
				return pdPASS;
   81d86:	2001      	movs	r0, #1
   81d88:	e04b      	b.n	81e22 <xQueueGenericReceive+0x126>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81d8a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   81d8e:	b91b      	cbnz	r3, 81d98 <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81d90:	4b27      	ldr	r3, [pc, #156]	; (81e30 <xQueueGenericReceive+0x134>)
   81d92:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   81d94:	2000      	movs	r0, #0
   81d96:	e044      	b.n	81e22 <xQueueGenericReceive+0x126>
				}
				else if( xEntryTimeSet == pdFALSE )
   81d98:	b917      	cbnz	r7, 81da0 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81d9a:	a802      	add	r0, sp, #8
   81d9c:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81d9e:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81da0:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81da2:	4b28      	ldr	r3, [pc, #160]	; (81e44 <xQueueGenericReceive+0x148>)
   81da4:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81da6:	47b0      	blx	r6
   81da8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81daa:	f1b3 3fff 	cmp.w	r3, #4294967295
   81dae:	bf04      	itt	eq
   81db0:	2300      	moveq	r3, #0
   81db2:	6463      	streq	r3, [r4, #68]	; 0x44
   81db4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81db6:	f1b3 3fff 	cmp.w	r3, #4294967295
   81dba:	bf04      	itt	eq
   81dbc:	2300      	moveq	r3, #0
   81dbe:	64a3      	streq	r3, [r4, #72]	; 0x48
   81dc0:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81dc2:	a802      	add	r0, sp, #8
   81dc4:	f10d 0106 	add.w	r1, sp, #6
   81dc8:	4b1f      	ldr	r3, [pc, #124]	; (81e48 <xQueueGenericReceive+0x14c>)
   81dca:	4798      	blx	r3
   81dcc:	bb18      	cbnz	r0, 81e16 <xQueueGenericReceive+0x11a>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81dce:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   81dd0:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   81dd4:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81dd6:	f1b8 0f00 	cmp.w	r8, #0
   81dda:	d116      	bne.n	81e0a <xQueueGenericReceive+0x10e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81ddc:	6823      	ldr	r3, [r4, #0]
   81dde:	b923      	cbnz	r3, 81dea <xQueueGenericReceive+0xee>
					{
						portENTER_CRITICAL();
   81de0:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   81de2:	6860      	ldr	r0, [r4, #4]
   81de4:	4b19      	ldr	r3, [pc, #100]	; (81e4c <xQueueGenericReceive+0x150>)
   81de6:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   81de8:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81dea:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81dee:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   81df2:	4b17      	ldr	r3, [pc, #92]	; (81e50 <xQueueGenericReceive+0x154>)
   81df4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   81df6:	4620      	mov	r0, r4
   81df8:	4b16      	ldr	r3, [pc, #88]	; (81e54 <xQueueGenericReceive+0x158>)
   81dfa:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81dfc:	4b16      	ldr	r3, [pc, #88]	; (81e58 <xQueueGenericReceive+0x15c>)
   81dfe:	4798      	blx	r3
   81e00:	2800      	cmp	r0, #0
   81e02:	d195      	bne.n	81d30 <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
   81e04:	4b0e      	ldr	r3, [pc, #56]	; (81e40 <xQueueGenericReceive+0x144>)
   81e06:	4798      	blx	r3
   81e08:	e792      	b.n	81d30 <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81e0a:	4620      	mov	r0, r4
   81e0c:	4b11      	ldr	r3, [pc, #68]	; (81e54 <xQueueGenericReceive+0x158>)
   81e0e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81e10:	4b11      	ldr	r3, [pc, #68]	; (81e58 <xQueueGenericReceive+0x15c>)
   81e12:	4798      	blx	r3
   81e14:	e78c      	b.n	81d30 <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   81e16:	4620      	mov	r0, r4
   81e18:	4b0e      	ldr	r3, [pc, #56]	; (81e54 <xQueueGenericReceive+0x158>)
   81e1a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81e1c:	4b0e      	ldr	r3, [pc, #56]	; (81e58 <xQueueGenericReceive+0x15c>)
   81e1e:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   81e20:	2000      	movs	r0, #0
		}
	}
}
   81e22:	b005      	add	sp, #20
   81e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81e28:	00081709 	.word	0x00081709
   81e2c:	00081719 	.word	0x00081719
   81e30:	00081739 	.word	0x00081739
   81e34:	000819c1 	.word	0x000819c1
   81e38:	000827c9 	.word	0x000827c9
   81e3c:	00082685 	.word	0x00082685
   81e40:	000816f9 	.word	0x000816f9
   81e44:	0008217d 	.word	0x0008217d
   81e48:	00082731 	.word	0x00082731
   81e4c:	000827f5 	.word	0x000827f5
   81e50:	000825d9 	.word	0x000825d9
   81e54:	000819e9 	.word	0x000819e9
   81e58:	000822d9 	.word	0x000822d9
   81e5c:	00082709 	.word	0x00082709

00081e60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   81e60:	b538      	push	{r3, r4, r5, lr}
   81e62:	4604      	mov	r4, r0
   81e64:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   81e66:	4b0d      	ldr	r3, [pc, #52]	; (81e9c <vQueueWaitForMessageRestricted+0x3c>)
   81e68:	4798      	blx	r3
   81e6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
   81e70:	bf04      	itt	eq
   81e72:	2300      	moveq	r3, #0
   81e74:	6463      	streq	r3, [r4, #68]	; 0x44
   81e76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81e78:	f1b3 3fff 	cmp.w	r3, #4294967295
   81e7c:	bf04      	itt	eq
   81e7e:	2300      	moveq	r3, #0
   81e80:	64a3      	streq	r3, [r4, #72]	; 0x48
   81e82:	4b07      	ldr	r3, [pc, #28]	; (81ea0 <vQueueWaitForMessageRestricted+0x40>)
   81e84:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   81e86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81e88:	b923      	cbnz	r3, 81e94 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81e8a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81e8e:	4629      	mov	r1, r5
   81e90:	4b04      	ldr	r3, [pc, #16]	; (81ea4 <vQueueWaitForMessageRestricted+0x44>)
   81e92:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   81e94:	4620      	mov	r0, r4
   81e96:	4b04      	ldr	r3, [pc, #16]	; (81ea8 <vQueueWaitForMessageRestricted+0x48>)
   81e98:	4798      	blx	r3
   81e9a:	bd38      	pop	{r3, r4, r5, pc}
   81e9c:	00081719 	.word	0x00081719
   81ea0:	00081739 	.word	0x00081739
   81ea4:	0008263d 	.word	0x0008263d
   81ea8:	000819e9 	.word	0x000819e9

00081eac <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   81eac:	b510      	push	{r4, lr}
   81eae:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   81eb0:	4b0f      	ldr	r3, [pc, #60]	; (81ef0 <prvAddCurrentTaskToDelayedList+0x44>)
   81eb2:	681b      	ldr	r3, [r3, #0]
   81eb4:	8098      	strh	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   81eb6:	4b0f      	ldr	r3, [pc, #60]	; (81ef4 <prvAddCurrentTaskToDelayedList+0x48>)
   81eb8:	881b      	ldrh	r3, [r3, #0]
   81eba:	b29b      	uxth	r3, r3
   81ebc:	4298      	cmp	r0, r3
   81ebe:	d207      	bcs.n	81ed0 <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81ec0:	4b0d      	ldr	r3, [pc, #52]	; (81ef8 <prvAddCurrentTaskToDelayedList+0x4c>)
   81ec2:	6818      	ldr	r0, [r3, #0]
   81ec4:	4b0a      	ldr	r3, [pc, #40]	; (81ef0 <prvAddCurrentTaskToDelayedList+0x44>)
   81ec6:	6819      	ldr	r1, [r3, #0]
   81ec8:	3104      	adds	r1, #4
   81eca:	4b0c      	ldr	r3, [pc, #48]	; (81efc <prvAddCurrentTaskToDelayedList+0x50>)
   81ecc:	4798      	blx	r3
   81ece:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81ed0:	4b0b      	ldr	r3, [pc, #44]	; (81f00 <prvAddCurrentTaskToDelayedList+0x54>)
   81ed2:	6818      	ldr	r0, [r3, #0]
   81ed4:	4b06      	ldr	r3, [pc, #24]	; (81ef0 <prvAddCurrentTaskToDelayedList+0x44>)
   81ed6:	6819      	ldr	r1, [r3, #0]
   81ed8:	3104      	adds	r1, #4
   81eda:	4b08      	ldr	r3, [pc, #32]	; (81efc <prvAddCurrentTaskToDelayedList+0x50>)
   81edc:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   81ede:	4b09      	ldr	r3, [pc, #36]	; (81f04 <prvAddCurrentTaskToDelayedList+0x58>)
   81ee0:	881b      	ldrh	r3, [r3, #0]
   81ee2:	b29b      	uxth	r3, r3
   81ee4:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   81ee6:	bf3c      	itt	cc
   81ee8:	4b06      	ldrcc	r3, [pc, #24]	; (81f04 <prvAddCurrentTaskToDelayedList+0x58>)
   81eea:	801c      	strhcc	r4, [r3, #0]
   81eec:	bd10      	pop	{r4, pc}
   81eee:	bf00      	nop
   81ef0:	20078c90 	.word	0x20078c90
   81ef4:	20078cac 	.word	0x20078cac
   81ef8:	20078cb0 	.word	0x20078cb0
   81efc:	0008163d 	.word	0x0008163d
   81f00:	20078b8c 	.word	0x20078b8c
   81f04:	200701a4 	.word	0x200701a4

00081f08 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   81f08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81f0c:	460e      	mov	r6, r1
   81f0e:	4617      	mov	r7, r2
   81f10:	469a      	mov	sl, r3
   81f12:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   81f14:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   81f18:	4681      	mov	r9, r0
   81f1a:	b918      	cbnz	r0, 81f24 <xTaskGenericCreate+0x1c>
   81f1c:	4b62      	ldr	r3, [pc, #392]	; (820a8 <xTaskGenericCreate+0x1a0>)
   81f1e:	4798      	blx	r3
   81f20:	bf00      	nop
   81f22:	e7fd      	b.n	81f20 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   81f24:	2d09      	cmp	r5, #9
   81f26:	d903      	bls.n	81f30 <xTaskGenericCreate+0x28>
   81f28:	4b5f      	ldr	r3, [pc, #380]	; (820a8 <xTaskGenericCreate+0x1a0>)
   81f2a:	4798      	blx	r3
   81f2c:	bf00      	nop
   81f2e:	e7fd      	b.n	81f2c <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   81f30:	2050      	movs	r0, #80	; 0x50
   81f32:	4b5e      	ldr	r3, [pc, #376]	; (820ac <xTaskGenericCreate+0x1a4>)
   81f34:	4798      	blx	r3

	if( pxNewTCB != NULL )
   81f36:	4604      	mov	r4, r0
   81f38:	2800      	cmp	r0, #0
   81f3a:	f000 80b1 	beq.w	820a0 <xTaskGenericCreate+0x198>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81f3e:	f1b8 0f00 	cmp.w	r8, #0
   81f42:	f040 80a9 	bne.w	82098 <xTaskGenericCreate+0x190>
   81f46:	00b8      	lsls	r0, r7, #2
   81f48:	4b58      	ldr	r3, [pc, #352]	; (820ac <xTaskGenericCreate+0x1a4>)
   81f4a:	4798      	blx	r3
   81f4c:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   81f4e:	b918      	cbnz	r0, 81f58 <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   81f50:	4620      	mov	r0, r4
   81f52:	4b57      	ldr	r3, [pc, #348]	; (820b0 <xTaskGenericCreate+0x1a8>)
   81f54:	4798      	blx	r3
   81f56:	e0a3      	b.n	820a0 <xTaskGenericCreate+0x198>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   81f58:	21a5      	movs	r1, #165	; 0xa5
   81f5a:	00ba      	lsls	r2, r7, #2
   81f5c:	4b55      	ldr	r3, [pc, #340]	; (820b4 <xTaskGenericCreate+0x1ac>)
   81f5e:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   81f60:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   81f64:	3f01      	subs	r7, #1
   81f66:	6b23      	ldr	r3, [r4, #48]	; 0x30
   81f68:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   81f6c:	f023 0b07 	bic.w	fp, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   81f70:	f104 0034 	add.w	r0, r4, #52	; 0x34
   81f74:	4631      	mov	r1, r6
   81f76:	2210      	movs	r2, #16
   81f78:	4b4f      	ldr	r3, [pc, #316]	; (820b8 <xTaskGenericCreate+0x1b0>)
   81f7a:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   81f7c:	2300      	movs	r3, #0
   81f7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   81f82:	2d09      	cmp	r5, #9
   81f84:	bf34      	ite	cc
   81f86:	462e      	movcc	r6, r5
   81f88:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   81f8a:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   81f8c:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   81f8e:	1d27      	adds	r7, r4, #4
   81f90:	4638      	mov	r0, r7
   81f92:	f8df 8170 	ldr.w	r8, [pc, #368]	; 82104 <xTaskGenericCreate+0x1fc>
   81f96:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   81f98:	f104 0018 	add.w	r0, r4, #24
   81f9c:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   81f9e:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   81fa0:	f1c6 060a 	rsb	r6, r6, #10
   81fa4:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   81fa6:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   81fa8:	4658      	mov	r0, fp
   81faa:	4649      	mov	r1, r9
   81fac:	4652      	mov	r2, sl
   81fae:	4b43      	ldr	r3, [pc, #268]	; (820bc <xTaskGenericCreate+0x1b4>)
   81fb0:	4798      	blx	r3
   81fb2:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   81fb4:	f010 0f07 	tst.w	r0, #7
   81fb8:	d003      	beq.n	81fc2 <xTaskGenericCreate+0xba>
   81fba:	4b3b      	ldr	r3, [pc, #236]	; (820a8 <xTaskGenericCreate+0x1a0>)
   81fbc:	4798      	blx	r3
   81fbe:	bf00      	nop
   81fc0:	e7fd      	b.n	81fbe <xTaskGenericCreate+0xb6>

		if( ( void * ) pxCreatedTask != NULL )
   81fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   81fc4:	b103      	cbz	r3, 81fc8 <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   81fc6:	601c      	str	r4, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   81fc8:	4b3d      	ldr	r3, [pc, #244]	; (820c0 <xTaskGenericCreate+0x1b8>)
   81fca:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   81fcc:	4b3d      	ldr	r3, [pc, #244]	; (820c4 <xTaskGenericCreate+0x1bc>)
   81fce:	681a      	ldr	r2, [r3, #0]
   81fd0:	3201      	adds	r2, #1
   81fd2:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   81fd4:	4b3c      	ldr	r3, [pc, #240]	; (820c8 <xTaskGenericCreate+0x1c0>)
   81fd6:	681b      	ldr	r3, [r3, #0]
   81fd8:	bb2b      	cbnz	r3, 82026 <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   81fda:	4b3b      	ldr	r3, [pc, #236]	; (820c8 <xTaskGenericCreate+0x1c0>)
   81fdc:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   81fde:	4b39      	ldr	r3, [pc, #228]	; (820c4 <xTaskGenericCreate+0x1bc>)
   81fe0:	681b      	ldr	r3, [r3, #0]
   81fe2:	2b01      	cmp	r3, #1
   81fe4:	d129      	bne.n	8203a <xTaskGenericCreate+0x132>
   81fe6:	4e39      	ldr	r6, [pc, #228]	; (820cc <xTaskGenericCreate+0x1c4>)
   81fe8:	f106 09c8 	add.w	r9, r6, #200	; 0xc8
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   81fec:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 820d0 <xTaskGenericCreate+0x1c8>
   81ff0:	4630      	mov	r0, r6
   81ff2:	47c0      	blx	r8
   81ff4:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   81ff6:	454e      	cmp	r6, r9
   81ff8:	d1fa      	bne.n	81ff0 <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   81ffa:	f8df 910c 	ldr.w	r9, [pc, #268]	; 82108 <xTaskGenericCreate+0x200>
   81ffe:	4648      	mov	r0, r9
   82000:	4e33      	ldr	r6, [pc, #204]	; (820d0 <xTaskGenericCreate+0x1c8>)
   82002:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   82004:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8210c <xTaskGenericCreate+0x204>
   82008:	4640      	mov	r0, r8
   8200a:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   8200c:	4831      	ldr	r0, [pc, #196]	; (820d4 <xTaskGenericCreate+0x1cc>)
   8200e:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   82010:	4831      	ldr	r0, [pc, #196]	; (820d8 <xTaskGenericCreate+0x1d0>)
   82012:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   82014:	4831      	ldr	r0, [pc, #196]	; (820dc <xTaskGenericCreate+0x1d4>)
   82016:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   82018:	4b31      	ldr	r3, [pc, #196]	; (820e0 <xTaskGenericCreate+0x1d8>)
   8201a:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   8201e:	4b31      	ldr	r3, [pc, #196]	; (820e4 <xTaskGenericCreate+0x1dc>)
   82020:	f8c3 8000 	str.w	r8, [r3]
   82024:	e009      	b.n	8203a <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   82026:	4b30      	ldr	r3, [pc, #192]	; (820e8 <xTaskGenericCreate+0x1e0>)
   82028:	681b      	ldr	r3, [r3, #0]
   8202a:	b933      	cbnz	r3, 8203a <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   8202c:	4b26      	ldr	r3, [pc, #152]	; (820c8 <xTaskGenericCreate+0x1c0>)
   8202e:	681b      	ldr	r3, [r3, #0]
   82030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82032:	429d      	cmp	r5, r3
					{
						pxCurrentTCB = pxNewTCB;
   82034:	bf24      	itt	cs
   82036:	4b24      	ldrcs	r3, [pc, #144]	; (820c8 <xTaskGenericCreate+0x1c0>)
   82038:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   8203a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8203c:	4a2b      	ldr	r2, [pc, #172]	; (820ec <xTaskGenericCreate+0x1e4>)
   8203e:	6812      	ldr	r2, [r2, #0]
   82040:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   82042:	bf84      	itt	hi
   82044:	4a29      	ldrhi	r2, [pc, #164]	; (820ec <xTaskGenericCreate+0x1e4>)
   82046:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   82048:	4a29      	ldr	r2, [pc, #164]	; (820f0 <xTaskGenericCreate+0x1e8>)
   8204a:	6811      	ldr	r1, [r2, #0]
   8204c:	6461      	str	r1, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   8204e:	3101      	adds	r1, #1
   82050:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   82052:	4a28      	ldr	r2, [pc, #160]	; (820f4 <xTaskGenericCreate+0x1ec>)
   82054:	6812      	ldr	r2, [r2, #0]
   82056:	4293      	cmp	r3, r2
   82058:	bf84      	itt	hi
   8205a:	4a26      	ldrhi	r2, [pc, #152]	; (820f4 <xTaskGenericCreate+0x1ec>)
   8205c:	6013      	strhi	r3, [r2, #0]
   8205e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82062:	481a      	ldr	r0, [pc, #104]	; (820cc <xTaskGenericCreate+0x1c4>)
   82064:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   82068:	4639      	mov	r1, r7
   8206a:	4b23      	ldr	r3, [pc, #140]	; (820f8 <xTaskGenericCreate+0x1f0>)
   8206c:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   8206e:	4b23      	ldr	r3, [pc, #140]	; (820fc <xTaskGenericCreate+0x1f4>)
   82070:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   82072:	4b1d      	ldr	r3, [pc, #116]	; (820e8 <xTaskGenericCreate+0x1e0>)
   82074:	681b      	ldr	r3, [r3, #0]
   82076:	b14b      	cbz	r3, 8208c <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   82078:	4b13      	ldr	r3, [pc, #76]	; (820c8 <xTaskGenericCreate+0x1c0>)
   8207a:	681b      	ldr	r3, [r3, #0]
   8207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8207e:	429d      	cmp	r5, r3
   82080:	d907      	bls.n	82092 <xTaskGenericCreate+0x18a>
			{
				portYIELD_WITHIN_API();
   82082:	4b1f      	ldr	r3, [pc, #124]	; (82100 <xTaskGenericCreate+0x1f8>)
   82084:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   82086:	2001      	movs	r0, #1
   82088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8208c:	2001      	movs	r0, #1
   8208e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82092:	2001      	movs	r0, #1
   82094:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   82098:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
   8209c:	4640      	mov	r0, r8
   8209e:	e75b      	b.n	81f58 <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   820a0:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   820a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   820a8:	00081709 	.word	0x00081709
   820ac:	00081865 	.word	0x00081865
   820b0:	00081929 	.word	0x00081929
   820b4:	000846a5 	.word	0x000846a5
   820b8:	000848f5 	.word	0x000848f5
   820bc:	000816bd 	.word	0x000816bd
   820c0:	00081719 	.word	0x00081719
   820c4:	20078cd0 	.word	0x20078cd0
   820c8:	20078c90 	.word	0x20078c90
   820cc:	20078bc4 	.word	0x20078bc4
   820d0:	00081601 	.word	0x00081601
   820d4:	20078c94 	.word	0x20078c94
   820d8:	20078b98 	.word	0x20078b98
   820dc:	20078b78 	.word	0x20078b78
   820e0:	20078b8c 	.word	0x20078b8c
   820e4:	20078cb0 	.word	0x20078cb0
   820e8:	20078b90 	.word	0x20078b90
   820ec:	20078cd4 	.word	0x20078cd4
   820f0:	20078cb4 	.word	0x20078cb4
   820f4:	20078bc0 	.word	0x20078bc0
   820f8:	00081621 	.word	0x00081621
   820fc:	00081739 	.word	0x00081739
   82100:	000816f9 	.word	0x000816f9
   82104:	00081619 	.word	0x00081619
   82108:	20078cb8 	.word	0x20078cb8
   8210c:	20078bac 	.word	0x20078bac

00082110 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   82110:	b510      	push	{r4, lr}
   82112:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   82114:	2300      	movs	r3, #0
   82116:	9300      	str	r3, [sp, #0]
   82118:	9301      	str	r3, [sp, #4]
   8211a:	9302      	str	r3, [sp, #8]
   8211c:	9303      	str	r3, [sp, #12]
   8211e:	480f      	ldr	r0, [pc, #60]	; (8215c <vTaskStartScheduler+0x4c>)
   82120:	490f      	ldr	r1, [pc, #60]	; (82160 <vTaskStartScheduler+0x50>)
   82122:	f44f 7280 	mov.w	r2, #256	; 0x100
   82126:	4c0f      	ldr	r4, [pc, #60]	; (82164 <vTaskStartScheduler+0x54>)
   82128:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   8212a:	2801      	cmp	r0, #1
   8212c:	d10e      	bne.n	8214c <vTaskStartScheduler+0x3c>
		{
			xReturn = xTimerCreateTimerTask();
   8212e:	4b0e      	ldr	r3, [pc, #56]	; (82168 <vTaskStartScheduler+0x58>)
   82130:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   82132:	2801      	cmp	r0, #1
   82134:	d10a      	bne.n	8214c <vTaskStartScheduler+0x3c>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   82136:	4b0d      	ldr	r3, [pc, #52]	; (8216c <vTaskStartScheduler+0x5c>)
   82138:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   8213a:	2201      	movs	r2, #1
   8213c:	4b0c      	ldr	r3, [pc, #48]	; (82170 <vTaskStartScheduler+0x60>)
   8213e:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   82140:	2200      	movs	r2, #0
   82142:	4b0c      	ldr	r3, [pc, #48]	; (82174 <vTaskStartScheduler+0x64>)
   82144:	801a      	strh	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   82146:	4b0c      	ldr	r3, [pc, #48]	; (82178 <vTaskStartScheduler+0x68>)
   82148:	4798      	blx	r3
   8214a:	e004      	b.n	82156 <vTaskStartScheduler+0x46>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   8214c:	b918      	cbnz	r0, 82156 <vTaskStartScheduler+0x46>
   8214e:	4b07      	ldr	r3, [pc, #28]	; (8216c <vTaskStartScheduler+0x5c>)
   82150:	4798      	blx	r3
   82152:	bf00      	nop
   82154:	e7fd      	b.n	82152 <vTaskStartScheduler+0x42>
}
   82156:	b004      	add	sp, #16
   82158:	bd10      	pop	{r4, pc}
   8215a:	bf00      	nop
   8215c:	000824c5 	.word	0x000824c5
   82160:	0008a52c 	.word	0x0008a52c
   82164:	00081f09 	.word	0x00081f09
   82168:	0008296d 	.word	0x0008296d
   8216c:	00081709 	.word	0x00081709
   82170:	20078b90 	.word	0x20078b90
   82174:	20078cac 	.word	0x20078cac
   82178:	000817d5 	.word	0x000817d5

0008217c <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   8217c:	4b02      	ldr	r3, [pc, #8]	; (82188 <vTaskSuspendAll+0xc>)
   8217e:	681a      	ldr	r2, [r3, #0]
   82180:	3201      	adds	r2, #1
   82182:	601a      	str	r2, [r3, #0]
   82184:	4770      	bx	lr
   82186:	bf00      	nop
   82188:	20078c8c 	.word	0x20078c8c

0008218c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   8218c:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   8218e:	4b04      	ldr	r3, [pc, #16]	; (821a0 <xTaskGetTickCount+0x14>)
   82190:	4798      	blx	r3
	{
		xTicks = xTickCount;
   82192:	4b04      	ldr	r3, [pc, #16]	; (821a4 <xTaskGetTickCount+0x18>)
   82194:	881c      	ldrh	r4, [r3, #0]
   82196:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   82198:	4b03      	ldr	r3, [pc, #12]	; (821a8 <xTaskGetTickCount+0x1c>)
   8219a:	4798      	blx	r3

	return xTicks;
}
   8219c:	4620      	mov	r0, r4
   8219e:	bd10      	pop	{r4, pc}
   821a0:	00081719 	.word	0x00081719
   821a4:	20078cac 	.word	0x20078cac
   821a8:	00081739 	.word	0x00081739

000821ac <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   821ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   821b0:	4b3d      	ldr	r3, [pc, #244]	; (822a8 <vTaskIncrementTick+0xfc>)
   821b2:	681b      	ldr	r3, [r3, #0]
   821b4:	2b00      	cmp	r3, #0
   821b6:	d171      	bne.n	8229c <vTaskIncrementTick+0xf0>
	{
		++xTickCount;
   821b8:	4b3c      	ldr	r3, [pc, #240]	; (822ac <vTaskIncrementTick+0x100>)
   821ba:	881a      	ldrh	r2, [r3, #0]
   821bc:	3201      	adds	r2, #1
   821be:	b292      	uxth	r2, r2
   821c0:	801a      	strh	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   821c2:	881b      	ldrh	r3, [r3, #0]
   821c4:	b29b      	uxth	r3, r3
   821c6:	bb03      	cbnz	r3, 8220a <vTaskIncrementTick+0x5e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   821c8:	4b39      	ldr	r3, [pc, #228]	; (822b0 <vTaskIncrementTick+0x104>)
   821ca:	681b      	ldr	r3, [r3, #0]
   821cc:	681b      	ldr	r3, [r3, #0]
   821ce:	b11b      	cbz	r3, 821d8 <vTaskIncrementTick+0x2c>
   821d0:	4b38      	ldr	r3, [pc, #224]	; (822b4 <vTaskIncrementTick+0x108>)
   821d2:	4798      	blx	r3
   821d4:	bf00      	nop
   821d6:	e7fd      	b.n	821d4 <vTaskIncrementTick+0x28>

			pxTemp = pxDelayedTaskList;
   821d8:	4b35      	ldr	r3, [pc, #212]	; (822b0 <vTaskIncrementTick+0x104>)
   821da:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   821dc:	4a36      	ldr	r2, [pc, #216]	; (822b8 <vTaskIncrementTick+0x10c>)
   821de:	6810      	ldr	r0, [r2, #0]
   821e0:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   821e2:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   821e4:	4a35      	ldr	r2, [pc, #212]	; (822bc <vTaskIncrementTick+0x110>)
   821e6:	6811      	ldr	r1, [r2, #0]
   821e8:	3101      	adds	r1, #1
   821ea:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   821ec:	681b      	ldr	r3, [r3, #0]
   821ee:	681b      	ldr	r3, [r3, #0]
   821f0:	b923      	cbnz	r3, 821fc <vTaskIncrementTick+0x50>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   821f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   821f6:	4b32      	ldr	r3, [pc, #200]	; (822c0 <vTaskIncrementTick+0x114>)
   821f8:	801a      	strh	r2, [r3, #0]
   821fa:	e006      	b.n	8220a <vTaskIncrementTick+0x5e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   821fc:	4b2c      	ldr	r3, [pc, #176]	; (822b0 <vTaskIncrementTick+0x104>)
   821fe:	681b      	ldr	r3, [r3, #0]
   82200:	68db      	ldr	r3, [r3, #12]
   82202:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   82204:	889a      	ldrh	r2, [r3, #4]
   82206:	4b2e      	ldr	r3, [pc, #184]	; (822c0 <vTaskIncrementTick+0x114>)
   82208:	801a      	strh	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   8220a:	4b28      	ldr	r3, [pc, #160]	; (822ac <vTaskIncrementTick+0x100>)
   8220c:	881a      	ldrh	r2, [r3, #0]
   8220e:	b292      	uxth	r2, r2
   82210:	4b2b      	ldr	r3, [pc, #172]	; (822c0 <vTaskIncrementTick+0x114>)
   82212:	881b      	ldrh	r3, [r3, #0]
   82214:	b29b      	uxth	r3, r3
   82216:	429a      	cmp	r2, r3
   82218:	d344      	bcc.n	822a4 <vTaskIncrementTick+0xf8>
   8221a:	4b25      	ldr	r3, [pc, #148]	; (822b0 <vTaskIncrementTick+0x104>)
   8221c:	681b      	ldr	r3, [r3, #0]
   8221e:	681b      	ldr	r3, [r3, #0]
   82220:	b153      	cbz	r3, 82238 <vTaskIncrementTick+0x8c>
   82222:	4b23      	ldr	r3, [pc, #140]	; (822b0 <vTaskIncrementTick+0x104>)
   82224:	681b      	ldr	r3, [r3, #0]
   82226:	68db      	ldr	r3, [r3, #12]
   82228:	68dc      	ldr	r4, [r3, #12]
   8222a:	88a3      	ldrh	r3, [r4, #4]
   8222c:	4a1f      	ldr	r2, [pc, #124]	; (822ac <vTaskIncrementTick+0x100>)
   8222e:	8812      	ldrh	r2, [r2, #0]
   82230:	b292      	uxth	r2, r2
   82232:	4293      	cmp	r3, r2
   82234:	d914      	bls.n	82260 <vTaskIncrementTick+0xb4>
   82236:	e00f      	b.n	82258 <vTaskIncrementTick+0xac>
   82238:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8223c:	4b20      	ldr	r3, [pc, #128]	; (822c0 <vTaskIncrementTick+0x114>)
   8223e:	801a      	strh	r2, [r3, #0]
   82240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82244:	4b1a      	ldr	r3, [pc, #104]	; (822b0 <vTaskIncrementTick+0x104>)
   82246:	681b      	ldr	r3, [r3, #0]
   82248:	68db      	ldr	r3, [r3, #12]
   8224a:	68dc      	ldr	r4, [r3, #12]
   8224c:	88a3      	ldrh	r3, [r4, #4]
   8224e:	4a17      	ldr	r2, [pc, #92]	; (822ac <vTaskIncrementTick+0x100>)
   82250:	8812      	ldrh	r2, [r2, #0]
   82252:	b292      	uxth	r2, r2
   82254:	4293      	cmp	r3, r2
   82256:	d907      	bls.n	82268 <vTaskIncrementTick+0xbc>
   82258:	4a19      	ldr	r2, [pc, #100]	; (822c0 <vTaskIncrementTick+0x114>)
   8225a:	8013      	strh	r3, [r2, #0]
   8225c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82260:	4e18      	ldr	r6, [pc, #96]	; (822c4 <vTaskIncrementTick+0x118>)
   82262:	4f19      	ldr	r7, [pc, #100]	; (822c8 <vTaskIncrementTick+0x11c>)
   82264:	f8df 806c 	ldr.w	r8, [pc, #108]	; 822d4 <vTaskIncrementTick+0x128>
   82268:	1d25      	adds	r5, r4, #4
   8226a:	4628      	mov	r0, r5
   8226c:	47b0      	blx	r6
   8226e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82270:	b113      	cbz	r3, 82278 <vTaskIncrementTick+0xcc>
   82272:	f104 0018 	add.w	r0, r4, #24
   82276:	47b0      	blx	r6
   82278:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8227a:	683a      	ldr	r2, [r7, #0]
   8227c:	4293      	cmp	r3, r2
   8227e:	bf88      	it	hi
   82280:	603b      	strhi	r3, [r7, #0]
   82282:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   82286:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   8228a:	4629      	mov	r1, r5
   8228c:	4b0f      	ldr	r3, [pc, #60]	; (822cc <vTaskIncrementTick+0x120>)
   8228e:	4798      	blx	r3
   82290:	4b07      	ldr	r3, [pc, #28]	; (822b0 <vTaskIncrementTick+0x104>)
   82292:	681b      	ldr	r3, [r3, #0]
   82294:	681b      	ldr	r3, [r3, #0]
   82296:	2b00      	cmp	r3, #0
   82298:	d1d4      	bne.n	82244 <vTaskIncrementTick+0x98>
   8229a:	e7cd      	b.n	82238 <vTaskIncrementTick+0x8c>
	}
	else
	{
		++uxMissedTicks;
   8229c:	4b0c      	ldr	r3, [pc, #48]	; (822d0 <vTaskIncrementTick+0x124>)
   8229e:	681a      	ldr	r2, [r3, #0]
   822a0:	3201      	adds	r2, #1
   822a2:	601a      	str	r2, [r3, #0]
   822a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   822a8:	20078c8c 	.word	0x20078c8c
   822ac:	20078cac 	.word	0x20078cac
   822b0:	20078b8c 	.word	0x20078b8c
   822b4:	00081709 	.word	0x00081709
   822b8:	20078cb0 	.word	0x20078cb0
   822bc:	20078ca8 	.word	0x20078ca8
   822c0:	200701a4 	.word	0x200701a4
   822c4:	00081681 	.word	0x00081681
   822c8:	20078bc0 	.word	0x20078bc0
   822cc:	00081621 	.word	0x00081621
   822d0:	20078b74 	.word	0x20078b74
   822d4:	20078bc4 	.word	0x20078bc4

000822d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   822d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   822dc:	4b31      	ldr	r3, [pc, #196]	; (823a4 <xTaskResumeAll+0xcc>)
   822de:	681b      	ldr	r3, [r3, #0]
   822e0:	b91b      	cbnz	r3, 822ea <xTaskResumeAll+0x12>
   822e2:	4b31      	ldr	r3, [pc, #196]	; (823a8 <xTaskResumeAll+0xd0>)
   822e4:	4798      	blx	r3
   822e6:	bf00      	nop
   822e8:	e7fd      	b.n	822e6 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   822ea:	4b30      	ldr	r3, [pc, #192]	; (823ac <xTaskResumeAll+0xd4>)
   822ec:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   822ee:	4b2d      	ldr	r3, [pc, #180]	; (823a4 <xTaskResumeAll+0xcc>)
   822f0:	681a      	ldr	r2, [r3, #0]
   822f2:	3a01      	subs	r2, #1
   822f4:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   822f6:	681b      	ldr	r3, [r3, #0]
   822f8:	2b00      	cmp	r3, #0
   822fa:	d148      	bne.n	8238e <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   822fc:	4b2c      	ldr	r3, [pc, #176]	; (823b0 <xTaskResumeAll+0xd8>)
   822fe:	681b      	ldr	r3, [r3, #0]
   82300:	2b00      	cmp	r3, #0
   82302:	d046      	beq.n	82392 <xTaskResumeAll+0xba>
   82304:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   82306:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 823dc <xTaskResumeAll+0x104>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   8230a:	4f2a      	ldr	r7, [pc, #168]	; (823b4 <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   8230c:	4e2a      	ldr	r6, [pc, #168]	; (823b8 <xTaskResumeAll+0xe0>)
   8230e:	e01d      	b.n	8234c <xTaskResumeAll+0x74>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   82310:	f8d8 300c 	ldr.w	r3, [r8, #12]
   82314:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   82316:	f104 0018 	add.w	r0, r4, #24
   8231a:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8231c:	f104 0904 	add.w	r9, r4, #4
   82320:	4648      	mov	r0, r9
   82322:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   82324:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82326:	6832      	ldr	r2, [r6, #0]
   82328:	4293      	cmp	r3, r2
   8232a:	bf88      	it	hi
   8232c:	6033      	strhi	r3, [r6, #0]
   8232e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82332:	4822      	ldr	r0, [pc, #136]	; (823bc <xTaskResumeAll+0xe4>)
   82334:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   82338:	4649      	mov	r1, r9
   8233a:	4b21      	ldr	r3, [pc, #132]	; (823c0 <xTaskResumeAll+0xe8>)
   8233c:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8233e:	4b21      	ldr	r3, [pc, #132]	; (823c4 <xTaskResumeAll+0xec>)
   82340:	681b      	ldr	r3, [r3, #0]
   82342:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   82344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   82346:	429a      	cmp	r2, r3
   82348:	bf28      	it	cs
   8234a:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   8234c:	f8d8 3000 	ldr.w	r3, [r8]
   82350:	2b00      	cmp	r3, #0
   82352:	d1dd      	bne.n	82310 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82354:	4b1c      	ldr	r3, [pc, #112]	; (823c8 <xTaskResumeAll+0xf0>)
   82356:	681b      	ldr	r3, [r3, #0]
   82358:	b163      	cbz	r3, 82374 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8235a:	4b1b      	ldr	r3, [pc, #108]	; (823c8 <xTaskResumeAll+0xf0>)
   8235c:	681b      	ldr	r3, [r3, #0]
   8235e:	b17b      	cbz	r3, 82380 <xTaskResumeAll+0xa8>
					{
						vTaskIncrementTick();
   82360:	4d1a      	ldr	r5, [pc, #104]	; (823cc <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
   82362:	4c19      	ldr	r4, [pc, #100]	; (823c8 <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   82364:	47a8      	blx	r5
						--uxMissedTicks;
   82366:	6823      	ldr	r3, [r4, #0]
   82368:	3b01      	subs	r3, #1
   8236a:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8236c:	6823      	ldr	r3, [r4, #0]
   8236e:	2b00      	cmp	r3, #0
   82370:	d1f8      	bne.n	82364 <xTaskResumeAll+0x8c>
   82372:	e005      	b.n	82380 <xTaskResumeAll+0xa8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   82374:	2d01      	cmp	r5, #1
   82376:	d003      	beq.n	82380 <xTaskResumeAll+0xa8>
   82378:	4b15      	ldr	r3, [pc, #84]	; (823d0 <xTaskResumeAll+0xf8>)
   8237a:	681b      	ldr	r3, [r3, #0]
   8237c:	2b01      	cmp	r3, #1
   8237e:	d10a      	bne.n	82396 <xTaskResumeAll+0xbe>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   82380:	2200      	movs	r2, #0
   82382:	4b13      	ldr	r3, [pc, #76]	; (823d0 <xTaskResumeAll+0xf8>)
   82384:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   82386:	4b13      	ldr	r3, [pc, #76]	; (823d4 <xTaskResumeAll+0xfc>)
   82388:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   8238a:	2401      	movs	r4, #1
   8238c:	e004      	b.n	82398 <xTaskResumeAll+0xc0>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8238e:	2400      	movs	r4, #0
   82390:	e002      	b.n	82398 <xTaskResumeAll+0xc0>
   82392:	2400      	movs	r4, #0
   82394:	e000      	b.n	82398 <xTaskResumeAll+0xc0>
   82396:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   82398:	4b0f      	ldr	r3, [pc, #60]	; (823d8 <xTaskResumeAll+0x100>)
   8239a:	4798      	blx	r3

	return xAlreadyYielded;
}
   8239c:	4620      	mov	r0, r4
   8239e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   823a2:	bf00      	nop
   823a4:	20078c8c 	.word	0x20078c8c
   823a8:	00081709 	.word	0x00081709
   823ac:	00081719 	.word	0x00081719
   823b0:	20078cd0 	.word	0x20078cd0
   823b4:	00081681 	.word	0x00081681
   823b8:	20078bc0 	.word	0x20078bc0
   823bc:	20078bc4 	.word	0x20078bc4
   823c0:	00081621 	.word	0x00081621
   823c4:	20078c90 	.word	0x20078c90
   823c8:	20078b74 	.word	0x20078b74
   823cc:	000821ad 	.word	0x000821ad
   823d0:	20078ccc 	.word	0x20078ccc
   823d4:	000816f9 	.word	0x000816f9
   823d8:	00081739 	.word	0x00081739
   823dc:	20078c94 	.word	0x20078c94

000823e0 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   823e0:	b538      	push	{r3, r4, r5, lr}
   823e2:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   823e4:	4605      	mov	r5, r0
   823e6:	b918      	cbnz	r0, 823f0 <vTaskDelayUntil+0x10>
   823e8:	4b1b      	ldr	r3, [pc, #108]	; (82458 <vTaskDelayUntil+0x78>)
   823ea:	4798      	blx	r3
   823ec:	bf00      	nop
   823ee:	e7fd      	b.n	823ec <vTaskDelayUntil+0xc>
		configASSERT( ( xTimeIncrement > 0U ) );
   823f0:	b919      	cbnz	r1, 823fa <vTaskDelayUntil+0x1a>
   823f2:	4b19      	ldr	r3, [pc, #100]	; (82458 <vTaskDelayUntil+0x78>)
   823f4:	4798      	blx	r3
   823f6:	bf00      	nop
   823f8:	e7fd      	b.n	823f6 <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   823fa:	4b18      	ldr	r3, [pc, #96]	; (8245c <vTaskDelayUntil+0x7c>)
   823fc:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   823fe:	882b      	ldrh	r3, [r5, #0]
   82400:	441c      	add	r4, r3
   82402:	b2a4      	uxth	r4, r4

			if( xTickCount < *pxPreviousWakeTime )
   82404:	4a16      	ldr	r2, [pc, #88]	; (82460 <vTaskDelayUntil+0x80>)
   82406:	8812      	ldrh	r2, [r2, #0]
   82408:	b292      	uxth	r2, r2
   8240a:	4293      	cmp	r3, r2
   8240c:	d908      	bls.n	82420 <vTaskDelayUntil+0x40>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   8240e:	42a3      	cmp	r3, r4
   82410:	d91e      	bls.n	82450 <vTaskDelayUntil+0x70>
   82412:	4b13      	ldr	r3, [pc, #76]	; (82460 <vTaskDelayUntil+0x80>)
   82414:	881b      	ldrh	r3, [r3, #0]
   82416:	b29b      	uxth	r3, r3
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82418:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   8241a:	429c      	cmp	r4, r3
   8241c:	d910      	bls.n	82440 <vTaskDelayUntil+0x60>
   8241e:	e007      	b.n	82430 <vTaskDelayUntil+0x50>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   82420:	42a3      	cmp	r3, r4
   82422:	d813      	bhi.n	8244c <vTaskDelayUntil+0x6c>
   82424:	4b0e      	ldr	r3, [pc, #56]	; (82460 <vTaskDelayUntil+0x80>)
   82426:	881b      	ldrh	r3, [r3, #0]
   82428:	b29b      	uxth	r3, r3
   8242a:	429c      	cmp	r4, r3
   8242c:	d80e      	bhi.n	8244c <vTaskDelayUntil+0x6c>
   8242e:	e00f      	b.n	82450 <vTaskDelayUntil+0x70>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82430:	4b0c      	ldr	r3, [pc, #48]	; (82464 <vTaskDelayUntil+0x84>)
   82432:	6818      	ldr	r0, [r3, #0]
   82434:	3004      	adds	r0, #4
   82436:	4b0c      	ldr	r3, [pc, #48]	; (82468 <vTaskDelayUntil+0x88>)
   82438:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   8243a:	4620      	mov	r0, r4
   8243c:	4b0b      	ldr	r3, [pc, #44]	; (8246c <vTaskDelayUntil+0x8c>)
   8243e:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   82440:	4b0b      	ldr	r3, [pc, #44]	; (82470 <vTaskDelayUntil+0x90>)
   82442:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   82444:	b930      	cbnz	r0, 82454 <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
   82446:	4b0b      	ldr	r3, [pc, #44]	; (82474 <vTaskDelayUntil+0x94>)
   82448:	4798      	blx	r3
   8244a:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   8244c:	802c      	strh	r4, [r5, #0]
   8244e:	e7ef      	b.n	82430 <vTaskDelayUntil+0x50>
   82450:	802c      	strh	r4, [r5, #0]
   82452:	e7f5      	b.n	82440 <vTaskDelayUntil+0x60>
   82454:	bd38      	pop	{r3, r4, r5, pc}
   82456:	bf00      	nop
   82458:	00081709 	.word	0x00081709
   8245c:	0008217d 	.word	0x0008217d
   82460:	20078cac 	.word	0x20078cac
   82464:	20078c90 	.word	0x20078c90
   82468:	00081681 	.word	0x00081681
   8246c:	00081ead 	.word	0x00081ead
   82470:	000822d9 	.word	0x000822d9
   82474:	000816f9 	.word	0x000816f9

00082478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   82478:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   8247a:	4604      	mov	r4, r0
   8247c:	b180      	cbz	r0, 824a0 <vTaskDelay+0x28>
		{
			vTaskSuspendAll();
   8247e:	4b0a      	ldr	r3, [pc, #40]	; (824a8 <vTaskDelay+0x30>)
   82480:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   82482:	4b0a      	ldr	r3, [pc, #40]	; (824ac <vTaskDelay+0x34>)
   82484:	881b      	ldrh	r3, [r3, #0]
   82486:	441c      	add	r4, r3
   82488:	b2a4      	uxth	r4, r4

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   8248a:	4b09      	ldr	r3, [pc, #36]	; (824b0 <vTaskDelay+0x38>)
   8248c:	6818      	ldr	r0, [r3, #0]
   8248e:	3004      	adds	r0, #4
   82490:	4b08      	ldr	r3, [pc, #32]	; (824b4 <vTaskDelay+0x3c>)
   82492:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   82494:	4620      	mov	r0, r4
   82496:	4b08      	ldr	r3, [pc, #32]	; (824b8 <vTaskDelay+0x40>)
   82498:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   8249a:	4b08      	ldr	r3, [pc, #32]	; (824bc <vTaskDelay+0x44>)
   8249c:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   8249e:	b908      	cbnz	r0, 824a4 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
   824a0:	4b07      	ldr	r3, [pc, #28]	; (824c0 <vTaskDelay+0x48>)
   824a2:	4798      	blx	r3
   824a4:	bd10      	pop	{r4, pc}
   824a6:	bf00      	nop
   824a8:	0008217d 	.word	0x0008217d
   824ac:	20078cac 	.word	0x20078cac
   824b0:	20078c90 	.word	0x20078c90
   824b4:	00081681 	.word	0x00081681
   824b8:	00081ead 	.word	0x00081ead
   824bc:	000822d9 	.word	0x000822d9
   824c0:	000816f9 	.word	0x000816f9

000824c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   824c4:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   824c6:	4d15      	ldr	r5, [pc, #84]	; (8251c <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   824c8:	4e15      	ldr	r6, [pc, #84]	; (82520 <prvIdleTask+0x5c>)
			{
				taskYIELD();
   824ca:	f8df 8078 	ldr.w	r8, [pc, #120]	; 82544 <prvIdleTask+0x80>
   824ce:	e01c      	b.n	8250a <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   824d0:	4b14      	ldr	r3, [pc, #80]	; (82524 <prvIdleTask+0x60>)
   824d2:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   824d4:	4b14      	ldr	r3, [pc, #80]	; (82528 <prvIdleTask+0x64>)
   824d6:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
   824d8:	4b14      	ldr	r3, [pc, #80]	; (8252c <prvIdleTask+0x68>)
   824da:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   824dc:	b1ac      	cbz	r4, 8250a <prvIdleTask+0x46>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   824de:	4b14      	ldr	r3, [pc, #80]	; (82530 <prvIdleTask+0x6c>)
   824e0:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   824e2:	4b11      	ldr	r3, [pc, #68]	; (82528 <prvIdleTask+0x64>)
   824e4:	68db      	ldr	r3, [r3, #12]
   824e6:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   824e8:	1d20      	adds	r0, r4, #4
   824ea:	4b12      	ldr	r3, [pc, #72]	; (82534 <prvIdleTask+0x70>)
   824ec:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   824ee:	4b12      	ldr	r3, [pc, #72]	; (82538 <prvIdleTask+0x74>)
   824f0:	681a      	ldr	r2, [r3, #0]
   824f2:	3a01      	subs	r2, #1
   824f4:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   824f6:	682b      	ldr	r3, [r5, #0]
   824f8:	3b01      	subs	r3, #1
   824fa:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   824fc:	4b0f      	ldr	r3, [pc, #60]	; (8253c <prvIdleTask+0x78>)
   824fe:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   82500:	6b20      	ldr	r0, [r4, #48]	; 0x30
   82502:	4f0f      	ldr	r7, [pc, #60]	; (82540 <prvIdleTask+0x7c>)
   82504:	47b8      	blx	r7
		vPortFree( pxTCB );
   82506:	4620      	mov	r0, r4
   82508:	47b8      	blx	r7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8250a:	682b      	ldr	r3, [r5, #0]
   8250c:	2b00      	cmp	r3, #0
   8250e:	d1df      	bne.n	824d0 <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   82510:	6833      	ldr	r3, [r6, #0]
   82512:	2b01      	cmp	r3, #1
   82514:	d9f9      	bls.n	8250a <prvIdleTask+0x46>
			{
				taskYIELD();
   82516:	47c0      	blx	r8
   82518:	e7f7      	b.n	8250a <prvIdleTask+0x46>
   8251a:	bf00      	nop
   8251c:	20078b94 	.word	0x20078b94
   82520:	20078bc4 	.word	0x20078bc4
   82524:	0008217d 	.word	0x0008217d
   82528:	20078b98 	.word	0x20078b98
   8252c:	000822d9 	.word	0x000822d9
   82530:	00081719 	.word	0x00081719
   82534:	00081681 	.word	0x00081681
   82538:	20078cd0 	.word	0x20078cd0
   8253c:	00081739 	.word	0x00081739
   82540:	00081929 	.word	0x00081929
   82544:	000816f9 	.word	0x000816f9

00082548 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   82548:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   8254a:	4b1d      	ldr	r3, [pc, #116]	; (825c0 <vTaskSwitchContext+0x78>)
   8254c:	681b      	ldr	r3, [r3, #0]
   8254e:	b95b      	cbnz	r3, 82568 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   82550:	4b1c      	ldr	r3, [pc, #112]	; (825c4 <vTaskSwitchContext+0x7c>)
   82552:	681b      	ldr	r3, [r3, #0]
   82554:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82558:	009b      	lsls	r3, r3, #2
   8255a:	4a1b      	ldr	r2, [pc, #108]	; (825c8 <vTaskSwitchContext+0x80>)
   8255c:	58d3      	ldr	r3, [r2, r3]
   8255e:	b9cb      	cbnz	r3, 82594 <vTaskSwitchContext+0x4c>
   82560:	4b18      	ldr	r3, [pc, #96]	; (825c4 <vTaskSwitchContext+0x7c>)
   82562:	681b      	ldr	r3, [r3, #0]
   82564:	b953      	cbnz	r3, 8257c <vTaskSwitchContext+0x34>
   82566:	e005      	b.n	82574 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   82568:	2201      	movs	r2, #1
   8256a:	4b18      	ldr	r3, [pc, #96]	; (825cc <vTaskSwitchContext+0x84>)
   8256c:	601a      	str	r2, [r3, #0]
   8256e:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   82570:	681a      	ldr	r2, [r3, #0]
   82572:	b92a      	cbnz	r2, 82580 <vTaskSwitchContext+0x38>
   82574:	4b16      	ldr	r3, [pc, #88]	; (825d0 <vTaskSwitchContext+0x88>)
   82576:	4798      	blx	r3
   82578:	bf00      	nop
   8257a:	e7fd      	b.n	82578 <vTaskSwitchContext+0x30>
   8257c:	4b11      	ldr	r3, [pc, #68]	; (825c4 <vTaskSwitchContext+0x7c>)
   8257e:	4912      	ldr	r1, [pc, #72]	; (825c8 <vTaskSwitchContext+0x80>)
   82580:	681a      	ldr	r2, [r3, #0]
   82582:	3a01      	subs	r2, #1
   82584:	601a      	str	r2, [r3, #0]
   82586:	681a      	ldr	r2, [r3, #0]
   82588:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8258c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   82590:	2a00      	cmp	r2, #0
   82592:	d0ed      	beq.n	82570 <vTaskSwitchContext+0x28>
   82594:	4b0b      	ldr	r3, [pc, #44]	; (825c4 <vTaskSwitchContext+0x7c>)
   82596:	681b      	ldr	r3, [r3, #0]
   82598:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8259c:	4a0a      	ldr	r2, [pc, #40]	; (825c8 <vTaskSwitchContext+0x80>)
   8259e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   825a2:	685a      	ldr	r2, [r3, #4]
   825a4:	6852      	ldr	r2, [r2, #4]
   825a6:	605a      	str	r2, [r3, #4]
   825a8:	f103 0108 	add.w	r1, r3, #8
   825ac:	428a      	cmp	r2, r1
   825ae:	bf04      	itt	eq
   825b0:	6852      	ldreq	r2, [r2, #4]
   825b2:	605a      	streq	r2, [r3, #4]
   825b4:	685b      	ldr	r3, [r3, #4]
   825b6:	68da      	ldr	r2, [r3, #12]
   825b8:	4b06      	ldr	r3, [pc, #24]	; (825d4 <vTaskSwitchContext+0x8c>)
   825ba:	601a      	str	r2, [r3, #0]
   825bc:	bd08      	pop	{r3, pc}
   825be:	bf00      	nop
   825c0:	20078c8c 	.word	0x20078c8c
   825c4:	20078bc0 	.word	0x20078bc0
   825c8:	20078bc4 	.word	0x20078bc4
   825cc:	20078ccc 	.word	0x20078ccc
   825d0:	00081709 	.word	0x00081709
   825d4:	20078c90 	.word	0x20078c90

000825d8 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   825d8:	b538      	push	{r3, r4, r5, lr}
   825da:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   825dc:	b918      	cbnz	r0, 825e6 <vTaskPlaceOnEventList+0xe>
   825de:	4b0f      	ldr	r3, [pc, #60]	; (8261c <vTaskPlaceOnEventList+0x44>)
   825e0:	4798      	blx	r3
   825e2:	bf00      	nop
   825e4:	e7fd      	b.n	825e2 <vTaskPlaceOnEventList+0xa>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   825e6:	4d0e      	ldr	r5, [pc, #56]	; (82620 <vTaskPlaceOnEventList+0x48>)
   825e8:	6829      	ldr	r1, [r5, #0]
   825ea:	3118      	adds	r1, #24
   825ec:	4b0d      	ldr	r3, [pc, #52]	; (82624 <vTaskPlaceOnEventList+0x4c>)
   825ee:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   825f0:	6828      	ldr	r0, [r5, #0]
   825f2:	3004      	adds	r0, #4
   825f4:	4b0c      	ldr	r3, [pc, #48]	; (82628 <vTaskPlaceOnEventList+0x50>)
   825f6:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   825f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   825fc:	429c      	cmp	r4, r3
   825fe:	d105      	bne.n	8260c <vTaskPlaceOnEventList+0x34>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   82600:	6829      	ldr	r1, [r5, #0]
   82602:	480a      	ldr	r0, [pc, #40]	; (8262c <vTaskPlaceOnEventList+0x54>)
   82604:	3104      	adds	r1, #4
   82606:	4b0a      	ldr	r3, [pc, #40]	; (82630 <vTaskPlaceOnEventList+0x58>)
   82608:	4798      	blx	r3
   8260a:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   8260c:	4b09      	ldr	r3, [pc, #36]	; (82634 <vTaskPlaceOnEventList+0x5c>)
   8260e:	8818      	ldrh	r0, [r3, #0]
   82610:	4420      	add	r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   82612:	b280      	uxth	r0, r0
   82614:	4b08      	ldr	r3, [pc, #32]	; (82638 <vTaskPlaceOnEventList+0x60>)
   82616:	4798      	blx	r3
   82618:	bd38      	pop	{r3, r4, r5, pc}
   8261a:	bf00      	nop
   8261c:	00081709 	.word	0x00081709
   82620:	20078c90 	.word	0x20078c90
   82624:	0008163d 	.word	0x0008163d
   82628:	00081681 	.word	0x00081681
   8262c:	20078b78 	.word	0x20078b78
   82630:	00081621 	.word	0x00081621
   82634:	20078cac 	.word	0x20078cac
   82638:	00081ead 	.word	0x00081ead

0008263c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   8263c:	b538      	push	{r3, r4, r5, lr}
   8263e:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   82640:	b918      	cbnz	r0, 8264a <vTaskPlaceOnEventListRestricted+0xe>
   82642:	4b0a      	ldr	r3, [pc, #40]	; (8266c <vTaskPlaceOnEventListRestricted+0x30>)
   82644:	4798      	blx	r3
   82646:	bf00      	nop
   82648:	e7fd      	b.n	82646 <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8264a:	4c09      	ldr	r4, [pc, #36]	; (82670 <vTaskPlaceOnEventListRestricted+0x34>)
   8264c:	6821      	ldr	r1, [r4, #0]
   8264e:	3118      	adds	r1, #24
   82650:	4b08      	ldr	r3, [pc, #32]	; (82674 <vTaskPlaceOnEventListRestricted+0x38>)
   82652:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82654:	6820      	ldr	r0, [r4, #0]
   82656:	3004      	adds	r0, #4
   82658:	4b07      	ldr	r3, [pc, #28]	; (82678 <vTaskPlaceOnEventListRestricted+0x3c>)
   8265a:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   8265c:	4b07      	ldr	r3, [pc, #28]	; (8267c <vTaskPlaceOnEventListRestricted+0x40>)
   8265e:	8818      	ldrh	r0, [r3, #0]
   82660:	4428      	add	r0, r5
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   82662:	b280      	uxth	r0, r0
   82664:	4b06      	ldr	r3, [pc, #24]	; (82680 <vTaskPlaceOnEventListRestricted+0x44>)
   82666:	4798      	blx	r3
   82668:	bd38      	pop	{r3, r4, r5, pc}
   8266a:	bf00      	nop
   8266c:	00081709 	.word	0x00081709
   82670:	20078c90 	.word	0x20078c90
   82674:	00081621 	.word	0x00081621
   82678:	00081681 	.word	0x00081681
   8267c:	20078cac 	.word	0x20078cac
   82680:	00081ead 	.word	0x00081ead

00082684 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   82684:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   82686:	68c3      	ldr	r3, [r0, #12]
   82688:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8268a:	b91c      	cbnz	r4, 82694 <xTaskRemoveFromEventList+0x10>
   8268c:	4b16      	ldr	r3, [pc, #88]	; (826e8 <xTaskRemoveFromEventList+0x64>)
   8268e:	4798      	blx	r3
   82690:	bf00      	nop
   82692:	e7fd      	b.n	82690 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   82694:	f104 0518 	add.w	r5, r4, #24
   82698:	4628      	mov	r0, r5
   8269a:	4b14      	ldr	r3, [pc, #80]	; (826ec <xTaskRemoveFromEventList+0x68>)
   8269c:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8269e:	4b14      	ldr	r3, [pc, #80]	; (826f0 <xTaskRemoveFromEventList+0x6c>)
   826a0:	681b      	ldr	r3, [r3, #0]
   826a2:	b99b      	cbnz	r3, 826cc <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   826a4:	1d25      	adds	r5, r4, #4
   826a6:	4628      	mov	r0, r5
   826a8:	4b10      	ldr	r3, [pc, #64]	; (826ec <xTaskRemoveFromEventList+0x68>)
   826aa:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   826ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   826ae:	4a11      	ldr	r2, [pc, #68]	; (826f4 <xTaskRemoveFromEventList+0x70>)
   826b0:	6812      	ldr	r2, [r2, #0]
   826b2:	4293      	cmp	r3, r2
   826b4:	bf84      	itt	hi
   826b6:	4a0f      	ldrhi	r2, [pc, #60]	; (826f4 <xTaskRemoveFromEventList+0x70>)
   826b8:	6013      	strhi	r3, [r2, #0]
   826ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   826be:	480e      	ldr	r0, [pc, #56]	; (826f8 <xTaskRemoveFromEventList+0x74>)
   826c0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   826c4:	4629      	mov	r1, r5
   826c6:	4b0d      	ldr	r3, [pc, #52]	; (826fc <xTaskRemoveFromEventList+0x78>)
   826c8:	4798      	blx	r3
   826ca:	e003      	b.n	826d4 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   826cc:	480c      	ldr	r0, [pc, #48]	; (82700 <xTaskRemoveFromEventList+0x7c>)
   826ce:	4629      	mov	r1, r5
   826d0:	4b0a      	ldr	r3, [pc, #40]	; (826fc <xTaskRemoveFromEventList+0x78>)
   826d2:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   826d4:	4b0b      	ldr	r3, [pc, #44]	; (82704 <xTaskRemoveFromEventList+0x80>)
   826d6:	681b      	ldr	r3, [r3, #0]
   826d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   826da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   826dc:	4298      	cmp	r0, r3
   826de:	bf34      	ite	cc
   826e0:	2000      	movcc	r0, #0
   826e2:	2001      	movcs	r0, #1
   826e4:	bd38      	pop	{r3, r4, r5, pc}
   826e6:	bf00      	nop
   826e8:	00081709 	.word	0x00081709
   826ec:	00081681 	.word	0x00081681
   826f0:	20078c8c 	.word	0x20078c8c
   826f4:	20078bc0 	.word	0x20078bc0
   826f8:	20078bc4 	.word	0x20078bc4
   826fc:	00081621 	.word	0x00081621
   82700:	20078c94 	.word	0x20078c94
   82704:	20078c90 	.word	0x20078c90

00082708 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   82708:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   8270a:	b918      	cbnz	r0, 82714 <vTaskSetTimeOutState+0xc>
   8270c:	4b05      	ldr	r3, [pc, #20]	; (82724 <vTaskSetTimeOutState+0x1c>)
   8270e:	4798      	blx	r3
   82710:	bf00      	nop
   82712:	e7fd      	b.n	82710 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   82714:	4a04      	ldr	r2, [pc, #16]	; (82728 <vTaskSetTimeOutState+0x20>)
   82716:	6812      	ldr	r2, [r2, #0]
   82718:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   8271a:	4a04      	ldr	r2, [pc, #16]	; (8272c <vTaskSetTimeOutState+0x24>)
   8271c:	8812      	ldrh	r2, [r2, #0]
   8271e:	8082      	strh	r2, [r0, #4]
   82720:	bd08      	pop	{r3, pc}
   82722:	bf00      	nop
   82724:	00081709 	.word	0x00081709
   82728:	20078ca8 	.word	0x20078ca8
   8272c:	20078cac 	.word	0x20078cac

00082730 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   82730:	b538      	push	{r3, r4, r5, lr}
   82732:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   82734:	4604      	mov	r4, r0
   82736:	b918      	cbnz	r0, 82740 <xTaskCheckForTimeOut+0x10>
   82738:	4b1a      	ldr	r3, [pc, #104]	; (827a4 <xTaskCheckForTimeOut+0x74>)
   8273a:	4798      	blx	r3
   8273c:	bf00      	nop
   8273e:	e7fd      	b.n	8273c <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
   82740:	b919      	cbnz	r1, 8274a <xTaskCheckForTimeOut+0x1a>
   82742:	4b18      	ldr	r3, [pc, #96]	; (827a4 <xTaskCheckForTimeOut+0x74>)
   82744:	4798      	blx	r3
   82746:	bf00      	nop
   82748:	e7fd      	b.n	82746 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   8274a:	4b17      	ldr	r3, [pc, #92]	; (827a8 <xTaskCheckForTimeOut+0x78>)
   8274c:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   8274e:	882b      	ldrh	r3, [r5, #0]
   82750:	f64f 72ff 	movw	r2, #65535	; 0xffff
   82754:	4293      	cmp	r3, r2
   82756:	d01c      	beq.n	82792 <xTaskCheckForTimeOut+0x62>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   82758:	4a14      	ldr	r2, [pc, #80]	; (827ac <xTaskCheckForTimeOut+0x7c>)
   8275a:	6811      	ldr	r1, [r2, #0]
   8275c:	6822      	ldr	r2, [r4, #0]
   8275e:	428a      	cmp	r2, r1
   82760:	d005      	beq.n	8276e <xTaskCheckForTimeOut+0x3e>
   82762:	4a13      	ldr	r2, [pc, #76]	; (827b0 <xTaskCheckForTimeOut+0x80>)
   82764:	8812      	ldrh	r2, [r2, #0]
   82766:	b292      	uxth	r2, r2
   82768:	88a1      	ldrh	r1, [r4, #4]
   8276a:	4291      	cmp	r1, r2
   8276c:	d913      	bls.n	82796 <xTaskCheckForTimeOut+0x66>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   8276e:	4a10      	ldr	r2, [pc, #64]	; (827b0 <xTaskCheckForTimeOut+0x80>)
   82770:	8811      	ldrh	r1, [r2, #0]
   82772:	88a2      	ldrh	r2, [r4, #4]
   82774:	1a89      	subs	r1, r1, r2
   82776:	b289      	uxth	r1, r1
   82778:	428b      	cmp	r3, r1
   8277a:	d90e      	bls.n	8279a <xTaskCheckForTimeOut+0x6a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   8277c:	490c      	ldr	r1, [pc, #48]	; (827b0 <xTaskCheckForTimeOut+0x80>)
   8277e:	8809      	ldrh	r1, [r1, #0]
   82780:	b289      	uxth	r1, r1
   82782:	1a52      	subs	r2, r2, r1
   82784:	4413      	add	r3, r2
   82786:	802b      	strh	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   82788:	4620      	mov	r0, r4
   8278a:	4b0a      	ldr	r3, [pc, #40]	; (827b4 <xTaskCheckForTimeOut+0x84>)
   8278c:	4798      	blx	r3
			xReturn = pdFALSE;
   8278e:	2400      	movs	r4, #0
   82790:	e004      	b.n	8279c <xTaskCheckForTimeOut+0x6c>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   82792:	2400      	movs	r4, #0
   82794:	e002      	b.n	8279c <xTaskCheckForTimeOut+0x6c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   82796:	2401      	movs	r4, #1
   82798:	e000      	b.n	8279c <xTaskCheckForTimeOut+0x6c>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   8279a:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   8279c:	4b06      	ldr	r3, [pc, #24]	; (827b8 <xTaskCheckForTimeOut+0x88>)
   8279e:	4798      	blx	r3

	return xReturn;
}
   827a0:	4620      	mov	r0, r4
   827a2:	bd38      	pop	{r3, r4, r5, pc}
   827a4:	00081709 	.word	0x00081709
   827a8:	00081719 	.word	0x00081719
   827ac:	20078ca8 	.word	0x20078ca8
   827b0:	20078cac 	.word	0x20078cac
   827b4:	00082709 	.word	0x00082709
   827b8:	00081739 	.word	0x00081739

000827bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   827bc:	2201      	movs	r2, #1
   827be:	4b01      	ldr	r3, [pc, #4]	; (827c4 <vTaskMissedYield+0x8>)
   827c0:	601a      	str	r2, [r3, #0]
   827c2:	4770      	bx	lr
   827c4:	20078ccc 	.word	0x20078ccc

000827c8 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   827c8:	4b01      	ldr	r3, [pc, #4]	; (827d0 <xTaskGetCurrentTaskHandle+0x8>)
   827ca:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   827cc:	4770      	bx	lr
   827ce:	bf00      	nop
   827d0:	20078c90 	.word	0x20078c90

000827d4 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   827d4:	4b05      	ldr	r3, [pc, #20]	; (827ec <xTaskGetSchedulerState+0x18>)
   827d6:	681b      	ldr	r3, [r3, #0]
   827d8:	b133      	cbz	r3, 827e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   827da:	4b05      	ldr	r3, [pc, #20]	; (827f0 <xTaskGetSchedulerState+0x1c>)
   827dc:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   827de:	2b00      	cmp	r3, #0
   827e0:	bf14      	ite	ne
   827e2:	2002      	movne	r0, #2
   827e4:	2001      	moveq	r0, #1
   827e6:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   827e8:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   827ea:	4770      	bx	lr
   827ec:	20078b90 	.word	0x20078b90
   827f0:	20078c8c 	.word	0x20078c8c

000827f4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   827f4:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   827f6:	4604      	mov	r4, r0
   827f8:	2800      	cmp	r0, #0
   827fa:	d02e      	beq.n	8285a <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   827fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   827fe:	4a17      	ldr	r2, [pc, #92]	; (8285c <vTaskPriorityInherit+0x68>)
   82800:	6812      	ldr	r2, [r2, #0]
   82802:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   82804:	4293      	cmp	r3, r2
   82806:	d228      	bcs.n	8285a <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   82808:	4a14      	ldr	r2, [pc, #80]	; (8285c <vTaskPriorityInherit+0x68>)
   8280a:	6812      	ldr	r2, [r2, #0]
   8280c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   8280e:	f1c2 020a 	rsb	r2, r2, #10
   82812:	8302      	strh	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   82814:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82818:	4a11      	ldr	r2, [pc, #68]	; (82860 <vTaskPriorityInherit+0x6c>)
   8281a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8281e:	6942      	ldr	r2, [r0, #20]
   82820:	429a      	cmp	r2, r3
   82822:	d116      	bne.n	82852 <vTaskPriorityInherit+0x5e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82824:	1d05      	adds	r5, r0, #4
   82826:	4628      	mov	r0, r5
   82828:	4b0e      	ldr	r3, [pc, #56]	; (82864 <vTaskPriorityInherit+0x70>)
   8282a:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   8282c:	4b0b      	ldr	r3, [pc, #44]	; (8285c <vTaskPriorityInherit+0x68>)
   8282e:	681b      	ldr	r3, [r3, #0]
   82830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82832:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   82834:	4a0c      	ldr	r2, [pc, #48]	; (82868 <vTaskPriorityInherit+0x74>)
   82836:	6812      	ldr	r2, [r2, #0]
   82838:	4293      	cmp	r3, r2
   8283a:	bf84      	itt	hi
   8283c:	4a0a      	ldrhi	r2, [pc, #40]	; (82868 <vTaskPriorityInherit+0x74>)
   8283e:	6013      	strhi	r3, [r2, #0]
   82840:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82844:	4806      	ldr	r0, [pc, #24]	; (82860 <vTaskPriorityInherit+0x6c>)
   82846:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   8284a:	4629      	mov	r1, r5
   8284c:	4b07      	ldr	r3, [pc, #28]	; (8286c <vTaskPriorityInherit+0x78>)
   8284e:	4798      	blx	r3
   82850:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82852:	4b02      	ldr	r3, [pc, #8]	; (8285c <vTaskPriorityInherit+0x68>)
   82854:	681b      	ldr	r3, [r3, #0]
   82856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82858:	62c3      	str	r3, [r0, #44]	; 0x2c
   8285a:	bd38      	pop	{r3, r4, r5, pc}
   8285c:	20078c90 	.word	0x20078c90
   82860:	20078bc4 	.word	0x20078bc4
   82864:	00081681 	.word	0x00081681
   82868:	20078bc0 	.word	0x20078bc0
   8286c:	00081621 	.word	0x00081621

00082870 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   82870:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   82872:	4604      	mov	r4, r0
   82874:	b1d0      	cbz	r0, 828ac <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   82876:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   82878:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8287a:	429a      	cmp	r2, r3
   8287c:	d016      	beq.n	828ac <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   8287e:	1d05      	adds	r5, r0, #4
   82880:	4628      	mov	r0, r5
   82882:	4b0b      	ldr	r3, [pc, #44]	; (828b0 <vTaskPriorityDisinherit+0x40>)
   82884:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   82886:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   82888:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   8288a:	f1c3 020a 	rsb	r2, r3, #10
   8288e:	8322      	strh	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   82890:	4a08      	ldr	r2, [pc, #32]	; (828b4 <vTaskPriorityDisinherit+0x44>)
   82892:	6812      	ldr	r2, [r2, #0]
   82894:	4293      	cmp	r3, r2
   82896:	bf84      	itt	hi
   82898:	4a06      	ldrhi	r2, [pc, #24]	; (828b4 <vTaskPriorityDisinherit+0x44>)
   8289a:	6013      	strhi	r3, [r2, #0]
   8289c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   828a0:	4805      	ldr	r0, [pc, #20]	; (828b8 <vTaskPriorityDisinherit+0x48>)
   828a2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   828a6:	4629      	mov	r1, r5
   828a8:	4b04      	ldr	r3, [pc, #16]	; (828bc <vTaskPriorityDisinherit+0x4c>)
   828aa:	4798      	blx	r3
   828ac:	bd38      	pop	{r3, r4, r5, pc}
   828ae:	bf00      	nop
   828b0:	00081681 	.word	0x00081681
   828b4:	20078bc0 	.word	0x20078bc0
   828b8:	20078bc4 	.word	0x20078bc4
   828bc:	00081621 	.word	0x00081621

000828c0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   828c0:	b510      	push	{r4, lr}
   828c2:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   828c4:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   828c6:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   828c8:	4291      	cmp	r1, r2
   828ca:	d80b      	bhi.n	828e4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   828cc:	1ad3      	subs	r3, r2, r3
   828ce:	8b01      	ldrh	r1, [r0, #24]
   828d0:	b29b      	uxth	r3, r3
   828d2:	4299      	cmp	r1, r3
   828d4:	d911      	bls.n	828fa <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   828d6:	4b0b      	ldr	r3, [pc, #44]	; (82904 <prvInsertTimerInActiveList+0x44>)
   828d8:	6818      	ldr	r0, [r3, #0]
   828da:	1d21      	adds	r1, r4, #4
   828dc:	4b0a      	ldr	r3, [pc, #40]	; (82908 <prvInsertTimerInActiveList+0x48>)
   828de:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   828e0:	2000      	movs	r0, #0
   828e2:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   828e4:	429a      	cmp	r2, r3
   828e6:	d201      	bcs.n	828ec <prvInsertTimerInActiveList+0x2c>
   828e8:	4299      	cmp	r1, r3
   828ea:	d208      	bcs.n	828fe <prvInsertTimerInActiveList+0x3e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   828ec:	4b07      	ldr	r3, [pc, #28]	; (8290c <prvInsertTimerInActiveList+0x4c>)
   828ee:	6818      	ldr	r0, [r3, #0]
   828f0:	1d21      	adds	r1, r4, #4
   828f2:	4b05      	ldr	r3, [pc, #20]	; (82908 <prvInsertTimerInActiveList+0x48>)
   828f4:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   828f6:	2000      	movs	r0, #0
   828f8:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   828fa:	2001      	movs	r0, #1
   828fc:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   828fe:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   82900:	bd10      	pop	{r4, pc}
   82902:	bf00      	nop
   82904:	20078d0c 	.word	0x20078d0c
   82908:	0008163d 	.word	0x0008163d
   8290c:	20078cd8 	.word	0x20078cd8

00082910 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   82910:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   82912:	4b0d      	ldr	r3, [pc, #52]	; (82948 <prvCheckForValidListAndQueue+0x38>)
   82914:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   82916:	4b0d      	ldr	r3, [pc, #52]	; (8294c <prvCheckForValidListAndQueue+0x3c>)
   82918:	681b      	ldr	r3, [r3, #0]
   8291a:	b98b      	cbnz	r3, 82940 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   8291c:	4d0c      	ldr	r5, [pc, #48]	; (82950 <prvCheckForValidListAndQueue+0x40>)
   8291e:	4628      	mov	r0, r5
   82920:	4e0c      	ldr	r6, [pc, #48]	; (82954 <prvCheckForValidListAndQueue+0x44>)
   82922:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   82924:	4c0c      	ldr	r4, [pc, #48]	; (82958 <prvCheckForValidListAndQueue+0x48>)
   82926:	4620      	mov	r0, r4
   82928:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   8292a:	4b0c      	ldr	r3, [pc, #48]	; (8295c <prvCheckForValidListAndQueue+0x4c>)
   8292c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   8292e:	4b0c      	ldr	r3, [pc, #48]	; (82960 <prvCheckForValidListAndQueue+0x50>)
   82930:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   82932:	2005      	movs	r0, #5
   82934:	210c      	movs	r1, #12
   82936:	2200      	movs	r2, #0
   82938:	4b0a      	ldr	r3, [pc, #40]	; (82964 <prvCheckForValidListAndQueue+0x54>)
   8293a:	4798      	blx	r3
   8293c:	4b03      	ldr	r3, [pc, #12]	; (8294c <prvCheckForValidListAndQueue+0x3c>)
   8293e:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   82940:	4b09      	ldr	r3, [pc, #36]	; (82968 <prvCheckForValidListAndQueue+0x58>)
   82942:	4798      	blx	r3
   82944:	bd70      	pop	{r4, r5, r6, pc}
   82946:	bf00      	nop
   82948:	00081719 	.word	0x00081719
   8294c:	20078d08 	.word	0x20078d08
   82950:	20078cdc 	.word	0x20078cdc
   82954:	00081601 	.word	0x00081601
   82958:	20078cf0 	.word	0x20078cf0
   8295c:	20078cd8 	.word	0x20078cd8
   82960:	20078d0c 	.word	0x20078d0c
   82964:	00081af1 	.word	0x00081af1
   82968:	00081739 	.word	0x00081739

0008296c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   8296c:	b510      	push	{r4, lr}
   8296e:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   82970:	4b0b      	ldr	r3, [pc, #44]	; (829a0 <xTimerCreateTimerTask+0x34>)
   82972:	4798      	blx	r3

	if( xTimerQueue != NULL )
   82974:	4b0b      	ldr	r3, [pc, #44]	; (829a4 <xTimerCreateTimerTask+0x38>)
   82976:	681b      	ldr	r3, [r3, #0]
   82978:	b163      	cbz	r3, 82994 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   8297a:	2309      	movs	r3, #9
   8297c:	9300      	str	r3, [sp, #0]
   8297e:	2300      	movs	r3, #0
   82980:	9301      	str	r3, [sp, #4]
   82982:	9302      	str	r3, [sp, #8]
   82984:	9303      	str	r3, [sp, #12]
   82986:	4808      	ldr	r0, [pc, #32]	; (829a8 <xTimerCreateTimerTask+0x3c>)
   82988:	4908      	ldr	r1, [pc, #32]	; (829ac <xTimerCreateTimerTask+0x40>)
   8298a:	f44f 7200 	mov.w	r2, #512	; 0x200
   8298e:	4c08      	ldr	r4, [pc, #32]	; (829b0 <xTimerCreateTimerTask+0x44>)
   82990:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   82992:	b918      	cbnz	r0, 8299c <xTimerCreateTimerTask+0x30>
   82994:	4b07      	ldr	r3, [pc, #28]	; (829b4 <xTimerCreateTimerTask+0x48>)
   82996:	4798      	blx	r3
   82998:	bf00      	nop
   8299a:	e7fd      	b.n	82998 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   8299c:	b004      	add	sp, #16
   8299e:	bd10      	pop	{r4, pc}
   829a0:	00082911 	.word	0x00082911
   829a4:	20078d08 	.word	0x20078d08
   829a8:	00082acd 	.word	0x00082acd
   829ac:	0008a534 	.word	0x0008a534
   829b0:	00081f09 	.word	0x00081f09
   829b4:	00081709 	.word	0x00081709

000829b8 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   829b8:	b510      	push	{r4, lr}
   829ba:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   829bc:	4c10      	ldr	r4, [pc, #64]	; (82a00 <xTimerGenericCommand+0x48>)
   829be:	6824      	ldr	r4, [r4, #0]
   829c0:	b1d4      	cbz	r4, 829f8 <xTimerGenericCommand+0x40>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   829c2:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   829c4:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   829c8:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   829ca:	b973      	cbnz	r3, 829ea <xTimerGenericCommand+0x32>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   829cc:	4b0d      	ldr	r3, [pc, #52]	; (82a04 <xTimerGenericCommand+0x4c>)
   829ce:	4798      	blx	r3
   829d0:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   829d2:	4b0b      	ldr	r3, [pc, #44]	; (82a00 <xTimerGenericCommand+0x48>)
   829d4:	6818      	ldr	r0, [r3, #0]
   829d6:	a901      	add	r1, sp, #4
   829d8:	bf07      	ittee	eq
   829da:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
   829de:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   829e0:	2200      	movne	r2, #0
   829e2:	4613      	movne	r3, r2
   829e4:	4c08      	ldr	r4, [pc, #32]	; (82a08 <xTimerGenericCommand+0x50>)
   829e6:	47a0      	blx	r4
   829e8:	e007      	b.n	829fa <xTimerGenericCommand+0x42>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   829ea:	4620      	mov	r0, r4
   829ec:	a901      	add	r1, sp, #4
   829ee:	461a      	mov	r2, r3
   829f0:	2300      	movs	r3, #0
   829f2:	4c06      	ldr	r4, [pc, #24]	; (82a0c <xTimerGenericCommand+0x54>)
   829f4:	47a0      	blx	r4
   829f6:	e000      	b.n	829fa <xTimerGenericCommand+0x42>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   829f8:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   829fa:	b004      	add	sp, #16
   829fc:	bd10      	pop	{r4, pc}
   829fe:	bf00      	nop
   82a00:	20078d08 	.word	0x20078d08
   82a04:	000827d5 	.word	0x000827d5
   82a08:	00081b49 	.word	0x00081b49
   82a0c:	00081c6d 	.word	0x00081c6d

00082a10 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   82a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82a14:	b082      	sub	sp, #8
   82a16:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   82a18:	4b24      	ldr	r3, [pc, #144]	; (82aac <prvSampleTimeNow+0x9c>)
   82a1a:	4798      	blx	r3
   82a1c:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   82a1e:	4b24      	ldr	r3, [pc, #144]	; (82ab0 <prvSampleTimeNow+0xa0>)
   82a20:	881b      	ldrh	r3, [r3, #0]
   82a22:	4283      	cmp	r3, r0
   82a24:	d937      	bls.n	82a96 <prvSampleTimeNow+0x86>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82a26:	4e23      	ldr	r6, [pc, #140]	; (82ab4 <prvSampleTimeNow+0xa4>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82a28:	4f23      	ldr	r7, [pc, #140]	; (82ab8 <prvSampleTimeNow+0xa8>)
   82a2a:	e027      	b.n	82a7c <prvSampleTimeNow+0x6c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82a2c:	68da      	ldr	r2, [r3, #12]
   82a2e:	f8b2 a000 	ldrh.w	sl, [r2]
   82a32:	fa1f fa8a 	uxth.w	sl, sl

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82a36:	68db      	ldr	r3, [r3, #12]
   82a38:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82a3a:	1d25      	adds	r5, r4, #4
   82a3c:	4628      	mov	r0, r5
   82a3e:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82a42:	4620      	mov	r0, r4
   82a44:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82a46:	69e3      	ldr	r3, [r4, #28]
   82a48:	2b01      	cmp	r3, #1
   82a4a:	d117      	bne.n	82a7c <prvSampleTimeNow+0x6c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   82a4c:	8b23      	ldrh	r3, [r4, #24]
   82a4e:	4453      	add	r3, sl
   82a50:	b29b      	uxth	r3, r3
			if( xReloadTime > xNextExpireTime )
   82a52:	4553      	cmp	r3, sl
   82a54:	d906      	bls.n	82a64 <prvSampleTimeNow+0x54>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   82a56:	80a3      	strh	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82a58:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82a5a:	6830      	ldr	r0, [r6, #0]
   82a5c:	4629      	mov	r1, r5
   82a5e:	4b17      	ldr	r3, [pc, #92]	; (82abc <prvSampleTimeNow+0xac>)
   82a60:	4798      	blx	r3
   82a62:	e00b      	b.n	82a7c <prvSampleTimeNow+0x6c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82a64:	2300      	movs	r3, #0
   82a66:	9300      	str	r3, [sp, #0]
   82a68:	4620      	mov	r0, r4
   82a6a:	4619      	mov	r1, r3
   82a6c:	4652      	mov	r2, sl
   82a6e:	4c14      	ldr	r4, [pc, #80]	; (82ac0 <prvSampleTimeNow+0xb0>)
   82a70:	47a0      	blx	r4
				configASSERT( xResult );
   82a72:	b918      	cbnz	r0, 82a7c <prvSampleTimeNow+0x6c>
   82a74:	4b13      	ldr	r3, [pc, #76]	; (82ac4 <prvSampleTimeNow+0xb4>)
   82a76:	4798      	blx	r3
   82a78:	bf00      	nop
   82a7a:	e7fd      	b.n	82a78 <prvSampleTimeNow+0x68>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82a7c:	6833      	ldr	r3, [r6, #0]
   82a7e:	681a      	ldr	r2, [r3, #0]
   82a80:	2a00      	cmp	r2, #0
   82a82:	d1d3      	bne.n	82a2c <prvSampleTimeNow+0x1c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   82a84:	4a10      	ldr	r2, [pc, #64]	; (82ac8 <prvSampleTimeNow+0xb8>)
   82a86:	6811      	ldr	r1, [r2, #0]
   82a88:	480a      	ldr	r0, [pc, #40]	; (82ab4 <prvSampleTimeNow+0xa4>)
   82a8a:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   82a8c:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   82a8e:	2301      	movs	r3, #1
   82a90:	f8c9 3000 	str.w	r3, [r9]
   82a94:	e002      	b.n	82a9c <prvSampleTimeNow+0x8c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   82a96:	2300      	movs	r3, #0
   82a98:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   82a9c:	4b04      	ldr	r3, [pc, #16]	; (82ab0 <prvSampleTimeNow+0xa0>)
   82a9e:	f8a3 8000 	strh.w	r8, [r3]

	return xTimeNow;
}
   82aa2:	4640      	mov	r0, r8
   82aa4:	b002      	add	sp, #8
   82aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82aaa:	bf00      	nop
   82aac:	0008218d 	.word	0x0008218d
   82ab0:	20078d04 	.word	0x20078d04
   82ab4:	20078cd8 	.word	0x20078cd8
   82ab8:	00081681 	.word	0x00081681
   82abc:	0008163d 	.word	0x0008163d
   82ac0:	000829b9 	.word	0x000829b9
   82ac4:	00081709 	.word	0x00081709
   82ac8:	20078d0c 	.word	0x20078d0c

00082acc <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   82acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82ad0:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   82ad2:	4d51      	ldr	r5, [pc, #324]	; (82c18 <prvTimerTask+0x14c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   82ad4:	f8df 8170 	ldr.w	r8, [pc, #368]	; 82c48 <prvTimerTask+0x17c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   82ad8:	4b50      	ldr	r3, [pc, #320]	; (82c1c <prvTimerTask+0x150>)
   82ada:	681b      	ldr	r3, [r3, #0]
   82adc:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   82ade:	2a00      	cmp	r2, #0
   82ae0:	f000 8090 	beq.w	82c04 <prvTimerTask+0x138>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82ae4:	68db      	ldr	r3, [r3, #12]
   82ae6:	881e      	ldrh	r6, [r3, #0]
   82ae8:	b2b6      	uxth	r6, r6
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82aea:	4b4d      	ldr	r3, [pc, #308]	; (82c20 <prvTimerTask+0x154>)
   82aec:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82aee:	a803      	add	r0, sp, #12
   82af0:	4b4c      	ldr	r3, [pc, #304]	; (82c24 <prvTimerTask+0x158>)
   82af2:	4798      	blx	r3
   82af4:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82af6:	9b03      	ldr	r3, [sp, #12]
   82af8:	2b00      	cmp	r3, #0
   82afa:	d132      	bne.n	82b62 <prvTimerTask+0x96>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   82afc:	4286      	cmp	r6, r0
   82afe:	d825      	bhi.n	82b4c <prvTimerTask+0x80>
			{
				xTaskResumeAll();
   82b00:	4b49      	ldr	r3, [pc, #292]	; (82c28 <prvTimerTask+0x15c>)
   82b02:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82b04:	4b45      	ldr	r3, [pc, #276]	; (82c1c <prvTimerTask+0x150>)
   82b06:	681b      	ldr	r3, [r3, #0]
   82b08:	68db      	ldr	r3, [r3, #12]
   82b0a:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   82b0c:	1d20      	adds	r0, r4, #4
   82b0e:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82b10:	69e3      	ldr	r3, [r4, #28]
   82b12:	2b01      	cmp	r3, #1
   82b14:	d115      	bne.n	82b42 <prvTimerTask+0x76>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   82b16:	8b21      	ldrh	r1, [r4, #24]
   82b18:	4431      	add	r1, r6
   82b1a:	4620      	mov	r0, r4
   82b1c:	b289      	uxth	r1, r1
   82b1e:	463a      	mov	r2, r7
   82b20:	4633      	mov	r3, r6
   82b22:	4f42      	ldr	r7, [pc, #264]	; (82c2c <prvTimerTask+0x160>)
   82b24:	47b8      	blx	r7
   82b26:	2801      	cmp	r0, #1
   82b28:	d10b      	bne.n	82b42 <prvTimerTask+0x76>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82b2a:	2300      	movs	r3, #0
   82b2c:	9300      	str	r3, [sp, #0]
   82b2e:	4620      	mov	r0, r4
   82b30:	4619      	mov	r1, r3
   82b32:	4632      	mov	r2, r6
   82b34:	4e3e      	ldr	r6, [pc, #248]	; (82c30 <prvTimerTask+0x164>)
   82b36:	47b0      	blx	r6
			configASSERT( xResult );
   82b38:	b918      	cbnz	r0, 82b42 <prvTimerTask+0x76>
   82b3a:	4b3e      	ldr	r3, [pc, #248]	; (82c34 <prvTimerTask+0x168>)
   82b3c:	4798      	blx	r3
   82b3e:	bf00      	nop
   82b40:	e7fd      	b.n	82b3e <prvTimerTask+0x72>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82b44:	4620      	mov	r0, r4
   82b46:	4798      	blx	r3
   82b48:	e00d      	b.n	82b66 <prvTimerTask+0x9a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   82b4a:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   82b4c:	1bf1      	subs	r1, r6, r7
   82b4e:	6828      	ldr	r0, [r5, #0]
   82b50:	b289      	uxth	r1, r1
   82b52:	4b39      	ldr	r3, [pc, #228]	; (82c38 <prvTimerTask+0x16c>)
   82b54:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   82b56:	4b34      	ldr	r3, [pc, #208]	; (82c28 <prvTimerTask+0x15c>)
   82b58:	4798      	blx	r3
   82b5a:	b920      	cbnz	r0, 82b66 <prvTimerTask+0x9a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   82b5c:	4b37      	ldr	r3, [pc, #220]	; (82c3c <prvTimerTask+0x170>)
   82b5e:	4798      	blx	r3
   82b60:	e001      	b.n	82b66 <prvTimerTask+0x9a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   82b62:	4b31      	ldr	r3, [pc, #196]	; (82c28 <prvTimerTask+0x15c>)
   82b64:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82b66:	a802      	add	r0, sp, #8
   82b68:	4b2e      	ldr	r3, [pc, #184]	; (82c24 <prvTimerTask+0x158>)
   82b6a:	4798      	blx	r3
   82b6c:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82b6e:	4e34      	ldr	r6, [pc, #208]	; (82c40 <prvTimerTask+0x174>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82b70:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 82c2c <prvTimerTask+0x160>
   82b74:	e03e      	b.n	82bf4 <prvTimerTask+0x128>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   82b76:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   82b78:	b11c      	cbz	r4, 82b82 <prvTimerTask+0xb6>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   82b7a:	6961      	ldr	r1, [r4, #20]
   82b7c:	b109      	cbz	r1, 82b82 <prvTimerTask+0xb6>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   82b7e:	1d20      	adds	r0, r4, #4
   82b80:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   82b82:	9903      	ldr	r1, [sp, #12]
   82b84:	2902      	cmp	r1, #2
   82b86:	d023      	beq.n	82bd0 <prvTimerTask+0x104>
   82b88:	2903      	cmp	r1, #3
   82b8a:	d030      	beq.n	82bee <prvTimerTask+0x122>
   82b8c:	2900      	cmp	r1, #0
   82b8e:	d131      	bne.n	82bf4 <prvTimerTask+0x128>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   82b90:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   82b94:	8b21      	ldrh	r1, [r4, #24]
   82b96:	4419      	add	r1, r3
   82b98:	4620      	mov	r0, r4
   82b9a:	b289      	uxth	r1, r1
   82b9c:	463a      	mov	r2, r7
   82b9e:	47c8      	blx	r9
   82ba0:	2801      	cmp	r0, #1
   82ba2:	d127      	bne.n	82bf4 <prvTimerTask+0x128>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82ba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82ba6:	4620      	mov	r0, r4
   82ba8:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82baa:	69e3      	ldr	r3, [r4, #28]
   82bac:	2b01      	cmp	r3, #1
   82bae:	d121      	bne.n	82bf4 <prvTimerTask+0x128>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   82bb0:	8b22      	ldrh	r2, [r4, #24]
   82bb2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   82bb6:	441a      	add	r2, r3
   82bb8:	2300      	movs	r3, #0
   82bba:	9300      	str	r3, [sp, #0]
   82bbc:	4620      	mov	r0, r4
   82bbe:	4619      	mov	r1, r3
   82bc0:	b292      	uxth	r2, r2
   82bc2:	4c1b      	ldr	r4, [pc, #108]	; (82c30 <prvTimerTask+0x164>)
   82bc4:	47a0      	blx	r4
						configASSERT( xResult );
   82bc6:	b9a8      	cbnz	r0, 82bf4 <prvTimerTask+0x128>
   82bc8:	4b1a      	ldr	r3, [pc, #104]	; (82c34 <prvTimerTask+0x168>)
   82bca:	4798      	blx	r3
   82bcc:	bf00      	nop
   82bce:	e7fd      	b.n	82bcc <prvTimerTask+0x100>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   82bd0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   82bd4:	8323      	strh	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   82bd6:	b91b      	cbnz	r3, 82be0 <prvTimerTask+0x114>
   82bd8:	4b16      	ldr	r3, [pc, #88]	; (82c34 <prvTimerTask+0x168>)
   82bda:	4798      	blx	r3
   82bdc:	bf00      	nop
   82bde:	e7fd      	b.n	82bdc <prvTimerTask+0x110>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82be0:	18f9      	adds	r1, r7, r3
   82be2:	4620      	mov	r0, r4
   82be4:	b289      	uxth	r1, r1
   82be6:	463a      	mov	r2, r7
   82be8:	463b      	mov	r3, r7
   82bea:	47c8      	blx	r9
   82bec:	e002      	b.n	82bf4 <prvTimerTask+0x128>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   82bee:	4620      	mov	r0, r4
   82bf0:	4b14      	ldr	r3, [pc, #80]	; (82c44 <prvTimerTask+0x178>)
   82bf2:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82bf4:	6828      	ldr	r0, [r5, #0]
   82bf6:	a903      	add	r1, sp, #12
   82bf8:	2200      	movs	r2, #0
   82bfa:	4613      	mov	r3, r2
   82bfc:	47b0      	blx	r6
   82bfe:	2800      	cmp	r0, #0
   82c00:	d1b9      	bne.n	82b76 <prvTimerTask+0xaa>
   82c02:	e769      	b.n	82ad8 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82c04:	4b06      	ldr	r3, [pc, #24]	; (82c20 <prvTimerTask+0x154>)
   82c06:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82c08:	a803      	add	r0, sp, #12
   82c0a:	4b06      	ldr	r3, [pc, #24]	; (82c24 <prvTimerTask+0x158>)
   82c0c:	4798      	blx	r3
   82c0e:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82c10:	9b03      	ldr	r3, [sp, #12]
   82c12:	2b00      	cmp	r3, #0
   82c14:	d099      	beq.n	82b4a <prvTimerTask+0x7e>
   82c16:	e7a4      	b.n	82b62 <prvTimerTask+0x96>
   82c18:	20078d08 	.word	0x20078d08
   82c1c:	20078cd8 	.word	0x20078cd8
   82c20:	0008217d 	.word	0x0008217d
   82c24:	00082a11 	.word	0x00082a11
   82c28:	000822d9 	.word	0x000822d9
   82c2c:	000828c1 	.word	0x000828c1
   82c30:	000829b9 	.word	0x000829b9
   82c34:	00081709 	.word	0x00081709
   82c38:	00081e61 	.word	0x00081e61
   82c3c:	000816f9 	.word	0x000816f9
   82c40:	00081cfd 	.word	0x00081cfd
   82c44:	00081929 	.word	0x00081929
   82c48:	00081681 	.word	0x00081681

00082c4c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82c4c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82c4e:	480e      	ldr	r0, [pc, #56]	; (82c88 <sysclk_init+0x3c>)
   82c50:	4b0e      	ldr	r3, [pc, #56]	; (82c8c <sysclk_init+0x40>)
   82c52:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82c54:	2000      	movs	r0, #0
   82c56:	213e      	movs	r1, #62	; 0x3e
   82c58:	4b0d      	ldr	r3, [pc, #52]	; (82c90 <sysclk_init+0x44>)
   82c5a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82c5c:	4c0d      	ldr	r4, [pc, #52]	; (82c94 <sysclk_init+0x48>)
   82c5e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82c60:	2800      	cmp	r0, #0
   82c62:	d0fc      	beq.n	82c5e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   82c64:	4b0c      	ldr	r3, [pc, #48]	; (82c98 <sysclk_init+0x4c>)
   82c66:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82c68:	4a0c      	ldr	r2, [pc, #48]	; (82c9c <sysclk_init+0x50>)
   82c6a:	4b0d      	ldr	r3, [pc, #52]	; (82ca0 <sysclk_init+0x54>)
   82c6c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   82c6e:	4c0d      	ldr	r4, [pc, #52]	; (82ca4 <sysclk_init+0x58>)
   82c70:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82c72:	2800      	cmp	r0, #0
   82c74:	d0fc      	beq.n	82c70 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82c76:	2010      	movs	r0, #16
   82c78:	4b0b      	ldr	r3, [pc, #44]	; (82ca8 <sysclk_init+0x5c>)
   82c7a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82c7c:	4b0b      	ldr	r3, [pc, #44]	; (82cac <sysclk_init+0x60>)
   82c7e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82c80:	4801      	ldr	r0, [pc, #4]	; (82c88 <sysclk_init+0x3c>)
   82c82:	4b02      	ldr	r3, [pc, #8]	; (82c8c <sysclk_init+0x40>)
   82c84:	4798      	blx	r3
   82c86:	bd10      	pop	{r4, pc}
   82c88:	0501bd00 	.word	0x0501bd00
   82c8c:	200700a5 	.word	0x200700a5
   82c90:	00083065 	.word	0x00083065
   82c94:	000830b9 	.word	0x000830b9
   82c98:	000830c9 	.word	0x000830c9
   82c9c:	200d3f01 	.word	0x200d3f01
   82ca0:	400e0600 	.word	0x400e0600
   82ca4:	000830d9 	.word	0x000830d9
   82ca8:	00083001 	.word	0x00083001
   82cac:	000831f5 	.word	0x000831f5

00082cb0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82cb0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82cb2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82cb6:	4b1a      	ldr	r3, [pc, #104]	; (82d20 <board_init+0x70>)
   82cb8:	605a      	str	r2, [r3, #4]
   82cba:	200b      	movs	r0, #11
   82cbc:	4c19      	ldr	r4, [pc, #100]	; (82d24 <board_init+0x74>)
   82cbe:	47a0      	blx	r4
   82cc0:	200c      	movs	r0, #12
   82cc2:	47a0      	blx	r4
   82cc4:	200d      	movs	r0, #13
   82cc6:	47a0      	blx	r4
   82cc8:	200e      	movs	r0, #14
   82cca:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82ccc:	203b      	movs	r0, #59	; 0x3b
   82cce:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82cd2:	4c15      	ldr	r4, [pc, #84]	; (82d28 <board_init+0x78>)
   82cd4:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   82cd6:	2055      	movs	r0, #85	; 0x55
   82cd8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82cdc:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82cde:	2056      	movs	r0, #86	; 0x56
   82ce0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82ce4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   82ce6:	2068      	movs	r0, #104	; 0x68
   82ce8:	4910      	ldr	r1, [pc, #64]	; (82d2c <board_init+0x7c>)
   82cea:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82cec:	205c      	movs	r0, #92	; 0x5c
   82cee:	4910      	ldr	r1, [pc, #64]	; (82d30 <board_init+0x80>)
   82cf0:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82cf2:	4810      	ldr	r0, [pc, #64]	; (82d34 <board_init+0x84>)
   82cf4:	f44f 7140 	mov.w	r1, #768	; 0x300
   82cf8:	4a0f      	ldr	r2, [pc, #60]	; (82d38 <board_init+0x88>)
   82cfa:	4b10      	ldr	r3, [pc, #64]	; (82d3c <board_init+0x8c>)
   82cfc:	4798      	blx	r3
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   82cfe:	2011      	movs	r0, #17
   82d00:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82d04:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   82d06:	2012      	movs	r0, #18
   82d08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82d0c:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   82d0e:	202b      	movs	r0, #43	; 0x2b
   82d10:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82d14:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   82d16:	202a      	movs	r0, #42	; 0x2a
   82d18:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82d1c:	47a0      	blx	r4
   82d1e:	bd10      	pop	{r4, pc}
   82d20:	400e1a50 	.word	0x400e1a50
   82d24:	000830e9 	.word	0x000830e9
   82d28:	00082de5 	.word	0x00082de5
   82d2c:	28000079 	.word	0x28000079
   82d30:	28000001 	.word	0x28000001
   82d34:	400e0e00 	.word	0x400e0e00
   82d38:	08000001 	.word	0x08000001
   82d3c:	00082eb9 	.word	0x00082eb9

00082d40 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82d40:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82d42:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   82d46:	d016      	beq.n	82d76 <pio_set_peripheral+0x36>
   82d48:	d804      	bhi.n	82d54 <pio_set_peripheral+0x14>
   82d4a:	b1c1      	cbz	r1, 82d7e <pio_set_peripheral+0x3e>
   82d4c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   82d50:	d00a      	beq.n	82d68 <pio_set_peripheral+0x28>
   82d52:	e013      	b.n	82d7c <pio_set_peripheral+0x3c>
   82d54:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   82d58:	d011      	beq.n	82d7e <pio_set_peripheral+0x3e>
   82d5a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   82d5e:	d00e      	beq.n	82d7e <pio_set_peripheral+0x3e>
   82d60:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   82d64:	d10a      	bne.n	82d7c <pio_set_peripheral+0x3c>
   82d66:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82d68:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82d6a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   82d6c:	400b      	ands	r3, r1
   82d6e:	ea23 0302 	bic.w	r3, r3, r2
   82d72:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82d74:	e002      	b.n	82d7c <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82d76:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82d78:	4313      	orrs	r3, r2
   82d7a:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82d7c:	6042      	str	r2, [r0, #4]
   82d7e:	4770      	bx	lr

00082d80 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82d80:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82d82:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   82d86:	bf14      	ite	ne
   82d88:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82d8a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82d8c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   82d90:	bf14      	ite	ne
   82d92:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82d94:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82d96:	f012 0f02 	tst.w	r2, #2
   82d9a:	d002      	beq.n	82da2 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   82d9c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   82da0:	e004      	b.n	82dac <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82da2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   82da6:	bf18      	it	ne
   82da8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82dac:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   82dae:	6001      	str	r1, [r0, #0]
   82db0:	4770      	bx	lr
   82db2:	bf00      	nop

00082db4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82db4:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82db6:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82db8:	9c01      	ldr	r4, [sp, #4]
   82dba:	b10c      	cbz	r4, 82dc0 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   82dbc:	6641      	str	r1, [r0, #100]	; 0x64
   82dbe:	e000      	b.n	82dc2 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82dc0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82dc2:	b10b      	cbz	r3, 82dc8 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   82dc4:	6501      	str	r1, [r0, #80]	; 0x50
   82dc6:	e000      	b.n	82dca <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82dc8:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82dca:	b10a      	cbz	r2, 82dd0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   82dcc:	6301      	str	r1, [r0, #48]	; 0x30
   82dce:	e000      	b.n	82dd2 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82dd0:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   82dd2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82dd4:	6001      	str	r1, [r0, #0]
}
   82dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
   82dda:	4770      	bx	lr

00082ddc <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82ddc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   82dde:	4770      	bx	lr

00082de0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82de0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   82de2:	4770      	bx	lr

00082de4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82de4:	b570      	push	{r4, r5, r6, lr}
   82de6:	b082      	sub	sp, #8
   82de8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82dea:	0944      	lsrs	r4, r0, #5
   82dec:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   82df0:	f204 7407 	addw	r4, r4, #1799	; 0x707
   82df4:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82df6:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   82dfa:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   82dfe:	d030      	beq.n	82e62 <pio_configure_pin+0x7e>
   82e00:	d806      	bhi.n	82e10 <pio_configure_pin+0x2c>
   82e02:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   82e06:	d00a      	beq.n	82e1e <pio_configure_pin+0x3a>
   82e08:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   82e0c:	d018      	beq.n	82e40 <pio_configure_pin+0x5c>
   82e0e:	e049      	b.n	82ea4 <pio_configure_pin+0xc0>
   82e10:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82e14:	d030      	beq.n	82e78 <pio_configure_pin+0x94>
   82e16:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   82e1a:	d02d      	beq.n	82e78 <pio_configure_pin+0x94>
   82e1c:	e042      	b.n	82ea4 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82e1e:	f000 001f 	and.w	r0, r0, #31
   82e22:	2401      	movs	r4, #1
   82e24:	4084      	lsls	r4, r0
   82e26:	4630      	mov	r0, r6
   82e28:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82e2c:	4622      	mov	r2, r4
   82e2e:	4b1f      	ldr	r3, [pc, #124]	; (82eac <pio_configure_pin+0xc8>)
   82e30:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82e32:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82e36:	bf14      	ite	ne
   82e38:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82e3a:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82e3c:	2001      	movs	r0, #1
   82e3e:	e032      	b.n	82ea6 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82e40:	f000 001f 	and.w	r0, r0, #31
   82e44:	2401      	movs	r4, #1
   82e46:	4084      	lsls	r4, r0
   82e48:	4630      	mov	r0, r6
   82e4a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82e4e:	4622      	mov	r2, r4
   82e50:	4b16      	ldr	r3, [pc, #88]	; (82eac <pio_configure_pin+0xc8>)
   82e52:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82e54:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82e58:	bf14      	ite	ne
   82e5a:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82e5c:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82e5e:	2001      	movs	r0, #1
   82e60:	e021      	b.n	82ea6 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82e62:	f000 011f 	and.w	r1, r0, #31
   82e66:	2401      	movs	r4, #1
   82e68:	4630      	mov	r0, r6
   82e6a:	fa04 f101 	lsl.w	r1, r4, r1
   82e6e:	462a      	mov	r2, r5
   82e70:	4b0f      	ldr	r3, [pc, #60]	; (82eb0 <pio_configure_pin+0xcc>)
   82e72:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82e74:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   82e76:	e016      	b.n	82ea6 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82e78:	f000 011f 	and.w	r1, r0, #31
   82e7c:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82e7e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82e82:	ea05 0304 	and.w	r3, r5, r4
   82e86:	9300      	str	r3, [sp, #0]
   82e88:	4630      	mov	r0, r6
   82e8a:	fa04 f101 	lsl.w	r1, r4, r1
   82e8e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82e92:	bf14      	ite	ne
   82e94:	2200      	movne	r2, #0
   82e96:	2201      	moveq	r2, #1
   82e98:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82e9c:	4d05      	ldr	r5, [pc, #20]	; (82eb4 <pio_configure_pin+0xd0>)
   82e9e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   82ea0:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82ea2:	e000      	b.n	82ea6 <pio_configure_pin+0xc2>

	default:
		return 0;
   82ea4:	2000      	movs	r0, #0
	}

	return 1;
}
   82ea6:	b002      	add	sp, #8
   82ea8:	bd70      	pop	{r4, r5, r6, pc}
   82eaa:	bf00      	nop
   82eac:	00082d41 	.word	0x00082d41
   82eb0:	00082d81 	.word	0x00082d81
   82eb4:	00082db5 	.word	0x00082db5

00082eb8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   82eba:	b083      	sub	sp, #12
   82ebc:	4607      	mov	r7, r0
   82ebe:	460e      	mov	r6, r1
   82ec0:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82ec2:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   82ec6:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   82eca:	d026      	beq.n	82f1a <pio_configure_pin_group+0x62>
   82ecc:	d806      	bhi.n	82edc <pio_configure_pin_group+0x24>
   82ece:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   82ed2:	d00a      	beq.n	82eea <pio_configure_pin_group+0x32>
   82ed4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   82ed8:	d013      	beq.n	82f02 <pio_configure_pin_group+0x4a>
   82eda:	e034      	b.n	82f46 <pio_configure_pin_group+0x8e>
   82edc:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82ee0:	d01f      	beq.n	82f22 <pio_configure_pin_group+0x6a>
   82ee2:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   82ee6:	d01c      	beq.n	82f22 <pio_configure_pin_group+0x6a>
   82ee8:	e02d      	b.n	82f46 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82eea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82eee:	4632      	mov	r2, r6
   82ef0:	4b16      	ldr	r3, [pc, #88]	; (82f4c <pio_configure_pin_group+0x94>)
   82ef2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82ef4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82ef8:	bf14      	ite	ne
   82efa:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82efc:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82efe:	2001      	movs	r0, #1
   82f00:	e022      	b.n	82f48 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82f02:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82f06:	4632      	mov	r2, r6
   82f08:	4b10      	ldr	r3, [pc, #64]	; (82f4c <pio_configure_pin_group+0x94>)
   82f0a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82f0c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82f10:	bf14      	ite	ne
   82f12:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82f14:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82f16:	2001      	movs	r0, #1
   82f18:	e016      	b.n	82f48 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82f1a:	4b0d      	ldr	r3, [pc, #52]	; (82f50 <pio_configure_pin_group+0x98>)
   82f1c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82f1e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   82f20:	e012      	b.n	82f48 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82f22:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82f26:	f005 0301 	and.w	r3, r5, #1
   82f2a:	9300      	str	r3, [sp, #0]
   82f2c:	4638      	mov	r0, r7
   82f2e:	4631      	mov	r1, r6
   82f30:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82f34:	bf14      	ite	ne
   82f36:	2200      	movne	r2, #0
   82f38:	2201      	moveq	r2, #1
   82f3a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82f3e:	4c05      	ldr	r4, [pc, #20]	; (82f54 <pio_configure_pin_group+0x9c>)
   82f40:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   82f42:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82f44:	e000      	b.n	82f48 <pio_configure_pin_group+0x90>

	default:
		return 0;
   82f46:	2000      	movs	r0, #0
	}

	return 1;
}
   82f48:	b003      	add	sp, #12
   82f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82f4c:	00082d41 	.word	0x00082d41
   82f50:	00082d81 	.word	0x00082d81
   82f54:	00082db5 	.word	0x00082db5

00082f58 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82f5c:	4604      	mov	r4, r0
   82f5e:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82f60:	4b10      	ldr	r3, [pc, #64]	; (82fa4 <pio_handler_process+0x4c>)
   82f62:	4798      	blx	r3
   82f64:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82f66:	4620      	mov	r0, r4
   82f68:	4b0f      	ldr	r3, [pc, #60]	; (82fa8 <pio_handler_process+0x50>)
   82f6a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82f6c:	4005      	ands	r5, r0
   82f6e:	d017      	beq.n	82fa0 <pio_handler_process+0x48>
   82f70:	4f0e      	ldr	r7, [pc, #56]	; (82fac <pio_handler_process+0x54>)
   82f72:	f107 040c 	add.w	r4, r7, #12
   82f76:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82f78:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   82f7c:	42b3      	cmp	r3, r6
   82f7e:	d10a      	bne.n	82f96 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82f80:	f854 1c08 	ldr.w	r1, [r4, #-8]
   82f84:	4229      	tst	r1, r5
   82f86:	d006      	beq.n	82f96 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82f88:	6823      	ldr	r3, [r4, #0]
   82f8a:	4630      	mov	r0, r6
   82f8c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82f8e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   82f92:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82f96:	42bc      	cmp	r4, r7
   82f98:	d002      	beq.n	82fa0 <pio_handler_process+0x48>
   82f9a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82f9c:	2d00      	cmp	r5, #0
   82f9e:	d1eb      	bne.n	82f78 <pio_handler_process+0x20>
   82fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82fa4:	00082ddd 	.word	0x00082ddd
   82fa8:	00082de1 	.word	0x00082de1
   82fac:	20078d10 	.word	0x20078d10

00082fb0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82fb0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   82fb2:	4802      	ldr	r0, [pc, #8]	; (82fbc <PIOA_Handler+0xc>)
   82fb4:	210b      	movs	r1, #11
   82fb6:	4b02      	ldr	r3, [pc, #8]	; (82fc0 <PIOA_Handler+0x10>)
   82fb8:	4798      	blx	r3
   82fba:	bd08      	pop	{r3, pc}
   82fbc:	400e0e00 	.word	0x400e0e00
   82fc0:	00082f59 	.word	0x00082f59

00082fc4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82fc4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   82fc6:	4802      	ldr	r0, [pc, #8]	; (82fd0 <PIOB_Handler+0xc>)
   82fc8:	210c      	movs	r1, #12
   82fca:	4b02      	ldr	r3, [pc, #8]	; (82fd4 <PIOB_Handler+0x10>)
   82fcc:	4798      	blx	r3
   82fce:	bd08      	pop	{r3, pc}
   82fd0:	400e1000 	.word	0x400e1000
   82fd4:	00082f59 	.word	0x00082f59

00082fd8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82fd8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82fda:	4802      	ldr	r0, [pc, #8]	; (82fe4 <PIOC_Handler+0xc>)
   82fdc:	210d      	movs	r1, #13
   82fde:	4b02      	ldr	r3, [pc, #8]	; (82fe8 <PIOC_Handler+0x10>)
   82fe0:	4798      	blx	r3
   82fe2:	bd08      	pop	{r3, pc}
   82fe4:	400e1200 	.word	0x400e1200
   82fe8:	00082f59 	.word	0x00082f59

00082fec <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82fec:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82fee:	4802      	ldr	r0, [pc, #8]	; (82ff8 <PIOD_Handler+0xc>)
   82ff0:	210e      	movs	r1, #14
   82ff2:	4b02      	ldr	r3, [pc, #8]	; (82ffc <PIOD_Handler+0x10>)
   82ff4:	4798      	blx	r3
   82ff6:	bd08      	pop	{r3, pc}
   82ff8:	400e1400 	.word	0x400e1400
   82ffc:	00082f59 	.word	0x00082f59

00083000 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83000:	4b17      	ldr	r3, [pc, #92]	; (83060 <pmc_switch_mck_to_pllack+0x60>)
   83002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   83004:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   83008:	4310      	orrs	r0, r2
   8300a:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8300c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8300e:	f013 0f08 	tst.w	r3, #8
   83012:	d109      	bne.n	83028 <pmc_switch_mck_to_pllack+0x28>
   83014:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83018:	4911      	ldr	r1, [pc, #68]	; (83060 <pmc_switch_mck_to_pllack+0x60>)
   8301a:	e001      	b.n	83020 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8301c:	3b01      	subs	r3, #1
   8301e:	d019      	beq.n	83054 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83020:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83022:	f012 0f08 	tst.w	r2, #8
   83026:	d0f9      	beq.n	8301c <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83028:	4b0d      	ldr	r3, [pc, #52]	; (83060 <pmc_switch_mck_to_pllack+0x60>)
   8302a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8302c:	f022 0203 	bic.w	r2, r2, #3
   83030:	f042 0202 	orr.w	r2, r2, #2
   83034:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83036:	6e98      	ldr	r0, [r3, #104]	; 0x68
   83038:	f010 0008 	ands.w	r0, r0, #8
   8303c:	d10c      	bne.n	83058 <pmc_switch_mck_to_pllack+0x58>
   8303e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83042:	4907      	ldr	r1, [pc, #28]	; (83060 <pmc_switch_mck_to_pllack+0x60>)
   83044:	e001      	b.n	8304a <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83046:	3b01      	subs	r3, #1
   83048:	d008      	beq.n	8305c <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8304a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8304c:	f012 0f08 	tst.w	r2, #8
   83050:	d0f9      	beq.n	83046 <pmc_switch_mck_to_pllack+0x46>
   83052:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   83054:	2001      	movs	r0, #1
   83056:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   83058:	2000      	movs	r0, #0
   8305a:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8305c:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8305e:	4770      	bx	lr
   83060:	400e0600 	.word	0x400e0600

00083064 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   83064:	b138      	cbz	r0, 83076 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83066:	4911      	ldr	r1, [pc, #68]	; (830ac <pmc_switch_mainck_to_xtal+0x48>)
   83068:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8306a:	4a11      	ldr	r2, [pc, #68]	; (830b0 <pmc_switch_mainck_to_xtal+0x4c>)
   8306c:	401a      	ands	r2, r3
   8306e:	4b11      	ldr	r3, [pc, #68]	; (830b4 <pmc_switch_mainck_to_xtal+0x50>)
   83070:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83072:	620b      	str	r3, [r1, #32]
   83074:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83076:	4a0d      	ldr	r2, [pc, #52]	; (830ac <pmc_switch_mainck_to_xtal+0x48>)
   83078:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8307a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8307e:	f023 0303 	bic.w	r3, r3, #3
   83082:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83086:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8308a:	0209      	lsls	r1, r1, #8
   8308c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8308e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83090:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83092:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83094:	f013 0f01 	tst.w	r3, #1
   83098:	d0fb      	beq.n	83092 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8309a:	4a04      	ldr	r2, [pc, #16]	; (830ac <pmc_switch_mainck_to_xtal+0x48>)
   8309c:	6a13      	ldr	r3, [r2, #32]
   8309e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   830a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   830a6:	6213      	str	r3, [r2, #32]
   830a8:	4770      	bx	lr
   830aa:	bf00      	nop
   830ac:	400e0600 	.word	0x400e0600
   830b0:	fec8fffc 	.word	0xfec8fffc
   830b4:	01370002 	.word	0x01370002

000830b8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   830b8:	4b02      	ldr	r3, [pc, #8]	; (830c4 <pmc_osc_is_ready_mainck+0xc>)
   830ba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   830bc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   830c0:	4770      	bx	lr
   830c2:	bf00      	nop
   830c4:	400e0600 	.word	0x400e0600

000830c8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   830c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   830cc:	4b01      	ldr	r3, [pc, #4]	; (830d4 <pmc_disable_pllack+0xc>)
   830ce:	629a      	str	r2, [r3, #40]	; 0x28
   830d0:	4770      	bx	lr
   830d2:	bf00      	nop
   830d4:	400e0600 	.word	0x400e0600

000830d8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   830d8:	4b02      	ldr	r3, [pc, #8]	; (830e4 <pmc_is_locked_pllack+0xc>)
   830da:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   830dc:	f000 0002 	and.w	r0, r0, #2
   830e0:	4770      	bx	lr
   830e2:	bf00      	nop
   830e4:	400e0600 	.word	0x400e0600

000830e8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   830e8:	282c      	cmp	r0, #44	; 0x2c
   830ea:	d820      	bhi.n	8312e <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   830ec:	281f      	cmp	r0, #31
   830ee:	d80d      	bhi.n	8310c <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   830f0:	4b12      	ldr	r3, [pc, #72]	; (8313c <pmc_enable_periph_clk+0x54>)
   830f2:	699a      	ldr	r2, [r3, #24]
   830f4:	2301      	movs	r3, #1
   830f6:	4083      	lsls	r3, r0
   830f8:	401a      	ands	r2, r3
   830fa:	4293      	cmp	r3, r2
   830fc:	d019      	beq.n	83132 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   830fe:	2301      	movs	r3, #1
   83100:	fa03 f000 	lsl.w	r0, r3, r0
   83104:	4b0d      	ldr	r3, [pc, #52]	; (8313c <pmc_enable_periph_clk+0x54>)
   83106:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   83108:	2000      	movs	r0, #0
   8310a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8310c:	4b0b      	ldr	r3, [pc, #44]	; (8313c <pmc_enable_periph_clk+0x54>)
   8310e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   83112:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   83114:	2301      	movs	r3, #1
   83116:	4083      	lsls	r3, r0
   83118:	401a      	ands	r2, r3
   8311a:	4293      	cmp	r3, r2
   8311c:	d00b      	beq.n	83136 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   8311e:	2301      	movs	r3, #1
   83120:	fa03 f000 	lsl.w	r0, r3, r0
   83124:	4b05      	ldr	r3, [pc, #20]	; (8313c <pmc_enable_periph_clk+0x54>)
   83126:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   8312a:	2000      	movs	r0, #0
   8312c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8312e:	2001      	movs	r0, #1
   83130:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   83132:	2000      	movs	r0, #0
   83134:	4770      	bx	lr
   83136:	2000      	movs	r0, #0
}
   83138:	4770      	bx	lr
   8313a:	bf00      	nop
   8313c:	400e0600 	.word	0x400e0600

00083140 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   83140:	e7fe      	b.n	83140 <Dummy_Handler>
   83142:	bf00      	nop

00083144 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   83144:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   83146:	4b1e      	ldr	r3, [pc, #120]	; (831c0 <Reset_Handler+0x7c>)
   83148:	4a1e      	ldr	r2, [pc, #120]	; (831c4 <Reset_Handler+0x80>)
   8314a:	429a      	cmp	r2, r3
   8314c:	d003      	beq.n	83156 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8314e:	4b1e      	ldr	r3, [pc, #120]	; (831c8 <Reset_Handler+0x84>)
   83150:	4a1b      	ldr	r2, [pc, #108]	; (831c0 <Reset_Handler+0x7c>)
   83152:	429a      	cmp	r2, r3
   83154:	d304      	bcc.n	83160 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83156:	4b1d      	ldr	r3, [pc, #116]	; (831cc <Reset_Handler+0x88>)
   83158:	4a1d      	ldr	r2, [pc, #116]	; (831d0 <Reset_Handler+0x8c>)
   8315a:	429a      	cmp	r2, r3
   8315c:	d30f      	bcc.n	8317e <Reset_Handler+0x3a>
   8315e:	e01a      	b.n	83196 <Reset_Handler+0x52>
   83160:	4b1c      	ldr	r3, [pc, #112]	; (831d4 <Reset_Handler+0x90>)
   83162:	4c1d      	ldr	r4, [pc, #116]	; (831d8 <Reset_Handler+0x94>)
   83164:	1ae4      	subs	r4, r4, r3
   83166:	f024 0403 	bic.w	r4, r4, #3
   8316a:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8316c:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   8316e:	4814      	ldr	r0, [pc, #80]	; (831c0 <Reset_Handler+0x7c>)
   83170:	4914      	ldr	r1, [pc, #80]	; (831c4 <Reset_Handler+0x80>)
   83172:	585a      	ldr	r2, [r3, r1]
   83174:	501a      	str	r2, [r3, r0]
   83176:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   83178:	42a3      	cmp	r3, r4
   8317a:	d1fa      	bne.n	83172 <Reset_Handler+0x2e>
   8317c:	e7eb      	b.n	83156 <Reset_Handler+0x12>
   8317e:	4b17      	ldr	r3, [pc, #92]	; (831dc <Reset_Handler+0x98>)
   83180:	4917      	ldr	r1, [pc, #92]	; (831e0 <Reset_Handler+0x9c>)
   83182:	1ac9      	subs	r1, r1, r3
   83184:	f021 0103 	bic.w	r1, r1, #3
   83188:	1d1a      	adds	r2, r3, #4
   8318a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   8318c:	2200      	movs	r2, #0
   8318e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83192:	428b      	cmp	r3, r1
   83194:	d1fb      	bne.n	8318e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   83196:	4a13      	ldr	r2, [pc, #76]	; (831e4 <Reset_Handler+0xa0>)
   83198:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   8319c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   831a0:	4911      	ldr	r1, [pc, #68]	; (831e8 <Reset_Handler+0xa4>)
   831a2:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   831a4:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   831a8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   831ac:	d203      	bcs.n	831b6 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   831ae:	688a      	ldr	r2, [r1, #8]
   831b0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   831b4:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   831b6:	4b0d      	ldr	r3, [pc, #52]	; (831ec <Reset_Handler+0xa8>)
   831b8:	4798      	blx	r3

	/* Branch to main function */
	main();
   831ba:	4b0d      	ldr	r3, [pc, #52]	; (831f0 <Reset_Handler+0xac>)
   831bc:	4798      	blx	r3
   831be:	e7fe      	b.n	831be <Reset_Handler+0x7a>
   831c0:	20070000 	.word	0x20070000
   831c4:	0008a788 	.word	0x0008a788
   831c8:	20070a4c 	.word	0x20070a4c
   831cc:	20078e18 	.word	0x20078e18
   831d0:	20070a50 	.word	0x20070a50
   831d4:	20070004 	.word	0x20070004
   831d8:	20070a4f 	.word	0x20070a4f
   831dc:	20070a4c 	.word	0x20070a4c
   831e0:	20078e13 	.word	0x20078e13
   831e4:	00080000 	.word	0x00080000
   831e8:	e000ed00 	.word	0xe000ed00
   831ec:	00084541 	.word	0x00084541
   831f0:	0008337d 	.word	0x0008337d

000831f4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   831f4:	4b3e      	ldr	r3, [pc, #248]	; (832f0 <SystemCoreClockUpdate+0xfc>)
   831f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   831f8:	f003 0303 	and.w	r3, r3, #3
   831fc:	2b03      	cmp	r3, #3
   831fe:	d85f      	bhi.n	832c0 <SystemCoreClockUpdate+0xcc>
   83200:	e8df f003 	tbb	[pc, r3]
   83204:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83208:	4b3a      	ldr	r3, [pc, #232]	; (832f4 <SystemCoreClockUpdate+0x100>)
   8320a:	695b      	ldr	r3, [r3, #20]
   8320c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83210:	bf14      	ite	ne
   83212:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   83216:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8321a:	4b37      	ldr	r3, [pc, #220]	; (832f8 <SystemCoreClockUpdate+0x104>)
   8321c:	601a      	str	r2, [r3, #0]
   8321e:	e04f      	b.n	832c0 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83220:	4b33      	ldr	r3, [pc, #204]	; (832f0 <SystemCoreClockUpdate+0xfc>)
   83222:	6a1b      	ldr	r3, [r3, #32]
   83224:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   83228:	d003      	beq.n	83232 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8322a:	4a34      	ldr	r2, [pc, #208]	; (832fc <SystemCoreClockUpdate+0x108>)
   8322c:	4b32      	ldr	r3, [pc, #200]	; (832f8 <SystemCoreClockUpdate+0x104>)
   8322e:	601a      	str	r2, [r3, #0]
   83230:	e046      	b.n	832c0 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83232:	4a33      	ldr	r2, [pc, #204]	; (83300 <SystemCoreClockUpdate+0x10c>)
   83234:	4b30      	ldr	r3, [pc, #192]	; (832f8 <SystemCoreClockUpdate+0x104>)
   83236:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83238:	4b2d      	ldr	r3, [pc, #180]	; (832f0 <SystemCoreClockUpdate+0xfc>)
   8323a:	6a1b      	ldr	r3, [r3, #32]
   8323c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83240:	2b10      	cmp	r3, #16
   83242:	d002      	beq.n	8324a <SystemCoreClockUpdate+0x56>
   83244:	2b20      	cmp	r3, #32
   83246:	d004      	beq.n	83252 <SystemCoreClockUpdate+0x5e>
   83248:	e03a      	b.n	832c0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8324a:	4a2e      	ldr	r2, [pc, #184]	; (83304 <SystemCoreClockUpdate+0x110>)
   8324c:	4b2a      	ldr	r3, [pc, #168]	; (832f8 <SystemCoreClockUpdate+0x104>)
   8324e:	601a      	str	r2, [r3, #0]
				break;
   83250:	e036      	b.n	832c0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   83252:	4a2a      	ldr	r2, [pc, #168]	; (832fc <SystemCoreClockUpdate+0x108>)
   83254:	4b28      	ldr	r3, [pc, #160]	; (832f8 <SystemCoreClockUpdate+0x104>)
   83256:	601a      	str	r2, [r3, #0]
				break;
   83258:	e032      	b.n	832c0 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8325a:	4b25      	ldr	r3, [pc, #148]	; (832f0 <SystemCoreClockUpdate+0xfc>)
   8325c:	6a1b      	ldr	r3, [r3, #32]
   8325e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   83262:	d003      	beq.n	8326c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83264:	4a25      	ldr	r2, [pc, #148]	; (832fc <SystemCoreClockUpdate+0x108>)
   83266:	4b24      	ldr	r3, [pc, #144]	; (832f8 <SystemCoreClockUpdate+0x104>)
   83268:	601a      	str	r2, [r3, #0]
   8326a:	e012      	b.n	83292 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8326c:	4a24      	ldr	r2, [pc, #144]	; (83300 <SystemCoreClockUpdate+0x10c>)
   8326e:	4b22      	ldr	r3, [pc, #136]	; (832f8 <SystemCoreClockUpdate+0x104>)
   83270:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83272:	4b1f      	ldr	r3, [pc, #124]	; (832f0 <SystemCoreClockUpdate+0xfc>)
   83274:	6a1b      	ldr	r3, [r3, #32]
   83276:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8327a:	2b10      	cmp	r3, #16
   8327c:	d002      	beq.n	83284 <SystemCoreClockUpdate+0x90>
   8327e:	2b20      	cmp	r3, #32
   83280:	d004      	beq.n	8328c <SystemCoreClockUpdate+0x98>
   83282:	e006      	b.n	83292 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83284:	4a1f      	ldr	r2, [pc, #124]	; (83304 <SystemCoreClockUpdate+0x110>)
   83286:	4b1c      	ldr	r3, [pc, #112]	; (832f8 <SystemCoreClockUpdate+0x104>)
   83288:	601a      	str	r2, [r3, #0]
				break;
   8328a:	e002      	b.n	83292 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8328c:	4a1b      	ldr	r2, [pc, #108]	; (832fc <SystemCoreClockUpdate+0x108>)
   8328e:	4b1a      	ldr	r3, [pc, #104]	; (832f8 <SystemCoreClockUpdate+0x104>)
   83290:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   83292:	4b17      	ldr	r3, [pc, #92]	; (832f0 <SystemCoreClockUpdate+0xfc>)
   83294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83296:	f003 0303 	and.w	r3, r3, #3
   8329a:	2b02      	cmp	r3, #2
   8329c:	d10d      	bne.n	832ba <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8329e:	4b14      	ldr	r3, [pc, #80]	; (832f0 <SystemCoreClockUpdate+0xfc>)
   832a0:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   832a2:	6a99      	ldr	r1, [r3, #40]	; 0x28
   832a4:	4b14      	ldr	r3, [pc, #80]	; (832f8 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   832a6:	f3c0 400a 	ubfx	r0, r0, #16, #11
   832aa:	681a      	ldr	r2, [r3, #0]
   832ac:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   832b0:	b2c9      	uxtb	r1, r1
   832b2:	fbb2 f2f1 	udiv	r2, r2, r1
   832b6:	601a      	str	r2, [r3, #0]
   832b8:	e002      	b.n	832c0 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   832ba:	4a13      	ldr	r2, [pc, #76]	; (83308 <SystemCoreClockUpdate+0x114>)
   832bc:	4b0e      	ldr	r3, [pc, #56]	; (832f8 <SystemCoreClockUpdate+0x104>)
   832be:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   832c0:	4b0b      	ldr	r3, [pc, #44]	; (832f0 <SystemCoreClockUpdate+0xfc>)
   832c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   832c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   832c8:	2b70      	cmp	r3, #112	; 0x70
   832ca:	d107      	bne.n	832dc <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   832cc:	4b0a      	ldr	r3, [pc, #40]	; (832f8 <SystemCoreClockUpdate+0x104>)
   832ce:	681a      	ldr	r2, [r3, #0]
   832d0:	490e      	ldr	r1, [pc, #56]	; (8330c <SystemCoreClockUpdate+0x118>)
   832d2:	fba1 0202 	umull	r0, r2, r1, r2
   832d6:	0852      	lsrs	r2, r2, #1
   832d8:	601a      	str	r2, [r3, #0]
   832da:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   832dc:	4b04      	ldr	r3, [pc, #16]	; (832f0 <SystemCoreClockUpdate+0xfc>)
   832de:	6b19      	ldr	r1, [r3, #48]	; 0x30
   832e0:	4b05      	ldr	r3, [pc, #20]	; (832f8 <SystemCoreClockUpdate+0x104>)
   832e2:	f3c1 1102 	ubfx	r1, r1, #4, #3
   832e6:	681a      	ldr	r2, [r3, #0]
   832e8:	40ca      	lsrs	r2, r1
   832ea:	601a      	str	r2, [r3, #0]
   832ec:	4770      	bx	lr
   832ee:	bf00      	nop
   832f0:	400e0600 	.word	0x400e0600
   832f4:	400e1a10 	.word	0x400e1a10
   832f8:	200701a8 	.word	0x200701a8
   832fc:	00b71b00 	.word	0x00b71b00
   83300:	003d0900 	.word	0x003d0900
   83304:	007a1200 	.word	0x007a1200
   83308:	0e4e1c00 	.word	0x0e4e1c00
   8330c:	aaaaaaab 	.word	0xaaaaaaab

00083310 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   83310:	4b09      	ldr	r3, [pc, #36]	; (83338 <_sbrk+0x28>)
   83312:	681b      	ldr	r3, [r3, #0]
   83314:	b913      	cbnz	r3, 8331c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   83316:	4a09      	ldr	r2, [pc, #36]	; (8333c <_sbrk+0x2c>)
   83318:	4b07      	ldr	r3, [pc, #28]	; (83338 <_sbrk+0x28>)
   8331a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8331c:	4b06      	ldr	r3, [pc, #24]	; (83338 <_sbrk+0x28>)
   8331e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   83320:	181a      	adds	r2, r3, r0
   83322:	4907      	ldr	r1, [pc, #28]	; (83340 <_sbrk+0x30>)
   83324:	4291      	cmp	r1, r2
   83326:	db04      	blt.n	83332 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   83328:	4610      	mov	r0, r2
   8332a:	4a03      	ldr	r2, [pc, #12]	; (83338 <_sbrk+0x28>)
   8332c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8332e:	4618      	mov	r0, r3
   83330:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   83332:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   83336:	4770      	bx	lr
   83338:	20078d80 	.word	0x20078d80
   8333c:	2007ae18 	.word	0x2007ae18
   83340:	20087ffc 	.word	0x20087ffc

00083344 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   83344:	f04f 30ff 	mov.w	r0, #4294967295
   83348:	4770      	bx	lr
   8334a:	bf00      	nop

0008334c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8334c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   83350:	604b      	str	r3, [r1, #4]

	return 0;
}
   83352:	2000      	movs	r0, #0
   83354:	4770      	bx	lr
   83356:	bf00      	nop

00083358 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   83358:	2001      	movs	r0, #1
   8335a:	4770      	bx	lr

0008335c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   8335c:	2000      	movs	r0, #0
   8335e:	4770      	bx	lr

00083360 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   83360:	b510      	push	{r4, lr}
   83362:	200b      	movs	r0, #11
   83364:	4c04      	ldr	r4, [pc, #16]	; (83378 <ioport_init+0x18>)
   83366:	47a0      	blx	r4
   83368:	200c      	movs	r0, #12
   8336a:	47a0      	blx	r4
   8336c:	200d      	movs	r0, #13
   8336e:	47a0      	blx	r4
   83370:	200e      	movs	r0, #14
   83372:	47a0      	blx	r4
   83374:	bd10      	pop	{r4, pc}
   83376:	bf00      	nop
   83378:	000830e9 	.word	0x000830e9

0008337c <main>:




int main (void)
{
   8337c:	b510      	push	{r4, lr}
   8337e:	b084      	sub	sp, #16
	board_init();
   83380:	4b1e      	ldr	r3, [pc, #120]	; (833fc <main+0x80>)
   83382:	4798      	blx	r3
	sysclk_init();
   83384:	4b1e      	ldr	r3, [pc, #120]	; (83400 <main+0x84>)
   83386:	4798      	blx	r3
	ioport_init();
   83388:	4c1e      	ldr	r4, [pc, #120]	; (83404 <main+0x88>)
   8338a:	47a0      	blx	r4
	delayInit();
   8338c:	4b1e      	ldr	r3, [pc, #120]	; (83408 <main+0x8c>)
   8338e:	4798      	blx	r3
	ioport_init();
   83390:	47a0      	blx	r4
	configure_console();
   83392:	4b1e      	ldr	r3, [pc, #120]	; (8340c <main+0x90>)
   83394:	4798      	blx	r3
	init_sensor();
   83396:	4b1e      	ldr	r3, [pc, #120]	; (83410 <main+0x94>)
   83398:	4798      	blx	r3
	initMotor();
   8339a:	4b1e      	ldr	r3, [pc, #120]	; (83414 <main+0x98>)
   8339c:	4798      	blx	r3
	//initDrive();
	//initRegulator();
	init_taskFunctions();
   8339e:	4b1e      	ldr	r3, [pc, #120]	; (83418 <main+0x9c>)
   833a0:	4798      	blx	r3
	init_twi_functions();
   833a2:	4b1e      	ldr	r3, [pc, #120]	; (8341c <main+0xa0>)
   833a4:	4798      	blx	r3
	//init_interrupt();
	
	
	printf("\nInit ok");
   833a6:	481e      	ldr	r0, [pc, #120]	; (83420 <main+0xa4>)
   833a8:	4b1e      	ldr	r3, [pc, #120]	; (83424 <main+0xa8>)
   833aa:	4798      	blx	r3
// 		
// 		if (xTaskCreate(task_pdmm_Com, (const signed char * const) "PDMM_COMMUNICATION", TASK_PDMM_COM_STACK_SIZE, NULL, TASK_PDMM_COM_STACK_PRIORITY, NULL) != pdPASS) {
// 			printf("Failed the PDMM Communication Task\r\n");
// 		}
		
		if (xTaskCreate(task_Regulate, (const signed char * const) "REGULATOR", TASK_REGULATE_STACK_SIZE, NULL, TASK_REGULATE_STACK_PRIORITY, NULL) != pdPASS) {
   833ac:	2303      	movs	r3, #3
   833ae:	9300      	str	r3, [sp, #0]
   833b0:	2300      	movs	r3, #0
   833b2:	9301      	str	r3, [sp, #4]
   833b4:	9302      	str	r3, [sp, #8]
   833b6:	9303      	str	r3, [sp, #12]
   833b8:	481b      	ldr	r0, [pc, #108]	; (83428 <main+0xac>)
   833ba:	491c      	ldr	r1, [pc, #112]	; (8342c <main+0xb0>)
   833bc:	f44f 7280 	mov.w	r2, #256	; 0x100
   833c0:	4c1b      	ldr	r4, [pc, #108]	; (83430 <main+0xb4>)
   833c2:	47a0      	blx	r4
   833c4:	2801      	cmp	r0, #1
   833c6:	d002      	beq.n	833ce <main+0x52>
			printf("Failed the Regulator Task\r\n");
   833c8:	481a      	ldr	r0, [pc, #104]	; (83434 <main+0xb8>)
   833ca:	4b16      	ldr	r3, [pc, #88]	; (83424 <main+0xa8>)
   833cc:	4798      	blx	r3
		}
 		
		if (xTaskCreate(task_ultraLjud, (const signed char * const) "ULTRALJUD SENSOR", TASK_ULTRALJUD_STACK_SIZE, NULL, TASK_ULTRALJUD_STACK_PRIORITY, NULL) != pdPASS) {
   833ce:	2305      	movs	r3, #5
   833d0:	9300      	str	r3, [sp, #0]
   833d2:	2300      	movs	r3, #0
   833d4:	9301      	str	r3, [sp, #4]
   833d6:	9302      	str	r3, [sp, #8]
   833d8:	9303      	str	r3, [sp, #12]
   833da:	4817      	ldr	r0, [pc, #92]	; (83438 <main+0xbc>)
   833dc:	4917      	ldr	r1, [pc, #92]	; (8343c <main+0xc0>)
   833de:	f44f 7280 	mov.w	r2, #256	; 0x100
   833e2:	4c13      	ldr	r4, [pc, #76]	; (83430 <main+0xb4>)
   833e4:	47a0      	blx	r4
   833e6:	2801      	cmp	r0, #1
   833e8:	d002      	beq.n	833f0 <main+0x74>
			printf("Failed the UltraDistance Sensor Task\r\n");
   833ea:	4815      	ldr	r0, [pc, #84]	; (83440 <main+0xc4>)
   833ec:	4b0d      	ldr	r3, [pc, #52]	; (83424 <main+0xa8>)
   833ee:	4798      	blx	r3
		}
		
		
		vTaskStartScheduler();
   833f0:	4b14      	ldr	r3, [pc, #80]	; (83444 <main+0xc8>)
   833f2:	4798      	blx	r3
		
		
	//}
}
   833f4:	2000      	movs	r0, #0
   833f6:	b004      	add	sp, #16
   833f8:	bd10      	pop	{r4, pc}
   833fa:	bf00      	nop
   833fc:	00082cb1 	.word	0x00082cb1
   83400:	00082c4d 	.word	0x00082c4d
   83404:	00083361 	.word	0x00083361
   83408:	0008151d 	.word	0x0008151d
   8340c:	00081461 	.word	0x00081461
   83410:	00080f71 	.word	0x00080f71
   83414:	00081595 	.word	0x00081595
   83418:	000806a9 	.word	0x000806a9
   8341c:	00080149 	.word	0x00080149
   83420:	0008a53c 	.word	0x0008a53c
   83424:	00084591 	.word	0x00084591
   83428:	00080fa5 	.word	0x00080fa5
   8342c:	0008a548 	.word	0x0008a548
   83430:	00081f09 	.word	0x00081f09
   83434:	0008a554 	.word	0x0008a554
   83438:	00080c79 	.word	0x00080c79
   8343c:	0008a570 	.word	0x0008a570
   83440:	0008a584 	.word	0x0008a584
   83444:	00082111 	.word	0x00082111

00083448 <acos>:
   83448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8344c:	b08a      	sub	sp, #40	; 0x28
   8344e:	4604      	mov	r4, r0
   83450:	460d      	mov	r5, r1
   83452:	f000 f8a5 	bl	835a0 <__ieee754_acos>
   83456:	f8df 8094 	ldr.w	r8, [pc, #148]	; 834ec <acos+0xa4>
   8345a:	4606      	mov	r6, r0
   8345c:	f998 3000 	ldrsb.w	r3, [r8]
   83460:	460f      	mov	r7, r1
   83462:	3301      	adds	r3, #1
   83464:	d004      	beq.n	83470 <acos+0x28>
   83466:	4620      	mov	r0, r4
   83468:	4629      	mov	r1, r5
   8346a:	f000 fbb9 	bl	83be0 <__fpclassifyd>
   8346e:	b920      	cbnz	r0, 8347a <acos+0x32>
   83470:	4630      	mov	r0, r6
   83472:	4639      	mov	r1, r7
   83474:	b00a      	add	sp, #40	; 0x28
   83476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8347a:	4620      	mov	r0, r4
   8347c:	4629      	mov	r1, r5
   8347e:	f000 fbab 	bl	83bd8 <fabs>
   83482:	2200      	movs	r2, #0
   83484:	4b16      	ldr	r3, [pc, #88]	; (834e0 <acos+0x98>)
   83486:	f001 f823 	bl	844d0 <__aeabi_dcmpgt>
   8348a:	2800      	cmp	r0, #0
   8348c:	d0f0      	beq.n	83470 <acos+0x28>
   8348e:	4915      	ldr	r1, [pc, #84]	; (834e4 <acos+0x9c>)
   83490:	2300      	movs	r3, #0
   83492:	2201      	movs	r2, #1
   83494:	4814      	ldr	r0, [pc, #80]	; (834e8 <acos+0xa0>)
   83496:	9308      	str	r3, [sp, #32]
   83498:	e9cd 4504 	strd	r4, r5, [sp, #16]
   8349c:	e9cd 4502 	strd	r4, r5, [sp, #8]
   834a0:	9101      	str	r1, [sp, #4]
   834a2:	9200      	str	r2, [sp, #0]
   834a4:	f000 fbc6 	bl	83c34 <nan>
   834a8:	f998 3000 	ldrsb.w	r3, [r8]
   834ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
   834b0:	2b02      	cmp	r3, #2
   834b2:	d00a      	beq.n	834ca <acos+0x82>
   834b4:	4668      	mov	r0, sp
   834b6:	f000 fbbb 	bl	83c30 <matherr>
   834ba:	b130      	cbz	r0, 834ca <acos+0x82>
   834bc:	9b08      	ldr	r3, [sp, #32]
   834be:	b94b      	cbnz	r3, 834d4 <acos+0x8c>
   834c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   834c4:	b00a      	add	sp, #40	; 0x28
   834c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   834ca:	f001 f833 	bl	84534 <__errno>
   834ce:	2321      	movs	r3, #33	; 0x21
   834d0:	6003      	str	r3, [r0, #0]
   834d2:	e7f3      	b.n	834bc <acos+0x74>
   834d4:	f001 f82e 	bl	84534 <__errno>
   834d8:	9b08      	ldr	r3, [sp, #32]
   834da:	6003      	str	r3, [r0, #0]
   834dc:	e7f0      	b.n	834c0 <acos+0x78>
   834de:	bf00      	nop
   834e0:	3ff00000 	.word	0x3ff00000
   834e4:	0008a5ac 	.word	0x0008a5ac
   834e8:	0008a4c0 	.word	0x0008a4c0
   834ec:	200701ac 	.word	0x200701ac

000834f0 <sqrt>:
   834f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   834f4:	b08a      	sub	sp, #40	; 0x28
   834f6:	4604      	mov	r4, r0
   834f8:	460d      	mov	r5, r1
   834fa:	f000 faad 	bl	83a58 <__ieee754_sqrt>
   834fe:	f8df a098 	ldr.w	sl, [pc, #152]	; 83598 <sqrt+0xa8>
   83502:	4606      	mov	r6, r0
   83504:	f99a 3000 	ldrsb.w	r3, [sl]
   83508:	460f      	mov	r7, r1
   8350a:	3301      	adds	r3, #1
   8350c:	d00f      	beq.n	8352e <sqrt+0x3e>
   8350e:	4620      	mov	r0, r4
   83510:	4629      	mov	r1, r5
   83512:	f000 fb65 	bl	83be0 <__fpclassifyd>
   83516:	b150      	cbz	r0, 8352e <sqrt+0x3e>
   83518:	f04f 0800 	mov.w	r8, #0
   8351c:	f04f 0900 	mov.w	r9, #0
   83520:	4642      	mov	r2, r8
   83522:	464b      	mov	r3, r9
   83524:	4620      	mov	r0, r4
   83526:	4629      	mov	r1, r5
   83528:	f000 ffb4 	bl	84494 <__aeabi_dcmplt>
   8352c:	b920      	cbnz	r0, 83538 <sqrt+0x48>
   8352e:	4630      	mov	r0, r6
   83530:	4639      	mov	r1, r7
   83532:	b00a      	add	sp, #40	; 0x28
   83534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83538:	4916      	ldr	r1, [pc, #88]	; (83594 <sqrt+0xa4>)
   8353a:	f89a 6000 	ldrb.w	r6, [sl]
   8353e:	2201      	movs	r2, #1
   83540:	2300      	movs	r3, #0
   83542:	e9cd 4504 	strd	r4, r5, [sp, #16]
   83546:	e9cd 4502 	strd	r4, r5, [sp, #8]
   8354a:	9101      	str	r1, [sp, #4]
   8354c:	9200      	str	r2, [sp, #0]
   8354e:	9308      	str	r3, [sp, #32]
   83550:	b966      	cbnz	r6, 8356c <sqrt+0x7c>
   83552:	e9cd 8906 	strd	r8, r9, [sp, #24]
   83556:	4668      	mov	r0, sp
   83558:	f000 fb6a 	bl	83c30 <matherr>
   8355c:	b180      	cbz	r0, 83580 <sqrt+0x90>
   8355e:	9b08      	ldr	r3, [sp, #32]
   83560:	b99b      	cbnz	r3, 8358a <sqrt+0x9a>
   83562:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   83566:	b00a      	add	sp, #40	; 0x28
   83568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8356c:	4640      	mov	r0, r8
   8356e:	4649      	mov	r1, r9
   83570:	4642      	mov	r2, r8
   83572:	464b      	mov	r3, r9
   83574:	f000 fe46 	bl	84204 <__aeabi_ddiv>
   83578:	2e02      	cmp	r6, #2
   8357a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   8357e:	d1ea      	bne.n	83556 <sqrt+0x66>
   83580:	f000 ffd8 	bl	84534 <__errno>
   83584:	2321      	movs	r3, #33	; 0x21
   83586:	6003      	str	r3, [r0, #0]
   83588:	e7e9      	b.n	8355e <sqrt+0x6e>
   8358a:	f000 ffd3 	bl	84534 <__errno>
   8358e:	9b08      	ldr	r3, [sp, #32]
   83590:	6003      	str	r3, [r0, #0]
   83592:	e7e6      	b.n	83562 <sqrt+0x72>
   83594:	0008a5b4 	.word	0x0008a5b4
   83598:	200701ac 	.word	0x200701ac
   8359c:	00000000 	.word	0x00000000

000835a0 <__ieee754_acos>:
   835a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   835a4:	4f80      	ldr	r7, [pc, #512]	; (837a8 <__ieee754_acos+0x208>)
   835a6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   835aa:	42be      	cmp	r6, r7
   835ac:	4604      	mov	r4, r0
   835ae:	460d      	mov	r5, r1
   835b0:	dd0e      	ble.n	835d0 <__ieee754_acos+0x30>
   835b2:	f106 4c40 	add.w	ip, r6, #3221225472	; 0xc0000000
   835b6:	f50c 1c80 	add.w	ip, ip, #1048576	; 0x100000
   835ba:	ea5c 0c00 	orrs.w	ip, ip, r0
   835be:	f040 80bb 	bne.w	83738 <__ieee754_acos+0x198>
   835c2:	2900      	cmp	r1, #0
   835c4:	f340 817c 	ble.w	838c0 <__ieee754_acos+0x320>
   835c8:	2000      	movs	r0, #0
   835ca:	2100      	movs	r1, #0
   835cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   835d0:	4f76      	ldr	r7, [pc, #472]	; (837ac <__ieee754_acos+0x20c>)
   835d2:	42be      	cmp	r6, r7
   835d4:	f340 80a8 	ble.w	83728 <__ieee754_acos+0x188>
   835d8:	2900      	cmp	r1, #0
   835da:	f2c0 8176 	blt.w	838ca <__ieee754_acos+0x32a>
   835de:	4602      	mov	r2, r0
   835e0:	460b      	mov	r3, r1
   835e2:	2000      	movs	r0, #0
   835e4:	4972      	ldr	r1, [pc, #456]	; (837b0 <__ieee754_acos+0x210>)
   835e6:	f000 fb2f 	bl	83c48 <__aeabi_dsub>
   835ea:	2200      	movs	r2, #0
   835ec:	4b71      	ldr	r3, [pc, #452]	; (837b4 <__ieee754_acos+0x214>)
   835ee:	f000 fcdf 	bl	83fb0 <__aeabi_dmul>
   835f2:	4604      	mov	r4, r0
   835f4:	460d      	mov	r5, r1
   835f6:	f000 fa2f 	bl	83a58 <__ieee754_sqrt>
   835fa:	a355      	add	r3, pc, #340	; (adr r3, 83750 <__ieee754_acos+0x1b0>)
   835fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   83600:	4689      	mov	r9, r1
   83602:	4680      	mov	r8, r0
   83604:	4629      	mov	r1, r5
   83606:	4620      	mov	r0, r4
   83608:	f000 fcd2 	bl	83fb0 <__aeabi_dmul>
   8360c:	a352      	add	r3, pc, #328	; (adr r3, 83758 <__ieee754_acos+0x1b8>)
   8360e:	e9d3 2300 	ldrd	r2, r3, [r3]
   83612:	f000 fb1b 	bl	83c4c <__adddf3>
   83616:	4622      	mov	r2, r4
   83618:	462b      	mov	r3, r5
   8361a:	f000 fcc9 	bl	83fb0 <__aeabi_dmul>
   8361e:	a350      	add	r3, pc, #320	; (adr r3, 83760 <__ieee754_acos+0x1c0>)
   83620:	e9d3 2300 	ldrd	r2, r3, [r3]
   83624:	f000 fb10 	bl	83c48 <__aeabi_dsub>
   83628:	4622      	mov	r2, r4
   8362a:	462b      	mov	r3, r5
   8362c:	f000 fcc0 	bl	83fb0 <__aeabi_dmul>
   83630:	a34d      	add	r3, pc, #308	; (adr r3, 83768 <__ieee754_acos+0x1c8>)
   83632:	e9d3 2300 	ldrd	r2, r3, [r3]
   83636:	f000 fb09 	bl	83c4c <__adddf3>
   8363a:	4622      	mov	r2, r4
   8363c:	462b      	mov	r3, r5
   8363e:	f000 fcb7 	bl	83fb0 <__aeabi_dmul>
   83642:	a34b      	add	r3, pc, #300	; (adr r3, 83770 <__ieee754_acos+0x1d0>)
   83644:	e9d3 2300 	ldrd	r2, r3, [r3]
   83648:	f000 fafe 	bl	83c48 <__aeabi_dsub>
   8364c:	4622      	mov	r2, r4
   8364e:	462b      	mov	r3, r5
   83650:	f000 fcae 	bl	83fb0 <__aeabi_dmul>
   83654:	a348      	add	r3, pc, #288	; (adr r3, 83778 <__ieee754_acos+0x1d8>)
   83656:	e9d3 2300 	ldrd	r2, r3, [r3]
   8365a:	f000 faf7 	bl	83c4c <__adddf3>
   8365e:	4622      	mov	r2, r4
   83660:	462b      	mov	r3, r5
   83662:	f000 fca5 	bl	83fb0 <__aeabi_dmul>
   83666:	a346      	add	r3, pc, #280	; (adr r3, 83780 <__ieee754_acos+0x1e0>)
   83668:	e9d3 2300 	ldrd	r2, r3, [r3]
   8366c:	4682      	mov	sl, r0
   8366e:	468b      	mov	fp, r1
   83670:	4620      	mov	r0, r4
   83672:	4629      	mov	r1, r5
   83674:	f000 fc9c 	bl	83fb0 <__aeabi_dmul>
   83678:	a343      	add	r3, pc, #268	; (adr r3, 83788 <__ieee754_acos+0x1e8>)
   8367a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8367e:	f000 fae3 	bl	83c48 <__aeabi_dsub>
   83682:	4622      	mov	r2, r4
   83684:	462b      	mov	r3, r5
   83686:	f000 fc93 	bl	83fb0 <__aeabi_dmul>
   8368a:	a341      	add	r3, pc, #260	; (adr r3, 83790 <__ieee754_acos+0x1f0>)
   8368c:	e9d3 2300 	ldrd	r2, r3, [r3]
   83690:	f000 fadc 	bl	83c4c <__adddf3>
   83694:	4622      	mov	r2, r4
   83696:	462b      	mov	r3, r5
   83698:	f000 fc8a 	bl	83fb0 <__aeabi_dmul>
   8369c:	a33e      	add	r3, pc, #248	; (adr r3, 83798 <__ieee754_acos+0x1f8>)
   8369e:	e9d3 2300 	ldrd	r2, r3, [r3]
   836a2:	f000 fad1 	bl	83c48 <__aeabi_dsub>
   836a6:	4622      	mov	r2, r4
   836a8:	462b      	mov	r3, r5
   836aa:	f000 fc81 	bl	83fb0 <__aeabi_dmul>
   836ae:	2200      	movs	r2, #0
   836b0:	4b3f      	ldr	r3, [pc, #252]	; (837b0 <__ieee754_acos+0x210>)
   836b2:	f000 facb 	bl	83c4c <__adddf3>
   836b6:	4602      	mov	r2, r0
   836b8:	460b      	mov	r3, r1
   836ba:	4650      	mov	r0, sl
   836bc:	4659      	mov	r1, fp
   836be:	f000 fda1 	bl	84204 <__aeabi_ddiv>
   836c2:	4642      	mov	r2, r8
   836c4:	464b      	mov	r3, r9
   836c6:	f000 fc73 	bl	83fb0 <__aeabi_dmul>
   836ca:	2600      	movs	r6, #0
   836cc:	4682      	mov	sl, r0
   836ce:	468b      	mov	fp, r1
   836d0:	4632      	mov	r2, r6
   836d2:	464b      	mov	r3, r9
   836d4:	4630      	mov	r0, r6
   836d6:	4649      	mov	r1, r9
   836d8:	f000 fc6a 	bl	83fb0 <__aeabi_dmul>
   836dc:	4602      	mov	r2, r0
   836de:	460b      	mov	r3, r1
   836e0:	4620      	mov	r0, r4
   836e2:	4629      	mov	r1, r5
   836e4:	f000 fab0 	bl	83c48 <__aeabi_dsub>
   836e8:	4632      	mov	r2, r6
   836ea:	4604      	mov	r4, r0
   836ec:	460d      	mov	r5, r1
   836ee:	464b      	mov	r3, r9
   836f0:	4640      	mov	r0, r8
   836f2:	4649      	mov	r1, r9
   836f4:	f000 faaa 	bl	83c4c <__adddf3>
   836f8:	4602      	mov	r2, r0
   836fa:	460b      	mov	r3, r1
   836fc:	4620      	mov	r0, r4
   836fe:	4629      	mov	r1, r5
   83700:	f000 fd80 	bl	84204 <__aeabi_ddiv>
   83704:	4602      	mov	r2, r0
   83706:	460b      	mov	r3, r1
   83708:	4650      	mov	r0, sl
   8370a:	4659      	mov	r1, fp
   8370c:	f000 fa9e 	bl	83c4c <__adddf3>
   83710:	4602      	mov	r2, r0
   83712:	460b      	mov	r3, r1
   83714:	4630      	mov	r0, r6
   83716:	4649      	mov	r1, r9
   83718:	f000 fa98 	bl	83c4c <__adddf3>
   8371c:	4602      	mov	r2, r0
   8371e:	460b      	mov	r3, r1
   83720:	f000 fa94 	bl	83c4c <__adddf3>
   83724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83728:	4b23      	ldr	r3, [pc, #140]	; (837b8 <__ieee754_acos+0x218>)
   8372a:	429e      	cmp	r6, r3
   8372c:	dc46      	bgt.n	837bc <__ieee754_acos+0x21c>
   8372e:	a11c      	add	r1, pc, #112	; (adr r1, 837a0 <__ieee754_acos+0x200>)
   83730:	e9d1 0100 	ldrd	r0, r1, [r1]
   83734:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83738:	4602      	mov	r2, r0
   8373a:	460b      	mov	r3, r1
   8373c:	f000 fa84 	bl	83c48 <__aeabi_dsub>
   83740:	4602      	mov	r2, r0
   83742:	460b      	mov	r3, r1
   83744:	f000 fd5e 	bl	84204 <__aeabi_ddiv>
   83748:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8374c:	f3af 8000 	nop.w
   83750:	0dfdf709 	.word	0x0dfdf709
   83754:	3f023de1 	.word	0x3f023de1
   83758:	7501b288 	.word	0x7501b288
   8375c:	3f49efe0 	.word	0x3f49efe0
   83760:	b5688f3b 	.word	0xb5688f3b
   83764:	3fa48228 	.word	0x3fa48228
   83768:	0e884455 	.word	0x0e884455
   8376c:	3fc9c155 	.word	0x3fc9c155
   83770:	03eb6f7d 	.word	0x03eb6f7d
   83774:	3fd4d612 	.word	0x3fd4d612
   83778:	55555555 	.word	0x55555555
   8377c:	3fc55555 	.word	0x3fc55555
   83780:	b12e9282 	.word	0xb12e9282
   83784:	3fb3b8c5 	.word	0x3fb3b8c5
   83788:	1b8d0159 	.word	0x1b8d0159
   8378c:	3fe6066c 	.word	0x3fe6066c
   83790:	9c598ac8 	.word	0x9c598ac8
   83794:	40002ae5 	.word	0x40002ae5
   83798:	1c8a2d4b 	.word	0x1c8a2d4b
   8379c:	40033a27 	.word	0x40033a27
   837a0:	54442d18 	.word	0x54442d18
   837a4:	3ff921fb 	.word	0x3ff921fb
   837a8:	3fefffff 	.word	0x3fefffff
   837ac:	3fdfffff 	.word	0x3fdfffff
   837b0:	3ff00000 	.word	0x3ff00000
   837b4:	3fe00000 	.word	0x3fe00000
   837b8:	3c600000 	.word	0x3c600000
   837bc:	4602      	mov	r2, r0
   837be:	460b      	mov	r3, r1
   837c0:	f000 fbf6 	bl	83fb0 <__aeabi_dmul>
   837c4:	a388      	add	r3, pc, #544	; (adr r3, 839e8 <__ieee754_acos+0x448>)
   837c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   837ca:	4606      	mov	r6, r0
   837cc:	460f      	mov	r7, r1
   837ce:	f000 fbef 	bl	83fb0 <__aeabi_dmul>
   837d2:	a387      	add	r3, pc, #540	; (adr r3, 839f0 <__ieee754_acos+0x450>)
   837d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   837d8:	f000 fa38 	bl	83c4c <__adddf3>
   837dc:	4632      	mov	r2, r6
   837de:	463b      	mov	r3, r7
   837e0:	f000 fbe6 	bl	83fb0 <__aeabi_dmul>
   837e4:	a384      	add	r3, pc, #528	; (adr r3, 839f8 <__ieee754_acos+0x458>)
   837e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   837ea:	f000 fa2d 	bl	83c48 <__aeabi_dsub>
   837ee:	4632      	mov	r2, r6
   837f0:	463b      	mov	r3, r7
   837f2:	f000 fbdd 	bl	83fb0 <__aeabi_dmul>
   837f6:	a382      	add	r3, pc, #520	; (adr r3, 83a00 <__ieee754_acos+0x460>)
   837f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   837fc:	f000 fa26 	bl	83c4c <__adddf3>
   83800:	4632      	mov	r2, r6
   83802:	463b      	mov	r3, r7
   83804:	f000 fbd4 	bl	83fb0 <__aeabi_dmul>
   83808:	a37f      	add	r3, pc, #508	; (adr r3, 83a08 <__ieee754_acos+0x468>)
   8380a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8380e:	f000 fa1b 	bl	83c48 <__aeabi_dsub>
   83812:	4632      	mov	r2, r6
   83814:	463b      	mov	r3, r7
   83816:	f000 fbcb 	bl	83fb0 <__aeabi_dmul>
   8381a:	a37d      	add	r3, pc, #500	; (adr r3, 83a10 <__ieee754_acos+0x470>)
   8381c:	e9d3 2300 	ldrd	r2, r3, [r3]
   83820:	f000 fa14 	bl	83c4c <__adddf3>
   83824:	4632      	mov	r2, r6
   83826:	463b      	mov	r3, r7
   83828:	f000 fbc2 	bl	83fb0 <__aeabi_dmul>
   8382c:	a37a      	add	r3, pc, #488	; (adr r3, 83a18 <__ieee754_acos+0x478>)
   8382e:	e9d3 2300 	ldrd	r2, r3, [r3]
   83832:	4680      	mov	r8, r0
   83834:	4689      	mov	r9, r1
   83836:	4630      	mov	r0, r6
   83838:	4639      	mov	r1, r7
   8383a:	f000 fbb9 	bl	83fb0 <__aeabi_dmul>
   8383e:	a378      	add	r3, pc, #480	; (adr r3, 83a20 <__ieee754_acos+0x480>)
   83840:	e9d3 2300 	ldrd	r2, r3, [r3]
   83844:	f000 fa00 	bl	83c48 <__aeabi_dsub>
   83848:	4632      	mov	r2, r6
   8384a:	463b      	mov	r3, r7
   8384c:	f000 fbb0 	bl	83fb0 <__aeabi_dmul>
   83850:	a375      	add	r3, pc, #468	; (adr r3, 83a28 <__ieee754_acos+0x488>)
   83852:	e9d3 2300 	ldrd	r2, r3, [r3]
   83856:	f000 f9f9 	bl	83c4c <__adddf3>
   8385a:	4632      	mov	r2, r6
   8385c:	463b      	mov	r3, r7
   8385e:	f000 fba7 	bl	83fb0 <__aeabi_dmul>
   83862:	a373      	add	r3, pc, #460	; (adr r3, 83a30 <__ieee754_acos+0x490>)
   83864:	e9d3 2300 	ldrd	r2, r3, [r3]
   83868:	f000 f9ee 	bl	83c48 <__aeabi_dsub>
   8386c:	4632      	mov	r2, r6
   8386e:	463b      	mov	r3, r7
   83870:	f000 fb9e 	bl	83fb0 <__aeabi_dmul>
   83874:	2200      	movs	r2, #0
   83876:	4b76      	ldr	r3, [pc, #472]	; (83a50 <__ieee754_acos+0x4b0>)
   83878:	f000 f9e8 	bl	83c4c <__adddf3>
   8387c:	4602      	mov	r2, r0
   8387e:	460b      	mov	r3, r1
   83880:	4640      	mov	r0, r8
   83882:	4649      	mov	r1, r9
   83884:	f000 fcbe 	bl	84204 <__aeabi_ddiv>
   83888:	4602      	mov	r2, r0
   8388a:	460b      	mov	r3, r1
   8388c:	4620      	mov	r0, r4
   8388e:	4629      	mov	r1, r5
   83890:	f000 fb8e 	bl	83fb0 <__aeabi_dmul>
   83894:	4602      	mov	r2, r0
   83896:	460b      	mov	r3, r1
   83898:	a167      	add	r1, pc, #412	; (adr r1, 83a38 <__ieee754_acos+0x498>)
   8389a:	e9d1 0100 	ldrd	r0, r1, [r1]
   8389e:	f000 f9d3 	bl	83c48 <__aeabi_dsub>
   838a2:	4602      	mov	r2, r0
   838a4:	460b      	mov	r3, r1
   838a6:	4620      	mov	r0, r4
   838a8:	4629      	mov	r1, r5
   838aa:	f000 f9cd 	bl	83c48 <__aeabi_dsub>
   838ae:	4602      	mov	r2, r0
   838b0:	460b      	mov	r3, r1
   838b2:	a163      	add	r1, pc, #396	; (adr r1, 83a40 <__ieee754_acos+0x4a0>)
   838b4:	e9d1 0100 	ldrd	r0, r1, [r1]
   838b8:	f000 f9c6 	bl	83c48 <__aeabi_dsub>
   838bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   838c0:	a161      	add	r1, pc, #388	; (adr r1, 83a48 <__ieee754_acos+0x4a8>)
   838c2:	e9d1 0100 	ldrd	r0, r1, [r1]
   838c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   838ca:	2200      	movs	r2, #0
   838cc:	4b60      	ldr	r3, [pc, #384]	; (83a50 <__ieee754_acos+0x4b0>)
   838ce:	f000 f9bd 	bl	83c4c <__adddf3>
   838d2:	2200      	movs	r2, #0
   838d4:	4b5f      	ldr	r3, [pc, #380]	; (83a54 <__ieee754_acos+0x4b4>)
   838d6:	f000 fb6b 	bl	83fb0 <__aeabi_dmul>
   838da:	a343      	add	r3, pc, #268	; (adr r3, 839e8 <__ieee754_acos+0x448>)
   838dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   838e0:	4604      	mov	r4, r0
   838e2:	460d      	mov	r5, r1
   838e4:	f000 fb64 	bl	83fb0 <__aeabi_dmul>
   838e8:	a341      	add	r3, pc, #260	; (adr r3, 839f0 <__ieee754_acos+0x450>)
   838ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   838ee:	f000 f9ad 	bl	83c4c <__adddf3>
   838f2:	4622      	mov	r2, r4
   838f4:	462b      	mov	r3, r5
   838f6:	f000 fb5b 	bl	83fb0 <__aeabi_dmul>
   838fa:	a33f      	add	r3, pc, #252	; (adr r3, 839f8 <__ieee754_acos+0x458>)
   838fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   83900:	f000 f9a2 	bl	83c48 <__aeabi_dsub>
   83904:	4622      	mov	r2, r4
   83906:	462b      	mov	r3, r5
   83908:	f000 fb52 	bl	83fb0 <__aeabi_dmul>
   8390c:	a33c      	add	r3, pc, #240	; (adr r3, 83a00 <__ieee754_acos+0x460>)
   8390e:	e9d3 2300 	ldrd	r2, r3, [r3]
   83912:	f000 f99b 	bl	83c4c <__adddf3>
   83916:	4622      	mov	r2, r4
   83918:	462b      	mov	r3, r5
   8391a:	f000 fb49 	bl	83fb0 <__aeabi_dmul>
   8391e:	a33a      	add	r3, pc, #232	; (adr r3, 83a08 <__ieee754_acos+0x468>)
   83920:	e9d3 2300 	ldrd	r2, r3, [r3]
   83924:	f000 f990 	bl	83c48 <__aeabi_dsub>
   83928:	4622      	mov	r2, r4
   8392a:	462b      	mov	r3, r5
   8392c:	f000 fb40 	bl	83fb0 <__aeabi_dmul>
   83930:	a337      	add	r3, pc, #220	; (adr r3, 83a10 <__ieee754_acos+0x470>)
   83932:	e9d3 2300 	ldrd	r2, r3, [r3]
   83936:	f000 f989 	bl	83c4c <__adddf3>
   8393a:	4622      	mov	r2, r4
   8393c:	462b      	mov	r3, r5
   8393e:	f000 fb37 	bl	83fb0 <__aeabi_dmul>
   83942:	4680      	mov	r8, r0
   83944:	4689      	mov	r9, r1
   83946:	4620      	mov	r0, r4
   83948:	4629      	mov	r1, r5
   8394a:	f000 f885 	bl	83a58 <__ieee754_sqrt>
   8394e:	a332      	add	r3, pc, #200	; (adr r3, 83a18 <__ieee754_acos+0x478>)
   83950:	e9d3 2300 	ldrd	r2, r3, [r3]
   83954:	4606      	mov	r6, r0
   83956:	460f      	mov	r7, r1
   83958:	4620      	mov	r0, r4
   8395a:	4629      	mov	r1, r5
   8395c:	f000 fb28 	bl	83fb0 <__aeabi_dmul>
   83960:	a32f      	add	r3, pc, #188	; (adr r3, 83a20 <__ieee754_acos+0x480>)
   83962:	e9d3 2300 	ldrd	r2, r3, [r3]
   83966:	f000 f96f 	bl	83c48 <__aeabi_dsub>
   8396a:	4622      	mov	r2, r4
   8396c:	462b      	mov	r3, r5
   8396e:	f000 fb1f 	bl	83fb0 <__aeabi_dmul>
   83972:	a32d      	add	r3, pc, #180	; (adr r3, 83a28 <__ieee754_acos+0x488>)
   83974:	e9d3 2300 	ldrd	r2, r3, [r3]
   83978:	f000 f968 	bl	83c4c <__adddf3>
   8397c:	4622      	mov	r2, r4
   8397e:	462b      	mov	r3, r5
   83980:	f000 fb16 	bl	83fb0 <__aeabi_dmul>
   83984:	a32a      	add	r3, pc, #168	; (adr r3, 83a30 <__ieee754_acos+0x490>)
   83986:	e9d3 2300 	ldrd	r2, r3, [r3]
   8398a:	f000 f95d 	bl	83c48 <__aeabi_dsub>
   8398e:	4622      	mov	r2, r4
   83990:	462b      	mov	r3, r5
   83992:	f000 fb0d 	bl	83fb0 <__aeabi_dmul>
   83996:	2200      	movs	r2, #0
   83998:	4b2d      	ldr	r3, [pc, #180]	; (83a50 <__ieee754_acos+0x4b0>)
   8399a:	f000 f957 	bl	83c4c <__adddf3>
   8399e:	4602      	mov	r2, r0
   839a0:	460b      	mov	r3, r1
   839a2:	4640      	mov	r0, r8
   839a4:	4649      	mov	r1, r9
   839a6:	f000 fc2d 	bl	84204 <__aeabi_ddiv>
   839aa:	4632      	mov	r2, r6
   839ac:	463b      	mov	r3, r7
   839ae:	f000 faff 	bl	83fb0 <__aeabi_dmul>
   839b2:	a321      	add	r3, pc, #132	; (adr r3, 83a38 <__ieee754_acos+0x498>)
   839b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   839b8:	f000 f946 	bl	83c48 <__aeabi_dsub>
   839bc:	4602      	mov	r2, r0
   839be:	460b      	mov	r3, r1
   839c0:	4630      	mov	r0, r6
   839c2:	4639      	mov	r1, r7
   839c4:	f000 f942 	bl	83c4c <__adddf3>
   839c8:	4602      	mov	r2, r0
   839ca:	460b      	mov	r3, r1
   839cc:	f000 f93e 	bl	83c4c <__adddf3>
   839d0:	4602      	mov	r2, r0
   839d2:	460b      	mov	r3, r1
   839d4:	a11c      	add	r1, pc, #112	; (adr r1, 83a48 <__ieee754_acos+0x4a8>)
   839d6:	e9d1 0100 	ldrd	r0, r1, [r1]
   839da:	f000 f935 	bl	83c48 <__aeabi_dsub>
   839de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   839e2:	bf00      	nop
   839e4:	f3af 8000 	nop.w
   839e8:	0dfdf709 	.word	0x0dfdf709
   839ec:	3f023de1 	.word	0x3f023de1
   839f0:	7501b288 	.word	0x7501b288
   839f4:	3f49efe0 	.word	0x3f49efe0
   839f8:	b5688f3b 	.word	0xb5688f3b
   839fc:	3fa48228 	.word	0x3fa48228
   83a00:	0e884455 	.word	0x0e884455
   83a04:	3fc9c155 	.word	0x3fc9c155
   83a08:	03eb6f7d 	.word	0x03eb6f7d
   83a0c:	3fd4d612 	.word	0x3fd4d612
   83a10:	55555555 	.word	0x55555555
   83a14:	3fc55555 	.word	0x3fc55555
   83a18:	b12e9282 	.word	0xb12e9282
   83a1c:	3fb3b8c5 	.word	0x3fb3b8c5
   83a20:	1b8d0159 	.word	0x1b8d0159
   83a24:	3fe6066c 	.word	0x3fe6066c
   83a28:	9c598ac8 	.word	0x9c598ac8
   83a2c:	40002ae5 	.word	0x40002ae5
   83a30:	1c8a2d4b 	.word	0x1c8a2d4b
   83a34:	40033a27 	.word	0x40033a27
   83a38:	33145c07 	.word	0x33145c07
   83a3c:	3c91a626 	.word	0x3c91a626
   83a40:	54442d18 	.word	0x54442d18
   83a44:	3ff921fb 	.word	0x3ff921fb
   83a48:	54442d18 	.word	0x54442d18
   83a4c:	400921fb 	.word	0x400921fb
   83a50:	3ff00000 	.word	0x3ff00000
   83a54:	3fe00000 	.word	0x3fe00000

00083a58 <__ieee754_sqrt>:
   83a58:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   83a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83a60:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
   83a64:	f8df 816c 	ldr.w	r8, [pc, #364]	; 83bd4 <__ieee754_sqrt+0x17c>
   83a68:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
   83a6c:	45c4      	cmp	ip, r8
   83a6e:	4606      	mov	r6, r0
   83a70:	460f      	mov	r7, r1
   83a72:	460b      	mov	r3, r1
   83a74:	4602      	mov	r2, r0
   83a76:	f000 808f 	beq.w	83b98 <__ieee754_sqrt+0x140>
   83a7a:	2900      	cmp	r1, #0
   83a7c:	dd6f      	ble.n	83b5e <__ieee754_sqrt+0x106>
   83a7e:	150f      	asrs	r7, r1, #20
   83a80:	d078      	beq.n	83b74 <__ieee754_sqrt+0x11c>
   83a82:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   83a86:	f3c3 0313 	ubfx	r3, r3, #0, #20
   83a8a:	07f9      	lsls	r1, r7, #31
   83a8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83a90:	d460      	bmi.n	83b54 <__ieee754_sqrt+0xfc>
   83a92:	0fd1      	lsrs	r1, r2, #31
   83a94:	f04f 0c00 	mov.w	ip, #0
   83a98:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   83a9c:	107f      	asrs	r7, r7, #1
   83a9e:	0052      	lsls	r2, r2, #1
   83aa0:	4665      	mov	r5, ip
   83aa2:	2016      	movs	r0, #22
   83aa4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   83aa8:	186c      	adds	r4, r5, r1
   83aaa:	429c      	cmp	r4, r3
   83aac:	ea4f 76d2 	mov.w	r6, r2, lsr #31
   83ab0:	ea4f 0242 	mov.w	r2, r2, lsl #1
   83ab4:	dc02      	bgt.n	83abc <__ieee754_sqrt+0x64>
   83ab6:	1b1b      	subs	r3, r3, r4
   83ab8:	1865      	adds	r5, r4, r1
   83aba:	448c      	add	ip, r1
   83abc:	3801      	subs	r0, #1
   83abe:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   83ac2:	ea4f 0151 	mov.w	r1, r1, lsr #1
   83ac6:	d1ef      	bne.n	83aa8 <__ieee754_sqrt+0x50>
   83ac8:	4680      	mov	r8, r0
   83aca:	2620      	movs	r6, #32
   83acc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   83ad0:	e009      	b.n	83ae6 <__ieee754_sqrt+0x8e>
   83ad2:	d023      	beq.n	83b1c <__ieee754_sqrt+0xc4>
   83ad4:	0fd4      	lsrs	r4, r2, #31
   83ad6:	3e01      	subs	r6, #1
   83ad8:	ea4f 0151 	mov.w	r1, r1, lsr #1
   83adc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   83ae0:	ea4f 0242 	mov.w	r2, r2, lsl #1
   83ae4:	d01e      	beq.n	83b24 <__ieee754_sqrt+0xcc>
   83ae6:	42ab      	cmp	r3, r5
   83ae8:	eb01 0408 	add.w	r4, r1, r8
   83aec:	ddf1      	ble.n	83ad2 <__ieee754_sqrt+0x7a>
   83aee:	f004 4900 	and.w	r9, r4, #2147483648	; 0x80000000
   83af2:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
   83af6:	eb04 0801 	add.w	r8, r4, r1
   83afa:	d009      	beq.n	83b10 <__ieee754_sqrt+0xb8>
   83afc:	46a9      	mov	r9, r5
   83afe:	1b5b      	subs	r3, r3, r5
   83b00:	4294      	cmp	r4, r2
   83b02:	bf88      	it	hi
   83b04:	f103 33ff 	addhi.w	r3, r3, #4294967295
   83b08:	1b12      	subs	r2, r2, r4
   83b0a:	4408      	add	r0, r1
   83b0c:	464d      	mov	r5, r9
   83b0e:	e7e1      	b.n	83ad4 <__ieee754_sqrt+0x7c>
   83b10:	f1b8 0f00 	cmp.w	r8, #0
   83b14:	dbf2      	blt.n	83afc <__ieee754_sqrt+0xa4>
   83b16:	f105 0901 	add.w	r9, r5, #1
   83b1a:	e7f0      	b.n	83afe <__ieee754_sqrt+0xa6>
   83b1c:	4294      	cmp	r4, r2
   83b1e:	d9e6      	bls.n	83aee <__ieee754_sqrt+0x96>
   83b20:	461d      	mov	r5, r3
   83b22:	e7d7      	b.n	83ad4 <__ieee754_sqrt+0x7c>
   83b24:	431a      	orrs	r2, r3
   83b26:	d004      	beq.n	83b32 <__ieee754_sqrt+0xda>
   83b28:	1c43      	adds	r3, r0, #1
   83b2a:	d041      	beq.n	83bb0 <__ieee754_sqrt+0x158>
   83b2c:	f000 0301 	and.w	r3, r0, #1
   83b30:	4418      	add	r0, r3
   83b32:	0846      	lsrs	r6, r0, #1
   83b34:	ea4f 036c 	mov.w	r3, ip, asr #1
   83b38:	f01c 0f01 	tst.w	ip, #1
   83b3c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   83b40:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83b44:	bf18      	it	ne
   83b46:	f046 4600 	orrne.w	r6, r6, #2147483648	; 0x80000000
   83b4a:	eb03 5107 	add.w	r1, r3, r7, lsl #20
   83b4e:	4630      	mov	r0, r6
   83b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83b54:	0fd1      	lsrs	r1, r2, #31
   83b56:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   83b5a:	0052      	lsls	r2, r2, #1
   83b5c:	e799      	b.n	83a92 <__ieee754_sqrt+0x3a>
   83b5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   83b62:	4303      	orrs	r3, r0
   83b64:	d022      	beq.n	83bac <__ieee754_sqrt+0x154>
   83b66:	bb51      	cbnz	r1, 83bbe <__ieee754_sqrt+0x166>
   83b68:	460f      	mov	r7, r1
   83b6a:	0ad3      	lsrs	r3, r2, #11
   83b6c:	3f15      	subs	r7, #21
   83b6e:	0552      	lsls	r2, r2, #21
   83b70:	2b00      	cmp	r3, #0
   83b72:	d0fa      	beq.n	83b6a <__ieee754_sqrt+0x112>
   83b74:	f413 1180 	ands.w	r1, r3, #1048576	; 0x100000
   83b78:	d11d      	bne.n	83bb6 <__ieee754_sqrt+0x15e>
   83b7a:	005b      	lsls	r3, r3, #1
   83b7c:	02d8      	lsls	r0, r3, #11
   83b7e:	f101 0101 	add.w	r1, r1, #1
   83b82:	d5fa      	bpl.n	83b7a <__ieee754_sqrt+0x122>
   83b84:	f1c1 0001 	rsb	r0, r1, #1
   83b88:	f1c1 0420 	rsb	r4, r1, #32
   83b8c:	fa22 f404 	lsr.w	r4, r2, r4
   83b90:	4407      	add	r7, r0
   83b92:	408a      	lsls	r2, r1
   83b94:	4323      	orrs	r3, r4
   83b96:	e774      	b.n	83a82 <__ieee754_sqrt+0x2a>
   83b98:	4602      	mov	r2, r0
   83b9a:	460b      	mov	r3, r1
   83b9c:	f000 fa08 	bl	83fb0 <__aeabi_dmul>
   83ba0:	4632      	mov	r2, r6
   83ba2:	463b      	mov	r3, r7
   83ba4:	f000 f852 	bl	83c4c <__adddf3>
   83ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83bb0:	f10c 0c01 	add.w	ip, ip, #1
   83bb4:	e7be      	b.n	83b34 <__ieee754_sqrt+0xdc>
   83bb6:	2420      	movs	r4, #32
   83bb8:	2001      	movs	r0, #1
   83bba:	2100      	movs	r1, #0
   83bbc:	e7e6      	b.n	83b8c <__ieee754_sqrt+0x134>
   83bbe:	4602      	mov	r2, r0
   83bc0:	460b      	mov	r3, r1
   83bc2:	f000 f841 	bl	83c48 <__aeabi_dsub>
   83bc6:	4602      	mov	r2, r0
   83bc8:	460b      	mov	r3, r1
   83bca:	f000 fb1b 	bl	84204 <__aeabi_ddiv>
   83bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83bd2:	bf00      	nop
   83bd4:	7ff00000 	.word	0x7ff00000

00083bd8 <fabs>:
   83bd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83bdc:	4770      	bx	lr
   83bde:	bf00      	nop

00083be0 <__fpclassifyd>:
   83be0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   83be4:	b410      	push	{r4}
   83be6:	d008      	beq.n	83bfa <__fpclassifyd+0x1a>
   83be8:	4a0f      	ldr	r2, [pc, #60]	; (83c28 <__fpclassifyd+0x48>)
   83bea:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
   83bee:	4294      	cmp	r4, r2
   83bf0:	d80a      	bhi.n	83c08 <__fpclassifyd+0x28>
   83bf2:	2004      	movs	r0, #4
   83bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
   83bf8:	4770      	bx	lr
   83bfa:	2800      	cmp	r0, #0
   83bfc:	bf0c      	ite	eq
   83bfe:	2002      	moveq	r0, #2
   83c00:	2003      	movne	r0, #3
   83c02:	f85d 4b04 	ldr.w	r4, [sp], #4
   83c06:	4770      	bx	lr
   83c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   83c0c:	d201      	bcs.n	83c12 <__fpclassifyd+0x32>
   83c0e:	2003      	movs	r0, #3
   83c10:	e7f7      	b.n	83c02 <__fpclassifyd+0x22>
   83c12:	4a06      	ldr	r2, [pc, #24]	; (83c2c <__fpclassifyd+0x4c>)
   83c14:	4293      	cmp	r3, r2
   83c16:	d001      	beq.n	83c1c <__fpclassifyd+0x3c>
   83c18:	2000      	movs	r0, #0
   83c1a:	e7f2      	b.n	83c02 <__fpclassifyd+0x22>
   83c1c:	f1d0 0001 	rsbs	r0, r0, #1
   83c20:	bf38      	it	cc
   83c22:	2000      	movcc	r0, #0
   83c24:	e7ed      	b.n	83c02 <__fpclassifyd+0x22>
   83c26:	bf00      	nop
   83c28:	7fdfffff 	.word	0x7fdfffff
   83c2c:	7ff00000 	.word	0x7ff00000

00083c30 <matherr>:
   83c30:	2000      	movs	r0, #0
   83c32:	4770      	bx	lr

00083c34 <nan>:
   83c34:	2000      	movs	r0, #0
   83c36:	4901      	ldr	r1, [pc, #4]	; (83c3c <nan+0x8>)
   83c38:	4770      	bx	lr
   83c3a:	bf00      	nop
   83c3c:	7ff80000 	.word	0x7ff80000

00083c40 <__aeabi_drsub>:
   83c40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   83c44:	e002      	b.n	83c4c <__adddf3>
   83c46:	bf00      	nop

00083c48 <__aeabi_dsub>:
   83c48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00083c4c <__adddf3>:
   83c4c:	b530      	push	{r4, r5, lr}
   83c4e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   83c52:	ea4f 0543 	mov.w	r5, r3, lsl #1
   83c56:	ea94 0f05 	teq	r4, r5
   83c5a:	bf08      	it	eq
   83c5c:	ea90 0f02 	teqeq	r0, r2
   83c60:	bf1f      	itttt	ne
   83c62:	ea54 0c00 	orrsne.w	ip, r4, r0
   83c66:	ea55 0c02 	orrsne.w	ip, r5, r2
   83c6a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   83c6e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83c72:	f000 80e2 	beq.w	83e3a <__adddf3+0x1ee>
   83c76:	ea4f 5454 	mov.w	r4, r4, lsr #21
   83c7a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   83c7e:	bfb8      	it	lt
   83c80:	426d      	neglt	r5, r5
   83c82:	dd0c      	ble.n	83c9e <__adddf3+0x52>
   83c84:	442c      	add	r4, r5
   83c86:	ea80 0202 	eor.w	r2, r0, r2
   83c8a:	ea81 0303 	eor.w	r3, r1, r3
   83c8e:	ea82 0000 	eor.w	r0, r2, r0
   83c92:	ea83 0101 	eor.w	r1, r3, r1
   83c96:	ea80 0202 	eor.w	r2, r0, r2
   83c9a:	ea81 0303 	eor.w	r3, r1, r3
   83c9e:	2d36      	cmp	r5, #54	; 0x36
   83ca0:	bf88      	it	hi
   83ca2:	bd30      	pophi	{r4, r5, pc}
   83ca4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83ca8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83cac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   83cb0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   83cb4:	d002      	beq.n	83cbc <__adddf3+0x70>
   83cb6:	4240      	negs	r0, r0
   83cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83cbc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   83cc0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83cc4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   83cc8:	d002      	beq.n	83cd0 <__adddf3+0x84>
   83cca:	4252      	negs	r2, r2
   83ccc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83cd0:	ea94 0f05 	teq	r4, r5
   83cd4:	f000 80a7 	beq.w	83e26 <__adddf3+0x1da>
   83cd8:	f1a4 0401 	sub.w	r4, r4, #1
   83cdc:	f1d5 0e20 	rsbs	lr, r5, #32
   83ce0:	db0d      	blt.n	83cfe <__adddf3+0xb2>
   83ce2:	fa02 fc0e 	lsl.w	ip, r2, lr
   83ce6:	fa22 f205 	lsr.w	r2, r2, r5
   83cea:	1880      	adds	r0, r0, r2
   83cec:	f141 0100 	adc.w	r1, r1, #0
   83cf0:	fa03 f20e 	lsl.w	r2, r3, lr
   83cf4:	1880      	adds	r0, r0, r2
   83cf6:	fa43 f305 	asr.w	r3, r3, r5
   83cfa:	4159      	adcs	r1, r3
   83cfc:	e00e      	b.n	83d1c <__adddf3+0xd0>
   83cfe:	f1a5 0520 	sub.w	r5, r5, #32
   83d02:	f10e 0e20 	add.w	lr, lr, #32
   83d06:	2a01      	cmp	r2, #1
   83d08:	fa03 fc0e 	lsl.w	ip, r3, lr
   83d0c:	bf28      	it	cs
   83d0e:	f04c 0c02 	orrcs.w	ip, ip, #2
   83d12:	fa43 f305 	asr.w	r3, r3, r5
   83d16:	18c0      	adds	r0, r0, r3
   83d18:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   83d1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83d20:	d507      	bpl.n	83d32 <__adddf3+0xe6>
   83d22:	f04f 0e00 	mov.w	lr, #0
   83d26:	f1dc 0c00 	rsbs	ip, ip, #0
   83d2a:	eb7e 0000 	sbcs.w	r0, lr, r0
   83d2e:	eb6e 0101 	sbc.w	r1, lr, r1
   83d32:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   83d36:	d31b      	bcc.n	83d70 <__adddf3+0x124>
   83d38:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   83d3c:	d30c      	bcc.n	83d58 <__adddf3+0x10c>
   83d3e:	0849      	lsrs	r1, r1, #1
   83d40:	ea5f 0030 	movs.w	r0, r0, rrx
   83d44:	ea4f 0c3c 	mov.w	ip, ip, rrx
   83d48:	f104 0401 	add.w	r4, r4, #1
   83d4c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   83d50:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   83d54:	f080 809a 	bcs.w	83e8c <__adddf3+0x240>
   83d58:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83d5c:	bf08      	it	eq
   83d5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83d62:	f150 0000 	adcs.w	r0, r0, #0
   83d66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83d6a:	ea41 0105 	orr.w	r1, r1, r5
   83d6e:	bd30      	pop	{r4, r5, pc}
   83d70:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   83d74:	4140      	adcs	r0, r0
   83d76:	eb41 0101 	adc.w	r1, r1, r1
   83d7a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83d7e:	f1a4 0401 	sub.w	r4, r4, #1
   83d82:	d1e9      	bne.n	83d58 <__adddf3+0x10c>
   83d84:	f091 0f00 	teq	r1, #0
   83d88:	bf04      	itt	eq
   83d8a:	4601      	moveq	r1, r0
   83d8c:	2000      	moveq	r0, #0
   83d8e:	fab1 f381 	clz	r3, r1
   83d92:	bf08      	it	eq
   83d94:	3320      	addeq	r3, #32
   83d96:	f1a3 030b 	sub.w	r3, r3, #11
   83d9a:	f1b3 0220 	subs.w	r2, r3, #32
   83d9e:	da0c      	bge.n	83dba <__adddf3+0x16e>
   83da0:	320c      	adds	r2, #12
   83da2:	dd08      	ble.n	83db6 <__adddf3+0x16a>
   83da4:	f102 0c14 	add.w	ip, r2, #20
   83da8:	f1c2 020c 	rsb	r2, r2, #12
   83dac:	fa01 f00c 	lsl.w	r0, r1, ip
   83db0:	fa21 f102 	lsr.w	r1, r1, r2
   83db4:	e00c      	b.n	83dd0 <__adddf3+0x184>
   83db6:	f102 0214 	add.w	r2, r2, #20
   83dba:	bfd8      	it	le
   83dbc:	f1c2 0c20 	rsble	ip, r2, #32
   83dc0:	fa01 f102 	lsl.w	r1, r1, r2
   83dc4:	fa20 fc0c 	lsr.w	ip, r0, ip
   83dc8:	bfdc      	itt	le
   83dca:	ea41 010c 	orrle.w	r1, r1, ip
   83dce:	4090      	lslle	r0, r2
   83dd0:	1ae4      	subs	r4, r4, r3
   83dd2:	bfa2      	ittt	ge
   83dd4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   83dd8:	4329      	orrge	r1, r5
   83dda:	bd30      	popge	{r4, r5, pc}
   83ddc:	ea6f 0404 	mvn.w	r4, r4
   83de0:	3c1f      	subs	r4, #31
   83de2:	da1c      	bge.n	83e1e <__adddf3+0x1d2>
   83de4:	340c      	adds	r4, #12
   83de6:	dc0e      	bgt.n	83e06 <__adddf3+0x1ba>
   83de8:	f104 0414 	add.w	r4, r4, #20
   83dec:	f1c4 0220 	rsb	r2, r4, #32
   83df0:	fa20 f004 	lsr.w	r0, r0, r4
   83df4:	fa01 f302 	lsl.w	r3, r1, r2
   83df8:	ea40 0003 	orr.w	r0, r0, r3
   83dfc:	fa21 f304 	lsr.w	r3, r1, r4
   83e00:	ea45 0103 	orr.w	r1, r5, r3
   83e04:	bd30      	pop	{r4, r5, pc}
   83e06:	f1c4 040c 	rsb	r4, r4, #12
   83e0a:	f1c4 0220 	rsb	r2, r4, #32
   83e0e:	fa20 f002 	lsr.w	r0, r0, r2
   83e12:	fa01 f304 	lsl.w	r3, r1, r4
   83e16:	ea40 0003 	orr.w	r0, r0, r3
   83e1a:	4629      	mov	r1, r5
   83e1c:	bd30      	pop	{r4, r5, pc}
   83e1e:	fa21 f004 	lsr.w	r0, r1, r4
   83e22:	4629      	mov	r1, r5
   83e24:	bd30      	pop	{r4, r5, pc}
   83e26:	f094 0f00 	teq	r4, #0
   83e2a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   83e2e:	bf06      	itte	eq
   83e30:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   83e34:	3401      	addeq	r4, #1
   83e36:	3d01      	subne	r5, #1
   83e38:	e74e      	b.n	83cd8 <__adddf3+0x8c>
   83e3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83e3e:	bf18      	it	ne
   83e40:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83e44:	d029      	beq.n	83e9a <__adddf3+0x24e>
   83e46:	ea94 0f05 	teq	r4, r5
   83e4a:	bf08      	it	eq
   83e4c:	ea90 0f02 	teqeq	r0, r2
   83e50:	d005      	beq.n	83e5e <__adddf3+0x212>
   83e52:	ea54 0c00 	orrs.w	ip, r4, r0
   83e56:	bf04      	itt	eq
   83e58:	4619      	moveq	r1, r3
   83e5a:	4610      	moveq	r0, r2
   83e5c:	bd30      	pop	{r4, r5, pc}
   83e5e:	ea91 0f03 	teq	r1, r3
   83e62:	bf1e      	ittt	ne
   83e64:	2100      	movne	r1, #0
   83e66:	2000      	movne	r0, #0
   83e68:	bd30      	popne	{r4, r5, pc}
   83e6a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   83e6e:	d105      	bne.n	83e7c <__adddf3+0x230>
   83e70:	0040      	lsls	r0, r0, #1
   83e72:	4149      	adcs	r1, r1
   83e74:	bf28      	it	cs
   83e76:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   83e7a:	bd30      	pop	{r4, r5, pc}
   83e7c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   83e80:	bf3c      	itt	cc
   83e82:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   83e86:	bd30      	popcc	{r4, r5, pc}
   83e88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83e8c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   83e90:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83e94:	f04f 0000 	mov.w	r0, #0
   83e98:	bd30      	pop	{r4, r5, pc}
   83e9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83e9e:	bf1a      	itte	ne
   83ea0:	4619      	movne	r1, r3
   83ea2:	4610      	movne	r0, r2
   83ea4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   83ea8:	bf1c      	itt	ne
   83eaa:	460b      	movne	r3, r1
   83eac:	4602      	movne	r2, r0
   83eae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   83eb2:	bf06      	itte	eq
   83eb4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   83eb8:	ea91 0f03 	teqeq	r1, r3
   83ebc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   83ec0:	bd30      	pop	{r4, r5, pc}
   83ec2:	bf00      	nop

00083ec4 <__aeabi_ui2d>:
   83ec4:	f090 0f00 	teq	r0, #0
   83ec8:	bf04      	itt	eq
   83eca:	2100      	moveq	r1, #0
   83ecc:	4770      	bxeq	lr
   83ece:	b530      	push	{r4, r5, lr}
   83ed0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83ed4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83ed8:	f04f 0500 	mov.w	r5, #0
   83edc:	f04f 0100 	mov.w	r1, #0
   83ee0:	e750      	b.n	83d84 <__adddf3+0x138>
   83ee2:	bf00      	nop

00083ee4 <__aeabi_i2d>:
   83ee4:	f090 0f00 	teq	r0, #0
   83ee8:	bf04      	itt	eq
   83eea:	2100      	moveq	r1, #0
   83eec:	4770      	bxeq	lr
   83eee:	b530      	push	{r4, r5, lr}
   83ef0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83ef4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83ef8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   83efc:	bf48      	it	mi
   83efe:	4240      	negmi	r0, r0
   83f00:	f04f 0100 	mov.w	r1, #0
   83f04:	e73e      	b.n	83d84 <__adddf3+0x138>
   83f06:	bf00      	nop

00083f08 <__aeabi_f2d>:
   83f08:	0042      	lsls	r2, r0, #1
   83f0a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   83f0e:	ea4f 0131 	mov.w	r1, r1, rrx
   83f12:	ea4f 7002 	mov.w	r0, r2, lsl #28
   83f16:	bf1f      	itttt	ne
   83f18:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   83f1c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83f20:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   83f24:	4770      	bxne	lr
   83f26:	f092 0f00 	teq	r2, #0
   83f2a:	bf14      	ite	ne
   83f2c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83f30:	4770      	bxeq	lr
   83f32:	b530      	push	{r4, r5, lr}
   83f34:	f44f 7460 	mov.w	r4, #896	; 0x380
   83f38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83f3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83f40:	e720      	b.n	83d84 <__adddf3+0x138>
   83f42:	bf00      	nop

00083f44 <__aeabi_ul2d>:
   83f44:	ea50 0201 	orrs.w	r2, r0, r1
   83f48:	bf08      	it	eq
   83f4a:	4770      	bxeq	lr
   83f4c:	b530      	push	{r4, r5, lr}
   83f4e:	f04f 0500 	mov.w	r5, #0
   83f52:	e00a      	b.n	83f6a <__aeabi_l2d+0x16>

00083f54 <__aeabi_l2d>:
   83f54:	ea50 0201 	orrs.w	r2, r0, r1
   83f58:	bf08      	it	eq
   83f5a:	4770      	bxeq	lr
   83f5c:	b530      	push	{r4, r5, lr}
   83f5e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   83f62:	d502      	bpl.n	83f6a <__aeabi_l2d+0x16>
   83f64:	4240      	negs	r0, r0
   83f66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83f6a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83f6e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83f72:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   83f76:	f43f aedc 	beq.w	83d32 <__adddf3+0xe6>
   83f7a:	f04f 0203 	mov.w	r2, #3
   83f7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83f82:	bf18      	it	ne
   83f84:	3203      	addne	r2, #3
   83f86:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83f8a:	bf18      	it	ne
   83f8c:	3203      	addne	r2, #3
   83f8e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   83f92:	f1c2 0320 	rsb	r3, r2, #32
   83f96:	fa00 fc03 	lsl.w	ip, r0, r3
   83f9a:	fa20 f002 	lsr.w	r0, r0, r2
   83f9e:	fa01 fe03 	lsl.w	lr, r1, r3
   83fa2:	ea40 000e 	orr.w	r0, r0, lr
   83fa6:	fa21 f102 	lsr.w	r1, r1, r2
   83faa:	4414      	add	r4, r2
   83fac:	e6c1      	b.n	83d32 <__adddf3+0xe6>
   83fae:	bf00      	nop

00083fb0 <__aeabi_dmul>:
   83fb0:	b570      	push	{r4, r5, r6, lr}
   83fb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83fb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   83fba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   83fbe:	bf1d      	ittte	ne
   83fc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83fc4:	ea94 0f0c 	teqne	r4, ip
   83fc8:	ea95 0f0c 	teqne	r5, ip
   83fcc:	f000 f8de 	bleq	8418c <__aeabi_dmul+0x1dc>
   83fd0:	442c      	add	r4, r5
   83fd2:	ea81 0603 	eor.w	r6, r1, r3
   83fd6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   83fda:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   83fde:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   83fe2:	bf18      	it	ne
   83fe4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   83fe8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83fec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83ff0:	d038      	beq.n	84064 <__aeabi_dmul+0xb4>
   83ff2:	fba0 ce02 	umull	ip, lr, r0, r2
   83ff6:	f04f 0500 	mov.w	r5, #0
   83ffa:	fbe1 e502 	umlal	lr, r5, r1, r2
   83ffe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   84002:	fbe0 e503 	umlal	lr, r5, r0, r3
   84006:	f04f 0600 	mov.w	r6, #0
   8400a:	fbe1 5603 	umlal	r5, r6, r1, r3
   8400e:	f09c 0f00 	teq	ip, #0
   84012:	bf18      	it	ne
   84014:	f04e 0e01 	orrne.w	lr, lr, #1
   84018:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8401c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   84020:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   84024:	d204      	bcs.n	84030 <__aeabi_dmul+0x80>
   84026:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8402a:	416d      	adcs	r5, r5
   8402c:	eb46 0606 	adc.w	r6, r6, r6
   84030:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   84034:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   84038:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8403c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   84040:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   84044:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   84048:	bf88      	it	hi
   8404a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8404e:	d81e      	bhi.n	8408e <__aeabi_dmul+0xde>
   84050:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   84054:	bf08      	it	eq
   84056:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8405a:	f150 0000 	adcs.w	r0, r0, #0
   8405e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84062:	bd70      	pop	{r4, r5, r6, pc}
   84064:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   84068:	ea46 0101 	orr.w	r1, r6, r1
   8406c:	ea40 0002 	orr.w	r0, r0, r2
   84070:	ea81 0103 	eor.w	r1, r1, r3
   84074:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   84078:	bfc2      	ittt	gt
   8407a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8407e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   84082:	bd70      	popgt	{r4, r5, r6, pc}
   84084:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84088:	f04f 0e00 	mov.w	lr, #0
   8408c:	3c01      	subs	r4, #1
   8408e:	f300 80ab 	bgt.w	841e8 <__aeabi_dmul+0x238>
   84092:	f114 0f36 	cmn.w	r4, #54	; 0x36
   84096:	bfde      	ittt	le
   84098:	2000      	movle	r0, #0
   8409a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8409e:	bd70      	pople	{r4, r5, r6, pc}
   840a0:	f1c4 0400 	rsb	r4, r4, #0
   840a4:	3c20      	subs	r4, #32
   840a6:	da35      	bge.n	84114 <__aeabi_dmul+0x164>
   840a8:	340c      	adds	r4, #12
   840aa:	dc1b      	bgt.n	840e4 <__aeabi_dmul+0x134>
   840ac:	f104 0414 	add.w	r4, r4, #20
   840b0:	f1c4 0520 	rsb	r5, r4, #32
   840b4:	fa00 f305 	lsl.w	r3, r0, r5
   840b8:	fa20 f004 	lsr.w	r0, r0, r4
   840bc:	fa01 f205 	lsl.w	r2, r1, r5
   840c0:	ea40 0002 	orr.w	r0, r0, r2
   840c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   840c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   840cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   840d0:	fa21 f604 	lsr.w	r6, r1, r4
   840d4:	eb42 0106 	adc.w	r1, r2, r6
   840d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   840dc:	bf08      	it	eq
   840de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   840e2:	bd70      	pop	{r4, r5, r6, pc}
   840e4:	f1c4 040c 	rsb	r4, r4, #12
   840e8:	f1c4 0520 	rsb	r5, r4, #32
   840ec:	fa00 f304 	lsl.w	r3, r0, r4
   840f0:	fa20 f005 	lsr.w	r0, r0, r5
   840f4:	fa01 f204 	lsl.w	r2, r1, r4
   840f8:	ea40 0002 	orr.w	r0, r0, r2
   840fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84100:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   84104:	f141 0100 	adc.w	r1, r1, #0
   84108:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8410c:	bf08      	it	eq
   8410e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   84112:	bd70      	pop	{r4, r5, r6, pc}
   84114:	f1c4 0520 	rsb	r5, r4, #32
   84118:	fa00 f205 	lsl.w	r2, r0, r5
   8411c:	ea4e 0e02 	orr.w	lr, lr, r2
   84120:	fa20 f304 	lsr.w	r3, r0, r4
   84124:	fa01 f205 	lsl.w	r2, r1, r5
   84128:	ea43 0302 	orr.w	r3, r3, r2
   8412c:	fa21 f004 	lsr.w	r0, r1, r4
   84130:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84134:	fa21 f204 	lsr.w	r2, r1, r4
   84138:	ea20 0002 	bic.w	r0, r0, r2
   8413c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   84140:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   84144:	bf08      	it	eq
   84146:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8414a:	bd70      	pop	{r4, r5, r6, pc}
   8414c:	f094 0f00 	teq	r4, #0
   84150:	d10f      	bne.n	84172 <__aeabi_dmul+0x1c2>
   84152:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   84156:	0040      	lsls	r0, r0, #1
   84158:	eb41 0101 	adc.w	r1, r1, r1
   8415c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84160:	bf08      	it	eq
   84162:	3c01      	subeq	r4, #1
   84164:	d0f7      	beq.n	84156 <__aeabi_dmul+0x1a6>
   84166:	ea41 0106 	orr.w	r1, r1, r6
   8416a:	f095 0f00 	teq	r5, #0
   8416e:	bf18      	it	ne
   84170:	4770      	bxne	lr
   84172:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   84176:	0052      	lsls	r2, r2, #1
   84178:	eb43 0303 	adc.w	r3, r3, r3
   8417c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   84180:	bf08      	it	eq
   84182:	3d01      	subeq	r5, #1
   84184:	d0f7      	beq.n	84176 <__aeabi_dmul+0x1c6>
   84186:	ea43 0306 	orr.w	r3, r3, r6
   8418a:	4770      	bx	lr
   8418c:	ea94 0f0c 	teq	r4, ip
   84190:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   84194:	bf18      	it	ne
   84196:	ea95 0f0c 	teqne	r5, ip
   8419a:	d00c      	beq.n	841b6 <__aeabi_dmul+0x206>
   8419c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   841a0:	bf18      	it	ne
   841a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   841a6:	d1d1      	bne.n	8414c <__aeabi_dmul+0x19c>
   841a8:	ea81 0103 	eor.w	r1, r1, r3
   841ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   841b0:	f04f 0000 	mov.w	r0, #0
   841b4:	bd70      	pop	{r4, r5, r6, pc}
   841b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   841ba:	bf06      	itte	eq
   841bc:	4610      	moveq	r0, r2
   841be:	4619      	moveq	r1, r3
   841c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   841c4:	d019      	beq.n	841fa <__aeabi_dmul+0x24a>
   841c6:	ea94 0f0c 	teq	r4, ip
   841ca:	d102      	bne.n	841d2 <__aeabi_dmul+0x222>
   841cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   841d0:	d113      	bne.n	841fa <__aeabi_dmul+0x24a>
   841d2:	ea95 0f0c 	teq	r5, ip
   841d6:	d105      	bne.n	841e4 <__aeabi_dmul+0x234>
   841d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   841dc:	bf1c      	itt	ne
   841de:	4610      	movne	r0, r2
   841e0:	4619      	movne	r1, r3
   841e2:	d10a      	bne.n	841fa <__aeabi_dmul+0x24a>
   841e4:	ea81 0103 	eor.w	r1, r1, r3
   841e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   841ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   841f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   841f4:	f04f 0000 	mov.w	r0, #0
   841f8:	bd70      	pop	{r4, r5, r6, pc}
   841fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   841fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   84202:	bd70      	pop	{r4, r5, r6, pc}

00084204 <__aeabi_ddiv>:
   84204:	b570      	push	{r4, r5, r6, lr}
   84206:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8420a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8420e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   84212:	bf1d      	ittte	ne
   84214:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   84218:	ea94 0f0c 	teqne	r4, ip
   8421c:	ea95 0f0c 	teqne	r5, ip
   84220:	f000 f8a7 	bleq	84372 <__aeabi_ddiv+0x16e>
   84224:	eba4 0405 	sub.w	r4, r4, r5
   84228:	ea81 0e03 	eor.w	lr, r1, r3
   8422c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   84230:	ea4f 3101 	mov.w	r1, r1, lsl #12
   84234:	f000 8088 	beq.w	84348 <__aeabi_ddiv+0x144>
   84238:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8423c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   84240:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   84244:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   84248:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8424c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   84250:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   84254:	ea4f 2600 	mov.w	r6, r0, lsl #8
   84258:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8425c:	429d      	cmp	r5, r3
   8425e:	bf08      	it	eq
   84260:	4296      	cmpeq	r6, r2
   84262:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   84266:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8426a:	d202      	bcs.n	84272 <__aeabi_ddiv+0x6e>
   8426c:	085b      	lsrs	r3, r3, #1
   8426e:	ea4f 0232 	mov.w	r2, r2, rrx
   84272:	1ab6      	subs	r6, r6, r2
   84274:	eb65 0503 	sbc.w	r5, r5, r3
   84278:	085b      	lsrs	r3, r3, #1
   8427a:	ea4f 0232 	mov.w	r2, r2, rrx
   8427e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   84282:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   84286:	ebb6 0e02 	subs.w	lr, r6, r2
   8428a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8428e:	bf22      	ittt	cs
   84290:	1ab6      	subcs	r6, r6, r2
   84292:	4675      	movcs	r5, lr
   84294:	ea40 000c 	orrcs.w	r0, r0, ip
   84298:	085b      	lsrs	r3, r3, #1
   8429a:	ea4f 0232 	mov.w	r2, r2, rrx
   8429e:	ebb6 0e02 	subs.w	lr, r6, r2
   842a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   842a6:	bf22      	ittt	cs
   842a8:	1ab6      	subcs	r6, r6, r2
   842aa:	4675      	movcs	r5, lr
   842ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   842b0:	085b      	lsrs	r3, r3, #1
   842b2:	ea4f 0232 	mov.w	r2, r2, rrx
   842b6:	ebb6 0e02 	subs.w	lr, r6, r2
   842ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   842be:	bf22      	ittt	cs
   842c0:	1ab6      	subcs	r6, r6, r2
   842c2:	4675      	movcs	r5, lr
   842c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   842c8:	085b      	lsrs	r3, r3, #1
   842ca:	ea4f 0232 	mov.w	r2, r2, rrx
   842ce:	ebb6 0e02 	subs.w	lr, r6, r2
   842d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   842d6:	bf22      	ittt	cs
   842d8:	1ab6      	subcs	r6, r6, r2
   842da:	4675      	movcs	r5, lr
   842dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   842e0:	ea55 0e06 	orrs.w	lr, r5, r6
   842e4:	d018      	beq.n	84318 <__aeabi_ddiv+0x114>
   842e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   842ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   842ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
   842f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   842f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   842fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   842fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   84302:	d1c0      	bne.n	84286 <__aeabi_ddiv+0x82>
   84304:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84308:	d10b      	bne.n	84322 <__aeabi_ddiv+0x11e>
   8430a:	ea41 0100 	orr.w	r1, r1, r0
   8430e:	f04f 0000 	mov.w	r0, #0
   84312:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   84316:	e7b6      	b.n	84286 <__aeabi_ddiv+0x82>
   84318:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8431c:	bf04      	itt	eq
   8431e:	4301      	orreq	r1, r0
   84320:	2000      	moveq	r0, #0
   84322:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   84326:	bf88      	it	hi
   84328:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8432c:	f63f aeaf 	bhi.w	8408e <__aeabi_dmul+0xde>
   84330:	ebb5 0c03 	subs.w	ip, r5, r3
   84334:	bf04      	itt	eq
   84336:	ebb6 0c02 	subseq.w	ip, r6, r2
   8433a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8433e:	f150 0000 	adcs.w	r0, r0, #0
   84342:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84346:	bd70      	pop	{r4, r5, r6, pc}
   84348:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8434c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   84350:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   84354:	bfc2      	ittt	gt
   84356:	ebd4 050c 	rsbsgt	r5, r4, ip
   8435a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8435e:	bd70      	popgt	{r4, r5, r6, pc}
   84360:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84364:	f04f 0e00 	mov.w	lr, #0
   84368:	3c01      	subs	r4, #1
   8436a:	e690      	b.n	8408e <__aeabi_dmul+0xde>
   8436c:	ea45 0e06 	orr.w	lr, r5, r6
   84370:	e68d      	b.n	8408e <__aeabi_dmul+0xde>
   84372:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   84376:	ea94 0f0c 	teq	r4, ip
   8437a:	bf08      	it	eq
   8437c:	ea95 0f0c 	teqeq	r5, ip
   84380:	f43f af3b 	beq.w	841fa <__aeabi_dmul+0x24a>
   84384:	ea94 0f0c 	teq	r4, ip
   84388:	d10a      	bne.n	843a0 <__aeabi_ddiv+0x19c>
   8438a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8438e:	f47f af34 	bne.w	841fa <__aeabi_dmul+0x24a>
   84392:	ea95 0f0c 	teq	r5, ip
   84396:	f47f af25 	bne.w	841e4 <__aeabi_dmul+0x234>
   8439a:	4610      	mov	r0, r2
   8439c:	4619      	mov	r1, r3
   8439e:	e72c      	b.n	841fa <__aeabi_dmul+0x24a>
   843a0:	ea95 0f0c 	teq	r5, ip
   843a4:	d106      	bne.n	843b4 <__aeabi_ddiv+0x1b0>
   843a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   843aa:	f43f aefd 	beq.w	841a8 <__aeabi_dmul+0x1f8>
   843ae:	4610      	mov	r0, r2
   843b0:	4619      	mov	r1, r3
   843b2:	e722      	b.n	841fa <__aeabi_dmul+0x24a>
   843b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   843b8:	bf18      	it	ne
   843ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   843be:	f47f aec5 	bne.w	8414c <__aeabi_dmul+0x19c>
   843c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   843c6:	f47f af0d 	bne.w	841e4 <__aeabi_dmul+0x234>
   843ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   843ce:	f47f aeeb 	bne.w	841a8 <__aeabi_dmul+0x1f8>
   843d2:	e712      	b.n	841fa <__aeabi_dmul+0x24a>

000843d4 <__gedf2>:
   843d4:	f04f 3cff 	mov.w	ip, #4294967295
   843d8:	e006      	b.n	843e8 <__cmpdf2+0x4>
   843da:	bf00      	nop

000843dc <__ledf2>:
   843dc:	f04f 0c01 	mov.w	ip, #1
   843e0:	e002      	b.n	843e8 <__cmpdf2+0x4>
   843e2:	bf00      	nop

000843e4 <__cmpdf2>:
   843e4:	f04f 0c01 	mov.w	ip, #1
   843e8:	f84d cd04 	str.w	ip, [sp, #-4]!
   843ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   843f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   843f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   843f8:	bf18      	it	ne
   843fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   843fe:	d01b      	beq.n	84438 <__cmpdf2+0x54>
   84400:	b001      	add	sp, #4
   84402:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   84406:	bf0c      	ite	eq
   84408:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8440c:	ea91 0f03 	teqne	r1, r3
   84410:	bf02      	ittt	eq
   84412:	ea90 0f02 	teqeq	r0, r2
   84416:	2000      	moveq	r0, #0
   84418:	4770      	bxeq	lr
   8441a:	f110 0f00 	cmn.w	r0, #0
   8441e:	ea91 0f03 	teq	r1, r3
   84422:	bf58      	it	pl
   84424:	4299      	cmppl	r1, r3
   84426:	bf08      	it	eq
   84428:	4290      	cmpeq	r0, r2
   8442a:	bf2c      	ite	cs
   8442c:	17d8      	asrcs	r0, r3, #31
   8442e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   84432:	f040 0001 	orr.w	r0, r0, #1
   84436:	4770      	bx	lr
   84438:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8443c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   84440:	d102      	bne.n	84448 <__cmpdf2+0x64>
   84442:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   84446:	d107      	bne.n	84458 <__cmpdf2+0x74>
   84448:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8444c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   84450:	d1d6      	bne.n	84400 <__cmpdf2+0x1c>
   84452:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   84456:	d0d3      	beq.n	84400 <__cmpdf2+0x1c>
   84458:	f85d 0b04 	ldr.w	r0, [sp], #4
   8445c:	4770      	bx	lr
   8445e:	bf00      	nop

00084460 <__aeabi_cdrcmple>:
   84460:	4684      	mov	ip, r0
   84462:	4610      	mov	r0, r2
   84464:	4662      	mov	r2, ip
   84466:	468c      	mov	ip, r1
   84468:	4619      	mov	r1, r3
   8446a:	4663      	mov	r3, ip
   8446c:	e000      	b.n	84470 <__aeabi_cdcmpeq>
   8446e:	bf00      	nop

00084470 <__aeabi_cdcmpeq>:
   84470:	b501      	push	{r0, lr}
   84472:	f7ff ffb7 	bl	843e4 <__cmpdf2>
   84476:	2800      	cmp	r0, #0
   84478:	bf48      	it	mi
   8447a:	f110 0f00 	cmnmi.w	r0, #0
   8447e:	bd01      	pop	{r0, pc}

00084480 <__aeabi_dcmpeq>:
   84480:	f84d ed08 	str.w	lr, [sp, #-8]!
   84484:	f7ff fff4 	bl	84470 <__aeabi_cdcmpeq>
   84488:	bf0c      	ite	eq
   8448a:	2001      	moveq	r0, #1
   8448c:	2000      	movne	r0, #0
   8448e:	f85d fb08 	ldr.w	pc, [sp], #8
   84492:	bf00      	nop

00084494 <__aeabi_dcmplt>:
   84494:	f84d ed08 	str.w	lr, [sp, #-8]!
   84498:	f7ff ffea 	bl	84470 <__aeabi_cdcmpeq>
   8449c:	bf34      	ite	cc
   8449e:	2001      	movcc	r0, #1
   844a0:	2000      	movcs	r0, #0
   844a2:	f85d fb08 	ldr.w	pc, [sp], #8
   844a6:	bf00      	nop

000844a8 <__aeabi_dcmple>:
   844a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   844ac:	f7ff ffe0 	bl	84470 <__aeabi_cdcmpeq>
   844b0:	bf94      	ite	ls
   844b2:	2001      	movls	r0, #1
   844b4:	2000      	movhi	r0, #0
   844b6:	f85d fb08 	ldr.w	pc, [sp], #8
   844ba:	bf00      	nop

000844bc <__aeabi_dcmpge>:
   844bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   844c0:	f7ff ffce 	bl	84460 <__aeabi_cdrcmple>
   844c4:	bf94      	ite	ls
   844c6:	2001      	movls	r0, #1
   844c8:	2000      	movhi	r0, #0
   844ca:	f85d fb08 	ldr.w	pc, [sp], #8
   844ce:	bf00      	nop

000844d0 <__aeabi_dcmpgt>:
   844d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   844d4:	f7ff ffc4 	bl	84460 <__aeabi_cdrcmple>
   844d8:	bf34      	ite	cc
   844da:	2001      	movcc	r0, #1
   844dc:	2000      	movcs	r0, #0
   844de:	f85d fb08 	ldr.w	pc, [sp], #8
   844e2:	bf00      	nop

000844e4 <__aeabi_d2iz>:
   844e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   844e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   844ec:	d215      	bcs.n	8451a <__aeabi_d2iz+0x36>
   844ee:	d511      	bpl.n	84514 <__aeabi_d2iz+0x30>
   844f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   844f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   844f8:	d912      	bls.n	84520 <__aeabi_d2iz+0x3c>
   844fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   844fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   84502:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   84506:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8450a:	fa23 f002 	lsr.w	r0, r3, r2
   8450e:	bf18      	it	ne
   84510:	4240      	negne	r0, r0
   84512:	4770      	bx	lr
   84514:	f04f 0000 	mov.w	r0, #0
   84518:	4770      	bx	lr
   8451a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8451e:	d105      	bne.n	8452c <__aeabi_d2iz+0x48>
   84520:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   84524:	bf08      	it	eq
   84526:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8452a:	4770      	bx	lr
   8452c:	f04f 0000 	mov.w	r0, #0
   84530:	4770      	bx	lr
   84532:	bf00      	nop

00084534 <__errno>:
   84534:	4b01      	ldr	r3, [pc, #4]	; (8453c <__errno+0x8>)
   84536:	6818      	ldr	r0, [r3, #0]
   84538:	4770      	bx	lr
   8453a:	bf00      	nop
   8453c:	200705d8 	.word	0x200705d8

00084540 <__libc_init_array>:
   84540:	b570      	push	{r4, r5, r6, lr}
   84542:	4e0f      	ldr	r6, [pc, #60]	; (84580 <__libc_init_array+0x40>)
   84544:	4d0f      	ldr	r5, [pc, #60]	; (84584 <__libc_init_array+0x44>)
   84546:	1b76      	subs	r6, r6, r5
   84548:	10b6      	asrs	r6, r6, #2
   8454a:	d007      	beq.n	8455c <__libc_init_array+0x1c>
   8454c:	3d04      	subs	r5, #4
   8454e:	2400      	movs	r4, #0
   84550:	3401      	adds	r4, #1
   84552:	f855 3f04 	ldr.w	r3, [r5, #4]!
   84556:	4798      	blx	r3
   84558:	42a6      	cmp	r6, r4
   8455a:	d1f9      	bne.n	84550 <__libc_init_array+0x10>
   8455c:	4e0a      	ldr	r6, [pc, #40]	; (84588 <__libc_init_array+0x48>)
   8455e:	4d0b      	ldr	r5, [pc, #44]	; (8458c <__libc_init_array+0x4c>)
   84560:	f006 f8fc 	bl	8a75c <_init>
   84564:	1b76      	subs	r6, r6, r5
   84566:	10b6      	asrs	r6, r6, #2
   84568:	d008      	beq.n	8457c <__libc_init_array+0x3c>
   8456a:	3d04      	subs	r5, #4
   8456c:	2400      	movs	r4, #0
   8456e:	3401      	adds	r4, #1
   84570:	f855 3f04 	ldr.w	r3, [r5, #4]!
   84574:	4798      	blx	r3
   84576:	42a6      	cmp	r6, r4
   84578:	d1f9      	bne.n	8456e <__libc_init_array+0x2e>
   8457a:	bd70      	pop	{r4, r5, r6, pc}
   8457c:	bd70      	pop	{r4, r5, r6, pc}
   8457e:	bf00      	nop
   84580:	0008a768 	.word	0x0008a768
   84584:	0008a768 	.word	0x0008a768
   84588:	0008a770 	.word	0x0008a770
   8458c:	0008a768 	.word	0x0008a768

00084590 <iprintf>:
   84590:	b40f      	push	{r0, r1, r2, r3}
   84592:	b510      	push	{r4, lr}
   84594:	4b07      	ldr	r3, [pc, #28]	; (845b4 <iprintf+0x24>)
   84596:	b082      	sub	sp, #8
   84598:	ac04      	add	r4, sp, #16
   8459a:	f854 2b04 	ldr.w	r2, [r4], #4
   8459e:	6818      	ldr	r0, [r3, #0]
   845a0:	4623      	mov	r3, r4
   845a2:	6881      	ldr	r1, [r0, #8]
   845a4:	9401      	str	r4, [sp, #4]
   845a6:	f001 fc83 	bl	85eb0 <_vfiprintf_r>
   845aa:	b002      	add	sp, #8
   845ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   845b0:	b004      	add	sp, #16
   845b2:	4770      	bx	lr
   845b4:	200705d8 	.word	0x200705d8

000845b8 <memcpy>:
   845b8:	4684      	mov	ip, r0
   845ba:	ea41 0300 	orr.w	r3, r1, r0
   845be:	f013 0303 	ands.w	r3, r3, #3
   845c2:	d149      	bne.n	84658 <memcpy+0xa0>
   845c4:	3a40      	subs	r2, #64	; 0x40
   845c6:	d323      	bcc.n	84610 <memcpy+0x58>
   845c8:	680b      	ldr	r3, [r1, #0]
   845ca:	6003      	str	r3, [r0, #0]
   845cc:	684b      	ldr	r3, [r1, #4]
   845ce:	6043      	str	r3, [r0, #4]
   845d0:	688b      	ldr	r3, [r1, #8]
   845d2:	6083      	str	r3, [r0, #8]
   845d4:	68cb      	ldr	r3, [r1, #12]
   845d6:	60c3      	str	r3, [r0, #12]
   845d8:	690b      	ldr	r3, [r1, #16]
   845da:	6103      	str	r3, [r0, #16]
   845dc:	694b      	ldr	r3, [r1, #20]
   845de:	6143      	str	r3, [r0, #20]
   845e0:	698b      	ldr	r3, [r1, #24]
   845e2:	6183      	str	r3, [r0, #24]
   845e4:	69cb      	ldr	r3, [r1, #28]
   845e6:	61c3      	str	r3, [r0, #28]
   845e8:	6a0b      	ldr	r3, [r1, #32]
   845ea:	6203      	str	r3, [r0, #32]
   845ec:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   845ee:	6243      	str	r3, [r0, #36]	; 0x24
   845f0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   845f2:	6283      	str	r3, [r0, #40]	; 0x28
   845f4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   845f6:	62c3      	str	r3, [r0, #44]	; 0x2c
   845f8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   845fa:	6303      	str	r3, [r0, #48]	; 0x30
   845fc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   845fe:	6343      	str	r3, [r0, #52]	; 0x34
   84600:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   84602:	6383      	str	r3, [r0, #56]	; 0x38
   84604:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   84606:	63c3      	str	r3, [r0, #60]	; 0x3c
   84608:	3040      	adds	r0, #64	; 0x40
   8460a:	3140      	adds	r1, #64	; 0x40
   8460c:	3a40      	subs	r2, #64	; 0x40
   8460e:	d2db      	bcs.n	845c8 <memcpy+0x10>
   84610:	3230      	adds	r2, #48	; 0x30
   84612:	d30b      	bcc.n	8462c <memcpy+0x74>
   84614:	680b      	ldr	r3, [r1, #0]
   84616:	6003      	str	r3, [r0, #0]
   84618:	684b      	ldr	r3, [r1, #4]
   8461a:	6043      	str	r3, [r0, #4]
   8461c:	688b      	ldr	r3, [r1, #8]
   8461e:	6083      	str	r3, [r0, #8]
   84620:	68cb      	ldr	r3, [r1, #12]
   84622:	60c3      	str	r3, [r0, #12]
   84624:	3010      	adds	r0, #16
   84626:	3110      	adds	r1, #16
   84628:	3a10      	subs	r2, #16
   8462a:	d2f3      	bcs.n	84614 <memcpy+0x5c>
   8462c:	320c      	adds	r2, #12
   8462e:	d305      	bcc.n	8463c <memcpy+0x84>
   84630:	f851 3b04 	ldr.w	r3, [r1], #4
   84634:	f840 3b04 	str.w	r3, [r0], #4
   84638:	3a04      	subs	r2, #4
   8463a:	d2f9      	bcs.n	84630 <memcpy+0x78>
   8463c:	3204      	adds	r2, #4
   8463e:	d008      	beq.n	84652 <memcpy+0x9a>
   84640:	07d2      	lsls	r2, r2, #31
   84642:	bf1c      	itt	ne
   84644:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84648:	f800 3b01 	strbne.w	r3, [r0], #1
   8464c:	d301      	bcc.n	84652 <memcpy+0x9a>
   8464e:	880b      	ldrh	r3, [r1, #0]
   84650:	8003      	strh	r3, [r0, #0]
   84652:	4660      	mov	r0, ip
   84654:	4770      	bx	lr
   84656:	bf00      	nop
   84658:	2a08      	cmp	r2, #8
   8465a:	d313      	bcc.n	84684 <memcpy+0xcc>
   8465c:	078b      	lsls	r3, r1, #30
   8465e:	d0b1      	beq.n	845c4 <memcpy+0xc>
   84660:	f010 0303 	ands.w	r3, r0, #3
   84664:	d0ae      	beq.n	845c4 <memcpy+0xc>
   84666:	f1c3 0304 	rsb	r3, r3, #4
   8466a:	1ad2      	subs	r2, r2, r3
   8466c:	07db      	lsls	r3, r3, #31
   8466e:	bf1c      	itt	ne
   84670:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84674:	f800 3b01 	strbne.w	r3, [r0], #1
   84678:	d3a4      	bcc.n	845c4 <memcpy+0xc>
   8467a:	f831 3b02 	ldrh.w	r3, [r1], #2
   8467e:	f820 3b02 	strh.w	r3, [r0], #2
   84682:	e79f      	b.n	845c4 <memcpy+0xc>
   84684:	3a04      	subs	r2, #4
   84686:	d3d9      	bcc.n	8463c <memcpy+0x84>
   84688:	3a01      	subs	r2, #1
   8468a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8468e:	f800 3b01 	strb.w	r3, [r0], #1
   84692:	d2f9      	bcs.n	84688 <memcpy+0xd0>
   84694:	780b      	ldrb	r3, [r1, #0]
   84696:	7003      	strb	r3, [r0, #0]
   84698:	784b      	ldrb	r3, [r1, #1]
   8469a:	7043      	strb	r3, [r0, #1]
   8469c:	788b      	ldrb	r3, [r1, #2]
   8469e:	7083      	strb	r3, [r0, #2]
   846a0:	4660      	mov	r0, ip
   846a2:	4770      	bx	lr

000846a4 <memset>:
   846a4:	b4f0      	push	{r4, r5, r6, r7}
   846a6:	0784      	lsls	r4, r0, #30
   846a8:	d043      	beq.n	84732 <memset+0x8e>
   846aa:	1e54      	subs	r4, r2, #1
   846ac:	2a00      	cmp	r2, #0
   846ae:	d03e      	beq.n	8472e <memset+0x8a>
   846b0:	b2cd      	uxtb	r5, r1
   846b2:	4603      	mov	r3, r0
   846b4:	e003      	b.n	846be <memset+0x1a>
   846b6:	1e62      	subs	r2, r4, #1
   846b8:	2c00      	cmp	r4, #0
   846ba:	d038      	beq.n	8472e <memset+0x8a>
   846bc:	4614      	mov	r4, r2
   846be:	f803 5b01 	strb.w	r5, [r3], #1
   846c2:	079a      	lsls	r2, r3, #30
   846c4:	d1f7      	bne.n	846b6 <memset+0x12>
   846c6:	2c03      	cmp	r4, #3
   846c8:	d92a      	bls.n	84720 <memset+0x7c>
   846ca:	b2cd      	uxtb	r5, r1
   846cc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   846d0:	2c0f      	cmp	r4, #15
   846d2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   846d6:	d915      	bls.n	84704 <memset+0x60>
   846d8:	f1a4 0710 	sub.w	r7, r4, #16
   846dc:	093f      	lsrs	r7, r7, #4
   846de:	f103 0610 	add.w	r6, r3, #16
   846e2:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   846e6:	461a      	mov	r2, r3
   846e8:	6015      	str	r5, [r2, #0]
   846ea:	6055      	str	r5, [r2, #4]
   846ec:	6095      	str	r5, [r2, #8]
   846ee:	60d5      	str	r5, [r2, #12]
   846f0:	3210      	adds	r2, #16
   846f2:	42b2      	cmp	r2, r6
   846f4:	d1f8      	bne.n	846e8 <memset+0x44>
   846f6:	f004 040f 	and.w	r4, r4, #15
   846fa:	3701      	adds	r7, #1
   846fc:	2c03      	cmp	r4, #3
   846fe:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   84702:	d90d      	bls.n	84720 <memset+0x7c>
   84704:	461e      	mov	r6, r3
   84706:	4622      	mov	r2, r4
   84708:	3a04      	subs	r2, #4
   8470a:	2a03      	cmp	r2, #3
   8470c:	f846 5b04 	str.w	r5, [r6], #4
   84710:	d8fa      	bhi.n	84708 <memset+0x64>
   84712:	1f22      	subs	r2, r4, #4
   84714:	f022 0203 	bic.w	r2, r2, #3
   84718:	3204      	adds	r2, #4
   8471a:	4413      	add	r3, r2
   8471c:	f004 0403 	and.w	r4, r4, #3
   84720:	b12c      	cbz	r4, 8472e <memset+0x8a>
   84722:	b2c9      	uxtb	r1, r1
   84724:	441c      	add	r4, r3
   84726:	f803 1b01 	strb.w	r1, [r3], #1
   8472a:	42a3      	cmp	r3, r4
   8472c:	d1fb      	bne.n	84726 <memset+0x82>
   8472e:	bcf0      	pop	{r4, r5, r6, r7}
   84730:	4770      	bx	lr
   84732:	4614      	mov	r4, r2
   84734:	4603      	mov	r3, r0
   84736:	e7c6      	b.n	846c6 <memset+0x22>

00084738 <setbuf>:
   84738:	2900      	cmp	r1, #0
   8473a:	bf0c      	ite	eq
   8473c:	2202      	moveq	r2, #2
   8473e:	2200      	movne	r2, #0
   84740:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84744:	f000 b800 	b.w	84748 <setvbuf>

00084748 <setvbuf>:
   84748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8474c:	4d3c      	ldr	r5, [pc, #240]	; (84840 <setvbuf+0xf8>)
   8474e:	4604      	mov	r4, r0
   84750:	682d      	ldr	r5, [r5, #0]
   84752:	4688      	mov	r8, r1
   84754:	4616      	mov	r6, r2
   84756:	461f      	mov	r7, r3
   84758:	b115      	cbz	r5, 84760 <setvbuf+0x18>
   8475a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8475c:	2b00      	cmp	r3, #0
   8475e:	d04f      	beq.n	84800 <setvbuf+0xb8>
   84760:	2e02      	cmp	r6, #2
   84762:	d830      	bhi.n	847c6 <setvbuf+0x7e>
   84764:	2f00      	cmp	r7, #0
   84766:	db2e      	blt.n	847c6 <setvbuf+0x7e>
   84768:	4628      	mov	r0, r5
   8476a:	4621      	mov	r1, r4
   8476c:	f003 fad4 	bl	87d18 <_fflush_r>
   84770:	89a3      	ldrh	r3, [r4, #12]
   84772:	2200      	movs	r2, #0
   84774:	6062      	str	r2, [r4, #4]
   84776:	61a2      	str	r2, [r4, #24]
   84778:	061a      	lsls	r2, r3, #24
   8477a:	d428      	bmi.n	847ce <setvbuf+0x86>
   8477c:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   84780:	b29b      	uxth	r3, r3
   84782:	2e02      	cmp	r6, #2
   84784:	81a3      	strh	r3, [r4, #12]
   84786:	d02d      	beq.n	847e4 <setvbuf+0x9c>
   84788:	f1b8 0f00 	cmp.w	r8, #0
   8478c:	d03c      	beq.n	84808 <setvbuf+0xc0>
   8478e:	2e01      	cmp	r6, #1
   84790:	d013      	beq.n	847ba <setvbuf+0x72>
   84792:	b29b      	uxth	r3, r3
   84794:	f003 0008 	and.w	r0, r3, #8
   84798:	4a2a      	ldr	r2, [pc, #168]	; (84844 <setvbuf+0xfc>)
   8479a:	b280      	uxth	r0, r0
   8479c:	63ea      	str	r2, [r5, #60]	; 0x3c
   8479e:	f8c4 8000 	str.w	r8, [r4]
   847a2:	f8c4 8010 	str.w	r8, [r4, #16]
   847a6:	6167      	str	r7, [r4, #20]
   847a8:	b178      	cbz	r0, 847ca <setvbuf+0x82>
   847aa:	f013 0f03 	tst.w	r3, #3
   847ae:	bf18      	it	ne
   847b0:	2700      	movne	r7, #0
   847b2:	60a7      	str	r7, [r4, #8]
   847b4:	2000      	movs	r0, #0
   847b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   847ba:	f043 0301 	orr.w	r3, r3, #1
   847be:	427a      	negs	r2, r7
   847c0:	81a3      	strh	r3, [r4, #12]
   847c2:	61a2      	str	r2, [r4, #24]
   847c4:	e7e5      	b.n	84792 <setvbuf+0x4a>
   847c6:	f04f 30ff 	mov.w	r0, #4294967295
   847ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   847ce:	4628      	mov	r0, r5
   847d0:	6921      	ldr	r1, [r4, #16]
   847d2:	f003 fc01 	bl	87fd8 <_free_r>
   847d6:	89a3      	ldrh	r3, [r4, #12]
   847d8:	2e02      	cmp	r6, #2
   847da:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   847de:	b29b      	uxth	r3, r3
   847e0:	81a3      	strh	r3, [r4, #12]
   847e2:	d1d1      	bne.n	84788 <setvbuf+0x40>
   847e4:	2000      	movs	r0, #0
   847e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   847ea:	f043 0302 	orr.w	r3, r3, #2
   847ee:	2500      	movs	r5, #0
   847f0:	2101      	movs	r1, #1
   847f2:	81a3      	strh	r3, [r4, #12]
   847f4:	60a5      	str	r5, [r4, #8]
   847f6:	6022      	str	r2, [r4, #0]
   847f8:	6122      	str	r2, [r4, #16]
   847fa:	6161      	str	r1, [r4, #20]
   847fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84800:	4628      	mov	r0, r5
   84802:	f003 faa5 	bl	87d50 <__sinit>
   84806:	e7ab      	b.n	84760 <setvbuf+0x18>
   84808:	2f00      	cmp	r7, #0
   8480a:	bf08      	it	eq
   8480c:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   84810:	4638      	mov	r0, r7
   84812:	f003 fedb 	bl	885cc <malloc>
   84816:	4680      	mov	r8, r0
   84818:	b128      	cbz	r0, 84826 <setvbuf+0xde>
   8481a:	89a3      	ldrh	r3, [r4, #12]
   8481c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84820:	b29b      	uxth	r3, r3
   84822:	81a3      	strh	r3, [r4, #12]
   84824:	e7b3      	b.n	8478e <setvbuf+0x46>
   84826:	f44f 6080 	mov.w	r0, #1024	; 0x400
   8482a:	f003 fecf 	bl	885cc <malloc>
   8482e:	4680      	mov	r8, r0
   84830:	b918      	cbnz	r0, 8483a <setvbuf+0xf2>
   84832:	89a3      	ldrh	r3, [r4, #12]
   84834:	f04f 30ff 	mov.w	r0, #4294967295
   84838:	e7d5      	b.n	847e6 <setvbuf+0x9e>
   8483a:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8483e:	e7ec      	b.n	8481a <setvbuf+0xd2>
   84840:	200705d8 	.word	0x200705d8
   84844:	00087d45 	.word	0x00087d45

00084848 <sprintf>:
   84848:	b40e      	push	{r1, r2, r3}
   8484a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8484c:	b09c      	sub	sp, #112	; 0x70
   8484e:	ac21      	add	r4, sp, #132	; 0x84
   84850:	f854 2b04 	ldr.w	r2, [r4], #4
   84854:	490e      	ldr	r1, [pc, #56]	; (84890 <sprintf+0x48>)
   84856:	4606      	mov	r6, r0
   84858:	4623      	mov	r3, r4
   8485a:	f44f 7e02 	mov.w	lr, #520	; 0x208
   8485e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   84862:	6808      	ldr	r0, [r1, #0]
   84864:	f64f 77ff 	movw	r7, #65535	; 0xffff
   84868:	a902      	add	r1, sp, #8
   8486a:	9602      	str	r6, [sp, #8]
   8486c:	9606      	str	r6, [sp, #24]
   8486e:	9401      	str	r4, [sp, #4]
   84870:	f8ad e014 	strh.w	lr, [sp, #20]
   84874:	9504      	str	r5, [sp, #16]
   84876:	9507      	str	r5, [sp, #28]
   84878:	f8ad 7016 	strh.w	r7, [sp, #22]
   8487c:	f000 f86c 	bl	84958 <_svfprintf_r>
   84880:	9b02      	ldr	r3, [sp, #8]
   84882:	2200      	movs	r2, #0
   84884:	701a      	strb	r2, [r3, #0]
   84886:	b01c      	add	sp, #112	; 0x70
   84888:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   8488c:	b003      	add	sp, #12
   8488e:	4770      	bx	lr
   84890:	200705d8 	.word	0x200705d8

00084894 <strlen>:
   84894:	f020 0103 	bic.w	r1, r0, #3
   84898:	f010 0003 	ands.w	r0, r0, #3
   8489c:	f1c0 0000 	rsb	r0, r0, #0
   848a0:	f851 3b04 	ldr.w	r3, [r1], #4
   848a4:	f100 0c04 	add.w	ip, r0, #4
   848a8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   848ac:	f06f 0200 	mvn.w	r2, #0
   848b0:	bf1c      	itt	ne
   848b2:	fa22 f20c 	lsrne.w	r2, r2, ip
   848b6:	4313      	orrne	r3, r2
   848b8:	f04f 0c01 	mov.w	ip, #1
   848bc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   848c0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   848c4:	eba3 020c 	sub.w	r2, r3, ip
   848c8:	ea22 0203 	bic.w	r2, r2, r3
   848cc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   848d0:	bf04      	itt	eq
   848d2:	f851 3b04 	ldreq.w	r3, [r1], #4
   848d6:	3004      	addeq	r0, #4
   848d8:	d0f4      	beq.n	848c4 <strlen+0x30>
   848da:	f013 0fff 	tst.w	r3, #255	; 0xff
   848de:	bf1f      	itttt	ne
   848e0:	3001      	addne	r0, #1
   848e2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   848e6:	3001      	addne	r0, #1
   848e8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   848ec:	bf18      	it	ne
   848ee:	3001      	addne	r0, #1
   848f0:	4770      	bx	lr
   848f2:	bf00      	nop

000848f4 <strncpy>:
   848f4:	ea40 0301 	orr.w	r3, r0, r1
   848f8:	079b      	lsls	r3, r3, #30
   848fa:	b470      	push	{r4, r5, r6}
   848fc:	d12a      	bne.n	84954 <strncpy+0x60>
   848fe:	2a03      	cmp	r2, #3
   84900:	d928      	bls.n	84954 <strncpy+0x60>
   84902:	460c      	mov	r4, r1
   84904:	4603      	mov	r3, r0
   84906:	4621      	mov	r1, r4
   84908:	f854 5b04 	ldr.w	r5, [r4], #4
   8490c:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   84910:	ea26 0605 	bic.w	r6, r6, r5
   84914:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   84918:	d105      	bne.n	84926 <strncpy+0x32>
   8491a:	3a04      	subs	r2, #4
   8491c:	2a03      	cmp	r2, #3
   8491e:	f843 5b04 	str.w	r5, [r3], #4
   84922:	4621      	mov	r1, r4
   84924:	d8ef      	bhi.n	84906 <strncpy+0x12>
   84926:	b19a      	cbz	r2, 84950 <strncpy+0x5c>
   84928:	780c      	ldrb	r4, [r1, #0]
   8492a:	3a01      	subs	r2, #1
   8492c:	701c      	strb	r4, [r3, #0]
   8492e:	3301      	adds	r3, #1
   84930:	b13c      	cbz	r4, 84942 <strncpy+0x4e>
   84932:	b16a      	cbz	r2, 84950 <strncpy+0x5c>
   84934:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   84938:	3a01      	subs	r2, #1
   8493a:	f803 4b01 	strb.w	r4, [r3], #1
   8493e:	2c00      	cmp	r4, #0
   84940:	d1f7      	bne.n	84932 <strncpy+0x3e>
   84942:	b12a      	cbz	r2, 84950 <strncpy+0x5c>
   84944:	441a      	add	r2, r3
   84946:	2100      	movs	r1, #0
   84948:	f803 1b01 	strb.w	r1, [r3], #1
   8494c:	4293      	cmp	r3, r2
   8494e:	d1fb      	bne.n	84948 <strncpy+0x54>
   84950:	bc70      	pop	{r4, r5, r6}
   84952:	4770      	bx	lr
   84954:	4603      	mov	r3, r0
   84956:	e7e6      	b.n	84926 <strncpy+0x32>

00084958 <_svfprintf_r>:
   84958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8495c:	b0c9      	sub	sp, #292	; 0x124
   8495e:	9310      	str	r3, [sp, #64]	; 0x40
   84960:	910c      	str	r1, [sp, #48]	; 0x30
   84962:	4691      	mov	r9, r2
   84964:	900d      	str	r0, [sp, #52]	; 0x34
   84966:	f003 fdbd 	bl	884e4 <_localeconv_r>
   8496a:	6800      	ldr	r0, [r0, #0]
   8496c:	9015      	str	r0, [sp, #84]	; 0x54
   8496e:	f7ff ff91 	bl	84894 <strlen>
   84972:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84974:	9018      	str	r0, [sp, #96]	; 0x60
   84976:	89a3      	ldrh	r3, [r4, #12]
   84978:	061e      	lsls	r6, r3, #24
   8497a:	d503      	bpl.n	84984 <_svfprintf_r+0x2c>
   8497c:	6923      	ldr	r3, [r4, #16]
   8497e:	2b00      	cmp	r3, #0
   84980:	f001 8081 	beq.w	85a86 <_svfprintf_r+0x112e>
   84984:	ac38      	add	r4, sp, #224	; 0xe0
   84986:	46a4      	mov	ip, r4
   84988:	9408      	str	r4, [sp, #32]
   8498a:	942b      	str	r4, [sp, #172]	; 0xac
   8498c:	2500      	movs	r5, #0
   8498e:	2400      	movs	r4, #0
   84990:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
   84994:	2300      	movs	r3, #0
   84996:	9311      	str	r3, [sp, #68]	; 0x44
   84998:	932d      	str	r3, [sp, #180]	; 0xb4
   8499a:	932c      	str	r3, [sp, #176]	; 0xb0
   8499c:	931a      	str	r3, [sp, #104]	; 0x68
   8499e:	9319      	str	r3, [sp, #100]	; 0x64
   849a0:	930e      	str	r3, [sp, #56]	; 0x38
   849a2:	4666      	mov	r6, ip
   849a4:	f899 3000 	ldrb.w	r3, [r9]
   849a8:	2b00      	cmp	r3, #0
   849aa:	f000 80f8 	beq.w	84b9e <_svfprintf_r+0x246>
   849ae:	2b25      	cmp	r3, #37	; 0x25
   849b0:	f000 80f5 	beq.w	84b9e <_svfprintf_r+0x246>
   849b4:	f109 0201 	add.w	r2, r9, #1
   849b8:	e001      	b.n	849be <_svfprintf_r+0x66>
   849ba:	2b25      	cmp	r3, #37	; 0x25
   849bc:	d004      	beq.n	849c8 <_svfprintf_r+0x70>
   849be:	7813      	ldrb	r3, [r2, #0]
   849c0:	4614      	mov	r4, r2
   849c2:	3201      	adds	r2, #1
   849c4:	2b00      	cmp	r3, #0
   849c6:	d1f8      	bne.n	849ba <_svfprintf_r+0x62>
   849c8:	ebc9 0504 	rsb	r5, r9, r4
   849cc:	b17d      	cbz	r5, 849ee <_svfprintf_r+0x96>
   849ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   849d0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   849d2:	3301      	adds	r3, #1
   849d4:	442a      	add	r2, r5
   849d6:	2b07      	cmp	r3, #7
   849d8:	f8c6 9000 	str.w	r9, [r6]
   849dc:	6075      	str	r5, [r6, #4]
   849de:	922d      	str	r2, [sp, #180]	; 0xb4
   849e0:	932c      	str	r3, [sp, #176]	; 0xb0
   849e2:	f300 80c2 	bgt.w	84b6a <_svfprintf_r+0x212>
   849e6:	3608      	adds	r6, #8
   849e8:	980e      	ldr	r0, [sp, #56]	; 0x38
   849ea:	4428      	add	r0, r5
   849ec:	900e      	str	r0, [sp, #56]	; 0x38
   849ee:	7823      	ldrb	r3, [r4, #0]
   849f0:	2b00      	cmp	r3, #0
   849f2:	f000 80c2 	beq.w	84b7a <_svfprintf_r+0x222>
   849f6:	2300      	movs	r3, #0
   849f8:	f894 8001 	ldrb.w	r8, [r4, #1]
   849fc:	461a      	mov	r2, r3
   849fe:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
   84a02:	930f      	str	r3, [sp, #60]	; 0x3c
   84a04:	9309      	str	r3, [sp, #36]	; 0x24
   84a06:	f104 0901 	add.w	r9, r4, #1
   84a0a:	f04f 34ff 	mov.w	r4, #4294967295
   84a0e:	940a      	str	r4, [sp, #40]	; 0x28
   84a10:	f109 0901 	add.w	r9, r9, #1
   84a14:	f1a8 0320 	sub.w	r3, r8, #32
   84a18:	2b58      	cmp	r3, #88	; 0x58
   84a1a:	f200 83c5 	bhi.w	851a8 <_svfprintf_r+0x850>
   84a1e:	e8df f013 	tbh	[pc, r3, lsl #1]
   84a22:	026a      	.short	0x026a
   84a24:	03c303c3 	.word	0x03c303c3
   84a28:	03c30271 	.word	0x03c30271
   84a2c:	03c303c3 	.word	0x03c303c3
   84a30:	03c303c3 	.word	0x03c303c3
   84a34:	031403c3 	.word	0x031403c3
   84a38:	03c30366 	.word	0x03c30366
   84a3c:	00c0009d 	.word	0x00c0009d
   84a40:	027803c3 	.word	0x027803c3
   84a44:	027f027f 	.word	0x027f027f
   84a48:	027f027f 	.word	0x027f027f
   84a4c:	027f027f 	.word	0x027f027f
   84a50:	027f027f 	.word	0x027f027f
   84a54:	03c3027f 	.word	0x03c3027f
   84a58:	03c303c3 	.word	0x03c303c3
   84a5c:	03c303c3 	.word	0x03c303c3
   84a60:	03c303c3 	.word	0x03c303c3
   84a64:	03c303c3 	.word	0x03c303c3
   84a68:	029003c3 	.word	0x029003c3
   84a6c:	03c30371 	.word	0x03c30371
   84a70:	03c30371 	.word	0x03c30371
   84a74:	03c303c3 	.word	0x03c303c3
   84a78:	036a03c3 	.word	0x036a03c3
   84a7c:	03c303c3 	.word	0x03c303c3
   84a80:	03c30078 	.word	0x03c30078
   84a84:	03c303c3 	.word	0x03c303c3
   84a88:	03c303c3 	.word	0x03c303c3
   84a8c:	03c30059 	.word	0x03c30059
   84a90:	02af03c3 	.word	0x02af03c3
   84a94:	03c303c3 	.word	0x03c303c3
   84a98:	03c303c3 	.word	0x03c303c3
   84a9c:	03c303c3 	.word	0x03c303c3
   84aa0:	03c303c3 	.word	0x03c303c3
   84aa4:	03c303c3 	.word	0x03c303c3
   84aa8:	03480337 	.word	0x03480337
   84aac:	03710371 	.word	0x03710371
   84ab0:	02ff0371 	.word	0x02ff0371
   84ab4:	03c30348 	.word	0x03c30348
   84ab8:	030803c3 	.word	0x030803c3
   84abc:	02c503c3 	.word	0x02c503c3
   84ac0:	0320007c 	.word	0x0320007c
   84ac4:	03c303a3 	.word	0x03c303a3
   84ac8:	03c302d9 	.word	0x03c302d9
   84acc:	03c3005f 	.word	0x03c3005f
   84ad0:	00de03c3 	.word	0x00de03c3
   84ad4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84ad8:	f04c 0c10 	orr.w	ip, ip, #16
   84adc:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   84ae0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84ae2:	06a2      	lsls	r2, r4, #26
   84ae4:	f100 8354 	bmi.w	85190 <_svfprintf_r+0x838>
   84ae8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84aea:	06e3      	lsls	r3, r4, #27
   84aec:	f100 85bd 	bmi.w	8566a <_svfprintf_r+0xd12>
   84af0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84af4:	f01c 0f40 	tst.w	ip, #64	; 0x40
   84af8:	f000 85b7 	beq.w	8566a <_svfprintf_r+0xd12>
   84afc:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   84b00:	2500      	movs	r5, #0
   84b02:	f8bc 4000 	ldrh.w	r4, [ip]
   84b06:	f10c 0c04 	add.w	ip, ip, #4
   84b0a:	2301      	movs	r3, #1
   84b0c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   84b10:	e08c      	b.n	84c2c <_svfprintf_r+0x2d4>
   84b12:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84b14:	f045 0510 	orr.w	r5, r5, #16
   84b18:	9509      	str	r5, [sp, #36]	; 0x24
   84b1a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84b1e:	f01c 0320 	ands.w	r3, ip, #32
   84b22:	f040 832a 	bne.w	8517a <_svfprintf_r+0x822>
   84b26:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84b2a:	f01c 0210 	ands.w	r2, ip, #16
   84b2e:	f040 85a4 	bne.w	8567a <_svfprintf_r+0xd22>
   84b32:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84b36:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
   84b3a:	f000 859e 	beq.w	8567a <_svfprintf_r+0xd22>
   84b3e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   84b42:	4613      	mov	r3, r2
   84b44:	f8bc 4000 	ldrh.w	r4, [ip]
   84b48:	f10c 0c04 	add.w	ip, ip, #4
   84b4c:	2500      	movs	r5, #0
   84b4e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   84b52:	e06b      	b.n	84c2c <_svfprintf_r+0x2d4>
   84b54:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84b56:	9310      	str	r3, [sp, #64]	; 0x40
   84b58:	4264      	negs	r4, r4
   84b5a:	940f      	str	r4, [sp, #60]	; 0x3c
   84b5c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84b5e:	f045 0504 	orr.w	r5, r5, #4
   84b62:	9509      	str	r5, [sp, #36]	; 0x24
   84b64:	f899 8000 	ldrb.w	r8, [r9]
   84b68:	e752      	b.n	84a10 <_svfprintf_r+0xb8>
   84b6a:	980d      	ldr	r0, [sp, #52]	; 0x34
   84b6c:	990c      	ldr	r1, [sp, #48]	; 0x30
   84b6e:	aa2b      	add	r2, sp, #172	; 0xac
   84b70:	f004 fdc2 	bl	896f8 <__ssprint_r>
   84b74:	b940      	cbnz	r0, 84b88 <_svfprintf_r+0x230>
   84b76:	ae38      	add	r6, sp, #224	; 0xe0
   84b78:	e736      	b.n	849e8 <_svfprintf_r+0x90>
   84b7a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   84b7c:	b123      	cbz	r3, 84b88 <_svfprintf_r+0x230>
   84b7e:	980d      	ldr	r0, [sp, #52]	; 0x34
   84b80:	990c      	ldr	r1, [sp, #48]	; 0x30
   84b82:	aa2b      	add	r2, sp, #172	; 0xac
   84b84:	f004 fdb8 	bl	896f8 <__ssprint_r>
   84b88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84b8a:	980e      	ldr	r0, [sp, #56]	; 0x38
   84b8c:	89a3      	ldrh	r3, [r4, #12]
   84b8e:	f013 0f40 	tst.w	r3, #64	; 0x40
   84b92:	bf18      	it	ne
   84b94:	f04f 30ff 	movne.w	r0, #4294967295
   84b98:	b049      	add	sp, #292	; 0x124
   84b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84b9e:	464c      	mov	r4, r9
   84ba0:	e725      	b.n	849ee <_svfprintf_r+0x96>
   84ba2:	f899 8000 	ldrb.w	r8, [r9]
   84ba6:	f109 0001 	add.w	r0, r9, #1
   84baa:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
   84bae:	f001 810c 	beq.w	85dca <_svfprintf_r+0x1472>
   84bb2:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   84bb6:	2b09      	cmp	r3, #9
   84bb8:	bf98      	it	ls
   84bba:	2100      	movls	r1, #0
   84bbc:	f201 806b 	bhi.w	85c96 <_svfprintf_r+0x133e>
   84bc0:	f810 8b01 	ldrb.w	r8, [r0], #1
   84bc4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84bc8:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   84bcc:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   84bd0:	2b09      	cmp	r3, #9
   84bd2:	d9f5      	bls.n	84bc0 <_svfprintf_r+0x268>
   84bd4:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   84bd8:	910a      	str	r1, [sp, #40]	; 0x28
   84bda:	4681      	mov	r9, r0
   84bdc:	e71a      	b.n	84a14 <_svfprintf_r+0xbc>
   84bde:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84be0:	4ca1      	ldr	r4, [pc, #644]	; (84e68 <_svfprintf_r+0x510>)
   84be2:	06af      	lsls	r7, r5, #26
   84be4:	941a      	str	r4, [sp, #104]	; 0x68
   84be6:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   84bea:	f140 81d1 	bpl.w	84f90 <_svfprintf_r+0x638>
   84bee:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   84bf2:	f10c 0307 	add.w	r3, ip, #7
   84bf6:	f023 0307 	bic.w	r3, r3, #7
   84bfa:	f103 0408 	add.w	r4, r3, #8
   84bfe:	9410      	str	r4, [sp, #64]	; 0x40
   84c00:	e9d3 4500 	ldrd	r4, r5, [r3]
   84c04:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84c08:	f01c 0f01 	tst.w	ip, #1
   84c0c:	f000 8462 	beq.w	854d4 <_svfprintf_r+0xb7c>
   84c10:	ea54 0005 	orrs.w	r0, r4, r5
   84c14:	f000 845e 	beq.w	854d4 <_svfprintf_r+0xb7c>
   84c18:	2330      	movs	r3, #48	; 0x30
   84c1a:	f04c 0c02 	orr.w	ip, ip, #2
   84c1e:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
   84c22:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
   84c26:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   84c2a:	2302      	movs	r3, #2
   84c2c:	f04f 0a00 	mov.w	sl, #0
   84c30:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   84c34:	990a      	ldr	r1, [sp, #40]	; 0x28
   84c36:	2900      	cmp	r1, #0
   84c38:	db05      	blt.n	84c46 <_svfprintf_r+0x2ee>
   84c3a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84c3e:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
   84c42:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   84c46:	ea54 0005 	orrs.w	r0, r4, r5
   84c4a:	f040 82c5 	bne.w	851d8 <_svfprintf_r+0x880>
   84c4e:	990a      	ldr	r1, [sp, #40]	; 0x28
   84c50:	2900      	cmp	r1, #0
   84c52:	f040 82c1 	bne.w	851d8 <_svfprintf_r+0x880>
   84c56:	2b00      	cmp	r3, #0
   84c58:	f040 8438 	bne.w	854cc <_svfprintf_r+0xb74>
   84c5c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84c60:	f01c 0f01 	tst.w	ip, #1
   84c64:	f000 8432 	beq.w	854cc <_svfprintf_r+0xb74>
   84c68:	af48      	add	r7, sp, #288	; 0x120
   84c6a:	2330      	movs	r3, #48	; 0x30
   84c6c:	9d08      	ldr	r5, [sp, #32]
   84c6e:	f807 3d41 	strb.w	r3, [r7, #-65]!
   84c72:	1bec      	subs	r4, r5, r7
   84c74:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   84c78:	2500      	movs	r5, #0
   84c7a:	4564      	cmp	r4, ip
   84c7c:	bfa8      	it	ge
   84c7e:	46a4      	movge	ip, r4
   84c80:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   84c84:	9514      	str	r5, [sp, #80]	; 0x50
   84c86:	f1ba 0f00 	cmp.w	sl, #0
   84c8a:	d002      	beq.n	84c92 <_svfprintf_r+0x33a>
   84c8c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84c8e:	3501      	adds	r5, #1
   84c90:	950b      	str	r5, [sp, #44]	; 0x2c
   84c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84c94:	f013 0302 	ands.w	r3, r3, #2
   84c98:	9312      	str	r3, [sp, #72]	; 0x48
   84c9a:	d002      	beq.n	84ca2 <_svfprintf_r+0x34a>
   84c9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84c9e:	3502      	adds	r5, #2
   84ca0:	950b      	str	r5, [sp, #44]	; 0x2c
   84ca2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84ca6:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
   84caa:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
   84cae:	f040 8290 	bne.w	851d2 <_svfprintf_r+0x87a>
   84cb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   84cb4:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
   84cb8:	ebcc 0b05 	rsb	fp, ip, r5
   84cbc:	f1bb 0f00 	cmp.w	fp, #0
   84cc0:	f340 8287 	ble.w	851d2 <_svfprintf_r+0x87a>
   84cc4:	f1bb 0f10 	cmp.w	fp, #16
   84cc8:	992d      	ldr	r1, [sp, #180]	; 0xb4
   84cca:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   84ccc:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 84e70 <_svfprintf_r+0x518>
   84cd0:	dd2c      	ble.n	84d2c <_svfprintf_r+0x3d4>
   84cd2:	971b      	str	r7, [sp, #108]	; 0x6c
   84cd4:	4630      	mov	r0, r6
   84cd6:	4657      	mov	r7, sl
   84cd8:	2510      	movs	r5, #16
   84cda:	46ca      	mov	sl, r9
   84cdc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   84cde:	46a1      	mov	r9, r4
   84ce0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   84ce2:	e006      	b.n	84cf2 <_svfprintf_r+0x39a>
   84ce4:	f1ab 0b10 	sub.w	fp, fp, #16
   84ce8:	f1bb 0f10 	cmp.w	fp, #16
   84cec:	f100 0008 	add.w	r0, r0, #8
   84cf0:	dd17      	ble.n	84d22 <_svfprintf_r+0x3ca>
   84cf2:	3201      	adds	r2, #1
   84cf4:	3110      	adds	r1, #16
   84cf6:	2a07      	cmp	r2, #7
   84cf8:	912d      	str	r1, [sp, #180]	; 0xb4
   84cfa:	922c      	str	r2, [sp, #176]	; 0xb0
   84cfc:	6007      	str	r7, [r0, #0]
   84cfe:	6045      	str	r5, [r0, #4]
   84d00:	ddf0      	ble.n	84ce4 <_svfprintf_r+0x38c>
   84d02:	4620      	mov	r0, r4
   84d04:	4631      	mov	r1, r6
   84d06:	aa2b      	add	r2, sp, #172	; 0xac
   84d08:	f004 fcf6 	bl	896f8 <__ssprint_r>
   84d0c:	2800      	cmp	r0, #0
   84d0e:	f47f af3b 	bne.w	84b88 <_svfprintf_r+0x230>
   84d12:	f1ab 0b10 	sub.w	fp, fp, #16
   84d16:	f1bb 0f10 	cmp.w	fp, #16
   84d1a:	992d      	ldr	r1, [sp, #180]	; 0xb4
   84d1c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   84d1e:	a838      	add	r0, sp, #224	; 0xe0
   84d20:	dce7      	bgt.n	84cf2 <_svfprintf_r+0x39a>
   84d22:	464c      	mov	r4, r9
   84d24:	46d1      	mov	r9, sl
   84d26:	46ba      	mov	sl, r7
   84d28:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
   84d2a:	4606      	mov	r6, r0
   84d2c:	3201      	adds	r2, #1
   84d2e:	eb0b 0c01 	add.w	ip, fp, r1
   84d32:	2a07      	cmp	r2, #7
   84d34:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   84d38:	922c      	str	r2, [sp, #176]	; 0xb0
   84d3a:	e886 0c00 	stmia.w	r6, {sl, fp}
   84d3e:	f300 841a 	bgt.w	85576 <_svfprintf_r+0xc1e>
   84d42:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   84d46:	3608      	adds	r6, #8
   84d48:	f1ba 0f00 	cmp.w	sl, #0
   84d4c:	d00f      	beq.n	84d6e <_svfprintf_r+0x416>
   84d4e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   84d50:	f10c 0c01 	add.w	ip, ip, #1
   84d54:	3301      	adds	r3, #1
   84d56:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
   84d5a:	2201      	movs	r2, #1
   84d5c:	2b07      	cmp	r3, #7
   84d5e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   84d62:	932c      	str	r3, [sp, #176]	; 0xb0
   84d64:	e886 0006 	stmia.w	r6, {r1, r2}
   84d68:	f300 83a4 	bgt.w	854b4 <_svfprintf_r+0xb5c>
   84d6c:	3608      	adds	r6, #8
   84d6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84d70:	b173      	cbz	r3, 84d90 <_svfprintf_r+0x438>
   84d72:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   84d74:	f10c 0c02 	add.w	ip, ip, #2
   84d78:	3301      	adds	r3, #1
   84d7a:	a924      	add	r1, sp, #144	; 0x90
   84d7c:	2202      	movs	r2, #2
   84d7e:	2b07      	cmp	r3, #7
   84d80:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   84d84:	932c      	str	r3, [sp, #176]	; 0xb0
   84d86:	e886 0006 	stmia.w	r6, {r1, r2}
   84d8a:	f300 8387 	bgt.w	8549c <_svfprintf_r+0xb44>
   84d8e:	3608      	adds	r6, #8
   84d90:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   84d92:	2d80      	cmp	r5, #128	; 0x80
   84d94:	f000 82ca 	beq.w	8532c <_svfprintf_r+0x9d4>
   84d98:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   84d9a:	ebc4 0a05 	rsb	sl, r4, r5
   84d9e:	f1ba 0f00 	cmp.w	sl, #0
   84da2:	dd3b      	ble.n	84e1c <_svfprintf_r+0x4c4>
   84da4:	f1ba 0f10 	cmp.w	sl, #16
   84da8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   84daa:	4d30      	ldr	r5, [pc, #192]	; (84e6c <_svfprintf_r+0x514>)
   84dac:	dd2b      	ble.n	84e06 <_svfprintf_r+0x4ae>
   84dae:	940a      	str	r4, [sp, #40]	; 0x28
   84db0:	4632      	mov	r2, r6
   84db2:	f04f 0b10 	mov.w	fp, #16
   84db6:	462e      	mov	r6, r5
   84db8:	4661      	mov	r1, ip
   84dba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   84dbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   84dbe:	e006      	b.n	84dce <_svfprintf_r+0x476>
   84dc0:	f1aa 0a10 	sub.w	sl, sl, #16
   84dc4:	f1ba 0f10 	cmp.w	sl, #16
   84dc8:	f102 0208 	add.w	r2, r2, #8
   84dcc:	dd17      	ble.n	84dfe <_svfprintf_r+0x4a6>
   84dce:	3301      	adds	r3, #1
   84dd0:	3110      	adds	r1, #16
   84dd2:	2b07      	cmp	r3, #7
   84dd4:	912d      	str	r1, [sp, #180]	; 0xb4
   84dd6:	932c      	str	r3, [sp, #176]	; 0xb0
   84dd8:	e882 0840 	stmia.w	r2, {r6, fp}
   84ddc:	ddf0      	ble.n	84dc0 <_svfprintf_r+0x468>
   84dde:	4620      	mov	r0, r4
   84de0:	4629      	mov	r1, r5
   84de2:	aa2b      	add	r2, sp, #172	; 0xac
   84de4:	f004 fc88 	bl	896f8 <__ssprint_r>
   84de8:	2800      	cmp	r0, #0
   84dea:	f47f aecd 	bne.w	84b88 <_svfprintf_r+0x230>
   84dee:	f1aa 0a10 	sub.w	sl, sl, #16
   84df2:	f1ba 0f10 	cmp.w	sl, #16
   84df6:	992d      	ldr	r1, [sp, #180]	; 0xb4
   84df8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   84dfa:	aa38      	add	r2, sp, #224	; 0xe0
   84dfc:	dce7      	bgt.n	84dce <_svfprintf_r+0x476>
   84dfe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   84e00:	4635      	mov	r5, r6
   84e02:	468c      	mov	ip, r1
   84e04:	4616      	mov	r6, r2
   84e06:	3301      	adds	r3, #1
   84e08:	44d4      	add	ip, sl
   84e0a:	2b07      	cmp	r3, #7
   84e0c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   84e10:	932c      	str	r3, [sp, #176]	; 0xb0
   84e12:	e886 0420 	stmia.w	r6, {r5, sl}
   84e16:	f300 8335 	bgt.w	85484 <_svfprintf_r+0xb2c>
   84e1a:	3608      	adds	r6, #8
   84e1c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84e1e:	05ed      	lsls	r5, r5, #23
   84e20:	f100 8224 	bmi.w	8526c <_svfprintf_r+0x914>
   84e24:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   84e26:	44a4      	add	ip, r4
   84e28:	3301      	adds	r3, #1
   84e2a:	2b07      	cmp	r3, #7
   84e2c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   84e30:	6037      	str	r7, [r6, #0]
   84e32:	6074      	str	r4, [r6, #4]
   84e34:	932c      	str	r3, [sp, #176]	; 0xb0
   84e36:	f300 830f 	bgt.w	85458 <_svfprintf_r+0xb00>
   84e3a:	3608      	adds	r6, #8
   84e3c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84e3e:	0763      	lsls	r3, r4, #29
   84e40:	d549      	bpl.n	84ed6 <_svfprintf_r+0x57e>
   84e42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   84e44:	980b      	ldr	r0, [sp, #44]	; 0x2c
   84e46:	1a2c      	subs	r4, r5, r0
   84e48:	2c00      	cmp	r4, #0
   84e4a:	dd44      	ble.n	84ed6 <_svfprintf_r+0x57e>
   84e4c:	2c10      	cmp	r4, #16
   84e4e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   84e50:	f8df a01c 	ldr.w	sl, [pc, #28]	; 84e70 <_svfprintf_r+0x518>
   84e54:	dd2b      	ble.n	84eae <_svfprintf_r+0x556>
   84e56:	4657      	mov	r7, sl
   84e58:	2510      	movs	r5, #16
   84e5a:	4662      	mov	r2, ip
   84e5c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   84e60:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   84e64:	e00b      	b.n	84e7e <_svfprintf_r+0x526>
   84e66:	bf00      	nop
   84e68:	0008a5f8 	.word	0x0008a5f8
   84e6c:	0008a5c4 	.word	0x0008a5c4
   84e70:	0008a614 	.word	0x0008a614
   84e74:	3c10      	subs	r4, #16
   84e76:	2c10      	cmp	r4, #16
   84e78:	f106 0608 	add.w	r6, r6, #8
   84e7c:	dd15      	ble.n	84eaa <_svfprintf_r+0x552>
   84e7e:	3301      	adds	r3, #1
   84e80:	3210      	adds	r2, #16
   84e82:	2b07      	cmp	r3, #7
   84e84:	922d      	str	r2, [sp, #180]	; 0xb4
   84e86:	932c      	str	r3, [sp, #176]	; 0xb0
   84e88:	6037      	str	r7, [r6, #0]
   84e8a:	6075      	str	r5, [r6, #4]
   84e8c:	ddf2      	ble.n	84e74 <_svfprintf_r+0x51c>
   84e8e:	4650      	mov	r0, sl
   84e90:	4641      	mov	r1, r8
   84e92:	aa2b      	add	r2, sp, #172	; 0xac
   84e94:	f004 fc30 	bl	896f8 <__ssprint_r>
   84e98:	2800      	cmp	r0, #0
   84e9a:	f47f ae75 	bne.w	84b88 <_svfprintf_r+0x230>
   84e9e:	3c10      	subs	r4, #16
   84ea0:	2c10      	cmp	r4, #16
   84ea2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   84ea4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   84ea6:	ae38      	add	r6, sp, #224	; 0xe0
   84ea8:	dce9      	bgt.n	84e7e <_svfprintf_r+0x526>
   84eaa:	4694      	mov	ip, r2
   84eac:	46ba      	mov	sl, r7
   84eae:	3301      	adds	r3, #1
   84eb0:	44a4      	add	ip, r4
   84eb2:	2b07      	cmp	r3, #7
   84eb4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   84eb8:	932c      	str	r3, [sp, #176]	; 0xb0
   84eba:	f8c6 a000 	str.w	sl, [r6]
   84ebe:	6074      	str	r4, [r6, #4]
   84ec0:	dd09      	ble.n	84ed6 <_svfprintf_r+0x57e>
   84ec2:	980d      	ldr	r0, [sp, #52]	; 0x34
   84ec4:	990c      	ldr	r1, [sp, #48]	; 0x30
   84ec6:	aa2b      	add	r2, sp, #172	; 0xac
   84ec8:	f004 fc16 	bl	896f8 <__ssprint_r>
   84ecc:	2800      	cmp	r0, #0
   84ece:	f47f ae5b 	bne.w	84b88 <_svfprintf_r+0x230>
   84ed2:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   84ed6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   84ed8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   84eda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   84edc:	42a8      	cmp	r0, r5
   84ede:	bfac      	ite	ge
   84ee0:	1824      	addge	r4, r4, r0
   84ee2:	1964      	addlt	r4, r4, r5
   84ee4:	940e      	str	r4, [sp, #56]	; 0x38
   84ee6:	f1bc 0f00 	cmp.w	ip, #0
   84eea:	f040 82c1 	bne.w	85470 <_svfprintf_r+0xb18>
   84eee:	2300      	movs	r3, #0
   84ef0:	932c      	str	r3, [sp, #176]	; 0xb0
   84ef2:	ae38      	add	r6, sp, #224	; 0xe0
   84ef4:	e556      	b.n	849a4 <_svfprintf_r+0x4c>
   84ef6:	f899 8000 	ldrb.w	r8, [r9]
   84efa:	2a00      	cmp	r2, #0
   84efc:	f47f ad88 	bne.w	84a10 <_svfprintf_r+0xb8>
   84f00:	2220      	movs	r2, #32
   84f02:	e585      	b.n	84a10 <_svfprintf_r+0xb8>
   84f04:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84f06:	f045 0501 	orr.w	r5, r5, #1
   84f0a:	9509      	str	r5, [sp, #36]	; 0x24
   84f0c:	f899 8000 	ldrb.w	r8, [r9]
   84f10:	e57e      	b.n	84a10 <_svfprintf_r+0xb8>
   84f12:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84f14:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   84f18:	9509      	str	r5, [sp, #36]	; 0x24
   84f1a:	f899 8000 	ldrb.w	r8, [r9]
   84f1e:	e577      	b.n	84a10 <_svfprintf_r+0xb8>
   84f20:	2400      	movs	r4, #0
   84f22:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   84f26:	940f      	str	r4, [sp, #60]	; 0x3c
   84f28:	4621      	mov	r1, r4
   84f2a:	f819 8b01 	ldrb.w	r8, [r9], #1
   84f2e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84f32:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   84f36:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   84f3a:	2b09      	cmp	r3, #9
   84f3c:	d9f5      	bls.n	84f2a <_svfprintf_r+0x5d2>
   84f3e:	910f      	str	r1, [sp, #60]	; 0x3c
   84f40:	e568      	b.n	84a14 <_svfprintf_r+0xbc>
   84f42:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84f46:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   84f4a:	f04c 0c10 	orr.w	ip, ip, #16
   84f4e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   84f52:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84f54:	06a5      	lsls	r5, r4, #26
   84f56:	f140 80b2 	bpl.w	850be <_svfprintf_r+0x766>
   84f5a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   84f5c:	1de9      	adds	r1, r5, #7
   84f5e:	f021 0107 	bic.w	r1, r1, #7
   84f62:	e9d1 2300 	ldrd	r2, r3, [r1]
   84f66:	3108      	adds	r1, #8
   84f68:	9110      	str	r1, [sp, #64]	; 0x40
   84f6a:	4614      	mov	r4, r2
   84f6c:	461d      	mov	r5, r3
   84f6e:	2a00      	cmp	r2, #0
   84f70:	f173 0c00 	sbcs.w	ip, r3, #0
   84f74:	f2c0 8394 	blt.w	856a0 <_svfprintf_r+0xd48>
   84f78:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   84f7c:	2301      	movs	r3, #1
   84f7e:	e659      	b.n	84c34 <_svfprintf_r+0x2dc>
   84f80:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84f82:	4cb6      	ldr	r4, [pc, #728]	; (8525c <_svfprintf_r+0x904>)
   84f84:	06af      	lsls	r7, r5, #26
   84f86:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   84f8a:	941a      	str	r4, [sp, #104]	; 0x68
   84f8c:	f53f ae2f 	bmi.w	84bee <_svfprintf_r+0x296>
   84f90:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84f92:	06ed      	lsls	r5, r5, #27
   84f94:	f140 8443 	bpl.w	8581e <_svfprintf_r+0xec6>
   84f98:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   84f9c:	2500      	movs	r5, #0
   84f9e:	f8dc 4000 	ldr.w	r4, [ip]
   84fa2:	f10c 0c04 	add.w	ip, ip, #4
   84fa6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   84faa:	e62b      	b.n	84c04 <_svfprintf_r+0x2ac>
   84fac:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84fb0:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   84fb4:	f01c 0f20 	tst.w	ip, #32
   84fb8:	f000 8440 	beq.w	8583c <_svfprintf_r+0xee4>
   84fbc:	9c10      	ldr	r4, [sp, #64]	; 0x40
   84fbe:	6821      	ldr	r1, [r4, #0]
   84fc0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   84fc2:	17e5      	asrs	r5, r4, #31
   84fc4:	462b      	mov	r3, r5
   84fc6:	9d10      	ldr	r5, [sp, #64]	; 0x40
   84fc8:	4622      	mov	r2, r4
   84fca:	3504      	adds	r5, #4
   84fcc:	9510      	str	r5, [sp, #64]	; 0x40
   84fce:	e9c1 2300 	strd	r2, r3, [r1]
   84fd2:	e4e7      	b.n	849a4 <_svfprintf_r+0x4c>
   84fd4:	9c10      	ldr	r4, [sp, #64]	; 0x40
   84fd6:	f04f 0a00 	mov.w	sl, #0
   84fda:	6827      	ldr	r7, [r4, #0]
   84fdc:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   84fe0:	1d25      	adds	r5, r4, #4
   84fe2:	2f00      	cmp	r7, #0
   84fe4:	f000 85e9 	beq.w	85bba <_svfprintf_r+0x1262>
   84fe8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   84fea:	4638      	mov	r0, r7
   84fec:	2c00      	cmp	r4, #0
   84fee:	f2c0 859b 	blt.w	85b28 <_svfprintf_r+0x11d0>
   84ff2:	4651      	mov	r1, sl
   84ff4:	4622      	mov	r2, r4
   84ff6:	f003 fd8d 	bl	88b14 <memchr>
   84ffa:	2800      	cmp	r0, #0
   84ffc:	f000 8613 	beq.w	85c26 <_svfprintf_r+0x12ce>
   85000:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   85002:	1bc0      	subs	r0, r0, r7
   85004:	42a0      	cmp	r0, r4
   85006:	bfb8      	it	lt
   85008:	4604      	movlt	r4, r0
   8500a:	9510      	str	r5, [sp, #64]	; 0x40
   8500c:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
   85010:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   85014:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
   85018:	950b      	str	r5, [sp, #44]	; 0x2c
   8501a:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   8501e:	e632      	b.n	84c86 <_svfprintf_r+0x32e>
   85020:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   85024:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
   85028:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   8502c:	f899 8000 	ldrb.w	r8, [r9]
   85030:	e4ee      	b.n	84a10 <_svfprintf_r+0xb8>
   85032:	f899 8000 	ldrb.w	r8, [r9]
   85036:	464b      	mov	r3, r9
   85038:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   8503c:	f000 847f 	beq.w	8593e <_svfprintf_r+0xfe6>
   85040:	9d09      	ldr	r5, [sp, #36]	; 0x24
   85042:	f045 0510 	orr.w	r5, r5, #16
   85046:	9509      	str	r5, [sp, #36]	; 0x24
   85048:	e4e2      	b.n	84a10 <_svfprintf_r+0xb8>
   8504a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8504c:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8504e:	6824      	ldr	r4, [r4, #0]
   85050:	1d2b      	adds	r3, r5, #4
   85052:	2c00      	cmp	r4, #0
   85054:	940f      	str	r4, [sp, #60]	; 0x3c
   85056:	f6ff ad7d 	blt.w	84b54 <_svfprintf_r+0x1fc>
   8505a:	9310      	str	r3, [sp, #64]	; 0x40
   8505c:	f899 8000 	ldrb.w	r8, [r9]
   85060:	e4d6      	b.n	84a10 <_svfprintf_r+0xb8>
   85062:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85064:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   85068:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8506a:	487d      	ldr	r0, [pc, #500]	; (85260 <_svfprintf_r+0x908>)
   8506c:	3504      	adds	r5, #4
   8506e:	681c      	ldr	r4, [r3, #0]
   85070:	f04f 0878 	mov.w	r8, #120	; 0x78
   85074:	2330      	movs	r3, #48	; 0x30
   85076:	f04c 0c02 	orr.w	ip, ip, #2
   8507a:	9510      	str	r5, [sp, #64]	; 0x40
   8507c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
   85080:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   85084:	2500      	movs	r5, #0
   85086:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
   8508a:	901a      	str	r0, [sp, #104]	; 0x68
   8508c:	2302      	movs	r3, #2
   8508e:	e5cd      	b.n	84c2c <_svfprintf_r+0x2d4>
   85090:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85092:	9d10      	ldr	r5, [sp, #64]	; 0x40
   85094:	681a      	ldr	r2, [r3, #0]
   85096:	2401      	movs	r4, #1
   85098:	2300      	movs	r3, #0
   8509a:	3504      	adds	r5, #4
   8509c:	469a      	mov	sl, r3
   8509e:	940b      	str	r4, [sp, #44]	; 0x2c
   850a0:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
   850a4:	9510      	str	r5, [sp, #64]	; 0x40
   850a6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
   850aa:	930a      	str	r3, [sp, #40]	; 0x28
   850ac:	9314      	str	r3, [sp, #80]	; 0x50
   850ae:	af2e      	add	r7, sp, #184	; 0xb8
   850b0:	e5ef      	b.n	84c92 <_svfprintf_r+0x33a>
   850b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   850b4:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   850b8:	06a5      	lsls	r5, r4, #26
   850ba:	f53f af4e 	bmi.w	84f5a <_svfprintf_r+0x602>
   850be:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   850c2:	f01c 0f10 	tst.w	ip, #16
   850c6:	f040 82df 	bne.w	85688 <_svfprintf_r+0xd30>
   850ca:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   850ce:	f01c 0f40 	tst.w	ip, #64	; 0x40
   850d2:	f000 82d9 	beq.w	85688 <_svfprintf_r+0xd30>
   850d6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   850da:	f9bc 4000 	ldrsh.w	r4, [ip]
   850de:	f10c 0c04 	add.w	ip, ip, #4
   850e2:	17e5      	asrs	r5, r4, #31
   850e4:	4622      	mov	r2, r4
   850e6:	462b      	mov	r3, r5
   850e8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   850ec:	e73f      	b.n	84f6e <_svfprintf_r+0x616>
   850ee:	f899 8000 	ldrb.w	r8, [r9]
   850f2:	222b      	movs	r2, #43	; 0x2b
   850f4:	e48c      	b.n	84a10 <_svfprintf_r+0xb8>
   850f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
   850f8:	f045 0508 	orr.w	r5, r5, #8
   850fc:	9509      	str	r5, [sp, #36]	; 0x24
   850fe:	f899 8000 	ldrb.w	r8, [r9]
   85102:	e485      	b.n	84a10 <_svfprintf_r+0xb8>
   85104:	9d10      	ldr	r5, [sp, #64]	; 0x40
   85106:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   8510a:	1deb      	adds	r3, r5, #7
   8510c:	f023 0307 	bic.w	r3, r3, #7
   85110:	f103 0c08 	add.w	ip, r3, #8
   85114:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   85118:	e9d3 4500 	ldrd	r4, r5, [r3]
   8511c:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
   85120:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   85124:	f7fe fd5c 	bl	83be0 <__fpclassifyd>
   85128:	2801      	cmp	r0, #1
   8512a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   8512e:	f040 835c 	bne.w	857ea <_svfprintf_r+0xe92>
   85132:	2200      	movs	r2, #0
   85134:	2300      	movs	r3, #0
   85136:	f7ff f9ad 	bl	84494 <__aeabi_dcmplt>
   8513a:	2800      	cmp	r0, #0
   8513c:	f040 8563 	bne.w	85c06 <_svfprintf_r+0x12ae>
   85140:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   85144:	2503      	movs	r5, #3
   85146:	950b      	str	r5, [sp, #44]	; 0x2c
   85148:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8514a:	4f46      	ldr	r7, [pc, #280]	; (85264 <_svfprintf_r+0x90c>)
   8514c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   85150:	4b45      	ldr	r3, [pc, #276]	; (85268 <_svfprintf_r+0x910>)
   85152:	2400      	movs	r4, #0
   85154:	9509      	str	r5, [sp, #36]	; 0x24
   85156:	2500      	movs	r5, #0
   85158:	940a      	str	r4, [sp, #40]	; 0x28
   8515a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   8515e:	bfd8      	it	le
   85160:	461f      	movle	r7, r3
   85162:	2403      	movs	r4, #3
   85164:	9514      	str	r5, [sp, #80]	; 0x50
   85166:	e58e      	b.n	84c86 <_svfprintf_r+0x32e>
   85168:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   8516c:	f04c 0c20 	orr.w	ip, ip, #32
   85170:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   85174:	f899 8000 	ldrb.w	r8, [r9]
   85178:	e44a      	b.n	84a10 <_svfprintf_r+0xb8>
   8517a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8517c:	1de3      	adds	r3, r4, #7
   8517e:	f023 0307 	bic.w	r3, r3, #7
   85182:	f103 0508 	add.w	r5, r3, #8
   85186:	9510      	str	r5, [sp, #64]	; 0x40
   85188:	e9d3 4500 	ldrd	r4, r5, [r3]
   8518c:	2300      	movs	r3, #0
   8518e:	e54d      	b.n	84c2c <_svfprintf_r+0x2d4>
   85190:	9d10      	ldr	r5, [sp, #64]	; 0x40
   85192:	1deb      	adds	r3, r5, #7
   85194:	f023 0307 	bic.w	r3, r3, #7
   85198:	f103 0c08 	add.w	ip, r3, #8
   8519c:	e9d3 4500 	ldrd	r4, r5, [r3]
   851a0:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   851a4:	2301      	movs	r3, #1
   851a6:	e541      	b.n	84c2c <_svfprintf_r+0x2d4>
   851a8:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   851ac:	f1b8 0f00 	cmp.w	r8, #0
   851b0:	f43f ace3 	beq.w	84b7a <_svfprintf_r+0x222>
   851b4:	2300      	movs	r3, #0
   851b6:	f04f 0c01 	mov.w	ip, #1
   851ba:	469a      	mov	sl, r3
   851bc:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   851c0:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
   851c4:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
   851c8:	930a      	str	r3, [sp, #40]	; 0x28
   851ca:	9314      	str	r3, [sp, #80]	; 0x50
   851cc:	4664      	mov	r4, ip
   851ce:	af2e      	add	r7, sp, #184	; 0xb8
   851d0:	e55f      	b.n	84c92 <_svfprintf_r+0x33a>
   851d2:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   851d6:	e5b7      	b.n	84d48 <_svfprintf_r+0x3f0>
   851d8:	2b01      	cmp	r3, #1
   851da:	f000 80ec 	beq.w	853b6 <_svfprintf_r+0xa5e>
   851de:	2b02      	cmp	r3, #2
   851e0:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
   851e4:	d118      	bne.n	85218 <_svfprintf_r+0x8c0>
   851e6:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
   851ea:	4619      	mov	r1, r3
   851ec:	f004 000f 	and.w	r0, r4, #15
   851f0:	0922      	lsrs	r2, r4, #4
   851f2:	f81c 0000 	ldrb.w	r0, [ip, r0]
   851f6:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   851fa:	092b      	lsrs	r3, r5, #4
   851fc:	7008      	strb	r0, [r1, #0]
   851fe:	ea52 0003 	orrs.w	r0, r2, r3
   85202:	460f      	mov	r7, r1
   85204:	4614      	mov	r4, r2
   85206:	461d      	mov	r5, r3
   85208:	f101 31ff 	add.w	r1, r1, #4294967295
   8520c:	d1ee      	bne.n	851ec <_svfprintf_r+0x894>
   8520e:	9d08      	ldr	r5, [sp, #32]
   85210:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
   85214:	1bec      	subs	r4, r5, r7
   85216:	e52d      	b.n	84c74 <_svfprintf_r+0x31c>
   85218:	08e0      	lsrs	r0, r4, #3
   8521a:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   8521e:	f004 0207 	and.w	r2, r4, #7
   85222:	08e9      	lsrs	r1, r5, #3
   85224:	3230      	adds	r2, #48	; 0x30
   85226:	ea50 0c01 	orrs.w	ip, r0, r1
   8522a:	461f      	mov	r7, r3
   8522c:	701a      	strb	r2, [r3, #0]
   8522e:	4604      	mov	r4, r0
   85230:	460d      	mov	r5, r1
   85232:	f103 33ff 	add.w	r3, r3, #4294967295
   85236:	d1ef      	bne.n	85218 <_svfprintf_r+0x8c0>
   85238:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8523a:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
   8523e:	07e0      	lsls	r0, r4, #31
   85240:	4639      	mov	r1, r7
   85242:	f140 80c1 	bpl.w	853c8 <_svfprintf_r+0xa70>
   85246:	2a30      	cmp	r2, #48	; 0x30
   85248:	f000 80be 	beq.w	853c8 <_svfprintf_r+0xa70>
   8524c:	9d08      	ldr	r5, [sp, #32]
   8524e:	461f      	mov	r7, r3
   85250:	2330      	movs	r3, #48	; 0x30
   85252:	1bec      	subs	r4, r5, r7
   85254:	f801 3c01 	strb.w	r3, [r1, #-1]
   85258:	e50c      	b.n	84c74 <_svfprintf_r+0x31c>
   8525a:	bf00      	nop
   8525c:	0008a5e4 	.word	0x0008a5e4
   85260:	0008a5f8 	.word	0x0008a5f8
   85264:	0008a5d8 	.word	0x0008a5d8
   85268:	0008a5d4 	.word	0x0008a5d4
   8526c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   85270:	f340 80ad 	ble.w	853ce <_svfprintf_r+0xa76>
   85274:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   85278:	2200      	movs	r2, #0
   8527a:	2300      	movs	r3, #0
   8527c:	f8cd c01c 	str.w	ip, [sp, #28]
   85280:	f7ff f8fe 	bl	84480 <__aeabi_dcmpeq>
   85284:	f8dd c01c 	ldr.w	ip, [sp, #28]
   85288:	2800      	cmp	r0, #0
   8528a:	f000 8126 	beq.w	854da <_svfprintf_r+0xb82>
   8528e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85290:	49aa      	ldr	r1, [pc, #680]	; (8553c <_svfprintf_r+0xbe4>)
   85292:	3301      	adds	r3, #1
   85294:	f10c 0c01 	add.w	ip, ip, #1
   85298:	2201      	movs	r2, #1
   8529a:	2b07      	cmp	r3, #7
   8529c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   852a0:	932c      	str	r3, [sp, #176]	; 0xb0
   852a2:	e886 0006 	stmia.w	r6, {r1, r2}
   852a6:	f300 82ed 	bgt.w	85884 <_svfprintf_r+0xf2c>
   852aa:	3608      	adds	r6, #8
   852ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
   852ae:	9c11      	ldr	r4, [sp, #68]	; 0x44
   852b0:	42a3      	cmp	r3, r4
   852b2:	db03      	blt.n	852bc <_svfprintf_r+0x964>
   852b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   852b6:	07ec      	lsls	r4, r5, #31
   852b8:	f57f adc0 	bpl.w	84e3c <_svfprintf_r+0x4e4>
   852bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   852be:	9c18      	ldr	r4, [sp, #96]	; 0x60
   852c0:	3301      	adds	r3, #1
   852c2:	9d15      	ldr	r5, [sp, #84]	; 0x54
   852c4:	44a4      	add	ip, r4
   852c6:	2b07      	cmp	r3, #7
   852c8:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   852cc:	6035      	str	r5, [r6, #0]
   852ce:	6074      	str	r4, [r6, #4]
   852d0:	932c      	str	r3, [sp, #176]	; 0xb0
   852d2:	f300 833e 	bgt.w	85952 <_svfprintf_r+0xffa>
   852d6:	3608      	adds	r6, #8
   852d8:	9d11      	ldr	r5, [sp, #68]	; 0x44
   852da:	1e6c      	subs	r4, r5, #1
   852dc:	2c00      	cmp	r4, #0
   852de:	f77f adad 	ble.w	84e3c <_svfprintf_r+0x4e4>
   852e2:	2c10      	cmp	r4, #16
   852e4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   852e6:	4d96      	ldr	r5, [pc, #600]	; (85540 <_svfprintf_r+0xbe8>)
   852e8:	f340 8197 	ble.w	8561a <_svfprintf_r+0xcc2>
   852ec:	2710      	movs	r7, #16
   852ee:	4662      	mov	r2, ip
   852f0:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   852f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   852f8:	e004      	b.n	85304 <_svfprintf_r+0x9ac>
   852fa:	3608      	adds	r6, #8
   852fc:	3c10      	subs	r4, #16
   852fe:	2c10      	cmp	r4, #16
   85300:	f340 818a 	ble.w	85618 <_svfprintf_r+0xcc0>
   85304:	3301      	adds	r3, #1
   85306:	3210      	adds	r2, #16
   85308:	2b07      	cmp	r3, #7
   8530a:	922d      	str	r2, [sp, #180]	; 0xb4
   8530c:	932c      	str	r3, [sp, #176]	; 0xb0
   8530e:	e886 00a0 	stmia.w	r6, {r5, r7}
   85312:	ddf2      	ble.n	852fa <_svfprintf_r+0x9a2>
   85314:	4640      	mov	r0, r8
   85316:	4651      	mov	r1, sl
   85318:	aa2b      	add	r2, sp, #172	; 0xac
   8531a:	f004 f9ed 	bl	896f8 <__ssprint_r>
   8531e:	2800      	cmp	r0, #0
   85320:	f47f ac32 	bne.w	84b88 <_svfprintf_r+0x230>
   85324:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   85326:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85328:	ae38      	add	r6, sp, #224	; 0xe0
   8532a:	e7e7      	b.n	852fc <_svfprintf_r+0x9a4>
   8532c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   8532e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   85330:	ebc0 0a05 	rsb	sl, r0, r5
   85334:	f1ba 0f00 	cmp.w	sl, #0
   85338:	f77f ad2e 	ble.w	84d98 <_svfprintf_r+0x440>
   8533c:	f1ba 0f10 	cmp.w	sl, #16
   85340:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85342:	4d7f      	ldr	r5, [pc, #508]	; (85540 <_svfprintf_r+0xbe8>)
   85344:	dd2b      	ble.n	8539e <_svfprintf_r+0xa46>
   85346:	9412      	str	r4, [sp, #72]	; 0x48
   85348:	4632      	mov	r2, r6
   8534a:	f04f 0b10 	mov.w	fp, #16
   8534e:	462e      	mov	r6, r5
   85350:	4661      	mov	r1, ip
   85352:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   85354:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   85356:	e006      	b.n	85366 <_svfprintf_r+0xa0e>
   85358:	f1aa 0a10 	sub.w	sl, sl, #16
   8535c:	f1ba 0f10 	cmp.w	sl, #16
   85360:	f102 0208 	add.w	r2, r2, #8
   85364:	dd17      	ble.n	85396 <_svfprintf_r+0xa3e>
   85366:	3301      	adds	r3, #1
   85368:	3110      	adds	r1, #16
   8536a:	2b07      	cmp	r3, #7
   8536c:	912d      	str	r1, [sp, #180]	; 0xb4
   8536e:	932c      	str	r3, [sp, #176]	; 0xb0
   85370:	e882 0840 	stmia.w	r2, {r6, fp}
   85374:	ddf0      	ble.n	85358 <_svfprintf_r+0xa00>
   85376:	4620      	mov	r0, r4
   85378:	4629      	mov	r1, r5
   8537a:	aa2b      	add	r2, sp, #172	; 0xac
   8537c:	f004 f9bc 	bl	896f8 <__ssprint_r>
   85380:	2800      	cmp	r0, #0
   85382:	f47f ac01 	bne.w	84b88 <_svfprintf_r+0x230>
   85386:	f1aa 0a10 	sub.w	sl, sl, #16
   8538a:	f1ba 0f10 	cmp.w	sl, #16
   8538e:	992d      	ldr	r1, [sp, #180]	; 0xb4
   85390:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85392:	aa38      	add	r2, sp, #224	; 0xe0
   85394:	dce7      	bgt.n	85366 <_svfprintf_r+0xa0e>
   85396:	9c12      	ldr	r4, [sp, #72]	; 0x48
   85398:	4635      	mov	r5, r6
   8539a:	468c      	mov	ip, r1
   8539c:	4616      	mov	r6, r2
   8539e:	3301      	adds	r3, #1
   853a0:	44d4      	add	ip, sl
   853a2:	2b07      	cmp	r3, #7
   853a4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   853a8:	932c      	str	r3, [sp, #176]	; 0xb0
   853aa:	e886 0420 	stmia.w	r6, {r5, sl}
   853ae:	f300 820f 	bgt.w	857d0 <_svfprintf_r+0xe78>
   853b2:	3608      	adds	r6, #8
   853b4:	e4f0      	b.n	84d98 <_svfprintf_r+0x440>
   853b6:	2d00      	cmp	r5, #0
   853b8:	bf08      	it	eq
   853ba:	2c0a      	cmpeq	r4, #10
   853bc:	f080 8138 	bcs.w	85630 <_svfprintf_r+0xcd8>
   853c0:	3430      	adds	r4, #48	; 0x30
   853c2:	af48      	add	r7, sp, #288	; 0x120
   853c4:	f807 4d41 	strb.w	r4, [r7, #-65]!
   853c8:	9d08      	ldr	r5, [sp, #32]
   853ca:	1bec      	subs	r4, r5, r7
   853cc:	e452      	b.n	84c74 <_svfprintf_r+0x31c>
   853ce:	9c11      	ldr	r4, [sp, #68]	; 0x44
   853d0:	2c01      	cmp	r4, #1
   853d2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   853d4:	f340 81d2 	ble.w	8577c <_svfprintf_r+0xe24>
   853d8:	3401      	adds	r4, #1
   853da:	f10c 0301 	add.w	r3, ip, #1
   853de:	2201      	movs	r2, #1
   853e0:	2c07      	cmp	r4, #7
   853e2:	932d      	str	r3, [sp, #180]	; 0xb4
   853e4:	6037      	str	r7, [r6, #0]
   853e6:	942c      	str	r4, [sp, #176]	; 0xb0
   853e8:	6072      	str	r2, [r6, #4]
   853ea:	f300 81d8 	bgt.w	8579e <_svfprintf_r+0xe46>
   853ee:	3608      	adds	r6, #8
   853f0:	9d15      	ldr	r5, [sp, #84]	; 0x54
   853f2:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   853f6:	3401      	adds	r4, #1
   853f8:	6035      	str	r5, [r6, #0]
   853fa:	9d18      	ldr	r5, [sp, #96]	; 0x60
   853fc:	4498      	add	r8, r3
   853fe:	2c07      	cmp	r4, #7
   85400:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   85404:	942c      	str	r4, [sp, #176]	; 0xb0
   85406:	6075      	str	r5, [r6, #4]
   85408:	f300 81d5 	bgt.w	857b6 <_svfprintf_r+0xe5e>
   8540c:	3608      	adds	r6, #8
   8540e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   85412:	2200      	movs	r2, #0
   85414:	2300      	movs	r3, #0
   85416:	f7ff f833 	bl	84480 <__aeabi_dcmpeq>
   8541a:	9d11      	ldr	r5, [sp, #68]	; 0x44
   8541c:	2800      	cmp	r0, #0
   8541e:	f040 80b9 	bne.w	85594 <_svfprintf_r+0xc3c>
   85422:	1e6b      	subs	r3, r5, #1
   85424:	3401      	adds	r4, #1
   85426:	3701      	adds	r7, #1
   85428:	4498      	add	r8, r3
   8542a:	2c07      	cmp	r4, #7
   8542c:	942c      	str	r4, [sp, #176]	; 0xb0
   8542e:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   85432:	6037      	str	r7, [r6, #0]
   85434:	6073      	str	r3, [r6, #4]
   85436:	f300 80e2 	bgt.w	855fe <_svfprintf_r+0xca6>
   8543a:	3608      	adds	r6, #8
   8543c:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
   85440:	3401      	adds	r4, #1
   85442:	9d19      	ldr	r5, [sp, #100]	; 0x64
   85444:	44c4      	add	ip, r8
   85446:	ab27      	add	r3, sp, #156	; 0x9c
   85448:	2c07      	cmp	r4, #7
   8544a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   8544e:	942c      	str	r4, [sp, #176]	; 0xb0
   85450:	e886 0028 	stmia.w	r6, {r3, r5}
   85454:	f77f acf1 	ble.w	84e3a <_svfprintf_r+0x4e2>
   85458:	980d      	ldr	r0, [sp, #52]	; 0x34
   8545a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8545c:	aa2b      	add	r2, sp, #172	; 0xac
   8545e:	f004 f94b 	bl	896f8 <__ssprint_r>
   85462:	2800      	cmp	r0, #0
   85464:	f47f ab90 	bne.w	84b88 <_svfprintf_r+0x230>
   85468:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   8546c:	ae38      	add	r6, sp, #224	; 0xe0
   8546e:	e4e5      	b.n	84e3c <_svfprintf_r+0x4e4>
   85470:	980d      	ldr	r0, [sp, #52]	; 0x34
   85472:	990c      	ldr	r1, [sp, #48]	; 0x30
   85474:	aa2b      	add	r2, sp, #172	; 0xac
   85476:	f004 f93f 	bl	896f8 <__ssprint_r>
   8547a:	2800      	cmp	r0, #0
   8547c:	f43f ad37 	beq.w	84eee <_svfprintf_r+0x596>
   85480:	f7ff bb82 	b.w	84b88 <_svfprintf_r+0x230>
   85484:	980d      	ldr	r0, [sp, #52]	; 0x34
   85486:	990c      	ldr	r1, [sp, #48]	; 0x30
   85488:	aa2b      	add	r2, sp, #172	; 0xac
   8548a:	f004 f935 	bl	896f8 <__ssprint_r>
   8548e:	2800      	cmp	r0, #0
   85490:	f47f ab7a 	bne.w	84b88 <_svfprintf_r+0x230>
   85494:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   85498:	ae38      	add	r6, sp, #224	; 0xe0
   8549a:	e4bf      	b.n	84e1c <_svfprintf_r+0x4c4>
   8549c:	980d      	ldr	r0, [sp, #52]	; 0x34
   8549e:	990c      	ldr	r1, [sp, #48]	; 0x30
   854a0:	aa2b      	add	r2, sp, #172	; 0xac
   854a2:	f004 f929 	bl	896f8 <__ssprint_r>
   854a6:	2800      	cmp	r0, #0
   854a8:	f47f ab6e 	bne.w	84b88 <_svfprintf_r+0x230>
   854ac:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   854b0:	ae38      	add	r6, sp, #224	; 0xe0
   854b2:	e46d      	b.n	84d90 <_svfprintf_r+0x438>
   854b4:	980d      	ldr	r0, [sp, #52]	; 0x34
   854b6:	990c      	ldr	r1, [sp, #48]	; 0x30
   854b8:	aa2b      	add	r2, sp, #172	; 0xac
   854ba:	f004 f91d 	bl	896f8 <__ssprint_r>
   854be:	2800      	cmp	r0, #0
   854c0:	f47f ab62 	bne.w	84b88 <_svfprintf_r+0x230>
   854c4:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   854c8:	ae38      	add	r6, sp, #224	; 0xe0
   854ca:	e450      	b.n	84d6e <_svfprintf_r+0x416>
   854cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   854ce:	af38      	add	r7, sp, #224	; 0xe0
   854d0:	f7ff bbd0 	b.w	84c74 <_svfprintf_r+0x31c>
   854d4:	2302      	movs	r3, #2
   854d6:	f7ff bba9 	b.w	84c2c <_svfprintf_r+0x2d4>
   854da:	9b25      	ldr	r3, [sp, #148]	; 0x94
   854dc:	2b00      	cmp	r3, #0
   854de:	f340 81dd 	ble.w	8589c <_svfprintf_r+0xf44>
   854e2:	9c11      	ldr	r4, [sp, #68]	; 0x44
   854e4:	9d14      	ldr	r5, [sp, #80]	; 0x50
   854e6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   854ea:	42ac      	cmp	r4, r5
   854ec:	bfa8      	it	ge
   854ee:	462c      	movge	r4, r5
   854f0:	2c00      	cmp	r4, #0
   854f2:	44ba      	add	sl, r7
   854f4:	dd0b      	ble.n	8550e <_svfprintf_r+0xbb6>
   854f6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   854f8:	44a4      	add	ip, r4
   854fa:	3301      	adds	r3, #1
   854fc:	2b07      	cmp	r3, #7
   854fe:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   85502:	6037      	str	r7, [r6, #0]
   85504:	6074      	str	r4, [r6, #4]
   85506:	932c      	str	r3, [sp, #176]	; 0xb0
   85508:	f300 831e 	bgt.w	85b48 <_svfprintf_r+0x11f0>
   8550c:	3608      	adds	r6, #8
   8550e:	9d14      	ldr	r5, [sp, #80]	; 0x50
   85510:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   85514:	1b2c      	subs	r4, r5, r4
   85516:	2c00      	cmp	r4, #0
   85518:	f340 80d7 	ble.w	856ca <_svfprintf_r+0xd72>
   8551c:	2c10      	cmp	r4, #16
   8551e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85520:	4d07      	ldr	r5, [pc, #28]	; (85540 <_svfprintf_r+0xbe8>)
   85522:	f340 81a3 	ble.w	8586c <_svfprintf_r+0xf14>
   85526:	970a      	str	r7, [sp, #40]	; 0x28
   85528:	f04f 0810 	mov.w	r8, #16
   8552c:	462f      	mov	r7, r5
   8552e:	4662      	mov	r2, ip
   85530:	4625      	mov	r5, r4
   85532:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   85536:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   85538:	e009      	b.n	8554e <_svfprintf_r+0xbf6>
   8553a:	bf00      	nop
   8553c:	0008a198 	.word	0x0008a198
   85540:	0008a5c4 	.word	0x0008a5c4
   85544:	3608      	adds	r6, #8
   85546:	3d10      	subs	r5, #16
   85548:	2d10      	cmp	r5, #16
   8554a:	f340 818b 	ble.w	85864 <_svfprintf_r+0xf0c>
   8554e:	3301      	adds	r3, #1
   85550:	3210      	adds	r2, #16
   85552:	2b07      	cmp	r3, #7
   85554:	922d      	str	r2, [sp, #180]	; 0xb4
   85556:	932c      	str	r3, [sp, #176]	; 0xb0
   85558:	e886 0180 	stmia.w	r6, {r7, r8}
   8555c:	ddf2      	ble.n	85544 <_svfprintf_r+0xbec>
   8555e:	4658      	mov	r0, fp
   85560:	4621      	mov	r1, r4
   85562:	aa2b      	add	r2, sp, #172	; 0xac
   85564:	f004 f8c8 	bl	896f8 <__ssprint_r>
   85568:	2800      	cmp	r0, #0
   8556a:	f47f ab0d 	bne.w	84b88 <_svfprintf_r+0x230>
   8556e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   85570:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85572:	ae38      	add	r6, sp, #224	; 0xe0
   85574:	e7e7      	b.n	85546 <_svfprintf_r+0xbee>
   85576:	980d      	ldr	r0, [sp, #52]	; 0x34
   85578:	990c      	ldr	r1, [sp, #48]	; 0x30
   8557a:	aa2b      	add	r2, sp, #172	; 0xac
   8557c:	f004 f8bc 	bl	896f8 <__ssprint_r>
   85580:	2800      	cmp	r0, #0
   85582:	f47f ab01 	bne.w	84b88 <_svfprintf_r+0x230>
   85586:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   8558a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   8558e:	ae38      	add	r6, sp, #224	; 0xe0
   85590:	f7ff bbda 	b.w	84d48 <_svfprintf_r+0x3f0>
   85594:	1e6f      	subs	r7, r5, #1
   85596:	2f00      	cmp	r7, #0
   85598:	f77f af50 	ble.w	8543c <_svfprintf_r+0xae4>
   8559c:	2f10      	cmp	r7, #16
   8559e:	4dae      	ldr	r5, [pc, #696]	; (85858 <_svfprintf_r+0xf00>)
   855a0:	dd23      	ble.n	855ea <_svfprintf_r+0xc92>
   855a2:	4643      	mov	r3, r8
   855a4:	f04f 0a10 	mov.w	sl, #16
   855a8:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   855ac:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   855b0:	e004      	b.n	855bc <_svfprintf_r+0xc64>
   855b2:	3f10      	subs	r7, #16
   855b4:	2f10      	cmp	r7, #16
   855b6:	f106 0608 	add.w	r6, r6, #8
   855ba:	dd15      	ble.n	855e8 <_svfprintf_r+0xc90>
   855bc:	3401      	adds	r4, #1
   855be:	3310      	adds	r3, #16
   855c0:	2c07      	cmp	r4, #7
   855c2:	932d      	str	r3, [sp, #180]	; 0xb4
   855c4:	942c      	str	r4, [sp, #176]	; 0xb0
   855c6:	e886 0420 	stmia.w	r6, {r5, sl}
   855ca:	ddf2      	ble.n	855b2 <_svfprintf_r+0xc5a>
   855cc:	4640      	mov	r0, r8
   855ce:	4659      	mov	r1, fp
   855d0:	aa2b      	add	r2, sp, #172	; 0xac
   855d2:	f004 f891 	bl	896f8 <__ssprint_r>
   855d6:	2800      	cmp	r0, #0
   855d8:	f47f aad6 	bne.w	84b88 <_svfprintf_r+0x230>
   855dc:	3f10      	subs	r7, #16
   855de:	2f10      	cmp	r7, #16
   855e0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   855e2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   855e4:	ae38      	add	r6, sp, #224	; 0xe0
   855e6:	dce9      	bgt.n	855bc <_svfprintf_r+0xc64>
   855e8:	4698      	mov	r8, r3
   855ea:	3401      	adds	r4, #1
   855ec:	44b8      	add	r8, r7
   855ee:	2c07      	cmp	r4, #7
   855f0:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   855f4:	942c      	str	r4, [sp, #176]	; 0xb0
   855f6:	e886 00a0 	stmia.w	r6, {r5, r7}
   855fa:	f77f af1e 	ble.w	8543a <_svfprintf_r+0xae2>
   855fe:	980d      	ldr	r0, [sp, #52]	; 0x34
   85600:	990c      	ldr	r1, [sp, #48]	; 0x30
   85602:	aa2b      	add	r2, sp, #172	; 0xac
   85604:	f004 f878 	bl	896f8 <__ssprint_r>
   85608:	2800      	cmp	r0, #0
   8560a:	f47f aabd 	bne.w	84b88 <_svfprintf_r+0x230>
   8560e:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
   85612:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85614:	ae38      	add	r6, sp, #224	; 0xe0
   85616:	e711      	b.n	8543c <_svfprintf_r+0xae4>
   85618:	4694      	mov	ip, r2
   8561a:	3301      	adds	r3, #1
   8561c:	44a4      	add	ip, r4
   8561e:	2b07      	cmp	r3, #7
   85620:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   85624:	932c      	str	r3, [sp, #176]	; 0xb0
   85626:	6035      	str	r5, [r6, #0]
   85628:	6074      	str	r4, [r6, #4]
   8562a:	f77f ac06 	ble.w	84e3a <_svfprintf_r+0x4e2>
   8562e:	e713      	b.n	85458 <_svfprintf_r+0xb00>
   85630:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
   85634:	4620      	mov	r0, r4
   85636:	4629      	mov	r1, r5
   85638:	220a      	movs	r2, #10
   8563a:	2300      	movs	r3, #0
   8563c:	f004 faa6 	bl	89b8c <__aeabi_uldivmod>
   85640:	3230      	adds	r2, #48	; 0x30
   85642:	f88b 2000 	strb.w	r2, [fp]
   85646:	4620      	mov	r0, r4
   85648:	4629      	mov	r1, r5
   8564a:	220a      	movs	r2, #10
   8564c:	2300      	movs	r3, #0
   8564e:	f004 fa9d 	bl	89b8c <__aeabi_uldivmod>
   85652:	4604      	mov	r4, r0
   85654:	460d      	mov	r5, r1
   85656:	ea54 0c05 	orrs.w	ip, r4, r5
   8565a:	465f      	mov	r7, fp
   8565c:	f10b 3bff 	add.w	fp, fp, #4294967295
   85660:	d1e8      	bne.n	85634 <_svfprintf_r+0xcdc>
   85662:	9d08      	ldr	r5, [sp, #32]
   85664:	1bec      	subs	r4, r5, r7
   85666:	f7ff bb05 	b.w	84c74 <_svfprintf_r+0x31c>
   8566a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8566c:	2301      	movs	r3, #1
   8566e:	682c      	ldr	r4, [r5, #0]
   85670:	3504      	adds	r5, #4
   85672:	9510      	str	r5, [sp, #64]	; 0x40
   85674:	2500      	movs	r5, #0
   85676:	f7ff bad9 	b.w	84c2c <_svfprintf_r+0x2d4>
   8567a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8567c:	682c      	ldr	r4, [r5, #0]
   8567e:	3504      	adds	r5, #4
   85680:	9510      	str	r5, [sp, #64]	; 0x40
   85682:	2500      	movs	r5, #0
   85684:	f7ff bad2 	b.w	84c2c <_svfprintf_r+0x2d4>
   85688:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8568a:	682c      	ldr	r4, [r5, #0]
   8568c:	3504      	adds	r5, #4
   8568e:	9510      	str	r5, [sp, #64]	; 0x40
   85690:	17e5      	asrs	r5, r4, #31
   85692:	4622      	mov	r2, r4
   85694:	462b      	mov	r3, r5
   85696:	2a00      	cmp	r2, #0
   85698:	f173 0c00 	sbcs.w	ip, r3, #0
   8569c:	f6bf ac6c 	bge.w	84f78 <_svfprintf_r+0x620>
   856a0:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   856a4:	4264      	negs	r4, r4
   856a6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   856aa:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   856ae:	2301      	movs	r3, #1
   856b0:	f7ff bac0 	b.w	84c34 <_svfprintf_r+0x2dc>
   856b4:	980d      	ldr	r0, [sp, #52]	; 0x34
   856b6:	990c      	ldr	r1, [sp, #48]	; 0x30
   856b8:	aa2b      	add	r2, sp, #172	; 0xac
   856ba:	f004 f81d 	bl	896f8 <__ssprint_r>
   856be:	2800      	cmp	r0, #0
   856c0:	f47f aa62 	bne.w	84b88 <_svfprintf_r+0x230>
   856c4:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   856c8:	ae38      	add	r6, sp, #224	; 0xe0
   856ca:	9d14      	ldr	r5, [sp, #80]	; 0x50
   856cc:	9c25      	ldr	r4, [sp, #148]	; 0x94
   856ce:	442f      	add	r7, r5
   856d0:	9d11      	ldr	r5, [sp, #68]	; 0x44
   856d2:	42ac      	cmp	r4, r5
   856d4:	db42      	blt.n	8575c <_svfprintf_r+0xe04>
   856d6:	9d09      	ldr	r5, [sp, #36]	; 0x24
   856d8:	07e9      	lsls	r1, r5, #31
   856da:	d43f      	bmi.n	8575c <_svfprintf_r+0xe04>
   856dc:	9811      	ldr	r0, [sp, #68]	; 0x44
   856de:	ebc7 050a 	rsb	r5, r7, sl
   856e2:	1b04      	subs	r4, r0, r4
   856e4:	42ac      	cmp	r4, r5
   856e6:	bfb8      	it	lt
   856e8:	4625      	movlt	r5, r4
   856ea:	2d00      	cmp	r5, #0
   856ec:	dd0b      	ble.n	85706 <_svfprintf_r+0xdae>
   856ee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   856f0:	44ac      	add	ip, r5
   856f2:	3301      	adds	r3, #1
   856f4:	2b07      	cmp	r3, #7
   856f6:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   856fa:	6037      	str	r7, [r6, #0]
   856fc:	6075      	str	r5, [r6, #4]
   856fe:	932c      	str	r3, [sp, #176]	; 0xb0
   85700:	f300 824c 	bgt.w	85b9c <_svfprintf_r+0x1244>
   85704:	3608      	adds	r6, #8
   85706:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   8570a:	1b64      	subs	r4, r4, r5
   8570c:	2c00      	cmp	r4, #0
   8570e:	f77f ab95 	ble.w	84e3c <_svfprintf_r+0x4e4>
   85712:	2c10      	cmp	r4, #16
   85714:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85716:	4d50      	ldr	r5, [pc, #320]	; (85858 <_svfprintf_r+0xf00>)
   85718:	f77f af7f 	ble.w	8561a <_svfprintf_r+0xcc2>
   8571c:	2710      	movs	r7, #16
   8571e:	4662      	mov	r2, ip
   85720:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   85724:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   85728:	e004      	b.n	85734 <_svfprintf_r+0xddc>
   8572a:	3608      	adds	r6, #8
   8572c:	3c10      	subs	r4, #16
   8572e:	2c10      	cmp	r4, #16
   85730:	f77f af72 	ble.w	85618 <_svfprintf_r+0xcc0>
   85734:	3301      	adds	r3, #1
   85736:	3210      	adds	r2, #16
   85738:	2b07      	cmp	r3, #7
   8573a:	922d      	str	r2, [sp, #180]	; 0xb4
   8573c:	932c      	str	r3, [sp, #176]	; 0xb0
   8573e:	e886 00a0 	stmia.w	r6, {r5, r7}
   85742:	ddf2      	ble.n	8572a <_svfprintf_r+0xdd2>
   85744:	4640      	mov	r0, r8
   85746:	4651      	mov	r1, sl
   85748:	aa2b      	add	r2, sp, #172	; 0xac
   8574a:	f003 ffd5 	bl	896f8 <__ssprint_r>
   8574e:	2800      	cmp	r0, #0
   85750:	f47f aa1a 	bne.w	84b88 <_svfprintf_r+0x230>
   85754:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   85756:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85758:	ae38      	add	r6, sp, #224	; 0xe0
   8575a:	e7e7      	b.n	8572c <_svfprintf_r+0xdd4>
   8575c:	9d18      	ldr	r5, [sp, #96]	; 0x60
   8575e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85760:	44ac      	add	ip, r5
   85762:	9d15      	ldr	r5, [sp, #84]	; 0x54
   85764:	3301      	adds	r3, #1
   85766:	6035      	str	r5, [r6, #0]
   85768:	9d18      	ldr	r5, [sp, #96]	; 0x60
   8576a:	2b07      	cmp	r3, #7
   8576c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   85770:	6075      	str	r5, [r6, #4]
   85772:	932c      	str	r3, [sp, #176]	; 0xb0
   85774:	f300 81f4 	bgt.w	85b60 <_svfprintf_r+0x1208>
   85778:	3608      	adds	r6, #8
   8577a:	e7af      	b.n	856dc <_svfprintf_r+0xd84>
   8577c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8577e:	07ea      	lsls	r2, r5, #31
   85780:	f53f ae2a 	bmi.w	853d8 <_svfprintf_r+0xa80>
   85784:	3401      	adds	r4, #1
   85786:	f10c 0801 	add.w	r8, ip, #1
   8578a:	2301      	movs	r3, #1
   8578c:	2c07      	cmp	r4, #7
   8578e:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   85792:	942c      	str	r4, [sp, #176]	; 0xb0
   85794:	6037      	str	r7, [r6, #0]
   85796:	6073      	str	r3, [r6, #4]
   85798:	f77f ae4f 	ble.w	8543a <_svfprintf_r+0xae2>
   8579c:	e72f      	b.n	855fe <_svfprintf_r+0xca6>
   8579e:	980d      	ldr	r0, [sp, #52]	; 0x34
   857a0:	990c      	ldr	r1, [sp, #48]	; 0x30
   857a2:	aa2b      	add	r2, sp, #172	; 0xac
   857a4:	f003 ffa8 	bl	896f8 <__ssprint_r>
   857a8:	2800      	cmp	r0, #0
   857aa:	f47f a9ed 	bne.w	84b88 <_svfprintf_r+0x230>
   857ae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   857b0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   857b2:	ae38      	add	r6, sp, #224	; 0xe0
   857b4:	e61c      	b.n	853f0 <_svfprintf_r+0xa98>
   857b6:	980d      	ldr	r0, [sp, #52]	; 0x34
   857b8:	990c      	ldr	r1, [sp, #48]	; 0x30
   857ba:	aa2b      	add	r2, sp, #172	; 0xac
   857bc:	f003 ff9c 	bl	896f8 <__ssprint_r>
   857c0:	2800      	cmp	r0, #0
   857c2:	f47f a9e1 	bne.w	84b88 <_svfprintf_r+0x230>
   857c6:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
   857ca:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   857cc:	ae38      	add	r6, sp, #224	; 0xe0
   857ce:	e61e      	b.n	8540e <_svfprintf_r+0xab6>
   857d0:	980d      	ldr	r0, [sp, #52]	; 0x34
   857d2:	990c      	ldr	r1, [sp, #48]	; 0x30
   857d4:	aa2b      	add	r2, sp, #172	; 0xac
   857d6:	f003 ff8f 	bl	896f8 <__ssprint_r>
   857da:	2800      	cmp	r0, #0
   857dc:	f47f a9d4 	bne.w	84b88 <_svfprintf_r+0x230>
   857e0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   857e4:	ae38      	add	r6, sp, #224	; 0xe0
   857e6:	f7ff bad7 	b.w	84d98 <_svfprintf_r+0x440>
   857ea:	f7fe f9f9 	bl	83be0 <__fpclassifyd>
   857ee:	2800      	cmp	r0, #0
   857f0:	f040 80bb 	bne.w	8596a <_svfprintf_r+0x1012>
   857f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   857f6:	4f19      	ldr	r7, [pc, #100]	; (8585c <_svfprintf_r+0xf04>)
   857f8:	4b19      	ldr	r3, [pc, #100]	; (85860 <_svfprintf_r+0xf08>)
   857fa:	f04f 0c03 	mov.w	ip, #3
   857fe:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   85802:	9409      	str	r4, [sp, #36]	; 0x24
   85804:	900a      	str	r0, [sp, #40]	; 0x28
   85806:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   8580a:	9014      	str	r0, [sp, #80]	; 0x50
   8580c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   85810:	bfd8      	it	le
   85812:	461f      	movle	r7, r3
   85814:	4664      	mov	r4, ip
   85816:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   8581a:	f7ff ba34 	b.w	84c86 <_svfprintf_r+0x32e>
   8581e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   85820:	0664      	lsls	r4, r4, #25
   85822:	f140 8150 	bpl.w	85ac6 <_svfprintf_r+0x116e>
   85826:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   8582a:	2500      	movs	r5, #0
   8582c:	f8bc 4000 	ldrh.w	r4, [ip]
   85830:	f10c 0c04 	add.w	ip, ip, #4
   85834:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   85838:	f7ff b9e4 	b.w	84c04 <_svfprintf_r+0x2ac>
   8583c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   85840:	f01c 0f10 	tst.w	ip, #16
   85844:	f000 8146 	beq.w	85ad4 <_svfprintf_r+0x117c>
   85848:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8584a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   8584c:	6823      	ldr	r3, [r4, #0]
   8584e:	3404      	adds	r4, #4
   85850:	9410      	str	r4, [sp, #64]	; 0x40
   85852:	601d      	str	r5, [r3, #0]
   85854:	f7ff b8a6 	b.w	849a4 <_svfprintf_r+0x4c>
   85858:	0008a5c4 	.word	0x0008a5c4
   8585c:	0008a5e0 	.word	0x0008a5e0
   85860:	0008a5dc 	.word	0x0008a5dc
   85864:	462c      	mov	r4, r5
   85866:	463d      	mov	r5, r7
   85868:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   8586a:	4694      	mov	ip, r2
   8586c:	3301      	adds	r3, #1
   8586e:	44a4      	add	ip, r4
   85870:	2b07      	cmp	r3, #7
   85872:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   85876:	932c      	str	r3, [sp, #176]	; 0xb0
   85878:	6035      	str	r5, [r6, #0]
   8587a:	6074      	str	r4, [r6, #4]
   8587c:	f73f af1a 	bgt.w	856b4 <_svfprintf_r+0xd5c>
   85880:	3608      	adds	r6, #8
   85882:	e722      	b.n	856ca <_svfprintf_r+0xd72>
   85884:	980d      	ldr	r0, [sp, #52]	; 0x34
   85886:	990c      	ldr	r1, [sp, #48]	; 0x30
   85888:	aa2b      	add	r2, sp, #172	; 0xac
   8588a:	f003 ff35 	bl	896f8 <__ssprint_r>
   8588e:	2800      	cmp	r0, #0
   85890:	f47f a97a 	bne.w	84b88 <_svfprintf_r+0x230>
   85894:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   85898:	ae38      	add	r6, sp, #224	; 0xe0
   8589a:	e507      	b.n	852ac <_svfprintf_r+0x954>
   8589c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   8589e:	49b7      	ldr	r1, [pc, #732]	; (85b7c <_svfprintf_r+0x1224>)
   858a0:	3201      	adds	r2, #1
   858a2:	f10c 0c01 	add.w	ip, ip, #1
   858a6:	2001      	movs	r0, #1
   858a8:	2a07      	cmp	r2, #7
   858aa:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   858ae:	922c      	str	r2, [sp, #176]	; 0xb0
   858b0:	6031      	str	r1, [r6, #0]
   858b2:	6070      	str	r0, [r6, #4]
   858b4:	f300 80f7 	bgt.w	85aa6 <_svfprintf_r+0x114e>
   858b8:	3608      	adds	r6, #8
   858ba:	461c      	mov	r4, r3
   858bc:	b92c      	cbnz	r4, 858ca <_svfprintf_r+0xf72>
   858be:	9d11      	ldr	r5, [sp, #68]	; 0x44
   858c0:	b91d      	cbnz	r5, 858ca <_svfprintf_r+0xf72>
   858c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   858c4:	07e8      	lsls	r0, r5, #31
   858c6:	f57f aab9 	bpl.w	84e3c <_svfprintf_r+0x4e4>
   858ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   858cc:	9d15      	ldr	r5, [sp, #84]	; 0x54
   858ce:	9918      	ldr	r1, [sp, #96]	; 0x60
   858d0:	3301      	adds	r3, #1
   858d2:	6035      	str	r5, [r6, #0]
   858d4:	9d18      	ldr	r5, [sp, #96]	; 0x60
   858d6:	4461      	add	r1, ip
   858d8:	2b07      	cmp	r3, #7
   858da:	912d      	str	r1, [sp, #180]	; 0xb4
   858dc:	6075      	str	r5, [r6, #4]
   858de:	932c      	str	r3, [sp, #176]	; 0xb0
   858e0:	f300 81de 	bgt.w	85ca0 <_svfprintf_r+0x1348>
   858e4:	f106 0208 	add.w	r2, r6, #8
   858e8:	4264      	negs	r4, r4
   858ea:	2c00      	cmp	r4, #0
   858ec:	f340 810b 	ble.w	85b06 <_svfprintf_r+0x11ae>
   858f0:	2c10      	cmp	r4, #16
   858f2:	4da3      	ldr	r5, [pc, #652]	; (85b80 <_svfprintf_r+0x1228>)
   858f4:	f340 8148 	ble.w	85b88 <_svfprintf_r+0x1230>
   858f8:	46a3      	mov	fp, r4
   858fa:	2610      	movs	r6, #16
   858fc:	460c      	mov	r4, r1
   858fe:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   85902:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   85906:	e006      	b.n	85916 <_svfprintf_r+0xfbe>
   85908:	3208      	adds	r2, #8
   8590a:	f1ab 0b10 	sub.w	fp, fp, #16
   8590e:	f1bb 0f10 	cmp.w	fp, #16
   85912:	f340 8137 	ble.w	85b84 <_svfprintf_r+0x122c>
   85916:	3301      	adds	r3, #1
   85918:	3410      	adds	r4, #16
   8591a:	2b07      	cmp	r3, #7
   8591c:	942d      	str	r4, [sp, #180]	; 0xb4
   8591e:	932c      	str	r3, [sp, #176]	; 0xb0
   85920:	e882 0060 	stmia.w	r2, {r5, r6}
   85924:	ddf0      	ble.n	85908 <_svfprintf_r+0xfb0>
   85926:	4640      	mov	r0, r8
   85928:	4651      	mov	r1, sl
   8592a:	aa2b      	add	r2, sp, #172	; 0xac
   8592c:	f003 fee4 	bl	896f8 <__ssprint_r>
   85930:	2800      	cmp	r0, #0
   85932:	f47f a929 	bne.w	84b88 <_svfprintf_r+0x230>
   85936:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
   85938:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8593a:	aa38      	add	r2, sp, #224	; 0xe0
   8593c:	e7e5      	b.n	8590a <_svfprintf_r+0xfb2>
   8593e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   85940:	f109 0901 	add.w	r9, r9, #1
   85944:	f044 0420 	orr.w	r4, r4, #32
   85948:	9409      	str	r4, [sp, #36]	; 0x24
   8594a:	f893 8001 	ldrb.w	r8, [r3, #1]
   8594e:	f7ff b85f 	b.w	84a10 <_svfprintf_r+0xb8>
   85952:	980d      	ldr	r0, [sp, #52]	; 0x34
   85954:	990c      	ldr	r1, [sp, #48]	; 0x30
   85956:	aa2b      	add	r2, sp, #172	; 0xac
   85958:	f003 fece 	bl	896f8 <__ssprint_r>
   8595c:	2800      	cmp	r0, #0
   8595e:	f47f a913 	bne.w	84b88 <_svfprintf_r+0x230>
   85962:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   85966:	ae38      	add	r6, sp, #224	; 0xe0
   85968:	e4b6      	b.n	852d8 <_svfprintf_r+0x980>
   8596a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8596c:	f028 0a20 	bic.w	sl, r8, #32
   85970:	3501      	adds	r5, #1
   85972:	f000 80a5 	beq.w	85ac0 <_svfprintf_r+0x1168>
   85976:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   8597a:	d104      	bne.n	85986 <_svfprintf_r+0x102e>
   8597c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8597e:	2d00      	cmp	r5, #0
   85980:	bf08      	it	eq
   85982:	2501      	moveq	r5, #1
   85984:	950a      	str	r5, [sp, #40]	; 0x28
   85986:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   8598a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   8598e:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
   85992:	2b00      	cmp	r3, #0
   85994:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
   85998:	f2c0 819c 	blt.w	85cd4 <_svfprintf_r+0x137c>
   8599c:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   859a0:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
   859a4:	f04f 0b00 	mov.w	fp, #0
   859a8:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   859ac:	f000 819b 	beq.w	85ce6 <_svfprintf_r+0x138e>
   859b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   859b4:	f000 81a9 	beq.w	85d0a <_svfprintf_r+0x13b2>
   859b8:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   859bc:	bf0a      	itet	eq
   859be:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
   859c0:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   859c2:	1c65      	addeq	r5, r4, #1
   859c4:	2002      	movs	r0, #2
   859c6:	a925      	add	r1, sp, #148	; 0x94
   859c8:	aa26      	add	r2, sp, #152	; 0x98
   859ca:	ab29      	add	r3, sp, #164	; 0xa4
   859cc:	e88d 0021 	stmia.w	sp, {r0, r5}
   859d0:	9203      	str	r2, [sp, #12]
   859d2:	9304      	str	r3, [sp, #16]
   859d4:	9102      	str	r1, [sp, #8]
   859d6:	980d      	ldr	r0, [sp, #52]	; 0x34
   859d8:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
   859dc:	f001 f9dc 	bl	86d98 <_dtoa_r>
   859e0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   859e4:	4607      	mov	r7, r0
   859e6:	d002      	beq.n	859ee <_svfprintf_r+0x1096>
   859e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   859ec:	d105      	bne.n	859fa <_svfprintf_r+0x10a2>
   859ee:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   859f2:	f01c 0f01 	tst.w	ip, #1
   859f6:	f000 819c 	beq.w	85d32 <_svfprintf_r+0x13da>
   859fa:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   859fe:	eb07 0405 	add.w	r4, r7, r5
   85a02:	f000 811c 	beq.w	85c3e <_svfprintf_r+0x12e6>
   85a06:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
   85a0a:	2200      	movs	r2, #0
   85a0c:	2300      	movs	r3, #0
   85a0e:	f7fe fd37 	bl	84480 <__aeabi_dcmpeq>
   85a12:	2800      	cmp	r0, #0
   85a14:	f040 8105 	bne.w	85c22 <_svfprintf_r+0x12ca>
   85a18:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85a1a:	429c      	cmp	r4, r3
   85a1c:	d906      	bls.n	85a2c <_svfprintf_r+0x10d4>
   85a1e:	2130      	movs	r1, #48	; 0x30
   85a20:	1c5a      	adds	r2, r3, #1
   85a22:	9229      	str	r2, [sp, #164]	; 0xa4
   85a24:	7019      	strb	r1, [r3, #0]
   85a26:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85a28:	429c      	cmp	r4, r3
   85a2a:	d8f9      	bhi.n	85a20 <_svfprintf_r+0x10c8>
   85a2c:	1bdb      	subs	r3, r3, r7
   85a2e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   85a32:	9311      	str	r3, [sp, #68]	; 0x44
   85a34:	f000 80ed 	beq.w	85c12 <_svfprintf_r+0x12ba>
   85a38:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   85a3c:	f340 81f2 	ble.w	85e24 <_svfprintf_r+0x14cc>
   85a40:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   85a44:	f000 8168 	beq.w	85d18 <_svfprintf_r+0x13c0>
   85a48:	9c25      	ldr	r4, [sp, #148]	; 0x94
   85a4a:	9414      	str	r4, [sp, #80]	; 0x50
   85a4c:	9c11      	ldr	r4, [sp, #68]	; 0x44
   85a4e:	9d14      	ldr	r5, [sp, #80]	; 0x50
   85a50:	42ac      	cmp	r4, r5
   85a52:	f300 8132 	bgt.w	85cba <_svfprintf_r+0x1362>
   85a56:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   85a5a:	f01c 0f01 	tst.w	ip, #1
   85a5e:	f040 81ad 	bne.w	85dbc <_svfprintf_r+0x1464>
   85a62:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
   85a66:	462c      	mov	r4, r5
   85a68:	f04f 0867 	mov.w	r8, #103	; 0x67
   85a6c:	f1bb 0f00 	cmp.w	fp, #0
   85a70:	f040 80b2 	bne.w	85bd8 <_svfprintf_r+0x1280>
   85a74:	9d12      	ldr	r5, [sp, #72]	; 0x48
   85a76:	930b      	str	r3, [sp, #44]	; 0x2c
   85a78:	9509      	str	r5, [sp, #36]	; 0x24
   85a7a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   85a7e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   85a82:	f7ff b900 	b.w	84c86 <_svfprintf_r+0x32e>
   85a86:	980d      	ldr	r0, [sp, #52]	; 0x34
   85a88:	2140      	movs	r1, #64	; 0x40
   85a8a:	f002 fda7 	bl	885dc <_malloc_r>
   85a8e:	6020      	str	r0, [r4, #0]
   85a90:	6120      	str	r0, [r4, #16]
   85a92:	2800      	cmp	r0, #0
   85a94:	f000 81bf 	beq.w	85e16 <_svfprintf_r+0x14be>
   85a98:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   85a9c:	2340      	movs	r3, #64	; 0x40
   85a9e:	f8cc 3014 	str.w	r3, [ip, #20]
   85aa2:	f7fe bf6f 	b.w	84984 <_svfprintf_r+0x2c>
   85aa6:	980d      	ldr	r0, [sp, #52]	; 0x34
   85aa8:	990c      	ldr	r1, [sp, #48]	; 0x30
   85aaa:	aa2b      	add	r2, sp, #172	; 0xac
   85aac:	f003 fe24 	bl	896f8 <__ssprint_r>
   85ab0:	2800      	cmp	r0, #0
   85ab2:	f47f a869 	bne.w	84b88 <_svfprintf_r+0x230>
   85ab6:	9c25      	ldr	r4, [sp, #148]	; 0x94
   85ab8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   85abc:	ae38      	add	r6, sp, #224	; 0xe0
   85abe:	e6fd      	b.n	858bc <_svfprintf_r+0xf64>
   85ac0:	2406      	movs	r4, #6
   85ac2:	940a      	str	r4, [sp, #40]	; 0x28
   85ac4:	e75f      	b.n	85986 <_svfprintf_r+0x102e>
   85ac6:	9d10      	ldr	r5, [sp, #64]	; 0x40
   85ac8:	682c      	ldr	r4, [r5, #0]
   85aca:	3504      	adds	r5, #4
   85acc:	9510      	str	r5, [sp, #64]	; 0x40
   85ace:	2500      	movs	r5, #0
   85ad0:	f7ff b898 	b.w	84c04 <_svfprintf_r+0x2ac>
   85ad4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   85ad8:	f01c 0f40 	tst.w	ip, #64	; 0x40
   85adc:	f000 8087 	beq.w	85bee <_svfprintf_r+0x1296>
   85ae0:	9c10      	ldr	r4, [sp, #64]	; 0x40
   85ae2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   85ae4:	6823      	ldr	r3, [r4, #0]
   85ae6:	3404      	adds	r4, #4
   85ae8:	9410      	str	r4, [sp, #64]	; 0x40
   85aea:	801d      	strh	r5, [r3, #0]
   85aec:	f7fe bf5a 	b.w	849a4 <_svfprintf_r+0x4c>
   85af0:	980d      	ldr	r0, [sp, #52]	; 0x34
   85af2:	990c      	ldr	r1, [sp, #48]	; 0x30
   85af4:	aa2b      	add	r2, sp, #172	; 0xac
   85af6:	f003 fdff 	bl	896f8 <__ssprint_r>
   85afa:	2800      	cmp	r0, #0
   85afc:	f47f a844 	bne.w	84b88 <_svfprintf_r+0x230>
   85b00:	992d      	ldr	r1, [sp, #180]	; 0xb4
   85b02:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85b04:	aa38      	add	r2, sp, #224	; 0xe0
   85b06:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   85b0a:	3301      	adds	r3, #1
   85b0c:	9c11      	ldr	r4, [sp, #68]	; 0x44
   85b0e:	448c      	add	ip, r1
   85b10:	2b07      	cmp	r3, #7
   85b12:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   85b16:	932c      	str	r3, [sp, #176]	; 0xb0
   85b18:	6017      	str	r7, [r2, #0]
   85b1a:	6054      	str	r4, [r2, #4]
   85b1c:	f73f ac9c 	bgt.w	85458 <_svfprintf_r+0xb00>
   85b20:	f102 0608 	add.w	r6, r2, #8
   85b24:	f7ff b98a 	b.w	84e3c <_svfprintf_r+0x4e4>
   85b28:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   85b2c:	f7fe feb2 	bl	84894 <strlen>
   85b30:	9510      	str	r5, [sp, #64]	; 0x40
   85b32:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85b34:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   85b38:	4604      	mov	r4, r0
   85b3a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   85b3e:	9514      	str	r5, [sp, #80]	; 0x50
   85b40:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   85b44:	f7ff b89f 	b.w	84c86 <_svfprintf_r+0x32e>
   85b48:	980d      	ldr	r0, [sp, #52]	; 0x34
   85b4a:	990c      	ldr	r1, [sp, #48]	; 0x30
   85b4c:	aa2b      	add	r2, sp, #172	; 0xac
   85b4e:	f003 fdd3 	bl	896f8 <__ssprint_r>
   85b52:	2800      	cmp	r0, #0
   85b54:	f47f a818 	bne.w	84b88 <_svfprintf_r+0x230>
   85b58:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   85b5c:	ae38      	add	r6, sp, #224	; 0xe0
   85b5e:	e4d6      	b.n	8550e <_svfprintf_r+0xbb6>
   85b60:	980d      	ldr	r0, [sp, #52]	; 0x34
   85b62:	990c      	ldr	r1, [sp, #48]	; 0x30
   85b64:	aa2b      	add	r2, sp, #172	; 0xac
   85b66:	f003 fdc7 	bl	896f8 <__ssprint_r>
   85b6a:	2800      	cmp	r0, #0
   85b6c:	f47f a80c 	bne.w	84b88 <_svfprintf_r+0x230>
   85b70:	9c25      	ldr	r4, [sp, #148]	; 0x94
   85b72:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   85b76:	ae38      	add	r6, sp, #224	; 0xe0
   85b78:	e5b0      	b.n	856dc <_svfprintf_r+0xd84>
   85b7a:	bf00      	nop
   85b7c:	0008a198 	.word	0x0008a198
   85b80:	0008a5c4 	.word	0x0008a5c4
   85b84:	4621      	mov	r1, r4
   85b86:	465c      	mov	r4, fp
   85b88:	3301      	adds	r3, #1
   85b8a:	4421      	add	r1, r4
   85b8c:	2b07      	cmp	r3, #7
   85b8e:	912d      	str	r1, [sp, #180]	; 0xb4
   85b90:	932c      	str	r3, [sp, #176]	; 0xb0
   85b92:	6015      	str	r5, [r2, #0]
   85b94:	6054      	str	r4, [r2, #4]
   85b96:	dcab      	bgt.n	85af0 <_svfprintf_r+0x1198>
   85b98:	3208      	adds	r2, #8
   85b9a:	e7b4      	b.n	85b06 <_svfprintf_r+0x11ae>
   85b9c:	980d      	ldr	r0, [sp, #52]	; 0x34
   85b9e:	990c      	ldr	r1, [sp, #48]	; 0x30
   85ba0:	aa2b      	add	r2, sp, #172	; 0xac
   85ba2:	f003 fda9 	bl	896f8 <__ssprint_r>
   85ba6:	2800      	cmp	r0, #0
   85ba8:	f47e afee 	bne.w	84b88 <_svfprintf_r+0x230>
   85bac:	9c25      	ldr	r4, [sp, #148]	; 0x94
   85bae:	9911      	ldr	r1, [sp, #68]	; 0x44
   85bb0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   85bb4:	1b0c      	subs	r4, r1, r4
   85bb6:	ae38      	add	r6, sp, #224	; 0xe0
   85bb8:	e5a5      	b.n	85706 <_svfprintf_r+0xdae>
   85bba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   85bbc:	46ba      	mov	sl, r7
   85bbe:	2c06      	cmp	r4, #6
   85bc0:	bf28      	it	cs
   85bc2:	2406      	movcs	r4, #6
   85bc4:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
   85bc8:	970a      	str	r7, [sp, #40]	; 0x28
   85bca:	9714      	str	r7, [sp, #80]	; 0x50
   85bcc:	9510      	str	r5, [sp, #64]	; 0x40
   85bce:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   85bd2:	4f97      	ldr	r7, [pc, #604]	; (85e30 <_svfprintf_r+0x14d8>)
   85bd4:	f7ff b857 	b.w	84c86 <_svfprintf_r+0x32e>
   85bd8:	9d12      	ldr	r5, [sp, #72]	; 0x48
   85bda:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   85bde:	9509      	str	r5, [sp, #36]	; 0x24
   85be0:	2500      	movs	r5, #0
   85be2:	930b      	str	r3, [sp, #44]	; 0x2c
   85be4:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   85be8:	950a      	str	r5, [sp, #40]	; 0x28
   85bea:	f7ff b84f 	b.w	84c8c <_svfprintf_r+0x334>
   85bee:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   85bf2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   85bf4:	f8dc 3000 	ldr.w	r3, [ip]
   85bf8:	f10c 0c04 	add.w	ip, ip, #4
   85bfc:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   85c00:	601c      	str	r4, [r3, #0]
   85c02:	f7fe becf 	b.w	849a4 <_svfprintf_r+0x4c>
   85c06:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   85c0a:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   85c0e:	f7ff ba99 	b.w	85144 <_svfprintf_r+0x7ec>
   85c12:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85c14:	1cdc      	adds	r4, r3, #3
   85c16:	db19      	blt.n	85c4c <_svfprintf_r+0x12f4>
   85c18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   85c1a:	429c      	cmp	r4, r3
   85c1c:	db16      	blt.n	85c4c <_svfprintf_r+0x12f4>
   85c1e:	9314      	str	r3, [sp, #80]	; 0x50
   85c20:	e714      	b.n	85a4c <_svfprintf_r+0x10f4>
   85c22:	4623      	mov	r3, r4
   85c24:	e702      	b.n	85a2c <_svfprintf_r+0x10d4>
   85c26:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
   85c2a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   85c2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   85c30:	9510      	str	r5, [sp, #64]	; 0x40
   85c32:	900a      	str	r0, [sp, #40]	; 0x28
   85c34:	9014      	str	r0, [sp, #80]	; 0x50
   85c36:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   85c3a:	f7ff b824 	b.w	84c86 <_svfprintf_r+0x32e>
   85c3e:	783b      	ldrb	r3, [r7, #0]
   85c40:	2b30      	cmp	r3, #48	; 0x30
   85c42:	f000 80ad 	beq.w	85da0 <_svfprintf_r+0x1448>
   85c46:	9d25      	ldr	r5, [sp, #148]	; 0x94
   85c48:	442c      	add	r4, r5
   85c4a:	e6dc      	b.n	85a06 <_svfprintf_r+0x10ae>
   85c4c:	f1a8 0802 	sub.w	r8, r8, #2
   85c50:	1e59      	subs	r1, r3, #1
   85c52:	2900      	cmp	r1, #0
   85c54:	9125      	str	r1, [sp, #148]	; 0x94
   85c56:	bfba      	itte	lt
   85c58:	4249      	neglt	r1, r1
   85c5a:	232d      	movlt	r3, #45	; 0x2d
   85c5c:	232b      	movge	r3, #43	; 0x2b
   85c5e:	2909      	cmp	r1, #9
   85c60:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
   85c64:	f88d 309d 	strb.w	r3, [sp, #157]	; 0x9d
   85c68:	dc65      	bgt.n	85d36 <_svfprintf_r+0x13de>
   85c6a:	2330      	movs	r3, #48	; 0x30
   85c6c:	3130      	adds	r1, #48	; 0x30
   85c6e:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
   85c72:	f88d 109f 	strb.w	r1, [sp, #159]	; 0x9f
   85c76:	ab28      	add	r3, sp, #160	; 0xa0
   85c78:	9d11      	ldr	r5, [sp, #68]	; 0x44
   85c7a:	aa27      	add	r2, sp, #156	; 0x9c
   85c7c:	9c11      	ldr	r4, [sp, #68]	; 0x44
   85c7e:	1a9a      	subs	r2, r3, r2
   85c80:	2d01      	cmp	r5, #1
   85c82:	9219      	str	r2, [sp, #100]	; 0x64
   85c84:	4414      	add	r4, r2
   85c86:	f340 80b7 	ble.w	85df8 <_svfprintf_r+0x14a0>
   85c8a:	3401      	adds	r4, #1
   85c8c:	2500      	movs	r5, #0
   85c8e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   85c92:	9514      	str	r5, [sp, #80]	; 0x50
   85c94:	e6ea      	b.n	85a6c <_svfprintf_r+0x1114>
   85c96:	2400      	movs	r4, #0
   85c98:	4681      	mov	r9, r0
   85c9a:	940a      	str	r4, [sp, #40]	; 0x28
   85c9c:	f7fe beba 	b.w	84a14 <_svfprintf_r+0xbc>
   85ca0:	980d      	ldr	r0, [sp, #52]	; 0x34
   85ca2:	990c      	ldr	r1, [sp, #48]	; 0x30
   85ca4:	aa2b      	add	r2, sp, #172	; 0xac
   85ca6:	f003 fd27 	bl	896f8 <__ssprint_r>
   85caa:	2800      	cmp	r0, #0
   85cac:	f47e af6c 	bne.w	84b88 <_svfprintf_r+0x230>
   85cb0:	9c25      	ldr	r4, [sp, #148]	; 0x94
   85cb2:	992d      	ldr	r1, [sp, #180]	; 0xb4
   85cb4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85cb6:	aa38      	add	r2, sp, #224	; 0xe0
   85cb8:	e616      	b.n	858e8 <_svfprintf_r+0xf90>
   85cba:	9c14      	ldr	r4, [sp, #80]	; 0x50
   85cbc:	9d11      	ldr	r5, [sp, #68]	; 0x44
   85cbe:	2c00      	cmp	r4, #0
   85cc0:	bfd4      	ite	le
   85cc2:	f1c4 0402 	rsble	r4, r4, #2
   85cc6:	2401      	movgt	r4, #1
   85cc8:	442c      	add	r4, r5
   85cca:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   85cce:	f04f 0867 	mov.w	r8, #103	; 0x67
   85cd2:	e6cb      	b.n	85a6c <_svfprintf_r+0x1114>
   85cd4:	9917      	ldr	r1, [sp, #92]	; 0x5c
   85cd6:	9816      	ldr	r0, [sp, #88]	; 0x58
   85cd8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   85cdc:	9020      	str	r0, [sp, #128]	; 0x80
   85cde:	9121      	str	r1, [sp, #132]	; 0x84
   85ce0:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   85ce4:	e660      	b.n	859a8 <_svfprintf_r+0x1050>
   85ce6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85ce8:	2003      	movs	r0, #3
   85cea:	a925      	add	r1, sp, #148	; 0x94
   85cec:	aa26      	add	r2, sp, #152	; 0x98
   85cee:	ab29      	add	r3, sp, #164	; 0xa4
   85cf0:	9501      	str	r5, [sp, #4]
   85cf2:	9000      	str	r0, [sp, #0]
   85cf4:	9203      	str	r2, [sp, #12]
   85cf6:	9304      	str	r3, [sp, #16]
   85cf8:	9102      	str	r1, [sp, #8]
   85cfa:	980d      	ldr	r0, [sp, #52]	; 0x34
   85cfc:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
   85d00:	f001 f84a 	bl	86d98 <_dtoa_r>
   85d04:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85d06:	4607      	mov	r7, r0
   85d08:	e677      	b.n	859fa <_svfprintf_r+0x10a2>
   85d0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   85d0c:	2003      	movs	r0, #3
   85d0e:	a925      	add	r1, sp, #148	; 0x94
   85d10:	aa26      	add	r2, sp, #152	; 0x98
   85d12:	ab29      	add	r3, sp, #164	; 0xa4
   85d14:	9401      	str	r4, [sp, #4]
   85d16:	e7ec      	b.n	85cf2 <_svfprintf_r+0x139a>
   85d18:	9d25      	ldr	r5, [sp, #148]	; 0x94
   85d1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   85d1c:	2d00      	cmp	r5, #0
   85d1e:	9514      	str	r5, [sp, #80]	; 0x50
   85d20:	dd63      	ble.n	85dea <_svfprintf_r+0x1492>
   85d22:	bbb4      	cbnz	r4, 85d92 <_svfprintf_r+0x143a>
   85d24:	9d09      	ldr	r5, [sp, #36]	; 0x24
   85d26:	07e8      	lsls	r0, r5, #31
   85d28:	d433      	bmi.n	85d92 <_svfprintf_r+0x143a>
   85d2a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   85d2c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   85d30:	e69c      	b.n	85a6c <_svfprintf_r+0x1114>
   85d32:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85d34:	e67a      	b.n	85a2c <_svfprintf_r+0x10d4>
   85d36:	f10d 02aa 	add.w	r2, sp, #170	; 0xaa
   85d3a:	4d3e      	ldr	r5, [pc, #248]	; (85e34 <_svfprintf_r+0x14dc>)
   85d3c:	17cb      	asrs	r3, r1, #31
   85d3e:	fb85 5001 	smull	r5, r0, r5, r1
   85d42:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
   85d46:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   85d4a:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
   85d4e:	2809      	cmp	r0, #9
   85d50:	4613      	mov	r3, r2
   85d52:	f101 0230 	add.w	r2, r1, #48	; 0x30
   85d56:	701a      	strb	r2, [r3, #0]
   85d58:	4601      	mov	r1, r0
   85d5a:	f103 32ff 	add.w	r2, r3, #4294967295
   85d5e:	dcec      	bgt.n	85d3a <_svfprintf_r+0x13e2>
   85d60:	f100 0130 	add.w	r1, r0, #48	; 0x30
   85d64:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
   85d68:	b2c9      	uxtb	r1, r1
   85d6a:	4294      	cmp	r4, r2
   85d6c:	f803 1c01 	strb.w	r1, [r3, #-1]
   85d70:	d95a      	bls.n	85e28 <_svfprintf_r+0x14d0>
   85d72:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
   85d76:	461a      	mov	r2, r3
   85d78:	e001      	b.n	85d7e <_svfprintf_r+0x1426>
   85d7a:	f812 1b01 	ldrb.w	r1, [r2], #1
   85d7e:	42a2      	cmp	r2, r4
   85d80:	f800 1f01 	strb.w	r1, [r0, #1]!
   85d84:	d1f9      	bne.n	85d7a <_svfprintf_r+0x1422>
   85d86:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
   85d8a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
   85d8e:	3bf6      	subs	r3, #246	; 0xf6
   85d90:	e772      	b.n	85c78 <_svfprintf_r+0x1320>
   85d92:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85d94:	1c6c      	adds	r4, r5, #1
   85d96:	9d14      	ldr	r5, [sp, #80]	; 0x50
   85d98:	442c      	add	r4, r5
   85d9a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   85d9e:	e665      	b.n	85a6c <_svfprintf_r+0x1114>
   85da0:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
   85da4:	2200      	movs	r2, #0
   85da6:	2300      	movs	r3, #0
   85da8:	f7fe fb6a 	bl	84480 <__aeabi_dcmpeq>
   85dac:	2800      	cmp	r0, #0
   85dae:	f47f af4a 	bne.w	85c46 <_svfprintf_r+0x12ee>
   85db2:	f1c5 0501 	rsb	r5, r5, #1
   85db6:	9525      	str	r5, [sp, #148]	; 0x94
   85db8:	442c      	add	r4, r5
   85dba:	e624      	b.n	85a06 <_svfprintf_r+0x10ae>
   85dbc:	9d14      	ldr	r5, [sp, #80]	; 0x50
   85dbe:	f04f 0867 	mov.w	r8, #103	; 0x67
   85dc2:	1c6c      	adds	r4, r5, #1
   85dc4:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   85dc8:	e650      	b.n	85a6c <_svfprintf_r+0x1114>
   85dca:	9d10      	ldr	r5, [sp, #64]	; 0x40
   85dcc:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   85dd0:	682d      	ldr	r5, [r5, #0]
   85dd2:	f10c 0304 	add.w	r3, ip, #4
   85dd6:	2d00      	cmp	r5, #0
   85dd8:	f899 8001 	ldrb.w	r8, [r9, #1]
   85ddc:	950a      	str	r5, [sp, #40]	; 0x28
   85dde:	9310      	str	r3, [sp, #64]	; 0x40
   85de0:	4681      	mov	r9, r0
   85de2:	f6be ae15 	bge.w	84a10 <_svfprintf_r+0xb8>
   85de6:	f7fe be10 	b.w	84a0a <_svfprintf_r+0xb2>
   85dea:	b97c      	cbnz	r4, 85e0c <_svfprintf_r+0x14b4>
   85dec:	9d09      	ldr	r5, [sp, #36]	; 0x24
   85dee:	07e9      	lsls	r1, r5, #31
   85df0:	d40c      	bmi.n	85e0c <_svfprintf_r+0x14b4>
   85df2:	2301      	movs	r3, #1
   85df4:	461c      	mov	r4, r3
   85df6:	e639      	b.n	85a6c <_svfprintf_r+0x1114>
   85df8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   85dfc:	f01c 0301 	ands.w	r3, ip, #1
   85e00:	f47f af43 	bne.w	85c8a <_svfprintf_r+0x1332>
   85e04:	9314      	str	r3, [sp, #80]	; 0x50
   85e06:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   85e0a:	e62f      	b.n	85a6c <_svfprintf_r+0x1114>
   85e0c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85e0e:	1cac      	adds	r4, r5, #2
   85e10:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   85e14:	e62a      	b.n	85a6c <_svfprintf_r+0x1114>
   85e16:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   85e18:	230c      	movs	r3, #12
   85e1a:	602b      	str	r3, [r5, #0]
   85e1c:	f04f 30ff 	mov.w	r0, #4294967295
   85e20:	f7fe beba 	b.w	84b98 <_svfprintf_r+0x240>
   85e24:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85e26:	e713      	b.n	85c50 <_svfprintf_r+0x12f8>
   85e28:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
   85e2c:	e724      	b.n	85c78 <_svfprintf_r+0x1320>
   85e2e:	bf00      	nop
   85e30:	0008a60c 	.word	0x0008a60c
   85e34:	66666667 	.word	0x66666667

00085e38 <__sprint_r.part.0>:
   85e38:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   85e3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85e3e:	049c      	lsls	r4, r3, #18
   85e40:	460e      	mov	r6, r1
   85e42:	4680      	mov	r8, r0
   85e44:	4691      	mov	r9, r2
   85e46:	d52a      	bpl.n	85e9e <__sprint_r.part.0+0x66>
   85e48:	6893      	ldr	r3, [r2, #8]
   85e4a:	6812      	ldr	r2, [r2, #0]
   85e4c:	f102 0a08 	add.w	sl, r2, #8
   85e50:	b31b      	cbz	r3, 85e9a <__sprint_r.part.0+0x62>
   85e52:	e91a 00a0 	ldmdb	sl, {r5, r7}
   85e56:	08bf      	lsrs	r7, r7, #2
   85e58:	d017      	beq.n	85e8a <__sprint_r.part.0+0x52>
   85e5a:	3d04      	subs	r5, #4
   85e5c:	2400      	movs	r4, #0
   85e5e:	e001      	b.n	85e64 <__sprint_r.part.0+0x2c>
   85e60:	42a7      	cmp	r7, r4
   85e62:	d010      	beq.n	85e86 <__sprint_r.part.0+0x4e>
   85e64:	4640      	mov	r0, r8
   85e66:	f855 1f04 	ldr.w	r1, [r5, #4]!
   85e6a:	4632      	mov	r2, r6
   85e6c:	f002 f806 	bl	87e7c <_fputwc_r>
   85e70:	1c43      	adds	r3, r0, #1
   85e72:	f104 0401 	add.w	r4, r4, #1
   85e76:	d1f3      	bne.n	85e60 <__sprint_r.part.0+0x28>
   85e78:	2300      	movs	r3, #0
   85e7a:	f8c9 3008 	str.w	r3, [r9, #8]
   85e7e:	f8c9 3004 	str.w	r3, [r9, #4]
   85e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85e86:	f8d9 3008 	ldr.w	r3, [r9, #8]
   85e8a:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   85e8e:	f8c9 3008 	str.w	r3, [r9, #8]
   85e92:	f10a 0a08 	add.w	sl, sl, #8
   85e96:	2b00      	cmp	r3, #0
   85e98:	d1db      	bne.n	85e52 <__sprint_r.part.0+0x1a>
   85e9a:	2000      	movs	r0, #0
   85e9c:	e7ec      	b.n	85e78 <__sprint_r.part.0+0x40>
   85e9e:	f002 f967 	bl	88170 <__sfvwrite_r>
   85ea2:	2300      	movs	r3, #0
   85ea4:	f8c9 3008 	str.w	r3, [r9, #8]
   85ea8:	f8c9 3004 	str.w	r3, [r9, #4]
   85eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00085eb0 <_vfiprintf_r>:
   85eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85eb4:	b0b1      	sub	sp, #196	; 0xc4
   85eb6:	461c      	mov	r4, r3
   85eb8:	9102      	str	r1, [sp, #8]
   85eba:	4690      	mov	r8, r2
   85ebc:	9308      	str	r3, [sp, #32]
   85ebe:	9006      	str	r0, [sp, #24]
   85ec0:	b118      	cbz	r0, 85eca <_vfiprintf_r+0x1a>
   85ec2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85ec4:	2b00      	cmp	r3, #0
   85ec6:	f000 80e8 	beq.w	8609a <_vfiprintf_r+0x1ea>
   85eca:	9d02      	ldr	r5, [sp, #8]
   85ecc:	89ab      	ldrh	r3, [r5, #12]
   85ece:	b29a      	uxth	r2, r3
   85ed0:	0490      	lsls	r0, r2, #18
   85ed2:	d407      	bmi.n	85ee4 <_vfiprintf_r+0x34>
   85ed4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   85ed6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   85eda:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   85ede:	81ab      	strh	r3, [r5, #12]
   85ee0:	b29a      	uxth	r2, r3
   85ee2:	6669      	str	r1, [r5, #100]	; 0x64
   85ee4:	0711      	lsls	r1, r2, #28
   85ee6:	f140 80b7 	bpl.w	86058 <_vfiprintf_r+0x1a8>
   85eea:	f8dd b008 	ldr.w	fp, [sp, #8]
   85eee:	f8db 3010 	ldr.w	r3, [fp, #16]
   85ef2:	2b00      	cmp	r3, #0
   85ef4:	f000 80b0 	beq.w	86058 <_vfiprintf_r+0x1a8>
   85ef8:	f002 021a 	and.w	r2, r2, #26
   85efc:	2a0a      	cmp	r2, #10
   85efe:	f000 80b7 	beq.w	86070 <_vfiprintf_r+0x1c0>
   85f02:	2300      	movs	r3, #0
   85f04:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   85f08:	930a      	str	r3, [sp, #40]	; 0x28
   85f0a:	9315      	str	r3, [sp, #84]	; 0x54
   85f0c:	9314      	str	r3, [sp, #80]	; 0x50
   85f0e:	9309      	str	r3, [sp, #36]	; 0x24
   85f10:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   85f14:	464e      	mov	r6, r9
   85f16:	f898 3000 	ldrb.w	r3, [r8]
   85f1a:	2b00      	cmp	r3, #0
   85f1c:	f000 84c8 	beq.w	868b0 <_vfiprintf_r+0xa00>
   85f20:	2b25      	cmp	r3, #37	; 0x25
   85f22:	f000 84c5 	beq.w	868b0 <_vfiprintf_r+0xa00>
   85f26:	f108 0201 	add.w	r2, r8, #1
   85f2a:	e001      	b.n	85f30 <_vfiprintf_r+0x80>
   85f2c:	2b25      	cmp	r3, #37	; 0x25
   85f2e:	d004      	beq.n	85f3a <_vfiprintf_r+0x8a>
   85f30:	7813      	ldrb	r3, [r2, #0]
   85f32:	4614      	mov	r4, r2
   85f34:	3201      	adds	r2, #1
   85f36:	2b00      	cmp	r3, #0
   85f38:	d1f8      	bne.n	85f2c <_vfiprintf_r+0x7c>
   85f3a:	ebc8 0504 	rsb	r5, r8, r4
   85f3e:	b195      	cbz	r5, 85f66 <_vfiprintf_r+0xb6>
   85f40:	9b14      	ldr	r3, [sp, #80]	; 0x50
   85f42:	9a15      	ldr	r2, [sp, #84]	; 0x54
   85f44:	3301      	adds	r3, #1
   85f46:	442a      	add	r2, r5
   85f48:	2b07      	cmp	r3, #7
   85f4a:	f8c6 8000 	str.w	r8, [r6]
   85f4e:	6075      	str	r5, [r6, #4]
   85f50:	9215      	str	r2, [sp, #84]	; 0x54
   85f52:	9314      	str	r3, [sp, #80]	; 0x50
   85f54:	dd7b      	ble.n	8604e <_vfiprintf_r+0x19e>
   85f56:	2a00      	cmp	r2, #0
   85f58:	f040 84d5 	bne.w	86906 <_vfiprintf_r+0xa56>
   85f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
   85f5e:	9214      	str	r2, [sp, #80]	; 0x50
   85f60:	4428      	add	r0, r5
   85f62:	464e      	mov	r6, r9
   85f64:	9009      	str	r0, [sp, #36]	; 0x24
   85f66:	7823      	ldrb	r3, [r4, #0]
   85f68:	2b00      	cmp	r3, #0
   85f6a:	f000 83ed 	beq.w	86748 <_vfiprintf_r+0x898>
   85f6e:	2100      	movs	r1, #0
   85f70:	f04f 0200 	mov.w	r2, #0
   85f74:	f04f 3cff 	mov.w	ip, #4294967295
   85f78:	7863      	ldrb	r3, [r4, #1]
   85f7a:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   85f7e:	9104      	str	r1, [sp, #16]
   85f80:	468a      	mov	sl, r1
   85f82:	f104 0801 	add.w	r8, r4, #1
   85f86:	4608      	mov	r0, r1
   85f88:	4665      	mov	r5, ip
   85f8a:	f108 0801 	add.w	r8, r8, #1
   85f8e:	f1a3 0220 	sub.w	r2, r3, #32
   85f92:	2a58      	cmp	r2, #88	; 0x58
   85f94:	f200 82d9 	bhi.w	8654a <_vfiprintf_r+0x69a>
   85f98:	e8df f012 	tbh	[pc, r2, lsl #1]
   85f9c:	02d702cb 	.word	0x02d702cb
   85fa0:	02d202d7 	.word	0x02d202d7
   85fa4:	02d702d7 	.word	0x02d702d7
   85fa8:	02d702d7 	.word	0x02d702d7
   85fac:	02d702d7 	.word	0x02d702d7
   85fb0:	028f0282 	.word	0x028f0282
   85fb4:	008402d7 	.word	0x008402d7
   85fb8:	02d70293 	.word	0x02d70293
   85fbc:	0196012b 	.word	0x0196012b
   85fc0:	01960196 	.word	0x01960196
   85fc4:	01960196 	.word	0x01960196
   85fc8:	01960196 	.word	0x01960196
   85fcc:	01960196 	.word	0x01960196
   85fd0:	02d702d7 	.word	0x02d702d7
   85fd4:	02d702d7 	.word	0x02d702d7
   85fd8:	02d702d7 	.word	0x02d702d7
   85fdc:	02d702d7 	.word	0x02d702d7
   85fe0:	02d702d7 	.word	0x02d702d7
   85fe4:	02d70130 	.word	0x02d70130
   85fe8:	02d702d7 	.word	0x02d702d7
   85fec:	02d702d7 	.word	0x02d702d7
   85ff0:	02d702d7 	.word	0x02d702d7
   85ff4:	02d702d7 	.word	0x02d702d7
   85ff8:	017b02d7 	.word	0x017b02d7
   85ffc:	02d702d7 	.word	0x02d702d7
   86000:	02d702d7 	.word	0x02d702d7
   86004:	01a402d7 	.word	0x01a402d7
   86008:	02d702d7 	.word	0x02d702d7
   8600c:	02d701bf 	.word	0x02d701bf
   86010:	02d702d7 	.word	0x02d702d7
   86014:	02d702d7 	.word	0x02d702d7
   86018:	02d702d7 	.word	0x02d702d7
   8601c:	02d702d7 	.word	0x02d702d7
   86020:	01e402d7 	.word	0x01e402d7
   86024:	02d701fa 	.word	0x02d701fa
   86028:	02d702d7 	.word	0x02d702d7
   8602c:	01fa0216 	.word	0x01fa0216
   86030:	02d702d7 	.word	0x02d702d7
   86034:	02d7021b 	.word	0x02d7021b
   86038:	00890228 	.word	0x00890228
   8603c:	027d0266 	.word	0x027d0266
   86040:	023a02d7 	.word	0x023a02d7
   86044:	011902d7 	.word	0x011902d7
   86048:	02d702d7 	.word	0x02d702d7
   8604c:	02af      	.short	0x02af
   8604e:	3608      	adds	r6, #8
   86050:	9809      	ldr	r0, [sp, #36]	; 0x24
   86052:	4428      	add	r0, r5
   86054:	9009      	str	r0, [sp, #36]	; 0x24
   86056:	e786      	b.n	85f66 <_vfiprintf_r+0xb6>
   86058:	9806      	ldr	r0, [sp, #24]
   8605a:	9902      	ldr	r1, [sp, #8]
   8605c:	f000 fd90 	bl	86b80 <__swsetup_r>
   86060:	b9b0      	cbnz	r0, 86090 <_vfiprintf_r+0x1e0>
   86062:	9d02      	ldr	r5, [sp, #8]
   86064:	89aa      	ldrh	r2, [r5, #12]
   86066:	f002 021a 	and.w	r2, r2, #26
   8606a:	2a0a      	cmp	r2, #10
   8606c:	f47f af49 	bne.w	85f02 <_vfiprintf_r+0x52>
   86070:	f8dd b008 	ldr.w	fp, [sp, #8]
   86074:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   86078:	2b00      	cmp	r3, #0
   8607a:	f6ff af42 	blt.w	85f02 <_vfiprintf_r+0x52>
   8607e:	9806      	ldr	r0, [sp, #24]
   86080:	4659      	mov	r1, fp
   86082:	4642      	mov	r2, r8
   86084:	4623      	mov	r3, r4
   86086:	f000 fd3d 	bl	86b04 <__sbprintf>
   8608a:	b031      	add	sp, #196	; 0xc4
   8608c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86090:	f04f 30ff 	mov.w	r0, #4294967295
   86094:	b031      	add	sp, #196	; 0xc4
   86096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8609a:	f001 fe59 	bl	87d50 <__sinit>
   8609e:	e714      	b.n	85eca <_vfiprintf_r+0x1a>
   860a0:	4240      	negs	r0, r0
   860a2:	9308      	str	r3, [sp, #32]
   860a4:	f04a 0a04 	orr.w	sl, sl, #4
   860a8:	f898 3000 	ldrb.w	r3, [r8]
   860ac:	e76d      	b.n	85f8a <_vfiprintf_r+0xda>
   860ae:	f01a 0320 	ands.w	r3, sl, #32
   860b2:	9004      	str	r0, [sp, #16]
   860b4:	46ac      	mov	ip, r5
   860b6:	f000 80f4 	beq.w	862a2 <_vfiprintf_r+0x3f2>
   860ba:	f8dd b020 	ldr.w	fp, [sp, #32]
   860be:	f10b 0307 	add.w	r3, fp, #7
   860c2:	f023 0307 	bic.w	r3, r3, #7
   860c6:	f103 0408 	add.w	r4, r3, #8
   860ca:	9408      	str	r4, [sp, #32]
   860cc:	e9d3 4500 	ldrd	r4, r5, [r3]
   860d0:	2300      	movs	r3, #0
   860d2:	f04f 0000 	mov.w	r0, #0
   860d6:	2100      	movs	r1, #0
   860d8:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   860dc:	f8cd c014 	str.w	ip, [sp, #20]
   860e0:	9107      	str	r1, [sp, #28]
   860e2:	f1bc 0f00 	cmp.w	ip, #0
   860e6:	bfa8      	it	ge
   860e8:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   860ec:	ea54 0205 	orrs.w	r2, r4, r5
   860f0:	f040 80ad 	bne.w	8624e <_vfiprintf_r+0x39e>
   860f4:	f1bc 0f00 	cmp.w	ip, #0
   860f8:	f040 80a9 	bne.w	8624e <_vfiprintf_r+0x39e>
   860fc:	2b00      	cmp	r3, #0
   860fe:	f040 83c0 	bne.w	86882 <_vfiprintf_r+0x9d2>
   86102:	f01a 0f01 	tst.w	sl, #1
   86106:	f000 83bc 	beq.w	86882 <_vfiprintf_r+0x9d2>
   8610a:	2330      	movs	r3, #48	; 0x30
   8610c:	af30      	add	r7, sp, #192	; 0xc0
   8610e:	f807 3d41 	strb.w	r3, [r7, #-65]!
   86112:	ebc7 0409 	rsb	r4, r7, r9
   86116:	9405      	str	r4, [sp, #20]
   86118:	f8dd b014 	ldr.w	fp, [sp, #20]
   8611c:	9c07      	ldr	r4, [sp, #28]
   8611e:	45e3      	cmp	fp, ip
   86120:	bfb8      	it	lt
   86122:	46e3      	movlt	fp, ip
   86124:	f8cd b00c 	str.w	fp, [sp, #12]
   86128:	b11c      	cbz	r4, 86132 <_vfiprintf_r+0x282>
   8612a:	f10b 0b01 	add.w	fp, fp, #1
   8612e:	f8cd b00c 	str.w	fp, [sp, #12]
   86132:	f01a 0502 	ands.w	r5, sl, #2
   86136:	9507      	str	r5, [sp, #28]
   86138:	d005      	beq.n	86146 <_vfiprintf_r+0x296>
   8613a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8613e:	f10b 0b02 	add.w	fp, fp, #2
   86142:	f8cd b00c 	str.w	fp, [sp, #12]
   86146:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   8614a:	930b      	str	r3, [sp, #44]	; 0x2c
   8614c:	f040 821b 	bne.w	86586 <_vfiprintf_r+0x6d6>
   86150:	9d04      	ldr	r5, [sp, #16]
   86152:	f8dd b00c 	ldr.w	fp, [sp, #12]
   86156:	ebcb 0405 	rsb	r4, fp, r5
   8615a:	2c00      	cmp	r4, #0
   8615c:	f340 8213 	ble.w	86586 <_vfiprintf_r+0x6d6>
   86160:	2c10      	cmp	r4, #16
   86162:	f340 8489 	ble.w	86a78 <_vfiprintf_r+0xbc8>
   86166:	4dbe      	ldr	r5, [pc, #760]	; (86460 <_vfiprintf_r+0x5b0>)
   86168:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8616a:	462b      	mov	r3, r5
   8616c:	9814      	ldr	r0, [sp, #80]	; 0x50
   8616e:	4625      	mov	r5, r4
   86170:	f04f 0b10 	mov.w	fp, #16
   86174:	4664      	mov	r4, ip
   86176:	46b4      	mov	ip, r6
   86178:	461e      	mov	r6, r3
   8617a:	e006      	b.n	8618a <_vfiprintf_r+0x2da>
   8617c:	1c83      	adds	r3, r0, #2
   8617e:	f10c 0c08 	add.w	ip, ip, #8
   86182:	4608      	mov	r0, r1
   86184:	3d10      	subs	r5, #16
   86186:	2d10      	cmp	r5, #16
   86188:	dd11      	ble.n	861ae <_vfiprintf_r+0x2fe>
   8618a:	1c41      	adds	r1, r0, #1
   8618c:	3210      	adds	r2, #16
   8618e:	2907      	cmp	r1, #7
   86190:	9215      	str	r2, [sp, #84]	; 0x54
   86192:	e88c 0840 	stmia.w	ip, {r6, fp}
   86196:	9114      	str	r1, [sp, #80]	; 0x50
   86198:	ddf0      	ble.n	8617c <_vfiprintf_r+0x2cc>
   8619a:	2a00      	cmp	r2, #0
   8619c:	f040 81e6 	bne.w	8656c <_vfiprintf_r+0x6bc>
   861a0:	3d10      	subs	r5, #16
   861a2:	2d10      	cmp	r5, #16
   861a4:	f04f 0301 	mov.w	r3, #1
   861a8:	4610      	mov	r0, r2
   861aa:	46cc      	mov	ip, r9
   861ac:	dced      	bgt.n	8618a <_vfiprintf_r+0x2da>
   861ae:	4631      	mov	r1, r6
   861b0:	4666      	mov	r6, ip
   861b2:	46a4      	mov	ip, r4
   861b4:	462c      	mov	r4, r5
   861b6:	460d      	mov	r5, r1
   861b8:	4422      	add	r2, r4
   861ba:	2b07      	cmp	r3, #7
   861bc:	9215      	str	r2, [sp, #84]	; 0x54
   861be:	6035      	str	r5, [r6, #0]
   861c0:	6074      	str	r4, [r6, #4]
   861c2:	9314      	str	r3, [sp, #80]	; 0x50
   861c4:	f300 836d 	bgt.w	868a2 <_vfiprintf_r+0x9f2>
   861c8:	3608      	adds	r6, #8
   861ca:	1c59      	adds	r1, r3, #1
   861cc:	e1de      	b.n	8658c <_vfiprintf_r+0x6dc>
   861ce:	f01a 0f20 	tst.w	sl, #32
   861d2:	9004      	str	r0, [sp, #16]
   861d4:	46ac      	mov	ip, r5
   861d6:	f000 808d 	beq.w	862f4 <_vfiprintf_r+0x444>
   861da:	9d08      	ldr	r5, [sp, #32]
   861dc:	1deb      	adds	r3, r5, #7
   861de:	f023 0307 	bic.w	r3, r3, #7
   861e2:	f103 0b08 	add.w	fp, r3, #8
   861e6:	e9d3 4500 	ldrd	r4, r5, [r3]
   861ea:	f8cd b020 	str.w	fp, [sp, #32]
   861ee:	2301      	movs	r3, #1
   861f0:	e76f      	b.n	860d2 <_vfiprintf_r+0x222>
   861f2:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   861f6:	f898 3000 	ldrb.w	r3, [r8]
   861fa:	e6c6      	b.n	85f8a <_vfiprintf_r+0xda>
   861fc:	f04a 0a10 	orr.w	sl, sl, #16
   86200:	f01a 0f20 	tst.w	sl, #32
   86204:	9004      	str	r0, [sp, #16]
   86206:	46ac      	mov	ip, r5
   86208:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8620c:	f000 80c8 	beq.w	863a0 <_vfiprintf_r+0x4f0>
   86210:	9c08      	ldr	r4, [sp, #32]
   86212:	1de1      	adds	r1, r4, #7
   86214:	f021 0107 	bic.w	r1, r1, #7
   86218:	e9d1 2300 	ldrd	r2, r3, [r1]
   8621c:	3108      	adds	r1, #8
   8621e:	9108      	str	r1, [sp, #32]
   86220:	4614      	mov	r4, r2
   86222:	461d      	mov	r5, r3
   86224:	2a00      	cmp	r2, #0
   86226:	f173 0b00 	sbcs.w	fp, r3, #0
   8622a:	f2c0 83ce 	blt.w	869ca <_vfiprintf_r+0xb1a>
   8622e:	f1bc 0f00 	cmp.w	ip, #0
   86232:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   86236:	bfa8      	it	ge
   86238:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   8623c:	ea54 0205 	orrs.w	r2, r4, r5
   86240:	9007      	str	r0, [sp, #28]
   86242:	f8cd c014 	str.w	ip, [sp, #20]
   86246:	f04f 0301 	mov.w	r3, #1
   8624a:	f43f af53 	beq.w	860f4 <_vfiprintf_r+0x244>
   8624e:	2b01      	cmp	r3, #1
   86250:	f000 8319 	beq.w	86886 <_vfiprintf_r+0x9d6>
   86254:	2b02      	cmp	r3, #2
   86256:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   8625a:	f040 824c 	bne.w	866f6 <_vfiprintf_r+0x846>
   8625e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   86262:	4619      	mov	r1, r3
   86264:	f004 000f 	and.w	r0, r4, #15
   86268:	0922      	lsrs	r2, r4, #4
   8626a:	f81b 0000 	ldrb.w	r0, [fp, r0]
   8626e:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   86272:	092b      	lsrs	r3, r5, #4
   86274:	7008      	strb	r0, [r1, #0]
   86276:	ea52 0003 	orrs.w	r0, r2, r3
   8627a:	460f      	mov	r7, r1
   8627c:	4614      	mov	r4, r2
   8627e:	461d      	mov	r5, r3
   86280:	f101 31ff 	add.w	r1, r1, #4294967295
   86284:	d1ee      	bne.n	86264 <_vfiprintf_r+0x3b4>
   86286:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   8628a:	ebc7 0309 	rsb	r3, r7, r9
   8628e:	9305      	str	r3, [sp, #20]
   86290:	e742      	b.n	86118 <_vfiprintf_r+0x268>
   86292:	f04a 0a10 	orr.w	sl, sl, #16
   86296:	f01a 0320 	ands.w	r3, sl, #32
   8629a:	9004      	str	r0, [sp, #16]
   8629c:	46ac      	mov	ip, r5
   8629e:	f47f af0c 	bne.w	860ba <_vfiprintf_r+0x20a>
   862a2:	f01a 0210 	ands.w	r2, sl, #16
   862a6:	f040 8311 	bne.w	868cc <_vfiprintf_r+0xa1c>
   862aa:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   862ae:	f000 830d 	beq.w	868cc <_vfiprintf_r+0xa1c>
   862b2:	f8dd b020 	ldr.w	fp, [sp, #32]
   862b6:	4613      	mov	r3, r2
   862b8:	f8bb 4000 	ldrh.w	r4, [fp]
   862bc:	f10b 0b04 	add.w	fp, fp, #4
   862c0:	2500      	movs	r5, #0
   862c2:	f8cd b020 	str.w	fp, [sp, #32]
   862c6:	e704      	b.n	860d2 <_vfiprintf_r+0x222>
   862c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   862cc:	2000      	movs	r0, #0
   862ce:	f818 3b01 	ldrb.w	r3, [r8], #1
   862d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   862d6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   862da:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   862de:	2a09      	cmp	r2, #9
   862e0:	d9f5      	bls.n	862ce <_vfiprintf_r+0x41e>
   862e2:	e654      	b.n	85f8e <_vfiprintf_r+0xde>
   862e4:	f04a 0a10 	orr.w	sl, sl, #16
   862e8:	f01a 0f20 	tst.w	sl, #32
   862ec:	9004      	str	r0, [sp, #16]
   862ee:	46ac      	mov	ip, r5
   862f0:	f47f af73 	bne.w	861da <_vfiprintf_r+0x32a>
   862f4:	f01a 0f10 	tst.w	sl, #16
   862f8:	f040 82ef 	bne.w	868da <_vfiprintf_r+0xa2a>
   862fc:	f01a 0f40 	tst.w	sl, #64	; 0x40
   86300:	f000 82eb 	beq.w	868da <_vfiprintf_r+0xa2a>
   86304:	f8dd b020 	ldr.w	fp, [sp, #32]
   86308:	2500      	movs	r5, #0
   8630a:	f8bb 4000 	ldrh.w	r4, [fp]
   8630e:	f10b 0b04 	add.w	fp, fp, #4
   86312:	2301      	movs	r3, #1
   86314:	f8cd b020 	str.w	fp, [sp, #32]
   86318:	e6db      	b.n	860d2 <_vfiprintf_r+0x222>
   8631a:	46ac      	mov	ip, r5
   8631c:	4d51      	ldr	r5, [pc, #324]	; (86464 <_vfiprintf_r+0x5b4>)
   8631e:	f01a 0f20 	tst.w	sl, #32
   86322:	9004      	str	r0, [sp, #16]
   86324:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   86328:	950a      	str	r5, [sp, #40]	; 0x28
   8632a:	f000 80f0 	beq.w	8650e <_vfiprintf_r+0x65e>
   8632e:	9d08      	ldr	r5, [sp, #32]
   86330:	1dea      	adds	r2, r5, #7
   86332:	f022 0207 	bic.w	r2, r2, #7
   86336:	f102 0b08 	add.w	fp, r2, #8
   8633a:	f8cd b020 	str.w	fp, [sp, #32]
   8633e:	e9d2 4500 	ldrd	r4, r5, [r2]
   86342:	f01a 0f01 	tst.w	sl, #1
   86346:	f000 82aa 	beq.w	8689e <_vfiprintf_r+0x9ee>
   8634a:	ea54 0b05 	orrs.w	fp, r4, r5
   8634e:	f000 82a6 	beq.w	8689e <_vfiprintf_r+0x9ee>
   86352:	2230      	movs	r2, #48	; 0x30
   86354:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   86358:	f04a 0a02 	orr.w	sl, sl, #2
   8635c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   86360:	2302      	movs	r3, #2
   86362:	e6b6      	b.n	860d2 <_vfiprintf_r+0x222>
   86364:	9b08      	ldr	r3, [sp, #32]
   86366:	f8dd b020 	ldr.w	fp, [sp, #32]
   8636a:	681b      	ldr	r3, [r3, #0]
   8636c:	2401      	movs	r4, #1
   8636e:	f04f 0500 	mov.w	r5, #0
   86372:	f10b 0b04 	add.w	fp, fp, #4
   86376:	9004      	str	r0, [sp, #16]
   86378:	9403      	str	r4, [sp, #12]
   8637a:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8637e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   86382:	f8cd b020 	str.w	fp, [sp, #32]
   86386:	9405      	str	r4, [sp, #20]
   86388:	af16      	add	r7, sp, #88	; 0x58
   8638a:	f04f 0c00 	mov.w	ip, #0
   8638e:	e6d0      	b.n	86132 <_vfiprintf_r+0x282>
   86390:	f01a 0f20 	tst.w	sl, #32
   86394:	9004      	str	r0, [sp, #16]
   86396:	46ac      	mov	ip, r5
   86398:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8639c:	f47f af38 	bne.w	86210 <_vfiprintf_r+0x360>
   863a0:	f01a 0f10 	tst.w	sl, #16
   863a4:	f040 82a7 	bne.w	868f6 <_vfiprintf_r+0xa46>
   863a8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   863ac:	f000 82a3 	beq.w	868f6 <_vfiprintf_r+0xa46>
   863b0:	f8dd b020 	ldr.w	fp, [sp, #32]
   863b4:	f9bb 4000 	ldrsh.w	r4, [fp]
   863b8:	f10b 0b04 	add.w	fp, fp, #4
   863bc:	17e5      	asrs	r5, r4, #31
   863be:	4622      	mov	r2, r4
   863c0:	462b      	mov	r3, r5
   863c2:	f8cd b020 	str.w	fp, [sp, #32]
   863c6:	e72d      	b.n	86224 <_vfiprintf_r+0x374>
   863c8:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   863cc:	f898 3000 	ldrb.w	r3, [r8]
   863d0:	e5db      	b.n	85f8a <_vfiprintf_r+0xda>
   863d2:	f898 3000 	ldrb.w	r3, [r8]
   863d6:	4642      	mov	r2, r8
   863d8:	2b6c      	cmp	r3, #108	; 0x6c
   863da:	bf03      	ittte	eq
   863dc:	f108 0801 	addeq.w	r8, r8, #1
   863e0:	f04a 0a20 	orreq.w	sl, sl, #32
   863e4:	7853      	ldrbeq	r3, [r2, #1]
   863e6:	f04a 0a10 	orrne.w	sl, sl, #16
   863ea:	e5ce      	b.n	85f8a <_vfiprintf_r+0xda>
   863ec:	f01a 0f20 	tst.w	sl, #32
   863f0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   863f4:	f000 82f7 	beq.w	869e6 <_vfiprintf_r+0xb36>
   863f8:	9c08      	ldr	r4, [sp, #32]
   863fa:	6821      	ldr	r1, [r4, #0]
   863fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   863fe:	17e5      	asrs	r5, r4, #31
   86400:	462b      	mov	r3, r5
   86402:	9d08      	ldr	r5, [sp, #32]
   86404:	4622      	mov	r2, r4
   86406:	3504      	adds	r5, #4
   86408:	9508      	str	r5, [sp, #32]
   8640a:	e9c1 2300 	strd	r2, r3, [r1]
   8640e:	e582      	b.n	85f16 <_vfiprintf_r+0x66>
   86410:	9c08      	ldr	r4, [sp, #32]
   86412:	46ac      	mov	ip, r5
   86414:	6827      	ldr	r7, [r4, #0]
   86416:	f04f 0500 	mov.w	r5, #0
   8641a:	9004      	str	r0, [sp, #16]
   8641c:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   86420:	3404      	adds	r4, #4
   86422:	2f00      	cmp	r7, #0
   86424:	f000 8332 	beq.w	86a8c <_vfiprintf_r+0xbdc>
   86428:	f1bc 0f00 	cmp.w	ip, #0
   8642c:	4638      	mov	r0, r7
   8642e:	f2c0 8307 	blt.w	86a40 <_vfiprintf_r+0xb90>
   86432:	4662      	mov	r2, ip
   86434:	2100      	movs	r1, #0
   86436:	f8cd c004 	str.w	ip, [sp, #4]
   8643a:	f002 fb6b 	bl	88b14 <memchr>
   8643e:	f8dd c004 	ldr.w	ip, [sp, #4]
   86442:	2800      	cmp	r0, #0
   86444:	f000 833a 	beq.w	86abc <_vfiprintf_r+0xc0c>
   86448:	1bc0      	subs	r0, r0, r7
   8644a:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8644e:	4560      	cmp	r0, ip
   86450:	bfa8      	it	ge
   86452:	4660      	movge	r0, ip
   86454:	9005      	str	r0, [sp, #20]
   86456:	9408      	str	r4, [sp, #32]
   86458:	9507      	str	r5, [sp, #28]
   8645a:	f04f 0c00 	mov.w	ip, #0
   8645e:	e65b      	b.n	86118 <_vfiprintf_r+0x268>
   86460:	0008a634 	.word	0x0008a634
   86464:	0008a5e4 	.word	0x0008a5e4
   86468:	9b08      	ldr	r3, [sp, #32]
   8646a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8646e:	9004      	str	r0, [sp, #16]
   86470:	48b2      	ldr	r0, [pc, #712]	; (8673c <_vfiprintf_r+0x88c>)
   86472:	681c      	ldr	r4, [r3, #0]
   86474:	2230      	movs	r2, #48	; 0x30
   86476:	2378      	movs	r3, #120	; 0x78
   86478:	f10b 0b04 	add.w	fp, fp, #4
   8647c:	46ac      	mov	ip, r5
   8647e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   86482:	f04a 0a02 	orr.w	sl, sl, #2
   86486:	f8cd b020 	str.w	fp, [sp, #32]
   8648a:	2500      	movs	r5, #0
   8648c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   86490:	900a      	str	r0, [sp, #40]	; 0x28
   86492:	2302      	movs	r3, #2
   86494:	e61d      	b.n	860d2 <_vfiprintf_r+0x222>
   86496:	f04a 0a20 	orr.w	sl, sl, #32
   8649a:	f898 3000 	ldrb.w	r3, [r8]
   8649e:	e574      	b.n	85f8a <_vfiprintf_r+0xda>
   864a0:	f8dd b020 	ldr.w	fp, [sp, #32]
   864a4:	f8db 0000 	ldr.w	r0, [fp]
   864a8:	f10b 0304 	add.w	r3, fp, #4
   864ac:	2800      	cmp	r0, #0
   864ae:	f6ff adf7 	blt.w	860a0 <_vfiprintf_r+0x1f0>
   864b2:	9308      	str	r3, [sp, #32]
   864b4:	f898 3000 	ldrb.w	r3, [r8]
   864b8:	e567      	b.n	85f8a <_vfiprintf_r+0xda>
   864ba:	f898 3000 	ldrb.w	r3, [r8]
   864be:	212b      	movs	r1, #43	; 0x2b
   864c0:	e563      	b.n	85f8a <_vfiprintf_r+0xda>
   864c2:	f898 3000 	ldrb.w	r3, [r8]
   864c6:	f108 0401 	add.w	r4, r8, #1
   864ca:	2b2a      	cmp	r3, #42	; 0x2a
   864cc:	f000 8305 	beq.w	86ada <_vfiprintf_r+0xc2a>
   864d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   864d4:	2a09      	cmp	r2, #9
   864d6:	bf98      	it	ls
   864d8:	2500      	movls	r5, #0
   864da:	f200 82fa 	bhi.w	86ad2 <_vfiprintf_r+0xc22>
   864de:	f814 3b01 	ldrb.w	r3, [r4], #1
   864e2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   864e6:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   864ea:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   864ee:	2a09      	cmp	r2, #9
   864f0:	d9f5      	bls.n	864de <_vfiprintf_r+0x62e>
   864f2:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   864f6:	46a0      	mov	r8, r4
   864f8:	e549      	b.n	85f8e <_vfiprintf_r+0xde>
   864fa:	4c90      	ldr	r4, [pc, #576]	; (8673c <_vfiprintf_r+0x88c>)
   864fc:	f01a 0f20 	tst.w	sl, #32
   86500:	9004      	str	r0, [sp, #16]
   86502:	46ac      	mov	ip, r5
   86504:	940a      	str	r4, [sp, #40]	; 0x28
   86506:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8650a:	f47f af10 	bne.w	8632e <_vfiprintf_r+0x47e>
   8650e:	f01a 0f10 	tst.w	sl, #16
   86512:	f040 81ea 	bne.w	868ea <_vfiprintf_r+0xa3a>
   86516:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8651a:	f000 81e6 	beq.w	868ea <_vfiprintf_r+0xa3a>
   8651e:	f8dd b020 	ldr.w	fp, [sp, #32]
   86522:	2500      	movs	r5, #0
   86524:	f8bb 4000 	ldrh.w	r4, [fp]
   86528:	f10b 0b04 	add.w	fp, fp, #4
   8652c:	f8cd b020 	str.w	fp, [sp, #32]
   86530:	e707      	b.n	86342 <_vfiprintf_r+0x492>
   86532:	f898 3000 	ldrb.w	r3, [r8]
   86536:	2900      	cmp	r1, #0
   86538:	f47f ad27 	bne.w	85f8a <_vfiprintf_r+0xda>
   8653c:	2120      	movs	r1, #32
   8653e:	e524      	b.n	85f8a <_vfiprintf_r+0xda>
   86540:	f04a 0a01 	orr.w	sl, sl, #1
   86544:	f898 3000 	ldrb.w	r3, [r8]
   86548:	e51f      	b.n	85f8a <_vfiprintf_r+0xda>
   8654a:	9004      	str	r0, [sp, #16]
   8654c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   86550:	2b00      	cmp	r3, #0
   86552:	f000 80f9 	beq.w	86748 <_vfiprintf_r+0x898>
   86556:	2501      	movs	r5, #1
   86558:	f04f 0b00 	mov.w	fp, #0
   8655c:	9503      	str	r5, [sp, #12]
   8655e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   86562:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   86566:	9505      	str	r5, [sp, #20]
   86568:	af16      	add	r7, sp, #88	; 0x58
   8656a:	e70e      	b.n	8638a <_vfiprintf_r+0x4da>
   8656c:	9806      	ldr	r0, [sp, #24]
   8656e:	9902      	ldr	r1, [sp, #8]
   86570:	aa13      	add	r2, sp, #76	; 0x4c
   86572:	f7ff fc61 	bl	85e38 <__sprint_r.part.0>
   86576:	2800      	cmp	r0, #0
   86578:	f040 80ed 	bne.w	86756 <_vfiprintf_r+0x8a6>
   8657c:	9814      	ldr	r0, [sp, #80]	; 0x50
   8657e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86580:	1c43      	adds	r3, r0, #1
   86582:	46cc      	mov	ip, r9
   86584:	e5fe      	b.n	86184 <_vfiprintf_r+0x2d4>
   86586:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86588:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8658a:	1c59      	adds	r1, r3, #1
   8658c:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   86590:	b168      	cbz	r0, 865ae <_vfiprintf_r+0x6fe>
   86592:	3201      	adds	r2, #1
   86594:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   86598:	2301      	movs	r3, #1
   8659a:	2907      	cmp	r1, #7
   8659c:	9215      	str	r2, [sp, #84]	; 0x54
   8659e:	9114      	str	r1, [sp, #80]	; 0x50
   865a0:	e886 0009 	stmia.w	r6, {r0, r3}
   865a4:	f300 8160 	bgt.w	86868 <_vfiprintf_r+0x9b8>
   865a8:	460b      	mov	r3, r1
   865aa:	3608      	adds	r6, #8
   865ac:	3101      	adds	r1, #1
   865ae:	9c07      	ldr	r4, [sp, #28]
   865b0:	b164      	cbz	r4, 865cc <_vfiprintf_r+0x71c>
   865b2:	3202      	adds	r2, #2
   865b4:	a812      	add	r0, sp, #72	; 0x48
   865b6:	2302      	movs	r3, #2
   865b8:	2907      	cmp	r1, #7
   865ba:	9215      	str	r2, [sp, #84]	; 0x54
   865bc:	9114      	str	r1, [sp, #80]	; 0x50
   865be:	e886 0009 	stmia.w	r6, {r0, r3}
   865c2:	f300 8157 	bgt.w	86874 <_vfiprintf_r+0x9c4>
   865c6:	460b      	mov	r3, r1
   865c8:	3608      	adds	r6, #8
   865ca:	3101      	adds	r1, #1
   865cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   865ce:	2d80      	cmp	r5, #128	; 0x80
   865d0:	f000 8101 	beq.w	867d6 <_vfiprintf_r+0x926>
   865d4:	9d05      	ldr	r5, [sp, #20]
   865d6:	ebc5 040c 	rsb	r4, r5, ip
   865da:	2c00      	cmp	r4, #0
   865dc:	dd2f      	ble.n	8663e <_vfiprintf_r+0x78e>
   865de:	2c10      	cmp	r4, #16
   865e0:	4d57      	ldr	r5, [pc, #348]	; (86740 <_vfiprintf_r+0x890>)
   865e2:	dd22      	ble.n	8662a <_vfiprintf_r+0x77a>
   865e4:	4630      	mov	r0, r6
   865e6:	f04f 0b10 	mov.w	fp, #16
   865ea:	462e      	mov	r6, r5
   865ec:	4625      	mov	r5, r4
   865ee:	9c06      	ldr	r4, [sp, #24]
   865f0:	e006      	b.n	86600 <_vfiprintf_r+0x750>
   865f2:	f103 0c02 	add.w	ip, r3, #2
   865f6:	3008      	adds	r0, #8
   865f8:	460b      	mov	r3, r1
   865fa:	3d10      	subs	r5, #16
   865fc:	2d10      	cmp	r5, #16
   865fe:	dd10      	ble.n	86622 <_vfiprintf_r+0x772>
   86600:	1c59      	adds	r1, r3, #1
   86602:	3210      	adds	r2, #16
   86604:	2907      	cmp	r1, #7
   86606:	9215      	str	r2, [sp, #84]	; 0x54
   86608:	e880 0840 	stmia.w	r0, {r6, fp}
   8660c:	9114      	str	r1, [sp, #80]	; 0x50
   8660e:	ddf0      	ble.n	865f2 <_vfiprintf_r+0x742>
   86610:	2a00      	cmp	r2, #0
   86612:	d163      	bne.n	866dc <_vfiprintf_r+0x82c>
   86614:	3d10      	subs	r5, #16
   86616:	2d10      	cmp	r5, #16
   86618:	f04f 0c01 	mov.w	ip, #1
   8661c:	4613      	mov	r3, r2
   8661e:	4648      	mov	r0, r9
   86620:	dcee      	bgt.n	86600 <_vfiprintf_r+0x750>
   86622:	462c      	mov	r4, r5
   86624:	4661      	mov	r1, ip
   86626:	4635      	mov	r5, r6
   86628:	4606      	mov	r6, r0
   8662a:	4422      	add	r2, r4
   8662c:	2907      	cmp	r1, #7
   8662e:	9215      	str	r2, [sp, #84]	; 0x54
   86630:	6035      	str	r5, [r6, #0]
   86632:	6074      	str	r4, [r6, #4]
   86634:	9114      	str	r1, [sp, #80]	; 0x50
   86636:	f300 80c1 	bgt.w	867bc <_vfiprintf_r+0x90c>
   8663a:	3608      	adds	r6, #8
   8663c:	3101      	adds	r1, #1
   8663e:	9d05      	ldr	r5, [sp, #20]
   86640:	2907      	cmp	r1, #7
   86642:	442a      	add	r2, r5
   86644:	9215      	str	r2, [sp, #84]	; 0x54
   86646:	6037      	str	r7, [r6, #0]
   86648:	6075      	str	r5, [r6, #4]
   8664a:	9114      	str	r1, [sp, #80]	; 0x50
   8664c:	f340 80c1 	ble.w	867d2 <_vfiprintf_r+0x922>
   86650:	2a00      	cmp	r2, #0
   86652:	f040 8130 	bne.w	868b6 <_vfiprintf_r+0xa06>
   86656:	9214      	str	r2, [sp, #80]	; 0x50
   86658:	464e      	mov	r6, r9
   8665a:	f01a 0f04 	tst.w	sl, #4
   8665e:	f000 808b 	beq.w	86778 <_vfiprintf_r+0x8c8>
   86662:	9d04      	ldr	r5, [sp, #16]
   86664:	f8dd b00c 	ldr.w	fp, [sp, #12]
   86668:	ebcb 0405 	rsb	r4, fp, r5
   8666c:	2c00      	cmp	r4, #0
   8666e:	f340 8083 	ble.w	86778 <_vfiprintf_r+0x8c8>
   86672:	2c10      	cmp	r4, #16
   86674:	f340 821e 	ble.w	86ab4 <_vfiprintf_r+0xc04>
   86678:	9914      	ldr	r1, [sp, #80]	; 0x50
   8667a:	4d32      	ldr	r5, [pc, #200]	; (86744 <_vfiprintf_r+0x894>)
   8667c:	2710      	movs	r7, #16
   8667e:	f8dd a018 	ldr.w	sl, [sp, #24]
   86682:	f8dd b008 	ldr.w	fp, [sp, #8]
   86686:	e005      	b.n	86694 <_vfiprintf_r+0x7e4>
   86688:	1c88      	adds	r0, r1, #2
   8668a:	3608      	adds	r6, #8
   8668c:	4619      	mov	r1, r3
   8668e:	3c10      	subs	r4, #16
   86690:	2c10      	cmp	r4, #16
   86692:	dd10      	ble.n	866b6 <_vfiprintf_r+0x806>
   86694:	1c4b      	adds	r3, r1, #1
   86696:	3210      	adds	r2, #16
   86698:	2b07      	cmp	r3, #7
   8669a:	9215      	str	r2, [sp, #84]	; 0x54
   8669c:	e886 00a0 	stmia.w	r6, {r5, r7}
   866a0:	9314      	str	r3, [sp, #80]	; 0x50
   866a2:	ddf1      	ble.n	86688 <_vfiprintf_r+0x7d8>
   866a4:	2a00      	cmp	r2, #0
   866a6:	d17d      	bne.n	867a4 <_vfiprintf_r+0x8f4>
   866a8:	3c10      	subs	r4, #16
   866aa:	2c10      	cmp	r4, #16
   866ac:	f04f 0001 	mov.w	r0, #1
   866b0:	4611      	mov	r1, r2
   866b2:	464e      	mov	r6, r9
   866b4:	dcee      	bgt.n	86694 <_vfiprintf_r+0x7e4>
   866b6:	4422      	add	r2, r4
   866b8:	2807      	cmp	r0, #7
   866ba:	9215      	str	r2, [sp, #84]	; 0x54
   866bc:	6035      	str	r5, [r6, #0]
   866be:	6074      	str	r4, [r6, #4]
   866c0:	9014      	str	r0, [sp, #80]	; 0x50
   866c2:	dd59      	ble.n	86778 <_vfiprintf_r+0x8c8>
   866c4:	2a00      	cmp	r2, #0
   866c6:	d14f      	bne.n	86768 <_vfiprintf_r+0x8b8>
   866c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   866ca:	f8dd b00c 	ldr.w	fp, [sp, #12]
   866ce:	9d04      	ldr	r5, [sp, #16]
   866d0:	45ab      	cmp	fp, r5
   866d2:	bfac      	ite	ge
   866d4:	445c      	addge	r4, fp
   866d6:	1964      	addlt	r4, r4, r5
   866d8:	9409      	str	r4, [sp, #36]	; 0x24
   866da:	e05e      	b.n	8679a <_vfiprintf_r+0x8ea>
   866dc:	4620      	mov	r0, r4
   866de:	9902      	ldr	r1, [sp, #8]
   866e0:	aa13      	add	r2, sp, #76	; 0x4c
   866e2:	f7ff fba9 	bl	85e38 <__sprint_r.part.0>
   866e6:	2800      	cmp	r0, #0
   866e8:	d135      	bne.n	86756 <_vfiprintf_r+0x8a6>
   866ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   866ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
   866ee:	f103 0c01 	add.w	ip, r3, #1
   866f2:	4648      	mov	r0, r9
   866f4:	e781      	b.n	865fa <_vfiprintf_r+0x74a>
   866f6:	08e0      	lsrs	r0, r4, #3
   866f8:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   866fc:	f004 0207 	and.w	r2, r4, #7
   86700:	08e9      	lsrs	r1, r5, #3
   86702:	3230      	adds	r2, #48	; 0x30
   86704:	ea50 0b01 	orrs.w	fp, r0, r1
   86708:	461f      	mov	r7, r3
   8670a:	701a      	strb	r2, [r3, #0]
   8670c:	4604      	mov	r4, r0
   8670e:	460d      	mov	r5, r1
   86710:	f103 33ff 	add.w	r3, r3, #4294967295
   86714:	d1ef      	bne.n	866f6 <_vfiprintf_r+0x846>
   86716:	f01a 0f01 	tst.w	sl, #1
   8671a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   8671e:	4639      	mov	r1, r7
   86720:	f000 80b9 	beq.w	86896 <_vfiprintf_r+0x9e6>
   86724:	2a30      	cmp	r2, #48	; 0x30
   86726:	f43f acf4 	beq.w	86112 <_vfiprintf_r+0x262>
   8672a:	461f      	mov	r7, r3
   8672c:	ebc7 0509 	rsb	r5, r7, r9
   86730:	2330      	movs	r3, #48	; 0x30
   86732:	9505      	str	r5, [sp, #20]
   86734:	f801 3c01 	strb.w	r3, [r1, #-1]
   86738:	e4ee      	b.n	86118 <_vfiprintf_r+0x268>
   8673a:	bf00      	nop
   8673c:	0008a5f8 	.word	0x0008a5f8
   86740:	0008a624 	.word	0x0008a624
   86744:	0008a634 	.word	0x0008a634
   86748:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8674a:	b123      	cbz	r3, 86756 <_vfiprintf_r+0x8a6>
   8674c:	9806      	ldr	r0, [sp, #24]
   8674e:	9902      	ldr	r1, [sp, #8]
   86750:	aa13      	add	r2, sp, #76	; 0x4c
   86752:	f7ff fb71 	bl	85e38 <__sprint_r.part.0>
   86756:	9c02      	ldr	r4, [sp, #8]
   86758:	89a3      	ldrh	r3, [r4, #12]
   8675a:	065b      	lsls	r3, r3, #25
   8675c:	f53f ac98 	bmi.w	86090 <_vfiprintf_r+0x1e0>
   86760:	9809      	ldr	r0, [sp, #36]	; 0x24
   86762:	b031      	add	sp, #196	; 0xc4
   86764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86768:	9806      	ldr	r0, [sp, #24]
   8676a:	9902      	ldr	r1, [sp, #8]
   8676c:	aa13      	add	r2, sp, #76	; 0x4c
   8676e:	f7ff fb63 	bl	85e38 <__sprint_r.part.0>
   86772:	2800      	cmp	r0, #0
   86774:	d1ef      	bne.n	86756 <_vfiprintf_r+0x8a6>
   86776:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86778:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8677a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8677e:	9d04      	ldr	r5, [sp, #16]
   86780:	45ab      	cmp	fp, r5
   86782:	bfac      	ite	ge
   86784:	445c      	addge	r4, fp
   86786:	1964      	addlt	r4, r4, r5
   86788:	9409      	str	r4, [sp, #36]	; 0x24
   8678a:	b132      	cbz	r2, 8679a <_vfiprintf_r+0x8ea>
   8678c:	9806      	ldr	r0, [sp, #24]
   8678e:	9902      	ldr	r1, [sp, #8]
   86790:	aa13      	add	r2, sp, #76	; 0x4c
   86792:	f7ff fb51 	bl	85e38 <__sprint_r.part.0>
   86796:	2800      	cmp	r0, #0
   86798:	d1dd      	bne.n	86756 <_vfiprintf_r+0x8a6>
   8679a:	2000      	movs	r0, #0
   8679c:	9014      	str	r0, [sp, #80]	; 0x50
   8679e:	464e      	mov	r6, r9
   867a0:	f7ff bbb9 	b.w	85f16 <_vfiprintf_r+0x66>
   867a4:	4650      	mov	r0, sl
   867a6:	4659      	mov	r1, fp
   867a8:	aa13      	add	r2, sp, #76	; 0x4c
   867aa:	f7ff fb45 	bl	85e38 <__sprint_r.part.0>
   867ae:	2800      	cmp	r0, #0
   867b0:	d1d1      	bne.n	86756 <_vfiprintf_r+0x8a6>
   867b2:	9914      	ldr	r1, [sp, #80]	; 0x50
   867b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   867b6:	1c48      	adds	r0, r1, #1
   867b8:	464e      	mov	r6, r9
   867ba:	e768      	b.n	8668e <_vfiprintf_r+0x7de>
   867bc:	2a00      	cmp	r2, #0
   867be:	f040 80f7 	bne.w	869b0 <_vfiprintf_r+0xb00>
   867c2:	9c05      	ldr	r4, [sp, #20]
   867c4:	2301      	movs	r3, #1
   867c6:	9720      	str	r7, [sp, #128]	; 0x80
   867c8:	9421      	str	r4, [sp, #132]	; 0x84
   867ca:	9415      	str	r4, [sp, #84]	; 0x54
   867cc:	4622      	mov	r2, r4
   867ce:	9314      	str	r3, [sp, #80]	; 0x50
   867d0:	464e      	mov	r6, r9
   867d2:	3608      	adds	r6, #8
   867d4:	e741      	b.n	8665a <_vfiprintf_r+0x7aa>
   867d6:	9d04      	ldr	r5, [sp, #16]
   867d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   867dc:	ebcb 0405 	rsb	r4, fp, r5
   867e0:	2c00      	cmp	r4, #0
   867e2:	f77f aef7 	ble.w	865d4 <_vfiprintf_r+0x724>
   867e6:	2c10      	cmp	r4, #16
   867e8:	4da6      	ldr	r5, [pc, #664]	; (86a84 <_vfiprintf_r+0xbd4>)
   867ea:	f340 8170 	ble.w	86ace <_vfiprintf_r+0xc1e>
   867ee:	4629      	mov	r1, r5
   867f0:	f04f 0b10 	mov.w	fp, #16
   867f4:	4625      	mov	r5, r4
   867f6:	4664      	mov	r4, ip
   867f8:	46b4      	mov	ip, r6
   867fa:	460e      	mov	r6, r1
   867fc:	e006      	b.n	8680c <_vfiprintf_r+0x95c>
   867fe:	1c98      	adds	r0, r3, #2
   86800:	f10c 0c08 	add.w	ip, ip, #8
   86804:	460b      	mov	r3, r1
   86806:	3d10      	subs	r5, #16
   86808:	2d10      	cmp	r5, #16
   8680a:	dd0f      	ble.n	8682c <_vfiprintf_r+0x97c>
   8680c:	1c59      	adds	r1, r3, #1
   8680e:	3210      	adds	r2, #16
   86810:	2907      	cmp	r1, #7
   86812:	9215      	str	r2, [sp, #84]	; 0x54
   86814:	e88c 0840 	stmia.w	ip, {r6, fp}
   86818:	9114      	str	r1, [sp, #80]	; 0x50
   8681a:	ddf0      	ble.n	867fe <_vfiprintf_r+0x94e>
   8681c:	b9ba      	cbnz	r2, 8684e <_vfiprintf_r+0x99e>
   8681e:	3d10      	subs	r5, #16
   86820:	2d10      	cmp	r5, #16
   86822:	f04f 0001 	mov.w	r0, #1
   86826:	4613      	mov	r3, r2
   86828:	46cc      	mov	ip, r9
   8682a:	dcef      	bgt.n	8680c <_vfiprintf_r+0x95c>
   8682c:	4633      	mov	r3, r6
   8682e:	4666      	mov	r6, ip
   86830:	46a4      	mov	ip, r4
   86832:	462c      	mov	r4, r5
   86834:	461d      	mov	r5, r3
   86836:	4422      	add	r2, r4
   86838:	2807      	cmp	r0, #7
   8683a:	9215      	str	r2, [sp, #84]	; 0x54
   8683c:	6035      	str	r5, [r6, #0]
   8683e:	6074      	str	r4, [r6, #4]
   86840:	9014      	str	r0, [sp, #80]	; 0x50
   86842:	f300 80af 	bgt.w	869a4 <_vfiprintf_r+0xaf4>
   86846:	3608      	adds	r6, #8
   86848:	1c41      	adds	r1, r0, #1
   8684a:	4603      	mov	r3, r0
   8684c:	e6c2      	b.n	865d4 <_vfiprintf_r+0x724>
   8684e:	9806      	ldr	r0, [sp, #24]
   86850:	9902      	ldr	r1, [sp, #8]
   86852:	aa13      	add	r2, sp, #76	; 0x4c
   86854:	f7ff faf0 	bl	85e38 <__sprint_r.part.0>
   86858:	2800      	cmp	r0, #0
   8685a:	f47f af7c 	bne.w	86756 <_vfiprintf_r+0x8a6>
   8685e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86860:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86862:	1c58      	adds	r0, r3, #1
   86864:	46cc      	mov	ip, r9
   86866:	e7ce      	b.n	86806 <_vfiprintf_r+0x956>
   86868:	2a00      	cmp	r2, #0
   8686a:	d179      	bne.n	86960 <_vfiprintf_r+0xab0>
   8686c:	4619      	mov	r1, r3
   8686e:	464e      	mov	r6, r9
   86870:	4613      	mov	r3, r2
   86872:	e69c      	b.n	865ae <_vfiprintf_r+0x6fe>
   86874:	2a00      	cmp	r2, #0
   86876:	f040 8084 	bne.w	86982 <_vfiprintf_r+0xad2>
   8687a:	2101      	movs	r1, #1
   8687c:	4613      	mov	r3, r2
   8687e:	464e      	mov	r6, r9
   86880:	e6a4      	b.n	865cc <_vfiprintf_r+0x71c>
   86882:	464f      	mov	r7, r9
   86884:	e448      	b.n	86118 <_vfiprintf_r+0x268>
   86886:	2d00      	cmp	r5, #0
   86888:	bf08      	it	eq
   8688a:	2c0a      	cmpeq	r4, #10
   8688c:	d246      	bcs.n	8691c <_vfiprintf_r+0xa6c>
   8688e:	3430      	adds	r4, #48	; 0x30
   86890:	af30      	add	r7, sp, #192	; 0xc0
   86892:	f807 4d41 	strb.w	r4, [r7, #-65]!
   86896:	ebc7 0309 	rsb	r3, r7, r9
   8689a:	9305      	str	r3, [sp, #20]
   8689c:	e43c      	b.n	86118 <_vfiprintf_r+0x268>
   8689e:	2302      	movs	r3, #2
   868a0:	e417      	b.n	860d2 <_vfiprintf_r+0x222>
   868a2:	2a00      	cmp	r2, #0
   868a4:	f040 80af 	bne.w	86a06 <_vfiprintf_r+0xb56>
   868a8:	4613      	mov	r3, r2
   868aa:	2101      	movs	r1, #1
   868ac:	464e      	mov	r6, r9
   868ae:	e66d      	b.n	8658c <_vfiprintf_r+0x6dc>
   868b0:	4644      	mov	r4, r8
   868b2:	f7ff bb58 	b.w	85f66 <_vfiprintf_r+0xb6>
   868b6:	9806      	ldr	r0, [sp, #24]
   868b8:	9902      	ldr	r1, [sp, #8]
   868ba:	aa13      	add	r2, sp, #76	; 0x4c
   868bc:	f7ff fabc 	bl	85e38 <__sprint_r.part.0>
   868c0:	2800      	cmp	r0, #0
   868c2:	f47f af48 	bne.w	86756 <_vfiprintf_r+0x8a6>
   868c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   868c8:	464e      	mov	r6, r9
   868ca:	e6c6      	b.n	8665a <_vfiprintf_r+0x7aa>
   868cc:	9d08      	ldr	r5, [sp, #32]
   868ce:	682c      	ldr	r4, [r5, #0]
   868d0:	3504      	adds	r5, #4
   868d2:	9508      	str	r5, [sp, #32]
   868d4:	2500      	movs	r5, #0
   868d6:	f7ff bbfc 	b.w	860d2 <_vfiprintf_r+0x222>
   868da:	9d08      	ldr	r5, [sp, #32]
   868dc:	2301      	movs	r3, #1
   868de:	682c      	ldr	r4, [r5, #0]
   868e0:	3504      	adds	r5, #4
   868e2:	9508      	str	r5, [sp, #32]
   868e4:	2500      	movs	r5, #0
   868e6:	f7ff bbf4 	b.w	860d2 <_vfiprintf_r+0x222>
   868ea:	9d08      	ldr	r5, [sp, #32]
   868ec:	682c      	ldr	r4, [r5, #0]
   868ee:	3504      	adds	r5, #4
   868f0:	9508      	str	r5, [sp, #32]
   868f2:	2500      	movs	r5, #0
   868f4:	e525      	b.n	86342 <_vfiprintf_r+0x492>
   868f6:	9d08      	ldr	r5, [sp, #32]
   868f8:	682c      	ldr	r4, [r5, #0]
   868fa:	3504      	adds	r5, #4
   868fc:	9508      	str	r5, [sp, #32]
   868fe:	17e5      	asrs	r5, r4, #31
   86900:	4622      	mov	r2, r4
   86902:	462b      	mov	r3, r5
   86904:	e48e      	b.n	86224 <_vfiprintf_r+0x374>
   86906:	9806      	ldr	r0, [sp, #24]
   86908:	9902      	ldr	r1, [sp, #8]
   8690a:	aa13      	add	r2, sp, #76	; 0x4c
   8690c:	f7ff fa94 	bl	85e38 <__sprint_r.part.0>
   86910:	2800      	cmp	r0, #0
   86912:	f47f af20 	bne.w	86756 <_vfiprintf_r+0x8a6>
   86916:	464e      	mov	r6, r9
   86918:	f7ff bb9a 	b.w	86050 <_vfiprintf_r+0x1a0>
   8691c:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   86920:	9603      	str	r6, [sp, #12]
   86922:	465e      	mov	r6, fp
   86924:	46e3      	mov	fp, ip
   86926:	4620      	mov	r0, r4
   86928:	4629      	mov	r1, r5
   8692a:	220a      	movs	r2, #10
   8692c:	2300      	movs	r3, #0
   8692e:	f003 f92d 	bl	89b8c <__aeabi_uldivmod>
   86932:	3230      	adds	r2, #48	; 0x30
   86934:	7032      	strb	r2, [r6, #0]
   86936:	4620      	mov	r0, r4
   86938:	4629      	mov	r1, r5
   8693a:	220a      	movs	r2, #10
   8693c:	2300      	movs	r3, #0
   8693e:	f003 f925 	bl	89b8c <__aeabi_uldivmod>
   86942:	4604      	mov	r4, r0
   86944:	460d      	mov	r5, r1
   86946:	ea54 0005 	orrs.w	r0, r4, r5
   8694a:	4637      	mov	r7, r6
   8694c:	f106 36ff 	add.w	r6, r6, #4294967295
   86950:	d1e9      	bne.n	86926 <_vfiprintf_r+0xa76>
   86952:	ebc7 0309 	rsb	r3, r7, r9
   86956:	46dc      	mov	ip, fp
   86958:	9e03      	ldr	r6, [sp, #12]
   8695a:	9305      	str	r3, [sp, #20]
   8695c:	f7ff bbdc 	b.w	86118 <_vfiprintf_r+0x268>
   86960:	9806      	ldr	r0, [sp, #24]
   86962:	9902      	ldr	r1, [sp, #8]
   86964:	aa13      	add	r2, sp, #76	; 0x4c
   86966:	f8cd c004 	str.w	ip, [sp, #4]
   8696a:	f7ff fa65 	bl	85e38 <__sprint_r.part.0>
   8696e:	f8dd c004 	ldr.w	ip, [sp, #4]
   86972:	2800      	cmp	r0, #0
   86974:	f47f aeef 	bne.w	86756 <_vfiprintf_r+0x8a6>
   86978:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8697a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8697c:	1c59      	adds	r1, r3, #1
   8697e:	464e      	mov	r6, r9
   86980:	e615      	b.n	865ae <_vfiprintf_r+0x6fe>
   86982:	9806      	ldr	r0, [sp, #24]
   86984:	9902      	ldr	r1, [sp, #8]
   86986:	aa13      	add	r2, sp, #76	; 0x4c
   86988:	f8cd c004 	str.w	ip, [sp, #4]
   8698c:	f7ff fa54 	bl	85e38 <__sprint_r.part.0>
   86990:	f8dd c004 	ldr.w	ip, [sp, #4]
   86994:	2800      	cmp	r0, #0
   86996:	f47f aede 	bne.w	86756 <_vfiprintf_r+0x8a6>
   8699a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8699c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8699e:	1c59      	adds	r1, r3, #1
   869a0:	464e      	mov	r6, r9
   869a2:	e613      	b.n	865cc <_vfiprintf_r+0x71c>
   869a4:	2a00      	cmp	r2, #0
   869a6:	d156      	bne.n	86a56 <_vfiprintf_r+0xba6>
   869a8:	2101      	movs	r1, #1
   869aa:	4613      	mov	r3, r2
   869ac:	464e      	mov	r6, r9
   869ae:	e611      	b.n	865d4 <_vfiprintf_r+0x724>
   869b0:	9806      	ldr	r0, [sp, #24]
   869b2:	9902      	ldr	r1, [sp, #8]
   869b4:	aa13      	add	r2, sp, #76	; 0x4c
   869b6:	f7ff fa3f 	bl	85e38 <__sprint_r.part.0>
   869ba:	2800      	cmp	r0, #0
   869bc:	f47f aecb 	bne.w	86756 <_vfiprintf_r+0x8a6>
   869c0:	9914      	ldr	r1, [sp, #80]	; 0x50
   869c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   869c4:	3101      	adds	r1, #1
   869c6:	464e      	mov	r6, r9
   869c8:	e639      	b.n	8663e <_vfiprintf_r+0x78e>
   869ca:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   869ce:	4264      	negs	r4, r4
   869d0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   869d4:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   869d8:	f8cd b01c 	str.w	fp, [sp, #28]
   869dc:	f8cd c014 	str.w	ip, [sp, #20]
   869e0:	2301      	movs	r3, #1
   869e2:	f7ff bb7e 	b.w	860e2 <_vfiprintf_r+0x232>
   869e6:	f01a 0f10 	tst.w	sl, #16
   869ea:	d11d      	bne.n	86a28 <_vfiprintf_r+0xb78>
   869ec:	f01a 0f40 	tst.w	sl, #64	; 0x40
   869f0:	d058      	beq.n	86aa4 <_vfiprintf_r+0xbf4>
   869f2:	9d08      	ldr	r5, [sp, #32]
   869f4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   869f8:	682b      	ldr	r3, [r5, #0]
   869fa:	3504      	adds	r5, #4
   869fc:	9508      	str	r5, [sp, #32]
   869fe:	f8a3 b000 	strh.w	fp, [r3]
   86a02:	f7ff ba88 	b.w	85f16 <_vfiprintf_r+0x66>
   86a06:	9806      	ldr	r0, [sp, #24]
   86a08:	9902      	ldr	r1, [sp, #8]
   86a0a:	aa13      	add	r2, sp, #76	; 0x4c
   86a0c:	f8cd c004 	str.w	ip, [sp, #4]
   86a10:	f7ff fa12 	bl	85e38 <__sprint_r.part.0>
   86a14:	f8dd c004 	ldr.w	ip, [sp, #4]
   86a18:	2800      	cmp	r0, #0
   86a1a:	f47f ae9c 	bne.w	86756 <_vfiprintf_r+0x8a6>
   86a1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86a20:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86a22:	1c59      	adds	r1, r3, #1
   86a24:	464e      	mov	r6, r9
   86a26:	e5b1      	b.n	8658c <_vfiprintf_r+0x6dc>
   86a28:	f8dd b020 	ldr.w	fp, [sp, #32]
   86a2c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   86a2e:	f8db 3000 	ldr.w	r3, [fp]
   86a32:	f10b 0b04 	add.w	fp, fp, #4
   86a36:	f8cd b020 	str.w	fp, [sp, #32]
   86a3a:	601c      	str	r4, [r3, #0]
   86a3c:	f7ff ba6b 	b.w	85f16 <_vfiprintf_r+0x66>
   86a40:	9408      	str	r4, [sp, #32]
   86a42:	f7fd ff27 	bl	84894 <strlen>
   86a46:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   86a4a:	9005      	str	r0, [sp, #20]
   86a4c:	9407      	str	r4, [sp, #28]
   86a4e:	f04f 0c00 	mov.w	ip, #0
   86a52:	f7ff bb61 	b.w	86118 <_vfiprintf_r+0x268>
   86a56:	9806      	ldr	r0, [sp, #24]
   86a58:	9902      	ldr	r1, [sp, #8]
   86a5a:	aa13      	add	r2, sp, #76	; 0x4c
   86a5c:	f8cd c004 	str.w	ip, [sp, #4]
   86a60:	f7ff f9ea 	bl	85e38 <__sprint_r.part.0>
   86a64:	f8dd c004 	ldr.w	ip, [sp, #4]
   86a68:	2800      	cmp	r0, #0
   86a6a:	f47f ae74 	bne.w	86756 <_vfiprintf_r+0x8a6>
   86a6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86a70:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86a72:	1c59      	adds	r1, r3, #1
   86a74:	464e      	mov	r6, r9
   86a76:	e5ad      	b.n	865d4 <_vfiprintf_r+0x724>
   86a78:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86a7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86a7c:	3301      	adds	r3, #1
   86a7e:	4d02      	ldr	r5, [pc, #8]	; (86a88 <_vfiprintf_r+0xbd8>)
   86a80:	f7ff bb9a 	b.w	861b8 <_vfiprintf_r+0x308>
   86a84:	0008a624 	.word	0x0008a624
   86a88:	0008a634 	.word	0x0008a634
   86a8c:	f1bc 0f06 	cmp.w	ip, #6
   86a90:	bf34      	ite	cc
   86a92:	4663      	movcc	r3, ip
   86a94:	2306      	movcs	r3, #6
   86a96:	9408      	str	r4, [sp, #32]
   86a98:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   86a9c:	9305      	str	r3, [sp, #20]
   86a9e:	9403      	str	r4, [sp, #12]
   86aa0:	4f16      	ldr	r7, [pc, #88]	; (86afc <_vfiprintf_r+0xc4c>)
   86aa2:	e472      	b.n	8638a <_vfiprintf_r+0x4da>
   86aa4:	9c08      	ldr	r4, [sp, #32]
   86aa6:	9d09      	ldr	r5, [sp, #36]	; 0x24
   86aa8:	6823      	ldr	r3, [r4, #0]
   86aaa:	3404      	adds	r4, #4
   86aac:	9408      	str	r4, [sp, #32]
   86aae:	601d      	str	r5, [r3, #0]
   86ab0:	f7ff ba31 	b.w	85f16 <_vfiprintf_r+0x66>
   86ab4:	9814      	ldr	r0, [sp, #80]	; 0x50
   86ab6:	4d12      	ldr	r5, [pc, #72]	; (86b00 <_vfiprintf_r+0xc50>)
   86ab8:	3001      	adds	r0, #1
   86aba:	e5fc      	b.n	866b6 <_vfiprintf_r+0x806>
   86abc:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   86ac0:	f8cd c014 	str.w	ip, [sp, #20]
   86ac4:	9507      	str	r5, [sp, #28]
   86ac6:	9408      	str	r4, [sp, #32]
   86ac8:	4684      	mov	ip, r0
   86aca:	f7ff bb25 	b.w	86118 <_vfiprintf_r+0x268>
   86ace:	4608      	mov	r0, r1
   86ad0:	e6b1      	b.n	86836 <_vfiprintf_r+0x986>
   86ad2:	46a0      	mov	r8, r4
   86ad4:	2500      	movs	r5, #0
   86ad6:	f7ff ba5a 	b.w	85f8e <_vfiprintf_r+0xde>
   86ada:	f8dd b020 	ldr.w	fp, [sp, #32]
   86ade:	f898 3001 	ldrb.w	r3, [r8, #1]
   86ae2:	f8db 5000 	ldr.w	r5, [fp]
   86ae6:	f10b 0204 	add.w	r2, fp, #4
   86aea:	2d00      	cmp	r5, #0
   86aec:	9208      	str	r2, [sp, #32]
   86aee:	46a0      	mov	r8, r4
   86af0:	f6bf aa4b 	bge.w	85f8a <_vfiprintf_r+0xda>
   86af4:	f04f 35ff 	mov.w	r5, #4294967295
   86af8:	f7ff ba47 	b.w	85f8a <_vfiprintf_r+0xda>
   86afc:	0008a60c 	.word	0x0008a60c
   86b00:	0008a634 	.word	0x0008a634

00086b04 <__sbprintf>:
   86b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86b08:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   86b0a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   86b0e:	4688      	mov	r8, r1
   86b10:	9719      	str	r7, [sp, #100]	; 0x64
   86b12:	f8d8 701c 	ldr.w	r7, [r8, #28]
   86b16:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   86b1a:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   86b1e:	9707      	str	r7, [sp, #28]
   86b20:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   86b24:	ac1a      	add	r4, sp, #104	; 0x68
   86b26:	f44f 6580 	mov.w	r5, #1024	; 0x400
   86b2a:	f02a 0a02 	bic.w	sl, sl, #2
   86b2e:	2600      	movs	r6, #0
   86b30:	4669      	mov	r1, sp
   86b32:	9400      	str	r4, [sp, #0]
   86b34:	9404      	str	r4, [sp, #16]
   86b36:	9502      	str	r5, [sp, #8]
   86b38:	9505      	str	r5, [sp, #20]
   86b3a:	f8ad a00c 	strh.w	sl, [sp, #12]
   86b3e:	f8ad 900e 	strh.w	r9, [sp, #14]
   86b42:	9709      	str	r7, [sp, #36]	; 0x24
   86b44:	9606      	str	r6, [sp, #24]
   86b46:	4605      	mov	r5, r0
   86b48:	f7ff f9b2 	bl	85eb0 <_vfiprintf_r>
   86b4c:	1e04      	subs	r4, r0, #0
   86b4e:	db07      	blt.n	86b60 <__sbprintf+0x5c>
   86b50:	4628      	mov	r0, r5
   86b52:	4669      	mov	r1, sp
   86b54:	f001 f8e0 	bl	87d18 <_fflush_r>
   86b58:	42b0      	cmp	r0, r6
   86b5a:	bf18      	it	ne
   86b5c:	f04f 34ff 	movne.w	r4, #4294967295
   86b60:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   86b64:	065b      	lsls	r3, r3, #25
   86b66:	d505      	bpl.n	86b74 <__sbprintf+0x70>
   86b68:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   86b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   86b70:	f8a8 300c 	strh.w	r3, [r8, #12]
   86b74:	4620      	mov	r0, r4
   86b76:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   86b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86b7e:	bf00      	nop

00086b80 <__swsetup_r>:
   86b80:	4b2f      	ldr	r3, [pc, #188]	; (86c40 <__swsetup_r+0xc0>)
   86b82:	b570      	push	{r4, r5, r6, lr}
   86b84:	4606      	mov	r6, r0
   86b86:	6818      	ldr	r0, [r3, #0]
   86b88:	460c      	mov	r4, r1
   86b8a:	b110      	cbz	r0, 86b92 <__swsetup_r+0x12>
   86b8c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   86b8e:	2a00      	cmp	r2, #0
   86b90:	d036      	beq.n	86c00 <__swsetup_r+0x80>
   86b92:	89a5      	ldrh	r5, [r4, #12]
   86b94:	b2ab      	uxth	r3, r5
   86b96:	0719      	lsls	r1, r3, #28
   86b98:	d50c      	bpl.n	86bb4 <__swsetup_r+0x34>
   86b9a:	6922      	ldr	r2, [r4, #16]
   86b9c:	b1aa      	cbz	r2, 86bca <__swsetup_r+0x4a>
   86b9e:	f013 0101 	ands.w	r1, r3, #1
   86ba2:	d01e      	beq.n	86be2 <__swsetup_r+0x62>
   86ba4:	6963      	ldr	r3, [r4, #20]
   86ba6:	2100      	movs	r1, #0
   86ba8:	425b      	negs	r3, r3
   86baa:	61a3      	str	r3, [r4, #24]
   86bac:	60a1      	str	r1, [r4, #8]
   86bae:	b1f2      	cbz	r2, 86bee <__swsetup_r+0x6e>
   86bb0:	2000      	movs	r0, #0
   86bb2:	bd70      	pop	{r4, r5, r6, pc}
   86bb4:	06da      	lsls	r2, r3, #27
   86bb6:	d53a      	bpl.n	86c2e <__swsetup_r+0xae>
   86bb8:	075b      	lsls	r3, r3, #29
   86bba:	d424      	bmi.n	86c06 <__swsetup_r+0x86>
   86bbc:	6922      	ldr	r2, [r4, #16]
   86bbe:	f045 0308 	orr.w	r3, r5, #8
   86bc2:	81a3      	strh	r3, [r4, #12]
   86bc4:	b29b      	uxth	r3, r3
   86bc6:	2a00      	cmp	r2, #0
   86bc8:	d1e9      	bne.n	86b9e <__swsetup_r+0x1e>
   86bca:	f403 7120 	and.w	r1, r3, #640	; 0x280
   86bce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   86bd2:	d0e4      	beq.n	86b9e <__swsetup_r+0x1e>
   86bd4:	4630      	mov	r0, r6
   86bd6:	4621      	mov	r1, r4
   86bd8:	f001 fc88 	bl	884ec <__smakebuf_r>
   86bdc:	89a3      	ldrh	r3, [r4, #12]
   86bde:	6922      	ldr	r2, [r4, #16]
   86be0:	e7dd      	b.n	86b9e <__swsetup_r+0x1e>
   86be2:	0798      	lsls	r0, r3, #30
   86be4:	bf58      	it	pl
   86be6:	6961      	ldrpl	r1, [r4, #20]
   86be8:	60a1      	str	r1, [r4, #8]
   86bea:	2a00      	cmp	r2, #0
   86bec:	d1e0      	bne.n	86bb0 <__swsetup_r+0x30>
   86bee:	89a3      	ldrh	r3, [r4, #12]
   86bf0:	061a      	lsls	r2, r3, #24
   86bf2:	d5dd      	bpl.n	86bb0 <__swsetup_r+0x30>
   86bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   86bf8:	81a3      	strh	r3, [r4, #12]
   86bfa:	f04f 30ff 	mov.w	r0, #4294967295
   86bfe:	bd70      	pop	{r4, r5, r6, pc}
   86c00:	f001 f8a6 	bl	87d50 <__sinit>
   86c04:	e7c5      	b.n	86b92 <__swsetup_r+0x12>
   86c06:	6b21      	ldr	r1, [r4, #48]	; 0x30
   86c08:	b149      	cbz	r1, 86c1e <__swsetup_r+0x9e>
   86c0a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   86c0e:	4299      	cmp	r1, r3
   86c10:	d003      	beq.n	86c1a <__swsetup_r+0x9a>
   86c12:	4630      	mov	r0, r6
   86c14:	f001 f9e0 	bl	87fd8 <_free_r>
   86c18:	89a5      	ldrh	r5, [r4, #12]
   86c1a:	2300      	movs	r3, #0
   86c1c:	6323      	str	r3, [r4, #48]	; 0x30
   86c1e:	6922      	ldr	r2, [r4, #16]
   86c20:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   86c24:	2100      	movs	r1, #0
   86c26:	b2ad      	uxth	r5, r5
   86c28:	6022      	str	r2, [r4, #0]
   86c2a:	6061      	str	r1, [r4, #4]
   86c2c:	e7c7      	b.n	86bbe <__swsetup_r+0x3e>
   86c2e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   86c32:	2309      	movs	r3, #9
   86c34:	6033      	str	r3, [r6, #0]
   86c36:	f04f 30ff 	mov.w	r0, #4294967295
   86c3a:	81a5      	strh	r5, [r4, #12]
   86c3c:	bd70      	pop	{r4, r5, r6, pc}
   86c3e:	bf00      	nop
   86c40:	200705d8 	.word	0x200705d8

00086c44 <register_fini>:
   86c44:	4b02      	ldr	r3, [pc, #8]	; (86c50 <register_fini+0xc>)
   86c46:	b113      	cbz	r3, 86c4e <register_fini+0xa>
   86c48:	4802      	ldr	r0, [pc, #8]	; (86c54 <register_fini+0x10>)
   86c4a:	f000 b805 	b.w	86c58 <atexit>
   86c4e:	4770      	bx	lr
   86c50:	00000000 	.word	0x00000000
   86c54:	00087e4d 	.word	0x00087e4d

00086c58 <atexit>:
   86c58:	4601      	mov	r1, r0
   86c5a:	2000      	movs	r0, #0
   86c5c:	4602      	mov	r2, r0
   86c5e:	4603      	mov	r3, r0
   86c60:	f002 be68 	b.w	89934 <__register_exitproc>

00086c64 <quorem>:
   86c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86c68:	6903      	ldr	r3, [r0, #16]
   86c6a:	690d      	ldr	r5, [r1, #16]
   86c6c:	b083      	sub	sp, #12
   86c6e:	429d      	cmp	r5, r3
   86c70:	4683      	mov	fp, r0
   86c72:	f300 808c 	bgt.w	86d8e <quorem+0x12a>
   86c76:	3d01      	subs	r5, #1
   86c78:	f101 0414 	add.w	r4, r1, #20
   86c7c:	f100 0a14 	add.w	sl, r0, #20
   86c80:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   86c84:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
   86c88:	3201      	adds	r2, #1
   86c8a:	fbb3 f8f2 	udiv	r8, r3, r2
   86c8e:	00aa      	lsls	r2, r5, #2
   86c90:	4691      	mov	r9, r2
   86c92:	9200      	str	r2, [sp, #0]
   86c94:	4452      	add	r2, sl
   86c96:	44a1      	add	r9, r4
   86c98:	9201      	str	r2, [sp, #4]
   86c9a:	f1b8 0f00 	cmp.w	r8, #0
   86c9e:	d03e      	beq.n	86d1e <quorem+0xba>
   86ca0:	2600      	movs	r6, #0
   86ca2:	4630      	mov	r0, r6
   86ca4:	4622      	mov	r2, r4
   86ca6:	4653      	mov	r3, sl
   86ca8:	468c      	mov	ip, r1
   86caa:	f852 7b04 	ldr.w	r7, [r2], #4
   86cae:	6819      	ldr	r1, [r3, #0]
   86cb0:	fa1f fe87 	uxth.w	lr, r7
   86cb4:	0c3f      	lsrs	r7, r7, #16
   86cb6:	fb0e 6e08 	mla	lr, lr, r8, r6
   86cba:	fb07 f608 	mul.w	r6, r7, r8
   86cbe:	eb06 461e 	add.w	r6, r6, lr, lsr #16
   86cc2:	fa1f fe8e 	uxth.w	lr, lr
   86cc6:	ebce 0e00 	rsb	lr, lr, r0
   86cca:	b28f      	uxth	r7, r1
   86ccc:	b2b0      	uxth	r0, r6
   86cce:	4477      	add	r7, lr
   86cd0:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
   86cd4:	eb00 4027 	add.w	r0, r0, r7, asr #16
   86cd8:	b2bf      	uxth	r7, r7
   86cda:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
   86cde:	4591      	cmp	r9, r2
   86ce0:	f843 7b04 	str.w	r7, [r3], #4
   86ce4:	ea4f 4020 	mov.w	r0, r0, asr #16
   86ce8:	ea4f 4616 	mov.w	r6, r6, lsr #16
   86cec:	d2dd      	bcs.n	86caa <quorem+0x46>
   86cee:	9a00      	ldr	r2, [sp, #0]
   86cf0:	4661      	mov	r1, ip
   86cf2:	f85a 3002 	ldr.w	r3, [sl, r2]
   86cf6:	b993      	cbnz	r3, 86d1e <quorem+0xba>
   86cf8:	9a01      	ldr	r2, [sp, #4]
   86cfa:	1f13      	subs	r3, r2, #4
   86cfc:	459a      	cmp	sl, r3
   86cfe:	d20c      	bcs.n	86d1a <quorem+0xb6>
   86d00:	f852 3c04 	ldr.w	r3, [r2, #-4]
   86d04:	b94b      	cbnz	r3, 86d1a <quorem+0xb6>
   86d06:	f1a2 0308 	sub.w	r3, r2, #8
   86d0a:	e002      	b.n	86d12 <quorem+0xae>
   86d0c:	681a      	ldr	r2, [r3, #0]
   86d0e:	3b04      	subs	r3, #4
   86d10:	b91a      	cbnz	r2, 86d1a <quorem+0xb6>
   86d12:	459a      	cmp	sl, r3
   86d14:	f105 35ff 	add.w	r5, r5, #4294967295
   86d18:	d3f8      	bcc.n	86d0c <quorem+0xa8>
   86d1a:	f8cb 5010 	str.w	r5, [fp, #16]
   86d1e:	4658      	mov	r0, fp
   86d20:	f002 f9c8 	bl	890b4 <__mcmp>
   86d24:	2800      	cmp	r0, #0
   86d26:	db2e      	blt.n	86d86 <quorem+0x122>
   86d28:	f108 0801 	add.w	r8, r8, #1
   86d2c:	4653      	mov	r3, sl
   86d2e:	2200      	movs	r2, #0
   86d30:	f854 6b04 	ldr.w	r6, [r4], #4
   86d34:	6818      	ldr	r0, [r3, #0]
   86d36:	b2b1      	uxth	r1, r6
   86d38:	1a51      	subs	r1, r2, r1
   86d3a:	b287      	uxth	r7, r0
   86d3c:	0c36      	lsrs	r6, r6, #16
   86d3e:	4439      	add	r1, r7
   86d40:	ebc6 4010 	rsb	r0, r6, r0, lsr #16
   86d44:	eb00 4221 	add.w	r2, r0, r1, asr #16
   86d48:	b289      	uxth	r1, r1
   86d4a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   86d4e:	45a1      	cmp	r9, r4
   86d50:	f843 1b04 	str.w	r1, [r3], #4
   86d54:	ea4f 4222 	mov.w	r2, r2, asr #16
   86d58:	d2ea      	bcs.n	86d30 <quorem+0xcc>
   86d5a:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   86d5e:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
   86d62:	b982      	cbnz	r2, 86d86 <quorem+0x122>
   86d64:	1f1a      	subs	r2, r3, #4
   86d66:	4592      	cmp	sl, r2
   86d68:	d20b      	bcs.n	86d82 <quorem+0x11e>
   86d6a:	f853 2c04 	ldr.w	r2, [r3, #-4]
   86d6e:	b942      	cbnz	r2, 86d82 <quorem+0x11e>
   86d70:	3b08      	subs	r3, #8
   86d72:	e002      	b.n	86d7a <quorem+0x116>
   86d74:	681a      	ldr	r2, [r3, #0]
   86d76:	3b04      	subs	r3, #4
   86d78:	b91a      	cbnz	r2, 86d82 <quorem+0x11e>
   86d7a:	459a      	cmp	sl, r3
   86d7c:	f105 35ff 	add.w	r5, r5, #4294967295
   86d80:	d3f8      	bcc.n	86d74 <quorem+0x110>
   86d82:	f8cb 5010 	str.w	r5, [fp, #16]
   86d86:	4640      	mov	r0, r8
   86d88:	b003      	add	sp, #12
   86d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86d8e:	2000      	movs	r0, #0
   86d90:	b003      	add	sp, #12
   86d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86d96:	bf00      	nop

00086d98 <_dtoa_r>:
   86d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86d9c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   86d9e:	b09b      	sub	sp, #108	; 0x6c
   86da0:	4604      	mov	r4, r0
   86da2:	4692      	mov	sl, r2
   86da4:	469b      	mov	fp, r3
   86da6:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   86da8:	b141      	cbz	r1, 86dbc <_dtoa_r+0x24>
   86daa:	6c43      	ldr	r3, [r0, #68]	; 0x44
   86dac:	2201      	movs	r2, #1
   86dae:	409a      	lsls	r2, r3
   86db0:	604b      	str	r3, [r1, #4]
   86db2:	608a      	str	r2, [r1, #8]
   86db4:	f001 ff88 	bl	88cc8 <_Bfree>
   86db8:	2300      	movs	r3, #0
   86dba:	6423      	str	r3, [r4, #64]	; 0x40
   86dbc:	f1bb 0f00 	cmp.w	fp, #0
   86dc0:	46d9      	mov	r9, fp
   86dc2:	db33      	blt.n	86e2c <_dtoa_r+0x94>
   86dc4:	2300      	movs	r3, #0
   86dc6:	602b      	str	r3, [r5, #0]
   86dc8:	4ba5      	ldr	r3, [pc, #660]	; (87060 <_dtoa_r+0x2c8>)
   86dca:	461a      	mov	r2, r3
   86dcc:	ea09 0303 	and.w	r3, r9, r3
   86dd0:	4293      	cmp	r3, r2
   86dd2:	d014      	beq.n	86dfe <_dtoa_r+0x66>
   86dd4:	4650      	mov	r0, sl
   86dd6:	4659      	mov	r1, fp
   86dd8:	2200      	movs	r2, #0
   86dda:	2300      	movs	r3, #0
   86ddc:	f7fd fb50 	bl	84480 <__aeabi_dcmpeq>
   86de0:	4680      	mov	r8, r0
   86de2:	b348      	cbz	r0, 86e38 <_dtoa_r+0xa0>
   86de4:	9e26      	ldr	r6, [sp, #152]	; 0x98
   86de6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   86de8:	2301      	movs	r3, #1
   86dea:	6033      	str	r3, [r6, #0]
   86dec:	2d00      	cmp	r5, #0
   86dee:	f000 80ca 	beq.w	86f86 <_dtoa_r+0x1ee>
   86df2:	489c      	ldr	r0, [pc, #624]	; (87064 <_dtoa_r+0x2cc>)
   86df4:	6028      	str	r0, [r5, #0]
   86df6:	3801      	subs	r0, #1
   86df8:	b01b      	add	sp, #108	; 0x6c
   86dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86dfe:	9d26      	ldr	r5, [sp, #152]	; 0x98
   86e00:	f242 730f 	movw	r3, #9999	; 0x270f
   86e04:	602b      	str	r3, [r5, #0]
   86e06:	f1ba 0f00 	cmp.w	sl, #0
   86e0a:	f000 80a5 	beq.w	86f58 <_dtoa_r+0x1c0>
   86e0e:	4896      	ldr	r0, [pc, #600]	; (87068 <_dtoa_r+0x2d0>)
   86e10:	9e28      	ldr	r6, [sp, #160]	; 0xa0
   86e12:	2e00      	cmp	r6, #0
   86e14:	d0f0      	beq.n	86df8 <_dtoa_r+0x60>
   86e16:	78c3      	ldrb	r3, [r0, #3]
   86e18:	2b00      	cmp	r3, #0
   86e1a:	f000 80b6 	beq.w	86f8a <_dtoa_r+0x1f2>
   86e1e:	f100 0308 	add.w	r3, r0, #8
   86e22:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   86e24:	602b      	str	r3, [r5, #0]
   86e26:	b01b      	add	sp, #108	; 0x6c
   86e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86e2c:	2301      	movs	r3, #1
   86e2e:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
   86e32:	602b      	str	r3, [r5, #0]
   86e34:	46cb      	mov	fp, r9
   86e36:	e7c7      	b.n	86dc8 <_dtoa_r+0x30>
   86e38:	aa19      	add	r2, sp, #100	; 0x64
   86e3a:	ab18      	add	r3, sp, #96	; 0x60
   86e3c:	e88d 000c 	stmia.w	sp, {r2, r3}
   86e40:	4620      	mov	r0, r4
   86e42:	4652      	mov	r2, sl
   86e44:	465b      	mov	r3, fp
   86e46:	f002 f9c5 	bl	891d4 <__d2b>
   86e4a:	ea5f 5519 	movs.w	r5, r9, lsr #20
   86e4e:	900a      	str	r0, [sp, #40]	; 0x28
   86e50:	f040 808b 	bne.w	86f6a <_dtoa_r+0x1d2>
   86e54:	9f18      	ldr	r7, [sp, #96]	; 0x60
   86e56:	9d19      	ldr	r5, [sp, #100]	; 0x64
   86e58:	f46f 6382 	mvn.w	r3, #1040	; 0x410
   86e5c:	443d      	add	r5, r7
   86e5e:	429d      	cmp	r5, r3
   86e60:	f2c0 8295 	blt.w	8738e <_dtoa_r+0x5f6>
   86e64:	331f      	adds	r3, #31
   86e66:	f205 4212 	addw	r2, r5, #1042	; 0x412
   86e6a:	1b5b      	subs	r3, r3, r5
   86e6c:	fa09 f303 	lsl.w	r3, r9, r3
   86e70:	fa2a f202 	lsr.w	r2, sl, r2
   86e74:	ea43 0002 	orr.w	r0, r3, r2
   86e78:	f7fd f824 	bl	83ec4 <__aeabi_ui2d>
   86e7c:	2601      	movs	r6, #1
   86e7e:	3d01      	subs	r5, #1
   86e80:	46b8      	mov	r8, r7
   86e82:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   86e86:	9616      	str	r6, [sp, #88]	; 0x58
   86e88:	2200      	movs	r2, #0
   86e8a:	4b78      	ldr	r3, [pc, #480]	; (8706c <_dtoa_r+0x2d4>)
   86e8c:	f7fc fedc 	bl	83c48 <__aeabi_dsub>
   86e90:	a36d      	add	r3, pc, #436	; (adr r3, 87048 <_dtoa_r+0x2b0>)
   86e92:	e9d3 2300 	ldrd	r2, r3, [r3]
   86e96:	f7fd f88b 	bl	83fb0 <__aeabi_dmul>
   86e9a:	a36d      	add	r3, pc, #436	; (adr r3, 87050 <_dtoa_r+0x2b8>)
   86e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   86ea0:	f7fc fed4 	bl	83c4c <__adddf3>
   86ea4:	4606      	mov	r6, r0
   86ea6:	4628      	mov	r0, r5
   86ea8:	460f      	mov	r7, r1
   86eaa:	f7fd f81b 	bl	83ee4 <__aeabi_i2d>
   86eae:	a36a      	add	r3, pc, #424	; (adr r3, 87058 <_dtoa_r+0x2c0>)
   86eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   86eb4:	f7fd f87c 	bl	83fb0 <__aeabi_dmul>
   86eb8:	4602      	mov	r2, r0
   86eba:	460b      	mov	r3, r1
   86ebc:	4630      	mov	r0, r6
   86ebe:	4639      	mov	r1, r7
   86ec0:	f7fc fec4 	bl	83c4c <__adddf3>
   86ec4:	4606      	mov	r6, r0
   86ec6:	460f      	mov	r7, r1
   86ec8:	f7fd fb0c 	bl	844e4 <__aeabi_d2iz>
   86ecc:	4639      	mov	r1, r7
   86ece:	9007      	str	r0, [sp, #28]
   86ed0:	2200      	movs	r2, #0
   86ed2:	4630      	mov	r0, r6
   86ed4:	2300      	movs	r3, #0
   86ed6:	f7fd fadd 	bl	84494 <__aeabi_dcmplt>
   86eda:	2800      	cmp	r0, #0
   86edc:	f040 8229 	bne.w	87332 <_dtoa_r+0x59a>
   86ee0:	9e07      	ldr	r6, [sp, #28]
   86ee2:	2e16      	cmp	r6, #22
   86ee4:	f200 8222 	bhi.w	8732c <_dtoa_r+0x594>
   86ee8:	4961      	ldr	r1, [pc, #388]	; (87070 <_dtoa_r+0x2d8>)
   86eea:	4652      	mov	r2, sl
   86eec:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
   86ef0:	465b      	mov	r3, fp
   86ef2:	e9d1 0100 	ldrd	r0, r1, [r1]
   86ef6:	f7fd faeb 	bl	844d0 <__aeabi_dcmpgt>
   86efa:	2800      	cmp	r0, #0
   86efc:	f000 824c 	beq.w	87398 <_dtoa_r+0x600>
   86f00:	3e01      	subs	r6, #1
   86f02:	9607      	str	r6, [sp, #28]
   86f04:	2600      	movs	r6, #0
   86f06:	960e      	str	r6, [sp, #56]	; 0x38
   86f08:	ebc5 0508 	rsb	r5, r5, r8
   86f0c:	3d01      	subs	r5, #1
   86f0e:	9506      	str	r5, [sp, #24]
   86f10:	f100 8226 	bmi.w	87360 <_dtoa_r+0x5c8>
   86f14:	2500      	movs	r5, #0
   86f16:	9508      	str	r5, [sp, #32]
   86f18:	9e07      	ldr	r6, [sp, #28]
   86f1a:	2e00      	cmp	r6, #0
   86f1c:	f2c0 8217 	blt.w	8734e <_dtoa_r+0x5b6>
   86f20:	9d06      	ldr	r5, [sp, #24]
   86f22:	960d      	str	r6, [sp, #52]	; 0x34
   86f24:	4435      	add	r5, r6
   86f26:	2600      	movs	r6, #0
   86f28:	9506      	str	r5, [sp, #24]
   86f2a:	960c      	str	r6, [sp, #48]	; 0x30
   86f2c:	9d24      	ldr	r5, [sp, #144]	; 0x90
   86f2e:	2d09      	cmp	r5, #9
   86f30:	d82d      	bhi.n	86f8e <_dtoa_r+0x1f6>
   86f32:	2d05      	cmp	r5, #5
   86f34:	bfc4      	itt	gt
   86f36:	3d04      	subgt	r5, #4
   86f38:	9524      	strgt	r5, [sp, #144]	; 0x90
   86f3a:	9e24      	ldr	r6, [sp, #144]	; 0x90
   86f3c:	bfc8      	it	gt
   86f3e:	2500      	movgt	r5, #0
   86f40:	f1a6 0302 	sub.w	r3, r6, #2
   86f44:	bfd8      	it	le
   86f46:	2501      	movle	r5, #1
   86f48:	2b03      	cmp	r3, #3
   86f4a:	d822      	bhi.n	86f92 <_dtoa_r+0x1fa>
   86f4c:	e8df f013 	tbh	[pc, r3, lsl #1]
   86f50:	029e03b7 	.word	0x029e03b7
   86f54:	049a03c0 	.word	0x049a03c0
   86f58:	4a46      	ldr	r2, [pc, #280]	; (87074 <_dtoa_r+0x2dc>)
   86f5a:	4b43      	ldr	r3, [pc, #268]	; (87068 <_dtoa_r+0x2d0>)
   86f5c:	f3c9 0013 	ubfx	r0, r9, #0, #20
   86f60:	2800      	cmp	r0, #0
   86f62:	bf0c      	ite	eq
   86f64:	4610      	moveq	r0, r2
   86f66:	4618      	movne	r0, r3
   86f68:	e752      	b.n	86e10 <_dtoa_r+0x78>
   86f6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   86f6e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   86f72:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   86f76:	4650      	mov	r0, sl
   86f78:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   86f7c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   86f80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   86f84:	e780      	b.n	86e88 <_dtoa_r+0xf0>
   86f86:	483c      	ldr	r0, [pc, #240]	; (87078 <_dtoa_r+0x2e0>)
   86f88:	e736      	b.n	86df8 <_dtoa_r+0x60>
   86f8a:	1cc3      	adds	r3, r0, #3
   86f8c:	e749      	b.n	86e22 <_dtoa_r+0x8a>
   86f8e:	2500      	movs	r5, #0
   86f90:	9524      	str	r5, [sp, #144]	; 0x90
   86f92:	2500      	movs	r5, #0
   86f94:	6465      	str	r5, [r4, #68]	; 0x44
   86f96:	4629      	mov	r1, r5
   86f98:	4620      	mov	r0, r4
   86f9a:	f001 fe6f 	bl	88c7c <_Balloc>
   86f9e:	f04f 39ff 	mov.w	r9, #4294967295
   86fa2:	2601      	movs	r6, #1
   86fa4:	9009      	str	r0, [sp, #36]	; 0x24
   86fa6:	9525      	str	r5, [sp, #148]	; 0x94
   86fa8:	6420      	str	r0, [r4, #64]	; 0x40
   86faa:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   86fae:	960b      	str	r6, [sp, #44]	; 0x2c
   86fb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
   86fb2:	2b00      	cmp	r3, #0
   86fb4:	f2c0 80d2 	blt.w	8715c <_dtoa_r+0x3c4>
   86fb8:	9e07      	ldr	r6, [sp, #28]
   86fba:	2e0e      	cmp	r6, #14
   86fbc:	f300 80ce 	bgt.w	8715c <_dtoa_r+0x3c4>
   86fc0:	4b2b      	ldr	r3, [pc, #172]	; (87070 <_dtoa_r+0x2d8>)
   86fc2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   86fc6:	e9d3 0100 	ldrd	r0, r1, [r3]
   86fca:	e9cd 0104 	strd	r0, r1, [sp, #16]
   86fce:	9925      	ldr	r1, [sp, #148]	; 0x94
   86fd0:	2900      	cmp	r1, #0
   86fd2:	f2c0 8380 	blt.w	876d6 <_dtoa_r+0x93e>
   86fd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   86fda:	4659      	mov	r1, fp
   86fdc:	4650      	mov	r0, sl
   86fde:	f7fd f911 	bl	84204 <__aeabi_ddiv>
   86fe2:	f7fd fa7f 	bl	844e4 <__aeabi_d2iz>
   86fe6:	4605      	mov	r5, r0
   86fe8:	f7fc ff7c 	bl	83ee4 <__aeabi_i2d>
   86fec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   86ff0:	f7fc ffde 	bl	83fb0 <__aeabi_dmul>
   86ff4:	4602      	mov	r2, r0
   86ff6:	460b      	mov	r3, r1
   86ff8:	4650      	mov	r0, sl
   86ffa:	4659      	mov	r1, fp
   86ffc:	f7fc fe24 	bl	83c48 <__aeabi_dsub>
   87000:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87002:	f105 0330 	add.w	r3, r5, #48	; 0x30
   87006:	f1b9 0f01 	cmp.w	r9, #1
   8700a:	4606      	mov	r6, r0
   8700c:	460f      	mov	r7, r1
   8700e:	7013      	strb	r3, [r2, #0]
   87010:	f102 0b01 	add.w	fp, r2, #1
   87014:	d064      	beq.n	870e0 <_dtoa_r+0x348>
   87016:	2200      	movs	r2, #0
   87018:	4b18      	ldr	r3, [pc, #96]	; (8707c <_dtoa_r+0x2e4>)
   8701a:	f7fc ffc9 	bl	83fb0 <__aeabi_dmul>
   8701e:	2200      	movs	r2, #0
   87020:	2300      	movs	r3, #0
   87022:	4606      	mov	r6, r0
   87024:	460f      	mov	r7, r1
   87026:	f7fd fa2b 	bl	84480 <__aeabi_dcmpeq>
   8702a:	2800      	cmp	r0, #0
   8702c:	f040 8081 	bne.w	87132 <_dtoa_r+0x39a>
   87030:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   87034:	9d09      	ldr	r5, [sp, #36]	; 0x24
   87036:	44c8      	add	r8, r9
   87038:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   8703c:	f105 0902 	add.w	r9, r5, #2
   87040:	9403      	str	r4, [sp, #12]
   87042:	e028      	b.n	87096 <_dtoa_r+0x2fe>
   87044:	f3af 8000 	nop.w
   87048:	636f4361 	.word	0x636f4361
   8704c:	3fd287a7 	.word	0x3fd287a7
   87050:	8b60c8b3 	.word	0x8b60c8b3
   87054:	3fc68a28 	.word	0x3fc68a28
   87058:	509f79fb 	.word	0x509f79fb
   8705c:	3fd34413 	.word	0x3fd34413
   87060:	7ff00000 	.word	0x7ff00000
   87064:	0008a199 	.word	0x0008a199
   87068:	0008a650 	.word	0x0008a650
   8706c:	3ff80000 	.word	0x3ff80000
   87070:	0008a660 	.word	0x0008a660
   87074:	0008a644 	.word	0x0008a644
   87078:	0008a198 	.word	0x0008a198
   8707c:	40240000 	.word	0x40240000
   87080:	f7fc ff96 	bl	83fb0 <__aeabi_dmul>
   87084:	2200      	movs	r2, #0
   87086:	2300      	movs	r3, #0
   87088:	4606      	mov	r6, r0
   8708a:	460f      	mov	r7, r1
   8708c:	f7fd f9f8 	bl	84480 <__aeabi_dcmpeq>
   87090:	2800      	cmp	r0, #0
   87092:	f040 83c1 	bne.w	87818 <_dtoa_r+0xa80>
   87096:	4652      	mov	r2, sl
   87098:	465b      	mov	r3, fp
   8709a:	4630      	mov	r0, r6
   8709c:	4639      	mov	r1, r7
   8709e:	f7fd f8b1 	bl	84204 <__aeabi_ddiv>
   870a2:	f7fd fa1f 	bl	844e4 <__aeabi_d2iz>
   870a6:	4605      	mov	r5, r0
   870a8:	f7fc ff1c 	bl	83ee4 <__aeabi_i2d>
   870ac:	4652      	mov	r2, sl
   870ae:	465b      	mov	r3, fp
   870b0:	f7fc ff7e 	bl	83fb0 <__aeabi_dmul>
   870b4:	4602      	mov	r2, r0
   870b6:	460b      	mov	r3, r1
   870b8:	4630      	mov	r0, r6
   870ba:	4639      	mov	r1, r7
   870bc:	f7fc fdc4 	bl	83c48 <__aeabi_dsub>
   870c0:	f105 0e30 	add.w	lr, r5, #48	; 0x30
   870c4:	45c1      	cmp	r9, r8
   870c6:	f809 ec01 	strb.w	lr, [r9, #-1]
   870ca:	464c      	mov	r4, r9
   870cc:	4606      	mov	r6, r0
   870ce:	460f      	mov	r7, r1
   870d0:	f04f 0200 	mov.w	r2, #0
   870d4:	4ba7      	ldr	r3, [pc, #668]	; (87374 <_dtoa_r+0x5dc>)
   870d6:	f109 0901 	add.w	r9, r9, #1
   870da:	d1d1      	bne.n	87080 <_dtoa_r+0x2e8>
   870dc:	46a3      	mov	fp, r4
   870de:	9c03      	ldr	r4, [sp, #12]
   870e0:	4632      	mov	r2, r6
   870e2:	463b      	mov	r3, r7
   870e4:	4630      	mov	r0, r6
   870e6:	4639      	mov	r1, r7
   870e8:	f7fc fdb0 	bl	83c4c <__adddf3>
   870ec:	4606      	mov	r6, r0
   870ee:	460f      	mov	r7, r1
   870f0:	4632      	mov	r2, r6
   870f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   870f6:	463b      	mov	r3, r7
   870f8:	f7fd f9cc 	bl	84494 <__aeabi_dcmplt>
   870fc:	b940      	cbnz	r0, 87110 <_dtoa_r+0x378>
   870fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   87102:	4632      	mov	r2, r6
   87104:	463b      	mov	r3, r7
   87106:	f7fd f9bb 	bl	84480 <__aeabi_dcmpeq>
   8710a:	b190      	cbz	r0, 87132 <_dtoa_r+0x39a>
   8710c:	07eb      	lsls	r3, r5, #31
   8710e:	d510      	bpl.n	87132 <_dtoa_r+0x39a>
   87110:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
   87114:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87116:	e005      	b.n	87124 <_dtoa_r+0x38c>
   87118:	429a      	cmp	r2, r3
   8711a:	f000 8429 	beq.w	87970 <_dtoa_r+0xbd8>
   8711e:	f813 5c01 	ldrb.w	r5, [r3, #-1]
   87122:	469b      	mov	fp, r3
   87124:	2d39      	cmp	r5, #57	; 0x39
   87126:	f10b 33ff 	add.w	r3, fp, #4294967295
   8712a:	d0f5      	beq.n	87118 <_dtoa_r+0x380>
   8712c:	1c6a      	adds	r2, r5, #1
   8712e:	b2d2      	uxtb	r2, r2
   87130:	701a      	strb	r2, [r3, #0]
   87132:	4620      	mov	r0, r4
   87134:	990a      	ldr	r1, [sp, #40]	; 0x28
   87136:	f001 fdc7 	bl	88cc8 <_Bfree>
   8713a:	9e07      	ldr	r6, [sp, #28]
   8713c:	9d26      	ldr	r5, [sp, #152]	; 0x98
   8713e:	1c73      	adds	r3, r6, #1
   87140:	9e28      	ldr	r6, [sp, #160]	; 0xa0
   87142:	2200      	movs	r2, #0
   87144:	f88b 2000 	strb.w	r2, [fp]
   87148:	602b      	str	r3, [r5, #0]
   8714a:	2e00      	cmp	r6, #0
   8714c:	f000 8325 	beq.w	8779a <_dtoa_r+0xa02>
   87150:	9809      	ldr	r0, [sp, #36]	; 0x24
   87152:	f8c6 b000 	str.w	fp, [r6]
   87156:	b01b      	add	sp, #108	; 0x6c
   87158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8715c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8715e:	2d00      	cmp	r5, #0
   87160:	f000 8103 	beq.w	8736a <_dtoa_r+0x5d2>
   87164:	9e24      	ldr	r6, [sp, #144]	; 0x90
   87166:	2e01      	cmp	r6, #1
   87168:	f340 82dc 	ble.w	87724 <_dtoa_r+0x98c>
   8716c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   8716e:	f109 37ff 	add.w	r7, r9, #4294967295
   87172:	42be      	cmp	r6, r7
   87174:	f2c0 8389 	blt.w	8788a <_dtoa_r+0xaf2>
   87178:	1bf7      	subs	r7, r6, r7
   8717a:	f1b9 0f00 	cmp.w	r9, #0
   8717e:	f2c0 8487 	blt.w	87a90 <_dtoa_r+0xcf8>
   87182:	9d08      	ldr	r5, [sp, #32]
   87184:	464b      	mov	r3, r9
   87186:	9e08      	ldr	r6, [sp, #32]
   87188:	4620      	mov	r0, r4
   8718a:	441e      	add	r6, r3
   8718c:	9608      	str	r6, [sp, #32]
   8718e:	9e06      	ldr	r6, [sp, #24]
   87190:	2101      	movs	r1, #1
   87192:	441e      	add	r6, r3
   87194:	9606      	str	r6, [sp, #24]
   87196:	f001 fe39 	bl	88e0c <__i2b>
   8719a:	4606      	mov	r6, r0
   8719c:	b165      	cbz	r5, 871b8 <_dtoa_r+0x420>
   8719e:	9806      	ldr	r0, [sp, #24]
   871a0:	2800      	cmp	r0, #0
   871a2:	dd09      	ble.n	871b8 <_dtoa_r+0x420>
   871a4:	4603      	mov	r3, r0
   871a6:	9908      	ldr	r1, [sp, #32]
   871a8:	42ab      	cmp	r3, r5
   871aa:	bfa8      	it	ge
   871ac:	462b      	movge	r3, r5
   871ae:	1ac9      	subs	r1, r1, r3
   871b0:	1ac0      	subs	r0, r0, r3
   871b2:	9108      	str	r1, [sp, #32]
   871b4:	1aed      	subs	r5, r5, r3
   871b6:	9006      	str	r0, [sp, #24]
   871b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   871ba:	2a00      	cmp	r2, #0
   871bc:	dd1d      	ble.n	871fa <_dtoa_r+0x462>
   871be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   871c0:	2b00      	cmp	r3, #0
   871c2:	f000 8358 	beq.w	87876 <_dtoa_r+0xade>
   871c6:	2f00      	cmp	r7, #0
   871c8:	dd11      	ble.n	871ee <_dtoa_r+0x456>
   871ca:	4631      	mov	r1, r6
   871cc:	463a      	mov	r2, r7
   871ce:	4620      	mov	r0, r4
   871d0:	f001 fec4 	bl	88f5c <__pow5mult>
   871d4:	4606      	mov	r6, r0
   871d6:	4631      	mov	r1, r6
   871d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   871da:	4620      	mov	r0, r4
   871dc:	f001 fe20 	bl	88e20 <__multiply>
   871e0:	990a      	ldr	r1, [sp, #40]	; 0x28
   871e2:	4680      	mov	r8, r0
   871e4:	4620      	mov	r0, r4
   871e6:	f001 fd6f 	bl	88cc8 <_Bfree>
   871ea:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   871ee:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
   871f2:	ebbe 0207 	subs.w	r2, lr, r7
   871f6:	f040 828f 	bne.w	87718 <_dtoa_r+0x980>
   871fa:	4620      	mov	r0, r4
   871fc:	2101      	movs	r1, #1
   871fe:	f001 fe05 	bl	88e0c <__i2b>
   87202:	4680      	mov	r8, r0
   87204:	980d      	ldr	r0, [sp, #52]	; 0x34
   87206:	2800      	cmp	r0, #0
   87208:	dd05      	ble.n	87216 <_dtoa_r+0x47e>
   8720a:	4641      	mov	r1, r8
   8720c:	4620      	mov	r0, r4
   8720e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   87210:	f001 fea4 	bl	88f5c <__pow5mult>
   87214:	4680      	mov	r8, r0
   87216:	9924      	ldr	r1, [sp, #144]	; 0x90
   87218:	2901      	cmp	r1, #1
   8721a:	f340 82c1 	ble.w	877a0 <_dtoa_r+0xa08>
   8721e:	2700      	movs	r7, #0
   87220:	980d      	ldr	r0, [sp, #52]	; 0x34
   87222:	2800      	cmp	r0, #0
   87224:	f040 82af 	bne.w	87786 <_dtoa_r+0x9ee>
   87228:	2001      	movs	r0, #1
   8722a:	9b06      	ldr	r3, [sp, #24]
   8722c:	4403      	add	r3, r0
   8722e:	f013 031f 	ands.w	r3, r3, #31
   87232:	f000 80a1 	beq.w	87378 <_dtoa_r+0x5e0>
   87236:	f1c3 0220 	rsb	r2, r3, #32
   8723a:	2a04      	cmp	r2, #4
   8723c:	f340 84b7 	ble.w	87bae <_dtoa_r+0xe16>
   87240:	9908      	ldr	r1, [sp, #32]
   87242:	9a06      	ldr	r2, [sp, #24]
   87244:	f1c3 031c 	rsb	r3, r3, #28
   87248:	4419      	add	r1, r3
   8724a:	441a      	add	r2, r3
   8724c:	9108      	str	r1, [sp, #32]
   8724e:	441d      	add	r5, r3
   87250:	9206      	str	r2, [sp, #24]
   87252:	9908      	ldr	r1, [sp, #32]
   87254:	2900      	cmp	r1, #0
   87256:	dd05      	ble.n	87264 <_dtoa_r+0x4cc>
   87258:	990a      	ldr	r1, [sp, #40]	; 0x28
   8725a:	9a08      	ldr	r2, [sp, #32]
   8725c:	4620      	mov	r0, r4
   8725e:	f001 fecb 	bl	88ff8 <__lshift>
   87262:	900a      	str	r0, [sp, #40]	; 0x28
   87264:	9a06      	ldr	r2, [sp, #24]
   87266:	2a00      	cmp	r2, #0
   87268:	dd04      	ble.n	87274 <_dtoa_r+0x4dc>
   8726a:	4641      	mov	r1, r8
   8726c:	4620      	mov	r0, r4
   8726e:	f001 fec3 	bl	88ff8 <__lshift>
   87272:	4680      	mov	r8, r0
   87274:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87276:	2b00      	cmp	r3, #0
   87278:	f040 826a 	bne.w	87750 <_dtoa_r+0x9b8>
   8727c:	f1b9 0f00 	cmp.w	r9, #0
   87280:	f340 82a6 	ble.w	877d0 <_dtoa_r+0xa38>
   87284:	980b      	ldr	r0, [sp, #44]	; 0x2c
   87286:	2800      	cmp	r0, #0
   87288:	f040 8088 	bne.w	8739c <_dtoa_r+0x604>
   8728c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8728e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   87290:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   87294:	e006      	b.n	872a4 <_dtoa_r+0x50c>
   87296:	4639      	mov	r1, r7
   87298:	4620      	mov	r0, r4
   8729a:	220a      	movs	r2, #10
   8729c:	2300      	movs	r3, #0
   8729e:	f001 fd1d 	bl	88cdc <__multadd>
   872a2:	4607      	mov	r7, r0
   872a4:	4638      	mov	r0, r7
   872a6:	4641      	mov	r1, r8
   872a8:	f7ff fcdc 	bl	86c64 <quorem>
   872ac:	3030      	adds	r0, #48	; 0x30
   872ae:	f80b 0005 	strb.w	r0, [fp, r5]
   872b2:	3501      	adds	r5, #1
   872b4:	45a9      	cmp	r9, r5
   872b6:	dcee      	bgt.n	87296 <_dtoa_r+0x4fe>
   872b8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   872bc:	4682      	mov	sl, r0
   872be:	970a      	str	r7, [sp, #40]	; 0x28
   872c0:	f1b9 0f01 	cmp.w	r9, #1
   872c4:	bfac      	ite	ge
   872c6:	44cb      	addge	fp, r9
   872c8:	f10b 0b01 	addlt.w	fp, fp, #1
   872cc:	2500      	movs	r5, #0
   872ce:	990a      	ldr	r1, [sp, #40]	; 0x28
   872d0:	2201      	movs	r2, #1
   872d2:	4620      	mov	r0, r4
   872d4:	f001 fe90 	bl	88ff8 <__lshift>
   872d8:	4641      	mov	r1, r8
   872da:	900a      	str	r0, [sp, #40]	; 0x28
   872dc:	f001 feea 	bl	890b4 <__mcmp>
   872e0:	2800      	cmp	r0, #0
   872e2:	f340 8309 	ble.w	878f8 <_dtoa_r+0xb60>
   872e6:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   872ea:	9909      	ldr	r1, [sp, #36]	; 0x24
   872ec:	e005      	b.n	872fa <_dtoa_r+0x562>
   872ee:	4299      	cmp	r1, r3
   872f0:	f000 828b 	beq.w	8780a <_dtoa_r+0xa72>
   872f4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   872f8:	469b      	mov	fp, r3
   872fa:	2a39      	cmp	r2, #57	; 0x39
   872fc:	f10b 33ff 	add.w	r3, fp, #4294967295
   87300:	d0f5      	beq.n	872ee <_dtoa_r+0x556>
   87302:	3201      	adds	r2, #1
   87304:	701a      	strb	r2, [r3, #0]
   87306:	4641      	mov	r1, r8
   87308:	4620      	mov	r0, r4
   8730a:	f001 fcdd 	bl	88cc8 <_Bfree>
   8730e:	2e00      	cmp	r6, #0
   87310:	f43f af0f 	beq.w	87132 <_dtoa_r+0x39a>
   87314:	b12d      	cbz	r5, 87322 <_dtoa_r+0x58a>
   87316:	42b5      	cmp	r5, r6
   87318:	d003      	beq.n	87322 <_dtoa_r+0x58a>
   8731a:	4629      	mov	r1, r5
   8731c:	4620      	mov	r0, r4
   8731e:	f001 fcd3 	bl	88cc8 <_Bfree>
   87322:	4631      	mov	r1, r6
   87324:	4620      	mov	r0, r4
   87326:	f001 fccf 	bl	88cc8 <_Bfree>
   8732a:	e702      	b.n	87132 <_dtoa_r+0x39a>
   8732c:	2601      	movs	r6, #1
   8732e:	960e      	str	r6, [sp, #56]	; 0x38
   87330:	e5ea      	b.n	86f08 <_dtoa_r+0x170>
   87332:	9807      	ldr	r0, [sp, #28]
   87334:	f7fc fdd6 	bl	83ee4 <__aeabi_i2d>
   87338:	4632      	mov	r2, r6
   8733a:	463b      	mov	r3, r7
   8733c:	f7fd f8a0 	bl	84480 <__aeabi_dcmpeq>
   87340:	2800      	cmp	r0, #0
   87342:	f47f adcd 	bne.w	86ee0 <_dtoa_r+0x148>
   87346:	9e07      	ldr	r6, [sp, #28]
   87348:	3e01      	subs	r6, #1
   8734a:	9607      	str	r6, [sp, #28]
   8734c:	e5c8      	b.n	86ee0 <_dtoa_r+0x148>
   8734e:	9e07      	ldr	r6, [sp, #28]
   87350:	9d08      	ldr	r5, [sp, #32]
   87352:	1bad      	subs	r5, r5, r6
   87354:	9508      	str	r5, [sp, #32]
   87356:	4275      	negs	r5, r6
   87358:	2600      	movs	r6, #0
   8735a:	950c      	str	r5, [sp, #48]	; 0x30
   8735c:	960d      	str	r6, [sp, #52]	; 0x34
   8735e:	e5e5      	b.n	86f2c <_dtoa_r+0x194>
   87360:	426d      	negs	r5, r5
   87362:	2600      	movs	r6, #0
   87364:	9508      	str	r5, [sp, #32]
   87366:	9606      	str	r6, [sp, #24]
   87368:	e5d6      	b.n	86f18 <_dtoa_r+0x180>
   8736a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8736c:	9d08      	ldr	r5, [sp, #32]
   8736e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   87370:	e714      	b.n	8719c <_dtoa_r+0x404>
   87372:	bf00      	nop
   87374:	40240000 	.word	0x40240000
   87378:	231c      	movs	r3, #28
   8737a:	f8dd e020 	ldr.w	lr, [sp, #32]
   8737e:	9806      	ldr	r0, [sp, #24]
   87380:	449e      	add	lr, r3
   87382:	4418      	add	r0, r3
   87384:	f8cd e020 	str.w	lr, [sp, #32]
   87388:	441d      	add	r5, r3
   8738a:	9006      	str	r0, [sp, #24]
   8738c:	e761      	b.n	87252 <_dtoa_r+0x4ba>
   8738e:	48a7      	ldr	r0, [pc, #668]	; (8762c <_dtoa_r+0x894>)
   87390:	1b40      	subs	r0, r0, r5
   87392:	fa0a f000 	lsl.w	r0, sl, r0
   87396:	e56f      	b.n	86e78 <_dtoa_r+0xe0>
   87398:	900e      	str	r0, [sp, #56]	; 0x38
   8739a:	e5b5      	b.n	86f08 <_dtoa_r+0x170>
   8739c:	2d00      	cmp	r5, #0
   8739e:	dd05      	ble.n	873ac <_dtoa_r+0x614>
   873a0:	4631      	mov	r1, r6
   873a2:	462a      	mov	r2, r5
   873a4:	4620      	mov	r0, r4
   873a6:	f001 fe27 	bl	88ff8 <__lshift>
   873aa:	4606      	mov	r6, r0
   873ac:	2f00      	cmp	r7, #0
   873ae:	f040 82e9 	bne.w	87984 <_dtoa_r+0xbec>
   873b2:	4637      	mov	r7, r6
   873b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   873b6:	9809      	ldr	r0, [sp, #36]	; 0x24
   873b8:	444d      	add	r5, r9
   873ba:	9508      	str	r5, [sp, #32]
   873bc:	f00a 0501 	and.w	r5, sl, #1
   873c0:	950b      	str	r5, [sp, #44]	; 0x2c
   873c2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   873c6:	1c45      	adds	r5, r0, #1
   873c8:	e00a      	b.n	873e0 <_dtoa_r+0x648>
   873ca:	f001 fc87 	bl	88cdc <__multadd>
   873ce:	4639      	mov	r1, r7
   873d0:	4606      	mov	r6, r0
   873d2:	220a      	movs	r2, #10
   873d4:	4620      	mov	r0, r4
   873d6:	2300      	movs	r3, #0
   873d8:	f001 fc80 	bl	88cdc <__multadd>
   873dc:	4607      	mov	r7, r0
   873de:	3501      	adds	r5, #1
   873e0:	4641      	mov	r1, r8
   873e2:	4648      	mov	r0, r9
   873e4:	f7ff fc3e 	bl	86c64 <quorem>
   873e8:	4631      	mov	r1, r6
   873ea:	4683      	mov	fp, r0
   873ec:	4648      	mov	r0, r9
   873ee:	f001 fe61 	bl	890b4 <__mcmp>
   873f2:	4641      	mov	r1, r8
   873f4:	9003      	str	r0, [sp, #12]
   873f6:	463a      	mov	r2, r7
   873f8:	4620      	mov	r0, r4
   873fa:	f001 fe7f 	bl	890fc <__mdiff>
   873fe:	68c2      	ldr	r2, [r0, #12]
   87400:	1e69      	subs	r1, r5, #1
   87402:	4603      	mov	r3, r0
   87404:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
   87408:	9106      	str	r1, [sp, #24]
   8740a:	2a00      	cmp	r2, #0
   8740c:	f040 8193 	bne.w	87736 <_dtoa_r+0x99e>
   87410:	4619      	mov	r1, r3
   87412:	4648      	mov	r0, r9
   87414:	9302      	str	r3, [sp, #8]
   87416:	f001 fe4d 	bl	890b4 <__mcmp>
   8741a:	9b02      	ldr	r3, [sp, #8]
   8741c:	4602      	mov	r2, r0
   8741e:	4619      	mov	r1, r3
   87420:	4620      	mov	r0, r4
   87422:	9202      	str	r2, [sp, #8]
   87424:	f001 fc50 	bl	88cc8 <_Bfree>
   87428:	9a02      	ldr	r2, [sp, #8]
   8742a:	b92a      	cbnz	r2, 87438 <_dtoa_r+0x6a0>
   8742c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8742e:	b91b      	cbnz	r3, 87438 <_dtoa_r+0x6a0>
   87430:	980b      	ldr	r0, [sp, #44]	; 0x2c
   87432:	2800      	cmp	r0, #0
   87434:	f000 8393 	beq.w	87b5e <_dtoa_r+0xdc6>
   87438:	9b03      	ldr	r3, [sp, #12]
   8743a:	2b00      	cmp	r3, #0
   8743c:	f2c0 8234 	blt.w	878a8 <_dtoa_r+0xb10>
   87440:	d105      	bne.n	8744e <_dtoa_r+0x6b6>
   87442:	9824      	ldr	r0, [sp, #144]	; 0x90
   87444:	b918      	cbnz	r0, 8744e <_dtoa_r+0x6b6>
   87446:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87448:	2900      	cmp	r1, #0
   8744a:	f000 822d 	beq.w	878a8 <_dtoa_r+0xb10>
   8744e:	2a00      	cmp	r2, #0
   87450:	f300 82ac 	bgt.w	879ac <_dtoa_r+0xc14>
   87454:	f8dd e020 	ldr.w	lr, [sp, #32]
   87458:	f805 ac01 	strb.w	sl, [r5, #-1]
   8745c:	4575      	cmp	r5, lr
   8745e:	46ab      	mov	fp, r5
   87460:	f000 82b4 	beq.w	879cc <_dtoa_r+0xc34>
   87464:	4649      	mov	r1, r9
   87466:	220a      	movs	r2, #10
   87468:	2300      	movs	r3, #0
   8746a:	4620      	mov	r0, r4
   8746c:	f001 fc36 	bl	88cdc <__multadd>
   87470:	42be      	cmp	r6, r7
   87472:	4681      	mov	r9, r0
   87474:	4631      	mov	r1, r6
   87476:	4620      	mov	r0, r4
   87478:	f04f 020a 	mov.w	r2, #10
   8747c:	f04f 0300 	mov.w	r3, #0
   87480:	d1a3      	bne.n	873ca <_dtoa_r+0x632>
   87482:	f001 fc2b 	bl	88cdc <__multadd>
   87486:	4606      	mov	r6, r0
   87488:	4607      	mov	r7, r0
   8748a:	e7a8      	b.n	873de <_dtoa_r+0x646>
   8748c:	2600      	movs	r6, #0
   8748e:	960b      	str	r6, [sp, #44]	; 0x2c
   87490:	9e07      	ldr	r6, [sp, #28]
   87492:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
   87496:	44b6      	add	lr, r6
   87498:	f10e 0901 	add.w	r9, lr, #1
   8749c:	f1b9 0f00 	cmp.w	r9, #0
   874a0:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
   874a4:	464e      	mov	r6, r9
   874a6:	f340 8150 	ble.w	8774a <_dtoa_r+0x9b2>
   874aa:	2100      	movs	r1, #0
   874ac:	2e17      	cmp	r6, #23
   874ae:	6461      	str	r1, [r4, #68]	; 0x44
   874b0:	d90a      	bls.n	874c8 <_dtoa_r+0x730>
   874b2:	2201      	movs	r2, #1
   874b4:	2304      	movs	r3, #4
   874b6:	005b      	lsls	r3, r3, #1
   874b8:	f103 0014 	add.w	r0, r3, #20
   874bc:	42b0      	cmp	r0, r6
   874be:	4611      	mov	r1, r2
   874c0:	f102 0201 	add.w	r2, r2, #1
   874c4:	d9f7      	bls.n	874b6 <_dtoa_r+0x71e>
   874c6:	6461      	str	r1, [r4, #68]	; 0x44
   874c8:	4620      	mov	r0, r4
   874ca:	f001 fbd7 	bl	88c7c <_Balloc>
   874ce:	2e0e      	cmp	r6, #14
   874d0:	9009      	str	r0, [sp, #36]	; 0x24
   874d2:	6420      	str	r0, [r4, #64]	; 0x40
   874d4:	f63f ad6c 	bhi.w	86fb0 <_dtoa_r+0x218>
   874d8:	2d00      	cmp	r5, #0
   874da:	f43f ad69 	beq.w	86fb0 <_dtoa_r+0x218>
   874de:	9d07      	ldr	r5, [sp, #28]
   874e0:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
   874e4:	2d00      	cmp	r5, #0
   874e6:	f340 821c 	ble.w	87922 <_dtoa_r+0xb8a>
   874ea:	4b51      	ldr	r3, [pc, #324]	; (87630 <_dtoa_r+0x898>)
   874ec:	f005 020f 	and.w	r2, r5, #15
   874f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   874f4:	112d      	asrs	r5, r5, #4
   874f6:	e9d3 6700 	ldrd	r6, r7, [r3]
   874fa:	06eb      	lsls	r3, r5, #27
   874fc:	f140 81cd 	bpl.w	8789a <_dtoa_r+0xb02>
   87500:	4b4c      	ldr	r3, [pc, #304]	; (87634 <_dtoa_r+0x89c>)
   87502:	4650      	mov	r0, sl
   87504:	4659      	mov	r1, fp
   87506:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   8750a:	f7fc fe7b 	bl	84204 <__aeabi_ddiv>
   8750e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87512:	f005 050f 	and.w	r5, r5, #15
   87516:	f04f 0803 	mov.w	r8, #3
   8751a:	b18d      	cbz	r5, 87540 <_dtoa_r+0x7a8>
   8751c:	f8df a114 	ldr.w	sl, [pc, #276]	; 87634 <_dtoa_r+0x89c>
   87520:	4630      	mov	r0, r6
   87522:	4639      	mov	r1, r7
   87524:	07ee      	lsls	r6, r5, #31
   87526:	d505      	bpl.n	87534 <_dtoa_r+0x79c>
   87528:	e9da 2300 	ldrd	r2, r3, [sl]
   8752c:	f108 0801 	add.w	r8, r8, #1
   87530:	f7fc fd3e 	bl	83fb0 <__aeabi_dmul>
   87534:	106d      	asrs	r5, r5, #1
   87536:	f10a 0a08 	add.w	sl, sl, #8
   8753a:	d1f3      	bne.n	87524 <_dtoa_r+0x78c>
   8753c:	4606      	mov	r6, r0
   8753e:	460f      	mov	r7, r1
   87540:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87544:	4632      	mov	r2, r6
   87546:	463b      	mov	r3, r7
   87548:	f7fc fe5c 	bl	84204 <__aeabi_ddiv>
   8754c:	4682      	mov	sl, r0
   8754e:	468b      	mov	fp, r1
   87550:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   87552:	b145      	cbz	r5, 87566 <_dtoa_r+0x7ce>
   87554:	4650      	mov	r0, sl
   87556:	4659      	mov	r1, fp
   87558:	2200      	movs	r2, #0
   8755a:	4b37      	ldr	r3, [pc, #220]	; (87638 <_dtoa_r+0x8a0>)
   8755c:	f7fc ff9a 	bl	84494 <__aeabi_dcmplt>
   87560:	2800      	cmp	r0, #0
   87562:	f040 82aa 	bne.w	87aba <_dtoa_r+0xd22>
   87566:	4640      	mov	r0, r8
   87568:	f7fc fcbc 	bl	83ee4 <__aeabi_i2d>
   8756c:	4652      	mov	r2, sl
   8756e:	465b      	mov	r3, fp
   87570:	f7fc fd1e 	bl	83fb0 <__aeabi_dmul>
   87574:	2200      	movs	r2, #0
   87576:	4b31      	ldr	r3, [pc, #196]	; (8763c <_dtoa_r+0x8a4>)
   87578:	f7fc fb68 	bl	83c4c <__adddf3>
   8757c:	4606      	mov	r6, r0
   8757e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   87582:	f1b9 0f00 	cmp.w	r9, #0
   87586:	f000 815a 	beq.w	8783e <_dtoa_r+0xaa6>
   8758a:	9d07      	ldr	r5, [sp, #28]
   8758c:	46c8      	mov	r8, r9
   8758e:	9517      	str	r5, [sp, #92]	; 0x5c
   87590:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   87592:	2d00      	cmp	r5, #0
   87594:	f000 8223 	beq.w	879de <_dtoa_r+0xc46>
   87598:	4b25      	ldr	r3, [pc, #148]	; (87630 <_dtoa_r+0x898>)
   8759a:	2000      	movs	r0, #0
   8759c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   875a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   875a4:	4926      	ldr	r1, [pc, #152]	; (87640 <_dtoa_r+0x8a8>)
   875a6:	f7fc fe2d 	bl	84204 <__aeabi_ddiv>
   875aa:	4632      	mov	r2, r6
   875ac:	463b      	mov	r3, r7
   875ae:	f7fc fb4b 	bl	83c48 <__aeabi_dsub>
   875b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   875b6:	4659      	mov	r1, fp
   875b8:	4650      	mov	r0, sl
   875ba:	f7fc ff93 	bl	844e4 <__aeabi_d2iz>
   875be:	4605      	mov	r5, r0
   875c0:	f7fc fc90 	bl	83ee4 <__aeabi_i2d>
   875c4:	4602      	mov	r2, r0
   875c6:	460b      	mov	r3, r1
   875c8:	4650      	mov	r0, sl
   875ca:	4659      	mov	r1, fp
   875cc:	f7fc fb3c 	bl	83c48 <__aeabi_dsub>
   875d0:	3530      	adds	r5, #48	; 0x30
   875d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   875d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   875d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   875dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   875e0:	b2ed      	uxtb	r5, r5
   875e2:	7035      	strb	r5, [r6, #0]
   875e4:	f106 0b01 	add.w	fp, r6, #1
   875e8:	f7fc ff72 	bl	844d0 <__aeabi_dcmpgt>
   875ec:	2800      	cmp	r0, #0
   875ee:	f040 82ab 	bne.w	87b48 <_dtoa_r+0xdb0>
   875f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   875f6:	2000      	movs	r0, #0
   875f8:	490f      	ldr	r1, [pc, #60]	; (87638 <_dtoa_r+0x8a0>)
   875fa:	f7fc fb25 	bl	83c48 <__aeabi_dsub>
   875fe:	4602      	mov	r2, r0
   87600:	460b      	mov	r3, r1
   87602:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87606:	f7fc ff63 	bl	844d0 <__aeabi_dcmpgt>
   8760a:	2800      	cmp	r0, #0
   8760c:	f040 82a2 	bne.w	87b54 <_dtoa_r+0xdbc>
   87610:	f1b8 0f01 	cmp.w	r8, #1
   87614:	f340 8181 	ble.w	8791a <_dtoa_r+0xb82>
   87618:	44b0      	add	r8, r6
   8761a:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
   8761e:	46a2      	mov	sl, r4
   87620:	46c1      	mov	r9, r8
   87622:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   87626:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
   8762a:	e019      	b.n	87660 <_dtoa_r+0x8c8>
   8762c:	fffffbee 	.word	0xfffffbee
   87630:	0008a660 	.word	0x0008a660
   87634:	0008a728 	.word	0x0008a728
   87638:	3ff00000 	.word	0x3ff00000
   8763c:	401c0000 	.word	0x401c0000
   87640:	3fe00000 	.word	0x3fe00000
   87644:	2000      	movs	r0, #0
   87646:	49a8      	ldr	r1, [pc, #672]	; (878e8 <_dtoa_r+0xb50>)
   87648:	f7fc fafe 	bl	83c48 <__aeabi_dsub>
   8764c:	4622      	mov	r2, r4
   8764e:	462b      	mov	r3, r5
   87650:	f7fc ff20 	bl	84494 <__aeabi_dcmplt>
   87654:	2800      	cmp	r0, #0
   87656:	f040 827b 	bne.w	87b50 <_dtoa_r+0xdb8>
   8765a:	45cb      	cmp	fp, r9
   8765c:	f000 815a 	beq.w	87914 <_dtoa_r+0xb7c>
   87660:	4620      	mov	r0, r4
   87662:	4629      	mov	r1, r5
   87664:	2200      	movs	r2, #0
   87666:	4ba1      	ldr	r3, [pc, #644]	; (878ec <_dtoa_r+0xb54>)
   87668:	f7fc fca2 	bl	83fb0 <__aeabi_dmul>
   8766c:	2200      	movs	r2, #0
   8766e:	4b9f      	ldr	r3, [pc, #636]	; (878ec <_dtoa_r+0xb54>)
   87670:	4604      	mov	r4, r0
   87672:	460d      	mov	r5, r1
   87674:	4630      	mov	r0, r6
   87676:	4639      	mov	r1, r7
   87678:	f7fc fc9a 	bl	83fb0 <__aeabi_dmul>
   8767c:	460f      	mov	r7, r1
   8767e:	4606      	mov	r6, r0
   87680:	f7fc ff30 	bl	844e4 <__aeabi_d2iz>
   87684:	4680      	mov	r8, r0
   87686:	f7fc fc2d 	bl	83ee4 <__aeabi_i2d>
   8768a:	4602      	mov	r2, r0
   8768c:	460b      	mov	r3, r1
   8768e:	4630      	mov	r0, r6
   87690:	4639      	mov	r1, r7
   87692:	f7fc fad9 	bl	83c48 <__aeabi_dsub>
   87696:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8769a:	fa5f f888 	uxtb.w	r8, r8
   8769e:	4622      	mov	r2, r4
   876a0:	462b      	mov	r3, r5
   876a2:	f80b 8b01 	strb.w	r8, [fp], #1
   876a6:	4606      	mov	r6, r0
   876a8:	460f      	mov	r7, r1
   876aa:	f7fc fef3 	bl	84494 <__aeabi_dcmplt>
   876ae:	4632      	mov	r2, r6
   876b0:	463b      	mov	r3, r7
   876b2:	2800      	cmp	r0, #0
   876b4:	d0c6      	beq.n	87644 <_dtoa_r+0x8ac>
   876b6:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   876b8:	4654      	mov	r4, sl
   876ba:	9607      	str	r6, [sp, #28]
   876bc:	e539      	b.n	87132 <_dtoa_r+0x39a>
   876be:	2600      	movs	r6, #0
   876c0:	960b      	str	r6, [sp, #44]	; 0x2c
   876c2:	9825      	ldr	r0, [sp, #148]	; 0x94
   876c4:	2800      	cmp	r0, #0
   876c6:	dd3c      	ble.n	87742 <_dtoa_r+0x9aa>
   876c8:	4606      	mov	r6, r0
   876ca:	900f      	str	r0, [sp, #60]	; 0x3c
   876cc:	4681      	mov	r9, r0
   876ce:	e6ec      	b.n	874aa <_dtoa_r+0x712>
   876d0:	2601      	movs	r6, #1
   876d2:	960b      	str	r6, [sp, #44]	; 0x2c
   876d4:	e7f5      	b.n	876c2 <_dtoa_r+0x92a>
   876d6:	f1b9 0f00 	cmp.w	r9, #0
   876da:	f73f ac7c 	bgt.w	86fd6 <_dtoa_r+0x23e>
   876de:	f040 80c6 	bne.w	8786e <_dtoa_r+0xad6>
   876e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   876e6:	2200      	movs	r2, #0
   876e8:	4b81      	ldr	r3, [pc, #516]	; (878f0 <_dtoa_r+0xb58>)
   876ea:	f7fc fc61 	bl	83fb0 <__aeabi_dmul>
   876ee:	4652      	mov	r2, sl
   876f0:	465b      	mov	r3, fp
   876f2:	f7fc fee3 	bl	844bc <__aeabi_dcmpge>
   876f6:	46c8      	mov	r8, r9
   876f8:	464e      	mov	r6, r9
   876fa:	2800      	cmp	r0, #0
   876fc:	d07c      	beq.n	877f8 <_dtoa_r+0xa60>
   876fe:	9d25      	ldr	r5, [sp, #148]	; 0x94
   87700:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   87704:	43ed      	mvns	r5, r5
   87706:	9507      	str	r5, [sp, #28]
   87708:	4641      	mov	r1, r8
   8770a:	4620      	mov	r0, r4
   8770c:	f001 fadc 	bl	88cc8 <_Bfree>
   87710:	2e00      	cmp	r6, #0
   87712:	f47f ae06 	bne.w	87322 <_dtoa_r+0x58a>
   87716:	e50c      	b.n	87132 <_dtoa_r+0x39a>
   87718:	990a      	ldr	r1, [sp, #40]	; 0x28
   8771a:	4620      	mov	r0, r4
   8771c:	f001 fc1e 	bl	88f5c <__pow5mult>
   87720:	900a      	str	r0, [sp, #40]	; 0x28
   87722:	e56a      	b.n	871fa <_dtoa_r+0x462>
   87724:	9d16      	ldr	r5, [sp, #88]	; 0x58
   87726:	2d00      	cmp	r5, #0
   87728:	f000 81b8 	beq.w	87a9c <_dtoa_r+0xd04>
   8772c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   87730:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87732:	9d08      	ldr	r5, [sp, #32]
   87734:	e527      	b.n	87186 <_dtoa_r+0x3ee>
   87736:	4601      	mov	r1, r0
   87738:	4620      	mov	r0, r4
   8773a:	f001 fac5 	bl	88cc8 <_Bfree>
   8773e:	2201      	movs	r2, #1
   87740:	e67a      	b.n	87438 <_dtoa_r+0x6a0>
   87742:	2601      	movs	r6, #1
   87744:	9625      	str	r6, [sp, #148]	; 0x94
   87746:	960f      	str	r6, [sp, #60]	; 0x3c
   87748:	46b1      	mov	r9, r6
   8774a:	2100      	movs	r1, #0
   8774c:	6461      	str	r1, [r4, #68]	; 0x44
   8774e:	e6bb      	b.n	874c8 <_dtoa_r+0x730>
   87750:	980a      	ldr	r0, [sp, #40]	; 0x28
   87752:	4641      	mov	r1, r8
   87754:	f001 fcae 	bl	890b4 <__mcmp>
   87758:	2800      	cmp	r0, #0
   8775a:	f6bf ad8f 	bge.w	8727c <_dtoa_r+0x4e4>
   8775e:	f8dd e01c 	ldr.w	lr, [sp, #28]
   87762:	990a      	ldr	r1, [sp, #40]	; 0x28
   87764:	f10e 3eff 	add.w	lr, lr, #4294967295
   87768:	4620      	mov	r0, r4
   8776a:	220a      	movs	r2, #10
   8776c:	2300      	movs	r3, #0
   8776e:	f8cd e01c 	str.w	lr, [sp, #28]
   87772:	f001 fab3 	bl	88cdc <__multadd>
   87776:	900a      	str	r0, [sp, #40]	; 0x28
   87778:	980b      	ldr	r0, [sp, #44]	; 0x2c
   8777a:	2800      	cmp	r0, #0
   8777c:	f040 8209 	bne.w	87b92 <_dtoa_r+0xdfa>
   87780:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   87784:	e57a      	b.n	8727c <_dtoa_r+0x4e4>
   87786:	f8d8 3010 	ldr.w	r3, [r8, #16]
   8778a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8778e:	6918      	ldr	r0, [r3, #16]
   87790:	f001 faee 	bl	88d70 <__hi0bits>
   87794:	f1c0 0020 	rsb	r0, r0, #32
   87798:	e547      	b.n	8722a <_dtoa_r+0x492>
   8779a:	9809      	ldr	r0, [sp, #36]	; 0x24
   8779c:	f7ff bb2c 	b.w	86df8 <_dtoa_r+0x60>
   877a0:	f1ba 0f00 	cmp.w	sl, #0
   877a4:	f47f ad3b 	bne.w	8721e <_dtoa_r+0x486>
   877a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   877ac:	2b00      	cmp	r3, #0
   877ae:	f040 817c 	bne.w	87aaa <_dtoa_r+0xd12>
   877b2:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   877b6:	0d3f      	lsrs	r7, r7, #20
   877b8:	053f      	lsls	r7, r7, #20
   877ba:	2f00      	cmp	r7, #0
   877bc:	f43f ad30 	beq.w	87220 <_dtoa_r+0x488>
   877c0:	9a08      	ldr	r2, [sp, #32]
   877c2:	9b06      	ldr	r3, [sp, #24]
   877c4:	3201      	adds	r2, #1
   877c6:	3301      	adds	r3, #1
   877c8:	9208      	str	r2, [sp, #32]
   877ca:	9306      	str	r3, [sp, #24]
   877cc:	2701      	movs	r7, #1
   877ce:	e527      	b.n	87220 <_dtoa_r+0x488>
   877d0:	9924      	ldr	r1, [sp, #144]	; 0x90
   877d2:	2902      	cmp	r1, #2
   877d4:	f77f ad56 	ble.w	87284 <_dtoa_r+0x4ec>
   877d8:	f1b9 0f00 	cmp.w	r9, #0
   877dc:	d18f      	bne.n	876fe <_dtoa_r+0x966>
   877de:	4641      	mov	r1, r8
   877e0:	464b      	mov	r3, r9
   877e2:	2205      	movs	r2, #5
   877e4:	4620      	mov	r0, r4
   877e6:	f001 fa79 	bl	88cdc <__multadd>
   877ea:	4680      	mov	r8, r0
   877ec:	4641      	mov	r1, r8
   877ee:	980a      	ldr	r0, [sp, #40]	; 0x28
   877f0:	f001 fc60 	bl	890b4 <__mcmp>
   877f4:	2800      	cmp	r0, #0
   877f6:	dd82      	ble.n	876fe <_dtoa_r+0x966>
   877f8:	9d07      	ldr	r5, [sp, #28]
   877fa:	2331      	movs	r3, #49	; 0x31
   877fc:	3501      	adds	r5, #1
   877fe:	9507      	str	r5, [sp, #28]
   87800:	9d09      	ldr	r5, [sp, #36]	; 0x24
   87802:	702b      	strb	r3, [r5, #0]
   87804:	f105 0b01 	add.w	fp, r5, #1
   87808:	e77e      	b.n	87708 <_dtoa_r+0x970>
   8780a:	9807      	ldr	r0, [sp, #28]
   8780c:	9909      	ldr	r1, [sp, #36]	; 0x24
   8780e:	2331      	movs	r3, #49	; 0x31
   87810:	3001      	adds	r0, #1
   87812:	9007      	str	r0, [sp, #28]
   87814:	700b      	strb	r3, [r1, #0]
   87816:	e576      	b.n	87306 <_dtoa_r+0x56e>
   87818:	46a3      	mov	fp, r4
   8781a:	9c03      	ldr	r4, [sp, #12]
   8781c:	e489      	b.n	87132 <_dtoa_r+0x39a>
   8781e:	4640      	mov	r0, r8
   87820:	f7fc fb60 	bl	83ee4 <__aeabi_i2d>
   87824:	4602      	mov	r2, r0
   87826:	460b      	mov	r3, r1
   87828:	4650      	mov	r0, sl
   8782a:	4659      	mov	r1, fp
   8782c:	f7fc fbc0 	bl	83fb0 <__aeabi_dmul>
   87830:	2200      	movs	r2, #0
   87832:	4b30      	ldr	r3, [pc, #192]	; (878f4 <_dtoa_r+0xb5c>)
   87834:	f7fc fa0a 	bl	83c4c <__adddf3>
   87838:	4606      	mov	r6, r0
   8783a:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   8783e:	4650      	mov	r0, sl
   87840:	4659      	mov	r1, fp
   87842:	2200      	movs	r2, #0
   87844:	4b2a      	ldr	r3, [pc, #168]	; (878f0 <_dtoa_r+0xb58>)
   87846:	f7fc f9ff 	bl	83c48 <__aeabi_dsub>
   8784a:	4632      	mov	r2, r6
   8784c:	463b      	mov	r3, r7
   8784e:	4682      	mov	sl, r0
   87850:	468b      	mov	fp, r1
   87852:	f7fc fe3d 	bl	844d0 <__aeabi_dcmpgt>
   87856:	2800      	cmp	r0, #0
   87858:	f040 80bd 	bne.w	879d6 <_dtoa_r+0xc3e>
   8785c:	4632      	mov	r2, r6
   8785e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   87862:	4650      	mov	r0, sl
   87864:	4659      	mov	r1, fp
   87866:	f7fc fe15 	bl	84494 <__aeabi_dcmplt>
   8786a:	2800      	cmp	r0, #0
   8786c:	d055      	beq.n	8791a <_dtoa_r+0xb82>
   8786e:	f04f 0800 	mov.w	r8, #0
   87872:	4646      	mov	r6, r8
   87874:	e743      	b.n	876fe <_dtoa_r+0x966>
   87876:	990a      	ldr	r1, [sp, #40]	; 0x28
   87878:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8787a:	4620      	mov	r0, r4
   8787c:	f001 fb6e 	bl	88f5c <__pow5mult>
   87880:	900a      	str	r0, [sp, #40]	; 0x28
   87882:	e4ba      	b.n	871fa <_dtoa_r+0x462>
   87884:	2601      	movs	r6, #1
   87886:	960b      	str	r6, [sp, #44]	; 0x2c
   87888:	e602      	b.n	87490 <_dtoa_r+0x6f8>
   8788a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   8788c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   8788e:	1b7b      	subs	r3, r7, r5
   87890:	441e      	add	r6, r3
   87892:	970c      	str	r7, [sp, #48]	; 0x30
   87894:	960d      	str	r6, [sp, #52]	; 0x34
   87896:	2700      	movs	r7, #0
   87898:	e46f      	b.n	8717a <_dtoa_r+0x3e2>
   8789a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   8789e:	f04f 0802 	mov.w	r8, #2
   878a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   878a6:	e638      	b.n	8751a <_dtoa_r+0x782>
   878a8:	2a00      	cmp	r2, #0
   878aa:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   878ae:	46d9      	mov	r9, fp
   878b0:	dd11      	ble.n	878d6 <_dtoa_r+0xb3e>
   878b2:	990a      	ldr	r1, [sp, #40]	; 0x28
   878b4:	2201      	movs	r2, #1
   878b6:	4620      	mov	r0, r4
   878b8:	f001 fb9e 	bl	88ff8 <__lshift>
   878bc:	4641      	mov	r1, r8
   878be:	900a      	str	r0, [sp, #40]	; 0x28
   878c0:	f001 fbf8 	bl	890b4 <__mcmp>
   878c4:	2800      	cmp	r0, #0
   878c6:	f340 815d 	ble.w	87b84 <_dtoa_r+0xdec>
   878ca:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   878ce:	f000 811b 	beq.w	87b08 <_dtoa_r+0xd70>
   878d2:	f109 0a31 	add.w	sl, r9, #49	; 0x31
   878d6:	9b06      	ldr	r3, [sp, #24]
   878d8:	4635      	mov	r5, r6
   878da:	f883 a000 	strb.w	sl, [r3]
   878de:	f103 0b01 	add.w	fp, r3, #1
   878e2:	463e      	mov	r6, r7
   878e4:	e50f      	b.n	87306 <_dtoa_r+0x56e>
   878e6:	bf00      	nop
   878e8:	3ff00000 	.word	0x3ff00000
   878ec:	40240000 	.word	0x40240000
   878f0:	40140000 	.word	0x40140000
   878f4:	401c0000 	.word	0x401c0000
   878f8:	d103      	bne.n	87902 <_dtoa_r+0xb6a>
   878fa:	f01a 0f01 	tst.w	sl, #1
   878fe:	f47f acf2 	bne.w	872e6 <_dtoa_r+0x54e>
   87902:	465b      	mov	r3, fp
   87904:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   87908:	469b      	mov	fp, r3
   8790a:	2a30      	cmp	r2, #48	; 0x30
   8790c:	f103 33ff 	add.w	r3, r3, #4294967295
   87910:	d0f8      	beq.n	87904 <_dtoa_r+0xb6c>
   87912:	e4f8      	b.n	87306 <_dtoa_r+0x56e>
   87914:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   87918:	4654      	mov	r4, sl
   8791a:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   8791e:	f7ff bb47 	b.w	86fb0 <_dtoa_r+0x218>
   87922:	9e07      	ldr	r6, [sp, #28]
   87924:	4275      	negs	r5, r6
   87926:	2d00      	cmp	r5, #0
   87928:	f000 80c2 	beq.w	87ab0 <_dtoa_r+0xd18>
   8792c:	4ba3      	ldr	r3, [pc, #652]	; (87bbc <_dtoa_r+0xe24>)
   8792e:	f005 020f 	and.w	r2, r5, #15
   87932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87936:	e9d3 2300 	ldrd	r2, r3, [r3]
   8793a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   8793e:	f7fc fb37 	bl	83fb0 <__aeabi_dmul>
   87942:	112d      	asrs	r5, r5, #4
   87944:	4682      	mov	sl, r0
   87946:	468b      	mov	fp, r1
   87948:	f000 812e 	beq.w	87ba8 <_dtoa_r+0xe10>
   8794c:	4e9c      	ldr	r6, [pc, #624]	; (87bc0 <_dtoa_r+0xe28>)
   8794e:	f04f 0802 	mov.w	r8, #2
   87952:	07ea      	lsls	r2, r5, #31
   87954:	d505      	bpl.n	87962 <_dtoa_r+0xbca>
   87956:	e9d6 2300 	ldrd	r2, r3, [r6]
   8795a:	f108 0801 	add.w	r8, r8, #1
   8795e:	f7fc fb27 	bl	83fb0 <__aeabi_dmul>
   87962:	106d      	asrs	r5, r5, #1
   87964:	f106 0608 	add.w	r6, r6, #8
   87968:	d1f3      	bne.n	87952 <_dtoa_r+0xbba>
   8796a:	4682      	mov	sl, r0
   8796c:	468b      	mov	fp, r1
   8796e:	e5ef      	b.n	87550 <_dtoa_r+0x7b8>
   87970:	9e07      	ldr	r6, [sp, #28]
   87972:	9d09      	ldr	r5, [sp, #36]	; 0x24
   87974:	2230      	movs	r2, #48	; 0x30
   87976:	702a      	strb	r2, [r5, #0]
   87978:	3601      	adds	r6, #1
   8797a:	2231      	movs	r2, #49	; 0x31
   8797c:	9607      	str	r6, [sp, #28]
   8797e:	701a      	strb	r2, [r3, #0]
   87980:	f7ff bbd7 	b.w	87132 <_dtoa_r+0x39a>
   87984:	6871      	ldr	r1, [r6, #4]
   87986:	4620      	mov	r0, r4
   87988:	f001 f978 	bl	88c7c <_Balloc>
   8798c:	6933      	ldr	r3, [r6, #16]
   8798e:	4605      	mov	r5, r0
   87990:	1c9a      	adds	r2, r3, #2
   87992:	0092      	lsls	r2, r2, #2
   87994:	f106 010c 	add.w	r1, r6, #12
   87998:	300c      	adds	r0, #12
   8799a:	f7fc fe0d 	bl	845b8 <memcpy>
   8799e:	4620      	mov	r0, r4
   879a0:	4629      	mov	r1, r5
   879a2:	2201      	movs	r2, #1
   879a4:	f001 fb28 	bl	88ff8 <__lshift>
   879a8:	4607      	mov	r7, r0
   879aa:	e503      	b.n	873b4 <_dtoa_r+0x61c>
   879ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   879b0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   879b4:	f000 80a8 	beq.w	87b08 <_dtoa_r+0xd70>
   879b8:	9d06      	ldr	r5, [sp, #24]
   879ba:	f10a 0301 	add.w	r3, sl, #1
   879be:	702b      	strb	r3, [r5, #0]
   879c0:	4635      	mov	r5, r6
   879c2:	9e06      	ldr	r6, [sp, #24]
   879c4:	f106 0b01 	add.w	fp, r6, #1
   879c8:	463e      	mov	r6, r7
   879ca:	e49c      	b.n	87306 <_dtoa_r+0x56e>
   879cc:	4635      	mov	r5, r6
   879ce:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   879d2:	463e      	mov	r6, r7
   879d4:	e47b      	b.n	872ce <_dtoa_r+0x536>
   879d6:	f04f 0800 	mov.w	r8, #0
   879da:	4646      	mov	r6, r8
   879dc:	e70c      	b.n	877f8 <_dtoa_r+0xa60>
   879de:	4977      	ldr	r1, [pc, #476]	; (87bbc <_dtoa_r+0xe24>)
   879e0:	f108 35ff 	add.w	r5, r8, #4294967295
   879e4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   879e8:	4632      	mov	r2, r6
   879ea:	463b      	mov	r3, r7
   879ec:	e9d1 0100 	ldrd	r0, r1, [r1]
   879f0:	9510      	str	r5, [sp, #64]	; 0x40
   879f2:	f7fc fadd 	bl	83fb0 <__aeabi_dmul>
   879f6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   879fa:	4659      	mov	r1, fp
   879fc:	4650      	mov	r0, sl
   879fe:	f7fc fd71 	bl	844e4 <__aeabi_d2iz>
   87a02:	4605      	mov	r5, r0
   87a04:	f7fc fa6e 	bl	83ee4 <__aeabi_i2d>
   87a08:	4602      	mov	r2, r0
   87a0a:	460b      	mov	r3, r1
   87a0c:	4650      	mov	r0, sl
   87a0e:	4659      	mov	r1, fp
   87a10:	f7fc f91a 	bl	83c48 <__aeabi_dsub>
   87a14:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   87a18:	3530      	adds	r5, #48	; 0x30
   87a1a:	f1b8 0f01 	cmp.w	r8, #1
   87a1e:	4606      	mov	r6, r0
   87a20:	460f      	mov	r7, r1
   87a22:	f88e 5000 	strb.w	r5, [lr]
   87a26:	f10e 0b01 	add.w	fp, lr, #1
   87a2a:	d01e      	beq.n	87a6a <_dtoa_r+0xcd2>
   87a2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   87a2e:	1e6b      	subs	r3, r5, #1
   87a30:	eb03 0a08 	add.w	sl, r3, r8
   87a34:	2200      	movs	r2, #0
   87a36:	4b63      	ldr	r3, [pc, #396]	; (87bc4 <_dtoa_r+0xe2c>)
   87a38:	f7fc faba 	bl	83fb0 <__aeabi_dmul>
   87a3c:	460f      	mov	r7, r1
   87a3e:	4606      	mov	r6, r0
   87a40:	f7fc fd50 	bl	844e4 <__aeabi_d2iz>
   87a44:	4680      	mov	r8, r0
   87a46:	f7fc fa4d 	bl	83ee4 <__aeabi_i2d>
   87a4a:	f108 0830 	add.w	r8, r8, #48	; 0x30
   87a4e:	4602      	mov	r2, r0
   87a50:	460b      	mov	r3, r1
   87a52:	4630      	mov	r0, r6
   87a54:	4639      	mov	r1, r7
   87a56:	f7fc f8f7 	bl	83c48 <__aeabi_dsub>
   87a5a:	f805 8f01 	strb.w	r8, [r5, #1]!
   87a5e:	4555      	cmp	r5, sl
   87a60:	d1e8      	bne.n	87a34 <_dtoa_r+0xc9c>
   87a62:	9d10      	ldr	r5, [sp, #64]	; 0x40
   87a64:	4606      	mov	r6, r0
   87a66:	460f      	mov	r7, r1
   87a68:	44ab      	add	fp, r5
   87a6a:	2200      	movs	r2, #0
   87a6c:	4b56      	ldr	r3, [pc, #344]	; (87bc8 <_dtoa_r+0xe30>)
   87a6e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87a72:	f7fc f8eb 	bl	83c4c <__adddf3>
   87a76:	4632      	mov	r2, r6
   87a78:	463b      	mov	r3, r7
   87a7a:	f7fc fd0b 	bl	84494 <__aeabi_dcmplt>
   87a7e:	2800      	cmp	r0, #0
   87a80:	d04d      	beq.n	87b1e <_dtoa_r+0xd86>
   87a82:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   87a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87a86:	9607      	str	r6, [sp, #28]
   87a88:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
   87a8c:	f7ff bb4a 	b.w	87124 <_dtoa_r+0x38c>
   87a90:	9e08      	ldr	r6, [sp, #32]
   87a92:	2300      	movs	r3, #0
   87a94:	ebc9 0506 	rsb	r5, r9, r6
   87a98:	f7ff bb75 	b.w	87186 <_dtoa_r+0x3ee>
   87a9c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   87a9e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87aa0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   87aa4:	9d08      	ldr	r5, [sp, #32]
   87aa6:	f7ff bb6e 	b.w	87186 <_dtoa_r+0x3ee>
   87aaa:	4657      	mov	r7, sl
   87aac:	f7ff bbb8 	b.w	87220 <_dtoa_r+0x488>
   87ab0:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   87ab4:	f04f 0802 	mov.w	r8, #2
   87ab8:	e54a      	b.n	87550 <_dtoa_r+0x7b8>
   87aba:	f1b9 0f00 	cmp.w	r9, #0
   87abe:	f43f aeae 	beq.w	8781e <_dtoa_r+0xa86>
   87ac2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   87ac4:	2e00      	cmp	r6, #0
   87ac6:	f77f af28 	ble.w	8791a <_dtoa_r+0xb82>
   87aca:	2200      	movs	r2, #0
   87acc:	4b3d      	ldr	r3, [pc, #244]	; (87bc4 <_dtoa_r+0xe2c>)
   87ace:	4650      	mov	r0, sl
   87ad0:	4659      	mov	r1, fp
   87ad2:	f7fc fa6d 	bl	83fb0 <__aeabi_dmul>
   87ad6:	4682      	mov	sl, r0
   87ad8:	f108 0001 	add.w	r0, r8, #1
   87adc:	468b      	mov	fp, r1
   87ade:	f7fc fa01 	bl	83ee4 <__aeabi_i2d>
   87ae2:	4602      	mov	r2, r0
   87ae4:	460b      	mov	r3, r1
   87ae6:	4650      	mov	r0, sl
   87ae8:	4659      	mov	r1, fp
   87aea:	f7fc fa61 	bl	83fb0 <__aeabi_dmul>
   87aee:	2200      	movs	r2, #0
   87af0:	4b36      	ldr	r3, [pc, #216]	; (87bcc <_dtoa_r+0xe34>)
   87af2:	f7fc f8ab 	bl	83c4c <__adddf3>
   87af6:	9d07      	ldr	r5, [sp, #28]
   87af8:	4606      	mov	r6, r0
   87afa:	3d01      	subs	r5, #1
   87afc:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   87b00:	9517      	str	r5, [sp, #92]	; 0x5c
   87b02:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   87b06:	e543      	b.n	87590 <_dtoa_r+0x7f8>
   87b08:	4635      	mov	r5, r6
   87b0a:	9b06      	ldr	r3, [sp, #24]
   87b0c:	9e06      	ldr	r6, [sp, #24]
   87b0e:	2239      	movs	r2, #57	; 0x39
   87b10:	7032      	strb	r2, [r6, #0]
   87b12:	f103 0b01 	add.w	fp, r3, #1
   87b16:	463e      	mov	r6, r7
   87b18:	9909      	ldr	r1, [sp, #36]	; 0x24
   87b1a:	f7ff bbee 	b.w	872fa <_dtoa_r+0x562>
   87b1e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   87b22:	2000      	movs	r0, #0
   87b24:	4928      	ldr	r1, [pc, #160]	; (87bc8 <_dtoa_r+0xe30>)
   87b26:	f7fc f88f 	bl	83c48 <__aeabi_dsub>
   87b2a:	4632      	mov	r2, r6
   87b2c:	463b      	mov	r3, r7
   87b2e:	f7fc fccf 	bl	844d0 <__aeabi_dcmpgt>
   87b32:	2800      	cmp	r0, #0
   87b34:	f43f aef1 	beq.w	8791a <_dtoa_r+0xb82>
   87b38:	465b      	mov	r3, fp
   87b3a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   87b3e:	469b      	mov	fp, r3
   87b40:	2a30      	cmp	r2, #48	; 0x30
   87b42:	f103 33ff 	add.w	r3, r3, #4294967295
   87b46:	d0f8      	beq.n	87b3a <_dtoa_r+0xda2>
   87b48:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   87b4a:	9507      	str	r5, [sp, #28]
   87b4c:	f7ff baf1 	b.w	87132 <_dtoa_r+0x39a>
   87b50:	4645      	mov	r5, r8
   87b52:	4654      	mov	r4, sl
   87b54:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   87b56:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87b58:	9607      	str	r6, [sp, #28]
   87b5a:	f7ff bae3 	b.w	87124 <_dtoa_r+0x38c>
   87b5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   87b62:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   87b66:	d0cf      	beq.n	87b08 <_dtoa_r+0xd70>
   87b68:	9b03      	ldr	r3, [sp, #12]
   87b6a:	4635      	mov	r5, r6
   87b6c:	2b00      	cmp	r3, #0
   87b6e:	9e06      	ldr	r6, [sp, #24]
   87b70:	bfc8      	it	gt
   87b72:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
   87b76:	f886 a000 	strb.w	sl, [r6]
   87b7a:	f106 0b01 	add.w	fp, r6, #1
   87b7e:	463e      	mov	r6, r7
   87b80:	f7ff bbc1 	b.w	87306 <_dtoa_r+0x56e>
   87b84:	f47f aea7 	bne.w	878d6 <_dtoa_r+0xb3e>
   87b88:	f01a 0f01 	tst.w	sl, #1
   87b8c:	f43f aea3 	beq.w	878d6 <_dtoa_r+0xb3e>
   87b90:	e69b      	b.n	878ca <_dtoa_r+0xb32>
   87b92:	4631      	mov	r1, r6
   87b94:	4620      	mov	r0, r4
   87b96:	220a      	movs	r2, #10
   87b98:	2300      	movs	r3, #0
   87b9a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   87b9e:	f001 f89d 	bl	88cdc <__multadd>
   87ba2:	4606      	mov	r6, r0
   87ba4:	f7ff bb6a 	b.w	8727c <_dtoa_r+0x4e4>
   87ba8:	f04f 0802 	mov.w	r8, #2
   87bac:	e4d0      	b.n	87550 <_dtoa_r+0x7b8>
   87bae:	f43f ab50 	beq.w	87252 <_dtoa_r+0x4ba>
   87bb2:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   87bb6:	f7ff bbe0 	b.w	8737a <_dtoa_r+0x5e2>
   87bba:	bf00      	nop
   87bbc:	0008a660 	.word	0x0008a660
   87bc0:	0008a728 	.word	0x0008a728
   87bc4:	40240000 	.word	0x40240000
   87bc8:	3fe00000 	.word	0x3fe00000
   87bcc:	401c0000 	.word	0x401c0000

00087bd0 <__sflush_r>:
   87bd0:	898b      	ldrh	r3, [r1, #12]
   87bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87bd6:	b29a      	uxth	r2, r3
   87bd8:	460d      	mov	r5, r1
   87bda:	0711      	lsls	r1, r2, #28
   87bdc:	4680      	mov	r8, r0
   87bde:	d43c      	bmi.n	87c5a <__sflush_r+0x8a>
   87be0:	686a      	ldr	r2, [r5, #4]
   87be2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   87be6:	2a00      	cmp	r2, #0
   87be8:	81ab      	strh	r3, [r5, #12]
   87bea:	dd59      	ble.n	87ca0 <__sflush_r+0xd0>
   87bec:	6aac      	ldr	r4, [r5, #40]	; 0x28
   87bee:	2c00      	cmp	r4, #0
   87bf0:	d04b      	beq.n	87c8a <__sflush_r+0xba>
   87bf2:	b29b      	uxth	r3, r3
   87bf4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   87bf8:	2100      	movs	r1, #0
   87bfa:	b292      	uxth	r2, r2
   87bfc:	f8d8 6000 	ldr.w	r6, [r8]
   87c00:	f8c8 1000 	str.w	r1, [r8]
   87c04:	2a00      	cmp	r2, #0
   87c06:	d04f      	beq.n	87ca8 <__sflush_r+0xd8>
   87c08:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   87c0a:	075f      	lsls	r7, r3, #29
   87c0c:	d505      	bpl.n	87c1a <__sflush_r+0x4a>
   87c0e:	6869      	ldr	r1, [r5, #4]
   87c10:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   87c12:	1a52      	subs	r2, r2, r1
   87c14:	b10b      	cbz	r3, 87c1a <__sflush_r+0x4a>
   87c16:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   87c18:	1ad2      	subs	r2, r2, r3
   87c1a:	4640      	mov	r0, r8
   87c1c:	69e9      	ldr	r1, [r5, #28]
   87c1e:	2300      	movs	r3, #0
   87c20:	47a0      	blx	r4
   87c22:	1c44      	adds	r4, r0, #1
   87c24:	d04a      	beq.n	87cbc <__sflush_r+0xec>
   87c26:	89ab      	ldrh	r3, [r5, #12]
   87c28:	692a      	ldr	r2, [r5, #16]
   87c2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   87c2e:	b29b      	uxth	r3, r3
   87c30:	2100      	movs	r1, #0
   87c32:	602a      	str	r2, [r5, #0]
   87c34:	04da      	lsls	r2, r3, #19
   87c36:	81ab      	strh	r3, [r5, #12]
   87c38:	6069      	str	r1, [r5, #4]
   87c3a:	d44c      	bmi.n	87cd6 <__sflush_r+0x106>
   87c3c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   87c3e:	f8c8 6000 	str.w	r6, [r8]
   87c42:	b311      	cbz	r1, 87c8a <__sflush_r+0xba>
   87c44:	f105 0340 	add.w	r3, r5, #64	; 0x40
   87c48:	4299      	cmp	r1, r3
   87c4a:	d002      	beq.n	87c52 <__sflush_r+0x82>
   87c4c:	4640      	mov	r0, r8
   87c4e:	f000 f9c3 	bl	87fd8 <_free_r>
   87c52:	2000      	movs	r0, #0
   87c54:	6328      	str	r0, [r5, #48]	; 0x30
   87c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87c5a:	692e      	ldr	r6, [r5, #16]
   87c5c:	b1ae      	cbz	r6, 87c8a <__sflush_r+0xba>
   87c5e:	0791      	lsls	r1, r2, #30
   87c60:	682c      	ldr	r4, [r5, #0]
   87c62:	bf0c      	ite	eq
   87c64:	696b      	ldreq	r3, [r5, #20]
   87c66:	2300      	movne	r3, #0
   87c68:	602e      	str	r6, [r5, #0]
   87c6a:	1ba4      	subs	r4, r4, r6
   87c6c:	60ab      	str	r3, [r5, #8]
   87c6e:	e00a      	b.n	87c86 <__sflush_r+0xb6>
   87c70:	4632      	mov	r2, r6
   87c72:	4623      	mov	r3, r4
   87c74:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   87c76:	4640      	mov	r0, r8
   87c78:	69e9      	ldr	r1, [r5, #28]
   87c7a:	47b8      	blx	r7
   87c7c:	2800      	cmp	r0, #0
   87c7e:	ebc0 0404 	rsb	r4, r0, r4
   87c82:	4406      	add	r6, r0
   87c84:	dd04      	ble.n	87c90 <__sflush_r+0xc0>
   87c86:	2c00      	cmp	r4, #0
   87c88:	dcf2      	bgt.n	87c70 <__sflush_r+0xa0>
   87c8a:	2000      	movs	r0, #0
   87c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87c90:	89ab      	ldrh	r3, [r5, #12]
   87c92:	f04f 30ff 	mov.w	r0, #4294967295
   87c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87c9a:	81ab      	strh	r3, [r5, #12]
   87c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87ca0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   87ca2:	2a00      	cmp	r2, #0
   87ca4:	dca2      	bgt.n	87bec <__sflush_r+0x1c>
   87ca6:	e7f0      	b.n	87c8a <__sflush_r+0xba>
   87ca8:	2301      	movs	r3, #1
   87caa:	4640      	mov	r0, r8
   87cac:	69e9      	ldr	r1, [r5, #28]
   87cae:	47a0      	blx	r4
   87cb0:	1c43      	adds	r3, r0, #1
   87cb2:	4602      	mov	r2, r0
   87cb4:	d01e      	beq.n	87cf4 <__sflush_r+0x124>
   87cb6:	89ab      	ldrh	r3, [r5, #12]
   87cb8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   87cba:	e7a6      	b.n	87c0a <__sflush_r+0x3a>
   87cbc:	f8d8 3000 	ldr.w	r3, [r8]
   87cc0:	b95b      	cbnz	r3, 87cda <__sflush_r+0x10a>
   87cc2:	89aa      	ldrh	r2, [r5, #12]
   87cc4:	6929      	ldr	r1, [r5, #16]
   87cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   87cca:	b292      	uxth	r2, r2
   87ccc:	606b      	str	r3, [r5, #4]
   87cce:	04d3      	lsls	r3, r2, #19
   87cd0:	81aa      	strh	r2, [r5, #12]
   87cd2:	6029      	str	r1, [r5, #0]
   87cd4:	d5b2      	bpl.n	87c3c <__sflush_r+0x6c>
   87cd6:	6528      	str	r0, [r5, #80]	; 0x50
   87cd8:	e7b0      	b.n	87c3c <__sflush_r+0x6c>
   87cda:	2b1d      	cmp	r3, #29
   87cdc:	d001      	beq.n	87ce2 <__sflush_r+0x112>
   87cde:	2b16      	cmp	r3, #22
   87ce0:	d113      	bne.n	87d0a <__sflush_r+0x13a>
   87ce2:	89a9      	ldrh	r1, [r5, #12]
   87ce4:	692b      	ldr	r3, [r5, #16]
   87ce6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   87cea:	2200      	movs	r2, #0
   87cec:	81a9      	strh	r1, [r5, #12]
   87cee:	602b      	str	r3, [r5, #0]
   87cf0:	606a      	str	r2, [r5, #4]
   87cf2:	e7a3      	b.n	87c3c <__sflush_r+0x6c>
   87cf4:	f8d8 3000 	ldr.w	r3, [r8]
   87cf8:	2b00      	cmp	r3, #0
   87cfa:	d0dc      	beq.n	87cb6 <__sflush_r+0xe6>
   87cfc:	2b1d      	cmp	r3, #29
   87cfe:	d001      	beq.n	87d04 <__sflush_r+0x134>
   87d00:	2b16      	cmp	r3, #22
   87d02:	d1c5      	bne.n	87c90 <__sflush_r+0xc0>
   87d04:	f8c8 6000 	str.w	r6, [r8]
   87d08:	e7bf      	b.n	87c8a <__sflush_r+0xba>
   87d0a:	89ab      	ldrh	r3, [r5, #12]
   87d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87d10:	81ab      	strh	r3, [r5, #12]
   87d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87d16:	bf00      	nop

00087d18 <_fflush_r>:
   87d18:	b510      	push	{r4, lr}
   87d1a:	4604      	mov	r4, r0
   87d1c:	b082      	sub	sp, #8
   87d1e:	b108      	cbz	r0, 87d24 <_fflush_r+0xc>
   87d20:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87d22:	b153      	cbz	r3, 87d3a <_fflush_r+0x22>
   87d24:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   87d28:	b908      	cbnz	r0, 87d2e <_fflush_r+0x16>
   87d2a:	b002      	add	sp, #8
   87d2c:	bd10      	pop	{r4, pc}
   87d2e:	4620      	mov	r0, r4
   87d30:	b002      	add	sp, #8
   87d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   87d36:	f7ff bf4b 	b.w	87bd0 <__sflush_r>
   87d3a:	9101      	str	r1, [sp, #4]
   87d3c:	f000 f808 	bl	87d50 <__sinit>
   87d40:	9901      	ldr	r1, [sp, #4]
   87d42:	e7ef      	b.n	87d24 <_fflush_r+0xc>

00087d44 <_cleanup_r>:
   87d44:	4901      	ldr	r1, [pc, #4]	; (87d4c <_cleanup_r+0x8>)
   87d46:	f000 bb9f 	b.w	88488 <_fwalk>
   87d4a:	bf00      	nop
   87d4c:	00089ae1 	.word	0x00089ae1

00087d50 <__sinit>:
   87d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87d54:	6b84      	ldr	r4, [r0, #56]	; 0x38
   87d56:	b083      	sub	sp, #12
   87d58:	4607      	mov	r7, r0
   87d5a:	2c00      	cmp	r4, #0
   87d5c:	d165      	bne.n	87e2a <__sinit+0xda>
   87d5e:	687d      	ldr	r5, [r7, #4]
   87d60:	4833      	ldr	r0, [pc, #204]	; (87e30 <__sinit+0xe0>)
   87d62:	2304      	movs	r3, #4
   87d64:	2103      	movs	r1, #3
   87d66:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   87d6a:	63f8      	str	r0, [r7, #60]	; 0x3c
   87d6c:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   87d70:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   87d74:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   87d78:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   87d7c:	81ab      	strh	r3, [r5, #12]
   87d7e:	602c      	str	r4, [r5, #0]
   87d80:	606c      	str	r4, [r5, #4]
   87d82:	60ac      	str	r4, [r5, #8]
   87d84:	666c      	str	r4, [r5, #100]	; 0x64
   87d86:	81ec      	strh	r4, [r5, #14]
   87d88:	612c      	str	r4, [r5, #16]
   87d8a:	616c      	str	r4, [r5, #20]
   87d8c:	61ac      	str	r4, [r5, #24]
   87d8e:	4621      	mov	r1, r4
   87d90:	2208      	movs	r2, #8
   87d92:	f7fc fc87 	bl	846a4 <memset>
   87d96:	f8df b09c 	ldr.w	fp, [pc, #156]	; 87e34 <__sinit+0xe4>
   87d9a:	68be      	ldr	r6, [r7, #8]
   87d9c:	f8df a098 	ldr.w	sl, [pc, #152]	; 87e38 <__sinit+0xe8>
   87da0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 87e3c <__sinit+0xec>
   87da4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 87e40 <__sinit+0xf0>
   87da8:	2301      	movs	r3, #1
   87daa:	2209      	movs	r2, #9
   87dac:	61ed      	str	r5, [r5, #28]
   87dae:	f8c5 b020 	str.w	fp, [r5, #32]
   87db2:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   87db6:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   87dba:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   87dbe:	4621      	mov	r1, r4
   87dc0:	81f3      	strh	r3, [r6, #14]
   87dc2:	81b2      	strh	r2, [r6, #12]
   87dc4:	6034      	str	r4, [r6, #0]
   87dc6:	6074      	str	r4, [r6, #4]
   87dc8:	60b4      	str	r4, [r6, #8]
   87dca:	6674      	str	r4, [r6, #100]	; 0x64
   87dcc:	6134      	str	r4, [r6, #16]
   87dce:	6174      	str	r4, [r6, #20]
   87dd0:	61b4      	str	r4, [r6, #24]
   87dd2:	2208      	movs	r2, #8
   87dd4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   87dd8:	9301      	str	r3, [sp, #4]
   87dda:	f7fc fc63 	bl	846a4 <memset>
   87dde:	68fd      	ldr	r5, [r7, #12]
   87de0:	2012      	movs	r0, #18
   87de2:	2202      	movs	r2, #2
   87de4:	61f6      	str	r6, [r6, #28]
   87de6:	f8c6 b020 	str.w	fp, [r6, #32]
   87dea:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   87dee:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   87df2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   87df6:	4621      	mov	r1, r4
   87df8:	81a8      	strh	r0, [r5, #12]
   87dfa:	81ea      	strh	r2, [r5, #14]
   87dfc:	602c      	str	r4, [r5, #0]
   87dfe:	606c      	str	r4, [r5, #4]
   87e00:	60ac      	str	r4, [r5, #8]
   87e02:	666c      	str	r4, [r5, #100]	; 0x64
   87e04:	612c      	str	r4, [r5, #16]
   87e06:	616c      	str	r4, [r5, #20]
   87e08:	61ac      	str	r4, [r5, #24]
   87e0a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   87e0e:	2208      	movs	r2, #8
   87e10:	f7fc fc48 	bl	846a4 <memset>
   87e14:	9b01      	ldr	r3, [sp, #4]
   87e16:	61ed      	str	r5, [r5, #28]
   87e18:	f8c5 b020 	str.w	fp, [r5, #32]
   87e1c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   87e20:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   87e24:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   87e28:	63bb      	str	r3, [r7, #56]	; 0x38
   87e2a:	b003      	add	sp, #12
   87e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87e30:	00087d45 	.word	0x00087d45
   87e34:	00089675 	.word	0x00089675
   87e38:	00089699 	.word	0x00089699
   87e3c:	000896d1 	.word	0x000896d1
   87e40:	000896f1 	.word	0x000896f1

00087e44 <__sfp_lock_acquire>:
   87e44:	4770      	bx	lr
   87e46:	bf00      	nop

00087e48 <__sfp_lock_release>:
   87e48:	4770      	bx	lr
   87e4a:	bf00      	nop

00087e4c <__libc_fini_array>:
   87e4c:	b538      	push	{r3, r4, r5, lr}
   87e4e:	4d09      	ldr	r5, [pc, #36]	; (87e74 <__libc_fini_array+0x28>)
   87e50:	4c09      	ldr	r4, [pc, #36]	; (87e78 <__libc_fini_array+0x2c>)
   87e52:	1b64      	subs	r4, r4, r5
   87e54:	10a4      	asrs	r4, r4, #2
   87e56:	bf18      	it	ne
   87e58:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   87e5c:	d005      	beq.n	87e6a <__libc_fini_array+0x1e>
   87e5e:	3c01      	subs	r4, #1
   87e60:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   87e64:	4798      	blx	r3
   87e66:	2c00      	cmp	r4, #0
   87e68:	d1f9      	bne.n	87e5e <__libc_fini_array+0x12>
   87e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   87e6e:	f002 bc7f 	b.w	8a770 <_fini>
   87e72:	bf00      	nop
   87e74:	0008a77c 	.word	0x0008a77c
   87e78:	0008a780 	.word	0x0008a780

00087e7c <_fputwc_r>:
   87e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87e80:	8993      	ldrh	r3, [r2, #12]
   87e82:	460f      	mov	r7, r1
   87e84:	0499      	lsls	r1, r3, #18
   87e86:	b082      	sub	sp, #8
   87e88:	4614      	mov	r4, r2
   87e8a:	4680      	mov	r8, r0
   87e8c:	d406      	bmi.n	87e9c <_fputwc_r+0x20>
   87e8e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   87e90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   87e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   87e98:	81a3      	strh	r3, [r4, #12]
   87e9a:	6662      	str	r2, [r4, #100]	; 0x64
   87e9c:	f000 fb1c 	bl	884d8 <__locale_mb_cur_max>
   87ea0:	2801      	cmp	r0, #1
   87ea2:	d03e      	beq.n	87f22 <_fputwc_r+0xa6>
   87ea4:	463a      	mov	r2, r7
   87ea6:	4640      	mov	r0, r8
   87ea8:	a901      	add	r1, sp, #4
   87eaa:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   87eae:	f001 fcf7 	bl	898a0 <_wcrtomb_r>
   87eb2:	1c42      	adds	r2, r0, #1
   87eb4:	4606      	mov	r6, r0
   87eb6:	d02d      	beq.n	87f14 <_fputwc_r+0x98>
   87eb8:	2800      	cmp	r0, #0
   87eba:	d03a      	beq.n	87f32 <_fputwc_r+0xb6>
   87ebc:	f89d 1004 	ldrb.w	r1, [sp, #4]
   87ec0:	2500      	movs	r5, #0
   87ec2:	e009      	b.n	87ed8 <_fputwc_r+0x5c>
   87ec4:	6823      	ldr	r3, [r4, #0]
   87ec6:	7019      	strb	r1, [r3, #0]
   87ec8:	6823      	ldr	r3, [r4, #0]
   87eca:	3301      	adds	r3, #1
   87ecc:	6023      	str	r3, [r4, #0]
   87ece:	3501      	adds	r5, #1
   87ed0:	42b5      	cmp	r5, r6
   87ed2:	d22e      	bcs.n	87f32 <_fputwc_r+0xb6>
   87ed4:	ab01      	add	r3, sp, #4
   87ed6:	5ce9      	ldrb	r1, [r5, r3]
   87ed8:	68a3      	ldr	r3, [r4, #8]
   87eda:	3b01      	subs	r3, #1
   87edc:	2b00      	cmp	r3, #0
   87ede:	60a3      	str	r3, [r4, #8]
   87ee0:	daf0      	bge.n	87ec4 <_fputwc_r+0x48>
   87ee2:	69a2      	ldr	r2, [r4, #24]
   87ee4:	4293      	cmp	r3, r2
   87ee6:	db06      	blt.n	87ef6 <_fputwc_r+0x7a>
   87ee8:	6823      	ldr	r3, [r4, #0]
   87eea:	7019      	strb	r1, [r3, #0]
   87eec:	6823      	ldr	r3, [r4, #0]
   87eee:	7819      	ldrb	r1, [r3, #0]
   87ef0:	3301      	adds	r3, #1
   87ef2:	290a      	cmp	r1, #10
   87ef4:	d1ea      	bne.n	87ecc <_fputwc_r+0x50>
   87ef6:	4640      	mov	r0, r8
   87ef8:	4622      	mov	r2, r4
   87efa:	f001 fc7d 	bl	897f8 <__swbuf_r>
   87efe:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   87f02:	4258      	negs	r0, r3
   87f04:	4158      	adcs	r0, r3
   87f06:	2800      	cmp	r0, #0
   87f08:	d0e1      	beq.n	87ece <_fputwc_r+0x52>
   87f0a:	f04f 30ff 	mov.w	r0, #4294967295
   87f0e:	b002      	add	sp, #8
   87f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87f14:	89a3      	ldrh	r3, [r4, #12]
   87f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87f1a:	81a3      	strh	r3, [r4, #12]
   87f1c:	b002      	add	sp, #8
   87f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87f22:	1e7b      	subs	r3, r7, #1
   87f24:	2bfe      	cmp	r3, #254	; 0xfe
   87f26:	d8bd      	bhi.n	87ea4 <_fputwc_r+0x28>
   87f28:	b2f9      	uxtb	r1, r7
   87f2a:	4606      	mov	r6, r0
   87f2c:	f88d 1004 	strb.w	r1, [sp, #4]
   87f30:	e7c6      	b.n	87ec0 <_fputwc_r+0x44>
   87f32:	4638      	mov	r0, r7
   87f34:	b002      	add	sp, #8
   87f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87f3a:	bf00      	nop

00087f3c <_malloc_trim_r>:
   87f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87f3e:	4d23      	ldr	r5, [pc, #140]	; (87fcc <_malloc_trim_r+0x90>)
   87f40:	460f      	mov	r7, r1
   87f42:	4604      	mov	r4, r0
   87f44:	f000 fe96 	bl	88c74 <__malloc_lock>
   87f48:	68ab      	ldr	r3, [r5, #8]
   87f4a:	685e      	ldr	r6, [r3, #4]
   87f4c:	f026 0603 	bic.w	r6, r6, #3
   87f50:	1bf1      	subs	r1, r6, r7
   87f52:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   87f56:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   87f5a:	f021 010f 	bic.w	r1, r1, #15
   87f5e:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   87f62:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   87f66:	db07      	blt.n	87f78 <_malloc_trim_r+0x3c>
   87f68:	4620      	mov	r0, r4
   87f6a:	2100      	movs	r1, #0
   87f6c:	f001 fb70 	bl	89650 <_sbrk_r>
   87f70:	68ab      	ldr	r3, [r5, #8]
   87f72:	4433      	add	r3, r6
   87f74:	4298      	cmp	r0, r3
   87f76:	d004      	beq.n	87f82 <_malloc_trim_r+0x46>
   87f78:	4620      	mov	r0, r4
   87f7a:	f000 fe7d 	bl	88c78 <__malloc_unlock>
   87f7e:	2000      	movs	r0, #0
   87f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87f82:	4620      	mov	r0, r4
   87f84:	4279      	negs	r1, r7
   87f86:	f001 fb63 	bl	89650 <_sbrk_r>
   87f8a:	3001      	adds	r0, #1
   87f8c:	d00d      	beq.n	87faa <_malloc_trim_r+0x6e>
   87f8e:	4b10      	ldr	r3, [pc, #64]	; (87fd0 <_malloc_trim_r+0x94>)
   87f90:	68aa      	ldr	r2, [r5, #8]
   87f92:	6819      	ldr	r1, [r3, #0]
   87f94:	1bf6      	subs	r6, r6, r7
   87f96:	f046 0601 	orr.w	r6, r6, #1
   87f9a:	4620      	mov	r0, r4
   87f9c:	1bc9      	subs	r1, r1, r7
   87f9e:	6056      	str	r6, [r2, #4]
   87fa0:	6019      	str	r1, [r3, #0]
   87fa2:	f000 fe69 	bl	88c78 <__malloc_unlock>
   87fa6:	2001      	movs	r0, #1
   87fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87faa:	4620      	mov	r0, r4
   87fac:	2100      	movs	r1, #0
   87fae:	f001 fb4f 	bl	89650 <_sbrk_r>
   87fb2:	68ab      	ldr	r3, [r5, #8]
   87fb4:	1ac2      	subs	r2, r0, r3
   87fb6:	2a0f      	cmp	r2, #15
   87fb8:	ddde      	ble.n	87f78 <_malloc_trim_r+0x3c>
   87fba:	4d06      	ldr	r5, [pc, #24]	; (87fd4 <_malloc_trim_r+0x98>)
   87fbc:	4904      	ldr	r1, [pc, #16]	; (87fd0 <_malloc_trim_r+0x94>)
   87fbe:	682d      	ldr	r5, [r5, #0]
   87fc0:	f042 0201 	orr.w	r2, r2, #1
   87fc4:	1b40      	subs	r0, r0, r5
   87fc6:	605a      	str	r2, [r3, #4]
   87fc8:	6008      	str	r0, [r1, #0]
   87fca:	e7d5      	b.n	87f78 <_malloc_trim_r+0x3c>
   87fcc:	20070638 	.word	0x20070638
   87fd0:	20078d90 	.word	0x20078d90
   87fd4:	20070a44 	.word	0x20070a44

00087fd8 <_free_r>:
   87fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87fdc:	460d      	mov	r5, r1
   87fde:	4606      	mov	r6, r0
   87fe0:	2900      	cmp	r1, #0
   87fe2:	d055      	beq.n	88090 <_free_r+0xb8>
   87fe4:	f000 fe46 	bl	88c74 <__malloc_lock>
   87fe8:	f855 1c04 	ldr.w	r1, [r5, #-4]
   87fec:	f8df c170 	ldr.w	ip, [pc, #368]	; 88160 <_free_r+0x188>
   87ff0:	f1a5 0408 	sub.w	r4, r5, #8
   87ff4:	f021 0301 	bic.w	r3, r1, #1
   87ff8:	18e2      	adds	r2, r4, r3
   87ffa:	f8dc 0008 	ldr.w	r0, [ip, #8]
   87ffe:	6857      	ldr	r7, [r2, #4]
   88000:	4290      	cmp	r0, r2
   88002:	f027 0703 	bic.w	r7, r7, #3
   88006:	d068      	beq.n	880da <_free_r+0x102>
   88008:	f011 0101 	ands.w	r1, r1, #1
   8800c:	6057      	str	r7, [r2, #4]
   8800e:	d032      	beq.n	88076 <_free_r+0x9e>
   88010:	2100      	movs	r1, #0
   88012:	19d0      	adds	r0, r2, r7
   88014:	6840      	ldr	r0, [r0, #4]
   88016:	07c0      	lsls	r0, r0, #31
   88018:	d406      	bmi.n	88028 <_free_r+0x50>
   8801a:	443b      	add	r3, r7
   8801c:	6890      	ldr	r0, [r2, #8]
   8801e:	2900      	cmp	r1, #0
   88020:	d04d      	beq.n	880be <_free_r+0xe6>
   88022:	68d2      	ldr	r2, [r2, #12]
   88024:	60c2      	str	r2, [r0, #12]
   88026:	6090      	str	r0, [r2, #8]
   88028:	f043 0201 	orr.w	r2, r3, #1
   8802c:	6062      	str	r2, [r4, #4]
   8802e:	50e3      	str	r3, [r4, r3]
   88030:	b9e1      	cbnz	r1, 8806c <_free_r+0x94>
   88032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   88036:	d32d      	bcc.n	88094 <_free_r+0xbc>
   88038:	0a5a      	lsrs	r2, r3, #9
   8803a:	2a04      	cmp	r2, #4
   8803c:	d869      	bhi.n	88112 <_free_r+0x13a>
   8803e:	0998      	lsrs	r0, r3, #6
   88040:	3038      	adds	r0, #56	; 0x38
   88042:	0041      	lsls	r1, r0, #1
   88044:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   88048:	f8dc 2008 	ldr.w	r2, [ip, #8]
   8804c:	4944      	ldr	r1, [pc, #272]	; (88160 <_free_r+0x188>)
   8804e:	4562      	cmp	r2, ip
   88050:	d065      	beq.n	8811e <_free_r+0x146>
   88052:	6851      	ldr	r1, [r2, #4]
   88054:	f021 0103 	bic.w	r1, r1, #3
   88058:	428b      	cmp	r3, r1
   8805a:	d202      	bcs.n	88062 <_free_r+0x8a>
   8805c:	6892      	ldr	r2, [r2, #8]
   8805e:	4594      	cmp	ip, r2
   88060:	d1f7      	bne.n	88052 <_free_r+0x7a>
   88062:	68d3      	ldr	r3, [r2, #12]
   88064:	60e3      	str	r3, [r4, #12]
   88066:	60a2      	str	r2, [r4, #8]
   88068:	609c      	str	r4, [r3, #8]
   8806a:	60d4      	str	r4, [r2, #12]
   8806c:	4630      	mov	r0, r6
   8806e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88072:	f000 be01 	b.w	88c78 <__malloc_unlock>
   88076:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8807a:	f10c 0808 	add.w	r8, ip, #8
   8807e:	1b64      	subs	r4, r4, r5
   88080:	68a0      	ldr	r0, [r4, #8]
   88082:	442b      	add	r3, r5
   88084:	4540      	cmp	r0, r8
   88086:	d042      	beq.n	8810e <_free_r+0x136>
   88088:	68e5      	ldr	r5, [r4, #12]
   8808a:	60c5      	str	r5, [r0, #12]
   8808c:	60a8      	str	r0, [r5, #8]
   8808e:	e7c0      	b.n	88012 <_free_r+0x3a>
   88090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88094:	08db      	lsrs	r3, r3, #3
   88096:	109a      	asrs	r2, r3, #2
   88098:	2001      	movs	r0, #1
   8809a:	4090      	lsls	r0, r2
   8809c:	f8dc 1004 	ldr.w	r1, [ip, #4]
   880a0:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   880a4:	689a      	ldr	r2, [r3, #8]
   880a6:	4301      	orrs	r1, r0
   880a8:	60a2      	str	r2, [r4, #8]
   880aa:	60e3      	str	r3, [r4, #12]
   880ac:	f8cc 1004 	str.w	r1, [ip, #4]
   880b0:	4630      	mov	r0, r6
   880b2:	609c      	str	r4, [r3, #8]
   880b4:	60d4      	str	r4, [r2, #12]
   880b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   880ba:	f000 bddd 	b.w	88c78 <__malloc_unlock>
   880be:	4d29      	ldr	r5, [pc, #164]	; (88164 <_free_r+0x18c>)
   880c0:	42a8      	cmp	r0, r5
   880c2:	d1ae      	bne.n	88022 <_free_r+0x4a>
   880c4:	f043 0201 	orr.w	r2, r3, #1
   880c8:	f8cc 4014 	str.w	r4, [ip, #20]
   880cc:	f8cc 4010 	str.w	r4, [ip, #16]
   880d0:	60e0      	str	r0, [r4, #12]
   880d2:	60a0      	str	r0, [r4, #8]
   880d4:	6062      	str	r2, [r4, #4]
   880d6:	50e3      	str	r3, [r4, r3]
   880d8:	e7c8      	b.n	8806c <_free_r+0x94>
   880da:	441f      	add	r7, r3
   880dc:	07cb      	lsls	r3, r1, #31
   880de:	d407      	bmi.n	880f0 <_free_r+0x118>
   880e0:	f855 1c08 	ldr.w	r1, [r5, #-8]
   880e4:	1a64      	subs	r4, r4, r1
   880e6:	68e3      	ldr	r3, [r4, #12]
   880e8:	68a2      	ldr	r2, [r4, #8]
   880ea:	440f      	add	r7, r1
   880ec:	60d3      	str	r3, [r2, #12]
   880ee:	609a      	str	r2, [r3, #8]
   880f0:	4b1d      	ldr	r3, [pc, #116]	; (88168 <_free_r+0x190>)
   880f2:	f047 0201 	orr.w	r2, r7, #1
   880f6:	681b      	ldr	r3, [r3, #0]
   880f8:	6062      	str	r2, [r4, #4]
   880fa:	429f      	cmp	r7, r3
   880fc:	f8cc 4008 	str.w	r4, [ip, #8]
   88100:	d3b4      	bcc.n	8806c <_free_r+0x94>
   88102:	4b1a      	ldr	r3, [pc, #104]	; (8816c <_free_r+0x194>)
   88104:	4630      	mov	r0, r6
   88106:	6819      	ldr	r1, [r3, #0]
   88108:	f7ff ff18 	bl	87f3c <_malloc_trim_r>
   8810c:	e7ae      	b.n	8806c <_free_r+0x94>
   8810e:	2101      	movs	r1, #1
   88110:	e77f      	b.n	88012 <_free_r+0x3a>
   88112:	2a14      	cmp	r2, #20
   88114:	d80b      	bhi.n	8812e <_free_r+0x156>
   88116:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   8811a:	0041      	lsls	r1, r0, #1
   8811c:	e792      	b.n	88044 <_free_r+0x6c>
   8811e:	1080      	asrs	r0, r0, #2
   88120:	2501      	movs	r5, #1
   88122:	4085      	lsls	r5, r0
   88124:	6848      	ldr	r0, [r1, #4]
   88126:	4613      	mov	r3, r2
   88128:	4328      	orrs	r0, r5
   8812a:	6048      	str	r0, [r1, #4]
   8812c:	e79a      	b.n	88064 <_free_r+0x8c>
   8812e:	2a54      	cmp	r2, #84	; 0x54
   88130:	d803      	bhi.n	8813a <_free_r+0x162>
   88132:	0b18      	lsrs	r0, r3, #12
   88134:	306e      	adds	r0, #110	; 0x6e
   88136:	0041      	lsls	r1, r0, #1
   88138:	e784      	b.n	88044 <_free_r+0x6c>
   8813a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8813e:	d803      	bhi.n	88148 <_free_r+0x170>
   88140:	0bd8      	lsrs	r0, r3, #15
   88142:	3077      	adds	r0, #119	; 0x77
   88144:	0041      	lsls	r1, r0, #1
   88146:	e77d      	b.n	88044 <_free_r+0x6c>
   88148:	f240 5154 	movw	r1, #1364	; 0x554
   8814c:	428a      	cmp	r2, r1
   8814e:	d803      	bhi.n	88158 <_free_r+0x180>
   88150:	0c98      	lsrs	r0, r3, #18
   88152:	307c      	adds	r0, #124	; 0x7c
   88154:	0041      	lsls	r1, r0, #1
   88156:	e775      	b.n	88044 <_free_r+0x6c>
   88158:	21fc      	movs	r1, #252	; 0xfc
   8815a:	207e      	movs	r0, #126	; 0x7e
   8815c:	e772      	b.n	88044 <_free_r+0x6c>
   8815e:	bf00      	nop
   88160:	20070638 	.word	0x20070638
   88164:	20070640 	.word	0x20070640
   88168:	20070a40 	.word	0x20070a40
   8816c:	20078d8c 	.word	0x20078d8c

00088170 <__sfvwrite_r>:
   88170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88174:	6893      	ldr	r3, [r2, #8]
   88176:	b083      	sub	sp, #12
   88178:	4616      	mov	r6, r2
   8817a:	4681      	mov	r9, r0
   8817c:	460c      	mov	r4, r1
   8817e:	b32b      	cbz	r3, 881cc <__sfvwrite_r+0x5c>
   88180:	898b      	ldrh	r3, [r1, #12]
   88182:	0719      	lsls	r1, r3, #28
   88184:	d526      	bpl.n	881d4 <__sfvwrite_r+0x64>
   88186:	6922      	ldr	r2, [r4, #16]
   88188:	b322      	cbz	r2, 881d4 <__sfvwrite_r+0x64>
   8818a:	f003 0202 	and.w	r2, r3, #2
   8818e:	b292      	uxth	r2, r2
   88190:	6835      	ldr	r5, [r6, #0]
   88192:	2a00      	cmp	r2, #0
   88194:	d02c      	beq.n	881f0 <__sfvwrite_r+0x80>
   88196:	f04f 0a00 	mov.w	sl, #0
   8819a:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 88484 <__sfvwrite_r+0x314>
   8819e:	46d0      	mov	r8, sl
   881a0:	45d8      	cmp	r8, fp
   881a2:	bf34      	ite	cc
   881a4:	4643      	movcc	r3, r8
   881a6:	465b      	movcs	r3, fp
   881a8:	4652      	mov	r2, sl
   881aa:	4648      	mov	r0, r9
   881ac:	f1b8 0f00 	cmp.w	r8, #0
   881b0:	d04f      	beq.n	88252 <__sfvwrite_r+0xe2>
   881b2:	69e1      	ldr	r1, [r4, #28]
   881b4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   881b6:	47b8      	blx	r7
   881b8:	2800      	cmp	r0, #0
   881ba:	dd56      	ble.n	8826a <__sfvwrite_r+0xfa>
   881bc:	68b3      	ldr	r3, [r6, #8]
   881be:	4482      	add	sl, r0
   881c0:	1a1b      	subs	r3, r3, r0
   881c2:	ebc0 0808 	rsb	r8, r0, r8
   881c6:	60b3      	str	r3, [r6, #8]
   881c8:	2b00      	cmp	r3, #0
   881ca:	d1e9      	bne.n	881a0 <__sfvwrite_r+0x30>
   881cc:	2000      	movs	r0, #0
   881ce:	b003      	add	sp, #12
   881d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   881d4:	4648      	mov	r0, r9
   881d6:	4621      	mov	r1, r4
   881d8:	f7fe fcd2 	bl	86b80 <__swsetup_r>
   881dc:	2800      	cmp	r0, #0
   881de:	f040 8148 	bne.w	88472 <__sfvwrite_r+0x302>
   881e2:	89a3      	ldrh	r3, [r4, #12]
   881e4:	6835      	ldr	r5, [r6, #0]
   881e6:	f003 0202 	and.w	r2, r3, #2
   881ea:	b292      	uxth	r2, r2
   881ec:	2a00      	cmp	r2, #0
   881ee:	d1d2      	bne.n	88196 <__sfvwrite_r+0x26>
   881f0:	f013 0a01 	ands.w	sl, r3, #1
   881f4:	d142      	bne.n	8827c <__sfvwrite_r+0x10c>
   881f6:	46d0      	mov	r8, sl
   881f8:	f1b8 0f00 	cmp.w	r8, #0
   881fc:	d023      	beq.n	88246 <__sfvwrite_r+0xd6>
   881fe:	059a      	lsls	r2, r3, #22
   88200:	68a7      	ldr	r7, [r4, #8]
   88202:	d576      	bpl.n	882f2 <__sfvwrite_r+0x182>
   88204:	45b8      	cmp	r8, r7
   88206:	f0c0 80a4 	bcc.w	88352 <__sfvwrite_r+0x1e2>
   8820a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8820e:	f040 80b2 	bne.w	88376 <__sfvwrite_r+0x206>
   88212:	6820      	ldr	r0, [r4, #0]
   88214:	46bb      	mov	fp, r7
   88216:	4651      	mov	r1, sl
   88218:	465a      	mov	r2, fp
   8821a:	f000 fcc5 	bl	88ba8 <memmove>
   8821e:	68a2      	ldr	r2, [r4, #8]
   88220:	6821      	ldr	r1, [r4, #0]
   88222:	1bd2      	subs	r2, r2, r7
   88224:	eb01 030b 	add.w	r3, r1, fp
   88228:	60a2      	str	r2, [r4, #8]
   8822a:	6023      	str	r3, [r4, #0]
   8822c:	4642      	mov	r2, r8
   8822e:	68b3      	ldr	r3, [r6, #8]
   88230:	4492      	add	sl, r2
   88232:	1a9b      	subs	r3, r3, r2
   88234:	ebc2 0808 	rsb	r8, r2, r8
   88238:	60b3      	str	r3, [r6, #8]
   8823a:	2b00      	cmp	r3, #0
   8823c:	d0c6      	beq.n	881cc <__sfvwrite_r+0x5c>
   8823e:	89a3      	ldrh	r3, [r4, #12]
   88240:	f1b8 0f00 	cmp.w	r8, #0
   88244:	d1db      	bne.n	881fe <__sfvwrite_r+0x8e>
   88246:	f8d5 a000 	ldr.w	sl, [r5]
   8824a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8824e:	3508      	adds	r5, #8
   88250:	e7d2      	b.n	881f8 <__sfvwrite_r+0x88>
   88252:	f8d5 a000 	ldr.w	sl, [r5]
   88256:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8825a:	3508      	adds	r5, #8
   8825c:	e7a0      	b.n	881a0 <__sfvwrite_r+0x30>
   8825e:	4648      	mov	r0, r9
   88260:	4621      	mov	r1, r4
   88262:	f7ff fd59 	bl	87d18 <_fflush_r>
   88266:	2800      	cmp	r0, #0
   88268:	d059      	beq.n	8831e <__sfvwrite_r+0x1ae>
   8826a:	89a3      	ldrh	r3, [r4, #12]
   8826c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88270:	f04f 30ff 	mov.w	r0, #4294967295
   88274:	81a3      	strh	r3, [r4, #12]
   88276:	b003      	add	sp, #12
   88278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8827c:	4692      	mov	sl, r2
   8827e:	9201      	str	r2, [sp, #4]
   88280:	4693      	mov	fp, r2
   88282:	4690      	mov	r8, r2
   88284:	f1b8 0f00 	cmp.w	r8, #0
   88288:	d02b      	beq.n	882e2 <__sfvwrite_r+0x172>
   8828a:	9f01      	ldr	r7, [sp, #4]
   8828c:	2f00      	cmp	r7, #0
   8828e:	d064      	beq.n	8835a <__sfvwrite_r+0x1ea>
   88290:	6820      	ldr	r0, [r4, #0]
   88292:	6921      	ldr	r1, [r4, #16]
   88294:	45c2      	cmp	sl, r8
   88296:	bf34      	ite	cc
   88298:	4653      	movcc	r3, sl
   8829a:	4643      	movcs	r3, r8
   8829c:	4288      	cmp	r0, r1
   8829e:	461f      	mov	r7, r3
   882a0:	f8d4 c008 	ldr.w	ip, [r4, #8]
   882a4:	6962      	ldr	r2, [r4, #20]
   882a6:	d903      	bls.n	882b0 <__sfvwrite_r+0x140>
   882a8:	4494      	add	ip, r2
   882aa:	4563      	cmp	r3, ip
   882ac:	f300 80ae 	bgt.w	8840c <__sfvwrite_r+0x29c>
   882b0:	4293      	cmp	r3, r2
   882b2:	db36      	blt.n	88322 <__sfvwrite_r+0x1b2>
   882b4:	4613      	mov	r3, r2
   882b6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   882b8:	4648      	mov	r0, r9
   882ba:	69e1      	ldr	r1, [r4, #28]
   882bc:	465a      	mov	r2, fp
   882be:	47b8      	blx	r7
   882c0:	1e07      	subs	r7, r0, #0
   882c2:	ddd2      	ble.n	8826a <__sfvwrite_r+0xfa>
   882c4:	ebba 0a07 	subs.w	sl, sl, r7
   882c8:	d03a      	beq.n	88340 <__sfvwrite_r+0x1d0>
   882ca:	68b3      	ldr	r3, [r6, #8]
   882cc:	44bb      	add	fp, r7
   882ce:	1bdb      	subs	r3, r3, r7
   882d0:	ebc7 0808 	rsb	r8, r7, r8
   882d4:	60b3      	str	r3, [r6, #8]
   882d6:	2b00      	cmp	r3, #0
   882d8:	f43f af78 	beq.w	881cc <__sfvwrite_r+0x5c>
   882dc:	f1b8 0f00 	cmp.w	r8, #0
   882e0:	d1d3      	bne.n	8828a <__sfvwrite_r+0x11a>
   882e2:	2700      	movs	r7, #0
   882e4:	f8d5 b000 	ldr.w	fp, [r5]
   882e8:	f8d5 8004 	ldr.w	r8, [r5, #4]
   882ec:	9701      	str	r7, [sp, #4]
   882ee:	3508      	adds	r5, #8
   882f0:	e7c8      	b.n	88284 <__sfvwrite_r+0x114>
   882f2:	6820      	ldr	r0, [r4, #0]
   882f4:	6923      	ldr	r3, [r4, #16]
   882f6:	4298      	cmp	r0, r3
   882f8:	d802      	bhi.n	88300 <__sfvwrite_r+0x190>
   882fa:	6963      	ldr	r3, [r4, #20]
   882fc:	4598      	cmp	r8, r3
   882fe:	d272      	bcs.n	883e6 <__sfvwrite_r+0x276>
   88300:	45b8      	cmp	r8, r7
   88302:	bf38      	it	cc
   88304:	4647      	movcc	r7, r8
   88306:	463a      	mov	r2, r7
   88308:	4651      	mov	r1, sl
   8830a:	f000 fc4d 	bl	88ba8 <memmove>
   8830e:	68a3      	ldr	r3, [r4, #8]
   88310:	6822      	ldr	r2, [r4, #0]
   88312:	1bdb      	subs	r3, r3, r7
   88314:	443a      	add	r2, r7
   88316:	60a3      	str	r3, [r4, #8]
   88318:	6022      	str	r2, [r4, #0]
   8831a:	2b00      	cmp	r3, #0
   8831c:	d09f      	beq.n	8825e <__sfvwrite_r+0xee>
   8831e:	463a      	mov	r2, r7
   88320:	e785      	b.n	8822e <__sfvwrite_r+0xbe>
   88322:	461a      	mov	r2, r3
   88324:	4659      	mov	r1, fp
   88326:	9300      	str	r3, [sp, #0]
   88328:	f000 fc3e 	bl	88ba8 <memmove>
   8832c:	9b00      	ldr	r3, [sp, #0]
   8832e:	68a1      	ldr	r1, [r4, #8]
   88330:	6822      	ldr	r2, [r4, #0]
   88332:	1ac9      	subs	r1, r1, r3
   88334:	ebba 0a07 	subs.w	sl, sl, r7
   88338:	4413      	add	r3, r2
   8833a:	60a1      	str	r1, [r4, #8]
   8833c:	6023      	str	r3, [r4, #0]
   8833e:	d1c4      	bne.n	882ca <__sfvwrite_r+0x15a>
   88340:	4648      	mov	r0, r9
   88342:	4621      	mov	r1, r4
   88344:	f7ff fce8 	bl	87d18 <_fflush_r>
   88348:	2800      	cmp	r0, #0
   8834a:	d18e      	bne.n	8826a <__sfvwrite_r+0xfa>
   8834c:	f8cd a004 	str.w	sl, [sp, #4]
   88350:	e7bb      	b.n	882ca <__sfvwrite_r+0x15a>
   88352:	6820      	ldr	r0, [r4, #0]
   88354:	4647      	mov	r7, r8
   88356:	46c3      	mov	fp, r8
   88358:	e75d      	b.n	88216 <__sfvwrite_r+0xa6>
   8835a:	4658      	mov	r0, fp
   8835c:	210a      	movs	r1, #10
   8835e:	4642      	mov	r2, r8
   88360:	f000 fbd8 	bl	88b14 <memchr>
   88364:	2800      	cmp	r0, #0
   88366:	d07f      	beq.n	88468 <__sfvwrite_r+0x2f8>
   88368:	f100 0a01 	add.w	sl, r0, #1
   8836c:	2701      	movs	r7, #1
   8836e:	ebcb 0a0a 	rsb	sl, fp, sl
   88372:	9701      	str	r7, [sp, #4]
   88374:	e78c      	b.n	88290 <__sfvwrite_r+0x120>
   88376:	6822      	ldr	r2, [r4, #0]
   88378:	6921      	ldr	r1, [r4, #16]
   8837a:	6967      	ldr	r7, [r4, #20]
   8837c:	ebc1 0c02 	rsb	ip, r1, r2
   88380:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   88384:	f10c 0201 	add.w	r2, ip, #1
   88388:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8838c:	4442      	add	r2, r8
   8838e:	107f      	asrs	r7, r7, #1
   88390:	4297      	cmp	r7, r2
   88392:	bf34      	ite	cc
   88394:	4617      	movcc	r7, r2
   88396:	463a      	movcs	r2, r7
   88398:	055b      	lsls	r3, r3, #21
   8839a:	d54f      	bpl.n	8843c <__sfvwrite_r+0x2cc>
   8839c:	4611      	mov	r1, r2
   8839e:	4648      	mov	r0, r9
   883a0:	f8cd c000 	str.w	ip, [sp]
   883a4:	f000 f91a 	bl	885dc <_malloc_r>
   883a8:	f8dd c000 	ldr.w	ip, [sp]
   883ac:	4683      	mov	fp, r0
   883ae:	2800      	cmp	r0, #0
   883b0:	d062      	beq.n	88478 <__sfvwrite_r+0x308>
   883b2:	4662      	mov	r2, ip
   883b4:	6921      	ldr	r1, [r4, #16]
   883b6:	f8cd c000 	str.w	ip, [sp]
   883ba:	f7fc f8fd 	bl	845b8 <memcpy>
   883be:	89a2      	ldrh	r2, [r4, #12]
   883c0:	f8dd c000 	ldr.w	ip, [sp]
   883c4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   883c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   883cc:	81a2      	strh	r2, [r4, #12]
   883ce:	eb0b 000c 	add.w	r0, fp, ip
   883d2:	ebcc 0207 	rsb	r2, ip, r7
   883d6:	f8c4 b010 	str.w	fp, [r4, #16]
   883da:	6167      	str	r7, [r4, #20]
   883dc:	6020      	str	r0, [r4, #0]
   883de:	60a2      	str	r2, [r4, #8]
   883e0:	4647      	mov	r7, r8
   883e2:	46c3      	mov	fp, r8
   883e4:	e717      	b.n	88216 <__sfvwrite_r+0xa6>
   883e6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   883ea:	4590      	cmp	r8, r2
   883ec:	bf38      	it	cc
   883ee:	4642      	movcc	r2, r8
   883f0:	fb92 f2f3 	sdiv	r2, r2, r3
   883f4:	fb02 f303 	mul.w	r3, r2, r3
   883f8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   883fa:	4648      	mov	r0, r9
   883fc:	69e1      	ldr	r1, [r4, #28]
   883fe:	4652      	mov	r2, sl
   88400:	47b8      	blx	r7
   88402:	2800      	cmp	r0, #0
   88404:	f77f af31 	ble.w	8826a <__sfvwrite_r+0xfa>
   88408:	4602      	mov	r2, r0
   8840a:	e710      	b.n	8822e <__sfvwrite_r+0xbe>
   8840c:	4662      	mov	r2, ip
   8840e:	4659      	mov	r1, fp
   88410:	f8cd c000 	str.w	ip, [sp]
   88414:	f000 fbc8 	bl	88ba8 <memmove>
   88418:	f8dd c000 	ldr.w	ip, [sp]
   8841c:	6823      	ldr	r3, [r4, #0]
   8841e:	4648      	mov	r0, r9
   88420:	4463      	add	r3, ip
   88422:	6023      	str	r3, [r4, #0]
   88424:	4621      	mov	r1, r4
   88426:	f8cd c000 	str.w	ip, [sp]
   8842a:	f7ff fc75 	bl	87d18 <_fflush_r>
   8842e:	f8dd c000 	ldr.w	ip, [sp]
   88432:	2800      	cmp	r0, #0
   88434:	f47f af19 	bne.w	8826a <__sfvwrite_r+0xfa>
   88438:	4667      	mov	r7, ip
   8843a:	e743      	b.n	882c4 <__sfvwrite_r+0x154>
   8843c:	4648      	mov	r0, r9
   8843e:	f8cd c000 	str.w	ip, [sp]
   88442:	f000 ff25 	bl	89290 <_realloc_r>
   88446:	f8dd c000 	ldr.w	ip, [sp]
   8844a:	4683      	mov	fp, r0
   8844c:	2800      	cmp	r0, #0
   8844e:	d1be      	bne.n	883ce <__sfvwrite_r+0x25e>
   88450:	4648      	mov	r0, r9
   88452:	6921      	ldr	r1, [r4, #16]
   88454:	f7ff fdc0 	bl	87fd8 <_free_r>
   88458:	89a3      	ldrh	r3, [r4, #12]
   8845a:	220c      	movs	r2, #12
   8845c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   88460:	b29b      	uxth	r3, r3
   88462:	f8c9 2000 	str.w	r2, [r9]
   88466:	e701      	b.n	8826c <__sfvwrite_r+0xfc>
   88468:	2701      	movs	r7, #1
   8846a:	f108 0a01 	add.w	sl, r8, #1
   8846e:	9701      	str	r7, [sp, #4]
   88470:	e70e      	b.n	88290 <__sfvwrite_r+0x120>
   88472:	f04f 30ff 	mov.w	r0, #4294967295
   88476:	e6aa      	b.n	881ce <__sfvwrite_r+0x5e>
   88478:	230c      	movs	r3, #12
   8847a:	f8c9 3000 	str.w	r3, [r9]
   8847e:	89a3      	ldrh	r3, [r4, #12]
   88480:	e6f4      	b.n	8826c <__sfvwrite_r+0xfc>
   88482:	bf00      	nop
   88484:	7ffffc00 	.word	0x7ffffc00

00088488 <_fwalk>:
   88488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8848c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   88490:	4688      	mov	r8, r1
   88492:	d019      	beq.n	884c8 <_fwalk+0x40>
   88494:	2600      	movs	r6, #0
   88496:	687d      	ldr	r5, [r7, #4]
   88498:	68bc      	ldr	r4, [r7, #8]
   8849a:	3d01      	subs	r5, #1
   8849c:	d40e      	bmi.n	884bc <_fwalk+0x34>
   8849e:	89a3      	ldrh	r3, [r4, #12]
   884a0:	3d01      	subs	r5, #1
   884a2:	2b01      	cmp	r3, #1
   884a4:	d906      	bls.n	884b4 <_fwalk+0x2c>
   884a6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   884aa:	4620      	mov	r0, r4
   884ac:	3301      	adds	r3, #1
   884ae:	d001      	beq.n	884b4 <_fwalk+0x2c>
   884b0:	47c0      	blx	r8
   884b2:	4306      	orrs	r6, r0
   884b4:	1c6b      	adds	r3, r5, #1
   884b6:	f104 0468 	add.w	r4, r4, #104	; 0x68
   884ba:	d1f0      	bne.n	8849e <_fwalk+0x16>
   884bc:	683f      	ldr	r7, [r7, #0]
   884be:	2f00      	cmp	r7, #0
   884c0:	d1e9      	bne.n	88496 <_fwalk+0xe>
   884c2:	4630      	mov	r0, r6
   884c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   884c8:	463e      	mov	r6, r7
   884ca:	4630      	mov	r0, r6
   884cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000884d0 <__locale_charset>:
   884d0:	4800      	ldr	r0, [pc, #0]	; (884d4 <__locale_charset+0x4>)
   884d2:	4770      	bx	lr
   884d4:	20070614 	.word	0x20070614

000884d8 <__locale_mb_cur_max>:
   884d8:	4b01      	ldr	r3, [pc, #4]	; (884e0 <__locale_mb_cur_max+0x8>)
   884da:	6818      	ldr	r0, [r3, #0]
   884dc:	4770      	bx	lr
   884de:	bf00      	nop
   884e0:	20070634 	.word	0x20070634

000884e4 <_localeconv_r>:
   884e4:	4800      	ldr	r0, [pc, #0]	; (884e8 <_localeconv_r+0x4>)
   884e6:	4770      	bx	lr
   884e8:	200705dc 	.word	0x200705dc

000884ec <__smakebuf_r>:
   884ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   884ee:	898b      	ldrh	r3, [r1, #12]
   884f0:	b091      	sub	sp, #68	; 0x44
   884f2:	b29a      	uxth	r2, r3
   884f4:	0796      	lsls	r6, r2, #30
   884f6:	460c      	mov	r4, r1
   884f8:	4605      	mov	r5, r0
   884fa:	d437      	bmi.n	8856c <__smakebuf_r+0x80>
   884fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   88500:	2900      	cmp	r1, #0
   88502:	db17      	blt.n	88534 <__smakebuf_r+0x48>
   88504:	aa01      	add	r2, sp, #4
   88506:	f001 faf3 	bl	89af0 <_fstat_r>
   8850a:	2800      	cmp	r0, #0
   8850c:	db10      	blt.n	88530 <__smakebuf_r+0x44>
   8850e:	9b02      	ldr	r3, [sp, #8]
   88510:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   88514:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   88518:	424f      	negs	r7, r1
   8851a:	414f      	adcs	r7, r1
   8851c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   88520:	d02c      	beq.n	8857c <__smakebuf_r+0x90>
   88522:	89a3      	ldrh	r3, [r4, #12]
   88524:	f44f 6680 	mov.w	r6, #1024	; 0x400
   88528:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8852c:	81a3      	strh	r3, [r4, #12]
   8852e:	e00b      	b.n	88548 <__smakebuf_r+0x5c>
   88530:	89a3      	ldrh	r3, [r4, #12]
   88532:	b29a      	uxth	r2, r3
   88534:	f012 0f80 	tst.w	r2, #128	; 0x80
   88538:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8853c:	81a3      	strh	r3, [r4, #12]
   8853e:	bf14      	ite	ne
   88540:	2640      	movne	r6, #64	; 0x40
   88542:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   88546:	2700      	movs	r7, #0
   88548:	4628      	mov	r0, r5
   8854a:	4631      	mov	r1, r6
   8854c:	f000 f846 	bl	885dc <_malloc_r>
   88550:	89a3      	ldrh	r3, [r4, #12]
   88552:	2800      	cmp	r0, #0
   88554:	d029      	beq.n	885aa <__smakebuf_r+0xbe>
   88556:	4a1b      	ldr	r2, [pc, #108]	; (885c4 <__smakebuf_r+0xd8>)
   88558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8855c:	63ea      	str	r2, [r5, #60]	; 0x3c
   8855e:	81a3      	strh	r3, [r4, #12]
   88560:	6020      	str	r0, [r4, #0]
   88562:	6120      	str	r0, [r4, #16]
   88564:	6166      	str	r6, [r4, #20]
   88566:	b9a7      	cbnz	r7, 88592 <__smakebuf_r+0xa6>
   88568:	b011      	add	sp, #68	; 0x44
   8856a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8856c:	f101 0343 	add.w	r3, r1, #67	; 0x43
   88570:	2201      	movs	r2, #1
   88572:	600b      	str	r3, [r1, #0]
   88574:	610b      	str	r3, [r1, #16]
   88576:	614a      	str	r2, [r1, #20]
   88578:	b011      	add	sp, #68	; 0x44
   8857a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8857c:	4a12      	ldr	r2, [pc, #72]	; (885c8 <__smakebuf_r+0xdc>)
   8857e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   88580:	4293      	cmp	r3, r2
   88582:	d1ce      	bne.n	88522 <__smakebuf_r+0x36>
   88584:	89a3      	ldrh	r3, [r4, #12]
   88586:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8858a:	4333      	orrs	r3, r6
   8858c:	81a3      	strh	r3, [r4, #12]
   8858e:	64e6      	str	r6, [r4, #76]	; 0x4c
   88590:	e7da      	b.n	88548 <__smakebuf_r+0x5c>
   88592:	4628      	mov	r0, r5
   88594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   88598:	f001 fabe 	bl	89b18 <_isatty_r>
   8859c:	2800      	cmp	r0, #0
   8859e:	d0e3      	beq.n	88568 <__smakebuf_r+0x7c>
   885a0:	89a3      	ldrh	r3, [r4, #12]
   885a2:	f043 0301 	orr.w	r3, r3, #1
   885a6:	81a3      	strh	r3, [r4, #12]
   885a8:	e7de      	b.n	88568 <__smakebuf_r+0x7c>
   885aa:	059a      	lsls	r2, r3, #22
   885ac:	d4dc      	bmi.n	88568 <__smakebuf_r+0x7c>
   885ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
   885b2:	f043 0302 	orr.w	r3, r3, #2
   885b6:	2101      	movs	r1, #1
   885b8:	81a3      	strh	r3, [r4, #12]
   885ba:	6022      	str	r2, [r4, #0]
   885bc:	6122      	str	r2, [r4, #16]
   885be:	6161      	str	r1, [r4, #20]
   885c0:	e7d2      	b.n	88568 <__smakebuf_r+0x7c>
   885c2:	bf00      	nop
   885c4:	00087d45 	.word	0x00087d45
   885c8:	000896d1 	.word	0x000896d1

000885cc <malloc>:
   885cc:	4b02      	ldr	r3, [pc, #8]	; (885d8 <malloc+0xc>)
   885ce:	4601      	mov	r1, r0
   885d0:	6818      	ldr	r0, [r3, #0]
   885d2:	f000 b803 	b.w	885dc <_malloc_r>
   885d6:	bf00      	nop
   885d8:	200705d8 	.word	0x200705d8

000885dc <_malloc_r>:
   885dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   885e0:	f101 050b 	add.w	r5, r1, #11
   885e4:	2d16      	cmp	r5, #22
   885e6:	b083      	sub	sp, #12
   885e8:	4606      	mov	r6, r0
   885ea:	d927      	bls.n	8863c <_malloc_r+0x60>
   885ec:	f035 0507 	bics.w	r5, r5, #7
   885f0:	d427      	bmi.n	88642 <_malloc_r+0x66>
   885f2:	42a9      	cmp	r1, r5
   885f4:	d825      	bhi.n	88642 <_malloc_r+0x66>
   885f6:	4630      	mov	r0, r6
   885f8:	f000 fb3c 	bl	88c74 <__malloc_lock>
   885fc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   88600:	d226      	bcs.n	88650 <_malloc_r+0x74>
   88602:	4fc1      	ldr	r7, [pc, #772]	; (88908 <_malloc_r+0x32c>)
   88604:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   88608:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   8860c:	68dc      	ldr	r4, [r3, #12]
   8860e:	429c      	cmp	r4, r3
   88610:	f000 81d2 	beq.w	889b8 <_malloc_r+0x3dc>
   88614:	6863      	ldr	r3, [r4, #4]
   88616:	68e2      	ldr	r2, [r4, #12]
   88618:	f023 0303 	bic.w	r3, r3, #3
   8861c:	4423      	add	r3, r4
   8861e:	6858      	ldr	r0, [r3, #4]
   88620:	68a1      	ldr	r1, [r4, #8]
   88622:	f040 0501 	orr.w	r5, r0, #1
   88626:	60ca      	str	r2, [r1, #12]
   88628:	4630      	mov	r0, r6
   8862a:	6091      	str	r1, [r2, #8]
   8862c:	605d      	str	r5, [r3, #4]
   8862e:	f000 fb23 	bl	88c78 <__malloc_unlock>
   88632:	3408      	adds	r4, #8
   88634:	4620      	mov	r0, r4
   88636:	b003      	add	sp, #12
   88638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8863c:	2510      	movs	r5, #16
   8863e:	42a9      	cmp	r1, r5
   88640:	d9d9      	bls.n	885f6 <_malloc_r+0x1a>
   88642:	2400      	movs	r4, #0
   88644:	230c      	movs	r3, #12
   88646:	4620      	mov	r0, r4
   88648:	6033      	str	r3, [r6, #0]
   8864a:	b003      	add	sp, #12
   8864c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88650:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   88654:	f000 8089 	beq.w	8876a <_malloc_r+0x18e>
   88658:	f1bc 0f04 	cmp.w	ip, #4
   8865c:	f200 8160 	bhi.w	88920 <_malloc_r+0x344>
   88660:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   88664:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   88668:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8866c:	4fa6      	ldr	r7, [pc, #664]	; (88908 <_malloc_r+0x32c>)
   8866e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   88672:	68cc      	ldr	r4, [r1, #12]
   88674:	42a1      	cmp	r1, r4
   88676:	d105      	bne.n	88684 <_malloc_r+0xa8>
   88678:	e00c      	b.n	88694 <_malloc_r+0xb8>
   8867a:	2b00      	cmp	r3, #0
   8867c:	da79      	bge.n	88772 <_malloc_r+0x196>
   8867e:	68e4      	ldr	r4, [r4, #12]
   88680:	42a1      	cmp	r1, r4
   88682:	d007      	beq.n	88694 <_malloc_r+0xb8>
   88684:	6862      	ldr	r2, [r4, #4]
   88686:	f022 0203 	bic.w	r2, r2, #3
   8868a:	1b53      	subs	r3, r2, r5
   8868c:	2b0f      	cmp	r3, #15
   8868e:	ddf4      	ble.n	8867a <_malloc_r+0x9e>
   88690:	f10c 3cff 	add.w	ip, ip, #4294967295
   88694:	f10c 0c01 	add.w	ip, ip, #1
   88698:	4b9b      	ldr	r3, [pc, #620]	; (88908 <_malloc_r+0x32c>)
   8869a:	693c      	ldr	r4, [r7, #16]
   8869c:	f103 0e08 	add.w	lr, r3, #8
   886a0:	4574      	cmp	r4, lr
   886a2:	f000 817e 	beq.w	889a2 <_malloc_r+0x3c6>
   886a6:	6861      	ldr	r1, [r4, #4]
   886a8:	f021 0103 	bic.w	r1, r1, #3
   886ac:	1b4a      	subs	r2, r1, r5
   886ae:	2a0f      	cmp	r2, #15
   886b0:	f300 8164 	bgt.w	8897c <_malloc_r+0x3a0>
   886b4:	2a00      	cmp	r2, #0
   886b6:	f8c3 e014 	str.w	lr, [r3, #20]
   886ba:	f8c3 e010 	str.w	lr, [r3, #16]
   886be:	da69      	bge.n	88794 <_malloc_r+0x1b8>
   886c0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   886c4:	f080 813a 	bcs.w	8893c <_malloc_r+0x360>
   886c8:	08c9      	lsrs	r1, r1, #3
   886ca:	108a      	asrs	r2, r1, #2
   886cc:	f04f 0801 	mov.w	r8, #1
   886d0:	fa08 f802 	lsl.w	r8, r8, r2
   886d4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   886d8:	685a      	ldr	r2, [r3, #4]
   886da:	6888      	ldr	r0, [r1, #8]
   886dc:	ea48 0202 	orr.w	r2, r8, r2
   886e0:	60a0      	str	r0, [r4, #8]
   886e2:	60e1      	str	r1, [r4, #12]
   886e4:	605a      	str	r2, [r3, #4]
   886e6:	608c      	str	r4, [r1, #8]
   886e8:	60c4      	str	r4, [r0, #12]
   886ea:	ea4f 03ac 	mov.w	r3, ip, asr #2
   886ee:	2001      	movs	r0, #1
   886f0:	4098      	lsls	r0, r3
   886f2:	4290      	cmp	r0, r2
   886f4:	d85b      	bhi.n	887ae <_malloc_r+0x1d2>
   886f6:	4202      	tst	r2, r0
   886f8:	d106      	bne.n	88708 <_malloc_r+0x12c>
   886fa:	f02c 0c03 	bic.w	ip, ip, #3
   886fe:	0040      	lsls	r0, r0, #1
   88700:	4202      	tst	r2, r0
   88702:	f10c 0c04 	add.w	ip, ip, #4
   88706:	d0fa      	beq.n	886fe <_malloc_r+0x122>
   88708:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   8870c:	4644      	mov	r4, r8
   8870e:	46e1      	mov	r9, ip
   88710:	68e3      	ldr	r3, [r4, #12]
   88712:	429c      	cmp	r4, r3
   88714:	d107      	bne.n	88726 <_malloc_r+0x14a>
   88716:	e146      	b.n	889a6 <_malloc_r+0x3ca>
   88718:	2a00      	cmp	r2, #0
   8871a:	f280 8157 	bge.w	889cc <_malloc_r+0x3f0>
   8871e:	68db      	ldr	r3, [r3, #12]
   88720:	429c      	cmp	r4, r3
   88722:	f000 8140 	beq.w	889a6 <_malloc_r+0x3ca>
   88726:	6859      	ldr	r1, [r3, #4]
   88728:	f021 0103 	bic.w	r1, r1, #3
   8872c:	1b4a      	subs	r2, r1, r5
   8872e:	2a0f      	cmp	r2, #15
   88730:	ddf2      	ble.n	88718 <_malloc_r+0x13c>
   88732:	461c      	mov	r4, r3
   88734:	f854 cf08 	ldr.w	ip, [r4, #8]!
   88738:	68d9      	ldr	r1, [r3, #12]
   8873a:	f045 0901 	orr.w	r9, r5, #1
   8873e:	f042 0801 	orr.w	r8, r2, #1
   88742:	441d      	add	r5, r3
   88744:	f8c3 9004 	str.w	r9, [r3, #4]
   88748:	4630      	mov	r0, r6
   8874a:	f8cc 100c 	str.w	r1, [ip, #12]
   8874e:	f8c1 c008 	str.w	ip, [r1, #8]
   88752:	617d      	str	r5, [r7, #20]
   88754:	613d      	str	r5, [r7, #16]
   88756:	f8c5 e00c 	str.w	lr, [r5, #12]
   8875a:	f8c5 e008 	str.w	lr, [r5, #8]
   8875e:	f8c5 8004 	str.w	r8, [r5, #4]
   88762:	50aa      	str	r2, [r5, r2]
   88764:	f000 fa88 	bl	88c78 <__malloc_unlock>
   88768:	e764      	b.n	88634 <_malloc_r+0x58>
   8876a:	217e      	movs	r1, #126	; 0x7e
   8876c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   88770:	e77c      	b.n	8866c <_malloc_r+0x90>
   88772:	4422      	add	r2, r4
   88774:	6850      	ldr	r0, [r2, #4]
   88776:	68e3      	ldr	r3, [r4, #12]
   88778:	68a1      	ldr	r1, [r4, #8]
   8877a:	f040 0501 	orr.w	r5, r0, #1
   8877e:	60cb      	str	r3, [r1, #12]
   88780:	4630      	mov	r0, r6
   88782:	6099      	str	r1, [r3, #8]
   88784:	6055      	str	r5, [r2, #4]
   88786:	f000 fa77 	bl	88c78 <__malloc_unlock>
   8878a:	3408      	adds	r4, #8
   8878c:	4620      	mov	r0, r4
   8878e:	b003      	add	sp, #12
   88790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88794:	4421      	add	r1, r4
   88796:	684b      	ldr	r3, [r1, #4]
   88798:	4630      	mov	r0, r6
   8879a:	f043 0301 	orr.w	r3, r3, #1
   8879e:	604b      	str	r3, [r1, #4]
   887a0:	f000 fa6a 	bl	88c78 <__malloc_unlock>
   887a4:	3408      	adds	r4, #8
   887a6:	4620      	mov	r0, r4
   887a8:	b003      	add	sp, #12
   887aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   887ae:	68bc      	ldr	r4, [r7, #8]
   887b0:	6863      	ldr	r3, [r4, #4]
   887b2:	f023 0903 	bic.w	r9, r3, #3
   887b6:	45a9      	cmp	r9, r5
   887b8:	d304      	bcc.n	887c4 <_malloc_r+0x1e8>
   887ba:	ebc5 0309 	rsb	r3, r5, r9
   887be:	2b0f      	cmp	r3, #15
   887c0:	f300 8091 	bgt.w	888e6 <_malloc_r+0x30a>
   887c4:	4b51      	ldr	r3, [pc, #324]	; (8890c <_malloc_r+0x330>)
   887c6:	4a52      	ldr	r2, [pc, #328]	; (88910 <_malloc_r+0x334>)
   887c8:	6819      	ldr	r1, [r3, #0]
   887ca:	6813      	ldr	r3, [r2, #0]
   887cc:	eb05 0a01 	add.w	sl, r5, r1
   887d0:	3301      	adds	r3, #1
   887d2:	eb04 0b09 	add.w	fp, r4, r9
   887d6:	f000 8161 	beq.w	88a9c <_malloc_r+0x4c0>
   887da:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   887de:	f10a 0a0f 	add.w	sl, sl, #15
   887e2:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   887e6:	f02a 0a0f 	bic.w	sl, sl, #15
   887ea:	4630      	mov	r0, r6
   887ec:	4651      	mov	r1, sl
   887ee:	9201      	str	r2, [sp, #4]
   887f0:	f000 ff2e 	bl	89650 <_sbrk_r>
   887f4:	f1b0 3fff 	cmp.w	r0, #4294967295
   887f8:	4680      	mov	r8, r0
   887fa:	9a01      	ldr	r2, [sp, #4]
   887fc:	f000 8101 	beq.w	88a02 <_malloc_r+0x426>
   88800:	4583      	cmp	fp, r0
   88802:	f200 80fb 	bhi.w	889fc <_malloc_r+0x420>
   88806:	f8df c114 	ldr.w	ip, [pc, #276]	; 8891c <_malloc_r+0x340>
   8880a:	45c3      	cmp	fp, r8
   8880c:	f8dc 3000 	ldr.w	r3, [ip]
   88810:	4453      	add	r3, sl
   88812:	f8cc 3000 	str.w	r3, [ip]
   88816:	f000 814a 	beq.w	88aae <_malloc_r+0x4d2>
   8881a:	6812      	ldr	r2, [r2, #0]
   8881c:	493c      	ldr	r1, [pc, #240]	; (88910 <_malloc_r+0x334>)
   8881e:	3201      	adds	r2, #1
   88820:	bf1b      	ittet	ne
   88822:	ebcb 0b08 	rsbne	fp, fp, r8
   88826:	445b      	addne	r3, fp
   88828:	f8c1 8000 	streq.w	r8, [r1]
   8882c:	f8cc 3000 	strne.w	r3, [ip]
   88830:	f018 0307 	ands.w	r3, r8, #7
   88834:	f000 8114 	beq.w	88a60 <_malloc_r+0x484>
   88838:	f1c3 0208 	rsb	r2, r3, #8
   8883c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   88840:	4490      	add	r8, r2
   88842:	3308      	adds	r3, #8
   88844:	44c2      	add	sl, r8
   88846:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   8884a:	ebca 0a03 	rsb	sl, sl, r3
   8884e:	4651      	mov	r1, sl
   88850:	4630      	mov	r0, r6
   88852:	f8cd c004 	str.w	ip, [sp, #4]
   88856:	f000 fefb 	bl	89650 <_sbrk_r>
   8885a:	1c43      	adds	r3, r0, #1
   8885c:	f8dd c004 	ldr.w	ip, [sp, #4]
   88860:	f000 8135 	beq.w	88ace <_malloc_r+0x4f2>
   88864:	ebc8 0200 	rsb	r2, r8, r0
   88868:	4452      	add	r2, sl
   8886a:	f042 0201 	orr.w	r2, r2, #1
   8886e:	f8dc 3000 	ldr.w	r3, [ip]
   88872:	42bc      	cmp	r4, r7
   88874:	4453      	add	r3, sl
   88876:	f8c7 8008 	str.w	r8, [r7, #8]
   8887a:	f8cc 3000 	str.w	r3, [ip]
   8887e:	f8c8 2004 	str.w	r2, [r8, #4]
   88882:	f8df a098 	ldr.w	sl, [pc, #152]	; 8891c <_malloc_r+0x340>
   88886:	d015      	beq.n	888b4 <_malloc_r+0x2d8>
   88888:	f1b9 0f0f 	cmp.w	r9, #15
   8888c:	f240 80eb 	bls.w	88a66 <_malloc_r+0x48a>
   88890:	6861      	ldr	r1, [r4, #4]
   88892:	f1a9 020c 	sub.w	r2, r9, #12
   88896:	f022 0207 	bic.w	r2, r2, #7
   8889a:	f001 0101 	and.w	r1, r1, #1
   8889e:	ea42 0e01 	orr.w	lr, r2, r1
   888a2:	2005      	movs	r0, #5
   888a4:	18a1      	adds	r1, r4, r2
   888a6:	2a0f      	cmp	r2, #15
   888a8:	f8c4 e004 	str.w	lr, [r4, #4]
   888ac:	6048      	str	r0, [r1, #4]
   888ae:	6088      	str	r0, [r1, #8]
   888b0:	f200 8111 	bhi.w	88ad6 <_malloc_r+0x4fa>
   888b4:	4a17      	ldr	r2, [pc, #92]	; (88914 <_malloc_r+0x338>)
   888b6:	68bc      	ldr	r4, [r7, #8]
   888b8:	6811      	ldr	r1, [r2, #0]
   888ba:	428b      	cmp	r3, r1
   888bc:	bf88      	it	hi
   888be:	6013      	strhi	r3, [r2, #0]
   888c0:	4a15      	ldr	r2, [pc, #84]	; (88918 <_malloc_r+0x33c>)
   888c2:	6811      	ldr	r1, [r2, #0]
   888c4:	428b      	cmp	r3, r1
   888c6:	bf88      	it	hi
   888c8:	6013      	strhi	r3, [r2, #0]
   888ca:	6862      	ldr	r2, [r4, #4]
   888cc:	f022 0203 	bic.w	r2, r2, #3
   888d0:	4295      	cmp	r5, r2
   888d2:	ebc5 0302 	rsb	r3, r5, r2
   888d6:	d801      	bhi.n	888dc <_malloc_r+0x300>
   888d8:	2b0f      	cmp	r3, #15
   888da:	dc04      	bgt.n	888e6 <_malloc_r+0x30a>
   888dc:	4630      	mov	r0, r6
   888de:	f000 f9cb 	bl	88c78 <__malloc_unlock>
   888e2:	2400      	movs	r4, #0
   888e4:	e6a6      	b.n	88634 <_malloc_r+0x58>
   888e6:	f045 0201 	orr.w	r2, r5, #1
   888ea:	f043 0301 	orr.w	r3, r3, #1
   888ee:	4425      	add	r5, r4
   888f0:	6062      	str	r2, [r4, #4]
   888f2:	4630      	mov	r0, r6
   888f4:	60bd      	str	r5, [r7, #8]
   888f6:	606b      	str	r3, [r5, #4]
   888f8:	f000 f9be 	bl	88c78 <__malloc_unlock>
   888fc:	3408      	adds	r4, #8
   888fe:	4620      	mov	r0, r4
   88900:	b003      	add	sp, #12
   88902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88906:	bf00      	nop
   88908:	20070638 	.word	0x20070638
   8890c:	20078d8c 	.word	0x20078d8c
   88910:	20070a44 	.word	0x20070a44
   88914:	20078d88 	.word	0x20078d88
   88918:	20078d84 	.word	0x20078d84
   8891c:	20078d90 	.word	0x20078d90
   88920:	f1bc 0f14 	cmp.w	ip, #20
   88924:	d961      	bls.n	889ea <_malloc_r+0x40e>
   88926:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   8892a:	f200 808f 	bhi.w	88a4c <_malloc_r+0x470>
   8892e:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   88932:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   88936:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8893a:	e697      	b.n	8866c <_malloc_r+0x90>
   8893c:	0a4b      	lsrs	r3, r1, #9
   8893e:	2b04      	cmp	r3, #4
   88940:	d958      	bls.n	889f4 <_malloc_r+0x418>
   88942:	2b14      	cmp	r3, #20
   88944:	f200 80ad 	bhi.w	88aa2 <_malloc_r+0x4c6>
   88948:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8894c:	0050      	lsls	r0, r2, #1
   8894e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   88952:	6883      	ldr	r3, [r0, #8]
   88954:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 88b10 <_malloc_r+0x534>
   88958:	4283      	cmp	r3, r0
   8895a:	f000 808a 	beq.w	88a72 <_malloc_r+0x496>
   8895e:	685a      	ldr	r2, [r3, #4]
   88960:	f022 0203 	bic.w	r2, r2, #3
   88964:	4291      	cmp	r1, r2
   88966:	d202      	bcs.n	8896e <_malloc_r+0x392>
   88968:	689b      	ldr	r3, [r3, #8]
   8896a:	4298      	cmp	r0, r3
   8896c:	d1f7      	bne.n	8895e <_malloc_r+0x382>
   8896e:	68d9      	ldr	r1, [r3, #12]
   88970:	687a      	ldr	r2, [r7, #4]
   88972:	60e1      	str	r1, [r4, #12]
   88974:	60a3      	str	r3, [r4, #8]
   88976:	608c      	str	r4, [r1, #8]
   88978:	60dc      	str	r4, [r3, #12]
   8897a:	e6b6      	b.n	886ea <_malloc_r+0x10e>
   8897c:	f045 0701 	orr.w	r7, r5, #1
   88980:	f042 0101 	orr.w	r1, r2, #1
   88984:	4425      	add	r5, r4
   88986:	6067      	str	r7, [r4, #4]
   88988:	4630      	mov	r0, r6
   8898a:	615d      	str	r5, [r3, #20]
   8898c:	611d      	str	r5, [r3, #16]
   8898e:	f8c5 e00c 	str.w	lr, [r5, #12]
   88992:	f8c5 e008 	str.w	lr, [r5, #8]
   88996:	6069      	str	r1, [r5, #4]
   88998:	50aa      	str	r2, [r5, r2]
   8899a:	3408      	adds	r4, #8
   8899c:	f000 f96c 	bl	88c78 <__malloc_unlock>
   889a0:	e648      	b.n	88634 <_malloc_r+0x58>
   889a2:	685a      	ldr	r2, [r3, #4]
   889a4:	e6a1      	b.n	886ea <_malloc_r+0x10e>
   889a6:	f109 0901 	add.w	r9, r9, #1
   889aa:	f019 0f03 	tst.w	r9, #3
   889ae:	f104 0408 	add.w	r4, r4, #8
   889b2:	f47f aead 	bne.w	88710 <_malloc_r+0x134>
   889b6:	e02d      	b.n	88a14 <_malloc_r+0x438>
   889b8:	f104 0308 	add.w	r3, r4, #8
   889bc:	6964      	ldr	r4, [r4, #20]
   889be:	42a3      	cmp	r3, r4
   889c0:	bf08      	it	eq
   889c2:	f10c 0c02 	addeq.w	ip, ip, #2
   889c6:	f43f ae67 	beq.w	88698 <_malloc_r+0xbc>
   889ca:	e623      	b.n	88614 <_malloc_r+0x38>
   889cc:	4419      	add	r1, r3
   889ce:	6848      	ldr	r0, [r1, #4]
   889d0:	461c      	mov	r4, r3
   889d2:	f854 2f08 	ldr.w	r2, [r4, #8]!
   889d6:	68db      	ldr	r3, [r3, #12]
   889d8:	f040 0501 	orr.w	r5, r0, #1
   889dc:	604d      	str	r5, [r1, #4]
   889de:	4630      	mov	r0, r6
   889e0:	60d3      	str	r3, [r2, #12]
   889e2:	609a      	str	r2, [r3, #8]
   889e4:	f000 f948 	bl	88c78 <__malloc_unlock>
   889e8:	e624      	b.n	88634 <_malloc_r+0x58>
   889ea:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   889ee:	ea4f 014c 	mov.w	r1, ip, lsl #1
   889f2:	e63b      	b.n	8866c <_malloc_r+0x90>
   889f4:	098a      	lsrs	r2, r1, #6
   889f6:	3238      	adds	r2, #56	; 0x38
   889f8:	0050      	lsls	r0, r2, #1
   889fa:	e7a8      	b.n	8894e <_malloc_r+0x372>
   889fc:	42bc      	cmp	r4, r7
   889fe:	f43f af02 	beq.w	88806 <_malloc_r+0x22a>
   88a02:	68bc      	ldr	r4, [r7, #8]
   88a04:	6862      	ldr	r2, [r4, #4]
   88a06:	f022 0203 	bic.w	r2, r2, #3
   88a0a:	e761      	b.n	888d0 <_malloc_r+0x2f4>
   88a0c:	f8d8 8000 	ldr.w	r8, [r8]
   88a10:	4598      	cmp	r8, r3
   88a12:	d17a      	bne.n	88b0a <_malloc_r+0x52e>
   88a14:	f01c 0f03 	tst.w	ip, #3
   88a18:	f1a8 0308 	sub.w	r3, r8, #8
   88a1c:	f10c 3cff 	add.w	ip, ip, #4294967295
   88a20:	d1f4      	bne.n	88a0c <_malloc_r+0x430>
   88a22:	687b      	ldr	r3, [r7, #4]
   88a24:	ea23 0300 	bic.w	r3, r3, r0
   88a28:	607b      	str	r3, [r7, #4]
   88a2a:	0040      	lsls	r0, r0, #1
   88a2c:	4298      	cmp	r0, r3
   88a2e:	f63f aebe 	bhi.w	887ae <_malloc_r+0x1d2>
   88a32:	2800      	cmp	r0, #0
   88a34:	f43f aebb 	beq.w	887ae <_malloc_r+0x1d2>
   88a38:	4203      	tst	r3, r0
   88a3a:	46cc      	mov	ip, r9
   88a3c:	f47f ae64 	bne.w	88708 <_malloc_r+0x12c>
   88a40:	0040      	lsls	r0, r0, #1
   88a42:	4203      	tst	r3, r0
   88a44:	f10c 0c04 	add.w	ip, ip, #4
   88a48:	d0fa      	beq.n	88a40 <_malloc_r+0x464>
   88a4a:	e65d      	b.n	88708 <_malloc_r+0x12c>
   88a4c:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   88a50:	d819      	bhi.n	88a86 <_malloc_r+0x4aa>
   88a52:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   88a56:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   88a5a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   88a5e:	e605      	b.n	8866c <_malloc_r+0x90>
   88a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   88a64:	e6ee      	b.n	88844 <_malloc_r+0x268>
   88a66:	2301      	movs	r3, #1
   88a68:	f8c8 3004 	str.w	r3, [r8, #4]
   88a6c:	4644      	mov	r4, r8
   88a6e:	2200      	movs	r2, #0
   88a70:	e72e      	b.n	888d0 <_malloc_r+0x2f4>
   88a72:	1092      	asrs	r2, r2, #2
   88a74:	2001      	movs	r0, #1
   88a76:	4090      	lsls	r0, r2
   88a78:	f8d8 2004 	ldr.w	r2, [r8, #4]
   88a7c:	4619      	mov	r1, r3
   88a7e:	4302      	orrs	r2, r0
   88a80:	f8c8 2004 	str.w	r2, [r8, #4]
   88a84:	e775      	b.n	88972 <_malloc_r+0x396>
   88a86:	f240 5354 	movw	r3, #1364	; 0x554
   88a8a:	459c      	cmp	ip, r3
   88a8c:	d81b      	bhi.n	88ac6 <_malloc_r+0x4ea>
   88a8e:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   88a92:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   88a96:	ea4f 014c 	mov.w	r1, ip, lsl #1
   88a9a:	e5e7      	b.n	8866c <_malloc_r+0x90>
   88a9c:	f10a 0a10 	add.w	sl, sl, #16
   88aa0:	e6a3      	b.n	887ea <_malloc_r+0x20e>
   88aa2:	2b54      	cmp	r3, #84	; 0x54
   88aa4:	d81f      	bhi.n	88ae6 <_malloc_r+0x50a>
   88aa6:	0b0a      	lsrs	r2, r1, #12
   88aa8:	326e      	adds	r2, #110	; 0x6e
   88aaa:	0050      	lsls	r0, r2, #1
   88aac:	e74f      	b.n	8894e <_malloc_r+0x372>
   88aae:	f3cb 010b 	ubfx	r1, fp, #0, #12
   88ab2:	2900      	cmp	r1, #0
   88ab4:	f47f aeb1 	bne.w	8881a <_malloc_r+0x23e>
   88ab8:	eb0a 0109 	add.w	r1, sl, r9
   88abc:	68ba      	ldr	r2, [r7, #8]
   88abe:	f041 0101 	orr.w	r1, r1, #1
   88ac2:	6051      	str	r1, [r2, #4]
   88ac4:	e6f6      	b.n	888b4 <_malloc_r+0x2d8>
   88ac6:	21fc      	movs	r1, #252	; 0xfc
   88ac8:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   88acc:	e5ce      	b.n	8866c <_malloc_r+0x90>
   88ace:	2201      	movs	r2, #1
   88ad0:	f04f 0a00 	mov.w	sl, #0
   88ad4:	e6cb      	b.n	8886e <_malloc_r+0x292>
   88ad6:	f104 0108 	add.w	r1, r4, #8
   88ada:	4630      	mov	r0, r6
   88adc:	f7ff fa7c 	bl	87fd8 <_free_r>
   88ae0:	f8da 3000 	ldr.w	r3, [sl]
   88ae4:	e6e6      	b.n	888b4 <_malloc_r+0x2d8>
   88ae6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   88aea:	d803      	bhi.n	88af4 <_malloc_r+0x518>
   88aec:	0bca      	lsrs	r2, r1, #15
   88aee:	3277      	adds	r2, #119	; 0x77
   88af0:	0050      	lsls	r0, r2, #1
   88af2:	e72c      	b.n	8894e <_malloc_r+0x372>
   88af4:	f240 5254 	movw	r2, #1364	; 0x554
   88af8:	4293      	cmp	r3, r2
   88afa:	d803      	bhi.n	88b04 <_malloc_r+0x528>
   88afc:	0c8a      	lsrs	r2, r1, #18
   88afe:	327c      	adds	r2, #124	; 0x7c
   88b00:	0050      	lsls	r0, r2, #1
   88b02:	e724      	b.n	8894e <_malloc_r+0x372>
   88b04:	20fc      	movs	r0, #252	; 0xfc
   88b06:	227e      	movs	r2, #126	; 0x7e
   88b08:	e721      	b.n	8894e <_malloc_r+0x372>
   88b0a:	687b      	ldr	r3, [r7, #4]
   88b0c:	e78d      	b.n	88a2a <_malloc_r+0x44e>
   88b0e:	bf00      	nop
   88b10:	20070638 	.word	0x20070638

00088b14 <memchr>:
   88b14:	0783      	lsls	r3, r0, #30
   88b16:	b470      	push	{r4, r5, r6}
   88b18:	b2c9      	uxtb	r1, r1
   88b1a:	d040      	beq.n	88b9e <memchr+0x8a>
   88b1c:	1e54      	subs	r4, r2, #1
   88b1e:	b32a      	cbz	r2, 88b6c <memchr+0x58>
   88b20:	7803      	ldrb	r3, [r0, #0]
   88b22:	428b      	cmp	r3, r1
   88b24:	d023      	beq.n	88b6e <memchr+0x5a>
   88b26:	1c43      	adds	r3, r0, #1
   88b28:	e004      	b.n	88b34 <memchr+0x20>
   88b2a:	b1fc      	cbz	r4, 88b6c <memchr+0x58>
   88b2c:	7805      	ldrb	r5, [r0, #0]
   88b2e:	4614      	mov	r4, r2
   88b30:	428d      	cmp	r5, r1
   88b32:	d01c      	beq.n	88b6e <memchr+0x5a>
   88b34:	f013 0f03 	tst.w	r3, #3
   88b38:	4618      	mov	r0, r3
   88b3a:	f104 32ff 	add.w	r2, r4, #4294967295
   88b3e:	f103 0301 	add.w	r3, r3, #1
   88b42:	d1f2      	bne.n	88b2a <memchr+0x16>
   88b44:	2c03      	cmp	r4, #3
   88b46:	d814      	bhi.n	88b72 <memchr+0x5e>
   88b48:	1e65      	subs	r5, r4, #1
   88b4a:	b354      	cbz	r4, 88ba2 <memchr+0x8e>
   88b4c:	7803      	ldrb	r3, [r0, #0]
   88b4e:	428b      	cmp	r3, r1
   88b50:	d00d      	beq.n	88b6e <memchr+0x5a>
   88b52:	1c42      	adds	r2, r0, #1
   88b54:	2300      	movs	r3, #0
   88b56:	e002      	b.n	88b5e <memchr+0x4a>
   88b58:	7804      	ldrb	r4, [r0, #0]
   88b5a:	428c      	cmp	r4, r1
   88b5c:	d007      	beq.n	88b6e <memchr+0x5a>
   88b5e:	42ab      	cmp	r3, r5
   88b60:	4610      	mov	r0, r2
   88b62:	f103 0301 	add.w	r3, r3, #1
   88b66:	f102 0201 	add.w	r2, r2, #1
   88b6a:	d1f5      	bne.n	88b58 <memchr+0x44>
   88b6c:	2000      	movs	r0, #0
   88b6e:	bc70      	pop	{r4, r5, r6}
   88b70:	4770      	bx	lr
   88b72:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   88b76:	4603      	mov	r3, r0
   88b78:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   88b7c:	681a      	ldr	r2, [r3, #0]
   88b7e:	4618      	mov	r0, r3
   88b80:	4072      	eors	r2, r6
   88b82:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   88b86:	ea25 0202 	bic.w	r2, r5, r2
   88b8a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   88b8e:	f103 0304 	add.w	r3, r3, #4
   88b92:	d1d9      	bne.n	88b48 <memchr+0x34>
   88b94:	3c04      	subs	r4, #4
   88b96:	2c03      	cmp	r4, #3
   88b98:	4618      	mov	r0, r3
   88b9a:	d8ef      	bhi.n	88b7c <memchr+0x68>
   88b9c:	e7d4      	b.n	88b48 <memchr+0x34>
   88b9e:	4614      	mov	r4, r2
   88ba0:	e7d0      	b.n	88b44 <memchr+0x30>
   88ba2:	4620      	mov	r0, r4
   88ba4:	e7e3      	b.n	88b6e <memchr+0x5a>
   88ba6:	bf00      	nop

00088ba8 <memmove>:
   88ba8:	4288      	cmp	r0, r1
   88baa:	b4f0      	push	{r4, r5, r6, r7}
   88bac:	d910      	bls.n	88bd0 <memmove+0x28>
   88bae:	188c      	adds	r4, r1, r2
   88bb0:	42a0      	cmp	r0, r4
   88bb2:	d20d      	bcs.n	88bd0 <memmove+0x28>
   88bb4:	1885      	adds	r5, r0, r2
   88bb6:	1e53      	subs	r3, r2, #1
   88bb8:	b142      	cbz	r2, 88bcc <memmove+0x24>
   88bba:	4621      	mov	r1, r4
   88bbc:	462a      	mov	r2, r5
   88bbe:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   88bc2:	3b01      	subs	r3, #1
   88bc4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   88bc8:	1c5c      	adds	r4, r3, #1
   88bca:	d1f8      	bne.n	88bbe <memmove+0x16>
   88bcc:	bcf0      	pop	{r4, r5, r6, r7}
   88bce:	4770      	bx	lr
   88bd0:	2a0f      	cmp	r2, #15
   88bd2:	d944      	bls.n	88c5e <memmove+0xb6>
   88bd4:	ea40 0301 	orr.w	r3, r0, r1
   88bd8:	079b      	lsls	r3, r3, #30
   88bda:	d144      	bne.n	88c66 <memmove+0xbe>
   88bdc:	f1a2 0710 	sub.w	r7, r2, #16
   88be0:	093f      	lsrs	r7, r7, #4
   88be2:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   88be6:	3610      	adds	r6, #16
   88be8:	460c      	mov	r4, r1
   88bea:	4603      	mov	r3, r0
   88bec:	6825      	ldr	r5, [r4, #0]
   88bee:	3310      	adds	r3, #16
   88bf0:	f843 5c10 	str.w	r5, [r3, #-16]
   88bf4:	6865      	ldr	r5, [r4, #4]
   88bf6:	3410      	adds	r4, #16
   88bf8:	f843 5c0c 	str.w	r5, [r3, #-12]
   88bfc:	f854 5c08 	ldr.w	r5, [r4, #-8]
   88c00:	f843 5c08 	str.w	r5, [r3, #-8]
   88c04:	f854 5c04 	ldr.w	r5, [r4, #-4]
   88c08:	f843 5c04 	str.w	r5, [r3, #-4]
   88c0c:	42b3      	cmp	r3, r6
   88c0e:	d1ed      	bne.n	88bec <memmove+0x44>
   88c10:	1c7b      	adds	r3, r7, #1
   88c12:	f002 0c0f 	and.w	ip, r2, #15
   88c16:	011b      	lsls	r3, r3, #4
   88c18:	f1bc 0f03 	cmp.w	ip, #3
   88c1c:	4419      	add	r1, r3
   88c1e:	4403      	add	r3, r0
   88c20:	d923      	bls.n	88c6a <memmove+0xc2>
   88c22:	460e      	mov	r6, r1
   88c24:	461d      	mov	r5, r3
   88c26:	4664      	mov	r4, ip
   88c28:	f856 7b04 	ldr.w	r7, [r6], #4
   88c2c:	3c04      	subs	r4, #4
   88c2e:	2c03      	cmp	r4, #3
   88c30:	f845 7b04 	str.w	r7, [r5], #4
   88c34:	d8f8      	bhi.n	88c28 <memmove+0x80>
   88c36:	f1ac 0404 	sub.w	r4, ip, #4
   88c3a:	f024 0403 	bic.w	r4, r4, #3
   88c3e:	3404      	adds	r4, #4
   88c40:	f002 0203 	and.w	r2, r2, #3
   88c44:	4423      	add	r3, r4
   88c46:	4421      	add	r1, r4
   88c48:	2a00      	cmp	r2, #0
   88c4a:	d0bf      	beq.n	88bcc <memmove+0x24>
   88c4c:	441a      	add	r2, r3
   88c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
   88c52:	f803 4b01 	strb.w	r4, [r3], #1
   88c56:	4293      	cmp	r3, r2
   88c58:	d1f9      	bne.n	88c4e <memmove+0xa6>
   88c5a:	bcf0      	pop	{r4, r5, r6, r7}
   88c5c:	4770      	bx	lr
   88c5e:	4603      	mov	r3, r0
   88c60:	2a00      	cmp	r2, #0
   88c62:	d1f3      	bne.n	88c4c <memmove+0xa4>
   88c64:	e7b2      	b.n	88bcc <memmove+0x24>
   88c66:	4603      	mov	r3, r0
   88c68:	e7f0      	b.n	88c4c <memmove+0xa4>
   88c6a:	4662      	mov	r2, ip
   88c6c:	2a00      	cmp	r2, #0
   88c6e:	d1ed      	bne.n	88c4c <memmove+0xa4>
   88c70:	e7ac      	b.n	88bcc <memmove+0x24>
   88c72:	bf00      	nop

00088c74 <__malloc_lock>:
   88c74:	4770      	bx	lr
   88c76:	bf00      	nop

00088c78 <__malloc_unlock>:
   88c78:	4770      	bx	lr
   88c7a:	bf00      	nop

00088c7c <_Balloc>:
   88c7c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   88c7e:	b570      	push	{r4, r5, r6, lr}
   88c80:	4605      	mov	r5, r0
   88c82:	460c      	mov	r4, r1
   88c84:	b14a      	cbz	r2, 88c9a <_Balloc+0x1e>
   88c86:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   88c8a:	b180      	cbz	r0, 88cae <_Balloc+0x32>
   88c8c:	6801      	ldr	r1, [r0, #0]
   88c8e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   88c92:	2200      	movs	r2, #0
   88c94:	6102      	str	r2, [r0, #16]
   88c96:	60c2      	str	r2, [r0, #12]
   88c98:	bd70      	pop	{r4, r5, r6, pc}
   88c9a:	2221      	movs	r2, #33	; 0x21
   88c9c:	2104      	movs	r1, #4
   88c9e:	f000 fe9d 	bl	899dc <_calloc_r>
   88ca2:	64e8      	str	r0, [r5, #76]	; 0x4c
   88ca4:	4602      	mov	r2, r0
   88ca6:	2800      	cmp	r0, #0
   88ca8:	d1ed      	bne.n	88c86 <_Balloc+0xa>
   88caa:	2000      	movs	r0, #0
   88cac:	bd70      	pop	{r4, r5, r6, pc}
   88cae:	2101      	movs	r1, #1
   88cb0:	fa01 f604 	lsl.w	r6, r1, r4
   88cb4:	1d72      	adds	r2, r6, #5
   88cb6:	4628      	mov	r0, r5
   88cb8:	0092      	lsls	r2, r2, #2
   88cba:	f000 fe8f 	bl	899dc <_calloc_r>
   88cbe:	2800      	cmp	r0, #0
   88cc0:	d0f3      	beq.n	88caa <_Balloc+0x2e>
   88cc2:	6044      	str	r4, [r0, #4]
   88cc4:	6086      	str	r6, [r0, #8]
   88cc6:	e7e4      	b.n	88c92 <_Balloc+0x16>

00088cc8 <_Bfree>:
   88cc8:	b131      	cbz	r1, 88cd8 <_Bfree+0x10>
   88cca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   88ccc:	684a      	ldr	r2, [r1, #4]
   88cce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   88cd2:	6008      	str	r0, [r1, #0]
   88cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   88cd8:	4770      	bx	lr
   88cda:	bf00      	nop

00088cdc <__multadd>:
   88cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   88ce0:	690f      	ldr	r7, [r1, #16]
   88ce2:	b083      	sub	sp, #12
   88ce4:	4688      	mov	r8, r1
   88ce6:	4681      	mov	r9, r0
   88ce8:	f101 0514 	add.w	r5, r1, #20
   88cec:	2400      	movs	r4, #0
   88cee:	682e      	ldr	r6, [r5, #0]
   88cf0:	3401      	adds	r4, #1
   88cf2:	b2b1      	uxth	r1, r6
   88cf4:	0c36      	lsrs	r6, r6, #16
   88cf6:	fb02 3301 	mla	r3, r2, r1, r3
   88cfa:	fb02 f606 	mul.w	r6, r2, r6
   88cfe:	b299      	uxth	r1, r3
   88d00:	eb06 4313 	add.w	r3, r6, r3, lsr #16
   88d04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   88d08:	42a7      	cmp	r7, r4
   88d0a:	f845 1b04 	str.w	r1, [r5], #4
   88d0e:	ea4f 4313 	mov.w	r3, r3, lsr #16
   88d12:	dcec      	bgt.n	88cee <__multadd+0x12>
   88d14:	b14b      	cbz	r3, 88d2a <__multadd+0x4e>
   88d16:	f8d8 2008 	ldr.w	r2, [r8, #8]
   88d1a:	4297      	cmp	r7, r2
   88d1c:	da09      	bge.n	88d32 <__multadd+0x56>
   88d1e:	eb08 0287 	add.w	r2, r8, r7, lsl #2
   88d22:	3701      	adds	r7, #1
   88d24:	6153      	str	r3, [r2, #20]
   88d26:	f8c8 7010 	str.w	r7, [r8, #16]
   88d2a:	4640      	mov	r0, r8
   88d2c:	b003      	add	sp, #12
   88d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   88d32:	f8d8 1004 	ldr.w	r1, [r8, #4]
   88d36:	4648      	mov	r0, r9
   88d38:	3101      	adds	r1, #1
   88d3a:	9301      	str	r3, [sp, #4]
   88d3c:	f7ff ff9e 	bl	88c7c <_Balloc>
   88d40:	f8d8 2010 	ldr.w	r2, [r8, #16]
   88d44:	f108 010c 	add.w	r1, r8, #12
   88d48:	3202      	adds	r2, #2
   88d4a:	4604      	mov	r4, r0
   88d4c:	0092      	lsls	r2, r2, #2
   88d4e:	300c      	adds	r0, #12
   88d50:	f7fb fc32 	bl	845b8 <memcpy>
   88d54:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
   88d58:	f8d8 1004 	ldr.w	r1, [r8, #4]
   88d5c:	9b01      	ldr	r3, [sp, #4]
   88d5e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   88d62:	f8c8 0000 	str.w	r0, [r8]
   88d66:	f842 8021 	str.w	r8, [r2, r1, lsl #2]
   88d6a:	46a0      	mov	r8, r4
   88d6c:	e7d7      	b.n	88d1e <__multadd+0x42>
   88d6e:	bf00      	nop

00088d70 <__hi0bits>:
   88d70:	0c03      	lsrs	r3, r0, #16
   88d72:	041b      	lsls	r3, r3, #16
   88d74:	b9b3      	cbnz	r3, 88da4 <__hi0bits+0x34>
   88d76:	0400      	lsls	r0, r0, #16
   88d78:	2310      	movs	r3, #16
   88d7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   88d7e:	bf04      	itt	eq
   88d80:	0200      	lsleq	r0, r0, #8
   88d82:	3308      	addeq	r3, #8
   88d84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   88d88:	bf04      	itt	eq
   88d8a:	0100      	lsleq	r0, r0, #4
   88d8c:	3304      	addeq	r3, #4
   88d8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   88d92:	bf04      	itt	eq
   88d94:	0080      	lsleq	r0, r0, #2
   88d96:	3302      	addeq	r3, #2
   88d98:	2800      	cmp	r0, #0
   88d9a:	db07      	blt.n	88dac <__hi0bits+0x3c>
   88d9c:	0042      	lsls	r2, r0, #1
   88d9e:	d403      	bmi.n	88da8 <__hi0bits+0x38>
   88da0:	2020      	movs	r0, #32
   88da2:	4770      	bx	lr
   88da4:	2300      	movs	r3, #0
   88da6:	e7e8      	b.n	88d7a <__hi0bits+0xa>
   88da8:	1c58      	adds	r0, r3, #1
   88daa:	4770      	bx	lr
   88dac:	4618      	mov	r0, r3
   88dae:	4770      	bx	lr

00088db0 <__lo0bits>:
   88db0:	6803      	ldr	r3, [r0, #0]
   88db2:	f013 0207 	ands.w	r2, r3, #7
   88db6:	d007      	beq.n	88dc8 <__lo0bits+0x18>
   88db8:	07d9      	lsls	r1, r3, #31
   88dba:	d420      	bmi.n	88dfe <__lo0bits+0x4e>
   88dbc:	079a      	lsls	r2, r3, #30
   88dbe:	d420      	bmi.n	88e02 <__lo0bits+0x52>
   88dc0:	089b      	lsrs	r3, r3, #2
   88dc2:	6003      	str	r3, [r0, #0]
   88dc4:	2002      	movs	r0, #2
   88dc6:	4770      	bx	lr
   88dc8:	b299      	uxth	r1, r3
   88dca:	b909      	cbnz	r1, 88dd0 <__lo0bits+0x20>
   88dcc:	0c1b      	lsrs	r3, r3, #16
   88dce:	2210      	movs	r2, #16
   88dd0:	f013 0fff 	tst.w	r3, #255	; 0xff
   88dd4:	bf04      	itt	eq
   88dd6:	0a1b      	lsreq	r3, r3, #8
   88dd8:	3208      	addeq	r2, #8
   88dda:	0719      	lsls	r1, r3, #28
   88ddc:	bf04      	itt	eq
   88dde:	091b      	lsreq	r3, r3, #4
   88de0:	3204      	addeq	r2, #4
   88de2:	0799      	lsls	r1, r3, #30
   88de4:	bf04      	itt	eq
   88de6:	089b      	lsreq	r3, r3, #2
   88de8:	3202      	addeq	r2, #2
   88dea:	07d9      	lsls	r1, r3, #31
   88dec:	d404      	bmi.n	88df8 <__lo0bits+0x48>
   88dee:	085b      	lsrs	r3, r3, #1
   88df0:	d101      	bne.n	88df6 <__lo0bits+0x46>
   88df2:	2020      	movs	r0, #32
   88df4:	4770      	bx	lr
   88df6:	3201      	adds	r2, #1
   88df8:	6003      	str	r3, [r0, #0]
   88dfa:	4610      	mov	r0, r2
   88dfc:	4770      	bx	lr
   88dfe:	2000      	movs	r0, #0
   88e00:	4770      	bx	lr
   88e02:	085b      	lsrs	r3, r3, #1
   88e04:	6003      	str	r3, [r0, #0]
   88e06:	2001      	movs	r0, #1
   88e08:	4770      	bx	lr
   88e0a:	bf00      	nop

00088e0c <__i2b>:
   88e0c:	b510      	push	{r4, lr}
   88e0e:	460c      	mov	r4, r1
   88e10:	2101      	movs	r1, #1
   88e12:	f7ff ff33 	bl	88c7c <_Balloc>
   88e16:	2201      	movs	r2, #1
   88e18:	6144      	str	r4, [r0, #20]
   88e1a:	6102      	str	r2, [r0, #16]
   88e1c:	bd10      	pop	{r4, pc}
   88e1e:	bf00      	nop

00088e20 <__multiply>:
   88e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88e24:	690d      	ldr	r5, [r1, #16]
   88e26:	f8d2 9010 	ldr.w	r9, [r2, #16]
   88e2a:	b085      	sub	sp, #20
   88e2c:	454d      	cmp	r5, r9
   88e2e:	460c      	mov	r4, r1
   88e30:	4692      	mov	sl, r2
   88e32:	da04      	bge.n	88e3e <__multiply+0x1e>
   88e34:	462a      	mov	r2, r5
   88e36:	4654      	mov	r4, sl
   88e38:	464d      	mov	r5, r9
   88e3a:	468a      	mov	sl, r1
   88e3c:	4691      	mov	r9, r2
   88e3e:	68a3      	ldr	r3, [r4, #8]
   88e40:	eb05 0709 	add.w	r7, r5, r9
   88e44:	6861      	ldr	r1, [r4, #4]
   88e46:	429f      	cmp	r7, r3
   88e48:	bfc8      	it	gt
   88e4a:	3101      	addgt	r1, #1
   88e4c:	f7ff ff16 	bl	88c7c <_Balloc>
   88e50:	f100 0614 	add.w	r6, r0, #20
   88e54:	eb06 0887 	add.w	r8, r6, r7, lsl #2
   88e58:	4546      	cmp	r6, r8
   88e5a:	9001      	str	r0, [sp, #4]
   88e5c:	d205      	bcs.n	88e6a <__multiply+0x4a>
   88e5e:	4633      	mov	r3, r6
   88e60:	2000      	movs	r0, #0
   88e62:	f843 0b04 	str.w	r0, [r3], #4
   88e66:	4598      	cmp	r8, r3
   88e68:	d8fb      	bhi.n	88e62 <__multiply+0x42>
   88e6a:	f10a 0c14 	add.w	ip, sl, #20
   88e6e:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
   88e72:	3414      	adds	r4, #20
   88e74:	45cc      	cmp	ip, r9
   88e76:	9400      	str	r4, [sp, #0]
   88e78:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   88e7c:	d25b      	bcs.n	88f36 <__multiply+0x116>
   88e7e:	f8cd 8008 	str.w	r8, [sp, #8]
   88e82:	9703      	str	r7, [sp, #12]
   88e84:	46c8      	mov	r8, r9
   88e86:	f85c 3b04 	ldr.w	r3, [ip], #4
   88e8a:	b29c      	uxth	r4, r3
   88e8c:	b324      	cbz	r4, 88ed8 <__multiply+0xb8>
   88e8e:	9a00      	ldr	r2, [sp, #0]
   88e90:	4633      	mov	r3, r6
   88e92:	f04f 0900 	mov.w	r9, #0
   88e96:	e000      	b.n	88e9a <__multiply+0x7a>
   88e98:	460b      	mov	r3, r1
   88e9a:	f852 7b04 	ldr.w	r7, [r2], #4
   88e9e:	6819      	ldr	r1, [r3, #0]
   88ea0:	fa1f fb87 	uxth.w	fp, r7
   88ea4:	fa1f fa81 	uxth.w	sl, r1
   88ea8:	0c38      	lsrs	r0, r7, #16
   88eaa:	0c09      	lsrs	r1, r1, #16
   88eac:	fb04 aa0b 	mla	sl, r4, fp, sl
   88eb0:	fb04 1000 	mla	r0, r4, r0, r1
   88eb4:	44d1      	add	r9, sl
   88eb6:	eb00 4019 	add.w	r0, r0, r9, lsr #16
   88eba:	fa1f f989 	uxth.w	r9, r9
   88ebe:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
   88ec2:	4619      	mov	r1, r3
   88ec4:	4295      	cmp	r5, r2
   88ec6:	ea4f 4910 	mov.w	r9, r0, lsr #16
   88eca:	f841 7b04 	str.w	r7, [r1], #4
   88ece:	d8e3      	bhi.n	88e98 <__multiply+0x78>
   88ed0:	f8c3 9004 	str.w	r9, [r3, #4]
   88ed4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
   88ed8:	ea5f 4913 	movs.w	r9, r3, lsr #16
   88edc:	d024      	beq.n	88f28 <__multiply+0x108>
   88ede:	f8d6 a000 	ldr.w	sl, [r6]
   88ee2:	9b00      	ldr	r3, [sp, #0]
   88ee4:	4650      	mov	r0, sl
   88ee6:	4631      	mov	r1, r6
   88ee8:	f04f 0b00 	mov.w	fp, #0
   88eec:	e000      	b.n	88ef0 <__multiply+0xd0>
   88eee:	4611      	mov	r1, r2
   88ef0:	881a      	ldrh	r2, [r3, #0]
   88ef2:	0c00      	lsrs	r0, r0, #16
   88ef4:	fb09 0002 	mla	r0, r9, r2, r0
   88ef8:	fa1f fa8a 	uxth.w	sl, sl
   88efc:	4483      	add	fp, r0
   88efe:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
   88f02:	460a      	mov	r2, r1
   88f04:	f842 0b04 	str.w	r0, [r2], #4
   88f08:	f853 7b04 	ldr.w	r7, [r3], #4
   88f0c:	6848      	ldr	r0, [r1, #4]
   88f0e:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   88f12:	b284      	uxth	r4, r0
   88f14:	fb09 4a0a 	mla	sl, r9, sl, r4
   88f18:	429d      	cmp	r5, r3
   88f1a:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
   88f1e:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
   88f22:	d8e4      	bhi.n	88eee <__multiply+0xce>
   88f24:	f8c1 a004 	str.w	sl, [r1, #4]
   88f28:	45e0      	cmp	r8, ip
   88f2a:	f106 0604 	add.w	r6, r6, #4
   88f2e:	d8aa      	bhi.n	88e86 <__multiply+0x66>
   88f30:	f8dd 8008 	ldr.w	r8, [sp, #8]
   88f34:	9f03      	ldr	r7, [sp, #12]
   88f36:	2f00      	cmp	r7, #0
   88f38:	dd0a      	ble.n	88f50 <__multiply+0x130>
   88f3a:	f858 3c04 	ldr.w	r3, [r8, #-4]
   88f3e:	f1a8 0804 	sub.w	r8, r8, #4
   88f42:	b11b      	cbz	r3, 88f4c <__multiply+0x12c>
   88f44:	e004      	b.n	88f50 <__multiply+0x130>
   88f46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   88f4a:	b90b      	cbnz	r3, 88f50 <__multiply+0x130>
   88f4c:	3f01      	subs	r7, #1
   88f4e:	d1fa      	bne.n	88f46 <__multiply+0x126>
   88f50:	9b01      	ldr	r3, [sp, #4]
   88f52:	4618      	mov	r0, r3
   88f54:	611f      	str	r7, [r3, #16]
   88f56:	b005      	add	sp, #20
   88f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00088f5c <__pow5mult>:
   88f5c:	f012 0303 	ands.w	r3, r2, #3
   88f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88f64:	4614      	mov	r4, r2
   88f66:	4607      	mov	r7, r0
   88f68:	460e      	mov	r6, r1
   88f6a:	d12c      	bne.n	88fc6 <__pow5mult+0x6a>
   88f6c:	10a4      	asrs	r4, r4, #2
   88f6e:	d01c      	beq.n	88faa <__pow5mult+0x4e>
   88f70:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   88f72:	2d00      	cmp	r5, #0
   88f74:	d030      	beq.n	88fd8 <__pow5mult+0x7c>
   88f76:	f04f 0800 	mov.w	r8, #0
   88f7a:	e004      	b.n	88f86 <__pow5mult+0x2a>
   88f7c:	1064      	asrs	r4, r4, #1
   88f7e:	d014      	beq.n	88faa <__pow5mult+0x4e>
   88f80:	6828      	ldr	r0, [r5, #0]
   88f82:	b1a8      	cbz	r0, 88fb0 <__pow5mult+0x54>
   88f84:	4605      	mov	r5, r0
   88f86:	07e3      	lsls	r3, r4, #31
   88f88:	d5f8      	bpl.n	88f7c <__pow5mult+0x20>
   88f8a:	4638      	mov	r0, r7
   88f8c:	4631      	mov	r1, r6
   88f8e:	462a      	mov	r2, r5
   88f90:	f7ff ff46 	bl	88e20 <__multiply>
   88f94:	b1ae      	cbz	r6, 88fc2 <__pow5mult+0x66>
   88f96:	6872      	ldr	r2, [r6, #4]
   88f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   88f9a:	1064      	asrs	r4, r4, #1
   88f9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   88fa0:	6031      	str	r1, [r6, #0]
   88fa2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   88fa6:	4606      	mov	r6, r0
   88fa8:	d1ea      	bne.n	88f80 <__pow5mult+0x24>
   88faa:	4630      	mov	r0, r6
   88fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88fb0:	4638      	mov	r0, r7
   88fb2:	4629      	mov	r1, r5
   88fb4:	462a      	mov	r2, r5
   88fb6:	f7ff ff33 	bl	88e20 <__multiply>
   88fba:	6028      	str	r0, [r5, #0]
   88fbc:	f8c0 8000 	str.w	r8, [r0]
   88fc0:	e7e0      	b.n	88f84 <__pow5mult+0x28>
   88fc2:	4606      	mov	r6, r0
   88fc4:	e7da      	b.n	88f7c <__pow5mult+0x20>
   88fc6:	4a0b      	ldr	r2, [pc, #44]	; (88ff4 <__pow5mult+0x98>)
   88fc8:	3b01      	subs	r3, #1
   88fca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   88fce:	2300      	movs	r3, #0
   88fd0:	f7ff fe84 	bl	88cdc <__multadd>
   88fd4:	4606      	mov	r6, r0
   88fd6:	e7c9      	b.n	88f6c <__pow5mult+0x10>
   88fd8:	2101      	movs	r1, #1
   88fda:	4638      	mov	r0, r7
   88fdc:	f7ff fe4e 	bl	88c7c <_Balloc>
   88fe0:	f240 2171 	movw	r1, #625	; 0x271
   88fe4:	2201      	movs	r2, #1
   88fe6:	2300      	movs	r3, #0
   88fe8:	6141      	str	r1, [r0, #20]
   88fea:	6102      	str	r2, [r0, #16]
   88fec:	4605      	mov	r5, r0
   88fee:	64b8      	str	r0, [r7, #72]	; 0x48
   88ff0:	6003      	str	r3, [r0, #0]
   88ff2:	e7c0      	b.n	88f76 <__pow5mult+0x1a>
   88ff4:	0008a750 	.word	0x0008a750

00088ff8 <__lshift>:
   88ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88ffc:	690b      	ldr	r3, [r1, #16]
   88ffe:	ea4f 1a62 	mov.w	sl, r2, asr #5
   89002:	eb0a 0903 	add.w	r9, sl, r3
   89006:	688b      	ldr	r3, [r1, #8]
   89008:	f109 0601 	add.w	r6, r9, #1
   8900c:	429e      	cmp	r6, r3
   8900e:	460f      	mov	r7, r1
   89010:	4693      	mov	fp, r2
   89012:	4680      	mov	r8, r0
   89014:	6849      	ldr	r1, [r1, #4]
   89016:	dd04      	ble.n	89022 <__lshift+0x2a>
   89018:	005b      	lsls	r3, r3, #1
   8901a:	429e      	cmp	r6, r3
   8901c:	f101 0101 	add.w	r1, r1, #1
   89020:	dcfa      	bgt.n	89018 <__lshift+0x20>
   89022:	4640      	mov	r0, r8
   89024:	f7ff fe2a 	bl	88c7c <_Balloc>
   89028:	f1ba 0f00 	cmp.w	sl, #0
   8902c:	f100 0414 	add.w	r4, r0, #20
   89030:	dd09      	ble.n	89046 <__lshift+0x4e>
   89032:	2300      	movs	r3, #0
   89034:	461a      	mov	r2, r3
   89036:	4625      	mov	r5, r4
   89038:	3301      	adds	r3, #1
   8903a:	4553      	cmp	r3, sl
   8903c:	f845 2b04 	str.w	r2, [r5], #4
   89040:	d1fa      	bne.n	89038 <__lshift+0x40>
   89042:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   89046:	693a      	ldr	r2, [r7, #16]
   89048:	f107 0314 	add.w	r3, r7, #20
   8904c:	f01b 0b1f 	ands.w	fp, fp, #31
   89050:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   89054:	d021      	beq.n	8909a <__lshift+0xa2>
   89056:	f1cb 0a20 	rsb	sl, fp, #32
   8905a:	2200      	movs	r2, #0
   8905c:	e000      	b.n	89060 <__lshift+0x68>
   8905e:	462c      	mov	r4, r5
   89060:	6819      	ldr	r1, [r3, #0]
   89062:	4625      	mov	r5, r4
   89064:	fa01 f10b 	lsl.w	r1, r1, fp
   89068:	430a      	orrs	r2, r1
   8906a:	f845 2b04 	str.w	r2, [r5], #4
   8906e:	f853 2b04 	ldr.w	r2, [r3], #4
   89072:	4563      	cmp	r3, ip
   89074:	fa22 f20a 	lsr.w	r2, r2, sl
   89078:	d3f1      	bcc.n	8905e <__lshift+0x66>
   8907a:	6062      	str	r2, [r4, #4]
   8907c:	b10a      	cbz	r2, 89082 <__lshift+0x8a>
   8907e:	f109 0602 	add.w	r6, r9, #2
   89082:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   89086:	687a      	ldr	r2, [r7, #4]
   89088:	3e01      	subs	r6, #1
   8908a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8908e:	6106      	str	r6, [r0, #16]
   89090:	6039      	str	r1, [r7, #0]
   89092:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   89096:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8909a:	f853 2b04 	ldr.w	r2, [r3], #4
   8909e:	459c      	cmp	ip, r3
   890a0:	f844 2b04 	str.w	r2, [r4], #4
   890a4:	d9ed      	bls.n	89082 <__lshift+0x8a>
   890a6:	f853 2b04 	ldr.w	r2, [r3], #4
   890aa:	459c      	cmp	ip, r3
   890ac:	f844 2b04 	str.w	r2, [r4], #4
   890b0:	d8f3      	bhi.n	8909a <__lshift+0xa2>
   890b2:	e7e6      	b.n	89082 <__lshift+0x8a>

000890b4 <__mcmp>:
   890b4:	6902      	ldr	r2, [r0, #16]
   890b6:	690b      	ldr	r3, [r1, #16]
   890b8:	b410      	push	{r4}
   890ba:	1ad2      	subs	r2, r2, r3
   890bc:	d115      	bne.n	890ea <__mcmp+0x36>
   890be:	009b      	lsls	r3, r3, #2
   890c0:	3014      	adds	r0, #20
   890c2:	3114      	adds	r1, #20
   890c4:	4419      	add	r1, r3
   890c6:	4403      	add	r3, r0
   890c8:	e001      	b.n	890ce <__mcmp+0x1a>
   890ca:	4298      	cmp	r0, r3
   890cc:	d211      	bcs.n	890f2 <__mcmp+0x3e>
   890ce:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   890d2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   890d6:	42a2      	cmp	r2, r4
   890d8:	d0f7      	beq.n	890ca <__mcmp+0x16>
   890da:	4294      	cmp	r4, r2
   890dc:	bf94      	ite	ls
   890de:	2001      	movls	r0, #1
   890e0:	f04f 30ff 	movhi.w	r0, #4294967295
   890e4:	f85d 4b04 	ldr.w	r4, [sp], #4
   890e8:	4770      	bx	lr
   890ea:	4610      	mov	r0, r2
   890ec:	f85d 4b04 	ldr.w	r4, [sp], #4
   890f0:	4770      	bx	lr
   890f2:	2000      	movs	r0, #0
   890f4:	f85d 4b04 	ldr.w	r4, [sp], #4
   890f8:	4770      	bx	lr
   890fa:	bf00      	nop

000890fc <__mdiff>:
   890fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   89100:	460d      	mov	r5, r1
   89102:	4604      	mov	r4, r0
   89104:	4611      	mov	r1, r2
   89106:	4628      	mov	r0, r5
   89108:	4616      	mov	r6, r2
   8910a:	f7ff ffd3 	bl	890b4 <__mcmp>
   8910e:	1e07      	subs	r7, r0, #0
   89110:	d056      	beq.n	891c0 <__mdiff+0xc4>
   89112:	db4f      	blt.n	891b4 <__mdiff+0xb8>
   89114:	f04f 0900 	mov.w	r9, #0
   89118:	6869      	ldr	r1, [r5, #4]
   8911a:	4620      	mov	r0, r4
   8911c:	f7ff fdae 	bl	88c7c <_Balloc>
   89120:	692f      	ldr	r7, [r5, #16]
   89122:	6932      	ldr	r2, [r6, #16]
   89124:	3514      	adds	r5, #20
   89126:	3614      	adds	r6, #20
   89128:	f8c0 900c 	str.w	r9, [r0, #12]
   8912c:	f100 0314 	add.w	r3, r0, #20
   89130:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   89134:	eb06 0882 	add.w	r8, r6, r2, lsl #2
   89138:	2100      	movs	r1, #0
   8913a:	f855 4b04 	ldr.w	r4, [r5], #4
   8913e:	f856 2b04 	ldr.w	r2, [r6], #4
   89142:	fa1f fa84 	uxth.w	sl, r4
   89146:	448a      	add	sl, r1
   89148:	fa1f f982 	uxth.w	r9, r2
   8914c:	0c11      	lsrs	r1, r2, #16
   8914e:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
   89152:	ebc9 020a 	rsb	r2, r9, sl
   89156:	eb01 4122 	add.w	r1, r1, r2, asr #16
   8915a:	b292      	uxth	r2, r2
   8915c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   89160:	45b0      	cmp	r8, r6
   89162:	f843 2b04 	str.w	r2, [r3], #4
   89166:	ea4f 4121 	mov.w	r1, r1, asr #16
   8916a:	462c      	mov	r4, r5
   8916c:	d8e5      	bhi.n	8913a <__mdiff+0x3e>
   8916e:	45ac      	cmp	ip, r5
   89170:	4698      	mov	r8, r3
   89172:	d915      	bls.n	891a0 <__mdiff+0xa4>
   89174:	f854 6b04 	ldr.w	r6, [r4], #4
   89178:	b2b2      	uxth	r2, r6
   8917a:	4411      	add	r1, r2
   8917c:	0c36      	lsrs	r6, r6, #16
   8917e:	eb06 4621 	add.w	r6, r6, r1, asr #16
   89182:	b289      	uxth	r1, r1
   89184:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   89188:	45a4      	cmp	ip, r4
   8918a:	f843 2b04 	str.w	r2, [r3], #4
   8918e:	ea4f 4126 	mov.w	r1, r6, asr #16
   89192:	d8ef      	bhi.n	89174 <__mdiff+0x78>
   89194:	43eb      	mvns	r3, r5
   89196:	4463      	add	r3, ip
   89198:	f023 0303 	bic.w	r3, r3, #3
   8919c:	3304      	adds	r3, #4
   8919e:	4443      	add	r3, r8
   891a0:	3b04      	subs	r3, #4
   891a2:	b922      	cbnz	r2, 891ae <__mdiff+0xb2>
   891a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   891a8:	3f01      	subs	r7, #1
   891aa:	2a00      	cmp	r2, #0
   891ac:	d0fa      	beq.n	891a4 <__mdiff+0xa8>
   891ae:	6107      	str	r7, [r0, #16]
   891b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   891b4:	462b      	mov	r3, r5
   891b6:	f04f 0901 	mov.w	r9, #1
   891ba:	4635      	mov	r5, r6
   891bc:	461e      	mov	r6, r3
   891be:	e7ab      	b.n	89118 <__mdiff+0x1c>
   891c0:	4620      	mov	r0, r4
   891c2:	4639      	mov	r1, r7
   891c4:	f7ff fd5a 	bl	88c7c <_Balloc>
   891c8:	2301      	movs	r3, #1
   891ca:	6147      	str	r7, [r0, #20]
   891cc:	6103      	str	r3, [r0, #16]
   891ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   891d2:	bf00      	nop

000891d4 <__d2b>:
   891d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   891d8:	2101      	movs	r1, #1
   891da:	b083      	sub	sp, #12
   891dc:	461d      	mov	r5, r3
   891de:	f3c3 560a 	ubfx	r6, r3, #20, #11
   891e2:	4614      	mov	r4, r2
   891e4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   891e6:	f7ff fd49 	bl	88c7c <_Balloc>
   891ea:	f3c5 0313 	ubfx	r3, r5, #0, #20
   891ee:	4680      	mov	r8, r0
   891f0:	b10e      	cbz	r6, 891f6 <__d2b+0x22>
   891f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   891f6:	9301      	str	r3, [sp, #4]
   891f8:	b324      	cbz	r4, 89244 <__d2b+0x70>
   891fa:	a802      	add	r0, sp, #8
   891fc:	f840 4d08 	str.w	r4, [r0, #-8]!
   89200:	4668      	mov	r0, sp
   89202:	f7ff fdd5 	bl	88db0 <__lo0bits>
   89206:	2800      	cmp	r0, #0
   89208:	d135      	bne.n	89276 <__d2b+0xa2>
   8920a:	e89d 000c 	ldmia.w	sp, {r2, r3}
   8920e:	f8c8 2014 	str.w	r2, [r8, #20]
   89212:	2b00      	cmp	r3, #0
   89214:	bf0c      	ite	eq
   89216:	2401      	moveq	r4, #1
   89218:	2402      	movne	r4, #2
   8921a:	f8c8 3018 	str.w	r3, [r8, #24]
   8921e:	f8c8 4010 	str.w	r4, [r8, #16]
   89222:	b9de      	cbnz	r6, 8925c <__d2b+0x88>
   89224:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   89228:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8922c:	6038      	str	r0, [r7, #0]
   8922e:	6918      	ldr	r0, [r3, #16]
   89230:	f7ff fd9e 	bl	88d70 <__hi0bits>
   89234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89236:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
   8923a:	6018      	str	r0, [r3, #0]
   8923c:	4640      	mov	r0, r8
   8923e:	b003      	add	sp, #12
   89240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   89244:	a801      	add	r0, sp, #4
   89246:	f7ff fdb3 	bl	88db0 <__lo0bits>
   8924a:	9b01      	ldr	r3, [sp, #4]
   8924c:	2401      	movs	r4, #1
   8924e:	3020      	adds	r0, #32
   89250:	f8c8 3014 	str.w	r3, [r8, #20]
   89254:	f8c8 4010 	str.w	r4, [r8, #16]
   89258:	2e00      	cmp	r6, #0
   8925a:	d0e3      	beq.n	89224 <__d2b+0x50>
   8925c:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
   89260:	eb09 0300 	add.w	r3, r9, r0
   89264:	603b      	str	r3, [r7, #0]
   89266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89268:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8926c:	6018      	str	r0, [r3, #0]
   8926e:	4640      	mov	r0, r8
   89270:	b003      	add	sp, #12
   89272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   89276:	9b01      	ldr	r3, [sp, #4]
   89278:	f1c0 0120 	rsb	r1, r0, #32
   8927c:	fa03 f101 	lsl.w	r1, r3, r1
   89280:	40c3      	lsrs	r3, r0
   89282:	9a00      	ldr	r2, [sp, #0]
   89284:	9301      	str	r3, [sp, #4]
   89286:	430a      	orrs	r2, r1
   89288:	f8c8 2014 	str.w	r2, [r8, #20]
   8928c:	e7c1      	b.n	89212 <__d2b+0x3e>
   8928e:	bf00      	nop

00089290 <_realloc_r>:
   89290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89294:	460c      	mov	r4, r1
   89296:	b083      	sub	sp, #12
   89298:	4690      	mov	r8, r2
   8929a:	4681      	mov	r9, r0
   8929c:	2900      	cmp	r1, #0
   8929e:	f000 80ba 	beq.w	89416 <_realloc_r+0x186>
   892a2:	f7ff fce7 	bl	88c74 <__malloc_lock>
   892a6:	f108 060b 	add.w	r6, r8, #11
   892aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   892ae:	2e16      	cmp	r6, #22
   892b0:	f023 0503 	bic.w	r5, r3, #3
   892b4:	f1a4 0708 	sub.w	r7, r4, #8
   892b8:	d84b      	bhi.n	89352 <_realloc_r+0xc2>
   892ba:	2110      	movs	r1, #16
   892bc:	460e      	mov	r6, r1
   892be:	45b0      	cmp	r8, r6
   892c0:	d84c      	bhi.n	8935c <_realloc_r+0xcc>
   892c2:	428d      	cmp	r5, r1
   892c4:	da51      	bge.n	8936a <_realloc_r+0xda>
   892c6:	f8df b384 	ldr.w	fp, [pc, #900]	; 8964c <_realloc_r+0x3bc>
   892ca:	1978      	adds	r0, r7, r5
   892cc:	f8db e008 	ldr.w	lr, [fp, #8]
   892d0:	4586      	cmp	lr, r0
   892d2:	f000 80a6 	beq.w	89422 <_realloc_r+0x192>
   892d6:	6842      	ldr	r2, [r0, #4]
   892d8:	f022 0c01 	bic.w	ip, r2, #1
   892dc:	4484      	add	ip, r0
   892de:	f8dc c004 	ldr.w	ip, [ip, #4]
   892e2:	f01c 0f01 	tst.w	ip, #1
   892e6:	d054      	beq.n	89392 <_realloc_r+0x102>
   892e8:	2200      	movs	r2, #0
   892ea:	4610      	mov	r0, r2
   892ec:	07db      	lsls	r3, r3, #31
   892ee:	d46f      	bmi.n	893d0 <_realloc_r+0x140>
   892f0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   892f4:	ebc3 0a07 	rsb	sl, r3, r7
   892f8:	f8da 3004 	ldr.w	r3, [sl, #4]
   892fc:	f023 0303 	bic.w	r3, r3, #3
   89300:	442b      	add	r3, r5
   89302:	2800      	cmp	r0, #0
   89304:	d062      	beq.n	893cc <_realloc_r+0x13c>
   89306:	4570      	cmp	r0, lr
   89308:	f000 80e9 	beq.w	894de <_realloc_r+0x24e>
   8930c:	eb02 0e03 	add.w	lr, r2, r3
   89310:	458e      	cmp	lr, r1
   89312:	db5b      	blt.n	893cc <_realloc_r+0x13c>
   89314:	68c3      	ldr	r3, [r0, #12]
   89316:	6882      	ldr	r2, [r0, #8]
   89318:	46d0      	mov	r8, sl
   8931a:	60d3      	str	r3, [r2, #12]
   8931c:	609a      	str	r2, [r3, #8]
   8931e:	f858 1f08 	ldr.w	r1, [r8, #8]!
   89322:	f8da 300c 	ldr.w	r3, [sl, #12]
   89326:	1f2a      	subs	r2, r5, #4
   89328:	2a24      	cmp	r2, #36	; 0x24
   8932a:	60cb      	str	r3, [r1, #12]
   8932c:	6099      	str	r1, [r3, #8]
   8932e:	f200 8123 	bhi.w	89578 <_realloc_r+0x2e8>
   89332:	2a13      	cmp	r2, #19
   89334:	f240 80b0 	bls.w	89498 <_realloc_r+0x208>
   89338:	6823      	ldr	r3, [r4, #0]
   8933a:	2a1b      	cmp	r2, #27
   8933c:	f8ca 3008 	str.w	r3, [sl, #8]
   89340:	6863      	ldr	r3, [r4, #4]
   89342:	f8ca 300c 	str.w	r3, [sl, #12]
   89346:	f200 812b 	bhi.w	895a0 <_realloc_r+0x310>
   8934a:	3408      	adds	r4, #8
   8934c:	f10a 0310 	add.w	r3, sl, #16
   89350:	e0a3      	b.n	8949a <_realloc_r+0x20a>
   89352:	f026 0607 	bic.w	r6, r6, #7
   89356:	2e00      	cmp	r6, #0
   89358:	4631      	mov	r1, r6
   8935a:	dab0      	bge.n	892be <_realloc_r+0x2e>
   8935c:	230c      	movs	r3, #12
   8935e:	2000      	movs	r0, #0
   89360:	f8c9 3000 	str.w	r3, [r9]
   89364:	b003      	add	sp, #12
   89366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8936a:	46a0      	mov	r8, r4
   8936c:	1baa      	subs	r2, r5, r6
   8936e:	2a0f      	cmp	r2, #15
   89370:	f003 0301 	and.w	r3, r3, #1
   89374:	d81a      	bhi.n	893ac <_realloc_r+0x11c>
   89376:	432b      	orrs	r3, r5
   89378:	607b      	str	r3, [r7, #4]
   8937a:	443d      	add	r5, r7
   8937c:	686b      	ldr	r3, [r5, #4]
   8937e:	f043 0301 	orr.w	r3, r3, #1
   89382:	606b      	str	r3, [r5, #4]
   89384:	4648      	mov	r0, r9
   89386:	f7ff fc77 	bl	88c78 <__malloc_unlock>
   8938a:	4640      	mov	r0, r8
   8938c:	b003      	add	sp, #12
   8938e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89392:	f022 0203 	bic.w	r2, r2, #3
   89396:	eb02 0c05 	add.w	ip, r2, r5
   8939a:	458c      	cmp	ip, r1
   8939c:	dba6      	blt.n	892ec <_realloc_r+0x5c>
   8939e:	68c2      	ldr	r2, [r0, #12]
   893a0:	6881      	ldr	r1, [r0, #8]
   893a2:	46a0      	mov	r8, r4
   893a4:	60ca      	str	r2, [r1, #12]
   893a6:	4665      	mov	r5, ip
   893a8:	6091      	str	r1, [r2, #8]
   893aa:	e7df      	b.n	8936c <_realloc_r+0xdc>
   893ac:	19b9      	adds	r1, r7, r6
   893ae:	4333      	orrs	r3, r6
   893b0:	f042 0001 	orr.w	r0, r2, #1
   893b4:	607b      	str	r3, [r7, #4]
   893b6:	440a      	add	r2, r1
   893b8:	6048      	str	r0, [r1, #4]
   893ba:	6853      	ldr	r3, [r2, #4]
   893bc:	3108      	adds	r1, #8
   893be:	f043 0301 	orr.w	r3, r3, #1
   893c2:	6053      	str	r3, [r2, #4]
   893c4:	4648      	mov	r0, r9
   893c6:	f7fe fe07 	bl	87fd8 <_free_r>
   893ca:	e7db      	b.n	89384 <_realloc_r+0xf4>
   893cc:	428b      	cmp	r3, r1
   893ce:	da33      	bge.n	89438 <_realloc_r+0x1a8>
   893d0:	4641      	mov	r1, r8
   893d2:	4648      	mov	r0, r9
   893d4:	f7ff f902 	bl	885dc <_malloc_r>
   893d8:	4680      	mov	r8, r0
   893da:	2800      	cmp	r0, #0
   893dc:	d0d2      	beq.n	89384 <_realloc_r+0xf4>
   893de:	f854 3c04 	ldr.w	r3, [r4, #-4]
   893e2:	f1a0 0108 	sub.w	r1, r0, #8
   893e6:	f023 0201 	bic.w	r2, r3, #1
   893ea:	443a      	add	r2, r7
   893ec:	4291      	cmp	r1, r2
   893ee:	f000 80bc 	beq.w	8956a <_realloc_r+0x2da>
   893f2:	1f2a      	subs	r2, r5, #4
   893f4:	2a24      	cmp	r2, #36	; 0x24
   893f6:	d86e      	bhi.n	894d6 <_realloc_r+0x246>
   893f8:	2a13      	cmp	r2, #19
   893fa:	d842      	bhi.n	89482 <_realloc_r+0x1f2>
   893fc:	4603      	mov	r3, r0
   893fe:	4622      	mov	r2, r4
   89400:	6811      	ldr	r1, [r2, #0]
   89402:	6019      	str	r1, [r3, #0]
   89404:	6851      	ldr	r1, [r2, #4]
   89406:	6059      	str	r1, [r3, #4]
   89408:	6892      	ldr	r2, [r2, #8]
   8940a:	609a      	str	r2, [r3, #8]
   8940c:	4621      	mov	r1, r4
   8940e:	4648      	mov	r0, r9
   89410:	f7fe fde2 	bl	87fd8 <_free_r>
   89414:	e7b6      	b.n	89384 <_realloc_r+0xf4>
   89416:	4611      	mov	r1, r2
   89418:	b003      	add	sp, #12
   8941a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8941e:	f7ff b8dd 	b.w	885dc <_malloc_r>
   89422:	f8de 2004 	ldr.w	r2, [lr, #4]
   89426:	f106 0c10 	add.w	ip, r6, #16
   8942a:	f022 0203 	bic.w	r2, r2, #3
   8942e:	1950      	adds	r0, r2, r5
   89430:	4560      	cmp	r0, ip
   89432:	da3d      	bge.n	894b0 <_realloc_r+0x220>
   89434:	4670      	mov	r0, lr
   89436:	e759      	b.n	892ec <_realloc_r+0x5c>
   89438:	46d0      	mov	r8, sl
   8943a:	f858 0f08 	ldr.w	r0, [r8, #8]!
   8943e:	f8da 100c 	ldr.w	r1, [sl, #12]
   89442:	1f2a      	subs	r2, r5, #4
   89444:	2a24      	cmp	r2, #36	; 0x24
   89446:	60c1      	str	r1, [r0, #12]
   89448:	6088      	str	r0, [r1, #8]
   8944a:	f200 80a0 	bhi.w	8958e <_realloc_r+0x2fe>
   8944e:	2a13      	cmp	r2, #19
   89450:	f240 809b 	bls.w	8958a <_realloc_r+0x2fa>
   89454:	6821      	ldr	r1, [r4, #0]
   89456:	2a1b      	cmp	r2, #27
   89458:	f8ca 1008 	str.w	r1, [sl, #8]
   8945c:	6861      	ldr	r1, [r4, #4]
   8945e:	f8ca 100c 	str.w	r1, [sl, #12]
   89462:	f200 80b2 	bhi.w	895ca <_realloc_r+0x33a>
   89466:	3408      	adds	r4, #8
   89468:	f10a 0210 	add.w	r2, sl, #16
   8946c:	6821      	ldr	r1, [r4, #0]
   8946e:	461d      	mov	r5, r3
   89470:	6011      	str	r1, [r2, #0]
   89472:	6861      	ldr	r1, [r4, #4]
   89474:	4657      	mov	r7, sl
   89476:	6051      	str	r1, [r2, #4]
   89478:	68a3      	ldr	r3, [r4, #8]
   8947a:	6093      	str	r3, [r2, #8]
   8947c:	f8da 3004 	ldr.w	r3, [sl, #4]
   89480:	e774      	b.n	8936c <_realloc_r+0xdc>
   89482:	6823      	ldr	r3, [r4, #0]
   89484:	2a1b      	cmp	r2, #27
   89486:	6003      	str	r3, [r0, #0]
   89488:	6863      	ldr	r3, [r4, #4]
   8948a:	6043      	str	r3, [r0, #4]
   8948c:	d862      	bhi.n	89554 <_realloc_r+0x2c4>
   8948e:	f100 0308 	add.w	r3, r0, #8
   89492:	f104 0208 	add.w	r2, r4, #8
   89496:	e7b3      	b.n	89400 <_realloc_r+0x170>
   89498:	4643      	mov	r3, r8
   8949a:	6822      	ldr	r2, [r4, #0]
   8949c:	4675      	mov	r5, lr
   8949e:	601a      	str	r2, [r3, #0]
   894a0:	6862      	ldr	r2, [r4, #4]
   894a2:	4657      	mov	r7, sl
   894a4:	605a      	str	r2, [r3, #4]
   894a6:	68a2      	ldr	r2, [r4, #8]
   894a8:	609a      	str	r2, [r3, #8]
   894aa:	f8da 3004 	ldr.w	r3, [sl, #4]
   894ae:	e75d      	b.n	8936c <_realloc_r+0xdc>
   894b0:	1b83      	subs	r3, r0, r6
   894b2:	4437      	add	r7, r6
   894b4:	f043 0301 	orr.w	r3, r3, #1
   894b8:	f8cb 7008 	str.w	r7, [fp, #8]
   894bc:	607b      	str	r3, [r7, #4]
   894be:	f854 3c04 	ldr.w	r3, [r4, #-4]
   894c2:	4648      	mov	r0, r9
   894c4:	f003 0301 	and.w	r3, r3, #1
   894c8:	431e      	orrs	r6, r3
   894ca:	f844 6c04 	str.w	r6, [r4, #-4]
   894ce:	f7ff fbd3 	bl	88c78 <__malloc_unlock>
   894d2:	4620      	mov	r0, r4
   894d4:	e75a      	b.n	8938c <_realloc_r+0xfc>
   894d6:	4621      	mov	r1, r4
   894d8:	f7ff fb66 	bl	88ba8 <memmove>
   894dc:	e796      	b.n	8940c <_realloc_r+0x17c>
   894de:	eb02 0c03 	add.w	ip, r2, r3
   894e2:	f106 0210 	add.w	r2, r6, #16
   894e6:	4594      	cmp	ip, r2
   894e8:	f6ff af70 	blt.w	893cc <_realloc_r+0x13c>
   894ec:	4657      	mov	r7, sl
   894ee:	f857 1f08 	ldr.w	r1, [r7, #8]!
   894f2:	f8da 300c 	ldr.w	r3, [sl, #12]
   894f6:	1f2a      	subs	r2, r5, #4
   894f8:	2a24      	cmp	r2, #36	; 0x24
   894fa:	60cb      	str	r3, [r1, #12]
   894fc:	6099      	str	r1, [r3, #8]
   894fe:	f200 8086 	bhi.w	8960e <_realloc_r+0x37e>
   89502:	2a13      	cmp	r2, #19
   89504:	d977      	bls.n	895f6 <_realloc_r+0x366>
   89506:	6823      	ldr	r3, [r4, #0]
   89508:	2a1b      	cmp	r2, #27
   8950a:	f8ca 3008 	str.w	r3, [sl, #8]
   8950e:	6863      	ldr	r3, [r4, #4]
   89510:	f8ca 300c 	str.w	r3, [sl, #12]
   89514:	f200 8084 	bhi.w	89620 <_realloc_r+0x390>
   89518:	3408      	adds	r4, #8
   8951a:	f10a 0310 	add.w	r3, sl, #16
   8951e:	6822      	ldr	r2, [r4, #0]
   89520:	601a      	str	r2, [r3, #0]
   89522:	6862      	ldr	r2, [r4, #4]
   89524:	605a      	str	r2, [r3, #4]
   89526:	68a2      	ldr	r2, [r4, #8]
   89528:	609a      	str	r2, [r3, #8]
   8952a:	ebc6 020c 	rsb	r2, r6, ip
   8952e:	eb0a 0306 	add.w	r3, sl, r6
   89532:	f042 0201 	orr.w	r2, r2, #1
   89536:	f8cb 3008 	str.w	r3, [fp, #8]
   8953a:	605a      	str	r2, [r3, #4]
   8953c:	f8da 3004 	ldr.w	r3, [sl, #4]
   89540:	4648      	mov	r0, r9
   89542:	f003 0301 	and.w	r3, r3, #1
   89546:	431e      	orrs	r6, r3
   89548:	f8ca 6004 	str.w	r6, [sl, #4]
   8954c:	f7ff fb94 	bl	88c78 <__malloc_unlock>
   89550:	4638      	mov	r0, r7
   89552:	e71b      	b.n	8938c <_realloc_r+0xfc>
   89554:	68a3      	ldr	r3, [r4, #8]
   89556:	2a24      	cmp	r2, #36	; 0x24
   89558:	6083      	str	r3, [r0, #8]
   8955a:	68e3      	ldr	r3, [r4, #12]
   8955c:	60c3      	str	r3, [r0, #12]
   8955e:	d02b      	beq.n	895b8 <_realloc_r+0x328>
   89560:	f100 0310 	add.w	r3, r0, #16
   89564:	f104 0210 	add.w	r2, r4, #16
   89568:	e74a      	b.n	89400 <_realloc_r+0x170>
   8956a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8956e:	46a0      	mov	r8, r4
   89570:	f022 0203 	bic.w	r2, r2, #3
   89574:	4415      	add	r5, r2
   89576:	e6f9      	b.n	8936c <_realloc_r+0xdc>
   89578:	4621      	mov	r1, r4
   8957a:	4640      	mov	r0, r8
   8957c:	4675      	mov	r5, lr
   8957e:	4657      	mov	r7, sl
   89580:	f7ff fb12 	bl	88ba8 <memmove>
   89584:	f8da 3004 	ldr.w	r3, [sl, #4]
   89588:	e6f0      	b.n	8936c <_realloc_r+0xdc>
   8958a:	4642      	mov	r2, r8
   8958c:	e76e      	b.n	8946c <_realloc_r+0x1dc>
   8958e:	4621      	mov	r1, r4
   89590:	4640      	mov	r0, r8
   89592:	461d      	mov	r5, r3
   89594:	4657      	mov	r7, sl
   89596:	f7ff fb07 	bl	88ba8 <memmove>
   8959a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8959e:	e6e5      	b.n	8936c <_realloc_r+0xdc>
   895a0:	68a3      	ldr	r3, [r4, #8]
   895a2:	2a24      	cmp	r2, #36	; 0x24
   895a4:	f8ca 3010 	str.w	r3, [sl, #16]
   895a8:	68e3      	ldr	r3, [r4, #12]
   895aa:	f8ca 3014 	str.w	r3, [sl, #20]
   895ae:	d018      	beq.n	895e2 <_realloc_r+0x352>
   895b0:	3410      	adds	r4, #16
   895b2:	f10a 0318 	add.w	r3, sl, #24
   895b6:	e770      	b.n	8949a <_realloc_r+0x20a>
   895b8:	6922      	ldr	r2, [r4, #16]
   895ba:	f100 0318 	add.w	r3, r0, #24
   895be:	6102      	str	r2, [r0, #16]
   895c0:	6961      	ldr	r1, [r4, #20]
   895c2:	f104 0218 	add.w	r2, r4, #24
   895c6:	6141      	str	r1, [r0, #20]
   895c8:	e71a      	b.n	89400 <_realloc_r+0x170>
   895ca:	68a1      	ldr	r1, [r4, #8]
   895cc:	2a24      	cmp	r2, #36	; 0x24
   895ce:	f8ca 1010 	str.w	r1, [sl, #16]
   895d2:	68e1      	ldr	r1, [r4, #12]
   895d4:	f8ca 1014 	str.w	r1, [sl, #20]
   895d8:	d00f      	beq.n	895fa <_realloc_r+0x36a>
   895da:	3410      	adds	r4, #16
   895dc:	f10a 0218 	add.w	r2, sl, #24
   895e0:	e744      	b.n	8946c <_realloc_r+0x1dc>
   895e2:	6922      	ldr	r2, [r4, #16]
   895e4:	f10a 0320 	add.w	r3, sl, #32
   895e8:	f8ca 2018 	str.w	r2, [sl, #24]
   895ec:	6962      	ldr	r2, [r4, #20]
   895ee:	3418      	adds	r4, #24
   895f0:	f8ca 201c 	str.w	r2, [sl, #28]
   895f4:	e751      	b.n	8949a <_realloc_r+0x20a>
   895f6:	463b      	mov	r3, r7
   895f8:	e791      	b.n	8951e <_realloc_r+0x28e>
   895fa:	6921      	ldr	r1, [r4, #16]
   895fc:	f10a 0220 	add.w	r2, sl, #32
   89600:	f8ca 1018 	str.w	r1, [sl, #24]
   89604:	6961      	ldr	r1, [r4, #20]
   89606:	3418      	adds	r4, #24
   89608:	f8ca 101c 	str.w	r1, [sl, #28]
   8960c:	e72e      	b.n	8946c <_realloc_r+0x1dc>
   8960e:	4621      	mov	r1, r4
   89610:	4638      	mov	r0, r7
   89612:	f8cd c004 	str.w	ip, [sp, #4]
   89616:	f7ff fac7 	bl	88ba8 <memmove>
   8961a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8961e:	e784      	b.n	8952a <_realloc_r+0x29a>
   89620:	68a3      	ldr	r3, [r4, #8]
   89622:	2a24      	cmp	r2, #36	; 0x24
   89624:	f8ca 3010 	str.w	r3, [sl, #16]
   89628:	68e3      	ldr	r3, [r4, #12]
   8962a:	f8ca 3014 	str.w	r3, [sl, #20]
   8962e:	d003      	beq.n	89638 <_realloc_r+0x3a8>
   89630:	3410      	adds	r4, #16
   89632:	f10a 0318 	add.w	r3, sl, #24
   89636:	e772      	b.n	8951e <_realloc_r+0x28e>
   89638:	6922      	ldr	r2, [r4, #16]
   8963a:	f10a 0320 	add.w	r3, sl, #32
   8963e:	f8ca 2018 	str.w	r2, [sl, #24]
   89642:	6962      	ldr	r2, [r4, #20]
   89644:	3418      	adds	r4, #24
   89646:	f8ca 201c 	str.w	r2, [sl, #28]
   8964a:	e768      	b.n	8951e <_realloc_r+0x28e>
   8964c:	20070638 	.word	0x20070638

00089650 <_sbrk_r>:
   89650:	b538      	push	{r3, r4, r5, lr}
   89652:	4c07      	ldr	r4, [pc, #28]	; (89670 <_sbrk_r+0x20>)
   89654:	2300      	movs	r3, #0
   89656:	4605      	mov	r5, r0
   89658:	4608      	mov	r0, r1
   8965a:	6023      	str	r3, [r4, #0]
   8965c:	f7f9 fe58 	bl	83310 <_sbrk>
   89660:	1c43      	adds	r3, r0, #1
   89662:	d000      	beq.n	89666 <_sbrk_r+0x16>
   89664:	bd38      	pop	{r3, r4, r5, pc}
   89666:	6823      	ldr	r3, [r4, #0]
   89668:	2b00      	cmp	r3, #0
   8966a:	d0fb      	beq.n	89664 <_sbrk_r+0x14>
   8966c:	602b      	str	r3, [r5, #0]
   8966e:	bd38      	pop	{r3, r4, r5, pc}
   89670:	20078e14 	.word	0x20078e14

00089674 <__sread>:
   89674:	b510      	push	{r4, lr}
   89676:	460c      	mov	r4, r1
   89678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8967c:	f000 fa72 	bl	89b64 <_read_r>
   89680:	2800      	cmp	r0, #0
   89682:	db03      	blt.n	8968c <__sread+0x18>
   89684:	6d23      	ldr	r3, [r4, #80]	; 0x50
   89686:	4403      	add	r3, r0
   89688:	6523      	str	r3, [r4, #80]	; 0x50
   8968a:	bd10      	pop	{r4, pc}
   8968c:	89a3      	ldrh	r3, [r4, #12]
   8968e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   89692:	81a3      	strh	r3, [r4, #12]
   89694:	bd10      	pop	{r4, pc}
   89696:	bf00      	nop

00089698 <__swrite>:
   89698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8969c:	460c      	mov	r4, r1
   8969e:	8989      	ldrh	r1, [r1, #12]
   896a0:	461d      	mov	r5, r3
   896a2:	05cb      	lsls	r3, r1, #23
   896a4:	4616      	mov	r6, r2
   896a6:	4607      	mov	r7, r0
   896a8:	d506      	bpl.n	896b8 <__swrite+0x20>
   896aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   896ae:	2200      	movs	r2, #0
   896b0:	2302      	movs	r3, #2
   896b2:	f000 fa43 	bl	89b3c <_lseek_r>
   896b6:	89a1      	ldrh	r1, [r4, #12]
   896b8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   896bc:	81a1      	strh	r1, [r4, #12]
   896be:	4638      	mov	r0, r7
   896c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   896c4:	4632      	mov	r2, r6
   896c6:	462b      	mov	r3, r5
   896c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   896cc:	f000 b91e 	b.w	8990c <_write_r>

000896d0 <__sseek>:
   896d0:	b510      	push	{r4, lr}
   896d2:	460c      	mov	r4, r1
   896d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   896d8:	f000 fa30 	bl	89b3c <_lseek_r>
   896dc:	89a3      	ldrh	r3, [r4, #12]
   896de:	1c42      	adds	r2, r0, #1
   896e0:	bf0e      	itee	eq
   896e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   896e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   896ea:	6520      	strne	r0, [r4, #80]	; 0x50
   896ec:	81a3      	strh	r3, [r4, #12]
   896ee:	bd10      	pop	{r4, pc}

000896f0 <__sclose>:
   896f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   896f4:	f000 b9a2 	b.w	89a3c <_close_r>

000896f8 <__ssprint_r>:
   896f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   896fc:	6894      	ldr	r4, [r2, #8]
   896fe:	b083      	sub	sp, #12
   89700:	4692      	mov	sl, r2
   89702:	4680      	mov	r8, r0
   89704:	460d      	mov	r5, r1
   89706:	6816      	ldr	r6, [r2, #0]
   89708:	2c00      	cmp	r4, #0
   8970a:	d06f      	beq.n	897ec <__ssprint_r+0xf4>
   8970c:	f04f 0b00 	mov.w	fp, #0
   89710:	6808      	ldr	r0, [r1, #0]
   89712:	688b      	ldr	r3, [r1, #8]
   89714:	465c      	mov	r4, fp
   89716:	2c00      	cmp	r4, #0
   89718:	d043      	beq.n	897a2 <__ssprint_r+0xaa>
   8971a:	429c      	cmp	r4, r3
   8971c:	461f      	mov	r7, r3
   8971e:	d345      	bcc.n	897ac <__ssprint_r+0xb4>
   89720:	89ab      	ldrh	r3, [r5, #12]
   89722:	f413 6f90 	tst.w	r3, #1152	; 0x480
   89726:	d044      	beq.n	897b2 <__ssprint_r+0xba>
   89728:	696f      	ldr	r7, [r5, #20]
   8972a:	6929      	ldr	r1, [r5, #16]
   8972c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   89730:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   89734:	ebc1 0900 	rsb	r9, r1, r0
   89738:	1c62      	adds	r2, r4, #1
   8973a:	107f      	asrs	r7, r7, #1
   8973c:	444a      	add	r2, r9
   8973e:	4297      	cmp	r7, r2
   89740:	bf34      	ite	cc
   89742:	4617      	movcc	r7, r2
   89744:	463a      	movcs	r2, r7
   89746:	055b      	lsls	r3, r3, #21
   89748:	d535      	bpl.n	897b6 <__ssprint_r+0xbe>
   8974a:	4611      	mov	r1, r2
   8974c:	4640      	mov	r0, r8
   8974e:	f7fe ff45 	bl	885dc <_malloc_r>
   89752:	2800      	cmp	r0, #0
   89754:	d039      	beq.n	897ca <__ssprint_r+0xd2>
   89756:	6929      	ldr	r1, [r5, #16]
   89758:	464a      	mov	r2, r9
   8975a:	9001      	str	r0, [sp, #4]
   8975c:	f7fa ff2c 	bl	845b8 <memcpy>
   89760:	89aa      	ldrh	r2, [r5, #12]
   89762:	9b01      	ldr	r3, [sp, #4]
   89764:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   89768:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8976c:	81aa      	strh	r2, [r5, #12]
   8976e:	ebc9 0207 	rsb	r2, r9, r7
   89772:	eb03 0009 	add.w	r0, r3, r9
   89776:	616f      	str	r7, [r5, #20]
   89778:	612b      	str	r3, [r5, #16]
   8977a:	6028      	str	r0, [r5, #0]
   8977c:	60aa      	str	r2, [r5, #8]
   8977e:	4627      	mov	r7, r4
   89780:	46a1      	mov	r9, r4
   89782:	464a      	mov	r2, r9
   89784:	4659      	mov	r1, fp
   89786:	f7ff fa0f 	bl	88ba8 <memmove>
   8978a:	f8da 2008 	ldr.w	r2, [sl, #8]
   8978e:	68ab      	ldr	r3, [r5, #8]
   89790:	6828      	ldr	r0, [r5, #0]
   89792:	1bdb      	subs	r3, r3, r7
   89794:	4448      	add	r0, r9
   89796:	1b14      	subs	r4, r2, r4
   89798:	60ab      	str	r3, [r5, #8]
   8979a:	6028      	str	r0, [r5, #0]
   8979c:	f8ca 4008 	str.w	r4, [sl, #8]
   897a0:	b324      	cbz	r4, 897ec <__ssprint_r+0xf4>
   897a2:	f8d6 b000 	ldr.w	fp, [r6]
   897a6:	6874      	ldr	r4, [r6, #4]
   897a8:	3608      	adds	r6, #8
   897aa:	e7b4      	b.n	89716 <__ssprint_r+0x1e>
   897ac:	4627      	mov	r7, r4
   897ae:	46a1      	mov	r9, r4
   897b0:	e7e7      	b.n	89782 <__ssprint_r+0x8a>
   897b2:	46b9      	mov	r9, r7
   897b4:	e7e5      	b.n	89782 <__ssprint_r+0x8a>
   897b6:	4640      	mov	r0, r8
   897b8:	f7ff fd6a 	bl	89290 <_realloc_r>
   897bc:	4603      	mov	r3, r0
   897be:	2800      	cmp	r0, #0
   897c0:	d1d5      	bne.n	8976e <__ssprint_r+0x76>
   897c2:	4640      	mov	r0, r8
   897c4:	6929      	ldr	r1, [r5, #16]
   897c6:	f7fe fc07 	bl	87fd8 <_free_r>
   897ca:	89aa      	ldrh	r2, [r5, #12]
   897cc:	230c      	movs	r3, #12
   897ce:	f8c8 3000 	str.w	r3, [r8]
   897d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   897d6:	2300      	movs	r3, #0
   897d8:	f04f 30ff 	mov.w	r0, #4294967295
   897dc:	81aa      	strh	r2, [r5, #12]
   897de:	f8ca 3008 	str.w	r3, [sl, #8]
   897e2:	f8ca 3004 	str.w	r3, [sl, #4]
   897e6:	b003      	add	sp, #12
   897e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   897ec:	4620      	mov	r0, r4
   897ee:	f8ca 4004 	str.w	r4, [sl, #4]
   897f2:	b003      	add	sp, #12
   897f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000897f8 <__swbuf_r>:
   897f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   897fa:	460d      	mov	r5, r1
   897fc:	4614      	mov	r4, r2
   897fe:	4607      	mov	r7, r0
   89800:	b110      	cbz	r0, 89808 <__swbuf_r+0x10>
   89802:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89804:	2b00      	cmp	r3, #0
   89806:	d048      	beq.n	8989a <__swbuf_r+0xa2>
   89808:	89a2      	ldrh	r2, [r4, #12]
   8980a:	69a0      	ldr	r0, [r4, #24]
   8980c:	b293      	uxth	r3, r2
   8980e:	60a0      	str	r0, [r4, #8]
   89810:	0718      	lsls	r0, r3, #28
   89812:	d538      	bpl.n	89886 <__swbuf_r+0x8e>
   89814:	6926      	ldr	r6, [r4, #16]
   89816:	2e00      	cmp	r6, #0
   89818:	d035      	beq.n	89886 <__swbuf_r+0x8e>
   8981a:	0499      	lsls	r1, r3, #18
   8981c:	b2ed      	uxtb	r5, r5
   8981e:	d515      	bpl.n	8984c <__swbuf_r+0x54>
   89820:	6823      	ldr	r3, [r4, #0]
   89822:	6962      	ldr	r2, [r4, #20]
   89824:	1b9e      	subs	r6, r3, r6
   89826:	4296      	cmp	r6, r2
   89828:	da1c      	bge.n	89864 <__swbuf_r+0x6c>
   8982a:	3601      	adds	r6, #1
   8982c:	68a2      	ldr	r2, [r4, #8]
   8982e:	1c59      	adds	r1, r3, #1
   89830:	3a01      	subs	r2, #1
   89832:	60a2      	str	r2, [r4, #8]
   89834:	6021      	str	r1, [r4, #0]
   89836:	701d      	strb	r5, [r3, #0]
   89838:	6963      	ldr	r3, [r4, #20]
   8983a:	42b3      	cmp	r3, r6
   8983c:	d01a      	beq.n	89874 <__swbuf_r+0x7c>
   8983e:	89a3      	ldrh	r3, [r4, #12]
   89840:	07db      	lsls	r3, r3, #31
   89842:	d501      	bpl.n	89848 <__swbuf_r+0x50>
   89844:	2d0a      	cmp	r5, #10
   89846:	d015      	beq.n	89874 <__swbuf_r+0x7c>
   89848:	4628      	mov	r0, r5
   8984a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8984c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8984e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   89852:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   89856:	6663      	str	r3, [r4, #100]	; 0x64
   89858:	6823      	ldr	r3, [r4, #0]
   8985a:	81a2      	strh	r2, [r4, #12]
   8985c:	6962      	ldr	r2, [r4, #20]
   8985e:	1b9e      	subs	r6, r3, r6
   89860:	4296      	cmp	r6, r2
   89862:	dbe2      	blt.n	8982a <__swbuf_r+0x32>
   89864:	4638      	mov	r0, r7
   89866:	4621      	mov	r1, r4
   89868:	f7fe fa56 	bl	87d18 <_fflush_r>
   8986c:	b940      	cbnz	r0, 89880 <__swbuf_r+0x88>
   8986e:	6823      	ldr	r3, [r4, #0]
   89870:	2601      	movs	r6, #1
   89872:	e7db      	b.n	8982c <__swbuf_r+0x34>
   89874:	4638      	mov	r0, r7
   89876:	4621      	mov	r1, r4
   89878:	f7fe fa4e 	bl	87d18 <_fflush_r>
   8987c:	2800      	cmp	r0, #0
   8987e:	d0e3      	beq.n	89848 <__swbuf_r+0x50>
   89880:	f04f 30ff 	mov.w	r0, #4294967295
   89884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89886:	4638      	mov	r0, r7
   89888:	4621      	mov	r1, r4
   8988a:	f7fd f979 	bl	86b80 <__swsetup_r>
   8988e:	2800      	cmp	r0, #0
   89890:	d1f6      	bne.n	89880 <__swbuf_r+0x88>
   89892:	89a2      	ldrh	r2, [r4, #12]
   89894:	6926      	ldr	r6, [r4, #16]
   89896:	b293      	uxth	r3, r2
   89898:	e7bf      	b.n	8981a <__swbuf_r+0x22>
   8989a:	f7fe fa59 	bl	87d50 <__sinit>
   8989e:	e7b3      	b.n	89808 <__swbuf_r+0x10>

000898a0 <_wcrtomb_r>:
   898a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   898a4:	461e      	mov	r6, r3
   898a6:	b086      	sub	sp, #24
   898a8:	460c      	mov	r4, r1
   898aa:	4605      	mov	r5, r0
   898ac:	4617      	mov	r7, r2
   898ae:	4b0f      	ldr	r3, [pc, #60]	; (898ec <_wcrtomb_r+0x4c>)
   898b0:	b191      	cbz	r1, 898d8 <_wcrtomb_r+0x38>
   898b2:	f8d3 8000 	ldr.w	r8, [r3]
   898b6:	f7fe fe0b 	bl	884d0 <__locale_charset>
   898ba:	9600      	str	r6, [sp, #0]
   898bc:	4603      	mov	r3, r0
   898be:	4621      	mov	r1, r4
   898c0:	463a      	mov	r2, r7
   898c2:	4628      	mov	r0, r5
   898c4:	47c0      	blx	r8
   898c6:	1c43      	adds	r3, r0, #1
   898c8:	d103      	bne.n	898d2 <_wcrtomb_r+0x32>
   898ca:	2200      	movs	r2, #0
   898cc:	238a      	movs	r3, #138	; 0x8a
   898ce:	6032      	str	r2, [r6, #0]
   898d0:	602b      	str	r3, [r5, #0]
   898d2:	b006      	add	sp, #24
   898d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   898d8:	681f      	ldr	r7, [r3, #0]
   898da:	f7fe fdf9 	bl	884d0 <__locale_charset>
   898de:	9600      	str	r6, [sp, #0]
   898e0:	4603      	mov	r3, r0
   898e2:	4622      	mov	r2, r4
   898e4:	4628      	mov	r0, r5
   898e6:	a903      	add	r1, sp, #12
   898e8:	47b8      	blx	r7
   898ea:	e7ec      	b.n	898c6 <_wcrtomb_r+0x26>
   898ec:	20070a48 	.word	0x20070a48

000898f0 <__ascii_wctomb>:
   898f0:	b121      	cbz	r1, 898fc <__ascii_wctomb+0xc>
   898f2:	2aff      	cmp	r2, #255	; 0xff
   898f4:	d804      	bhi.n	89900 <__ascii_wctomb+0x10>
   898f6:	700a      	strb	r2, [r1, #0]
   898f8:	2001      	movs	r0, #1
   898fa:	4770      	bx	lr
   898fc:	4608      	mov	r0, r1
   898fe:	4770      	bx	lr
   89900:	238a      	movs	r3, #138	; 0x8a
   89902:	6003      	str	r3, [r0, #0]
   89904:	f04f 30ff 	mov.w	r0, #4294967295
   89908:	4770      	bx	lr
   8990a:	bf00      	nop

0008990c <_write_r>:
   8990c:	b570      	push	{r4, r5, r6, lr}
   8990e:	4c08      	ldr	r4, [pc, #32]	; (89930 <_write_r+0x24>)
   89910:	4606      	mov	r6, r0
   89912:	2500      	movs	r5, #0
   89914:	4608      	mov	r0, r1
   89916:	4611      	mov	r1, r2
   89918:	461a      	mov	r2, r3
   8991a:	6025      	str	r5, [r4, #0]
   8991c:	f7f7 fbda 	bl	810d4 <_write>
   89920:	1c43      	adds	r3, r0, #1
   89922:	d000      	beq.n	89926 <_write_r+0x1a>
   89924:	bd70      	pop	{r4, r5, r6, pc}
   89926:	6823      	ldr	r3, [r4, #0]
   89928:	2b00      	cmp	r3, #0
   8992a:	d0fb      	beq.n	89924 <_write_r+0x18>
   8992c:	6033      	str	r3, [r6, #0]
   8992e:	bd70      	pop	{r4, r5, r6, pc}
   89930:	20078e14 	.word	0x20078e14

00089934 <__register_exitproc>:
   89934:	b5f0      	push	{r4, r5, r6, r7, lr}
   89936:	4c27      	ldr	r4, [pc, #156]	; (899d4 <__register_exitproc+0xa0>)
   89938:	b085      	sub	sp, #20
   8993a:	6826      	ldr	r6, [r4, #0]
   8993c:	4607      	mov	r7, r0
   8993e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   89942:	2c00      	cmp	r4, #0
   89944:	d040      	beq.n	899c8 <__register_exitproc+0x94>
   89946:	6865      	ldr	r5, [r4, #4]
   89948:	2d1f      	cmp	r5, #31
   8994a:	dd1e      	ble.n	8998a <__register_exitproc+0x56>
   8994c:	4822      	ldr	r0, [pc, #136]	; (899d8 <__register_exitproc+0xa4>)
   8994e:	b918      	cbnz	r0, 89958 <__register_exitproc+0x24>
   89950:	f04f 30ff 	mov.w	r0, #4294967295
   89954:	b005      	add	sp, #20
   89956:	bdf0      	pop	{r4, r5, r6, r7, pc}
   89958:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8995c:	9103      	str	r1, [sp, #12]
   8995e:	9202      	str	r2, [sp, #8]
   89960:	9301      	str	r3, [sp, #4]
   89962:	f7fe fe33 	bl	885cc <malloc>
   89966:	9903      	ldr	r1, [sp, #12]
   89968:	4604      	mov	r4, r0
   8996a:	9a02      	ldr	r2, [sp, #8]
   8996c:	9b01      	ldr	r3, [sp, #4]
   8996e:	2800      	cmp	r0, #0
   89970:	d0ee      	beq.n	89950 <__register_exitproc+0x1c>
   89972:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   89976:	2000      	movs	r0, #0
   89978:	6025      	str	r5, [r4, #0]
   8997a:	6060      	str	r0, [r4, #4]
   8997c:	4605      	mov	r5, r0
   8997e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   89982:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   89986:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   8998a:	b93f      	cbnz	r7, 8999c <__register_exitproc+0x68>
   8998c:	1c6b      	adds	r3, r5, #1
   8998e:	2000      	movs	r0, #0
   89990:	3502      	adds	r5, #2
   89992:	6063      	str	r3, [r4, #4]
   89994:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   89998:	b005      	add	sp, #20
   8999a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8999c:	2601      	movs	r6, #1
   8999e:	40ae      	lsls	r6, r5
   899a0:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   899a4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   899a8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   899ac:	2f02      	cmp	r7, #2
   899ae:	ea42 0206 	orr.w	r2, r2, r6
   899b2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   899b6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   899ba:	d1e7      	bne.n	8998c <__register_exitproc+0x58>
   899bc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   899c0:	431e      	orrs	r6, r3
   899c2:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   899c6:	e7e1      	b.n	8998c <__register_exitproc+0x58>
   899c8:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   899cc:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   899d0:	e7b9      	b.n	89946 <__register_exitproc+0x12>
   899d2:	bf00      	nop
   899d4:	0008a5c0 	.word	0x0008a5c0
   899d8:	000885cd 	.word	0x000885cd

000899dc <_calloc_r>:
   899dc:	b510      	push	{r4, lr}
   899de:	fb02 f101 	mul.w	r1, r2, r1
   899e2:	f7fe fdfb 	bl	885dc <_malloc_r>
   899e6:	4604      	mov	r4, r0
   899e8:	b168      	cbz	r0, 89a06 <_calloc_r+0x2a>
   899ea:	f850 2c04 	ldr.w	r2, [r0, #-4]
   899ee:	f022 0203 	bic.w	r2, r2, #3
   899f2:	3a04      	subs	r2, #4
   899f4:	2a24      	cmp	r2, #36	; 0x24
   899f6:	d818      	bhi.n	89a2a <_calloc_r+0x4e>
   899f8:	2a13      	cmp	r2, #19
   899fa:	d806      	bhi.n	89a0a <_calloc_r+0x2e>
   899fc:	4603      	mov	r3, r0
   899fe:	2200      	movs	r2, #0
   89a00:	601a      	str	r2, [r3, #0]
   89a02:	605a      	str	r2, [r3, #4]
   89a04:	609a      	str	r2, [r3, #8]
   89a06:	4620      	mov	r0, r4
   89a08:	bd10      	pop	{r4, pc}
   89a0a:	2300      	movs	r3, #0
   89a0c:	2a1b      	cmp	r2, #27
   89a0e:	6003      	str	r3, [r0, #0]
   89a10:	6043      	str	r3, [r0, #4]
   89a12:	d90f      	bls.n	89a34 <_calloc_r+0x58>
   89a14:	2a24      	cmp	r2, #36	; 0x24
   89a16:	6083      	str	r3, [r0, #8]
   89a18:	60c3      	str	r3, [r0, #12]
   89a1a:	bf05      	ittet	eq
   89a1c:	6103      	streq	r3, [r0, #16]
   89a1e:	6143      	streq	r3, [r0, #20]
   89a20:	f100 0310 	addne.w	r3, r0, #16
   89a24:	f100 0318 	addeq.w	r3, r0, #24
   89a28:	e7e9      	b.n	899fe <_calloc_r+0x22>
   89a2a:	2100      	movs	r1, #0
   89a2c:	f7fa fe3a 	bl	846a4 <memset>
   89a30:	4620      	mov	r0, r4
   89a32:	bd10      	pop	{r4, pc}
   89a34:	f100 0308 	add.w	r3, r0, #8
   89a38:	e7e1      	b.n	899fe <_calloc_r+0x22>
   89a3a:	bf00      	nop

00089a3c <_close_r>:
   89a3c:	b538      	push	{r3, r4, r5, lr}
   89a3e:	4c07      	ldr	r4, [pc, #28]	; (89a5c <_close_r+0x20>)
   89a40:	2300      	movs	r3, #0
   89a42:	4605      	mov	r5, r0
   89a44:	4608      	mov	r0, r1
   89a46:	6023      	str	r3, [r4, #0]
   89a48:	f7f9 fc7c 	bl	83344 <_close>
   89a4c:	1c43      	adds	r3, r0, #1
   89a4e:	d000      	beq.n	89a52 <_close_r+0x16>
   89a50:	bd38      	pop	{r3, r4, r5, pc}
   89a52:	6823      	ldr	r3, [r4, #0]
   89a54:	2b00      	cmp	r3, #0
   89a56:	d0fb      	beq.n	89a50 <_close_r+0x14>
   89a58:	602b      	str	r3, [r5, #0]
   89a5a:	bd38      	pop	{r3, r4, r5, pc}
   89a5c:	20078e14 	.word	0x20078e14

00089a60 <_fclose_r>:
   89a60:	b570      	push	{r4, r5, r6, lr}
   89a62:	460c      	mov	r4, r1
   89a64:	4605      	mov	r5, r0
   89a66:	b131      	cbz	r1, 89a76 <_fclose_r+0x16>
   89a68:	b110      	cbz	r0, 89a70 <_fclose_r+0x10>
   89a6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89a6c:	2b00      	cmp	r3, #0
   89a6e:	d02f      	beq.n	89ad0 <_fclose_r+0x70>
   89a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89a74:	b90b      	cbnz	r3, 89a7a <_fclose_r+0x1a>
   89a76:	2000      	movs	r0, #0
   89a78:	bd70      	pop	{r4, r5, r6, pc}
   89a7a:	4628      	mov	r0, r5
   89a7c:	4621      	mov	r1, r4
   89a7e:	f7fe f94b 	bl	87d18 <_fflush_r>
   89a82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   89a84:	4606      	mov	r6, r0
   89a86:	b133      	cbz	r3, 89a96 <_fclose_r+0x36>
   89a88:	4628      	mov	r0, r5
   89a8a:	69e1      	ldr	r1, [r4, #28]
   89a8c:	4798      	blx	r3
   89a8e:	2800      	cmp	r0, #0
   89a90:	bfb8      	it	lt
   89a92:	f04f 36ff 	movlt.w	r6, #4294967295
   89a96:	89a3      	ldrh	r3, [r4, #12]
   89a98:	061b      	lsls	r3, r3, #24
   89a9a:	d41c      	bmi.n	89ad6 <_fclose_r+0x76>
   89a9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   89a9e:	b141      	cbz	r1, 89ab2 <_fclose_r+0x52>
   89aa0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   89aa4:	4299      	cmp	r1, r3
   89aa6:	d002      	beq.n	89aae <_fclose_r+0x4e>
   89aa8:	4628      	mov	r0, r5
   89aaa:	f7fe fa95 	bl	87fd8 <_free_r>
   89aae:	2300      	movs	r3, #0
   89ab0:	6323      	str	r3, [r4, #48]	; 0x30
   89ab2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   89ab4:	b121      	cbz	r1, 89ac0 <_fclose_r+0x60>
   89ab6:	4628      	mov	r0, r5
   89ab8:	f7fe fa8e 	bl	87fd8 <_free_r>
   89abc:	2300      	movs	r3, #0
   89abe:	6463      	str	r3, [r4, #68]	; 0x44
   89ac0:	f7fe f9c0 	bl	87e44 <__sfp_lock_acquire>
   89ac4:	2300      	movs	r3, #0
   89ac6:	81a3      	strh	r3, [r4, #12]
   89ac8:	f7fe f9be 	bl	87e48 <__sfp_lock_release>
   89acc:	4630      	mov	r0, r6
   89ace:	bd70      	pop	{r4, r5, r6, pc}
   89ad0:	f7fe f93e 	bl	87d50 <__sinit>
   89ad4:	e7cc      	b.n	89a70 <_fclose_r+0x10>
   89ad6:	4628      	mov	r0, r5
   89ad8:	6921      	ldr	r1, [r4, #16]
   89ada:	f7fe fa7d 	bl	87fd8 <_free_r>
   89ade:	e7dd      	b.n	89a9c <_fclose_r+0x3c>

00089ae0 <fclose>:
   89ae0:	4b02      	ldr	r3, [pc, #8]	; (89aec <fclose+0xc>)
   89ae2:	4601      	mov	r1, r0
   89ae4:	6818      	ldr	r0, [r3, #0]
   89ae6:	f7ff bfbb 	b.w	89a60 <_fclose_r>
   89aea:	bf00      	nop
   89aec:	200705d8 	.word	0x200705d8

00089af0 <_fstat_r>:
   89af0:	b538      	push	{r3, r4, r5, lr}
   89af2:	4c08      	ldr	r4, [pc, #32]	; (89b14 <_fstat_r+0x24>)
   89af4:	2300      	movs	r3, #0
   89af6:	4605      	mov	r5, r0
   89af8:	4608      	mov	r0, r1
   89afa:	4611      	mov	r1, r2
   89afc:	6023      	str	r3, [r4, #0]
   89afe:	f7f9 fc25 	bl	8334c <_fstat>
   89b02:	1c43      	adds	r3, r0, #1
   89b04:	d000      	beq.n	89b08 <_fstat_r+0x18>
   89b06:	bd38      	pop	{r3, r4, r5, pc}
   89b08:	6823      	ldr	r3, [r4, #0]
   89b0a:	2b00      	cmp	r3, #0
   89b0c:	d0fb      	beq.n	89b06 <_fstat_r+0x16>
   89b0e:	602b      	str	r3, [r5, #0]
   89b10:	bd38      	pop	{r3, r4, r5, pc}
   89b12:	bf00      	nop
   89b14:	20078e14 	.word	0x20078e14

00089b18 <_isatty_r>:
   89b18:	b538      	push	{r3, r4, r5, lr}
   89b1a:	4c07      	ldr	r4, [pc, #28]	; (89b38 <_isatty_r+0x20>)
   89b1c:	2300      	movs	r3, #0
   89b1e:	4605      	mov	r5, r0
   89b20:	4608      	mov	r0, r1
   89b22:	6023      	str	r3, [r4, #0]
   89b24:	f7f9 fc18 	bl	83358 <_isatty>
   89b28:	1c43      	adds	r3, r0, #1
   89b2a:	d000      	beq.n	89b2e <_isatty_r+0x16>
   89b2c:	bd38      	pop	{r3, r4, r5, pc}
   89b2e:	6823      	ldr	r3, [r4, #0]
   89b30:	2b00      	cmp	r3, #0
   89b32:	d0fb      	beq.n	89b2c <_isatty_r+0x14>
   89b34:	602b      	str	r3, [r5, #0]
   89b36:	bd38      	pop	{r3, r4, r5, pc}
   89b38:	20078e14 	.word	0x20078e14

00089b3c <_lseek_r>:
   89b3c:	b570      	push	{r4, r5, r6, lr}
   89b3e:	4c08      	ldr	r4, [pc, #32]	; (89b60 <_lseek_r+0x24>)
   89b40:	4606      	mov	r6, r0
   89b42:	2500      	movs	r5, #0
   89b44:	4608      	mov	r0, r1
   89b46:	4611      	mov	r1, r2
   89b48:	461a      	mov	r2, r3
   89b4a:	6025      	str	r5, [r4, #0]
   89b4c:	f7f9 fc06 	bl	8335c <_lseek>
   89b50:	1c43      	adds	r3, r0, #1
   89b52:	d000      	beq.n	89b56 <_lseek_r+0x1a>
   89b54:	bd70      	pop	{r4, r5, r6, pc}
   89b56:	6823      	ldr	r3, [r4, #0]
   89b58:	2b00      	cmp	r3, #0
   89b5a:	d0fb      	beq.n	89b54 <_lseek_r+0x18>
   89b5c:	6033      	str	r3, [r6, #0]
   89b5e:	bd70      	pop	{r4, r5, r6, pc}
   89b60:	20078e14 	.word	0x20078e14

00089b64 <_read_r>:
   89b64:	b570      	push	{r4, r5, r6, lr}
   89b66:	4c08      	ldr	r4, [pc, #32]	; (89b88 <_read_r+0x24>)
   89b68:	4606      	mov	r6, r0
   89b6a:	2500      	movs	r5, #0
   89b6c:	4608      	mov	r0, r1
   89b6e:	4611      	mov	r1, r2
   89b70:	461a      	mov	r2, r3
   89b72:	6025      	str	r5, [r4, #0]
   89b74:	f7f7 fa8e 	bl	81094 <_read>
   89b78:	1c43      	adds	r3, r0, #1
   89b7a:	d000      	beq.n	89b7e <_read_r+0x1a>
   89b7c:	bd70      	pop	{r4, r5, r6, pc}
   89b7e:	6823      	ldr	r3, [r4, #0]
   89b80:	2b00      	cmp	r3, #0
   89b82:	d0fb      	beq.n	89b7c <_read_r+0x18>
   89b84:	6033      	str	r3, [r6, #0]
   89b86:	bd70      	pop	{r4, r5, r6, pc}
   89b88:	20078e14 	.word	0x20078e14

00089b8c <__aeabi_uldivmod>:
   89b8c:	b94b      	cbnz	r3, 89ba2 <__aeabi_uldivmod+0x16>
   89b8e:	b942      	cbnz	r2, 89ba2 <__aeabi_uldivmod+0x16>
   89b90:	2900      	cmp	r1, #0
   89b92:	bf08      	it	eq
   89b94:	2800      	cmpeq	r0, #0
   89b96:	d002      	beq.n	89b9e <__aeabi_uldivmod+0x12>
   89b98:	f04f 31ff 	mov.w	r1, #4294967295
   89b9c:	4608      	mov	r0, r1
   89b9e:	f000 b83b 	b.w	89c18 <__aeabi_idiv0>
   89ba2:	b082      	sub	sp, #8
   89ba4:	46ec      	mov	ip, sp
   89ba6:	e92d 5000 	stmdb	sp!, {ip, lr}
   89baa:	f000 f81d 	bl	89be8 <__gnu_uldivmod_helper>
   89bae:	f8dd e004 	ldr.w	lr, [sp, #4]
   89bb2:	b002      	add	sp, #8
   89bb4:	bc0c      	pop	{r2, r3}
   89bb6:	4770      	bx	lr

00089bb8 <__gnu_ldivmod_helper>:
   89bb8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   89bbc:	9e08      	ldr	r6, [sp, #32]
   89bbe:	4614      	mov	r4, r2
   89bc0:	461d      	mov	r5, r3
   89bc2:	4680      	mov	r8, r0
   89bc4:	4689      	mov	r9, r1
   89bc6:	f000 f829 	bl	89c1c <__divdi3>
   89bca:	fb04 f301 	mul.w	r3, r4, r1
   89bce:	fba4 ab00 	umull	sl, fp, r4, r0
   89bd2:	fb00 3205 	mla	r2, r0, r5, r3
   89bd6:	4493      	add	fp, r2
   89bd8:	ebb8 080a 	subs.w	r8, r8, sl
   89bdc:	eb69 090b 	sbc.w	r9, r9, fp
   89be0:	e9c6 8900 	strd	r8, r9, [r6]
   89be4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00089be8 <__gnu_uldivmod_helper>:
   89be8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   89bec:	9e08      	ldr	r6, [sp, #32]
   89bee:	4614      	mov	r4, r2
   89bf0:	461d      	mov	r5, r3
   89bf2:	4680      	mov	r8, r0
   89bf4:	4689      	mov	r9, r1
   89bf6:	f000 f961 	bl	89ebc <__udivdi3>
   89bfa:	fb00 f505 	mul.w	r5, r0, r5
   89bfe:	fba0 ab04 	umull	sl, fp, r0, r4
   89c02:	fb04 5401 	mla	r4, r4, r1, r5
   89c06:	44a3      	add	fp, r4
   89c08:	ebb8 080a 	subs.w	r8, r8, sl
   89c0c:	eb69 090b 	sbc.w	r9, r9, fp
   89c10:	e9c6 8900 	strd	r8, r9, [r6]
   89c14:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00089c18 <__aeabi_idiv0>:
   89c18:	4770      	bx	lr
   89c1a:	bf00      	nop

00089c1c <__divdi3>:
   89c1c:	2900      	cmp	r1, #0
   89c1e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   89c22:	f2c0 80a1 	blt.w	89d68 <__divdi3+0x14c>
   89c26:	2400      	movs	r4, #0
   89c28:	2b00      	cmp	r3, #0
   89c2a:	f2c0 8098 	blt.w	89d5e <__divdi3+0x142>
   89c2e:	4615      	mov	r5, r2
   89c30:	4606      	mov	r6, r0
   89c32:	460f      	mov	r7, r1
   89c34:	2b00      	cmp	r3, #0
   89c36:	d13f      	bne.n	89cb8 <__divdi3+0x9c>
   89c38:	428a      	cmp	r2, r1
   89c3a:	d958      	bls.n	89cee <__divdi3+0xd2>
   89c3c:	fab2 f382 	clz	r3, r2
   89c40:	b14b      	cbz	r3, 89c56 <__divdi3+0x3a>
   89c42:	f1c3 0220 	rsb	r2, r3, #32
   89c46:	fa01 f703 	lsl.w	r7, r1, r3
   89c4a:	fa20 f202 	lsr.w	r2, r0, r2
   89c4e:	409d      	lsls	r5, r3
   89c50:	fa00 f603 	lsl.w	r6, r0, r3
   89c54:	4317      	orrs	r7, r2
   89c56:	0c29      	lsrs	r1, r5, #16
   89c58:	fbb7 f2f1 	udiv	r2, r7, r1
   89c5c:	fb01 7712 	mls	r7, r1, r2, r7
   89c60:	b2a8      	uxth	r0, r5
   89c62:	fb00 f302 	mul.w	r3, r0, r2
   89c66:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   89c6a:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   89c6e:	42bb      	cmp	r3, r7
   89c70:	d909      	bls.n	89c86 <__divdi3+0x6a>
   89c72:	197f      	adds	r7, r7, r5
   89c74:	f102 3cff 	add.w	ip, r2, #4294967295
   89c78:	f080 8105 	bcs.w	89e86 <__divdi3+0x26a>
   89c7c:	42bb      	cmp	r3, r7
   89c7e:	f240 8102 	bls.w	89e86 <__divdi3+0x26a>
   89c82:	3a02      	subs	r2, #2
   89c84:	442f      	add	r7, r5
   89c86:	1aff      	subs	r7, r7, r3
   89c88:	fbb7 f3f1 	udiv	r3, r7, r1
   89c8c:	fb01 7113 	mls	r1, r1, r3, r7
   89c90:	fb00 f003 	mul.w	r0, r0, r3
   89c94:	b2b6      	uxth	r6, r6
   89c96:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   89c9a:	4288      	cmp	r0, r1
   89c9c:	d908      	bls.n	89cb0 <__divdi3+0x94>
   89c9e:	1949      	adds	r1, r1, r5
   89ca0:	f103 37ff 	add.w	r7, r3, #4294967295
   89ca4:	f080 80f1 	bcs.w	89e8a <__divdi3+0x26e>
   89ca8:	4288      	cmp	r0, r1
   89caa:	f240 80ee 	bls.w	89e8a <__divdi3+0x26e>
   89cae:	3b02      	subs	r3, #2
   89cb0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   89cb4:	2300      	movs	r3, #0
   89cb6:	e003      	b.n	89cc0 <__divdi3+0xa4>
   89cb8:	428b      	cmp	r3, r1
   89cba:	d90a      	bls.n	89cd2 <__divdi3+0xb6>
   89cbc:	2300      	movs	r3, #0
   89cbe:	461a      	mov	r2, r3
   89cc0:	4610      	mov	r0, r2
   89cc2:	4619      	mov	r1, r3
   89cc4:	b114      	cbz	r4, 89ccc <__divdi3+0xb0>
   89cc6:	4240      	negs	r0, r0
   89cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   89ccc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   89cd0:	4770      	bx	lr
   89cd2:	fab3 f883 	clz	r8, r3
   89cd6:	f1b8 0f00 	cmp.w	r8, #0
   89cda:	f040 8088 	bne.w	89dee <__divdi3+0x1d2>
   89cde:	428b      	cmp	r3, r1
   89ce0:	d302      	bcc.n	89ce8 <__divdi3+0xcc>
   89ce2:	4282      	cmp	r2, r0
   89ce4:	f200 80e2 	bhi.w	89eac <__divdi3+0x290>
   89ce8:	2300      	movs	r3, #0
   89cea:	2201      	movs	r2, #1
   89cec:	e7e8      	b.n	89cc0 <__divdi3+0xa4>
   89cee:	b912      	cbnz	r2, 89cf6 <__divdi3+0xda>
   89cf0:	2301      	movs	r3, #1
   89cf2:	fbb3 f5f2 	udiv	r5, r3, r2
   89cf6:	fab5 f285 	clz	r2, r5
   89cfa:	2a00      	cmp	r2, #0
   89cfc:	d13a      	bne.n	89d74 <__divdi3+0x158>
   89cfe:	1b7f      	subs	r7, r7, r5
   89d00:	0c28      	lsrs	r0, r5, #16
   89d02:	fa1f fc85 	uxth.w	ip, r5
   89d06:	2301      	movs	r3, #1
   89d08:	fbb7 f1f0 	udiv	r1, r7, r0
   89d0c:	fb00 7711 	mls	r7, r0, r1, r7
   89d10:	fb0c f201 	mul.w	r2, ip, r1
   89d14:	ea4f 4816 	mov.w	r8, r6, lsr #16
   89d18:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   89d1c:	42ba      	cmp	r2, r7
   89d1e:	d907      	bls.n	89d30 <__divdi3+0x114>
   89d20:	197f      	adds	r7, r7, r5
   89d22:	f101 38ff 	add.w	r8, r1, #4294967295
   89d26:	d202      	bcs.n	89d2e <__divdi3+0x112>
   89d28:	42ba      	cmp	r2, r7
   89d2a:	f200 80c4 	bhi.w	89eb6 <__divdi3+0x29a>
   89d2e:	4641      	mov	r1, r8
   89d30:	1abf      	subs	r7, r7, r2
   89d32:	fbb7 f2f0 	udiv	r2, r7, r0
   89d36:	fb00 7012 	mls	r0, r0, r2, r7
   89d3a:	fb0c fc02 	mul.w	ip, ip, r2
   89d3e:	b2b6      	uxth	r6, r6
   89d40:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   89d44:	4584      	cmp	ip, r0
   89d46:	d907      	bls.n	89d58 <__divdi3+0x13c>
   89d48:	1940      	adds	r0, r0, r5
   89d4a:	f102 37ff 	add.w	r7, r2, #4294967295
   89d4e:	d202      	bcs.n	89d56 <__divdi3+0x13a>
   89d50:	4584      	cmp	ip, r0
   89d52:	f200 80ae 	bhi.w	89eb2 <__divdi3+0x296>
   89d56:	463a      	mov	r2, r7
   89d58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   89d5c:	e7b0      	b.n	89cc0 <__divdi3+0xa4>
   89d5e:	43e4      	mvns	r4, r4
   89d60:	4252      	negs	r2, r2
   89d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   89d66:	e762      	b.n	89c2e <__divdi3+0x12>
   89d68:	4240      	negs	r0, r0
   89d6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   89d6e:	f04f 34ff 	mov.w	r4, #4294967295
   89d72:	e759      	b.n	89c28 <__divdi3+0xc>
   89d74:	4095      	lsls	r5, r2
   89d76:	f1c2 0920 	rsb	r9, r2, #32
   89d7a:	fa27 f109 	lsr.w	r1, r7, r9
   89d7e:	fa26 f909 	lsr.w	r9, r6, r9
   89d82:	4097      	lsls	r7, r2
   89d84:	0c28      	lsrs	r0, r5, #16
   89d86:	fbb1 f8f0 	udiv	r8, r1, r0
   89d8a:	fb00 1118 	mls	r1, r0, r8, r1
   89d8e:	fa1f fc85 	uxth.w	ip, r5
   89d92:	fb0c f308 	mul.w	r3, ip, r8
   89d96:	ea49 0907 	orr.w	r9, r9, r7
   89d9a:	ea4f 4719 	mov.w	r7, r9, lsr #16
   89d9e:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   89da2:	428b      	cmp	r3, r1
   89da4:	fa06 f602 	lsl.w	r6, r6, r2
   89da8:	d908      	bls.n	89dbc <__divdi3+0x1a0>
   89daa:	1949      	adds	r1, r1, r5
   89dac:	f108 32ff 	add.w	r2, r8, #4294967295
   89db0:	d27a      	bcs.n	89ea8 <__divdi3+0x28c>
   89db2:	428b      	cmp	r3, r1
   89db4:	d978      	bls.n	89ea8 <__divdi3+0x28c>
   89db6:	f1a8 0802 	sub.w	r8, r8, #2
   89dba:	4429      	add	r1, r5
   89dbc:	1ac9      	subs	r1, r1, r3
   89dbe:	fbb1 f3f0 	udiv	r3, r1, r0
   89dc2:	fb00 1713 	mls	r7, r0, r3, r1
   89dc6:	fb0c f203 	mul.w	r2, ip, r3
   89dca:	fa1f f989 	uxth.w	r9, r9
   89dce:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   89dd2:	42ba      	cmp	r2, r7
   89dd4:	d907      	bls.n	89de6 <__divdi3+0x1ca>
   89dd6:	197f      	adds	r7, r7, r5
   89dd8:	f103 31ff 	add.w	r1, r3, #4294967295
   89ddc:	d260      	bcs.n	89ea0 <__divdi3+0x284>
   89dde:	42ba      	cmp	r2, r7
   89de0:	d95e      	bls.n	89ea0 <__divdi3+0x284>
   89de2:	3b02      	subs	r3, #2
   89de4:	442f      	add	r7, r5
   89de6:	1abf      	subs	r7, r7, r2
   89de8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   89dec:	e78c      	b.n	89d08 <__divdi3+0xec>
   89dee:	f1c8 0220 	rsb	r2, r8, #32
   89df2:	fa25 f102 	lsr.w	r1, r5, r2
   89df6:	fa03 fc08 	lsl.w	ip, r3, r8
   89dfa:	fa27 f302 	lsr.w	r3, r7, r2
   89dfe:	fa20 f202 	lsr.w	r2, r0, r2
   89e02:	fa07 f708 	lsl.w	r7, r7, r8
   89e06:	ea41 0c0c 	orr.w	ip, r1, ip
   89e0a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   89e0e:	fbb3 f1f9 	udiv	r1, r3, r9
   89e12:	fb09 3311 	mls	r3, r9, r1, r3
   89e16:	fa1f fa8c 	uxth.w	sl, ip
   89e1a:	fb0a fb01 	mul.w	fp, sl, r1
   89e1e:	4317      	orrs	r7, r2
   89e20:	0c3a      	lsrs	r2, r7, #16
   89e22:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   89e26:	459b      	cmp	fp, r3
   89e28:	fa05 f008 	lsl.w	r0, r5, r8
   89e2c:	d908      	bls.n	89e40 <__divdi3+0x224>
   89e2e:	eb13 030c 	adds.w	r3, r3, ip
   89e32:	f101 32ff 	add.w	r2, r1, #4294967295
   89e36:	d235      	bcs.n	89ea4 <__divdi3+0x288>
   89e38:	459b      	cmp	fp, r3
   89e3a:	d933      	bls.n	89ea4 <__divdi3+0x288>
   89e3c:	3902      	subs	r1, #2
   89e3e:	4463      	add	r3, ip
   89e40:	ebcb 0303 	rsb	r3, fp, r3
   89e44:	fbb3 f2f9 	udiv	r2, r3, r9
   89e48:	fb09 3312 	mls	r3, r9, r2, r3
   89e4c:	fb0a fa02 	mul.w	sl, sl, r2
   89e50:	b2bf      	uxth	r7, r7
   89e52:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   89e56:	45ba      	cmp	sl, r7
   89e58:	d908      	bls.n	89e6c <__divdi3+0x250>
   89e5a:	eb17 070c 	adds.w	r7, r7, ip
   89e5e:	f102 33ff 	add.w	r3, r2, #4294967295
   89e62:	d21b      	bcs.n	89e9c <__divdi3+0x280>
   89e64:	45ba      	cmp	sl, r7
   89e66:	d919      	bls.n	89e9c <__divdi3+0x280>
   89e68:	3a02      	subs	r2, #2
   89e6a:	4467      	add	r7, ip
   89e6c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   89e70:	fba5 0100 	umull	r0, r1, r5, r0
   89e74:	ebca 0707 	rsb	r7, sl, r7
   89e78:	428f      	cmp	r7, r1
   89e7a:	f04f 0300 	mov.w	r3, #0
   89e7e:	d30a      	bcc.n	89e96 <__divdi3+0x27a>
   89e80:	d005      	beq.n	89e8e <__divdi3+0x272>
   89e82:	462a      	mov	r2, r5
   89e84:	e71c      	b.n	89cc0 <__divdi3+0xa4>
   89e86:	4662      	mov	r2, ip
   89e88:	e6fd      	b.n	89c86 <__divdi3+0x6a>
   89e8a:	463b      	mov	r3, r7
   89e8c:	e710      	b.n	89cb0 <__divdi3+0x94>
   89e8e:	fa06 f608 	lsl.w	r6, r6, r8
   89e92:	4286      	cmp	r6, r0
   89e94:	d2f5      	bcs.n	89e82 <__divdi3+0x266>
   89e96:	1e6a      	subs	r2, r5, #1
   89e98:	2300      	movs	r3, #0
   89e9a:	e711      	b.n	89cc0 <__divdi3+0xa4>
   89e9c:	461a      	mov	r2, r3
   89e9e:	e7e5      	b.n	89e6c <__divdi3+0x250>
   89ea0:	460b      	mov	r3, r1
   89ea2:	e7a0      	b.n	89de6 <__divdi3+0x1ca>
   89ea4:	4611      	mov	r1, r2
   89ea6:	e7cb      	b.n	89e40 <__divdi3+0x224>
   89ea8:	4690      	mov	r8, r2
   89eaa:	e787      	b.n	89dbc <__divdi3+0x1a0>
   89eac:	4643      	mov	r3, r8
   89eae:	4642      	mov	r2, r8
   89eb0:	e706      	b.n	89cc0 <__divdi3+0xa4>
   89eb2:	3a02      	subs	r2, #2
   89eb4:	e750      	b.n	89d58 <__divdi3+0x13c>
   89eb6:	3902      	subs	r1, #2
   89eb8:	442f      	add	r7, r5
   89eba:	e739      	b.n	89d30 <__divdi3+0x114>

00089ebc <__udivdi3>:
   89ebc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   89ec0:	4614      	mov	r4, r2
   89ec2:	4605      	mov	r5, r0
   89ec4:	460e      	mov	r6, r1
   89ec6:	2b00      	cmp	r3, #0
   89ec8:	d143      	bne.n	89f52 <__udivdi3+0x96>
   89eca:	428a      	cmp	r2, r1
   89ecc:	d953      	bls.n	89f76 <__udivdi3+0xba>
   89ece:	fab2 f782 	clz	r7, r2
   89ed2:	b157      	cbz	r7, 89eea <__udivdi3+0x2e>
   89ed4:	f1c7 0620 	rsb	r6, r7, #32
   89ed8:	fa20 f606 	lsr.w	r6, r0, r6
   89edc:	fa01 f307 	lsl.w	r3, r1, r7
   89ee0:	fa02 f407 	lsl.w	r4, r2, r7
   89ee4:	fa00 f507 	lsl.w	r5, r0, r7
   89ee8:	431e      	orrs	r6, r3
   89eea:	0c21      	lsrs	r1, r4, #16
   89eec:	fbb6 f2f1 	udiv	r2, r6, r1
   89ef0:	fb01 6612 	mls	r6, r1, r2, r6
   89ef4:	b2a0      	uxth	r0, r4
   89ef6:	fb00 f302 	mul.w	r3, r0, r2
   89efa:	0c2f      	lsrs	r7, r5, #16
   89efc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   89f00:	42b3      	cmp	r3, r6
   89f02:	d909      	bls.n	89f18 <__udivdi3+0x5c>
   89f04:	1936      	adds	r6, r6, r4
   89f06:	f102 37ff 	add.w	r7, r2, #4294967295
   89f0a:	f080 80fd 	bcs.w	8a108 <__udivdi3+0x24c>
   89f0e:	42b3      	cmp	r3, r6
   89f10:	f240 80fa 	bls.w	8a108 <__udivdi3+0x24c>
   89f14:	3a02      	subs	r2, #2
   89f16:	4426      	add	r6, r4
   89f18:	1af6      	subs	r6, r6, r3
   89f1a:	fbb6 f3f1 	udiv	r3, r6, r1
   89f1e:	fb01 6113 	mls	r1, r1, r3, r6
   89f22:	fb00 f003 	mul.w	r0, r0, r3
   89f26:	b2ad      	uxth	r5, r5
   89f28:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   89f2c:	4288      	cmp	r0, r1
   89f2e:	d908      	bls.n	89f42 <__udivdi3+0x86>
   89f30:	1909      	adds	r1, r1, r4
   89f32:	f103 36ff 	add.w	r6, r3, #4294967295
   89f36:	f080 80e9 	bcs.w	8a10c <__udivdi3+0x250>
   89f3a:	4288      	cmp	r0, r1
   89f3c:	f240 80e6 	bls.w	8a10c <__udivdi3+0x250>
   89f40:	3b02      	subs	r3, #2
   89f42:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   89f46:	2300      	movs	r3, #0
   89f48:	4610      	mov	r0, r2
   89f4a:	4619      	mov	r1, r3
   89f4c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   89f50:	4770      	bx	lr
   89f52:	428b      	cmp	r3, r1
   89f54:	d84c      	bhi.n	89ff0 <__udivdi3+0x134>
   89f56:	fab3 f683 	clz	r6, r3
   89f5a:	2e00      	cmp	r6, #0
   89f5c:	d14f      	bne.n	89ffe <__udivdi3+0x142>
   89f5e:	428b      	cmp	r3, r1
   89f60:	d302      	bcc.n	89f68 <__udivdi3+0xac>
   89f62:	4282      	cmp	r2, r0
   89f64:	f200 80dd 	bhi.w	8a122 <__udivdi3+0x266>
   89f68:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   89f6c:	2300      	movs	r3, #0
   89f6e:	2201      	movs	r2, #1
   89f70:	4610      	mov	r0, r2
   89f72:	4619      	mov	r1, r3
   89f74:	4770      	bx	lr
   89f76:	b912      	cbnz	r2, 89f7e <__udivdi3+0xc2>
   89f78:	2401      	movs	r4, #1
   89f7a:	fbb4 f4f2 	udiv	r4, r4, r2
   89f7e:	fab4 f284 	clz	r2, r4
   89f82:	2a00      	cmp	r2, #0
   89f84:	f040 8082 	bne.w	8a08c <__udivdi3+0x1d0>
   89f88:	1b09      	subs	r1, r1, r4
   89f8a:	0c26      	lsrs	r6, r4, #16
   89f8c:	b2a7      	uxth	r7, r4
   89f8e:	2301      	movs	r3, #1
   89f90:	fbb1 f0f6 	udiv	r0, r1, r6
   89f94:	fb06 1110 	mls	r1, r6, r0, r1
   89f98:	fb07 f200 	mul.w	r2, r7, r0
   89f9c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   89fa0:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   89fa4:	428a      	cmp	r2, r1
   89fa6:	d907      	bls.n	89fb8 <__udivdi3+0xfc>
   89fa8:	1909      	adds	r1, r1, r4
   89faa:	f100 3cff 	add.w	ip, r0, #4294967295
   89fae:	d202      	bcs.n	89fb6 <__udivdi3+0xfa>
   89fb0:	428a      	cmp	r2, r1
   89fb2:	f200 80c8 	bhi.w	8a146 <__udivdi3+0x28a>
   89fb6:	4660      	mov	r0, ip
   89fb8:	1a89      	subs	r1, r1, r2
   89fba:	fbb1 f2f6 	udiv	r2, r1, r6
   89fbe:	fb06 1112 	mls	r1, r6, r2, r1
   89fc2:	fb07 f702 	mul.w	r7, r7, r2
   89fc6:	b2ad      	uxth	r5, r5
   89fc8:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   89fcc:	42af      	cmp	r7, r5
   89fce:	d908      	bls.n	89fe2 <__udivdi3+0x126>
   89fd0:	192c      	adds	r4, r5, r4
   89fd2:	f102 31ff 	add.w	r1, r2, #4294967295
   89fd6:	f080 809b 	bcs.w	8a110 <__udivdi3+0x254>
   89fda:	42a7      	cmp	r7, r4
   89fdc:	f240 8098 	bls.w	8a110 <__udivdi3+0x254>
   89fe0:	3a02      	subs	r2, #2
   89fe2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   89fe6:	4610      	mov	r0, r2
   89fe8:	4619      	mov	r1, r3
   89fea:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   89fee:	4770      	bx	lr
   89ff0:	2300      	movs	r3, #0
   89ff2:	461a      	mov	r2, r3
   89ff4:	4610      	mov	r0, r2
   89ff6:	4619      	mov	r1, r3
   89ff8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   89ffc:	4770      	bx	lr
   89ffe:	f1c6 0520 	rsb	r5, r6, #32
   8a002:	fa22 f705 	lsr.w	r7, r2, r5
   8a006:	fa03 f406 	lsl.w	r4, r3, r6
   8a00a:	fa21 f305 	lsr.w	r3, r1, r5
   8a00e:	fa01 fb06 	lsl.w	fp, r1, r6
   8a012:	fa20 f505 	lsr.w	r5, r0, r5
   8a016:	433c      	orrs	r4, r7
   8a018:	ea4f 4814 	mov.w	r8, r4, lsr #16
   8a01c:	fbb3 fcf8 	udiv	ip, r3, r8
   8a020:	fb08 331c 	mls	r3, r8, ip, r3
   8a024:	fa1f f984 	uxth.w	r9, r4
   8a028:	fb09 fa0c 	mul.w	sl, r9, ip
   8a02c:	ea45 0b0b 	orr.w	fp, r5, fp
   8a030:	ea4f 451b 	mov.w	r5, fp, lsr #16
   8a034:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   8a038:	459a      	cmp	sl, r3
   8a03a:	fa02 f206 	lsl.w	r2, r2, r6
   8a03e:	d904      	bls.n	8a04a <__udivdi3+0x18e>
   8a040:	191b      	adds	r3, r3, r4
   8a042:	f10c 35ff 	add.w	r5, ip, #4294967295
   8a046:	d36f      	bcc.n	8a128 <__udivdi3+0x26c>
   8a048:	46ac      	mov	ip, r5
   8a04a:	ebca 0303 	rsb	r3, sl, r3
   8a04e:	fbb3 f5f8 	udiv	r5, r3, r8
   8a052:	fb08 3315 	mls	r3, r8, r5, r3
   8a056:	fb09 f905 	mul.w	r9, r9, r5
   8a05a:	fa1f fb8b 	uxth.w	fp, fp
   8a05e:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   8a062:	45b9      	cmp	r9, r7
   8a064:	d904      	bls.n	8a070 <__udivdi3+0x1b4>
   8a066:	193f      	adds	r7, r7, r4
   8a068:	f105 33ff 	add.w	r3, r5, #4294967295
   8a06c:	d362      	bcc.n	8a134 <__udivdi3+0x278>
   8a06e:	461d      	mov	r5, r3
   8a070:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   8a074:	fbac 2302 	umull	r2, r3, ip, r2
   8a078:	ebc9 0707 	rsb	r7, r9, r7
   8a07c:	429f      	cmp	r7, r3
   8a07e:	f04f 0500 	mov.w	r5, #0
   8a082:	d34a      	bcc.n	8a11a <__udivdi3+0x25e>
   8a084:	d046      	beq.n	8a114 <__udivdi3+0x258>
   8a086:	4662      	mov	r2, ip
   8a088:	462b      	mov	r3, r5
   8a08a:	e75d      	b.n	89f48 <__udivdi3+0x8c>
   8a08c:	4094      	lsls	r4, r2
   8a08e:	f1c2 0920 	rsb	r9, r2, #32
   8a092:	fa21 fc09 	lsr.w	ip, r1, r9
   8a096:	4091      	lsls	r1, r2
   8a098:	fa20 f909 	lsr.w	r9, r0, r9
   8a09c:	0c26      	lsrs	r6, r4, #16
   8a09e:	fbbc f8f6 	udiv	r8, ip, r6
   8a0a2:	fb06 cc18 	mls	ip, r6, r8, ip
   8a0a6:	b2a7      	uxth	r7, r4
   8a0a8:	fb07 f308 	mul.w	r3, r7, r8
   8a0ac:	ea49 0901 	orr.w	r9, r9, r1
   8a0b0:	ea4f 4119 	mov.w	r1, r9, lsr #16
   8a0b4:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   8a0b8:	4563      	cmp	r3, ip
   8a0ba:	fa00 f502 	lsl.w	r5, r0, r2
   8a0be:	d909      	bls.n	8a0d4 <__udivdi3+0x218>
   8a0c0:	eb1c 0c04 	adds.w	ip, ip, r4
   8a0c4:	f108 32ff 	add.w	r2, r8, #4294967295
   8a0c8:	d23b      	bcs.n	8a142 <__udivdi3+0x286>
   8a0ca:	4563      	cmp	r3, ip
   8a0cc:	d939      	bls.n	8a142 <__udivdi3+0x286>
   8a0ce:	f1a8 0802 	sub.w	r8, r8, #2
   8a0d2:	44a4      	add	ip, r4
   8a0d4:	ebc3 0c0c 	rsb	ip, r3, ip
   8a0d8:	fbbc f3f6 	udiv	r3, ip, r6
   8a0dc:	fb06 c113 	mls	r1, r6, r3, ip
   8a0e0:	fb07 f203 	mul.w	r2, r7, r3
   8a0e4:	fa1f f989 	uxth.w	r9, r9
   8a0e8:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   8a0ec:	428a      	cmp	r2, r1
   8a0ee:	d907      	bls.n	8a100 <__udivdi3+0x244>
   8a0f0:	1909      	adds	r1, r1, r4
   8a0f2:	f103 30ff 	add.w	r0, r3, #4294967295
   8a0f6:	d222      	bcs.n	8a13e <__udivdi3+0x282>
   8a0f8:	428a      	cmp	r2, r1
   8a0fa:	d920      	bls.n	8a13e <__udivdi3+0x282>
   8a0fc:	3b02      	subs	r3, #2
   8a0fe:	4421      	add	r1, r4
   8a100:	1a89      	subs	r1, r1, r2
   8a102:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8a106:	e743      	b.n	89f90 <__udivdi3+0xd4>
   8a108:	463a      	mov	r2, r7
   8a10a:	e705      	b.n	89f18 <__udivdi3+0x5c>
   8a10c:	4633      	mov	r3, r6
   8a10e:	e718      	b.n	89f42 <__udivdi3+0x86>
   8a110:	460a      	mov	r2, r1
   8a112:	e766      	b.n	89fe2 <__udivdi3+0x126>
   8a114:	40b0      	lsls	r0, r6
   8a116:	4290      	cmp	r0, r2
   8a118:	d2b5      	bcs.n	8a086 <__udivdi3+0x1ca>
   8a11a:	f10c 32ff 	add.w	r2, ip, #4294967295
   8a11e:	2300      	movs	r3, #0
   8a120:	e712      	b.n	89f48 <__udivdi3+0x8c>
   8a122:	4633      	mov	r3, r6
   8a124:	4632      	mov	r2, r6
   8a126:	e70f      	b.n	89f48 <__udivdi3+0x8c>
   8a128:	459a      	cmp	sl, r3
   8a12a:	d98d      	bls.n	8a048 <__udivdi3+0x18c>
   8a12c:	f1ac 0c02 	sub.w	ip, ip, #2
   8a130:	4423      	add	r3, r4
   8a132:	e78a      	b.n	8a04a <__udivdi3+0x18e>
   8a134:	45b9      	cmp	r9, r7
   8a136:	d99a      	bls.n	8a06e <__udivdi3+0x1b2>
   8a138:	3d02      	subs	r5, #2
   8a13a:	4427      	add	r7, r4
   8a13c:	e798      	b.n	8a070 <__udivdi3+0x1b4>
   8a13e:	4603      	mov	r3, r0
   8a140:	e7de      	b.n	8a100 <__udivdi3+0x244>
   8a142:	4690      	mov	r8, r2
   8a144:	e7c6      	b.n	8a0d4 <__udivdi3+0x218>
   8a146:	3802      	subs	r0, #2
   8a148:	4421      	add	r1, r4
   8a14a:	e735      	b.n	89fb8 <__udivdi3+0xfc>
   8a14c:	20495754 	.word	0x20495754
   8a150:	00004b4f 	.word	0x00004b4f
   8a154:	73206e69 	.word	0x73206e69
   8a158:	0a646e65 	.word	0x0a646e65
   8a15c:	00000000 	.word	0x00000000
   8a160:	2056414e 	.word	0x2056414e
   8a164:	4b434150 	.word	0x4b434150
   8a168:	00000000 	.word	0x00000000
   8a16c:	49595254 	.word	0x49595254
   8a170:	5420474e 	.word	0x5420474e
   8a174:	4553204f 	.word	0x4553204f
   8a178:	000a444e 	.word	0x000a444e
   8a17c:	656e6f64 	.word	0x656e6f64
   8a180:	6e657320 	.word	0x6e657320
   8a184:	676e6964 	.word	0x676e6964
   8a188:	76616e20 	.word	0x76616e20
   8a18c:	0000000a 	.word	0x0000000a
   8a190:	20424150 	.word	0x20424150
   8a194:	4b434150 	.word	0x4b434150
   8a198:	00000030 	.word	0x00000030
   8a19c:	656e6f64 	.word	0x656e6f64
   8a1a0:	6e657320 	.word	0x6e657320
   8a1a4:	676e6964 	.word	0x676e6964
   8a1a8:	62617020 	.word	0x62617020
   8a1ac:	0000000a 	.word	0x0000000a
   8a1b0:	72617453 	.word	0x72617453
   8a1b4:	666f2074 	.word	0x666f2074
   8a1b8:	63657220 	.word	0x63657220
   8a1bc:	65766965 	.word	0x65766965
   8a1c0:	0000000a 	.word	0x0000000a
   8a1c4:	69595254 	.word	0x69595254
   8a1c8:	7420676e 	.word	0x7420676e
   8a1cc:	6572206f 	.word	0x6572206f
   8a1d0:	76696563 	.word	0x76696563
   8a1d4:	616e2065 	.word	0x616e2065
   8a1d8:	00000076 	.word	0x00000076
   8a1dc:	656e6f64 	.word	0x656e6f64
   8a1e0:	6e657320 	.word	0x6e657320
   8a1e4:	676e6964 	.word	0x676e6964
   8a1e8:	00000000 	.word	0x00000000
   8a1ec:	69595254 	.word	0x69595254
   8a1f0:	7420676e 	.word	0x7420676e
   8a1f4:	6572206f 	.word	0x6572206f
   8a1f8:	76696563 	.word	0x76696563
   8a1fc:	61502065 	.word	0x61502065
   8a200:	00000000 	.word	0x00000000
   8a204:	6c61430a 	.word	0x6c61430a
   8a208:	203d2063 	.word	0x203d2063
   8a20c:	00006425 	.word	0x00006425
   8a210:	6c6c6548 	.word	0x6c6c6548
   8a214:	00003f6f 	.word	0x00003f6f
   8a218:	6e69500a 	.word	0x6e69500a
   8a21c:	4b4f2073 	.word	0x4b4f2073
   8a220:	00000000 	.word	0x00000000
   8a224:	696e490a 	.word	0x696e490a
   8a228:	6e695f74 	.word	0x6e695f74
   8a22c:	72726574 	.word	0x72726574
   8a230:	20747075 	.word	0x20747075
   8a234:	00006b6f 	.word	0x00006b6f
   8a238:	6c65460a 	.word	0x6c65460a
   8a23c:	6472e476 	.word	0x6472e476
   8a240:	25203a65 	.word	0x25203a65
   8a244:	00000064 	.word	0x00000064
   8a248:	6972640a 	.word	0x6972640a
   8a24c:	6f436576 	.word	0x6f436576
   8a250:	20746e75 	.word	0x20746e75
   8a254:	6425203d 	.word	0x6425203d
   8a258:	00000000 	.word	0x00000000
   8a25c:	7665720a 	.word	0x7665720a
   8a260:	65737265 	.word	0x65737265
   8a264:	676e615f 	.word	0x676e615f
   8a268:	203a656c 	.word	0x203a656c
   8a26c:	00006425 	.word	0x00006425
   8a270:	7269640a 	.word	0x7269640a
   8a274:	5f746365 	.word	0x5f746365
   8a278:	6c676e61 	.word	0x6c676e61
   8a27c:	25203a65 	.word	0x25203a65
   8a280:	00000064 	.word	0x00000064
   8a284:	756f630a 	.word	0x756f630a
   8a288:	6e20746e 	.word	0x6e20746e
   8a28c:	006c6c75 	.word	0x006c6c75
   8a290:	756f630a 	.word	0x756f630a
   8a294:	725f746e 	.word	0x725f746e
   8a298:	74686769 	.word	0x74686769
   8a29c:	25203d20 	.word	0x25203d20
   8a2a0:	00000064 	.word	0x00000064
   8a2a4:	635f6c0a 	.word	0x635f6c0a
   8a2a8:	746e756f 	.word	0x746e756f
   8a2ac:	25203d20 	.word	0x25203d20
   8a2b0:	00000064 	.word	0x00000064
   8a2b4:	756f630a 	.word	0x756f630a
   8a2b8:	6c5f746e 	.word	0x6c5f746e
   8a2bc:	20746665 	.word	0x20746665
   8a2c0:	6425203d 	.word	0x6425203d
   8a2c4:	00000000 	.word	0x00000000
   8a2c8:	756f430a 	.word	0x756f430a
   8a2cc:	7265746e 	.word	0x7265746e
   8a2d0:	25203d20 	.word	0x25203d20
   8a2d4:	00000064 	.word	0x00000064
   8a2d8:	7275540a 	.word	0x7275540a
   8a2dc:	656c206e 	.word	0x656c206e
   8a2e0:	00007466 	.word	0x00007466
   8a2e4:	7275540a 	.word	0x7275540a
   8a2e8:	6972206e 	.word	0x6972206e
   8a2ec:	00746867 	.word	0x00746867
   8a2f0:	7275540a 	.word	0x7275540a
   8a2f4:	7261206e 	.word	0x7261206e
   8a2f8:	646e756f 	.word	0x646e756f
   8a2fc:	00000000 	.word	0x00000000
   8a300:	206e4f0a 	.word	0x206e4f0a
   8a304:	67726174 	.word	0x67726174
   8a308:	00007465 	.word	0x00007465
   8a30c:	7272450a 	.word	0x7272450a
   8a310:	0000726f 	.word	0x0000726f
   8a314:	7275630a 	.word	0x7275630a
   8a318:	746e6572 	.word	0x746e6572
   8a31c:	253d7820 	.word	0x253d7820
   8a320:	3d792064 	.word	0x3d792064
   8a324:	00006425 	.word	0x00006425
   8a328:	7361540a 	.word	0x7361540a
   8a32c:	6c55206b 	.word	0x6c55206b
   8a330:	6c617274 	.word	0x6c617274
   8a334:	0064756a 	.word	0x0064756a
   8a338:	7465470a 	.word	0x7465470a
   8a33c:	61747320 	.word	0x61747320
   8a340:	64207472 	.word	0x64207472
   8a344:	00617461 	.word	0x00617461
   8a348:	6174730a 	.word	0x6174730a
   8a34c:	64207472 	.word	0x64207472
   8a350:	2e617461 	.word	0x2e617461
   8a354:	253d7820 	.word	0x253d7820
   8a358:	3d792064 	.word	0x3d792064
   8a35c:	00006425 	.word	0x00006425
   8a360:	69614d0a 	.word	0x69614d0a
   8a364:	6163206e 	.word	0x6163206e
   8a368:	31206573 	.word	0x31206573
   8a36c:	00000000 	.word	0x00000000
   8a370:	7261740a 	.word	0x7261740a
   8a374:	20746567 	.word	0x20746567
   8a378:	6c676e61 	.word	0x6c676e61
   8a37c:	203d2065 	.word	0x203d2065
   8a380:	00006425 	.word	0x00006425
   8a384:	7275630a 	.word	0x7275630a
   8a388:	746e6572 	.word	0x746e6572
   8a38c:	6c676e41 	.word	0x6c676e41
   8a390:	203d2065 	.word	0x203d2065
   8a394:	00006425 	.word	0x00006425
   8a398:	69614d0a 	.word	0x69614d0a
   8a39c:	6163206e 	.word	0x6163206e
   8a3a0:	32206573 	.word	0x32206573
   8a3a4:	00000000 	.word	0x00000000
   8a3a8:	7369640a 	.word	0x7369640a
   8a3ac:	636e6174 	.word	0x636e6174
   8a3b0:	6f742065 	.word	0x6f742065
   8a3b4:	72617420 	.word	0x72617420
   8a3b8:	20746567 	.word	0x20746567
   8a3bc:	6425203d 	.word	0x6425203d
   8a3c0:	00000000 	.word	0x00000000
   8a3c4:	7369440a 	.word	0x7369440a
   8a3c8:	636e6174 	.word	0x636e6174
   8a3cc:	72642065 	.word	0x72642065
   8a3d0:	00657669 	.word	0x00657669
   8a3d4:	6972640a 	.word	0x6972640a
   8a3d8:	206e6576 	.word	0x206e6576
   8a3dc:	74206f74 	.word	0x74206f74
   8a3e0:	65677261 	.word	0x65677261
   8a3e4:	203d2074 	.word	0x203d2074
   8a3e8:	00006425 	.word	0x00006425
   8a3ec:	7369440a 	.word	0x7369440a
   8a3f0:	636e6174 	.word	0x636e6174
   8a3f4:	74732065 	.word	0x74732065
   8a3f8:	0000706f 	.word	0x0000706f
   8a3fc:	69614d0a 	.word	0x69614d0a
   8a400:	6163206e 	.word	0x6163206e
   8a404:	33206573 	.word	0x33206573
   8a408:	00000000 	.word	0x00000000
   8a40c:	69616d0a 	.word	0x69616d0a
   8a410:	6564206e 	.word	0x6564206e
   8a414:	6c756166 	.word	0x6c756166
   8a418:	00000074 	.word	0x00000074
   8a41c:	696e490a 	.word	0x696e490a
   8a420:	65732074 	.word	0x65732074
   8a424:	726f736e 	.word	0x726f736e
   8a428:	004b4f20 	.word	0x004b4f20
   8a42c:	7465530a 	.word	0x7465530a
   8a430:	68634520 	.word	0x68634520
   8a434:	2026206f 	.word	0x2026206f
   8a438:	67697254 	.word	0x67697254
   8a43c:	20726567 	.word	0x20726567
   8a440:	00004b4f 	.word	0x00004b4f
   8a444:	6365520a 	.word	0x6365520a
   8a448:	65766965 	.word	0x65766965
   8a44c:	25203a64 	.word	0x25203a64
   8a450:	00000064 	.word	0x00000064
   8a454:	6961460a 	.word	0x6961460a
   8a458:	2064656c 	.word	0x2064656c
   8a45c:	72206f74 	.word	0x72206f74
   8a460:	69656365 	.word	0x69656365
   8a464:	00006576 	.word	0x00006576
   8a468:	746f520a 	.word	0x746f520a
   8a46c:	20657461 	.word	0x20657461
   8a470:	20746f6e 	.word	0x20746f6e
   8a474:	706d6f63 	.word	0x706d6f63
   8a478:	6574656c 	.word	0x6574656c
   8a47c:	00000064 	.word	0x00000064
   8a480:	6a624f0a 	.word	0x6a624f0a
   8a484:	20746365 	.word	0x20746365
   8a488:	20746f6e 	.word	0x20746f6e
   8a48c:	6e756f66 	.word	0x6e756f66
   8a490:	00000064 	.word	0x00000064
   8a494:	6665440a 	.word	0x6665440a
   8a498:	746c7561 	.word	0x746c7561
   8a49c:	00000000 	.word	0x00000000
   8a4a0:	736e6f4b 	.word	0x736e6f4b
   8a4a4:	6e656c6f 	.word	0x6e656c6f
   8a4a8:	61657220 	.word	0x61657220
   8a4ac:	000a6f64 	.word	0x000a6f64
   8a4b0:	3d3d3d3d 	.word	0x3d3d3d3d
   8a4b4:	3d3d3d3d 	.word	0x3d3d3d3d
   8a4b8:	3d3d3d3d 	.word	0x3d3d3d3d
   8a4bc:	0a3d3d3d 	.word	0x0a3d3d3d
   8a4c0:	00000000 	.word	0x00000000
   8a4c4:	25202d2d 	.word	0x25202d2d
   8a4c8:	000d0a73 	.word	0x000d0a73
   8a4cc:	75647241 	.word	0x75647241
   8a4d0:	206f6e69 	.word	0x206f6e69
   8a4d4:	2f657544 	.word	0x2f657544
   8a4d8:	00000058 	.word	0x00000058
   8a4dc:	43202d2d 	.word	0x43202d2d
   8a4e0:	69706d6f 	.word	0x69706d6f
   8a4e4:	3a64656c 	.word	0x3a64656c
   8a4e8:	20732520 	.word	0x20732520
   8a4ec:	2d207325 	.word	0x2d207325
   8a4f0:	000d0a2d 	.word	0x000d0a2d
   8a4f4:	2079614d 	.word	0x2079614d
   8a4f8:	32203232 	.word	0x32203232
   8a4fc:	00373130 	.word	0x00373130
   8a500:	343a3331 	.word	0x343a3331
   8a504:	37343a31 	.word	0x37343a31
   8a508:	00000000 	.word	0x00000000
   8a50c:	6c696857 	.word	0x6c696857
   8a510:	74617365 	.word	0x74617365
   8a514:	006e6573 	.word	0x006e6573
   8a518:	09097325 	.word	0x09097325
   8a51c:	25096325 	.word	0x25096325
   8a520:	75250975 	.word	0x75250975
   8a524:	0d752509 	.word	0x0d752509
   8a528:	0000000a 	.word	0x0000000a
   8a52c:	454c4449 	.word	0x454c4449
   8a530:	00000000 	.word	0x00000000
   8a534:	20726d54 	.word	0x20726d54
   8a538:	00637653 	.word	0x00637653
   8a53c:	696e490a 	.word	0x696e490a
   8a540:	6b6f2074 	.word	0x6b6f2074
   8a544:	00000000 	.word	0x00000000
   8a548:	55474552 	.word	0x55474552
   8a54c:	4f54414c 	.word	0x4f54414c
   8a550:	00000052 	.word	0x00000052
   8a554:	6c696146 	.word	0x6c696146
   8a558:	74206465 	.word	0x74206465
   8a55c:	52206568 	.word	0x52206568
   8a560:	6c756765 	.word	0x6c756765
   8a564:	726f7461 	.word	0x726f7461
   8a568:	73615420 	.word	0x73615420
   8a56c:	000a0d6b 	.word	0x000a0d6b
   8a570:	52544c55 	.word	0x52544c55
   8a574:	554a4c41 	.word	0x554a4c41
   8a578:	45532044 	.word	0x45532044
   8a57c:	524f534e 	.word	0x524f534e
   8a580:	00000000 	.word	0x00000000
   8a584:	6c696146 	.word	0x6c696146
   8a588:	74206465 	.word	0x74206465
   8a58c:	55206568 	.word	0x55206568
   8a590:	6172746c 	.word	0x6172746c
   8a594:	74736944 	.word	0x74736944
   8a598:	65636e61 	.word	0x65636e61
   8a59c:	6e655320 	.word	0x6e655320
   8a5a0:	20726f73 	.word	0x20726f73
   8a5a4:	6b736154 	.word	0x6b736154
   8a5a8:	00000a0d 	.word	0x00000a0d
   8a5ac:	736f6361 	.word	0x736f6361
   8a5b0:	00000000 	.word	0x00000000
   8a5b4:	74727173 	.word	0x74727173
   8a5b8:	00000000 	.word	0x00000000
   8a5bc:	00000043 	.word	0x00000043

0008a5c0 <_global_impure_ptr>:
   8a5c0:	200701b0                                ... 

0008a5c4 <zeroes.6763>:
   8a5c4:	30303030 30303030 30303030 30303030     0000000000000000
   8a5d4:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   8a5e4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   8a5f4:	00000000 33323130 37363534 62613938     ....0123456789ab
   8a604:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

0008a614 <blanks.6762>:
   8a614:	20202020 20202020 20202020 20202020                     

0008a624 <zeroes.6721>:
   8a624:	30303030 30303030 30303030 30303030     0000000000000000

0008a634 <blanks.6720>:
   8a634:	20202020 20202020 20202020 20202020                     
   8a644:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   8a654:	49534f50 00000058 0000002e              POSIX.......

0008a660 <__mprec_tens>:
   8a660:	00000000 3ff00000 00000000 40240000     .......?......$@
   8a670:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8a680:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8a690:	00000000 412e8480 00000000 416312d0     .......A......cA
   8a6a0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8a6b0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8a6c0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8a6d0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8a6e0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8a6f0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8a700:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8a710:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8a720:	79d99db4 44ea7843                       ...yCx.D

0008a728 <__mprec_bigtens>:
   8a728:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8a738:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8a748:	7f73bf3c 75154fdd                       <.s..O.u

0008a750 <p05.5269>:
   8a750:	00000005 00000019 0000007d              ........}...

0008a75c <_init>:
   8a75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a75e:	bf00      	nop
   8a760:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8a762:	bc08      	pop	{r3}
   8a764:	469e      	mov	lr, r3
   8a766:	4770      	bx	lr

0008a768 <__init_array_start>:
   8a768:	00086c45 	.word	0x00086c45

0008a76c <__frame_dummy_init_array_entry>:
   8a76c:	00080119                                ....

0008a770 <_fini>:
   8a770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a772:	bf00      	nop
   8a774:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8a776:	bc08      	pop	{r3}
   8a778:	469e      	mov	lr, r3
   8a77a:	4770      	bx	lr

0008a77c <__fini_array_start>:
   8a77c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	200701a8 	.word	0x200701a8

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <packet_received_pab>:
	...
20070134:	20070a74 00000003 00000002              t.. ........

20070140 <packet_received_nav>:
	...
20070148:	20070a78 00000005 00000003              x.. ........

20070154 <packet_pab>:
	...
2007015c:	20070a6c 00000003 00000002              l.. ........

20070168 <packet_nav>:
	...
20070170:	20070a70 00000001 00000003              p.. ........

2007017c <Kp>:
2007017c:	00000004                                ....

20070180 <speed>:
20070180:	00000672                                r...

20070184 <xtest2>:
20070184:	00c800c8                                         ..

20070186 <ytest2>:
20070186:	000a00c8                                         ..

20070188 <sensordistance>:
20070188:	0000000a                                ....

2007018c <main_case>:
2007018c:	00000001                                ....

20070190 <dir>:
20070190:	0000002d                                -...

20070194 <currentAngle>:
20070194:	0000005a                                Z...

20070198 <angle>:
20070198:	00000087                                ....

2007019c <uxCriticalNesting>:
2007019c:	aaaaaaaa                                ....

200701a0 <xFreeBytesRemaining>:
200701a0:	00008000                                ....

200701a4 <xNextTaskUnblockTime>:
200701a4:	0001ffff                                         ..

200701a6 <g_interrupt_enabled>:
200701a6:	09000001                                         ..

200701a8 <SystemCoreClock>:
200701a8:	003d0900                                ..=.

200701ac <__fdlib_version>:
200701ac:	00000001                                ....

200701b0 <impure_data>:
200701b0:	00000000 2007049c 20070504 2007056c     ....... ... l.. 
	...
200701e4:	0008a5bc 00000000 00000000 00000000     ................
	...
20070258:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070268:	0005deec 0000000b 00000000 00000000     ................
	...

200705d8 <_impure_ptr>:
200705d8:	200701b0                                ... 

200705dc <lconv>:
200705dc:	0008a65c 0008a4c0 0008a4c0 0008a4c0     \...............
200705ec:	0008a4c0 0008a4c0 0008a4c0 0008a4c0     ................
200705fc:	0008a4c0 0008a4c0 ffffffff ffffffff     ................
2007060c:	ffffffff 0000ffff                       ........

20070614 <lc_ctype_charset>:
20070614:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070634 <__mb_cur_max>:
20070634:	00000001                                ....

20070638 <__malloc_av_>:
	...
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 
200709e0:	200709d8 200709d8 200709e0 200709e0     ... ... ... ... 
200709f0:	200709e8 200709e8 200709f0 200709f0     ... ... ... ... 
20070a00:	200709f8 200709f8 20070a00 20070a00     ... ... ... ... 
20070a10:	20070a08 20070a08 20070a10 20070a10     ... ... ... ... 
20070a20:	20070a18 20070a18 20070a20 20070a20     ... ...  ..  .. 
20070a30:	20070a28 20070a28 20070a30 20070a30     (.. (.. 0.. 0.. 

20070a40 <__malloc_trim_threshold>:
20070a40:	00020000                                ....

20070a44 <__malloc_sbrk_base>:
20070a44:	ffffffff                                ....

20070a48 <__wctomb>:
20070a48:	000898f1                                ....
