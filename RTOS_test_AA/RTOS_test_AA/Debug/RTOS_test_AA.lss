
RTOS_test_AA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a950  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008a950  0008a950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a54  20070000  0008a958  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000083c0  20070a58  0008b3b0  00018a54  2**3
                  ALLOC
  4 .stack        00002000  20078e18  00093770  00018a54  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00018a54  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00018a7d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00019172  00000000  00000000  00018ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004634  00000000  00000000  00031c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000090e9  00000000  00000000  0003627e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001028  00000000  00000000  0003f367  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000011b8  00000000  00000000  0004038f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001d4f7  00000000  00000000  00041547  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001a67e  00000000  00000000  0005ea3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006b87b  00000000  00000000  000790bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003410  00000000  00000000  000e4938  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007ae18 	.word	0x2007ae18
   80004:	00083305 	.word	0x00083305
   80008:	00083301 	.word	0x00083301
   8000c:	00083301 	.word	0x00083301
   80010:	00083301 	.word	0x00083301
   80014:	00083301 	.word	0x00083301
   80018:	00083301 	.word	0x00083301
	...
   8002c:	00081889 	.word	0x00081889
   80030:	00083301 	.word	0x00083301
   80034:	00000000 	.word	0x00000000
   80038:	00081905 	.word	0x00081905
   8003c:	00081941 	.word	0x00081941
   80040:	00083301 	.word	0x00083301
   80044:	00083301 	.word	0x00083301
   80048:	00083301 	.word	0x00083301
   8004c:	00083301 	.word	0x00083301
   80050:	00083301 	.word	0x00083301
   80054:	00083301 	.word	0x00083301
   80058:	00083301 	.word	0x00083301
   8005c:	00083301 	.word	0x00083301
   80060:	00083301 	.word	0x00083301
   80064:	00083301 	.word	0x00083301
   80068:	00000000 	.word	0x00000000
   8006c:	00083171 	.word	0x00083171
   80070:	00083185 	.word	0x00083185
   80074:	00083199 	.word	0x00083199
   80078:	000831ad 	.word	0x000831ad
	...
   80084:	00081461 	.word	0x00081461
   80088:	00083301 	.word	0x00083301
   8008c:	00083301 	.word	0x00083301
   80090:	00083301 	.word	0x00083301
   80094:	00083301 	.word	0x00083301
   80098:	00083301 	.word	0x00083301
   8009c:	00083301 	.word	0x00083301
   800a0:	00083301 	.word	0x00083301
   800a4:	00000000 	.word	0x00000000
   800a8:	00083301 	.word	0x00083301
   800ac:	00083301 	.word	0x00083301
   800b0:	00083301 	.word	0x00083301
   800b4:	00083301 	.word	0x00083301
   800b8:	00083301 	.word	0x00083301
   800bc:	00083301 	.word	0x00083301
   800c0:	00083301 	.word	0x00083301
   800c4:	00083301 	.word	0x00083301
   800c8:	00083301 	.word	0x00083301
   800cc:	00083301 	.word	0x00083301
   800d0:	00083301 	.word	0x00083301
   800d4:	00083301 	.word	0x00083301
   800d8:	00083301 	.word	0x00083301
   800dc:	00083301 	.word	0x00083301
   800e0:	00083301 	.word	0x00083301
   800e4:	00083301 	.word	0x00083301
   800e8:	00083301 	.word	0x00083301
   800ec:	00083301 	.word	0x00083301
   800f0:	00083301 	.word	0x00083301

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070a58 	.word	0x20070a58
   80110:	00000000 	.word	0x00000000
   80114:	0008a958 	.word	0x0008a958

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	0008a958 	.word	0x0008a958
   8013c:	20070a5c 	.word	0x20070a5c
   80140:	0008a958 	.word	0x0008a958
   80144:	00000000 	.word	0x00000000

00080148 <init_twi_functions>:
};

/************************************************************************/
/*Sätter Ardunino Due till Master på twi bussen		                    */
/************************************************************************/
void init_twi_functions(){
   80148:	b500      	push	{lr}
   8014a:	b085      	sub	sp, #20
	twi_master_options_t opt;
	opt.speed = TWI_SPEED;
   8014c:	4b12      	ldr	r3, [pc, #72]	; (80198 <init_twi_functions+0x50>)
   8014e:	9302      	str	r3, [sp, #8]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_cpu_hz();
   80150:	4b12      	ldr	r3, [pc, #72]	; (8019c <init_twi_functions+0x54>)
   80152:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
   80154:	2300      	movs	r3, #0
   80156:	f88d 300d 	strb.w	r3, [sp, #13]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8015a:	2016      	movs	r0, #22
   8015c:	4b10      	ldr	r3, [pc, #64]	; (801a0 <init_twi_functions+0x58>)
   8015e:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   80160:	4810      	ldr	r0, [pc, #64]	; (801a4 <init_twi_functions+0x5c>)
   80162:	a901      	add	r1, sp, #4
   80164:	4b10      	ldr	r3, [pc, #64]	; (801a8 <init_twi_functions+0x60>)
   80166:	4798      	blx	r3
	if(twi_master_setup(TWI_MASTER_NAV,&opt) == TWI_SUCCESS){
   80168:	b910      	cbnz	r0, 80170 <init_twi_functions+0x28>
		printf("TWI NAV OK");
   8016a:	4810      	ldr	r0, [pc, #64]	; (801ac <init_twi_functions+0x64>)
   8016c:	4b10      	ldr	r3, [pc, #64]	; (801b0 <init_twi_functions+0x68>)
   8016e:	4798      	blx	r3
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_cpu_hz();
   80170:	4b0a      	ldr	r3, [pc, #40]	; (8019c <init_twi_functions+0x54>)
   80172:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
   80174:	2300      	movs	r3, #0
   80176:	f88d 300d 	strb.w	r3, [sp, #13]
   8017a:	2017      	movs	r0, #23
   8017c:	4b08      	ldr	r3, [pc, #32]	; (801a0 <init_twi_functions+0x58>)
   8017e:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   80180:	480c      	ldr	r0, [pc, #48]	; (801b4 <init_twi_functions+0x6c>)
   80182:	a901      	add	r1, sp, #4
   80184:	4b08      	ldr	r3, [pc, #32]	; (801a8 <init_twi_functions+0x60>)
   80186:	4798      	blx	r3
	}
	if(twi_master_setup(TWI_MASTER_PAB,&opt) == TWI_SUCCESS){
   80188:	b910      	cbnz	r0, 80190 <init_twi_functions+0x48>
		printf("TWI PAB OK");
   8018a:	480b      	ldr	r0, [pc, #44]	; (801b8 <init_twi_functions+0x70>)
   8018c:	4b08      	ldr	r3, [pc, #32]	; (801b0 <init_twi_functions+0x68>)
   8018e:	4798      	blx	r3
	}
}
   80190:	b005      	add	sp, #20
   80192:	f85d fb04 	ldr.w	pc, [sp], #4
   80196:	bf00      	nop
   80198:	000186a0 	.word	0x000186a0
   8019c:	0501bd00 	.word	0x0501bd00
   801a0:	000832a9 	.word	0x000832a9
   801a4:	4008c000 	.word	0x4008c000
   801a8:	00080525 	.word	0x00080525
   801ac:	0008a30c 	.word	0x0008a30c
   801b0:	00084751 	.word	0x00084751
   801b4:	40090000 	.word	0x40090000
   801b8:	0008a318 	.word	0x0008a318

000801bc <send_package>:
		break;
	}	
}


void  send_package(uint8_t twi_state,uint8_t slave){
   801bc:	b570      	push	{r4, r5, r6, lr}
   801be:	4605      	mov	r5, r0
   801c0:	460c      	mov	r4, r1
	printf("in send\n");
   801c2:	481a      	ldr	r0, [pc, #104]	; (8022c <send_package+0x70>)
   801c4:	4b1a      	ldr	r3, [pc, #104]	; (80230 <send_package+0x74>)
   801c6:	4798      	blx	r3
	char sts[20];
	
	if(TWI_SLAVE_NAVIGERING == slave){
   801c8:	2c03      	cmp	r4, #3
   801ca:	d116      	bne.n	801fa <send_package+0x3e>
		printf("NAV PACK");
   801cc:	4819      	ldr	r0, [pc, #100]	; (80234 <send_package+0x78>)
   801ce:	4c18      	ldr	r4, [pc, #96]	; (80230 <send_package+0x74>)
   801d0:	47a0      	blx	r4
		send_data_nav[0] = twi_state;
   801d2:	4a19      	ldr	r2, [pc, #100]	; (80238 <send_package+0x7c>)
   801d4:	7015      	strb	r5, [r2, #0]
		packet_nav.chip = slave;
   801d6:	4b19      	ldr	r3, [pc, #100]	; (8023c <send_package+0x80>)
   801d8:	2103      	movs	r1, #3
   801da:	7419      	strb	r1, [r3, #16]
		packet_nav.buffer = (void *)send_data_nav;
   801dc:	609a      	str	r2, [r3, #8]
		printf("TRYING TO SEND\n");
   801de:	4818      	ldr	r0, [pc, #96]	; (80240 <send_package+0x84>)
   801e0:	47a0      	blx	r4
		while(twi_master_write(TWI_MASTER_NAV,&packet_nav));
   801e2:	4e18      	ldr	r6, [pc, #96]	; (80244 <send_package+0x88>)
   801e4:	4d15      	ldr	r5, [pc, #84]	; (8023c <send_package+0x80>)
   801e6:	4c18      	ldr	r4, [pc, #96]	; (80248 <send_package+0x8c>)
   801e8:	4630      	mov	r0, r6
   801ea:	4629      	mov	r1, r5
   801ec:	47a0      	blx	r4
   801ee:	2800      	cmp	r0, #0
   801f0:	d1fa      	bne.n	801e8 <send_package+0x2c>
		printf("done sending nav\n");
   801f2:	4816      	ldr	r0, [pc, #88]	; (8024c <send_package+0x90>)
   801f4:	4b0e      	ldr	r3, [pc, #56]	; (80230 <send_package+0x74>)
   801f6:	4798      	blx	r3
   801f8:	bd70      	pop	{r4, r5, r6, pc}
		
	}else if(TWI_SLAVE_PABYGGNAD == slave){
   801fa:	2c02      	cmp	r4, #2
   801fc:	d115      	bne.n	8022a <send_package+0x6e>
		printf("PAB PACK0");
   801fe:	4814      	ldr	r0, [pc, #80]	; (80250 <send_package+0x94>)
   80200:	4c0b      	ldr	r4, [pc, #44]	; (80230 <send_package+0x74>)
   80202:	47a0      	blx	r4
		send_data_pab[0] = twi_state;
   80204:	4a13      	ldr	r2, [pc, #76]	; (80254 <send_package+0x98>)
   80206:	7015      	strb	r5, [r2, #0]
		packet_pab.chip = slave;
   80208:	4b13      	ldr	r3, [pc, #76]	; (80258 <send_package+0x9c>)
   8020a:	2102      	movs	r1, #2
   8020c:	7419      	strb	r1, [r3, #16]
		packet_pab.buffer = (void *)send_data_pab;
   8020e:	609a      	str	r2, [r3, #8]
		printf("TRYING TO SEND\n");
   80210:	480b      	ldr	r0, [pc, #44]	; (80240 <send_package+0x84>)
   80212:	47a0      	blx	r4
		while(twi_master_write(TWI_MASTER_NAV,&packet_pab));
   80214:	4e0b      	ldr	r6, [pc, #44]	; (80244 <send_package+0x88>)
   80216:	4d10      	ldr	r5, [pc, #64]	; (80258 <send_package+0x9c>)
   80218:	4c0b      	ldr	r4, [pc, #44]	; (80248 <send_package+0x8c>)
   8021a:	4630      	mov	r0, r6
   8021c:	4629      	mov	r1, r5
   8021e:	47a0      	blx	r4
   80220:	2800      	cmp	r0, #0
   80222:	d1fa      	bne.n	8021a <send_package+0x5e>
		printf("done sending pab\n");
   80224:	480d      	ldr	r0, [pc, #52]	; (8025c <send_package+0xa0>)
   80226:	4b02      	ldr	r3, [pc, #8]	; (80230 <send_package+0x74>)
   80228:	4798      	blx	r3
   8022a:	bd70      	pop	{r4, r5, r6, pc}
   8022c:	0008a324 	.word	0x0008a324
   80230:	00084751 	.word	0x00084751
   80234:	0008a330 	.word	0x0008a330
   80238:	20070a78 	.word	0x20070a78
   8023c:	20070174 	.word	0x20070174
   80240:	0008a33c 	.word	0x0008a33c
   80244:	4008c000 	.word	0x4008c000
   80248:	00080639 	.word	0x00080639
   8024c:	0008a34c 	.word	0x0008a34c
   80250:	0008a360 	.word	0x0008a360
   80254:	20070a74 	.word	0x20070a74
   80258:	20070160 	.word	0x20070160
   8025c:	0008a36c 	.word	0x0008a36c

00080260 <receive_package>:
}

/************************************************************************/
/*                                                                      */
/************************************************************************/
void receive_package(uint8_t slave){
   80260:	b570      	push	{r4, r5, r6, lr}
   80262:	4604      	mov	r4, r0
	printf("Start of receive\n");
   80264:	4812      	ldr	r0, [pc, #72]	; (802b0 <receive_package+0x50>)
   80266:	4b13      	ldr	r3, [pc, #76]	; (802b4 <receive_package+0x54>)
   80268:	4798      	blx	r3
	char str[20];
	
	if (slave == TWI_SLAVE_NAVIGERING){
   8026a:	2c03      	cmp	r4, #3
   8026c:	d10e      	bne.n	8028c <receive_package+0x2c>
		printf("TRYing to receive nav");
   8026e:	4812      	ldr	r0, [pc, #72]	; (802b8 <receive_package+0x58>)
   80270:	4b10      	ldr	r3, [pc, #64]	; (802b4 <receive_package+0x54>)
   80272:	4798      	blx	r3
		while(twi_master_read(TWI_MASTER_NAV, &packet_received_nav) != TWI_SUCCESS);
   80274:	4e11      	ldr	r6, [pc, #68]	; (802bc <receive_package+0x5c>)
   80276:	4d12      	ldr	r5, [pc, #72]	; (802c0 <receive_package+0x60>)
   80278:	4c12      	ldr	r4, [pc, #72]	; (802c4 <receive_package+0x64>)
   8027a:	4630      	mov	r0, r6
   8027c:	4629      	mov	r1, r5
   8027e:	47a0      	blx	r4
   80280:	2800      	cmp	r0, #0
   80282:	d1fa      	bne.n	8027a <receive_package+0x1a>
		printf("done sending");
   80284:	4810      	ldr	r0, [pc, #64]	; (802c8 <receive_package+0x68>)
   80286:	4b0b      	ldr	r3, [pc, #44]	; (802b4 <receive_package+0x54>)
   80288:	4798      	blx	r3
   8028a:	bd70      	pop	{r4, r5, r6, pc}
	
	}else if(slave == TWI_SLAVE_PABYGGNAD){
   8028c:	2c02      	cmp	r4, #2
   8028e:	d10d      	bne.n	802ac <receive_package+0x4c>
		printf("TRYing to receive Pa");
   80290:	480e      	ldr	r0, [pc, #56]	; (802cc <receive_package+0x6c>)
   80292:	4b08      	ldr	r3, [pc, #32]	; (802b4 <receive_package+0x54>)
   80294:	4798      	blx	r3
		while(twi_master_read(TWI_MASTER_NAV, &packet_received_pab) != TWI_SUCCESS);
   80296:	4e09      	ldr	r6, [pc, #36]	; (802bc <receive_package+0x5c>)
   80298:	4d0d      	ldr	r5, [pc, #52]	; (802d0 <receive_package+0x70>)
   8029a:	4c0a      	ldr	r4, [pc, #40]	; (802c4 <receive_package+0x64>)
   8029c:	4630      	mov	r0, r6
   8029e:	4629      	mov	r1, r5
   802a0:	47a0      	blx	r4
   802a2:	2800      	cmp	r0, #0
   802a4:	d1fa      	bne.n	8029c <receive_package+0x3c>
		printf("done sending");
   802a6:	4808      	ldr	r0, [pc, #32]	; (802c8 <receive_package+0x68>)
   802a8:	4b02      	ldr	r3, [pc, #8]	; (802b4 <receive_package+0x54>)
   802aa:	4798      	blx	r3
   802ac:	bd70      	pop	{r4, r5, r6, pc}
   802ae:	bf00      	nop
   802b0:	0008a380 	.word	0x0008a380
   802b4:	00084751 	.word	0x00084751
   802b8:	0008a394 	.word	0x0008a394
   802bc:	4008c000 	.word	0x4008c000
   802c0:	2007014c 	.word	0x2007014c
   802c4:	00080565 	.word	0x00080565
   802c8:	0008a3ac 	.word	0x0008a3ac
   802cc:	0008a3bc 	.word	0x0008a3bc
   802d0:	20070138 	.word	0x20070138

000802d4 <na_sendstatus>:

/************************************************************************/
/* Tar han om kommunikationen mellan mastern och						*/
/* slaven för positionssytemet											*/
/************************************************************************/
void na_sendstatus(TwiCmd twi_state){
   802d4:	b508      	push	{r3, lr}
	char ar[20];
	switch(twi_state){
   802d6:	3850      	subs	r0, #80	; 0x50
   802d8:	2805      	cmp	r0, #5
   802da:	d872      	bhi.n	803c2 <na_sendstatus+0xee>
   802dc:	e8df f000 	tbb	[pc, r0]
   802e0:	30160e03 	.word	0x30160e03
   802e4:	5c46      	.short	0x5c46
		//Led 1 position
		case XY1:
		send_package(XY1,TWI_SLAVE_NAVIGERING);
   802e6:	2050      	movs	r0, #80	; 0x50
   802e8:	2103      	movs	r1, #3
   802ea:	4b36      	ldr	r3, [pc, #216]	; (803c4 <na_sendstatus+0xf0>)
   802ec:	4798      	blx	r3
		vTaskDelay(10);
   802ee:	200a      	movs	r0, #10
   802f0:	4b35      	ldr	r3, [pc, #212]	; (803c8 <na_sendstatus+0xf4>)
   802f2:	4798      	blx	r3
		receive_package(TWI_SLAVE_NAVIGERING);
   802f4:	2003      	movs	r0, #3
   802f6:	4b35      	ldr	r3, [pc, #212]	; (803cc <na_sendstatus+0xf8>)
   802f8:	4798      	blx	r3
		break;
   802fa:	bd08      	pop	{r3, pc}
		
		//Led 2 position
		case XY2:
		send_package(XY2,TWI_SLAVE_NAVIGERING);
   802fc:	2051      	movs	r0, #81	; 0x51
   802fe:	2103      	movs	r1, #3
   80300:	4b30      	ldr	r3, [pc, #192]	; (803c4 <na_sendstatus+0xf0>)
   80302:	4798      	blx	r3
		receive_package(TWI_SLAVE_NAVIGERING);
   80304:	2003      	movs	r0, #3
   80306:	4b31      	ldr	r3, [pc, #196]	; (803cc <na_sendstatus+0xf8>)
   80308:	4798      	blx	r3
		break;
   8030a:	bd08      	pop	{r3, pc}
		
		//socket position
		case SOCKETXY:
		send_package(SOCKETXY,TWI_SLAVE_NAVIGERING);
   8030c:	2052      	movs	r0, #82	; 0x52
   8030e:	2103      	movs	r1, #3
   80310:	4b2c      	ldr	r3, [pc, #176]	; (803c4 <na_sendstatus+0xf0>)
   80312:	4798      	blx	r3
		delayMicroseconds(50000);
   80314:	f24c 3050 	movw	r0, #50000	; 0xc350
   80318:	4b2d      	ldr	r3, [pc, #180]	; (803d0 <na_sendstatus+0xfc>)
   8031a:	4798      	blx	r3
		receive_package(TWI_SLAVE_NAVIGERING);
   8031c:	2003      	movs	r0, #3
   8031e:	4b2b      	ldr	r3, [pc, #172]	; (803cc <na_sendstatus+0xf8>)
   80320:	4798      	blx	r3
		objectinfo[0].theObject = SOCK;
   80322:	4a2c      	ldr	r2, [pc, #176]	; (803d4 <na_sendstatus+0x100>)
   80324:	2302      	movs	r3, #2
   80326:	7013      	strb	r3, [r2, #0]
		objectinfo[0].xpos = ((data_received_nav[1] << 8) | (data_received_nav[2] << 0));
   80328:	4b2b      	ldr	r3, [pc, #172]	; (803d8 <na_sendstatus+0x104>)
   8032a:	7858      	ldrb	r0, [r3, #1]
   8032c:	7899      	ldrb	r1, [r3, #2]
   8032e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   80332:	8051      	strh	r1, [r2, #2]
		objectinfo[0].ypox = ((data_received_nav[3] << 8) | (data_received_nav[4] <<0));
   80334:	78d9      	ldrb	r1, [r3, #3]
   80336:	791b      	ldrb	r3, [r3, #4]
   80338:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   8033c:	8093      	strh	r3, [r2, #4]
		break;
   8033e:	bd08      	pop	{r3, pc}
		
		//Square position
		case SQUAREXY:
		send_package(SQUAREXY,TWI_SLAVE_NAVIGERING);
   80340:	2053      	movs	r0, #83	; 0x53
   80342:	2103      	movs	r1, #3
   80344:	4b1f      	ldr	r3, [pc, #124]	; (803c4 <na_sendstatus+0xf0>)
   80346:	4798      	blx	r3
		receive_package(TWI_SLAVE_NAVIGERING);
   80348:	2003      	movs	r0, #3
   8034a:	4b20      	ldr	r3, [pc, #128]	; (803cc <na_sendstatus+0xf8>)
   8034c:	4798      	blx	r3
		objectinfo[1].theObject = SQUARE;
   8034e:	4a21      	ldr	r2, [pc, #132]	; (803d4 <na_sendstatus+0x100>)
   80350:	2303      	movs	r3, #3
   80352:	7193      	strb	r3, [r2, #6]
		objectinfo[1].xpos = ((data_received_nav[1] << 8) | (data_received_nav[2] << 0));
   80354:	4b20      	ldr	r3, [pc, #128]	; (803d8 <na_sendstatus+0x104>)
   80356:	7858      	ldrb	r0, [r3, #1]
   80358:	7899      	ldrb	r1, [r3, #2]
   8035a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   8035e:	8111      	strh	r1, [r2, #8]
		objectinfo[1].ypox = ((data_received_nav[3] << 8) | (data_received_nav[4] <<0));
   80360:	78d9      	ldrb	r1, [r3, #3]
   80362:	791b      	ldrb	r3, [r3, #4]
   80364:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   80368:	8153      	strh	r3, [r2, #10]
		break;
   8036a:	bd08      	pop	{r3, pc}
		
		//Glass position
		case GLASSXY:
		send_package(GLASSXY,TWI_SLAVE_NAVIGERING);
   8036c:	2054      	movs	r0, #84	; 0x54
   8036e:	2103      	movs	r1, #3
   80370:	4b14      	ldr	r3, [pc, #80]	; (803c4 <na_sendstatus+0xf0>)
   80372:	4798      	blx	r3
		receive_package(TWI_SLAVE_NAVIGERING);
   80374:	2003      	movs	r0, #3
   80376:	4b15      	ldr	r3, [pc, #84]	; (803cc <na_sendstatus+0xf8>)
   80378:	4798      	blx	r3
		objectinfo[2].theObject = GLASS;
   8037a:	4a16      	ldr	r2, [pc, #88]	; (803d4 <na_sendstatus+0x100>)
   8037c:	2304      	movs	r3, #4
   8037e:	7313      	strb	r3, [r2, #12]
		objectinfo[2].xpos = ((data_received_nav[1] << 8) | (data_received_nav[2] << 0));
   80380:	4b15      	ldr	r3, [pc, #84]	; (803d8 <na_sendstatus+0x104>)
   80382:	7858      	ldrb	r0, [r3, #1]
   80384:	7899      	ldrb	r1, [r3, #2]
   80386:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   8038a:	81d1      	strh	r1, [r2, #14]
		objectinfo[2].ypox = ((data_received_nav[3] << 8) | (data_received_nav[4] <<0));
   8038c:	78d9      	ldrb	r1, [r3, #3]
   8038e:	791b      	ldrb	r3, [r3, #4]
   80390:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   80394:	8213      	strh	r3, [r2, #16]
		break;
   80396:	bd08      	pop	{r3, pc}
		
		//Boxgal info
		case BOXGOALXY:
		send_package(BOXGOALXY,TWI_SLAVE_NAVIGERING);
   80398:	2055      	movs	r0, #85	; 0x55
   8039a:	2103      	movs	r1, #3
   8039c:	4b09      	ldr	r3, [pc, #36]	; (803c4 <na_sendstatus+0xf0>)
   8039e:	4798      	blx	r3
		receive_package(TWI_SLAVE_NAVIGERING);
   803a0:	2003      	movs	r0, #3
   803a2:	4b0a      	ldr	r3, [pc, #40]	; (803cc <na_sendstatus+0xf8>)
   803a4:	4798      	blx	r3
		objectinfo[3].theObject = BOXGOALXY;
   803a6:	4a0b      	ldr	r2, [pc, #44]	; (803d4 <na_sendstatus+0x100>)
   803a8:	2355      	movs	r3, #85	; 0x55
   803aa:	7493      	strb	r3, [r2, #18]
		objectinfo[3].xpos = ((data_received_nav[1] << 8) | (data_received_nav[2] << 0));
   803ac:	4b0a      	ldr	r3, [pc, #40]	; (803d8 <na_sendstatus+0x104>)
   803ae:	7858      	ldrb	r0, [r3, #1]
   803b0:	7899      	ldrb	r1, [r3, #2]
   803b2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   803b6:	8291      	strh	r1, [r2, #20]
		objectinfo[3].ypox = ((data_received_nav[3] << 8) | (data_received_nav[4] <<0));
   803b8:	78d9      	ldrb	r1, [r3, #3]
   803ba:	791b      	ldrb	r3, [r3, #4]
   803bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   803c0:	82d3      	strh	r3, [r2, #22]
   803c2:	bd08      	pop	{r3, pc}
   803c4:	000801bd 	.word	0x000801bd
   803c8:	00082629 	.word	0x00082629
   803cc:	00080261 	.word	0x00080261
   803d0:	00081709 	.word	0x00081709
   803d4:	20078db8 	.word	0x20078db8
   803d8:	20070a80 	.word	0x20070a80

000803dc <pa_sendstatus>:
	}
	

}

void pa_sendstatus(TwiCmd twi_state, uint8_t underState){
   803dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (twi_state){
   803e0:	3820      	subs	r0, #32
   803e2:	2805      	cmp	r0, #5
   803e4:	d86d      	bhi.n	804c2 <pa_sendstatus+0xe6>
   803e6:	e8df f000 	tbb	[pc, r0]
   803ea:	3003      	.short	0x3003
   803ec:	68556236 	.word	0x68556236
		//Hämtar information om påbyggnaden
		case TWI_CMD_ARM_INIT:
			send_data_pab[1] = TWI_CMD_ARM_REQ_BOX_INFO;
   803f0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 804d8 <pa_sendstatus+0xfc>
   803f4:	2402      	movs	r4, #2
   803f6:	f889 4001 	strb.w	r4, [r9, #1]
			send_package(TWI_CMD_ARM_INIT,TWI_SLAVE_PABYGGNAD);
   803fa:	2020      	movs	r0, #32
   803fc:	4621      	mov	r1, r4
   803fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 804d4 <pa_sendstatus+0xf8>
   80402:	47c0      	blx	r8
			receive_package(TWI_SLAVE_PABYGGNAD);
   80404:	4620      	mov	r0, r4
   80406:	4f30      	ldr	r7, [pc, #192]	; (804c8 <pa_sendstatus+0xec>)
   80408:	47b8      	blx	r7
			arminformation.boxDistance		=  data_received_pab[1];
   8040a:	4d30      	ldr	r5, [pc, #192]	; (804cc <pa_sendstatus+0xf0>)
   8040c:	4e30      	ldr	r6, [pc, #192]	; (804d0 <pa_sendstatus+0xf4>)
   8040e:	7873      	ldrb	r3, [r6, #1]
   80410:	702b      	strb	r3, [r5, #0]
			arminformation.boxAngle			=  data_received_pab[2];
   80412:	78b3      	ldrb	r3, [r6, #2]
   80414:	706b      	strb	r3, [r5, #1]
			send_data_pab[1] = TWI_CMD_ARM_REQ_OBJ_INFO;
   80416:	2303      	movs	r3, #3
   80418:	f889 3001 	strb.w	r3, [r9, #1]
			send_package(TWI_CMD_ARM_INIT, TWI_SLAVE_PABYGGNAD);
   8041c:	2020      	movs	r0, #32
   8041e:	4621      	mov	r1, r4
   80420:	47c0      	blx	r8
			receive_package(TWI_SLAVE_PABYGGNAD);
   80422:	4620      	mov	r0, r4
   80424:	47b8      	blx	r7
			arminformation.objectDistance	=	data_received_pab[1];
   80426:	7873      	ldrb	r3, [r6, #1]
   80428:	70ab      	strb	r3, [r5, #2]
			arminformation.objectAngle		=	data_received_pab[2];
   8042a:	78b3      	ldrb	r3, [r6, #2]
   8042c:	70eb      	strb	r3, [r5, #3]
			send_data_pab[1] = TWI_CMD_ARM_REQ_COLLECT_INFO;
   8042e:	2304      	movs	r3, #4
   80430:	f889 3001 	strb.w	r3, [r9, #1]
			send_package(TWI_CMD_ARM_INIT,TWI_SLAVE_PABYGGNAD);
   80434:	2020      	movs	r0, #32
   80436:	4621      	mov	r1, r4
   80438:	47c0      	blx	r8
			receive_package(TWI_SLAVE_PABYGGNAD);
   8043a:	4620      	mov	r0, r4
   8043c:	47b8      	blx	r7
			arminformation.collectAll		= data_received_pab[1];
   8043e:	7873      	ldrb	r3, [r6, #1]
   80440:	712b      	strb	r3, [r5, #4]
			arminformation.hasData			= data_received_pab[2];
   80442:	78b3      	ldrb	r3, [r6, #2]
   80444:	716b      	strb	r3, [r5, #5]
		break;
   80446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		
		case TWI_CMD_DROPOFF_START:
			send_package(TWI_CMD_DROPOFF_START,TWI_SLAVE_PABYGGNAD);
   8044a:	2021      	movs	r0, #33	; 0x21
   8044c:	2102      	movs	r1, #2
   8044e:	4b21      	ldr	r3, [pc, #132]	; (804d4 <pa_sendstatus+0xf8>)
   80450:	4798      	blx	r3
		break;
   80452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		
		case TWI_CMD_PICKUP_START:
			if(underState == SOCK){
   80456:	2902      	cmp	r1, #2
   80458:	d106      	bne.n	80468 <pa_sendstatus+0x8c>
				send_data_pab[1] = SOCK;
   8045a:	4b1f      	ldr	r3, [pc, #124]	; (804d8 <pa_sendstatus+0xfc>)
   8045c:	7059      	strb	r1, [r3, #1]
				send_package(TWI_CMD_PICKUP_START,TWI_SLAVE_PABYGGNAD);
   8045e:	2022      	movs	r0, #34	; 0x22
   80460:	4b1c      	ldr	r3, [pc, #112]	; (804d4 <pa_sendstatus+0xf8>)
   80462:	4798      	blx	r3
   80464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			}else if(underState == SQUARE){
   80468:	2903      	cmp	r1, #3
   8046a:	d108      	bne.n	8047e <pa_sendstatus+0xa2>
				send_data_pab[1] = SQUARE;
   8046c:	2203      	movs	r2, #3
   8046e:	4b1a      	ldr	r3, [pc, #104]	; (804d8 <pa_sendstatus+0xfc>)
   80470:	705a      	strb	r2, [r3, #1]
				send_package(TWI_CMD_PICKUP_START,TWI_SLAVE_PABYGGNAD);
   80472:	2022      	movs	r0, #34	; 0x22
   80474:	2102      	movs	r1, #2
   80476:	4b17      	ldr	r3, [pc, #92]	; (804d4 <pa_sendstatus+0xf8>)
   80478:	4798      	blx	r3
   8047a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			}else if(underState == GLASS){
   8047e:	2904      	cmp	r1, #4
   80480:	d11f      	bne.n	804c2 <pa_sendstatus+0xe6>
				send_data_pab[1] = GLASS;
   80482:	2204      	movs	r2, #4
   80484:	4b14      	ldr	r3, [pc, #80]	; (804d8 <pa_sendstatus+0xfc>)
   80486:	705a      	strb	r2, [r3, #1]
				send_package(TWI_CMD_PICKUP_START,TWI_SLAVE_PABYGGNAD);
   80488:	2022      	movs	r0, #34	; 0x22
   8048a:	2102      	movs	r1, #2
   8048c:	4b11      	ldr	r3, [pc, #68]	; (804d4 <pa_sendstatus+0xf8>)
   8048e:	4798      	blx	r3
   80490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			}
		break;
		
		case TWI_CMD_PICKUP_STATUS:
			send_package(TWI_CMD_PICKUP_STATUS,TWI_SLAVE_PABYGGNAD);
   80494:	2024      	movs	r0, #36	; 0x24
   80496:	2102      	movs	r1, #2
   80498:	4b0e      	ldr	r3, [pc, #56]	; (804d4 <pa_sendstatus+0xf8>)
   8049a:	4798      	blx	r3
			delay_ms(10);
   8049c:	f64e 2060 	movw	r0, #60000	; 0xea60
   804a0:	4b0e      	ldr	r3, [pc, #56]	; (804dc <pa_sendstatus+0x100>)
   804a2:	4798      	blx	r3
			receive_package(TWI_SLAVE_PABYGGNAD);
   804a4:	2002      	movs	r0, #2
   804a6:	4b08      	ldr	r3, [pc, #32]	; (804c8 <pa_sendstatus+0xec>)
   804a8:	4798      	blx	r3
		break;
   804aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		
		case TWI_CMD_DROPOFF_STATUS:
			send_package(TWI_CMD_DROPOFF_STATUS,TWI_SLAVE_PABYGGNAD);
   804ae:	2023      	movs	r0, #35	; 0x23
   804b0:	2102      	movs	r1, #2
   804b2:	4b08      	ldr	r3, [pc, #32]	; (804d4 <pa_sendstatus+0xf8>)
   804b4:	4798      	blx	r3
		break;
   804b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		
		case TWI_CMD_ERROR:
			send_package(TWI_CMD_ERROR,TWI_SLAVE_PABYGGNAD);
   804ba:	2025      	movs	r0, #37	; 0x25
   804bc:	2102      	movs	r1, #2
   804be:	4b05      	ldr	r3, [pc, #20]	; (804d4 <pa_sendstatus+0xf8>)
   804c0:	4798      	blx	r3
   804c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   804c6:	bf00      	nop
   804c8:	00080261 	.word	0x00080261
   804cc:	20078dd4 	.word	0x20078dd4
   804d0:	20070a7c 	.word	0x20070a7c
   804d4:	000801bd 	.word	0x000801bd
   804d8:	20070a74 	.word	0x20070a74
   804dc:	20070001 	.word	0x20070001

000804e0 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   804e0:	4b0f      	ldr	r3, [pc, #60]	; (80520 <twi_set_speed+0x40>)
   804e2:	4299      	cmp	r1, r3
   804e4:	d819      	bhi.n	8051a <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   804e6:	0049      	lsls	r1, r1, #1
   804e8:	fbb2 f2f1 	udiv	r2, r2, r1
   804ec:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   804ee:	2aff      	cmp	r2, #255	; 0xff
   804f0:	d907      	bls.n	80502 <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   804f2:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   804f4:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   804f6:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   804f8:	2aff      	cmp	r2, #255	; 0xff
   804fa:	d903      	bls.n	80504 <twi_set_speed+0x24>
   804fc:	2b07      	cmp	r3, #7
   804fe:	d1f9      	bne.n	804f4 <twi_set_speed+0x14>
   80500:	e000      	b.n	80504 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   80502:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80504:	0211      	lsls	r1, r2, #8
   80506:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
   80508:	041b      	lsls	r3, r3, #16
   8050a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   8050e:	430b      	orrs	r3, r1
   80510:	b2d2      	uxtb	r2, r2
   80512:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   80514:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   80516:	2000      	movs	r0, #0
   80518:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   8051a:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   8051c:	4770      	bx	lr
   8051e:	bf00      	nop
   80520:	00061a80 	.word	0x00061a80

00080524 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   80524:	b538      	push	{r3, r4, r5, lr}
   80526:	4604      	mov	r4, r0
   80528:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   8052a:	f04f 33ff 	mov.w	r3, #4294967295
   8052e:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   80530:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   80532:	2380      	movs	r3, #128	; 0x80
   80534:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   80536:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   80538:	2308      	movs	r3, #8
   8053a:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   8053c:	2320      	movs	r3, #32
   8053e:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   80540:	2304      	movs	r3, #4
   80542:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   80544:	6849      	ldr	r1, [r1, #4]
   80546:	682a      	ldr	r2, [r5, #0]
   80548:	4b05      	ldr	r3, [pc, #20]	; (80560 <twi_master_init+0x3c>)
   8054a:	4798      	blx	r3
   8054c:	2801      	cmp	r0, #1
   8054e:	bf14      	ite	ne
   80550:	2000      	movne	r0, #0
   80552:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   80554:	7a6b      	ldrb	r3, [r5, #9]
   80556:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   80558:	bf04      	itt	eq
   8055a:	2340      	moveq	r3, #64	; 0x40
   8055c:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
   8055e:	bd38      	pop	{r3, r4, r5, pc}
   80560:	000804e1 	.word	0x000804e1

00080564 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   80564:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
   80568:	4604      	mov	r4, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   8056a:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   8056c:	688e      	ldr	r6, [r1, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
   8056e:	2b00      	cmp	r3, #0
   80570:	d049      	beq.n	80606 <twi_master_read+0xa2>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   80572:	2200      	movs	r2, #0
   80574:	6042      	str	r2, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   80576:	6848      	ldr	r0, [r1, #4]
   80578:	0200      	lsls	r0, r0, #8
   8057a:	f400 7040 	and.w	r0, r0, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   8057e:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
   80582:	7c0d      	ldrb	r5, [r1, #16]
   80584:	042d      	lsls	r5, r5, #16
   80586:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
   8058a:	4328      	orrs	r0, r5
   8058c:	6060      	str	r0, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   8058e:	60e2      	str	r2, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   80590:	684a      	ldr	r2, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   80592:	b15a      	cbz	r2, 805ac <twi_master_read+0x48>
		return 0;

	val = addr[0];
   80594:	7808      	ldrb	r0, [r1, #0]
	if (len > 1) {
   80596:	2a01      	cmp	r2, #1
		val <<= 8;
		val |= addr[1];
   80598:	bfc4      	itt	gt
   8059a:	784d      	ldrbgt	r5, [r1, #1]
   8059c:	ea45 2000 	orrgt.w	r0, r5, r0, lsl #8
	}
	if (len > 2) {
   805a0:	2a02      	cmp	r2, #2
   805a2:	dd04      	ble.n	805ae <twi_master_read+0x4a>
		val <<= 8;
		val |= addr[2];
   805a4:	788a      	ldrb	r2, [r1, #2]
   805a6:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
   805aa:	e000      	b.n	805ae <twi_master_read+0x4a>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   805ac:	2000      	movs	r0, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   805ae:	60e0      	str	r0, [r4, #12]

	/* Send a START condition */
	if (cnt == 1) {
   805b0:	2b01      	cmp	r3, #1
   805b2:	d104      	bne.n	805be <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   805b4:	2203      	movs	r2, #3
   805b6:	6022      	str	r2, [r4, #0]
		stop_sent = 1;
   805b8:	f04f 0c01 	mov.w	ip, #1
   805bc:	e02b      	b.n	80616 <twi_master_read+0xb2>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
   805be:	2201      	movs	r2, #1
   805c0:	6022      	str	r2, [r4, #0]
		stop_sent = 0;
   805c2:	f04f 0c00 	mov.w	ip, #0
   805c6:	e026      	b.n	80616 <twi_master_read+0xb2>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   805c8:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   805ca:	f411 7f80 	tst.w	r1, #256	; 0x100
   805ce:	d11c      	bne.n	8060a <twi_master_read+0xa6>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   805d0:	1e55      	subs	r5, r2, #1
   805d2:	b1e2      	cbz	r2, 8060e <twi_master_read+0xaa>
   805d4:	462a      	mov	r2, r5
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
   805d6:	2b01      	cmp	r3, #1
   805d8:	d105      	bne.n	805e6 <twi_master_read+0x82>
   805da:	f1bc 0f00 	cmp.w	ip, #0
   805de:	d102      	bne.n	805e6 <twi_master_read+0x82>
			p_twi->TWI_CR = TWI_CR_STOP;
   805e0:	f8c4 9000 	str.w	r9, [r4]
			stop_sent = 1;
   805e4:	46c4      	mov	ip, r8
		}

		if (!(status & TWI_SR_RXRDY)) {
   805e6:	f011 0f02 	tst.w	r1, #2
   805ea:	d004      	beq.n	805f6 <twi_master_read+0x92>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   805ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
   805ee:	7032      	strb	r2, [r6, #0]

		cnt--;
   805f0:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   805f2:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
   805f4:	463a      	mov	r2, r7
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
   805f6:	2b00      	cmp	r3, #0
   805f8:	d1e6      	bne.n	805c8 <twi_master_read+0x64>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   805fa:	6a23      	ldr	r3, [r4, #32]
   805fc:	f013 0f01 	tst.w	r3, #1
   80600:	d0fb      	beq.n	805fa <twi_master_read+0x96>
	}

	p_twi->TWI_SR;
   80602:	6a23      	ldr	r3, [r4, #32]

	return TWI_SUCCESS;
   80604:	e014      	b.n	80630 <twi_master_read+0xcc>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   80606:	2001      	movs	r0, #1
   80608:	e012      	b.n	80630 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   8060a:	2005      	movs	r0, #5
   8060c:	e010      	b.n	80630 <twi_master_read+0xcc>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
   8060e:	2009      	movs	r0, #9
   80610:	e00e      	b.n	80630 <twi_master_read+0xcc>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   80612:	2005      	movs	r0, #5
   80614:	e00c      	b.n	80630 <twi_master_read+0xcc>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80616:	6a21      	ldr	r1, [r4, #32]
		if (status & TWI_SR_NACK) {
   80618:	f411 7080 	ands.w	r0, r1, #256	; 0x100
   8061c:	d1f9      	bne.n	80612 <twi_master_read+0xae>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   8061e:	f643 2297 	movw	r2, #14999	; 0x3a97
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
   80622:	f04f 0902 	mov.w	r9, #2
			stop_sent = 1;
   80626:	f04f 0801 	mov.w	r8, #1
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
   8062a:	f643 2798 	movw	r7, #15000	; 0x3a98
   8062e:	e7d2      	b.n	805d6 <twi_master_read+0x72>
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
   80630:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
   80634:	4770      	bx	lr
   80636:	bf00      	nop

00080638 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
   80638:	b470      	push	{r4, r5, r6}
   8063a:	4603      	mov	r3, r0
	uint32_t status;
	uint32_t cnt = p_packet->length;
   8063c:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
   8063e:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
   80640:	2a00      	cmp	r2, #0
   80642:	d03f      	beq.n	806c4 <twi_master_write+0x8c>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   80644:	2400      	movs	r4, #0
   80646:	605c      	str	r4, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   80648:	7c0e      	ldrb	r6, [r1, #16]
   8064a:	0436      	lsls	r6, r6, #16
   8064c:	f406 06fe 	and.w	r6, r6, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   80650:	684d      	ldr	r5, [r1, #4]
   80652:	022d      	lsls	r5, r5, #8
   80654:	f405 7540 	and.w	r5, r5, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   80658:	4335      	orrs	r5, r6
   8065a:	605d      	str	r5, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   8065c:	60dc      	str	r4, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   8065e:	684c      	ldr	r4, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
   80660:	b15c      	cbz	r4, 8067a <twi_master_write+0x42>
		return 0;

	val = addr[0];
   80662:	780d      	ldrb	r5, [r1, #0]
	if (len > 1) {
   80664:	2c01      	cmp	r4, #1
		val <<= 8;
		val |= addr[1];
   80666:	bfc4      	itt	gt
   80668:	784e      	ldrbgt	r6, [r1, #1]
   8066a:	ea46 2505 	orrgt.w	r5, r6, r5, lsl #8
	}
	if (len > 2) {
   8066e:	2c02      	cmp	r4, #2
   80670:	dd04      	ble.n	8067c <twi_master_write+0x44>
		val <<= 8;
		val |= addr[2];
   80672:	7889      	ldrb	r1, [r1, #2]
   80674:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
   80678:	e000      	b.n	8067c <twi_master_write+0x44>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
   8067a:	2500      	movs	r5, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   8067c:	60dd      	str	r5, [r3, #12]
   8067e:	e00b      	b.n	80698 <twi_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80680:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   80682:	f411 7f80 	tst.w	r1, #256	; 0x100
   80686:	d11f      	bne.n	806c8 <twi_master_write+0x90>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   80688:	f011 0f04 	tst.w	r1, #4
   8068c:	d0f8      	beq.n	80680 <twi_master_write+0x48>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
   8068e:	f810 1b01 	ldrb.w	r1, [r0], #1
   80692:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   80694:	3a01      	subs	r2, #1
   80696:	d007      	beq.n	806a8 <twi_master_write+0x70>
		status = p_twi->TWI_SR;
   80698:	6a19      	ldr	r1, [r3, #32]
		if (status & TWI_SR_NACK) {
   8069a:	f411 7f80 	tst.w	r1, #256	; 0x100
   8069e:	d115      	bne.n	806cc <twi_master_write+0x94>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
   806a0:	f011 0f04 	tst.w	r1, #4
   806a4:	d1f3      	bne.n	8068e <twi_master_write+0x56>
   806a6:	e7eb      	b.n	80680 <twi_master_write+0x48>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
   806a8:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   806aa:	f412 7080 	ands.w	r0, r2, #256	; 0x100
   806ae:	d10f      	bne.n	806d0 <twi_master_write+0x98>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
   806b0:	f012 0f04 	tst.w	r2, #4
   806b4:	d0f8      	beq.n	806a8 <twi_master_write+0x70>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   806b6:	2202      	movs	r2, #2
   806b8:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   806ba:	6a1a      	ldr	r2, [r3, #32]
   806bc:	f012 0f01 	tst.w	r2, #1
   806c0:	d0fb      	beq.n	806ba <twi_master_write+0x82>
   806c2:	e006      	b.n	806d2 <twi_master_write+0x9a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   806c4:	2001      	movs	r0, #1
   806c6:	e004      	b.n	806d2 <twi_master_write+0x9a>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   806c8:	2005      	movs	r0, #5
   806ca:	e002      	b.n	806d2 <twi_master_write+0x9a>
   806cc:	2005      	movs	r0, #5
   806ce:	e000      	b.n	806d2 <twi_master_write+0x9a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   806d0:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
   806d2:	bc70      	pop	{r4, r5, r6}
   806d4:	4770      	bx	lr
   806d6:	bf00      	nop

000806d8 <calculateDistance>:
 *  Author: Andre & Elias
 */ 

#include "Functions/calculations.h"

int calculateDistance (uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2){ //Avståndet för x1 & y1 = Position, x2 & y2 = Destination
   806d8:	b530      	push	{r4, r5, lr}
   806da:	b087      	sub	sp, #28
	
	int mot, nar;
	
	nar = x2 - x1;
   806dc:	1a12      	subs	r2, r2, r0
	mot = y2 - y1;
   806de:	1a5b      	subs	r3, r3, r1
	
	int dist = sqrt((mot*mot)+(nar*nar));
   806e0:	fb02 f202 	mul.w	r2, r2, r2
   806e4:	fb03 2503 	mla	r5, r3, r3, r2
   806e8:	4c0a      	ldr	r4, [pc, #40]	; (80714 <calculateDistance+0x3c>)
   806ea:	4628      	mov	r0, r5
   806ec:	47a0      	blx	r4
   806ee:	4b0a      	ldr	r3, [pc, #40]	; (80718 <calculateDistance+0x40>)
   806f0:	4798      	blx	r3
   806f2:	4b0a      	ldr	r3, [pc, #40]	; (8071c <calculateDistance+0x44>)
   806f4:	4798      	blx	r3
   806f6:	4604      	mov	r4, r0
	
	char strCalc[20];
	sprintf(strCalc,"\nCalc = %d",dist);
   806f8:	a801      	add	r0, sp, #4
   806fa:	4909      	ldr	r1, [pc, #36]	; (80720 <calculateDistance+0x48>)
   806fc:	4622      	mov	r2, r4
   806fe:	4b09      	ldr	r3, [pc, #36]	; (80724 <calculateDistance+0x4c>)
   80700:	4798      	blx	r3
	printf(strCalc);	
   80702:	a801      	add	r0, sp, #4
   80704:	4d08      	ldr	r5, [pc, #32]	; (80728 <calculateDistance+0x50>)
   80706:	47a8      	blx	r5
	printf("Hello?");
   80708:	4808      	ldr	r0, [pc, #32]	; (8072c <calculateDistance+0x54>)
   8070a:	47a8      	blx	r5
	return dist;
	
}
   8070c:	4620      	mov	r0, r4
   8070e:	b007      	add	sp, #28
   80710:	bd30      	pop	{r4, r5, pc}
   80712:	bf00      	nop
   80714:	000840a5 	.word	0x000840a5
   80718:	000836b1 	.word	0x000836b1
   8071c:	000846a5 	.word	0x000846a5
   80720:	0008a3d4 	.word	0x0008a3d4
   80724:	00084a09 	.word	0x00084a09
   80728:	00084751 	.word	0x00084751
   8072c:	0008a3e0 	.word	0x0008a3e0

00080730 <calculateAngle>:

int calculateAngle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 ){	//Vinkeln för x1 & y1 = Position, x2 & y2 = Destination
   80730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	
	int mot, nar;
	nar = x2 - x1;
   80734:	1a16      	subs	r6, r2, r0
	mot = y2 - y1;
   80736:	1a5f      	subs	r7, r3, r1
	
	
	int angle = (acos(nar/(sqrt((mot*mot)+(nar*nar)))) * (180/M_PI));
   80738:	fb06 f406 	mul.w	r4, r6, r6
   8073c:	fb07 4407 	mla	r4, r7, r7, r4
   80740:	f8df 8084 	ldr.w	r8, [pc, #132]	; 807c8 <calculateAngle+0x98>
   80744:	4620      	mov	r0, r4
   80746:	47c0      	blx	r8
   80748:	4b19      	ldr	r3, [pc, #100]	; (807b0 <calculateAngle+0x80>)
   8074a:	4798      	blx	r3
   8074c:	4604      	mov	r4, r0
   8074e:	460d      	mov	r5, r1
   80750:	4630      	mov	r0, r6
   80752:	47c0      	blx	r8
   80754:	4622      	mov	r2, r4
   80756:	462b      	mov	r3, r5
   80758:	4c16      	ldr	r4, [pc, #88]	; (807b4 <calculateAngle+0x84>)
   8075a:	47a0      	blx	r4
   8075c:	4b16      	ldr	r3, [pc, #88]	; (807b8 <calculateAngle+0x88>)
   8075e:	4798      	blx	r3
   80760:	a311      	add	r3, pc, #68	; (adr r3, 807a8 <calculateAngle+0x78>)
   80762:	e9d3 2300 	ldrd	r2, r3, [r3]
   80766:	4c15      	ldr	r4, [pc, #84]	; (807bc <calculateAngle+0x8c>)
   80768:	47a0      	blx	r4
   8076a:	4b15      	ldr	r3, [pc, #84]	; (807c0 <calculateAngle+0x90>)
   8076c:	4798      	blx	r3
	
	if(nar < 0 && mot > 0){
   8076e:	2e00      	cmp	r6, #0
   80770:	da07      	bge.n	80782 <calculateAngle+0x52>
   80772:	2f00      	cmp	r7, #0
   80774:	dd01      	ble.n	8077a <calculateAngle+0x4a>
		angle = angle + 90;
   80776:	305a      	adds	r0, #90	; 0x5a
   80778:	e009      	b.n	8078e <calculateAngle+0x5e>
	}
	else if(nar < 0 && mot < 0){
   8077a:	2f00      	cmp	r7, #0
   8077c:	da07      	bge.n	8078e <calculateAngle+0x5e>
		angle = angle + 180;
   8077e:	30b4      	adds	r0, #180	; 0xb4
   80780:	e005      	b.n	8078e <calculateAngle+0x5e>
	}
	else if(nar > 0 && mot < 0){
   80782:	2e00      	cmp	r6, #0
   80784:	dd03      	ble.n	8078e <calculateAngle+0x5e>
   80786:	2f00      	cmp	r7, #0
		angle = angle + 270;
   80788:	bfb8      	it	lt
   8078a:	f500 7087 	addlt.w	r0, r0, #270	; 0x10e
	}
	
	angle = angle % 360;
   8078e:	4a0d      	ldr	r2, [pc, #52]	; (807c4 <calculateAngle+0x94>)
   80790:	fb80 2302 	smull	r2, r3, r0, r2
   80794:	18c2      	adds	r2, r0, r3
   80796:	17c3      	asrs	r3, r0, #31
   80798:	ebc3 2322 	rsb	r3, r3, r2, asr #8
	
	return angle;
}
   8079c:	f44f 72b4 	mov.w	r2, #360	; 0x168
   807a0:	fb02 0013 	mls	r0, r2, r3, r0
   807a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   807a8:	1a63c1f8 	.word	0x1a63c1f8
   807ac:	404ca5dc 	.word	0x404ca5dc
   807b0:	000836b1 	.word	0x000836b1
   807b4:	000843c5 	.word	0x000843c5
   807b8:	00083609 	.word	0x00083609
   807bc:	00084171 	.word	0x00084171
   807c0:	000846a5 	.word	0x000846a5
   807c4:	b60b60b7 	.word	0xb60b60b7
   807c8:	000840a5 	.word	0x000840a5
   807cc:	f3af 8000 	nop.w

000807d0 <init_taskFunctions>:
int16_t currentx1,currenty1;


char str[20];

void init_taskFunctions(void){
   807d0:	b570      	push	{r4, r5, r6, lr}
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   807d2:	4b2c      	ldr	r3, [pc, #176]	; (80884 <init_taskFunctions+0xb4>)
   807d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   807d8:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   807da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   807de:	492a      	ldr	r1, [pc, #168]	; (80888 <init_taskFunctions+0xb8>)
   807e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   807e4:	610b      	str	r3, [r1, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   807e6:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   807ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   807ee:	614b      	str	r3, [r1, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   807f0:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   807f4:	4a25      	ldr	r2, [pc, #148]	; (8088c <init_taskFunctions+0xbc>)
   807f6:	2402      	movs	r4, #2
   807f8:	6154      	str	r4, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   807fa:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   807fe:	2008      	movs	r0, #8
   80800:	6150      	str	r0, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80802:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80806:	f44f 7300 	mov.w	r3, #512	; 0x200
   8080a:	6153      	str	r3, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8080c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80810:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80814:	6153      	str	r3, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80816:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8081a:	4b1d      	ldr	r3, [pc, #116]	; (80890 <init_taskFunctions+0xc0>)
   8081c:	2504      	movs	r5, #4
   8081e:	615d      	str	r5, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80820:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80824:	2601      	movs	r6, #1
   80826:	6156      	str	r6, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80828:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8082c:	6155      	str	r5, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8082e:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80832:	2540      	movs	r5, #64	; 0x40
   80834:	6155      	str	r5, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80836:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8083a:	2280      	movs	r2, #128	; 0x80
   8083c:	614a      	str	r2, [r1, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8083e:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80842:	615c      	str	r4, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80844:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80848:	6158      	str	r0, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8084a:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8084e:	f44f 7080 	mov.w	r0, #256	; 0x100
   80852:	6158      	str	r0, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80854:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80858:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   8085c:	6158      	str	r0, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8085e:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80862:	6148      	str	r0, [r1, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80864:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80868:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   8086c:	6159      	str	r1, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8086e:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80872:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80874:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80878:	635a      	str	r2, [r3, #52]	; 0x34
	
	ioport_set_pin_level(START_CAMERA,LOW);

	
	
	printf("\nPins OK");
   8087a:	4806      	ldr	r0, [pc, #24]	; (80894 <init_taskFunctions+0xc4>)
   8087c:	4b06      	ldr	r3, [pc, #24]	; (80898 <init_taskFunctions+0xc8>)
   8087e:	4798      	blx	r3
   80880:	bd70      	pop	{r4, r5, r6, pc}
   80882:	bf00      	nop
   80884:	400e1000 	.word	0x400e1000
   80888:	400e0e00 	.word	0x400e0e00
   8088c:	400e1400 	.word	0x400e1400
   80890:	400e1200 	.word	0x400e1200
   80894:	0008a3e8 	.word	0x0008a3e8
   80898:	00084751 	.word	0x00084751

0008089c <driveForward>:
void resetCounter(void){
	interruptCounter = 0;
}


int driveForward(int tarDist){
   8089c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   808a0:	4604      	mov	r4, r0
	
	 sprintf(str,"\nTarget Distance: %d",tarDist);
   808a2:	4d61      	ldr	r5, [pc, #388]	; (80a28 <driveForward+0x18c>)
   808a4:	4628      	mov	r0, r5
   808a6:	4961      	ldr	r1, [pc, #388]	; (80a2c <driveForward+0x190>)
   808a8:	4622      	mov	r2, r4
   808aa:	4b61      	ldr	r3, [pc, #388]	; (80a30 <driveForward+0x194>)
   808ac:	4798      	blx	r3
	 printf(str);
   808ae:	4628      	mov	r0, r5
   808b0:	4b60      	ldr	r3, [pc, #384]	; (80a34 <driveForward+0x198>)
   808b2:	4798      	blx	r3
	
	r_count = 0;
   808b4:	2300      	movs	r3, #0
   808b6:	4a60      	ldr	r2, [pc, #384]	; (80a38 <driveForward+0x19c>)
   808b8:	6013      	str	r3, [r2, #0]
	l_count = 0;
   808ba:	4a60      	ldr	r2, [pc, #384]	; (80a3c <driveForward+0x1a0>)
   808bc:	6013      	str	r3, [r2, #0]
	int testing = 0;
	int v_test = 0;
	int h_test = 0;
	int e_test = 0;
	
	r_speed=speed;
   808be:	4b60      	ldr	r3, [pc, #384]	; (80a40 <driveForward+0x1a4>)
   808c0:	6819      	ldr	r1, [r3, #0]
   808c2:	4b60      	ldr	r3, [pc, #384]	; (80a44 <driveForward+0x1a8>)
   808c4:	6019      	str	r1, [r3, #0]
	l_speed=speed;
   808c6:	4b60      	ldr	r3, [pc, #384]	; (80a48 <driveForward+0x1ac>)
   808c8:	6019      	str	r1, [r3, #0]
	
	moveForward(l_speed,r_speed);
   808ca:	4608      	mov	r0, r1
   808cc:	4b5f      	ldr	r3, [pc, #380]	; (80a4c <driveForward+0x1b0>)
   808ce:	4798      	blx	r3
	
	
	if (70 < tarDist){
   808d0:	2c46      	cmp	r4, #70	; 0x46
   808d2:	dd06      	ble.n	808e2 <driveForward+0x46>
		moveForward(1650,1650);
   808d4:	f240 6072 	movw	r0, #1650	; 0x672
   808d8:	4601      	mov	r1, r0
   808da:	4b5c      	ldr	r3, [pc, #368]	; (80a4c <driveForward+0x1b0>)
   808dc:	4798      	blx	r3
	
	r_count = 0;
	l_count = 0;
	
	int driveCount = 0;
	int testing = 0;
   808de:	2600      	movs	r6, #0
   808e0:	e005      	b.n	808ee <driveForward+0x52>
	
	if (70 < tarDist){
		moveForward(1650,1650);
	} 
	else{
		moveForward(1500,1500);
   808e2:	f240 50dc 	movw	r0, #1500	; 0x5dc
   808e6:	4601      	mov	r1, r0
   808e8:	4b58      	ldr	r3, [pc, #352]	; (80a4c <driveForward+0x1b0>)
   808ea:	4798      	blx	r3
		testing = 1;
   808ec:	2601      	movs	r6, #1
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   808ee:	4c58      	ldr	r4, [pc, #352]	; (80a50 <driveForward+0x1b4>)
   808f0:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
   808f4:	4b57      	ldr	r3, [pc, #348]	; (80a54 <driveForward+0x1b8>)
   808f6:	f8d3 c03c 	ldr.w	ip, [r3, #60]	; 0x3c
   808fa:	f8d3 e03c 	ldr.w	lr, [r3, #60]	; 0x3c
   808fe:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
   80900:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   80902:	4a55      	ldr	r2, [pc, #340]	; (80a58 <driveForward+0x1bc>)
   80904:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
	

// 	ioport_set_pin_level(R_RESET,LOW);
// 	ioport_set_pin_level(L_RESET,LOW);
	
		r_count = ioport_get_pin_level(R0)+ioport_get_pin_level(R1)*2+ioport_get_pin_level(R2)*4+ioport_get_pin_level(R3)*8
   80906:	4d4c      	ldr	r5, [pc, #304]	; (80a38 <driveForward+0x19c>)
   80908:	f3c8 38c0 	ubfx	r8, r8, #15, #1
   8090c:	f3cc 0c40 	ubfx	ip, ip, #1, #1
   80910:	eb08 0c4c 	add.w	ip, r8, ip, lsl #1
   80914:	f3ce 0ec0 	ubfx	lr, lr, #3, #1
   80918:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
   8091c:	f3c7 2740 	ubfx	r7, r7, #9, #1
   80920:	eb0e 07c7 	add.w	r7, lr, r7, lsl #3
   80924:	f3c0 2080 	ubfx	r0, r0, #10, #1
		+ioport_get_pin_level(R4)*16+ioport_get_pin_level(R5)*32;
   80928:	eb07 1000 	add.w	r0, r7, r0, lsl #4
   8092c:	f3c1 0180 	ubfx	r1, r1, #2, #1
   80930:	eb00 1141 	add.w	r1, r0, r1, lsl #5
	

// 	ioport_set_pin_level(R_RESET,LOW);
// 	ioport_set_pin_level(L_RESET,LOW);
	
		r_count = ioport_get_pin_level(R0)+ioport_get_pin_level(R1)*2+ioport_get_pin_level(R2)*4+ioport_get_pin_level(R3)*8
   80934:	6029      	str	r1, [r5, #0]
   80936:	f8d3 803c 	ldr.w	r8, [r3, #60]	; 0x3c
   8093a:	f8d3 c03c 	ldr.w	ip, [r3, #60]	; 0x3c
   8093e:	f8d3 e03c 	ldr.w	lr, [r3, #60]	; 0x3c
   80942:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   80944:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
   80946:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
		+ioport_get_pin_level(R4)*16+ioport_get_pin_level(R5)*32;
	
		l_count = ioport_get_pin_level(L0)+ioport_get_pin_level(L1)*2+ioport_get_pin_level(L2)*4+ioport_get_pin_level(L3)*8
   80948:	4f3c      	ldr	r7, [pc, #240]	; (80a3c <driveForward+0x1a0>)
   8094a:	f008 0201 	and.w	r2, r8, #1
   8094e:	f3cc 0c80 	ubfx	ip, ip, #2, #1
   80952:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
   80956:	f3ce 1e80 	ubfx	lr, lr, #6, #1
   8095a:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
   8095e:	f3c1 11c0 	ubfx	r1, r1, #7, #1
   80962:	eb0e 01c1 	add.w	r1, lr, r1, lsl #3
   80966:	f3c0 0240 	ubfx	r2, r0, #1, #1
		+ioport_get_pin_level(L4)*16+ioport_get_pin_level(L5)*32;
   8096a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   8096e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   80972:	eb02 1343 	add.w	r3, r2, r3, lsl #5
// 	ioport_set_pin_level(L_RESET,LOW);
	
		r_count = ioport_get_pin_level(R0)+ioport_get_pin_level(R1)*2+ioport_get_pin_level(R2)*4+ioport_get_pin_level(R3)*8
		+ioport_get_pin_level(R4)*16+ioport_get_pin_level(R5)*32;
	
		l_count = ioport_get_pin_level(L0)+ioport_get_pin_level(L1)*2+ioport_get_pin_level(L2)*4+ioport_get_pin_level(L3)*8
   80976:	603b      	str	r3, [r7, #0]
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80978:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80a70 <driveForward+0x1d4>
   8097c:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
   80980:	f8c9 a030 	str.w	sl, [r9, #48]	; 0x30
   80984:	f44f 4880 	mov.w	r8, #16384	; 0x4000
   80988:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
		+ioport_get_pin_level(L4)*16+ioport_get_pin_level(L5)*32;
	
		ioport_set_pin_level(R_RESET,HIGH);
		ioport_set_pin_level(L_RESET,HIGH);
		vTaskDelay(3);
   8098c:	2003      	movs	r0, #3
   8098e:	4b33      	ldr	r3, [pc, #204]	; (80a5c <driveForward+0x1c0>)
   80990:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80992:	f8c9 a034 	str.w	sl, [r9, #52]	; 0x34
   80996:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
	
	
	
	
	
		e_test = 0 -	(r_count - l_count);
   8099a:	683a      	ldr	r2, [r7, #0]
   8099c:	682b      	ldr	r3, [r5, #0]
   8099e:	1ad5      	subs	r5, r2, r3
	
	
	sprintf(str,"\nFelvärde: %d",e);
   809a0:	4c21      	ldr	r4, [pc, #132]	; (80a28 <driveForward+0x18c>)
   809a2:	4620      	mov	r0, r4
   809a4:	492e      	ldr	r1, [pc, #184]	; (80a60 <driveForward+0x1c4>)
   809a6:	4b2f      	ldr	r3, [pc, #188]	; (80a64 <driveForward+0x1c8>)
   809a8:	681a      	ldr	r2, [r3, #0]
   809aa:	4b21      	ldr	r3, [pc, #132]	; (80a30 <driveForward+0x194>)
   809ac:	4798      	blx	r3
	printf(str);
   809ae:	4620      	mov	r0, r4
   809b0:	4b20      	ldr	r3, [pc, #128]	; (80a34 <driveForward+0x198>)
   809b2:	4798      	blx	r3
	
	r_speed=speed;
   809b4:	4b22      	ldr	r3, [pc, #136]	; (80a40 <driveForward+0x1a4>)
   809b6:	6819      	ldr	r1, [r3, #0]
   809b8:	4b22      	ldr	r3, [pc, #136]	; (80a44 <driveForward+0x1a8>)
   809ba:	6019      	str	r1, [r3, #0]
	l_speed=speed;
   809bc:	4b22      	ldr	r3, [pc, #136]	; (80a48 <driveForward+0x1ac>)
   809be:	6019      	str	r1, [r3, #0]
		if(e_test > 0) {
   809c0:	2d00      	cmp	r5, #0
   809c2:	dd0c      	ble.n	809de <driveForward+0x142>
		
			r_speed=speed-(e*Kp);
   809c4:	4b27      	ldr	r3, [pc, #156]	; (80a64 <driveForward+0x1c8>)
   809c6:	681b      	ldr	r3, [r3, #0]
   809c8:	4a27      	ldr	r2, [pc, #156]	; (80a68 <driveForward+0x1cc>)
   809ca:	6812      	ldr	r2, [r2, #0]
   809cc:	fb02 f303 	mul.w	r3, r2, r3
   809d0:	1ac8      	subs	r0, r1, r3
   809d2:	4a1c      	ldr	r2, [pc, #112]	; (80a44 <driveForward+0x1a8>)
   809d4:	6010      	str	r0, [r2, #0]
			l_speed=speed+(e*Kp);
   809d6:	4419      	add	r1, r3
   809d8:	4a1b      	ldr	r2, [pc, #108]	; (80a48 <driveForward+0x1ac>)
   809da:	6011      	str	r1, [r2, #0]
   809dc:	e011      	b.n	80a02 <driveForward+0x166>
		
		}
		else if (e_test < 0){
   809de:	2d00      	cmp	r5, #0
   809e0:	da0c      	bge.n	809fc <driveForward+0x160>
		
			r_speed=speed+(e*Kp);
   809e2:	4b20      	ldr	r3, [pc, #128]	; (80a64 <driveForward+0x1c8>)
   809e4:	681b      	ldr	r3, [r3, #0]
   809e6:	4a20      	ldr	r2, [pc, #128]	; (80a68 <driveForward+0x1cc>)
   809e8:	6812      	ldr	r2, [r2, #0]
   809ea:	fb02 f303 	mul.w	r3, r2, r3
   809ee:	18c8      	adds	r0, r1, r3
   809f0:	4a14      	ldr	r2, [pc, #80]	; (80a44 <driveForward+0x1a8>)
   809f2:	6010      	str	r0, [r2, #0]
			l_speed=speed-(e*Kp);
   809f4:	1ac9      	subs	r1, r1, r3
   809f6:	4a14      	ldr	r2, [pc, #80]	; (80a48 <driveForward+0x1ac>)
   809f8:	6011      	str	r1, [r2, #0]
   809fa:	e002      	b.n	80a02 <driveForward+0x166>
		}
		else{
			moveForward(l_speed,r_speed);
   809fc:	4608      	mov	r0, r1
   809fe:	4b13      	ldr	r3, [pc, #76]	; (80a4c <driveForward+0x1b0>)
   80a00:	4798      	blx	r3
	


	driveCount = (r_count+l_count)/2;
	
	sprintf(str,"\ndriveCount = %d",driveCount);
   80a02:	4c09      	ldr	r4, [pc, #36]	; (80a28 <driveForward+0x18c>)
			moveForward(l_speed,r_speed);
		}
	


	driveCount = (r_count+l_count)/2;
   80a04:	4b0c      	ldr	r3, [pc, #48]	; (80a38 <driveForward+0x19c>)
   80a06:	681a      	ldr	r2, [r3, #0]
   80a08:	4b0c      	ldr	r3, [pc, #48]	; (80a3c <driveForward+0x1a0>)
   80a0a:	681b      	ldr	r3, [r3, #0]
   80a0c:	441a      	add	r2, r3
   80a0e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
	
	sprintf(str,"\ndriveCount = %d",driveCount);
   80a12:	4620      	mov	r0, r4
   80a14:	4915      	ldr	r1, [pc, #84]	; (80a6c <driveForward+0x1d0>)
   80a16:	1052      	asrs	r2, r2, #1
   80a18:	4b05      	ldr	r3, [pc, #20]	; (80a30 <driveForward+0x194>)
   80a1a:	4798      	blx	r3
	printf(str);
   80a1c:	4620      	mov	r0, r4
   80a1e:	4b05      	ldr	r3, [pc, #20]	; (80a34 <driveForward+0x198>)
   80a20:	4798      	blx	r3
	
	return testing;
}
   80a22:	4630      	mov	r0, r6
   80a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80a28:	20078de8 	.word	0x20078de8
   80a2c:	0008a408 	.word	0x0008a408
   80a30:	00084a09 	.word	0x00084a09
   80a34:	00084751 	.word	0x00084751
   80a38:	20070a9c 	.word	0x20070a9c
   80a3c:	20070a88 	.word	0x20070a88
   80a40:	2007018c 	.word	0x2007018c
   80a44:	20070a94 	.word	0x20070a94
   80a48:	20070a98 	.word	0x20070a98
   80a4c:	0008178d 	.word	0x0008178d
   80a50:	400e0e00 	.word	0x400e0e00
   80a54:	400e1400 	.word	0x400e1400
   80a58:	400e1200 	.word	0x400e1200
   80a5c:	00082629 	.word	0x00082629
   80a60:	0008a420 	.word	0x0008a420
   80a64:	20070a90 	.word	0x20070a90
   80a68:	20070188 	.word	0x20070188
   80a6c:	0008a430 	.word	0x0008a430
   80a70:	400e1000 	.word	0x400e1000

00080a74 <rotate>:

int rotate(int turn_angle, int direction){		//Minimum vinkel är fyra
   80a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80a78:	4681      	mov	r9, r0
// 	printf(str);
	
	
	int ret = 0;
	
	int reverse_angle = (direction + 180) % 360;
   80a7a:	31b4      	adds	r1, #180	; 0xb4
   80a7c:	f8df 8250 	ldr.w	r8, [pc, #592]	; 80cd0 <rotate+0x25c>
   80a80:	fb81 4508 	smull	r4, r5, r1, r8
   80a84:	eb01 0a05 	add.w	sl, r1, r5
   80a88:	17cb      	asrs	r3, r1, #31
   80a8a:	ebc3 2a2a 	rsb	sl, r3, sl, asr #8
   80a8e:	f44f 77b4 	mov.w	r7, #360	; 0x168
   80a92:	fb07 1a1a 	mls	sl, r7, sl, r1
	
	sprintf(str,"\nreverse_angle: %d",reverse_angle);
   80a96:	4c7c      	ldr	r4, [pc, #496]	; (80c88 <rotate+0x214>)
   80a98:	4620      	mov	r0, r4
   80a9a:	497c      	ldr	r1, [pc, #496]	; (80c8c <rotate+0x218>)
   80a9c:	4652      	mov	r2, sl
   80a9e:	4e7c      	ldr	r6, [pc, #496]	; (80c90 <rotate+0x21c>)
   80aa0:	47b0      	blx	r6
	printf(str);
   80aa2:	4620      	mov	r0, r4
   80aa4:	4d7b      	ldr	r5, [pc, #492]	; (80c94 <rotate+0x220>)
   80aa6:	47a8      	blx	r5

	int direct_angle = ((abs(reverse_angle - 360) + turn_angle) % 360) - 180;
   80aa8:	f5aa 7ab4 	sub.w	sl, sl, #360	; 0x168
   80aac:	f1ba 0f00 	cmp.w	sl, #0
   80ab0:	bfb8      	it	lt
   80ab2:	f1ca 0a00 	rsblt	sl, sl, #0
   80ab6:	44d1      	add	r9, sl
   80ab8:	fb89 2308 	smull	r2, r3, r9, r8
   80abc:	eb09 0203 	add.w	r2, r9, r3
   80ac0:	ea4f 73e9 	mov.w	r3, r9, asr #31
   80ac4:	ebc3 2322 	rsb	r3, r3, r2, asr #8
   80ac8:	fb07 9913 	mls	r9, r7, r3, r9
   80acc:	f1a9 09b4 	sub.w	r9, r9, #180	; 0xb4

	sprintf(str,"\ndirect_angle: %d",direct_angle);
   80ad0:	4620      	mov	r0, r4
   80ad2:	4971      	ldr	r1, [pc, #452]	; (80c98 <rotate+0x224>)
   80ad4:	464a      	mov	r2, r9
   80ad6:	47b0      	blx	r6
	printf(str);
   80ad8:	4620      	mov	r0, r4
   80ada:	47a8      	blx	r5

	r_count = 0;
   80adc:	2300      	movs	r3, #0
   80ade:	4a6f      	ldr	r2, [pc, #444]	; (80c9c <rotate+0x228>)
   80ae0:	6013      	str	r3, [r2, #0]
	l_count = 0;
   80ae2:	4a6f      	ldr	r2, [pc, #444]	; (80ca0 <rotate+0x22c>)
   80ae4:	6013      	str	r3, [r2, #0]

	printf("\ncount null");
   80ae6:	486f      	ldr	r0, [pc, #444]	; (80ca4 <rotate+0x230>)
   80ae8:	47a8      	blx	r5
   80aea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80aee:	4b6e      	ldr	r3, [pc, #440]	; (80ca8 <rotate+0x234>)
   80af0:	635a      	str	r2, [r3, #52]	; 0x34
   80af2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80af6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80afa:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(L_RESET,LOW);
	ioport_set_pin_level(R_RESET,LOW);

	//Sväng vänster

	if(direct_angle > 0){
   80afc:	f1b9 0f00 	cmp.w	r9, #0
   80b00:	dd50      	ble.n	80ba4 <rotate+0x130>
		while(r_count < (abs(direct_angle) / 4)){
   80b02:	f1b9 0f00 	cmp.w	r9, #0
   80b06:	bfb8      	it	lt
   80b08:	f1c9 0900 	rsblt	r9, r9, #0
   80b0c:	464f      	mov	r7, r9
   80b0e:	f1b9 0f00 	cmp.w	r9, #0
   80b12:	bfb8      	it	lt
   80b14:	f109 0703 	addlt.w	r7, r9, #3
   80b18:	10bf      	asrs	r7, r7, #2
   80b1a:	4b60      	ldr	r3, [pc, #384]	; (80c9c <rotate+0x228>)
   80b1c:	6818      	ldr	r0, [r3, #0]
   80b1e:	4287      	cmp	r7, r0
   80b20:	dd35      	ble.n	80b8e <rotate+0x11a>
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80b22:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80ca8 <rotate+0x234>
   80b26:	4c61      	ldr	r4, [pc, #388]	; (80cac <rotate+0x238>)
   80b28:	f8df 8190 	ldr.w	r8, [pc, #400]	; 80cbc <rotate+0x248>
   80b2c:	f8d9 603c 	ldr.w	r6, [r9, #60]	; 0x3c
   80b30:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   80b32:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   80b34:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   80b36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80b38:	f8d8 203c 	ldr.w	r2, [r8, #60]	; 0x3c
   80b3c:	f3c6 36c0 	ubfx	r6, r6, #15, #1
   80b40:	f3c5 0540 	ubfx	r5, r5, #1, #1
			r_count = ioport_get_pin_level(R0)+ioport_get_pin_level(R1)*2+ioport_get_pin_level(R2)*4+ioport_get_pin_level(R3)*8
   80b44:	eb06 0545 	add.w	r5, r6, r5, lsl #1
   80b48:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   80b4c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   80b50:	f3c1 2140 	ubfx	r1, r1, #9, #1
   80b54:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   80b58:	f3c3 2380 	ubfx	r3, r3, #10, #1
			+ioport_get_pin_level(R4)*16+ioport_get_pin_level(R5)*32;
   80b5c:	eb01 1303 	add.w	r3, r1, r3, lsl #4
   80b60:	f3c2 0280 	ubfx	r2, r2, #2, #1
   80b64:	eb03 1242 	add.w	r2, r3, r2, lsl #5

	//Sväng vänster

	if(direct_angle > 0){
		while(r_count < (abs(direct_angle) / 4)){
			r_count = ioport_get_pin_level(R0)+ioport_get_pin_level(R1)*2+ioport_get_pin_level(R2)*4+ioport_get_pin_level(R3)*8
   80b68:	4d4c      	ldr	r5, [pc, #304]	; (80c9c <rotate+0x228>)
   80b6a:	602a      	str	r2, [r5, #0]
			+ioport_get_pin_level(R4)*16+ioport_get_pin_level(R5)*32;
			
			sprintf(str,"\nr_count = %d", r_count);
   80b6c:	4e46      	ldr	r6, [pc, #280]	; (80c88 <rotate+0x214>)
   80b6e:	4630      	mov	r0, r6
   80b70:	494f      	ldr	r1, [pc, #316]	; (80cb0 <rotate+0x23c>)
   80b72:	4b47      	ldr	r3, [pc, #284]	; (80c90 <rotate+0x21c>)
   80b74:	4798      	blx	r3
			printf(str);
   80b76:	4630      	mov	r0, r6
   80b78:	4b46      	ldr	r3, [pc, #280]	; (80c94 <rotate+0x220>)
   80b7a:	4798      	blx	r3

			moveForward(1400,1600);
   80b7c:	f44f 60af 	mov.w	r0, #1400	; 0x578
   80b80:	f44f 61c8 	mov.w	r1, #1600	; 0x640
   80b84:	4b4b      	ldr	r3, [pc, #300]	; (80cb4 <rotate+0x240>)
   80b86:	4798      	blx	r3
	ioport_set_pin_level(R_RESET,LOW);

	//Sväng vänster

	if(direct_angle > 0){
		while(r_count < (abs(direct_angle) / 4)){
   80b88:	6828      	ldr	r0, [r5, #0]
   80b8a:	42b8      	cmp	r0, r7
   80b8c:	dbce      	blt.n	80b2c <rotate+0xb8>

		}
		
		
		
		int count_total = r_count * 4;
   80b8e:	0085      	lsls	r5, r0, #2
		//printf("RCOUNT =%d ",r_count);
		sprintf(str,"\ncount_right = %d", count_total);
   80b90:	4c3d      	ldr	r4, [pc, #244]	; (80c88 <rotate+0x214>)
   80b92:	4620      	mov	r0, r4
   80b94:	4948      	ldr	r1, [pc, #288]	; (80cb8 <rotate+0x244>)
   80b96:	462a      	mov	r2, r5
   80b98:	4b3d      	ldr	r3, [pc, #244]	; (80c90 <rotate+0x21c>)
   80b9a:	4798      	blx	r3
		printf(str);
   80b9c:	4620      	mov	r0, r4
   80b9e:	4b3d      	ldr	r3, [pc, #244]	; (80c94 <rotate+0x220>)
   80ba0:	4798      	blx	r3
   80ba2:	e05a      	b.n	80c5a <rotate+0x1e6>
		
	}

	//Sväng höger

	else if(direct_angle < 0){
   80ba4:	f1b9 0f00 	cmp.w	r9, #0
   80ba8:	da51      	bge.n	80c4e <rotate+0x1da>
		while(l_count < (abs(direct_angle) / 4)){
   80baa:	f1b9 0f00 	cmp.w	r9, #0
   80bae:	bfb8      	it	lt
   80bb0:	f1c9 0900 	rsblt	r9, r9, #0
   80bb4:	46c8      	mov	r8, r9
   80bb6:	f1b9 0f00 	cmp.w	r9, #0
   80bba:	bfb8      	it	lt
   80bbc:	f109 0803 	addlt.w	r8, r9, #3
   80bc0:	ea4f 08a8 	mov.w	r8, r8, asr #2
   80bc4:	4b36      	ldr	r3, [pc, #216]	; (80ca0 <rotate+0x22c>)
   80bc6:	681b      	ldr	r3, [r3, #0]
   80bc8:	4598      	cmp	r8, r3
   80bca:	dd33      	ble.n	80c34 <rotate+0x1c0>
   80bcc:	4c37      	ldr	r4, [pc, #220]	; (80cac <rotate+0x238>)
   80bce:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80ca8 <rotate+0x234>
   80bd2:	4f3a      	ldr	r7, [pc, #232]	; (80cbc <rotate+0x248>)
   80bd4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   80bd6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   80bd8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   80bda:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
   80bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   80be0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   80be2:	f006 0601 	and.w	r6, r6, #1
   80be6:	f3c5 0580 	ubfx	r5, r5, #2, #1
			l_count = ioport_get_pin_level(L0)+ioport_get_pin_level(L1)*2+ioport_get_pin_level(L2)*4+ioport_get_pin_level(L3)*8
   80bea:	eb06 0545 	add.w	r5, r6, r5, lsl #1
   80bee:	f3c0 1080 	ubfx	r0, r0, #6, #1
   80bf2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   80bf6:	f3c1 11c0 	ubfx	r1, r1, #7, #1
   80bfa:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   80bfe:	f3c3 0340 	ubfx	r3, r3, #1, #1
			+ioport_get_pin_level(L4)*16+ioport_get_pin_level(L5)*32;
   80c02:	eb01 1303 	add.w	r3, r1, r3, lsl #4
   80c06:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   80c0a:	eb03 1242 	add.w	r2, r3, r2, lsl #5

	//Sväng höger

	else if(direct_angle < 0){
		while(l_count < (abs(direct_angle) / 4)){
			l_count = ioport_get_pin_level(L0)+ioport_get_pin_level(L1)*2+ioport_get_pin_level(L2)*4+ioport_get_pin_level(L3)*8
   80c0e:	4d24      	ldr	r5, [pc, #144]	; (80ca0 <rotate+0x22c>)
   80c10:	602a      	str	r2, [r5, #0]
			+ioport_get_pin_level(L4)*16+ioport_get_pin_level(L5)*32;
			
			sprintf(str,"\nl_count = %d", l_count);
   80c12:	4e1d      	ldr	r6, [pc, #116]	; (80c88 <rotate+0x214>)
   80c14:	4630      	mov	r0, r6
   80c16:	492a      	ldr	r1, [pc, #168]	; (80cc0 <rotate+0x24c>)
   80c18:	4b1d      	ldr	r3, [pc, #116]	; (80c90 <rotate+0x21c>)
   80c1a:	4798      	blx	r3
			printf(str);
   80c1c:	4630      	mov	r0, r6
   80c1e:	4b1d      	ldr	r3, [pc, #116]	; (80c94 <rotate+0x220>)
   80c20:	4798      	blx	r3

			moveForward(1600,1400);
   80c22:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   80c26:	f44f 61af 	mov.w	r1, #1400	; 0x578
   80c2a:	4b22      	ldr	r3, [pc, #136]	; (80cb4 <rotate+0x240>)
   80c2c:	4798      	blx	r3
	}

	//Sväng höger

	else if(direct_angle < 0){
		while(l_count < (abs(direct_angle) / 4)){
   80c2e:	682b      	ldr	r3, [r5, #0]
   80c30:	4543      	cmp	r3, r8
   80c32:	dbcf      	blt.n	80bd4 <rotate+0x160>

			moveForward(1600,1400);

		}
		
		int count_total = -l_count * 4;
   80c34:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   80c38:	009a      	lsls	r2, r3, #2
   80c3a:	4615      	mov	r5, r2
		sprintf(str,"\ncount_left = %d", count_total);
   80c3c:	4c12      	ldr	r4, [pc, #72]	; (80c88 <rotate+0x214>)
   80c3e:	4620      	mov	r0, r4
   80c40:	4920      	ldr	r1, [pc, #128]	; (80cc4 <rotate+0x250>)
   80c42:	4b13      	ldr	r3, [pc, #76]	; (80c90 <rotate+0x21c>)
   80c44:	4798      	blx	r3
		printf(str);
   80c46:	4620      	mov	r0, r4
   80c48:	4b12      	ldr	r3, [pc, #72]	; (80c94 <rotate+0x220>)
   80c4a:	4798      	blx	r3
   80c4c:	e005      	b.n	80c5a <rotate+0x1e6>
	}

	//Stoppa

	else{
		moveForward(1500,1500);
   80c4e:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80c52:	4601      	mov	r1, r0
   80c54:	4b17      	ldr	r3, [pc, #92]	; (80cb4 <rotate+0x240>)
   80c56:	4798      	blx	r3
// 	
// 	sprintf(str,"\ndirection: %d",direction);
// 	printf(str);
	
	
	int ret = 0;
   80c58:	2500      	movs	r5, #0
	else{
		moveForward(1500,1500);
		
	}
	
	sprintf(str,"\nCounter = %d",interruptCounter);
   80c5a:	4c0b      	ldr	r4, [pc, #44]	; (80c88 <rotate+0x214>)
   80c5c:	4620      	mov	r0, r4
   80c5e:	491a      	ldr	r1, [pc, #104]	; (80cc8 <rotate+0x254>)
   80c60:	4b1a      	ldr	r3, [pc, #104]	; (80ccc <rotate+0x258>)
   80c62:	681a      	ldr	r2, [r3, #0]
   80c64:	4b0a      	ldr	r3, [pc, #40]	; (80c90 <rotate+0x21c>)
   80c66:	4798      	blx	r3
	printf(str);
   80c68:	4620      	mov	r0, r4
   80c6a:	4b0a      	ldr	r3, [pc, #40]	; (80c94 <rotate+0x220>)
   80c6c:	4798      	blx	r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80c72:	4b0d      	ldr	r3, [pc, #52]	; (80ca8 <rotate+0x234>)
   80c74:	631a      	str	r2, [r3, #48]	; 0x30
   80c76:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80c7a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80c7e:	631a      	str	r2, [r3, #48]	; 0x30

	ioport_set_pin_level(L_RESET,HIGH);
	ioport_set_pin_level(R_RESET,HIGH);

	return ret;
}
   80c80:	4628      	mov	r0, r5
   80c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80c86:	bf00      	nop
   80c88:	20078de8 	.word	0x20078de8
   80c8c:	0008a444 	.word	0x0008a444
   80c90:	00084a09 	.word	0x00084a09
   80c94:	00084751 	.word	0x00084751
   80c98:	0008a458 	.word	0x0008a458
   80c9c:	20070a9c 	.word	0x20070a9c
   80ca0:	20070a88 	.word	0x20070a88
   80ca4:	0008a46c 	.word	0x0008a46c
   80ca8:	400e0e00 	.word	0x400e0e00
   80cac:	400e1400 	.word	0x400e1400
   80cb0:	0008a478 	.word	0x0008a478
   80cb4:	0008178d 	.word	0x0008178d
   80cb8:	0008a488 	.word	0x0008a488
   80cbc:	400e1200 	.word	0x400e1200
   80cc0:	0008a49c 	.word	0x0008a49c
   80cc4:	0008a4ac 	.word	0x0008a4ac
   80cc8:	0008a4c0 	.word	0x0008a4c0
   80ccc:	20070a8c 	.word	0x20070a8c
   80cd0:	b60b60b7 	.word	0xb60b60b7

00080cd4 <cameraSearch>:

int cameraSearch(void){
   80cd4:	b570      	push	{r4, r5, r6, lr}
   80cd6:	2280      	movs	r2, #128	; 0x80
   80cd8:	4b21      	ldr	r3, [pc, #132]	; (80d60 <cameraSearch+0x8c>)
   80cda:	631a      	str	r2, [r3, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80cdc:	461c      	mov	r4, r3
   80cde:	4d21      	ldr	r5, [pc, #132]	; (80d64 <cameraSearch+0x90>)
			printf("\nTurn around");
		}else if(ioport_get_pin_level(ON_TARGET)){
			r=1;
			printf("\nOn target");
		}else{
			printf("\nError");
   80ce0:	4e21      	ldr	r6, [pc, #132]	; (80d68 <cameraSearch+0x94>)
   80ce2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	ioport_set_pin_level(START_CAMERA,HIGH);
	
	int r = 0;
	
	while(0 == r){
		if(ioport_get_pin_level(TURN_LEFT)){
   80ce4:	f413 7f80 	tst.w	r3, #256	; 0x100
   80ce8:	d009      	beq.n	80cfe <cameraSearch+0x2a>
			moveForward(1400,1600);
   80cea:	f44f 60af 	mov.w	r0, #1400	; 0x578
   80cee:	f44f 61c8 	mov.w	r1, #1600	; 0x640
   80cf2:	4b1e      	ldr	r3, [pc, #120]	; (80d6c <cameraSearch+0x98>)
   80cf4:	4798      	blx	r3
			printf("\nTurn left");
   80cf6:	481e      	ldr	r0, [pc, #120]	; (80d70 <cameraSearch+0x9c>)
   80cf8:	4b1e      	ldr	r3, [pc, #120]	; (80d74 <cameraSearch+0xa0>)
   80cfa:	4798      	blx	r3
   80cfc:	e7f1      	b.n	80ce2 <cameraSearch+0xe>
   80cfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		} 
		else if(ioport_get_pin_level(TURN_RIGHT)){
   80d00:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   80d04:	d009      	beq.n	80d1a <cameraSearch+0x46>
			moveForward(1600,1400);	
   80d06:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   80d0a:	f44f 61af 	mov.w	r1, #1400	; 0x578
   80d0e:	4b17      	ldr	r3, [pc, #92]	; (80d6c <cameraSearch+0x98>)
   80d10:	4798      	blx	r3
			printf("\nTurn right");
   80d12:	4819      	ldr	r0, [pc, #100]	; (80d78 <cameraSearch+0xa4>)
   80d14:	4b17      	ldr	r3, [pc, #92]	; (80d74 <cameraSearch+0xa0>)
   80d16:	4798      	blx	r3
   80d18:	e7e3      	b.n	80ce2 <cameraSearch+0xe>
   80d1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		}
		else if(ioport_get_pin_level(OFF_TARGET)){
   80d1c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   80d20:	d009      	beq.n	80d36 <cameraSearch+0x62>
			moveForward(1600,1400);
   80d22:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   80d26:	f44f 61af 	mov.w	r1, #1400	; 0x578
   80d2a:	4b10      	ldr	r3, [pc, #64]	; (80d6c <cameraSearch+0x98>)
   80d2c:	4798      	blx	r3
			printf("\nTurn around");
   80d2e:	4813      	ldr	r0, [pc, #76]	; (80d7c <cameraSearch+0xa8>)
   80d30:	4b10      	ldr	r3, [pc, #64]	; (80d74 <cameraSearch+0xa0>)
   80d32:	4798      	blx	r3
   80d34:	e7d5      	b.n	80ce2 <cameraSearch+0xe>
   80d36:	6beb      	ldr	r3, [r5, #60]	; 0x3c
		}else if(ioport_get_pin_level(ON_TARGET)){
   80d38:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   80d3c:	d103      	bne.n	80d46 <cameraSearch+0x72>
			r=1;
			printf("\nOn target");
		}else{
			printf("\nError");
   80d3e:	4630      	mov	r0, r6
   80d40:	4b0c      	ldr	r3, [pc, #48]	; (80d74 <cameraSearch+0xa0>)
   80d42:	4798      	blx	r3
   80d44:	e7cd      	b.n	80ce2 <cameraSearch+0xe>
		else if(ioport_get_pin_level(OFF_TARGET)){
			moveForward(1600,1400);
			printf("\nTurn around");
		}else if(ioport_get_pin_level(ON_TARGET)){
			r=1;
			printf("\nOn target");
   80d46:	480e      	ldr	r0, [pc, #56]	; (80d80 <cameraSearch+0xac>)
   80d48:	4b0a      	ldr	r3, [pc, #40]	; (80d74 <cameraSearch+0xa0>)
   80d4a:	4798      	blx	r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80d4c:	2280      	movs	r2, #128	; 0x80
   80d4e:	4b04      	ldr	r3, [pc, #16]	; (80d60 <cameraSearch+0x8c>)
   80d50:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	
	ioport_set_pin_level(START_CAMERA,LOW);
	
	moveForward(1500,1500);
   80d52:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80d56:	4601      	mov	r1, r0
   80d58:	4b04      	ldr	r3, [pc, #16]	; (80d6c <cameraSearch+0x98>)
   80d5a:	4798      	blx	r3
	
	return r;	
}
   80d5c:	2001      	movs	r0, #1
   80d5e:	bd70      	pop	{r4, r5, r6, pc}
   80d60:	400e1200 	.word	0x400e1200
   80d64:	400e0e00 	.word	0x400e0e00
   80d68:	0008a504 	.word	0x0008a504
   80d6c:	0008178d 	.word	0x0008178d
   80d70:	0008a4d0 	.word	0x0008a4d0
   80d74:	00084751 	.word	0x00084751
   80d78:	0008a4dc 	.word	0x0008a4dc
   80d7c:	0008a4e8 	.word	0x0008a4e8
   80d80:	0008a4f8 	.word	0x0008a4f8

00080d84 <getCurrentPos>:

void getCurrentPos(){
   80d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	na_sendstatus(XY1);
   80d86:	2050      	movs	r0, #80	; 0x50
   80d88:	4b0f      	ldr	r3, [pc, #60]	; (80dc8 <getCurrentPos+0x44>)
   80d8a:	4798      	blx	r3
	currentx1 = ((data_received_nav[1] << 8) | (data_received_nav[2] << 0));
   80d8c:	490f      	ldr	r1, [pc, #60]	; (80dcc <getCurrentPos+0x48>)
   80d8e:	784a      	ldrb	r2, [r1, #1]
   80d90:	788b      	ldrb	r3, [r1, #2]
   80d92:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   80d96:	4d0e      	ldr	r5, [pc, #56]	; (80dd0 <getCurrentPos+0x4c>)
   80d98:	802a      	strh	r2, [r5, #0]
	currenty1 = ((data_received_nav[3] << 8) | (data_received_nav[4] << 0));
   80d9a:	78c8      	ldrb	r0, [r1, #3]
   80d9c:	790b      	ldrb	r3, [r1, #4]
   80d9e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   80da2:	4c0c      	ldr	r4, [pc, #48]	; (80dd4 <getCurrentPos+0x50>)
   80da4:	8023      	strh	r3, [r4, #0]
	sprintf(str, "\ncurrent x=%d y=%d",currentx1,currenty1);
   80da6:	4e0c      	ldr	r6, [pc, #48]	; (80dd8 <getCurrentPos+0x54>)
   80da8:	4630      	mov	r0, r6
   80daa:	490c      	ldr	r1, [pc, #48]	; (80ddc <getCurrentPos+0x58>)
   80dac:	b212      	sxth	r2, r2
   80dae:	b21b      	sxth	r3, r3
   80db0:	4f0b      	ldr	r7, [pc, #44]	; (80de0 <getCurrentPos+0x5c>)
   80db2:	47b8      	blx	r7
	printf(str);
   80db4:	4630      	mov	r0, r6
   80db6:	4b0b      	ldr	r3, [pc, #44]	; (80de4 <getCurrentPos+0x60>)
   80db8:	4798      	blx	r3
	currentPos[0] = currentx1;
   80dba:	4b0b      	ldr	r3, [pc, #44]	; (80de8 <getCurrentPos+0x64>)
   80dbc:	882a      	ldrh	r2, [r5, #0]
   80dbe:	801a      	strh	r2, [r3, #0]
	currentPos[1] = currenty1;
   80dc0:	8822      	ldrh	r2, [r4, #0]
   80dc2:	805a      	strh	r2, [r3, #2]
   80dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80dc6:	bf00      	nop
   80dc8:	000802d5 	.word	0x000802d5
   80dcc:	20070a80 	.word	0x20070a80
   80dd0:	20078de4 	.word	0x20078de4
   80dd4:	20078de6 	.word	0x20078de6
   80dd8:	20078de8 	.word	0x20078de8
   80ddc:	0008a50c 	.word	0x0008a50c
   80de0:	00084a09 	.word	0x00084a09
   80de4:	00084751 	.word	0x00084751
   80de8:	20078ddc 	.word	0x20078ddc

00080dec <getStartData>:
}

void getStartData(){
   80dec:	b508      	push	{r3, lr}
	na_sendstatus(SQUAREXY);
   80dee:	2053      	movs	r0, #83	; 0x53
   80df0:	4b01      	ldr	r3, [pc, #4]	; (80df8 <getStartData+0xc>)
   80df2:	4798      	blx	r3
   80df4:	bd08      	pop	{r3, pc}
   80df6:	bf00      	nop
   80df8:	000802d5 	.word	0x000802d5

00080dfc <pulseins>:
}




int pulseins(void){
   80dfc:	b570      	push	{r4, r5, r6, lr}
	int state = 1;
	int flag = 0,clocktime;
   80dfe:	2200      	movs	r2, #0
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80e00:	4c11      	ldr	r4, [pc, #68]	; (80e48 <pulseins+0x4c>)
	while(state){
		if(ioport_get_pin_level(EchoPin) && !flag){
			tc_start(TC0,0);
   80e02:	4e12      	ldr	r6, [pc, #72]	; (80e4c <pulseins+0x50>)
   80e04:	4d12      	ldr	r5, [pc, #72]	; (80e50 <pulseins+0x54>)
   80e06:	6be3      	ldr	r3, [r4, #60]	; 0x3c

int pulseins(void){
	int state = 1;
	int flag = 0,clocktime;
	while(state){
		if(ioport_get_pin_level(EchoPin) && !flag){
   80e08:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80e0c:	d005      	beq.n	80e1a <pulseins+0x1e>
   80e0e:	b95a      	cbnz	r2, 80e28 <pulseins+0x2c>
			tc_start(TC0,0);
   80e10:	4630      	mov	r0, r6
   80e12:	2100      	movs	r1, #0
   80e14:	47a8      	blx	r5
			flag = 1;
   80e16:	2201      	movs	r2, #1
   80e18:	e006      	b.n	80e28 <pulseins+0x2c>
   80e1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		}
		if(!ioport_get_pin_level(EchoPin) && flag)
   80e1c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80e20:	d1f1      	bne.n	80e06 <pulseins+0xa>
   80e22:	2a00      	cmp	r2, #0
   80e24:	d0ef      	beq.n	80e06 <pulseins+0xa>
   80e26:	e003      	b.n	80e30 <pulseins+0x34>
   80e28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80e2a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80e2e:	d1ea      	bne.n	80e06 <pulseins+0xa>
		{
			clocktime = tc_read_cv(TC0,0);
   80e30:	4c06      	ldr	r4, [pc, #24]	; (80e4c <pulseins+0x50>)
   80e32:	4620      	mov	r0, r4
   80e34:	2100      	movs	r1, #0
   80e36:	4b07      	ldr	r3, [pc, #28]	; (80e54 <pulseins+0x58>)
   80e38:	4798      	blx	r3
   80e3a:	4605      	mov	r5, r0
			tc_stop(TC0,0);
   80e3c:	4620      	mov	r0, r4
   80e3e:	2100      	movs	r1, #0
   80e40:	4b05      	ldr	r3, [pc, #20]	; (80e58 <pulseins+0x5c>)
   80e42:	4798      	blx	r3
			flag = 0;
			state = 0;
		}
	}
	return clocktime;
}
   80e44:	4628      	mov	r0, r5
   80e46:	bd70      	pop	{r4, r5, r6, pc}
   80e48:	400e1200 	.word	0x400e1200
   80e4c:	40080000 	.word	0x40080000
   80e50:	000812fd 	.word	0x000812fd
   80e54:	0008130d 	.word	0x0008130d
   80e58:	00081305 	.word	0x00081305
   80e5c:	00000000 	.word	0x00000000

00080e60 <task_ultraLjud>:
xSemaphoreHandle main_semafor = 0;


xQueueHandle taskQueue = 0;

void task_ultraLjud(void *pvParameters){
   80e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e64:	b083      	sub	sp, #12
	
	vSemaphoreCreateBinary(signal_semafor);
   80e66:	2001      	movs	r0, #1
   80e68:	2100      	movs	r1, #0
   80e6a:	2203      	movs	r2, #3
   80e6c:	4b7e      	ldr	r3, [pc, #504]	; (81068 <task_ultraLjud+0x208>)
   80e6e:	4798      	blx	r3
   80e70:	4b7e      	ldr	r3, [pc, #504]	; (8106c <task_ultraLjud+0x20c>)
   80e72:	6018      	str	r0, [r3, #0]
   80e74:	b120      	cbz	r0, 80e80 <task_ultraLjud+0x20>
   80e76:	2100      	movs	r1, #0
   80e78:	460a      	mov	r2, r1
   80e7a:	460b      	mov	r3, r1
   80e7c:	4c7c      	ldr	r4, [pc, #496]	; (81070 <task_ultraLjud+0x210>)
   80e7e:	47a0      	blx	r4
	vSemaphoreCreateBinary(regulate_semafor);
   80e80:	2001      	movs	r0, #1
   80e82:	2100      	movs	r1, #0
   80e84:	2203      	movs	r2, #3
   80e86:	4b78      	ldr	r3, [pc, #480]	; (81068 <task_ultraLjud+0x208>)
   80e88:	4798      	blx	r3
   80e8a:	4b7a      	ldr	r3, [pc, #488]	; (81074 <task_ultraLjud+0x214>)
   80e8c:	6018      	str	r0, [r3, #0]
   80e8e:	b120      	cbz	r0, 80e9a <task_ultraLjud+0x3a>
   80e90:	2100      	movs	r1, #0
   80e92:	460a      	mov	r2, r1
   80e94:	460b      	mov	r3, r1
   80e96:	4c76      	ldr	r4, [pc, #472]	; (81070 <task_ultraLjud+0x210>)
   80e98:	47a0      	blx	r4
	vSemaphoreCreateBinary(main_semafor);
   80e9a:	2001      	movs	r0, #1
   80e9c:	2100      	movs	r1, #0
   80e9e:	2203      	movs	r2, #3
   80ea0:	4b71      	ldr	r3, [pc, #452]	; (81068 <task_ultraLjud+0x208>)
   80ea2:	4798      	blx	r3
   80ea4:	4b74      	ldr	r3, [pc, #464]	; (81078 <task_ultraLjud+0x218>)
   80ea6:	6018      	str	r0, [r3, #0]
   80ea8:	b120      	cbz	r0, 80eb4 <task_ultraLjud+0x54>
   80eaa:	2100      	movs	r1, #0
   80eac:	460a      	mov	r2, r1
   80eae:	460b      	mov	r3, r1
   80eb0:	4c6f      	ldr	r4, [pc, #444]	; (81070 <task_ultraLjud+0x210>)
   80eb2:	47a0      	blx	r4
	
	taskQueue = xQueueCreate(5,sizeof(int));
   80eb4:	2005      	movs	r0, #5
   80eb6:	2104      	movs	r1, #4
   80eb8:	2200      	movs	r2, #0
   80eba:	4b6b      	ldr	r3, [pc, #428]	; (81068 <task_ultraLjud+0x208>)
   80ebc:	4798      	blx	r3
   80ebe:	4b6f      	ldr	r3, [pc, #444]	; (8107c <task_ultraLjud+0x21c>)
   80ec0:	6018      	str	r0, [r3, #0]

	
	printf("\nTask Ultraljud");
   80ec2:	486f      	ldr	r0, [pc, #444]	; (81080 <task_ultraLjud+0x220>)
   80ec4:	4c6f      	ldr	r4, [pc, #444]	; (81084 <task_ultraLjud+0x224>)
   80ec6:	47a0      	blx	r4
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 100;
	xLastWakeTime = xTaskGetTickCount();
   80ec8:	4b6f      	ldr	r3, [pc, #444]	; (81088 <task_ultraLjud+0x228>)
   80eca:	4798      	blx	r3
   80ecc:	f8ad 0006 	strh.w	r0, [sp, #6]
	
	printf("TRYING TO SEND TO PA");
   80ed0:	486e      	ldr	r0, [pc, #440]	; (8108c <task_ultraLjud+0x22c>)
   80ed2:	47a0      	blx	r4
	pa_sendstatus(TWI_CMD_ARM_INIT,SOCK);
   80ed4:	2020      	movs	r0, #32
   80ed6:	2102      	movs	r1, #2
   80ed8:	4b6d      	ldr	r3, [pc, #436]	; (81090 <task_ultraLjud+0x230>)
   80eda:	4798      	blx	r3
	
	
	printf("\nGet start data");
   80edc:	486d      	ldr	r0, [pc, #436]	; (81094 <task_ultraLjud+0x234>)
   80ede:	47a0      	blx	r4
	getStartData();
   80ee0:	4b6d      	ldr	r3, [pc, #436]	; (81098 <task_ultraLjud+0x238>)
   80ee2:	4798      	blx	r3
	sprintf(str,"\nstart data. x=%d y=%d",objectinfo[1].xpos,objectinfo[1].ypox);
   80ee4:	4d6d      	ldr	r5, [pc, #436]	; (8109c <task_ultraLjud+0x23c>)
   80ee6:	4b6e      	ldr	r3, [pc, #440]	; (810a0 <task_ultraLjud+0x240>)
   80ee8:	4628      	mov	r0, r5
   80eea:	496e      	ldr	r1, [pc, #440]	; (810a4 <task_ultraLjud+0x244>)
   80eec:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   80ef0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
   80ef4:	4e6c      	ldr	r6, [pc, #432]	; (810a8 <task_ultraLjud+0x248>)
   80ef6:	47b0      	blx	r6
	printf(str);
   80ef8:	4628      	mov	r0, r5
   80efa:	47a0      	blx	r4
	
	while (1){
		
		vTaskDelayUntil(&xLastWakeTime,xTimeIncrement);
   80efc:	4e6b      	ldr	r6, [pc, #428]	; (810ac <task_ultraLjud+0x24c>)
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80efe:	4c6c      	ldr	r4, [pc, #432]	; (810b0 <task_ultraLjud+0x250>)
		
		long duration;
		ioport_set_pin_level(TriggerPin,HIGH);
		delayMicroseconds(10000);
   80f00:	4d6c      	ldr	r5, [pc, #432]	; (810b4 <task_ultraLjud+0x254>)
		ioport_set_pin_level(TriggerPin,LOW);
		duration = pulseins();
		sensordistance = (duration/42)/58.2;
   80f02:	f8df a214 	ldr.w	sl, [pc, #532]	; 81118 <task_ultraLjud+0x2b8>
	sprintf(str,"\nstart data. x=%d y=%d",objectinfo[1].xpos,objectinfo[1].ypox);
	printf(str);
	
	while (1){
		
		vTaskDelayUntil(&xLastWakeTime,xTimeIncrement);
   80f06:	f10d 0006 	add.w	r0, sp, #6
   80f0a:	2164      	movs	r1, #100	; 0x64
   80f0c:	47b0      	blx	r6
   80f0e:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   80f12:	6327      	str	r7, [r4, #48]	; 0x30
		
		long duration;
		ioport_set_pin_level(TriggerPin,HIGH);
		delayMicroseconds(10000);
   80f14:	f242 7010 	movw	r0, #10000	; 0x2710
   80f18:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80f1a:	6367      	str	r7, [r4, #52]	; 0x34
		ioport_set_pin_level(TriggerPin,LOW);
		duration = pulseins();
   80f1c:	4b66      	ldr	r3, [pc, #408]	; (810b8 <task_ultraLjud+0x258>)
   80f1e:	4798      	blx	r3
		sensordistance = (duration/42)/58.2;
   80f20:	fb8a 1300 	smull	r1, r3, sl, r0
   80f24:	17c0      	asrs	r0, r0, #31
   80f26:	ebc0 00e3 	rsb	r0, r0, r3, asr #3
   80f2a:	4b64      	ldr	r3, [pc, #400]	; (810bc <task_ultraLjud+0x25c>)
   80f2c:	4798      	blx	r3
   80f2e:	a34c      	add	r3, pc, #304	; (adr r3, 81060 <task_ultraLjud+0x200>)
   80f30:	e9d3 2300 	ldrd	r2, r3, [r3]
   80f34:	4f62      	ldr	r7, [pc, #392]	; (810c0 <task_ultraLjud+0x260>)
   80f36:	47b8      	blx	r7
   80f38:	4b62      	ldr	r3, [pc, #392]	; (810c4 <task_ultraLjud+0x264>)
   80f3a:	4798      	blx	r3
   80f3c:	4b62      	ldr	r3, [pc, #392]	; (810c8 <task_ultraLjud+0x268>)
   80f3e:	6018      	str	r0, [r3, #0]
		
		switch (main_case)
   80f40:	4b62      	ldr	r3, [pc, #392]	; (810cc <task_ultraLjud+0x26c>)
   80f42:	681b      	ldr	r3, [r3, #0]
   80f44:	3b01      	subs	r3, #1
   80f46:	2b05      	cmp	r3, #5
   80f48:	d87a      	bhi.n	81040 <task_ultraLjud+0x1e0>
   80f4a:	e8df f003 	tbb	[pc, r3]
   80f4e:	4503      	.short	0x4503
   80f50:	6d5c7979 	.word	0x6d5c7979
		{
		case 1:
			printf("\nMain case 1");
   80f54:	485e      	ldr	r0, [pc, #376]	; (810d0 <task_ultraLjud+0x270>)
   80f56:	f8df 812c 	ldr.w	r8, [pc, #300]	; 81084 <task_ultraLjud+0x224>
   80f5a:	47c0      	blx	r8
			getStartData();
   80f5c:	4b4e      	ldr	r3, [pc, #312]	; (81098 <task_ultraLjud+0x238>)
   80f5e:	4798      	blx	r3
			getCurrentPos();
   80f60:	4b5c      	ldr	r3, [pc, #368]	; (810d4 <task_ultraLjud+0x274>)
   80f62:	4798      	blx	r3
			targetAngle = calculateAngle(currentPos[0],currentPos[0],objectinfo[1].xpos,objectinfo[1].ypox);		//Fungerar
   80f64:	4b5c      	ldr	r3, [pc, #368]	; (810d8 <task_ultraLjud+0x278>)
   80f66:	8819      	ldrh	r1, [r3, #0]
   80f68:	4b4d      	ldr	r3, [pc, #308]	; (810a0 <task_ultraLjud+0x240>)
   80f6a:	4608      	mov	r0, r1
   80f6c:	891a      	ldrh	r2, [r3, #8]
   80f6e:	895b      	ldrh	r3, [r3, #10]
   80f70:	4f5a      	ldr	r7, [pc, #360]	; (810dc <task_ultraLjud+0x27c>)
   80f72:	47b8      	blx	r7
   80f74:	4602      	mov	r2, r0
   80f76:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 8111c <task_ultraLjud+0x2bc>
   80f7a:	f8cb 0000 	str.w	r0, [fp]
			sprintf(str,"\ntarget angle = %d",targetAngle);
   80f7e:	4f47      	ldr	r7, [pc, #284]	; (8109c <task_ultraLjud+0x23c>)
   80f80:	4638      	mov	r0, r7
   80f82:	4957      	ldr	r1, [pc, #348]	; (810e0 <task_ultraLjud+0x280>)
   80f84:	4b48      	ldr	r3, [pc, #288]	; (810a8 <task_ultraLjud+0x248>)
   80f86:	4798      	blx	r3
			printf(str);	
   80f88:	4638      	mov	r0, r7
   80f8a:	47c0      	blx	r8
			addAngle = rotate(targetAngle,currentAngle);
   80f8c:	f8df 9190 	ldr.w	r9, [pc, #400]	; 81120 <task_ultraLjud+0x2c0>
   80f90:	f8db 0000 	ldr.w	r0, [fp]
   80f94:	f8d9 1000 	ldr.w	r1, [r9]
   80f98:	4b52      	ldr	r3, [pc, #328]	; (810e4 <task_ultraLjud+0x284>)
   80f9a:	4798      	blx	r3
   80f9c:	4b52      	ldr	r3, [pc, #328]	; (810e8 <task_ultraLjud+0x288>)
   80f9e:	6018      	str	r0, [r3, #0]
			
			currentAngle = (currentAngle + 360 + addAngle) % 360;
   80fa0:	f8d9 3000 	ldr.w	r3, [r9]
   80fa4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
   80fa8:	4418      	add	r0, r3
   80faa:	4950      	ldr	r1, [pc, #320]	; (810ec <task_ultraLjud+0x28c>)
   80fac:	fb80 2301 	smull	r2, r3, r0, r1
   80fb0:	18c2      	adds	r2, r0, r3
   80fb2:	17c3      	asrs	r3, r0, #31
   80fb4:	ebc3 2222 	rsb	r2, r3, r2, asr #8
   80fb8:	f44f 73b4 	mov.w	r3, #360	; 0x168
   80fbc:	fb03 0212 	mls	r2, r3, r2, r0
   80fc0:	f8c9 2000 	str.w	r2, [r9]
			
			sprintf(str,"\ncurrentAngle = %d",currentAngle);
   80fc4:	4638      	mov	r0, r7
   80fc6:	494a      	ldr	r1, [pc, #296]	; (810f0 <task_ultraLjud+0x290>)
   80fc8:	4b37      	ldr	r3, [pc, #220]	; (810a8 <task_ultraLjud+0x248>)
   80fca:	4798      	blx	r3
			printf(str);
   80fcc:	4638      	mov	r0, r7
   80fce:	47c0      	blx	r8
			
				
			main_case = 2;
   80fd0:	2202      	movs	r2, #2
   80fd2:	4b3e      	ldr	r3, [pc, #248]	; (810cc <task_ultraLjud+0x26c>)
   80fd4:	601a      	str	r2, [r3, #0]

			break;
   80fd6:	e036      	b.n	81046 <task_ultraLjud+0x1e6>
		case 2:
			printf("\nMain case 2");
   80fd8:	4846      	ldr	r0, [pc, #280]	; (810f4 <task_ultraLjud+0x294>)
   80fda:	4b2a      	ldr	r3, [pc, #168]	; (81084 <task_ultraLjud+0x224>)
   80fdc:	4798      	blx	r3
			getCurrentPos();
   80fde:	4b3d      	ldr	r3, [pc, #244]	; (810d4 <task_ultraLjud+0x274>)
   80fe0:	4798      	blx	r3
// 				startx = currentPos[0];
// 				flag_test = 0;
// 			} 
			
			
			targetDistance = calculateDistance(currentPos[0],currentPos[1],objectinfo[1].xpos,objectinfo[1].ypox);
   80fe2:	4a3d      	ldr	r2, [pc, #244]	; (810d8 <task_ultraLjud+0x278>)
   80fe4:	4b2e      	ldr	r3, [pc, #184]	; (810a0 <task_ultraLjud+0x240>)
   80fe6:	8810      	ldrh	r0, [r2, #0]
   80fe8:	8851      	ldrh	r1, [r2, #2]
   80fea:	891a      	ldrh	r2, [r3, #8]
   80fec:	895b      	ldrh	r3, [r3, #10]
   80fee:	4f42      	ldr	r7, [pc, #264]	; (810f8 <task_ultraLjud+0x298>)
   80ff0:	47b8      	blx	r7
   80ff2:	4b42      	ldr	r3, [pc, #264]	; (810fc <task_ultraLjud+0x29c>)
   80ff4:	6018      	str	r0, [r3, #0]
// 			printf("\nDistance drive");
// 			
// 			sprintf(str,"\ndriven to target = %d",drivenToTarget);
// 			printf(str);
				
			if(1==driveForward(targetDistance)){
   80ff6:	4b42      	ldr	r3, [pc, #264]	; (81100 <task_ultraLjud+0x2a0>)
   80ff8:	4798      	blx	r3
   80ffa:	2801      	cmp	r0, #1
   80ffc:	d123      	bne.n	81046 <task_ultraLjud+0x1e6>
				main_case = 5;
   80ffe:	2205      	movs	r2, #5
   81000:	4b32      	ldr	r3, [pc, #200]	; (810cc <task_ultraLjud+0x26c>)
   81002:	601a      	str	r2, [r3, #0]
   81004:	e01f      	b.n	81046 <task_ultraLjud+0x1e6>
// 		}
		
//		break;
		case 5:
	
			if(cameraSearch()){
   81006:	4b3f      	ldr	r3, [pc, #252]	; (81104 <task_ultraLjud+0x2a4>)
   81008:	4798      	blx	r3
   8100a:	b138      	cbz	r0, 8101c <task_ultraLjud+0x1bc>
				main_case = 6;
   8100c:	2206      	movs	r2, #6
   8100e:	4b2f      	ldr	r3, [pc, #188]	; (810cc <task_ultraLjud+0x26c>)
   81010:	601a      	str	r2, [r3, #0]
				pa_sendstatus(TWI_CMD_PICKUP_START,SQUARE);
   81012:	2022      	movs	r0, #34	; 0x22
   81014:	2103      	movs	r1, #3
   81016:	4b1e      	ldr	r3, [pc, #120]	; (81090 <task_ultraLjud+0x230>)
   81018:	4798      	blx	r3
   8101a:	e005      	b.n	81028 <task_ultraLjud+0x1c8>
			}else{
				main_case = 5;
   8101c:	2205      	movs	r2, #5
   8101e:	4b2b      	ldr	r3, [pc, #172]	; (810cc <task_ultraLjud+0x26c>)
   81020:	601a      	str	r2, [r3, #0]
				printf("\nElse_camera");
   81022:	4839      	ldr	r0, [pc, #228]	; (81108 <task_ultraLjud+0x2a8>)
   81024:	4b17      	ldr	r3, [pc, #92]	; (81084 <task_ultraLjud+0x224>)
   81026:	4798      	blx	r3
			}
		case 6:
			pa_sendstatus(TWI_CMD_PICKUP_STATUS,0);
   81028:	2024      	movs	r0, #36	; 0x24
   8102a:	2100      	movs	r1, #0
   8102c:	4b18      	ldr	r3, [pc, #96]	; (81090 <task_ultraLjud+0x230>)
   8102e:	4798      	blx	r3
			if(data_received_pab[1] == 2){
   81030:	4b36      	ldr	r3, [pc, #216]	; (8110c <task_ultraLjud+0x2ac>)
   81032:	785b      	ldrb	r3, [r3, #1]
   81034:	2b02      	cmp	r3, #2
   81036:	d106      	bne.n	81046 <task_ultraLjud+0x1e6>
				main_case = 0;
   81038:	2200      	movs	r2, #0
   8103a:	4b24      	ldr	r3, [pc, #144]	; (810cc <task_ultraLjud+0x26c>)
   8103c:	601a      	str	r2, [r3, #0]
   8103e:	e002      	b.n	81046 <task_ultraLjud+0x1e6>
				//inte klar;
			}
			break;
		
		default:	
			printf("\nmain default");
   81040:	4833      	ldr	r0, [pc, #204]	; (81110 <task_ultraLjud+0x2b0>)
   81042:	4b10      	ldr	r3, [pc, #64]	; (81084 <task_ultraLjud+0x224>)
   81044:	4798      	blx	r3
			break;
			
		}
		
		sprintf(str,"\nX = %d och y = %d",currentPos[0],currentPos[1]);
   81046:	4b24      	ldr	r3, [pc, #144]	; (810d8 <task_ultraLjud+0x278>)
   81048:	4814      	ldr	r0, [pc, #80]	; (8109c <task_ultraLjud+0x23c>)
   8104a:	4932      	ldr	r1, [pc, #200]	; (81114 <task_ultraLjud+0x2b4>)
   8104c:	f9b3 2000 	ldrsh.w	r2, [r3]
   81050:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   81054:	4f14      	ldr	r7, [pc, #80]	; (810a8 <task_ultraLjud+0x248>)
   81056:	47b8      	blx	r7
//		}
		
		
		/*vTaskDelay(100);*/
		
	}
   81058:	e755      	b.n	80f06 <task_ultraLjud+0xa6>
   8105a:	bf00      	nop
   8105c:	f3af 8000 	nop.w
   81060:	9999999a 	.word	0x9999999a
   81064:	404d1999 	.word	0x404d1999
   81068:	00081ca1 	.word	0x00081ca1
   8106c:	20070aac 	.word	0x20070aac
   81070:	00081cf9 	.word	0x00081cf9
   81074:	20070ab8 	.word	0x20070ab8
   81078:	20070ab0 	.word	0x20070ab0
   8107c:	20070aa0 	.word	0x20070aa0
   81080:	0008a520 	.word	0x0008a520
   81084:	00084751 	.word	0x00084751
   81088:	0008233d 	.word	0x0008233d
   8108c:	0008a530 	.word	0x0008a530
   81090:	000803dd 	.word	0x000803dd
   81094:	0008a548 	.word	0x0008a548
   81098:	00080ded 	.word	0x00080ded
   8109c:	20078de8 	.word	0x20078de8
   810a0:	20078db8 	.word	0x20078db8
   810a4:	0008a558 	.word	0x0008a558
   810a8:	00084a09 	.word	0x00084a09
   810ac:	00082591 	.word	0x00082591
   810b0:	400e1200 	.word	0x400e1200
   810b4:	00081709 	.word	0x00081709
   810b8:	00080dfd 	.word	0x00080dfd
   810bc:	000840a5 	.word	0x000840a5
   810c0:	000843c5 	.word	0x000843c5
   810c4:	000846a5 	.word	0x000846a5
   810c8:	20070198 	.word	0x20070198
   810cc:	20070194 	.word	0x20070194
   810d0:	0008a570 	.word	0x0008a570
   810d4:	00080d85 	.word	0x00080d85
   810d8:	20078ddc 	.word	0x20078ddc
   810dc:	00080731 	.word	0x00080731
   810e0:	0008a580 	.word	0x0008a580
   810e4:	00080a75 	.word	0x00080a75
   810e8:	20070abc 	.word	0x20070abc
   810ec:	b60b60b7 	.word	0xb60b60b7
   810f0:	0008a594 	.word	0x0008a594
   810f4:	0008a5a8 	.word	0x0008a5a8
   810f8:	000806d9 	.word	0x000806d9
   810fc:	20070ac0 	.word	0x20070ac0
   81100:	0008089d 	.word	0x0008089d
   81104:	00080cd5 	.word	0x00080cd5
   81108:	0008a5b8 	.word	0x0008a5b8
   8110c:	20070a7c 	.word	0x20070a7c
   81110:	0008a5c8 	.word	0x0008a5c8
   81114:	0008a5d8 	.word	0x0008a5d8
   81118:	30c30c31 	.word	0x30c30c31
   8111c:	20070aa8 	.word	0x20070aa8
   81120:	20070aa4 	.word	0x20070aa4
   81124:	f3af 8000 	nop.w

00081128 <init_sensor>:
		}
	}
	return clocktime;
}

void init_sensor(void){
   81128:	b510      	push	{r4, lr}
	printf("\nInit sensor OK");
   8112a:	4808      	ldr	r0, [pc, #32]	; (8114c <init_sensor+0x24>)
   8112c:	4c08      	ldr	r4, [pc, #32]	; (81150 <init_sensor+0x28>)
   8112e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81130:	4b08      	ldr	r3, [pc, #32]	; (81154 <init_sensor+0x2c>)
   81132:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   81136:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81138:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8113c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   81140:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81142:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(TriggerPin,IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(EchoPin,IOPORT_DIR_INPUT);
	printf("\nSet Echo & Trigger OK");
   81146:	4804      	ldr	r0, [pc, #16]	; (81158 <init_sensor+0x30>)
   81148:	47a0      	blx	r4
   8114a:	bd10      	pop	{r4, pc}
   8114c:	0008a5ec 	.word	0x0008a5ec
   81150:	00084751 	.word	0x00084751
   81154:	400e1200 	.word	0x400e1200
   81158:	0008a5fc 	.word	0x0008a5fc

0008115c <task_Regulate>:
	
	
	
}

void task_Regulate(void *pvParameters){
   8115c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81160:	b082      	sub	sp, #8
	
	
	
	portTickType xLastWakeTimeRegulate;
	const portTickType xTimeIncrementRegulate = 10;
	xLastWakeTimeRegulate = xTaskGetTickCount();
   81162:	4b26      	ldr	r3, [pc, #152]	; (811fc <task_Regulate+0xa0>)
   81164:	4798      	blx	r3
   81166:	f8ad 0002 	strh.w	r0, [sp, #2]
	
	
	
	while(1){
		
		vTaskDelayUntil(&xLastWakeTimeRegulate,xTimeIncrementRegulate);
   8116a:	4e25      	ldr	r6, [pc, #148]	; (81200 <task_Regulate+0xa4>)
		

		if(xSemaphoreTake(regulate_semafor,100)){
   8116c:	4d25      	ldr	r5, [pc, #148]	; (81204 <task_Regulate+0xa8>)
   8116e:	4c26      	ldr	r4, [pc, #152]	; (81208 <task_Regulate+0xac>)
			
			if(xQueueReceive(taskQueue,&ir,20)){
   81170:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 81240 <task_Regulate+0xe4>
	
	
	
	while(1){
		
		vTaskDelayUntil(&xLastWakeTimeRegulate,xTimeIncrementRegulate);
   81174:	f10d 0002 	add.w	r0, sp, #2
   81178:	210a      	movs	r1, #10
   8117a:	47b0      	blx	r6
		

		if(xSemaphoreTake(regulate_semafor,100)){
   8117c:	6828      	ldr	r0, [r5, #0]
   8117e:	2100      	movs	r1, #0
   81180:	2264      	movs	r2, #100	; 0x64
   81182:	460b      	mov	r3, r1
   81184:	47a0      	blx	r4
   81186:	2800      	cmp	r0, #0
   81188:	d0f4      	beq.n	81174 <task_Regulate+0x18>
			
			if(xQueueReceive(taskQueue,&ir,20)){
   8118a:	f8d8 0000 	ldr.w	r0, [r8]
   8118e:	a901      	add	r1, sp, #4
   81190:	2214      	movs	r2, #20
   81192:	2300      	movs	r3, #0
   81194:	47a0      	blx	r4
   81196:	b148      	cbz	r0, 811ac <task_Regulate+0x50>
				sprintf(str, "\nReceived: %d", ir);
   81198:	4f1c      	ldr	r7, [pc, #112]	; (8120c <task_Regulate+0xb0>)
   8119a:	4638      	mov	r0, r7
   8119c:	491c      	ldr	r1, [pc, #112]	; (81210 <task_Regulate+0xb4>)
   8119e:	9a01      	ldr	r2, [sp, #4]
   811a0:	4b1c      	ldr	r3, [pc, #112]	; (81214 <task_Regulate+0xb8>)
   811a2:	4798      	blx	r3
				printf(str);
   811a4:	4638      	mov	r0, r7
   811a6:	4b1c      	ldr	r3, [pc, #112]	; (81218 <task_Regulate+0xbc>)
   811a8:	4798      	blx	r3
   811aa:	e002      	b.n	811b2 <task_Regulate+0x56>
				}else{
				printf("\nFailed to receive");
   811ac:	481b      	ldr	r0, [pc, #108]	; (8121c <task_Regulate+0xc0>)
   811ae:	4b1a      	ldr	r3, [pc, #104]	; (81218 <task_Regulate+0xbc>)
   811b0:	4798      	blx	r3
			}
			
			switch (ir)
   811b2:	9b01      	ldr	r3, [sp, #4]
   811b4:	2b01      	cmp	r3, #1
   811b6:	d003      	beq.n	811c0 <task_Regulate+0x64>
   811b8:	2b02      	cmp	r3, #2
   811ba:	d010      	beq.n	811de <task_Regulate+0x82>
   811bc:	b9d3      	cbnz	r3, 811f4 <task_Regulate+0x98>
   811be:	e7d9      	b.n	81174 <task_Regulate+0x18>
			{
			case 0:					//Kör framåt
				//driveForward();					//Kör tills den inte gör det
				break;
			case 1:					//Sväng
				if(rotate(angle, dir)){			//angle = slut-riktning, dir = nuvarande riktning
   811c0:	4b17      	ldr	r3, [pc, #92]	; (81220 <task_Regulate+0xc4>)
   811c2:	6818      	ldr	r0, [r3, #0]
   811c4:	4b17      	ldr	r3, [pc, #92]	; (81224 <task_Regulate+0xc8>)
   811c6:	6819      	ldr	r1, [r3, #0]
   811c8:	4b17      	ldr	r3, [pc, #92]	; (81228 <task_Regulate+0xcc>)
   811ca:	4798      	blx	r3
   811cc:	b118      	cbz	r0, 811d6 <task_Regulate+0x7a>
					n=3;
   811ce:	2203      	movs	r2, #3
   811d0:	4b16      	ldr	r3, [pc, #88]	; (8122c <task_Regulate+0xd0>)
   811d2:	601a      	str	r2, [r3, #0]
   811d4:	e7ce      	b.n	81174 <task_Regulate+0x18>
				}else{
					printf("\nRotate not completed");
   811d6:	4816      	ldr	r0, [pc, #88]	; (81230 <task_Regulate+0xd4>)
   811d8:	4b0f      	ldr	r3, [pc, #60]	; (81218 <task_Regulate+0xbc>)
   811da:	4798      	blx	r3
   811dc:	e7ca      	b.n	81174 <task_Regulate+0x18>
				}
				break;
			case 2:					//Sensor-sök
				if(cameraSearch()){
   811de:	4b15      	ldr	r3, [pc, #84]	; (81234 <task_Regulate+0xd8>)
   811e0:	4798      	blx	r3
   811e2:	b118      	cbz	r0, 811ec <task_Regulate+0x90>
					n=3;
   811e4:	2203      	movs	r2, #3
   811e6:	4b11      	ldr	r3, [pc, #68]	; (8122c <task_Regulate+0xd0>)
   811e8:	601a      	str	r2, [r3, #0]
   811ea:	e7c3      	b.n	81174 <task_Regulate+0x18>
				}else{
					printf("\nObject not found");
   811ec:	4812      	ldr	r0, [pc, #72]	; (81238 <task_Regulate+0xdc>)
   811ee:	4b0a      	ldr	r3, [pc, #40]	; (81218 <task_Regulate+0xbc>)
   811f0:	4798      	blx	r3
   811f2:	e7bf      	b.n	81174 <task_Regulate+0x18>
				}
				break;
			default:
				printf("\nDefault");
   811f4:	4811      	ldr	r0, [pc, #68]	; (8123c <task_Regulate+0xe0>)
   811f6:	4b08      	ldr	r3, [pc, #32]	; (81218 <task_Regulate+0xbc>)
   811f8:	4798      	blx	r3
				break;
   811fa:	e7bb      	b.n	81174 <task_Regulate+0x18>
   811fc:	0008233d 	.word	0x0008233d
   81200:	00082591 	.word	0x00082591
   81204:	20070ab8 	.word	0x20070ab8
   81208:	00081ead 	.word	0x00081ead
   8120c:	20078de8 	.word	0x20078de8
   81210:	0008a614 	.word	0x0008a614
   81214:	00084a09 	.word	0x00084a09
   81218:	00084751 	.word	0x00084751
   8121c:	0008a624 	.word	0x0008a624
   81220:	20070190 	.word	0x20070190
   81224:	2007019c 	.word	0x2007019c
   81228:	00080a75 	.word	0x00080a75
   8122c:	20070ab4 	.word	0x20070ab4
   81230:	0008a638 	.word	0x0008a638
   81234:	00080cd5 	.word	0x00080cd5
   81238:	0008a650 	.word	0x0008a650
   8123c:	0008a664 	.word	0x0008a664
   81240:	20070aa0 	.word	0x20070aa0

00081244 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   81244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81248:	460c      	mov	r4, r1
   8124a:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   8124c:	b960      	cbnz	r0, 81268 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   8124e:	2a00      	cmp	r2, #0
   81250:	dd0e      	ble.n	81270 <_read+0x2c>
   81252:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   81254:	4e09      	ldr	r6, [pc, #36]	; (8127c <_read+0x38>)
   81256:	4d0a      	ldr	r5, [pc, #40]	; (81280 <_read+0x3c>)
   81258:	6830      	ldr	r0, [r6, #0]
   8125a:	4621      	mov	r1, r4
   8125c:	682b      	ldr	r3, [r5, #0]
   8125e:	4798      	blx	r3
		ptr++;
   81260:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   81262:	42bc      	cmp	r4, r7
   81264:	d1f8      	bne.n	81258 <_read+0x14>
   81266:	e006      	b.n	81276 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   81268:	f04f 30ff 	mov.w	r0, #4294967295
   8126c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   81270:	2000      	movs	r0, #0
   81272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   81276:	4640      	mov	r0, r8
	}
	return nChars;
}
   81278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8127c:	20078e10 	.word	0x20078e10
   81280:	20078e08 	.word	0x20078e08

00081284 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   81284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81288:	460e      	mov	r6, r1
   8128a:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8128c:	3801      	subs	r0, #1
   8128e:	2802      	cmp	r0, #2
   81290:	d80f      	bhi.n	812b2 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   81292:	b192      	cbz	r2, 812ba <_write+0x36>
   81294:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   81296:	f8df 803c 	ldr.w	r8, [pc, #60]	; 812d4 <_write+0x50>
   8129a:	4f0d      	ldr	r7, [pc, #52]	; (812d0 <_write+0x4c>)
   8129c:	f8d8 0000 	ldr.w	r0, [r8]
   812a0:	5d31      	ldrb	r1, [r6, r4]
   812a2:	683b      	ldr	r3, [r7, #0]
   812a4:	4798      	blx	r3
   812a6:	2800      	cmp	r0, #0
   812a8:	db0a      	blt.n	812c0 <_write+0x3c>
			return -1;
		}
		++nChars;
   812aa:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   812ac:	42a5      	cmp	r5, r4
   812ae:	d1f5      	bne.n	8129c <_write+0x18>
   812b0:	e00a      	b.n	812c8 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   812b2:	f04f 30ff 	mov.w	r0, #4294967295
   812b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   812ba:	2000      	movs	r0, #0
   812bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   812c0:	f04f 30ff 	mov.w	r0, #4294967295
   812c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   812c8:	4620      	mov	r0, r4
	}
	return nChars;
}
   812ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   812ce:	bf00      	nop
   812d0:	20078e0c 	.word	0x20078e0c
   812d4:	20078e10 	.word	0x20078e10

000812d8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   812d8:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   812da:	0189      	lsls	r1, r1, #6
   812dc:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   812de:	2402      	movs	r4, #2
   812e0:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   812e2:	f04f 31ff 	mov.w	r1, #4294967295
   812e6:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   812e8:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   812ea:	605a      	str	r2, [r3, #4]
}
   812ec:	f85d 4b04 	ldr.w	r4, [sp], #4
   812f0:	4770      	bx	lr
   812f2:	bf00      	nop

000812f4 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   812f4:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   812f8:	4770      	bx	lr
   812fa:	bf00      	nop

000812fc <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   812fc:	0189      	lsls	r1, r1, #6
   812fe:	2305      	movs	r3, #5
   81300:	5043      	str	r3, [r0, r1]
   81302:	4770      	bx	lr

00081304 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   81304:	0189      	lsls	r1, r1, #6
   81306:	2302      	movs	r3, #2
   81308:	5043      	str	r3, [r0, r1]
   8130a:	4770      	bx	lr

0008130c <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   8130c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   81310:	6908      	ldr	r0, [r1, #16]
}
   81312:	4770      	bx	lr

00081314 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81314:	6943      	ldr	r3, [r0, #20]
   81316:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8131a:	bf1d      	ittte	ne
   8131c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   81320:	61c1      	strne	r1, [r0, #28]
	return 0;
   81322:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   81324:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   81326:	4770      	bx	lr

00081328 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81328:	6943      	ldr	r3, [r0, #20]
   8132a:	f013 0f01 	tst.w	r3, #1
   8132e:	d005      	beq.n	8133c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81330:	6983      	ldr	r3, [r0, #24]
   81332:	f3c3 0308 	ubfx	r3, r3, #0, #9
   81336:	600b      	str	r3, [r1, #0]

	return 0;
   81338:	2000      	movs	r0, #0
   8133a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8133c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8133e:	4770      	bx	lr

00081340 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   81340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81344:	b083      	sub	sp, #12
   81346:	4605      	mov	r5, r0
	while (len) {
   81348:	4690      	mov	r8, r2
   8134a:	2a00      	cmp	r2, #0
   8134c:	d047      	beq.n	813de <usart_serial_read_packet+0x9e>
   8134e:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81350:	4f25      	ldr	r7, [pc, #148]	; (813e8 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   81352:	4c26      	ldr	r4, [pc, #152]	; (813ec <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81354:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 81400 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   81358:	f8df b094 	ldr.w	fp, [pc, #148]	; 813f0 <usart_serial_read_packet+0xb0>
   8135c:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   81360:	2300      	movs	r3, #0
   81362:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81364:	4b22      	ldr	r3, [pc, #136]	; (813f0 <usart_serial_read_packet+0xb0>)
   81366:	429d      	cmp	r5, r3
   81368:	d106      	bne.n	81378 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   8136a:	4658      	mov	r0, fp
   8136c:	4649      	mov	r1, r9
   8136e:	4b21      	ldr	r3, [pc, #132]	; (813f4 <usart_serial_read_packet+0xb4>)
   81370:	4798      	blx	r3
   81372:	2800      	cmp	r0, #0
   81374:	d1f9      	bne.n	8136a <usart_serial_read_packet+0x2a>
   81376:	e019      	b.n	813ac <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81378:	4b1f      	ldr	r3, [pc, #124]	; (813f8 <usart_serial_read_packet+0xb8>)
   8137a:	429d      	cmp	r5, r3
   8137c:	d109      	bne.n	81392 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8137e:	4699      	mov	r9, r3
   81380:	4648      	mov	r0, r9
   81382:	a901      	add	r1, sp, #4
   81384:	47a0      	blx	r4
   81386:	2800      	cmp	r0, #0
   81388:	d1fa      	bne.n	81380 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   8138a:	9b01      	ldr	r3, [sp, #4]
   8138c:	f806 3c01 	strb.w	r3, [r6, #-1]
   81390:	e017      	b.n	813c2 <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81392:	4b1a      	ldr	r3, [pc, #104]	; (813fc <usart_serial_read_packet+0xbc>)
   81394:	429d      	cmp	r5, r3
   81396:	d109      	bne.n	813ac <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   81398:	4699      	mov	r9, r3
   8139a:	4648      	mov	r0, r9
   8139c:	a901      	add	r1, sp, #4
   8139e:	47a0      	blx	r4
   813a0:	2800      	cmp	r0, #0
   813a2:	d1fa      	bne.n	8139a <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   813a4:	9b01      	ldr	r3, [sp, #4]
   813a6:	f806 3c01 	strb.w	r3, [r6, #-1]
   813aa:	e014      	b.n	813d6 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   813ac:	4555      	cmp	r5, sl
   813ae:	d108      	bne.n	813c2 <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   813b0:	4650      	mov	r0, sl
   813b2:	a901      	add	r1, sp, #4
   813b4:	47a0      	blx	r4
   813b6:	2800      	cmp	r0, #0
   813b8:	d1fa      	bne.n	813b0 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   813ba:	9b01      	ldr	r3, [sp, #4]
   813bc:	f806 3c01 	strb.w	r3, [r6, #-1]
   813c0:	e009      	b.n	813d6 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   813c2:	42bd      	cmp	r5, r7
   813c4:	d107      	bne.n	813d6 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   813c6:	4638      	mov	r0, r7
   813c8:	a901      	add	r1, sp, #4
   813ca:	47a0      	blx	r4
   813cc:	2800      	cmp	r0, #0
   813ce:	d1fa      	bne.n	813c6 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   813d0:	9b01      	ldr	r3, [sp, #4]
   813d2:	f806 3c01 	strb.w	r3, [r6, #-1]
   813d6:	3601      	adds	r6, #1
   813d8:	f1b8 0801 	subs.w	r8, r8, #1
   813dc:	d1be      	bne.n	8135c <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   813de:	2000      	movs	r0, #0
   813e0:	b003      	add	sp, #12
   813e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   813e6:	bf00      	nop
   813e8:	400a4000 	.word	0x400a4000
   813ec:	00081329 	.word	0x00081329
   813f0:	400e0800 	.word	0x400e0800
   813f4:	0008144d 	.word	0x0008144d
   813f8:	40098000 	.word	0x40098000
   813fc:	4009c000 	.word	0x4009c000
   81400:	400a0000 	.word	0x400a0000

00081404 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81404:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81406:	23ac      	movs	r3, #172	; 0xac
   81408:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8140a:	680a      	ldr	r2, [r1, #0]
   8140c:	684b      	ldr	r3, [r1, #4]
   8140e:	fbb2 f3f3 	udiv	r3, r2, r3
   81412:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81414:	1e5c      	subs	r4, r3, #1
   81416:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8141a:	4294      	cmp	r4, r2
   8141c:	d80a      	bhi.n	81434 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   8141e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81420:	688b      	ldr	r3, [r1, #8]
   81422:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81424:	f240 2302 	movw	r3, #514	; 0x202
   81428:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8142c:	2350      	movs	r3, #80	; 0x50
   8142e:	6003      	str	r3, [r0, #0]

	return 0;
   81430:	2000      	movs	r0, #0
   81432:	e000      	b.n	81436 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   81434:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   81436:	f85d 4b04 	ldr.w	r4, [sp], #4
   8143a:	4770      	bx	lr

0008143c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8143c:	6943      	ldr	r3, [r0, #20]
   8143e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   81442:	bf1a      	itte	ne
   81444:	61c1      	strne	r1, [r0, #28]
	return 0;
   81446:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   81448:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   8144a:	4770      	bx	lr

0008144c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8144c:	6943      	ldr	r3, [r0, #20]
   8144e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81452:	bf1d      	ittte	ne
   81454:	6983      	ldrne	r3, [r0, #24]
   81456:	700b      	strbne	r3, [r1, #0]
	return 0;
   81458:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8145a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   8145c:	4770      	bx	lr
   8145e:	bf00      	nop

00081460 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   81460:	b500      	push	{lr}
   81462:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   81464:	4811      	ldr	r0, [pc, #68]	; (814ac <USART0_Handler+0x4c>)
   81466:	f10d 0107 	add.w	r1, sp, #7
   8146a:	2201      	movs	r2, #1
   8146c:	4b10      	ldr	r3, [pc, #64]	; (814b0 <USART0_Handler+0x50>)
   8146e:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81470:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   81472:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   81476:	2200      	movs	r2, #0
   81478:	4b0e      	ldr	r3, [pc, #56]	; (814b4 <USART0_Handler+0x54>)
   8147a:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   8147c:	4b0e      	ldr	r3, [pc, #56]	; (814b8 <USART0_Handler+0x58>)
   8147e:	781b      	ldrb	r3, [r3, #0]
   81480:	f89d 1007 	ldrb.w	r1, [sp, #7]
   81484:	4a0d      	ldr	r2, [pc, #52]	; (814bc <USART0_Handler+0x5c>)
   81486:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   81488:	2b9b      	cmp	r3, #155	; 0x9b
   8148a:	d103      	bne.n	81494 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   8148c:	2200      	movs	r2, #0
   8148e:	4b0a      	ldr	r3, [pc, #40]	; (814b8 <USART0_Handler+0x58>)
   81490:	701a      	strb	r2, [r3, #0]
   81492:	e002      	b.n	8149a <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   81494:	3301      	adds	r3, #1
   81496:	4a08      	ldr	r2, [pc, #32]	; (814b8 <USART0_Handler+0x58>)
   81498:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   8149a:	2201      	movs	r2, #1
   8149c:	4b05      	ldr	r3, [pc, #20]	; (814b4 <USART0_Handler+0x54>)
   8149e:	701a      	strb	r2, [r3, #0]
   814a0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   814a4:	b662      	cpsie	i
}
   814a6:	b003      	add	sp, #12
   814a8:	f85d fb04 	ldr.w	pc, [sp], #4
   814ac:	40098000 	.word	0x40098000
   814b0:	00081341 	.word	0x00081341
   814b4:	200701aa 	.word	0x200701aa
   814b8:	20070b60 	.word	0x20070b60
   814bc:	20070ac4 	.word	0x20070ac4

000814c0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   814c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   814c2:	b083      	sub	sp, #12
   814c4:	4604      	mov	r4, r0
   814c6:	460d      	mov	r5, r1
	uint32_t val = 0;
   814c8:	2300      	movs	r3, #0
   814ca:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   814cc:	4b1f      	ldr	r3, [pc, #124]	; (8154c <usart_serial_getchar+0x8c>)
   814ce:	4298      	cmp	r0, r3
   814d0:	d107      	bne.n	814e2 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   814d2:	461f      	mov	r7, r3
   814d4:	4e1e      	ldr	r6, [pc, #120]	; (81550 <usart_serial_getchar+0x90>)
   814d6:	4638      	mov	r0, r7
   814d8:	4629      	mov	r1, r5
   814da:	47b0      	blx	r6
   814dc:	2800      	cmp	r0, #0
   814de:	d1fa      	bne.n	814d6 <usart_serial_getchar+0x16>
   814e0:	e019      	b.n	81516 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   814e2:	4b1c      	ldr	r3, [pc, #112]	; (81554 <usart_serial_getchar+0x94>)
   814e4:	4298      	cmp	r0, r3
   814e6:	d109      	bne.n	814fc <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   814e8:	461f      	mov	r7, r3
   814ea:	4e1b      	ldr	r6, [pc, #108]	; (81558 <usart_serial_getchar+0x98>)
   814ec:	4638      	mov	r0, r7
   814ee:	a901      	add	r1, sp, #4
   814f0:	47b0      	blx	r6
   814f2:	2800      	cmp	r0, #0
   814f4:	d1fa      	bne.n	814ec <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   814f6:	9b01      	ldr	r3, [sp, #4]
   814f8:	702b      	strb	r3, [r5, #0]
   814fa:	e019      	b.n	81530 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   814fc:	4b17      	ldr	r3, [pc, #92]	; (8155c <usart_serial_getchar+0x9c>)
   814fe:	4298      	cmp	r0, r3
   81500:	d109      	bne.n	81516 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   81502:	461e      	mov	r6, r3
   81504:	4c14      	ldr	r4, [pc, #80]	; (81558 <usart_serial_getchar+0x98>)
   81506:	4630      	mov	r0, r6
   81508:	a901      	add	r1, sp, #4
   8150a:	47a0      	blx	r4
   8150c:	2800      	cmp	r0, #0
   8150e:	d1fa      	bne.n	81506 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   81510:	9b01      	ldr	r3, [sp, #4]
   81512:	702b      	strb	r3, [r5, #0]
   81514:	e018      	b.n	81548 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81516:	4b12      	ldr	r3, [pc, #72]	; (81560 <usart_serial_getchar+0xa0>)
   81518:	429c      	cmp	r4, r3
   8151a:	d109      	bne.n	81530 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   8151c:	461e      	mov	r6, r3
   8151e:	4c0e      	ldr	r4, [pc, #56]	; (81558 <usart_serial_getchar+0x98>)
   81520:	4630      	mov	r0, r6
   81522:	a901      	add	r1, sp, #4
   81524:	47a0      	blx	r4
   81526:	2800      	cmp	r0, #0
   81528:	d1fa      	bne.n	81520 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8152a:	9b01      	ldr	r3, [sp, #4]
   8152c:	702b      	strb	r3, [r5, #0]
   8152e:	e00b      	b.n	81548 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81530:	4b0c      	ldr	r3, [pc, #48]	; (81564 <usart_serial_getchar+0xa4>)
   81532:	429c      	cmp	r4, r3
   81534:	d108      	bne.n	81548 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   81536:	461e      	mov	r6, r3
   81538:	4c07      	ldr	r4, [pc, #28]	; (81558 <usart_serial_getchar+0x98>)
   8153a:	4630      	mov	r0, r6
   8153c:	a901      	add	r1, sp, #4
   8153e:	47a0      	blx	r4
   81540:	2800      	cmp	r0, #0
   81542:	d1fa      	bne.n	8153a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   81544:	9b01      	ldr	r3, [sp, #4]
   81546:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   81548:	b003      	add	sp, #12
   8154a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8154c:	400e0800 	.word	0x400e0800
   81550:	0008144d 	.word	0x0008144d
   81554:	40098000 	.word	0x40098000
   81558:	00081329 	.word	0x00081329
   8155c:	4009c000 	.word	0x4009c000
   81560:	400a0000 	.word	0x400a0000
   81564:	400a4000 	.word	0x400a4000

00081568 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   81568:	b570      	push	{r4, r5, r6, lr}
   8156a:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   8156c:	4b21      	ldr	r3, [pc, #132]	; (815f4 <usart_serial_putchar+0x8c>)
   8156e:	4298      	cmp	r0, r3
   81570:	d107      	bne.n	81582 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   81572:	461e      	mov	r6, r3
   81574:	4d20      	ldr	r5, [pc, #128]	; (815f8 <usart_serial_putchar+0x90>)
   81576:	4630      	mov	r0, r6
   81578:	4621      	mov	r1, r4
   8157a:	47a8      	blx	r5
   8157c:	2800      	cmp	r0, #0
   8157e:	d1fa      	bne.n	81576 <usart_serial_putchar+0xe>
   81580:	e02b      	b.n	815da <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81582:	4b1e      	ldr	r3, [pc, #120]	; (815fc <usart_serial_putchar+0x94>)
   81584:	4298      	cmp	r0, r3
   81586:	d107      	bne.n	81598 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   81588:	461e      	mov	r6, r3
   8158a:	4d1d      	ldr	r5, [pc, #116]	; (81600 <usart_serial_putchar+0x98>)
   8158c:	4630      	mov	r0, r6
   8158e:	4621      	mov	r1, r4
   81590:	47a8      	blx	r5
   81592:	2800      	cmp	r0, #0
   81594:	d1fa      	bne.n	8158c <usart_serial_putchar+0x24>
   81596:	e022      	b.n	815de <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81598:	4b1a      	ldr	r3, [pc, #104]	; (81604 <usart_serial_putchar+0x9c>)
   8159a:	4298      	cmp	r0, r3
   8159c:	d107      	bne.n	815ae <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8159e:	461e      	mov	r6, r3
   815a0:	4d17      	ldr	r5, [pc, #92]	; (81600 <usart_serial_putchar+0x98>)
   815a2:	4630      	mov	r0, r6
   815a4:	4621      	mov	r1, r4
   815a6:	47a8      	blx	r5
   815a8:	2800      	cmp	r0, #0
   815aa:	d1fa      	bne.n	815a2 <usart_serial_putchar+0x3a>
   815ac:	e019      	b.n	815e2 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   815ae:	4b16      	ldr	r3, [pc, #88]	; (81608 <usart_serial_putchar+0xa0>)
   815b0:	4298      	cmp	r0, r3
   815b2:	d107      	bne.n	815c4 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   815b4:	461e      	mov	r6, r3
   815b6:	4d12      	ldr	r5, [pc, #72]	; (81600 <usart_serial_putchar+0x98>)
   815b8:	4630      	mov	r0, r6
   815ba:	4621      	mov	r1, r4
   815bc:	47a8      	blx	r5
   815be:	2800      	cmp	r0, #0
   815c0:	d1fa      	bne.n	815b8 <usart_serial_putchar+0x50>
   815c2:	e010      	b.n	815e6 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   815c4:	4b11      	ldr	r3, [pc, #68]	; (8160c <usart_serial_putchar+0xa4>)
   815c6:	4298      	cmp	r0, r3
   815c8:	d10f      	bne.n	815ea <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   815ca:	461e      	mov	r6, r3
   815cc:	4d0c      	ldr	r5, [pc, #48]	; (81600 <usart_serial_putchar+0x98>)
   815ce:	4630      	mov	r0, r6
   815d0:	4621      	mov	r1, r4
   815d2:	47a8      	blx	r5
   815d4:	2800      	cmp	r0, #0
   815d6:	d1fa      	bne.n	815ce <usart_serial_putchar+0x66>
   815d8:	e009      	b.n	815ee <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   815da:	2001      	movs	r0, #1
   815dc:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   815de:	2001      	movs	r0, #1
   815e0:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   815e2:	2001      	movs	r0, #1
   815e4:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   815e6:	2001      	movs	r0, #1
   815e8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   815ea:	2000      	movs	r0, #0
   815ec:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   815ee:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   815f0:	bd70      	pop	{r4, r5, r6, pc}
   815f2:	bf00      	nop
   815f4:	400e0800 	.word	0x400e0800
   815f8:	0008143d 	.word	0x0008143d
   815fc:	40098000 	.word	0x40098000
   81600:	00081315 	.word	0x00081315
   81604:	4009c000 	.word	0x4009c000
   81608:	400a0000 	.word	0x400a0000
   8160c:	400a4000 	.word	0x400a4000

00081610 <configure_console>:
#include <asf.h>
#include "conf_board.h"
#include "Functions/ConsoleFunctions.h"

void configure_console(void)
{
   81610:	b530      	push	{r4, r5, lr}
   81612:	b085      	sub	sp, #20
   81614:	2008      	movs	r0, #8
   81616:	4d19      	ldr	r5, [pc, #100]	; (8167c <configure_console+0x6c>)
   81618:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8161a:	4c19      	ldr	r4, [pc, #100]	; (81680 <configure_console+0x70>)
   8161c:	4b19      	ldr	r3, [pc, #100]	; (81684 <configure_console+0x74>)
   8161e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81620:	4a19      	ldr	r2, [pc, #100]	; (81688 <configure_console+0x78>)
   81622:	4b1a      	ldr	r3, [pc, #104]	; (8168c <configure_console+0x7c>)
   81624:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81626:	4a1a      	ldr	r2, [pc, #104]	; (81690 <configure_console+0x80>)
   81628:	4b1a      	ldr	r3, [pc, #104]	; (81694 <configure_console+0x84>)
   8162a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8162c:	4b1a      	ldr	r3, [pc, #104]	; (81698 <configure_console+0x88>)
   8162e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   81630:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   81634:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   81636:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8163a:	9303      	str	r3, [sp, #12]
   8163c:	2008      	movs	r0, #8
   8163e:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   81640:	4620      	mov	r0, r4
   81642:	a901      	add	r1, sp, #4
   81644:	4b15      	ldr	r3, [pc, #84]	; (8169c <configure_console+0x8c>)
   81646:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81648:	4d15      	ldr	r5, [pc, #84]	; (816a0 <configure_console+0x90>)
   8164a:	682b      	ldr	r3, [r5, #0]
   8164c:	6898      	ldr	r0, [r3, #8]
   8164e:	2100      	movs	r1, #0
   81650:	4c14      	ldr	r4, [pc, #80]	; (816a4 <configure_console+0x94>)
   81652:	47a0      	blx	r4
	setbuf(stdin, NULL);
   81654:	682b      	ldr	r3, [r5, #0]
   81656:	6858      	ldr	r0, [r3, #4]
   81658:	2100      	movs	r1, #0
   8165a:	47a0      	blx	r4
	};
	
	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	printf("Konsolen reado\n");
   8165c:	4812      	ldr	r0, [pc, #72]	; (816a8 <configure_console+0x98>)
   8165e:	4c13      	ldr	r4, [pc, #76]	; (816ac <configure_console+0x9c>)
   81660:	47a0      	blx	r4
	printf("===============\n");
   81662:	4813      	ldr	r0, [pc, #76]	; (816b0 <configure_console+0xa0>)
   81664:	47a0      	blx	r4
	printf("-- %s\n\r", BOARD_NAME);
   81666:	4813      	ldr	r0, [pc, #76]	; (816b4 <configure_console+0xa4>)
   81668:	4913      	ldr	r1, [pc, #76]	; (816b8 <configure_console+0xa8>)
   8166a:	47a0      	blx	r4
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
   8166c:	4813      	ldr	r0, [pc, #76]	; (816bc <configure_console+0xac>)
   8166e:	4914      	ldr	r1, [pc, #80]	; (816c0 <configure_console+0xb0>)
   81670:	4a14      	ldr	r2, [pc, #80]	; (816c4 <configure_console+0xb4>)
   81672:	47a0      	blx	r4
	printf("Whilesatsen");
   81674:	4814      	ldr	r0, [pc, #80]	; (816c8 <configure_console+0xb8>)
   81676:	47a0      	blx	r4
   81678:	b005      	add	sp, #20
   8167a:	bd30      	pop	{r4, r5, pc}
   8167c:	000832a9 	.word	0x000832a9
   81680:	400e0800 	.word	0x400e0800
   81684:	20078e10 	.word	0x20078e10
   81688:	00081569 	.word	0x00081569
   8168c:	20078e0c 	.word	0x20078e0c
   81690:	000814c1 	.word	0x000814c1
   81694:	20078e08 	.word	0x20078e08
   81698:	0501bd00 	.word	0x0501bd00
   8169c:	00081405 	.word	0x00081405
   816a0:	200705e0 	.word	0x200705e0
   816a4:	000848f9 	.word	0x000848f9
   816a8:	0008a670 	.word	0x0008a670
   816ac:	00084751 	.word	0x00084751
   816b0:	0008a680 	.word	0x0008a680
   816b4:	0008a694 	.word	0x0008a694
   816b8:	0008a69c 	.word	0x0008a69c
   816bc:	0008a6ac 	.word	0x0008a6ac
   816c0:	0008a6c4 	.word	0x0008a6c4
   816c4:	0008a6d0 	.word	0x0008a6d0
   816c8:	0008a6dc 	.word	0x0008a6dc

000816cc <delayInit>:

#include "asf.h"
#include "Functions/DelayFunctions.h"

void delayInit(void)		/* Initializes the timer used for delays */
{
   816cc:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);
   816ce:	201b      	movs	r0, #27
   816d0:	4b08      	ldr	r3, [pc, #32]	; (816f4 <delayInit+0x28>)
   816d2:	4798      	blx	r3
	tc_init(TC0,0,0);		 /* TC0, channel 0, TCLK1 och capturemode */
   816d4:	4c08      	ldr	r4, [pc, #32]	; (816f8 <delayInit+0x2c>)
   816d6:	4620      	mov	r0, r4
   816d8:	2100      	movs	r1, #0
   816da:	460a      	mov	r2, r1
   816dc:	4b07      	ldr	r3, [pc, #28]	; (816fc <delayInit+0x30>)
   816de:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   816e0:	4620      	mov	r0, r4
   816e2:	2100      	movs	r1, #0
   816e4:	4b06      	ldr	r3, [pc, #24]	; (81700 <delayInit+0x34>)
   816e6:	4798      	blx	r3
	tc_stop(TC0,0);			/* making sure the timer does not run  */
   816e8:	4620      	mov	r0, r4
   816ea:	2100      	movs	r1, #0
   816ec:	4b05      	ldr	r3, [pc, #20]	; (81704 <delayInit+0x38>)
   816ee:	4798      	blx	r3
   816f0:	bd10      	pop	{r4, pc}
   816f2:	bf00      	nop
   816f4:	000832a9 	.word	0x000832a9
   816f8:	40080000 	.word	0x40080000
   816fc:	000812d9 	.word	0x000812d9
   81700:	000812f5 	.word	0x000812f5
   81704:	00081305 	.word	0x00081305

00081708 <delayMicroseconds>:
}


void delayMicroseconds(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   81708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8170a:	4604      	mov	r4, r0
	tc_start(TC0,0);
   8170c:	4809      	ldr	r0, [pc, #36]	; (81734 <delayMicroseconds+0x2c>)
   8170e:	2100      	movs	r1, #0
   81710:	4b09      	ldr	r3, [pc, #36]	; (81738 <delayMicroseconds+0x30>)
   81712:	4798      	blx	r3
	while (tc_read_cv(TC0,0) < us*42); /* Only works in newere version of ASF */
   81714:	272a      	movs	r7, #42	; 0x2a
   81716:	fb07 f704 	mul.w	r7, r7, r4
   8171a:	4e06      	ldr	r6, [pc, #24]	; (81734 <delayMicroseconds+0x2c>)
   8171c:	2500      	movs	r5, #0
   8171e:	4c07      	ldr	r4, [pc, #28]	; (8173c <delayMicroseconds+0x34>)
   81720:	4630      	mov	r0, r6
   81722:	4629      	mov	r1, r5
   81724:	47a0      	blx	r4
   81726:	42b8      	cmp	r0, r7
   81728:	d3fa      	bcc.n	81720 <delayMicroseconds+0x18>
	tc_stop(TC0,0);
   8172a:	4802      	ldr	r0, [pc, #8]	; (81734 <delayMicroseconds+0x2c>)
   8172c:	2100      	movs	r1, #0
   8172e:	4b04      	ldr	r3, [pc, #16]	; (81740 <delayMicroseconds+0x38>)
   81730:	4798      	blx	r3
   81732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81734:	40080000 	.word	0x40080000
   81738:	000812fd 	.word	0x000812fd
   8173c:	0008130d 	.word	0x0008130d
   81740:	00081305 	.word	0x00081305

00081744 <initMotor>:
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81744:	4b04      	ldr	r3, [pc, #16]	; (81758 <initMotor+0x14>)
   81746:	2210      	movs	r2, #16
   81748:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8174a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8174e:	2220      	movs	r2, #32
   81750:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81752:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   81756:	4770      	bx	lr
   81758:	400e1200 	.word	0x400e1200

0008175c <pulseLeft>:
}




void pulseLeft(int p1){
   8175c:	b538      	push	{r3, r4, r5, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8175e:	4c03      	ldr	r4, [pc, #12]	; (8176c <pulseLeft+0x10>)
   81760:	2510      	movs	r5, #16
   81762:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LEFT,HIGH);
	delayMicroseconds(p1);
   81764:	4b02      	ldr	r3, [pc, #8]	; (81770 <pulseLeft+0x14>)
   81766:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81768:	6365      	str	r5, [r4, #52]	; 0x34
   8176a:	bd38      	pop	{r3, r4, r5, pc}
   8176c:	400e1200 	.word	0x400e1200
   81770:	00081709 	.word	0x00081709

00081774 <pulseRight>:
	ioport_set_pin_level(LEFT,LOW);
}
void pulseRight(int p2){
   81774:	b538      	push	{r3, r4, r5, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81776:	4c03      	ldr	r4, [pc, #12]	; (81784 <pulseRight+0x10>)
   81778:	2520      	movs	r5, #32
   8177a:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(RIGHT,HIGH);
	delayMicroseconds(p2);
   8177c:	4b02      	ldr	r3, [pc, #8]	; (81788 <pulseRight+0x14>)
   8177e:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81780:	6365      	str	r5, [r4, #52]	; 0x34
   81782:	bd38      	pop	{r3, r4, r5, pc}
   81784:	400e1200 	.word	0x400e1200
   81788:	00081709 	.word	0x00081709

0008178c <moveForward>:
	ioport_set_pin_level(RIGHT,LOW);
}

void moveForward(int l,int r){
   8178c:	b510      	push	{r4, lr}
   8178e:	460c      	mov	r4, r1
	pulseLeft(l);
   81790:	4b04      	ldr	r3, [pc, #16]	; (817a4 <moveForward+0x18>)
   81792:	4798      	blx	r3
	pulseRight(r);
   81794:	4620      	mov	r0, r4
   81796:	4b04      	ldr	r3, [pc, #16]	; (817a8 <moveForward+0x1c>)
   81798:	4798      	blx	r3
	delayMicroseconds(5250);
   8179a:	f241 4082 	movw	r0, #5250	; 0x1482
   8179e:	4b03      	ldr	r3, [pc, #12]	; (817ac <moveForward+0x20>)
   817a0:	4798      	blx	r3
   817a2:	bd10      	pop	{r4, pc}
   817a4:	0008175d 	.word	0x0008175d
   817a8:	00081775 	.word	0x00081775
   817ac:	00081709 	.word	0x00081709

000817b0 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   817b0:	f100 0308 	add.w	r3, r0, #8
   817b4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   817b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   817ba:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   817bc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   817be:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   817c0:	2300      	movs	r3, #0
   817c2:	6003      	str	r3, [r0, #0]
   817c4:	4770      	bx	lr
   817c6:	bf00      	nop

000817c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   817c8:	2300      	movs	r3, #0
   817ca:	6103      	str	r3, [r0, #16]
   817cc:	4770      	bx	lr
   817ce:	bf00      	nop

000817d0 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   817d0:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   817d2:	685a      	ldr	r2, [r3, #4]
   817d4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   817d6:	6842      	ldr	r2, [r0, #4]
   817d8:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   817da:	685a      	ldr	r2, [r3, #4]
   817dc:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   817de:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   817e0:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   817e2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   817e4:	6803      	ldr	r3, [r0, #0]
   817e6:	3301      	adds	r3, #1
   817e8:	6003      	str	r3, [r0, #0]
   817ea:	4770      	bx	lr

000817ec <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   817ec:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   817ee:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   817f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   817f4:	429c      	cmp	r4, r3
   817f6:	d101      	bne.n	817fc <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   817f8:	6903      	ldr	r3, [r0, #16]
   817fa:	e00c      	b.n	81816 <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   817fc:	f100 0308 	add.w	r3, r0, #8
   81800:	68c2      	ldr	r2, [r0, #12]
   81802:	8812      	ldrh	r2, [r2, #0]
   81804:	b292      	uxth	r2, r2
   81806:	4294      	cmp	r4, r2
   81808:	d305      	bcc.n	81816 <vListInsert+0x2a>
   8180a:	685b      	ldr	r3, [r3, #4]
   8180c:	685a      	ldr	r2, [r3, #4]
   8180e:	8812      	ldrh	r2, [r2, #0]
   81810:	b292      	uxth	r2, r2
   81812:	4294      	cmp	r4, r2
   81814:	d2f9      	bcs.n	8180a <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   81816:	685a      	ldr	r2, [r3, #4]
   81818:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8181a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   8181c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   8181e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81820:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81822:	6803      	ldr	r3, [r0, #0]
   81824:	3301      	adds	r3, #1
   81826:	6003      	str	r3, [r0, #0]
}
   81828:	f85d 4b04 	ldr.w	r4, [sp], #4
   8182c:	4770      	bx	lr
   8182e:	bf00      	nop

00081830 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   81830:	6843      	ldr	r3, [r0, #4]
   81832:	6882      	ldr	r2, [r0, #8]
   81834:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   81836:	6883      	ldr	r3, [r0, #8]
   81838:	6842      	ldr	r2, [r0, #4]
   8183a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   8183c:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8183e:	685a      	ldr	r2, [r3, #4]
   81840:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   81842:	bf04      	itt	eq
   81844:	6882      	ldreq	r2, [r0, #8]
   81846:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   81848:	2200      	movs	r2, #0
   8184a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   8184c:	681a      	ldr	r2, [r3, #0]
   8184e:	3a01      	subs	r2, #1
   81850:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   81852:	6818      	ldr	r0, [r3, #0]
}
   81854:	4770      	bx	lr
   81856:	bf00      	nop

00081858 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   81858:	4803      	ldr	r0, [pc, #12]	; (81868 <prvPortStartFirstTask+0x10>)
   8185a:	6800      	ldr	r0, [r0, #0]
   8185c:	6800      	ldr	r0, [r0, #0]
   8185e:	f380 8808 	msr	MSP, r0
   81862:	b662      	cpsie	i
   81864:	df00      	svc	0
   81866:	bf00      	nop
   81868:	e000ed08 	.word	0xe000ed08

0008186c <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   8186c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   81870:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   81874:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   81878:	2300      	movs	r3, #0
   8187a:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   8187e:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   81882:	3840      	subs	r0, #64	; 0x40
   81884:	4770      	bx	lr
   81886:	bf00      	nop

00081888 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   81888:	4b06      	ldr	r3, [pc, #24]	; (818a4 <pxCurrentTCBConst2>)
   8188a:	6819      	ldr	r1, [r3, #0]
   8188c:	6808      	ldr	r0, [r1, #0]
   8188e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81892:	f380 8809 	msr	PSP, r0
   81896:	f04f 0000 	mov.w	r0, #0
   8189a:	f380 8811 	msr	BASEPRI, r0
   8189e:	f04e 0e0d 	orr.w	lr, lr, #13
   818a2:	4770      	bx	lr

000818a4 <pxCurrentTCBConst2>:
   818a4:	20078c90 	.word	0x20078c90

000818a8 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   818a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   818ac:	4b01      	ldr	r3, [pc, #4]	; (818b4 <vPortYieldFromISR+0xc>)
   818ae:	601a      	str	r2, [r3, #0]
   818b0:	4770      	bx	lr
   818b2:	bf00      	nop
   818b4:	e000ed04 	.word	0xe000ed04

000818b8 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   818b8:	f3ef 8011 	mrs	r0, BASEPRI
   818bc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   818c0:	f381 8811 	msr	BASEPRI, r1
   818c4:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   818c6:	2000      	movs	r0, #0

000818c8 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   818c8:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   818ca:	4b03      	ldr	r3, [pc, #12]	; (818d8 <vPortEnterCritical+0x10>)
   818cc:	4798      	blx	r3
	uxCriticalNesting++;
   818ce:	4b03      	ldr	r3, [pc, #12]	; (818dc <vPortEnterCritical+0x14>)
   818d0:	681a      	ldr	r2, [r3, #0]
   818d2:	3201      	adds	r2, #1
   818d4:	601a      	str	r2, [r3, #0]
   818d6:	bd08      	pop	{r3, pc}
   818d8:	000818b9 	.word	0x000818b9
   818dc:	200701a0 	.word	0x200701a0

000818e0 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   818e0:	f380 8811 	msr	BASEPRI, r0
   818e4:	4770      	bx	lr
   818e6:	bf00      	nop

000818e8 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   818e8:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   818ea:	4a04      	ldr	r2, [pc, #16]	; (818fc <vPortExitCritical+0x14>)
   818ec:	6813      	ldr	r3, [r2, #0]
   818ee:	3b01      	subs	r3, #1
   818f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   818f2:	b913      	cbnz	r3, 818fa <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   818f4:	2000      	movs	r0, #0
   818f6:	4b02      	ldr	r3, [pc, #8]	; (81900 <vPortExitCritical+0x18>)
   818f8:	4798      	blx	r3
   818fa:	bd08      	pop	{r3, pc}
   818fc:	200701a0 	.word	0x200701a0
   81900:	000818e1 	.word	0x000818e1

00081904 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   81904:	f3ef 8009 	mrs	r0, PSP
   81908:	4b0c      	ldr	r3, [pc, #48]	; (8193c <pxCurrentTCBConst>)
   8190a:	681a      	ldr	r2, [r3, #0]
   8190c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81910:	6010      	str	r0, [r2, #0]
   81912:	e92d 4008 	stmdb	sp!, {r3, lr}
   81916:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8191a:	f380 8811 	msr	BASEPRI, r0
   8191e:	f000 feeb 	bl	826f8 <vTaskSwitchContext>
   81922:	f04f 0000 	mov.w	r0, #0
   81926:	f380 8811 	msr	BASEPRI, r0
   8192a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8192e:	6819      	ldr	r1, [r3, #0]
   81930:	6808      	ldr	r0, [r1, #0]
   81932:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81936:	f380 8809 	msr	PSP, r0
   8193a:	4770      	bx	lr

0008193c <pxCurrentTCBConst>:
   8193c:	20078c90 	.word	0x20078c90

00081940 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   81940:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81946:	4b05      	ldr	r3, [pc, #20]	; (8195c <SysTick_Handler+0x1c>)
   81948:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   8194a:	4b05      	ldr	r3, [pc, #20]	; (81960 <SysTick_Handler+0x20>)
   8194c:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8194e:	4b05      	ldr	r3, [pc, #20]	; (81964 <SysTick_Handler+0x24>)
   81950:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   81952:	2000      	movs	r0, #0
   81954:	4b04      	ldr	r3, [pc, #16]	; (81968 <SysTick_Handler+0x28>)
   81956:	4798      	blx	r3
   81958:	bd08      	pop	{r3, pc}
   8195a:	bf00      	nop
   8195c:	e000ed04 	.word	0xe000ed04
   81960:	000818b9 	.word	0x000818b9
   81964:	0008235d 	.word	0x0008235d
   81968:	000818e1 	.word	0x000818e1

0008196c <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   8196c:	4a03      	ldr	r2, [pc, #12]	; (8197c <vPortSetupTimerInterrupt+0x10>)
   8196e:	4b04      	ldr	r3, [pc, #16]	; (81980 <vPortSetupTimerInterrupt+0x14>)
   81970:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   81972:	2207      	movs	r2, #7
   81974:	3b04      	subs	r3, #4
   81976:	601a      	str	r2, [r3, #0]
   81978:	4770      	bx	lr
   8197a:	bf00      	nop
   8197c:	0001481f 	.word	0x0001481f
   81980:	e000e014 	.word	0xe000e014

00081984 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   81984:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   81986:	4b09      	ldr	r3, [pc, #36]	; (819ac <xPortStartScheduler+0x28>)
   81988:	681a      	ldr	r2, [r3, #0]
   8198a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   8198e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   81990:	681a      	ldr	r2, [r3, #0]
   81992:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   81996:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   81998:	4b05      	ldr	r3, [pc, #20]	; (819b0 <xPortStartScheduler+0x2c>)
   8199a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   8199c:	2400      	movs	r4, #0
   8199e:	4b05      	ldr	r3, [pc, #20]	; (819b4 <xPortStartScheduler+0x30>)
   819a0:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   819a2:	4b05      	ldr	r3, [pc, #20]	; (819b8 <xPortStartScheduler+0x34>)
   819a4:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   819a6:	4620      	mov	r0, r4
   819a8:	bd10      	pop	{r4, pc}
   819aa:	bf00      	nop
   819ac:	e000ed20 	.word	0xe000ed20
   819b0:	0008196d 	.word	0x0008196d
   819b4:	200701a0 	.word	0x200701a0
   819b8:	00081859 	.word	0x00081859

000819bc <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   819bc:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   819be:	4a13      	ldr	r2, [pc, #76]	; (81a0c <prvInsertBlockIntoFreeList+0x50>)
   819c0:	6813      	ldr	r3, [r2, #0]
   819c2:	4283      	cmp	r3, r0
   819c4:	d201      	bcs.n	819ca <prvInsertBlockIntoFreeList+0xe>
   819c6:	461a      	mov	r2, r3
   819c8:	e7fa      	b.n	819c0 <prvInsertBlockIntoFreeList+0x4>
   819ca:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   819cc:	6854      	ldr	r4, [r2, #4]
   819ce:	1915      	adds	r5, r2, r4
   819d0:	4285      	cmp	r5, r0
   819d2:	d103      	bne.n	819dc <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   819d4:	6868      	ldr	r0, [r5, #4]
   819d6:	4404      	add	r4, r0
   819d8:	6054      	str	r4, [r2, #4]
   819da:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   819dc:	6842      	ldr	r2, [r0, #4]
   819de:	1884      	adds	r4, r0, r2
   819e0:	42a3      	cmp	r3, r4
   819e2:	d10c      	bne.n	819fe <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   819e4:	4c0a      	ldr	r4, [pc, #40]	; (81a10 <prvInsertBlockIntoFreeList+0x54>)
   819e6:	6824      	ldr	r4, [r4, #0]
   819e8:	429c      	cmp	r4, r3
   819ea:	d006      	beq.n	819fa <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   819ec:	685b      	ldr	r3, [r3, #4]
   819ee:	441a      	add	r2, r3
   819f0:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   819f2:	680b      	ldr	r3, [r1, #0]
   819f4:	681b      	ldr	r3, [r3, #0]
   819f6:	6003      	str	r3, [r0, #0]
   819f8:	e002      	b.n	81a00 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   819fa:	6003      	str	r3, [r0, #0]
   819fc:	e000      	b.n	81a00 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   819fe:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   81a00:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   81a02:	bf18      	it	ne
   81a04:	6008      	strne	r0, [r1, #0]
	}
}
   81a06:	bc30      	pop	{r4, r5}
   81a08:	4770      	bx	lr
   81a0a:	bf00      	nop
   81a0c:	20078b6c 	.word	0x20078b6c
   81a10:	20078b68 	.word	0x20078b68

00081a14 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   81a14:	b538      	push	{r3, r4, r5, lr}
   81a16:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   81a18:	4b28      	ldr	r3, [pc, #160]	; (81abc <pvPortMalloc+0xa8>)
   81a1a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   81a1c:	4b28      	ldr	r3, [pc, #160]	; (81ac0 <pvPortMalloc+0xac>)
   81a1e:	681b      	ldr	r3, [r3, #0]
   81a20:	b99b      	cbnz	r3, 81a4a <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   81a22:	4a28      	ldr	r2, [pc, #160]	; (81ac4 <pvPortMalloc+0xb0>)
   81a24:	4b28      	ldr	r3, [pc, #160]	; (81ac8 <pvPortMalloc+0xb4>)
   81a26:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   81a28:	2100      	movs	r1, #0
   81a2a:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   81a2c:	f647 72f0 	movw	r2, #32752	; 0x7ff0
   81a30:	1898      	adds	r0, r3, r2
   81a32:	4d23      	ldr	r5, [pc, #140]	; (81ac0 <pvPortMalloc+0xac>)
   81a34:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   81a36:	f647 75f4 	movw	r5, #32756	; 0x7ff4
   81a3a:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   81a3c:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   81a3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   81a40:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   81a42:	4b22      	ldr	r3, [pc, #136]	; (81acc <pvPortMalloc+0xb8>)
   81a44:	681a      	ldr	r2, [r3, #0]
   81a46:	3a10      	subs	r2, #16
   81a48:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   81a4a:	2c00      	cmp	r4, #0
   81a4c:	d02d      	beq.n	81aaa <pvPortMalloc+0x96>
		{
			xWantedSize += heapSTRUCT_SIZE;
   81a4e:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   81a52:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   81a56:	bf1c      	itt	ne
   81a58:	f022 0207 	bicne.w	r2, r2, #7
   81a5c:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   81a5e:	1e51      	subs	r1, r2, #1
   81a60:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   81a64:	4299      	cmp	r1, r3
   81a66:	d822      	bhi.n	81aae <pvPortMalloc+0x9a>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   81a68:	4916      	ldr	r1, [pc, #88]	; (81ac4 <pvPortMalloc+0xb0>)
   81a6a:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81a6c:	6863      	ldr	r3, [r4, #4]
   81a6e:	429a      	cmp	r2, r3
   81a70:	d904      	bls.n	81a7c <pvPortMalloc+0x68>
   81a72:	6823      	ldr	r3, [r4, #0]
   81a74:	b113      	cbz	r3, 81a7c <pvPortMalloc+0x68>
   81a76:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   81a78:	461c      	mov	r4, r3
   81a7a:	e7f7      	b.n	81a6c <pvPortMalloc+0x58>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   81a7c:	4b10      	ldr	r3, [pc, #64]	; (81ac0 <pvPortMalloc+0xac>)
   81a7e:	681b      	ldr	r3, [r3, #0]
   81a80:	429c      	cmp	r4, r3
   81a82:	d016      	beq.n	81ab2 <pvPortMalloc+0x9e>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   81a84:	680d      	ldr	r5, [r1, #0]
   81a86:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   81a88:	6823      	ldr	r3, [r4, #0]
   81a8a:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   81a8c:	6863      	ldr	r3, [r4, #4]
   81a8e:	1a9b      	subs	r3, r3, r2
   81a90:	2b20      	cmp	r3, #32
   81a92:	d904      	bls.n	81a9e <pvPortMalloc+0x8a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   81a94:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   81a96:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   81a98:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   81a9a:	4b0d      	ldr	r3, [pc, #52]	; (81ad0 <pvPortMalloc+0xbc>)
   81a9c:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   81a9e:	4b0b      	ldr	r3, [pc, #44]	; (81acc <pvPortMalloc+0xb8>)
   81aa0:	681a      	ldr	r2, [r3, #0]
   81aa2:	6861      	ldr	r1, [r4, #4]
   81aa4:	1a52      	subs	r2, r2, r1
   81aa6:	601a      	str	r2, [r3, #0]
   81aa8:	e004      	b.n	81ab4 <pvPortMalloc+0xa0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   81aaa:	2500      	movs	r5, #0
   81aac:	e002      	b.n	81ab4 <pvPortMalloc+0xa0>
   81aae:	2500      	movs	r5, #0
   81ab0:	e000      	b.n	81ab4 <pvPortMalloc+0xa0>
   81ab2:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   81ab4:	4b07      	ldr	r3, [pc, #28]	; (81ad4 <pvPortMalloc+0xc0>)
   81ab6:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   81ab8:	4628      	mov	r0, r5
   81aba:	bd38      	pop	{r3, r4, r5, pc}
   81abc:	0008232d 	.word	0x0008232d
   81ac0:	20078b68 	.word	0x20078b68
   81ac4:	20078b6c 	.word	0x20078b6c
   81ac8:	20070b68 	.word	0x20070b68
   81acc:	200701a4 	.word	0x200701a4
   81ad0:	000819bd 	.word	0x000819bd
   81ad4:	00082489 	.word	0x00082489

00081ad8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   81ad8:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   81ada:	4604      	mov	r4, r0
   81adc:	b168      	cbz	r0, 81afa <vPortFree+0x22>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   81ade:	4b07      	ldr	r3, [pc, #28]	; (81afc <vPortFree+0x24>)
   81ae0:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   81ae2:	4b07      	ldr	r3, [pc, #28]	; (81b00 <vPortFree+0x28>)
   81ae4:	6819      	ldr	r1, [r3, #0]
   81ae6:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   81aea:	440a      	add	r2, r1
   81aec:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   81aee:	f1a4 0010 	sub.w	r0, r4, #16
   81af2:	4b04      	ldr	r3, [pc, #16]	; (81b04 <vPortFree+0x2c>)
   81af4:	4798      	blx	r3
		}
		xTaskResumeAll();
   81af6:	4b04      	ldr	r3, [pc, #16]	; (81b08 <vPortFree+0x30>)
   81af8:	4798      	blx	r3
   81afa:	bd10      	pop	{r4, pc}
   81afc:	0008232d 	.word	0x0008232d
   81b00:	200701a4 	.word	0x200701a4
   81b04:	000819bd 	.word	0x000819bd
   81b08:	00082489 	.word	0x00082489

00081b0c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   81b0c:	b510      	push	{r4, lr}
   81b0e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   81b10:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81b12:	b93b      	cbnz	r3, 81b24 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81b14:	6803      	ldr	r3, [r0, #0]
   81b16:	bb1b      	cbnz	r3, 81b60 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   81b18:	6840      	ldr	r0, [r0, #4]
   81b1a:	4b13      	ldr	r3, [pc, #76]	; (81b68 <prvCopyDataToQueue+0x5c>)
   81b1c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   81b1e:	2300      	movs	r3, #0
   81b20:	6063      	str	r3, [r4, #4]
   81b22:	e01d      	b.n	81b60 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   81b24:	b96a      	cbnz	r2, 81b42 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81b26:	6880      	ldr	r0, [r0, #8]
   81b28:	461a      	mov	r2, r3
   81b2a:	4b10      	ldr	r3, [pc, #64]	; (81b6c <prvCopyDataToQueue+0x60>)
   81b2c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   81b2e:	68a2      	ldr	r2, [r4, #8]
   81b30:	6c23      	ldr	r3, [r4, #64]	; 0x40
   81b32:	4413      	add	r3, r2
   81b34:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   81b36:	6862      	ldr	r2, [r4, #4]
   81b38:	4293      	cmp	r3, r2
   81b3a:	d311      	bcc.n	81b60 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   81b3c:	6823      	ldr	r3, [r4, #0]
   81b3e:	60a3      	str	r3, [r4, #8]
   81b40:	e00e      	b.n	81b60 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81b42:	68c0      	ldr	r0, [r0, #12]
   81b44:	461a      	mov	r2, r3
   81b46:	4b09      	ldr	r3, [pc, #36]	; (81b6c <prvCopyDataToQueue+0x60>)
   81b48:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   81b4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   81b4c:	4252      	negs	r2, r2
   81b4e:	68e3      	ldr	r3, [r4, #12]
   81b50:	4413      	add	r3, r2
   81b52:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   81b54:	6821      	ldr	r1, [r4, #0]
   81b56:	428b      	cmp	r3, r1
   81b58:	d202      	bcs.n	81b60 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   81b5a:	6863      	ldr	r3, [r4, #4]
   81b5c:	441a      	add	r2, r3
   81b5e:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   81b60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81b62:	3301      	adds	r3, #1
   81b64:	63a3      	str	r3, [r4, #56]	; 0x38
   81b66:	bd10      	pop	{r4, pc}
   81b68:	00082a21 	.word	0x00082a21
   81b6c:	00084779 	.word	0x00084779

00081b70 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   81b70:	b538      	push	{r3, r4, r5, lr}
   81b72:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   81b74:	6805      	ldr	r5, [r0, #0]
   81b76:	b15d      	cbz	r5, 81b90 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   81b78:	6c02      	ldr	r2, [r0, #64]	; 0x40
   81b7a:	68c4      	ldr	r4, [r0, #12]
   81b7c:	4414      	add	r4, r2
   81b7e:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   81b80:	6840      	ldr	r0, [r0, #4]
   81b82:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   81b84:	bf28      	it	cs
   81b86:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   81b88:	4608      	mov	r0, r1
   81b8a:	68d9      	ldr	r1, [r3, #12]
   81b8c:	4b01      	ldr	r3, [pc, #4]	; (81b94 <prvCopyDataFromQueue+0x24>)
   81b8e:	4798      	blx	r3
   81b90:	bd38      	pop	{r3, r4, r5, pc}
   81b92:	bf00      	nop
   81b94:	00084779 	.word	0x00084779

00081b98 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   81b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81b9a:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   81b9c:	4b1d      	ldr	r3, [pc, #116]	; (81c14 <prvUnlockQueue+0x7c>)
   81b9e:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81ba0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81ba2:	2b00      	cmp	r3, #0
   81ba4:	dd12      	ble.n	81bcc <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81ba8:	b183      	cbz	r3, 81bcc <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81baa:	f104 0624 	add.w	r6, r4, #36	; 0x24
   81bae:	4d1a      	ldr	r5, [pc, #104]	; (81c18 <prvUnlockQueue+0x80>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81bb0:	4f1a      	ldr	r7, [pc, #104]	; (81c1c <prvUnlockQueue+0x84>)
   81bb2:	e001      	b.n	81bb8 <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81bb6:	b14b      	cbz	r3, 81bcc <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81bb8:	4630      	mov	r0, r6
   81bba:	47a8      	blx	r5
   81bbc:	b100      	cbz	r0, 81bc0 <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81bbe:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   81bc0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81bc2:	3b01      	subs	r3, #1
   81bc4:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81bc6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81bc8:	2b00      	cmp	r3, #0
   81bca:	dcf3      	bgt.n	81bb4 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   81bcc:	f04f 33ff 	mov.w	r3, #4294967295
   81bd0:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   81bd2:	4b13      	ldr	r3, [pc, #76]	; (81c20 <prvUnlockQueue+0x88>)
   81bd4:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   81bd6:	4b0f      	ldr	r3, [pc, #60]	; (81c14 <prvUnlockQueue+0x7c>)
   81bd8:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81bda:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81bdc:	2b00      	cmp	r3, #0
   81bde:	dd12      	ble.n	81c06 <prvUnlockQueue+0x6e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81be0:	6923      	ldr	r3, [r4, #16]
   81be2:	b183      	cbz	r3, 81c06 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81be4:	f104 0610 	add.w	r6, r4, #16
   81be8:	4d0b      	ldr	r5, [pc, #44]	; (81c18 <prvUnlockQueue+0x80>)
				{
					vTaskMissedYield();
   81bea:	4f0c      	ldr	r7, [pc, #48]	; (81c1c <prvUnlockQueue+0x84>)
   81bec:	e001      	b.n	81bf2 <prvUnlockQueue+0x5a>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81bee:	6923      	ldr	r3, [r4, #16]
   81bf0:	b14b      	cbz	r3, 81c06 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81bf2:	4630      	mov	r0, r6
   81bf4:	47a8      	blx	r5
   81bf6:	b100      	cbz	r0, 81bfa <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
   81bf8:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   81bfa:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81bfc:	3b01      	subs	r3, #1
   81bfe:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81c00:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81c02:	2b00      	cmp	r3, #0
   81c04:	dcf3      	bgt.n	81bee <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   81c06:	f04f 33ff 	mov.w	r3, #4294967295
   81c0a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   81c0c:	4b04      	ldr	r3, [pc, #16]	; (81c20 <prvUnlockQueue+0x88>)
   81c0e:	4798      	blx	r3
   81c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81c12:	bf00      	nop
   81c14:	000818c9 	.word	0x000818c9
   81c18:	00082835 	.word	0x00082835
   81c1c:	0008296d 	.word	0x0008296d
   81c20:	000818e9 	.word	0x000818e9

00081c24 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   81c24:	b538      	push	{r3, r4, r5, lr}
   81c26:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   81c28:	4604      	mov	r4, r0
   81c2a:	b918      	cbnz	r0, 81c34 <xQueueGenericReset+0x10>
   81c2c:	4b16      	ldr	r3, [pc, #88]	; (81c88 <xQueueGenericReset+0x64>)
   81c2e:	4798      	blx	r3
   81c30:	bf00      	nop
   81c32:	e7fd      	b.n	81c30 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
   81c34:	4b15      	ldr	r3, [pc, #84]	; (81c8c <xQueueGenericReset+0x68>)
   81c36:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   81c38:	6823      	ldr	r3, [r4, #0]
   81c3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   81c3c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   81c3e:	fb00 f002 	mul.w	r0, r0, r2
   81c42:	1819      	adds	r1, r3, r0
   81c44:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   81c46:	2100      	movs	r1, #0
   81c48:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   81c4a:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   81c4c:	1a82      	subs	r2, r0, r2
   81c4e:	4413      	add	r3, r2
   81c50:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   81c52:	f04f 33ff 	mov.w	r3, #4294967295
   81c56:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   81c58:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   81c5a:	b955      	cbnz	r5, 81c72 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81c5c:	6923      	ldr	r3, [r4, #16]
   81c5e:	b17b      	cbz	r3, 81c80 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81c60:	f104 0010 	add.w	r0, r4, #16
   81c64:	4b0a      	ldr	r3, [pc, #40]	; (81c90 <xQueueGenericReset+0x6c>)
   81c66:	4798      	blx	r3
   81c68:	2801      	cmp	r0, #1
   81c6a:	d109      	bne.n	81c80 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   81c6c:	4b09      	ldr	r3, [pc, #36]	; (81c94 <xQueueGenericReset+0x70>)
   81c6e:	4798      	blx	r3
   81c70:	e006      	b.n	81c80 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   81c72:	f104 0010 	add.w	r0, r4, #16
   81c76:	4d08      	ldr	r5, [pc, #32]	; (81c98 <xQueueGenericReset+0x74>)
   81c78:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   81c7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81c7e:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   81c80:	4b06      	ldr	r3, [pc, #24]	; (81c9c <xQueueGenericReset+0x78>)
   81c82:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   81c84:	2001      	movs	r0, #1
   81c86:	bd38      	pop	{r3, r4, r5, pc}
   81c88:	000818b9 	.word	0x000818b9
   81c8c:	000818c9 	.word	0x000818c9
   81c90:	00082835 	.word	0x00082835
   81c94:	000818a9 	.word	0x000818a9
   81c98:	000817b1 	.word	0x000817b1
   81c9c:	000818e9 	.word	0x000818e9

00081ca0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   81ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81ca2:	460d      	mov	r5, r1
   81ca4:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   81ca6:	4606      	mov	r6, r0
   81ca8:	b188      	cbz	r0, 81cce <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   81caa:	2050      	movs	r0, #80	; 0x50
   81cac:	4b0e      	ldr	r3, [pc, #56]	; (81ce8 <xQueueGenericCreate+0x48>)
   81cae:	4798      	blx	r3
		if( pxNewQueue != NULL )
   81cb0:	4604      	mov	r4, r0
   81cb2:	b160      	cbz	r0, 81cce <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   81cb4:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   81cb8:	3001      	adds	r0, #1
   81cba:	4b0b      	ldr	r3, [pc, #44]	; (81ce8 <xQueueGenericCreate+0x48>)
   81cbc:	4798      	blx	r3
   81cbe:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   81cc0:	b940      	cbnz	r0, 81cd4 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   81cc2:	4620      	mov	r0, r4
   81cc4:	4b09      	ldr	r3, [pc, #36]	; (81cec <xQueueGenericCreate+0x4c>)
   81cc6:	4798      	blx	r3
   81cc8:	e001      	b.n	81cce <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   81cca:	bf00      	nop
   81ccc:	e7fd      	b.n	81cca <xQueueGenericCreate+0x2a>
   81cce:	4b08      	ldr	r3, [pc, #32]	; (81cf0 <xQueueGenericCreate+0x50>)
   81cd0:	4798      	blx	r3
   81cd2:	e7fa      	b.n	81cca <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   81cd4:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   81cd6:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   81cd8:	4620      	mov	r0, r4
   81cda:	2101      	movs	r1, #1
   81cdc:	4b05      	ldr	r3, [pc, #20]	; (81cf4 <xQueueGenericCreate+0x54>)
   81cde:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   81ce0:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   81ce4:	4620      	mov	r0, r4
   81ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81ce8:	00081a15 	.word	0x00081a15
   81cec:	00081ad9 	.word	0x00081ad9
   81cf0:	000818b9 	.word	0x000818b9
   81cf4:	00081c25 	.word	0x00081c25

00081cf8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81cfc:	b085      	sub	sp, #20
   81cfe:	468a      	mov	sl, r1
   81d00:	469b      	mov	fp, r3
   81d02:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   81d06:	4604      	mov	r4, r0
   81d08:	b918      	cbnz	r0, 81d12 <xQueueGenericSend+0x1a>
   81d0a:	4b38      	ldr	r3, [pc, #224]	; (81dec <xQueueGenericSend+0xf4>)
   81d0c:	4798      	blx	r3
   81d0e:	bf00      	nop
   81d10:	e7fd      	b.n	81d0e <xQueueGenericSend+0x16>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81d12:	b909      	cbnz	r1, 81d18 <xQueueGenericSend+0x20>
   81d14:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81d16:	b91b      	cbnz	r3, 81d20 <xQueueGenericSend+0x28>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81d18:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81d1a:	4e35      	ldr	r6, [pc, #212]	; (81df0 <xQueueGenericSend+0xf8>)
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81d1c:	4d35      	ldr	r5, [pc, #212]	; (81df4 <xQueueGenericSend+0xfc>)
   81d1e:	e003      	b.n	81d28 <xQueueGenericSend+0x30>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81d20:	4b32      	ldr	r3, [pc, #200]	; (81dec <xQueueGenericSend+0xf4>)
   81d22:	4798      	blx	r3
   81d24:	bf00      	nop
   81d26:	e7fd      	b.n	81d24 <xQueueGenericSend+0x2c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81d28:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81d2a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81d2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81d2e:	429a      	cmp	r2, r3
   81d30:	d212      	bcs.n	81d58 <xQueueGenericSend+0x60>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81d32:	4620      	mov	r0, r4
   81d34:	4651      	mov	r1, sl
   81d36:	465a      	mov	r2, fp
   81d38:	4b2f      	ldr	r3, [pc, #188]	; (81df8 <xQueueGenericSend+0x100>)
   81d3a:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81d3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81d3e:	b13b      	cbz	r3, 81d50 <xQueueGenericSend+0x58>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   81d40:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81d44:	4b2d      	ldr	r3, [pc, #180]	; (81dfc <xQueueGenericSend+0x104>)
   81d46:	4798      	blx	r3
   81d48:	2801      	cmp	r0, #1
   81d4a:	d101      	bne.n	81d50 <xQueueGenericSend+0x58>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   81d4c:	4b2c      	ldr	r3, [pc, #176]	; (81e00 <xQueueGenericSend+0x108>)
   81d4e:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   81d50:	4b28      	ldr	r3, [pc, #160]	; (81df4 <xQueueGenericSend+0xfc>)
   81d52:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   81d54:	2001      	movs	r0, #1
   81d56:	e046      	b.n	81de6 <xQueueGenericSend+0xee>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81d58:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   81d5c:	b91b      	cbnz	r3, 81d66 <xQueueGenericSend+0x6e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81d5e:	4b25      	ldr	r3, [pc, #148]	; (81df4 <xQueueGenericSend+0xfc>)
   81d60:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   81d62:	2000      	movs	r0, #0
   81d64:	e03f      	b.n	81de6 <xQueueGenericSend+0xee>
				}
				else if( xEntryTimeSet == pdFALSE )
   81d66:	b91f      	cbnz	r7, 81d70 <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81d68:	a802      	add	r0, sp, #8
   81d6a:	4b26      	ldr	r3, [pc, #152]	; (81e04 <xQueueGenericSend+0x10c>)
   81d6c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   81d6e:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81d70:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81d72:	4b25      	ldr	r3, [pc, #148]	; (81e08 <xQueueGenericSend+0x110>)
   81d74:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81d76:	47b0      	blx	r6
   81d78:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
   81d7e:	bf04      	itt	eq
   81d80:	2300      	moveq	r3, #0
   81d82:	6463      	streq	r3, [r4, #68]	; 0x44
   81d84:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81d86:	f1b3 3fff 	cmp.w	r3, #4294967295
   81d8a:	bf04      	itt	eq
   81d8c:	2300      	moveq	r3, #0
   81d8e:	64a3      	streq	r3, [r4, #72]	; 0x48
   81d90:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81d92:	a802      	add	r0, sp, #8
   81d94:	f10d 0106 	add.w	r1, sp, #6
   81d98:	4b1c      	ldr	r3, [pc, #112]	; (81e0c <xQueueGenericSend+0x114>)
   81d9a:	4798      	blx	r3
   81d9c:	b9e8      	cbnz	r0, 81dda <xQueueGenericSend+0xe2>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81d9e:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   81da0:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   81da4:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   81da8:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   81daa:	45c1      	cmp	r9, r8
   81dac:	d10f      	bne.n	81dce <xQueueGenericSend+0xd6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   81dae:	f104 0010 	add.w	r0, r4, #16
   81db2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   81db6:	4b16      	ldr	r3, [pc, #88]	; (81e10 <xQueueGenericSend+0x118>)
   81db8:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   81dba:	4620      	mov	r0, r4
   81dbc:	4b15      	ldr	r3, [pc, #84]	; (81e14 <xQueueGenericSend+0x11c>)
   81dbe:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   81dc0:	4b15      	ldr	r3, [pc, #84]	; (81e18 <xQueueGenericSend+0x120>)
   81dc2:	4798      	blx	r3
   81dc4:	2800      	cmp	r0, #0
   81dc6:	d1af      	bne.n	81d28 <xQueueGenericSend+0x30>
				{
					portYIELD_WITHIN_API();
   81dc8:	4b0d      	ldr	r3, [pc, #52]	; (81e00 <xQueueGenericSend+0x108>)
   81dca:	4798      	blx	r3
   81dcc:	e7ac      	b.n	81d28 <xQueueGenericSend+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81dce:	4620      	mov	r0, r4
   81dd0:	4b10      	ldr	r3, [pc, #64]	; (81e14 <xQueueGenericSend+0x11c>)
   81dd2:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81dd4:	4b10      	ldr	r3, [pc, #64]	; (81e18 <xQueueGenericSend+0x120>)
   81dd6:	4798      	blx	r3
   81dd8:	e7a6      	b.n	81d28 <xQueueGenericSend+0x30>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   81dda:	4620      	mov	r0, r4
   81ddc:	4b0d      	ldr	r3, [pc, #52]	; (81e14 <xQueueGenericSend+0x11c>)
   81dde:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81de0:	4b0d      	ldr	r3, [pc, #52]	; (81e18 <xQueueGenericSend+0x120>)
   81de2:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   81de4:	2000      	movs	r0, #0
		}
	}
}
   81de6:	b005      	add	sp, #20
   81de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81dec:	000818b9 	.word	0x000818b9
   81df0:	000818c9 	.word	0x000818c9
   81df4:	000818e9 	.word	0x000818e9
   81df8:	00081b0d 	.word	0x00081b0d
   81dfc:	00082835 	.word	0x00082835
   81e00:	000818a9 	.word	0x000818a9
   81e04:	000828b9 	.word	0x000828b9
   81e08:	0008232d 	.word	0x0008232d
   81e0c:	000828e1 	.word	0x000828e1
   81e10:	00082789 	.word	0x00082789
   81e14:	00081b99 	.word	0x00081b99
   81e18:	00082489 	.word	0x00082489

00081e1c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   81e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81e20:	460e      	mov	r6, r1
   81e22:	4615      	mov	r5, r2
   81e24:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   81e26:	4604      	mov	r4, r0
   81e28:	b918      	cbnz	r0, 81e32 <xQueueGenericSendFromISR+0x16>
   81e2a:	4b1c      	ldr	r3, [pc, #112]	; (81e9c <xQueueGenericSendFromISR+0x80>)
   81e2c:	4798      	blx	r3
   81e2e:	bf00      	nop
   81e30:	e7fd      	b.n	81e2e <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81e32:	b929      	cbnz	r1, 81e40 <xQueueGenericSendFromISR+0x24>
   81e34:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81e36:	b11b      	cbz	r3, 81e40 <xQueueGenericSendFromISR+0x24>
   81e38:	4b18      	ldr	r3, [pc, #96]	; (81e9c <xQueueGenericSendFromISR+0x80>)
   81e3a:	4798      	blx	r3
   81e3c:	bf00      	nop
   81e3e:	e7fd      	b.n	81e3c <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   81e40:	4b16      	ldr	r3, [pc, #88]	; (81e9c <xQueueGenericSendFromISR+0x80>)
   81e42:	4798      	blx	r3
   81e44:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81e46:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81e48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81e4a:	429a      	cmp	r2, r3
   81e4c:	d218      	bcs.n	81e80 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81e4e:	4620      	mov	r0, r4
   81e50:	4631      	mov	r1, r6
   81e52:	4642      	mov	r2, r8
   81e54:	4b12      	ldr	r3, [pc, #72]	; (81ea0 <xQueueGenericSendFromISR+0x84>)
   81e56:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   81e58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
   81e5e:	d10a      	bne.n	81e76 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81e62:	b17b      	cbz	r3, 81e84 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81e64:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81e68:	4b0e      	ldr	r3, [pc, #56]	; (81ea4 <xQueueGenericSendFromISR+0x88>)
   81e6a:	4798      	blx	r3
   81e6c:	b160      	cbz	r0, 81e88 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   81e6e:	b16d      	cbz	r5, 81e8c <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   81e70:	2401      	movs	r4, #1
   81e72:	602c      	str	r4, [r5, #0]
   81e74:	e00b      	b.n	81e8e <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   81e76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81e78:	3301      	adds	r3, #1
   81e7a:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   81e7c:	2401      	movs	r4, #1
   81e7e:	e006      	b.n	81e8e <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81e80:	2400      	movs	r4, #0
   81e82:	e004      	b.n	81e8e <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   81e84:	2401      	movs	r4, #1
   81e86:	e002      	b.n	81e8e <xQueueGenericSendFromISR+0x72>
   81e88:	2401      	movs	r4, #1
   81e8a:	e000      	b.n	81e8e <xQueueGenericSendFromISR+0x72>
   81e8c:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   81e8e:	4638      	mov	r0, r7
   81e90:	4b05      	ldr	r3, [pc, #20]	; (81ea8 <xQueueGenericSendFromISR+0x8c>)
   81e92:	4798      	blx	r3

	return xReturn;
}
   81e94:	4620      	mov	r0, r4
   81e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e9a:	bf00      	nop
   81e9c:	000818b9 	.word	0x000818b9
   81ea0:	00081b0d 	.word	0x00081b0d
   81ea4:	00082835 	.word	0x00082835
   81ea8:	000818e1 	.word	0x000818e1

00081eac <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   81eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81eb0:	b085      	sub	sp, #20
   81eb2:	4689      	mov	r9, r1
   81eb4:	469a      	mov	sl, r3
   81eb6:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   81eba:	4604      	mov	r4, r0
   81ebc:	b918      	cbnz	r0, 81ec6 <xQueueGenericReceive+0x1a>
   81ebe:	4b46      	ldr	r3, [pc, #280]	; (81fd8 <xQueueGenericReceive+0x12c>)
   81ec0:	4798      	blx	r3
   81ec2:	bf00      	nop
   81ec4:	e7fd      	b.n	81ec2 <xQueueGenericReceive+0x16>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81ec6:	b909      	cbnz	r1, 81ecc <xQueueGenericReceive+0x20>
   81ec8:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81eca:	b92b      	cbnz	r3, 81ed8 <xQueueGenericReceive+0x2c>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   81ecc:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81ece:	4e43      	ldr	r6, [pc, #268]	; (81fdc <xQueueGenericReceive+0x130>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81ed0:	f8df b138 	ldr.w	fp, [pc, #312]	; 8200c <xQueueGenericReceive+0x160>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81ed4:	4d42      	ldr	r5, [pc, #264]	; (81fe0 <xQueueGenericReceive+0x134>)
   81ed6:	e003      	b.n	81ee0 <xQueueGenericReceive+0x34>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81ed8:	4b3f      	ldr	r3, [pc, #252]	; (81fd8 <xQueueGenericReceive+0x12c>)
   81eda:	4798      	blx	r3
   81edc:	bf00      	nop
   81ede:	e7fd      	b.n	81edc <xQueueGenericReceive+0x30>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81ee0:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   81ee2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81ee4:	2b00      	cmp	r3, #0
   81ee6:	d028      	beq.n	81f3a <xQueueGenericReceive+0x8e>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   81ee8:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   81eea:	4620      	mov	r0, r4
   81eec:	4649      	mov	r1, r9
   81eee:	4b3d      	ldr	r3, [pc, #244]	; (81fe4 <xQueueGenericReceive+0x138>)
   81ef0:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   81ef2:	f1ba 0f00 	cmp.w	sl, #0
   81ef6:	d112      	bne.n	81f1e <xQueueGenericReceive+0x72>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   81ef8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81efa:	3b01      	subs	r3, #1
   81efc:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81efe:	6823      	ldr	r3, [r4, #0]
   81f00:	b913      	cbnz	r3, 81f08 <xQueueGenericReceive+0x5c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   81f02:	4b39      	ldr	r3, [pc, #228]	; (81fe8 <xQueueGenericReceive+0x13c>)
   81f04:	4798      	blx	r3
   81f06:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81f08:	6923      	ldr	r3, [r4, #16]
   81f0a:	b193      	cbz	r3, 81f32 <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81f0c:	f104 0010 	add.w	r0, r4, #16
   81f10:	4b36      	ldr	r3, [pc, #216]	; (81fec <xQueueGenericReceive+0x140>)
   81f12:	4798      	blx	r3
   81f14:	2801      	cmp	r0, #1
   81f16:	d10c      	bne.n	81f32 <xQueueGenericReceive+0x86>
						{
							portYIELD_WITHIN_API();
   81f18:	4b35      	ldr	r3, [pc, #212]	; (81ff0 <xQueueGenericReceive+0x144>)
   81f1a:	4798      	blx	r3
   81f1c:	e009      	b.n	81f32 <xQueueGenericReceive+0x86>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   81f1e:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81f22:	b133      	cbz	r3, 81f32 <xQueueGenericReceive+0x86>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81f24:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81f28:	4b30      	ldr	r3, [pc, #192]	; (81fec <xQueueGenericReceive+0x140>)
   81f2a:	4798      	blx	r3
   81f2c:	b108      	cbz	r0, 81f32 <xQueueGenericReceive+0x86>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   81f2e:	4b30      	ldr	r3, [pc, #192]	; (81ff0 <xQueueGenericReceive+0x144>)
   81f30:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   81f32:	4b2b      	ldr	r3, [pc, #172]	; (81fe0 <xQueueGenericReceive+0x134>)
   81f34:	4798      	blx	r3
				return pdPASS;
   81f36:	2001      	movs	r0, #1
   81f38:	e04b      	b.n	81fd2 <xQueueGenericReceive+0x126>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81f3a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   81f3e:	b91b      	cbnz	r3, 81f48 <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81f40:	4b27      	ldr	r3, [pc, #156]	; (81fe0 <xQueueGenericReceive+0x134>)
   81f42:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   81f44:	2000      	movs	r0, #0
   81f46:	e044      	b.n	81fd2 <xQueueGenericReceive+0x126>
				}
				else if( xEntryTimeSet == pdFALSE )
   81f48:	b917      	cbnz	r7, 81f50 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81f4a:	a802      	add	r0, sp, #8
   81f4c:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81f4e:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81f50:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81f52:	4b28      	ldr	r3, [pc, #160]	; (81ff4 <xQueueGenericReceive+0x148>)
   81f54:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81f56:	47b0      	blx	r6
   81f58:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
   81f5e:	bf04      	itt	eq
   81f60:	2300      	moveq	r3, #0
   81f62:	6463      	streq	r3, [r4, #68]	; 0x44
   81f64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81f66:	f1b3 3fff 	cmp.w	r3, #4294967295
   81f6a:	bf04      	itt	eq
   81f6c:	2300      	moveq	r3, #0
   81f6e:	64a3      	streq	r3, [r4, #72]	; 0x48
   81f70:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81f72:	a802      	add	r0, sp, #8
   81f74:	f10d 0106 	add.w	r1, sp, #6
   81f78:	4b1f      	ldr	r3, [pc, #124]	; (81ff8 <xQueueGenericReceive+0x14c>)
   81f7a:	4798      	blx	r3
   81f7c:	bb18      	cbnz	r0, 81fc6 <xQueueGenericReceive+0x11a>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81f7e:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   81f80:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   81f84:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81f86:	f1b8 0f00 	cmp.w	r8, #0
   81f8a:	d116      	bne.n	81fba <xQueueGenericReceive+0x10e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81f8c:	6823      	ldr	r3, [r4, #0]
   81f8e:	b923      	cbnz	r3, 81f9a <xQueueGenericReceive+0xee>
					{
						portENTER_CRITICAL();
   81f90:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   81f92:	6860      	ldr	r0, [r4, #4]
   81f94:	4b19      	ldr	r3, [pc, #100]	; (81ffc <xQueueGenericReceive+0x150>)
   81f96:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   81f98:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81f9a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81f9e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   81fa2:	4b17      	ldr	r3, [pc, #92]	; (82000 <xQueueGenericReceive+0x154>)
   81fa4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   81fa6:	4620      	mov	r0, r4
   81fa8:	4b16      	ldr	r3, [pc, #88]	; (82004 <xQueueGenericReceive+0x158>)
   81faa:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81fac:	4b16      	ldr	r3, [pc, #88]	; (82008 <xQueueGenericReceive+0x15c>)
   81fae:	4798      	blx	r3
   81fb0:	2800      	cmp	r0, #0
   81fb2:	d195      	bne.n	81ee0 <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
   81fb4:	4b0e      	ldr	r3, [pc, #56]	; (81ff0 <xQueueGenericReceive+0x144>)
   81fb6:	4798      	blx	r3
   81fb8:	e792      	b.n	81ee0 <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81fba:	4620      	mov	r0, r4
   81fbc:	4b11      	ldr	r3, [pc, #68]	; (82004 <xQueueGenericReceive+0x158>)
   81fbe:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81fc0:	4b11      	ldr	r3, [pc, #68]	; (82008 <xQueueGenericReceive+0x15c>)
   81fc2:	4798      	blx	r3
   81fc4:	e78c      	b.n	81ee0 <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   81fc6:	4620      	mov	r0, r4
   81fc8:	4b0e      	ldr	r3, [pc, #56]	; (82004 <xQueueGenericReceive+0x158>)
   81fca:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81fcc:	4b0e      	ldr	r3, [pc, #56]	; (82008 <xQueueGenericReceive+0x15c>)
   81fce:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   81fd0:	2000      	movs	r0, #0
		}
	}
}
   81fd2:	b005      	add	sp, #20
   81fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81fd8:	000818b9 	.word	0x000818b9
   81fdc:	000818c9 	.word	0x000818c9
   81fe0:	000818e9 	.word	0x000818e9
   81fe4:	00081b71 	.word	0x00081b71
   81fe8:	00082979 	.word	0x00082979
   81fec:	00082835 	.word	0x00082835
   81ff0:	000818a9 	.word	0x000818a9
   81ff4:	0008232d 	.word	0x0008232d
   81ff8:	000828e1 	.word	0x000828e1
   81ffc:	000829a5 	.word	0x000829a5
   82000:	00082789 	.word	0x00082789
   82004:	00081b99 	.word	0x00081b99
   82008:	00082489 	.word	0x00082489
   8200c:	000828b9 	.word	0x000828b9

00082010 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   82010:	b538      	push	{r3, r4, r5, lr}
   82012:	4604      	mov	r4, r0
   82014:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   82016:	4b0d      	ldr	r3, [pc, #52]	; (8204c <vQueueWaitForMessageRestricted+0x3c>)
   82018:	4798      	blx	r3
   8201a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8201c:	f1b3 3fff 	cmp.w	r3, #4294967295
   82020:	bf04      	itt	eq
   82022:	2300      	moveq	r3, #0
   82024:	6463      	streq	r3, [r4, #68]	; 0x44
   82026:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   82028:	f1b3 3fff 	cmp.w	r3, #4294967295
   8202c:	bf04      	itt	eq
   8202e:	2300      	moveq	r3, #0
   82030:	64a3      	streq	r3, [r4, #72]	; 0x48
   82032:	4b07      	ldr	r3, [pc, #28]	; (82050 <vQueueWaitForMessageRestricted+0x40>)
   82034:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   82036:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   82038:	b923      	cbnz	r3, 82044 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8203a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8203e:	4629      	mov	r1, r5
   82040:	4b04      	ldr	r3, [pc, #16]	; (82054 <vQueueWaitForMessageRestricted+0x44>)
   82042:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   82044:	4620      	mov	r0, r4
   82046:	4b04      	ldr	r3, [pc, #16]	; (82058 <vQueueWaitForMessageRestricted+0x48>)
   82048:	4798      	blx	r3
   8204a:	bd38      	pop	{r3, r4, r5, pc}
   8204c:	000818c9 	.word	0x000818c9
   82050:	000818e9 	.word	0x000818e9
   82054:	000827ed 	.word	0x000827ed
   82058:	00081b99 	.word	0x00081b99

0008205c <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   8205c:	b510      	push	{r4, lr}
   8205e:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   82060:	4b0f      	ldr	r3, [pc, #60]	; (820a0 <prvAddCurrentTaskToDelayedList+0x44>)
   82062:	681b      	ldr	r3, [r3, #0]
   82064:	8098      	strh	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   82066:	4b0f      	ldr	r3, [pc, #60]	; (820a4 <prvAddCurrentTaskToDelayedList+0x48>)
   82068:	881b      	ldrh	r3, [r3, #0]
   8206a:	b29b      	uxth	r3, r3
   8206c:	4298      	cmp	r0, r3
   8206e:	d207      	bcs.n	82080 <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   82070:	4b0d      	ldr	r3, [pc, #52]	; (820a8 <prvAddCurrentTaskToDelayedList+0x4c>)
   82072:	6818      	ldr	r0, [r3, #0]
   82074:	4b0a      	ldr	r3, [pc, #40]	; (820a0 <prvAddCurrentTaskToDelayedList+0x44>)
   82076:	6819      	ldr	r1, [r3, #0]
   82078:	3104      	adds	r1, #4
   8207a:	4b0c      	ldr	r3, [pc, #48]	; (820ac <prvAddCurrentTaskToDelayedList+0x50>)
   8207c:	4798      	blx	r3
   8207e:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   82080:	4b0b      	ldr	r3, [pc, #44]	; (820b0 <prvAddCurrentTaskToDelayedList+0x54>)
   82082:	6818      	ldr	r0, [r3, #0]
   82084:	4b06      	ldr	r3, [pc, #24]	; (820a0 <prvAddCurrentTaskToDelayedList+0x44>)
   82086:	6819      	ldr	r1, [r3, #0]
   82088:	3104      	adds	r1, #4
   8208a:	4b08      	ldr	r3, [pc, #32]	; (820ac <prvAddCurrentTaskToDelayedList+0x50>)
   8208c:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   8208e:	4b09      	ldr	r3, [pc, #36]	; (820b4 <prvAddCurrentTaskToDelayedList+0x58>)
   82090:	881b      	ldrh	r3, [r3, #0]
   82092:	b29b      	uxth	r3, r3
   82094:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   82096:	bf3c      	itt	cc
   82098:	4b06      	ldrcc	r3, [pc, #24]	; (820b4 <prvAddCurrentTaskToDelayedList+0x58>)
   8209a:	801c      	strhcc	r4, [r3, #0]
   8209c:	bd10      	pop	{r4, pc}
   8209e:	bf00      	nop
   820a0:	20078c90 	.word	0x20078c90
   820a4:	20078cac 	.word	0x20078cac
   820a8:	20078cb0 	.word	0x20078cb0
   820ac:	000817ed 	.word	0x000817ed
   820b0:	20078b8c 	.word	0x20078b8c
   820b4:	200701a8 	.word	0x200701a8

000820b8 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   820b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   820bc:	460e      	mov	r6, r1
   820be:	4617      	mov	r7, r2
   820c0:	469a      	mov	sl, r3
   820c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   820c4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   820c8:	4681      	mov	r9, r0
   820ca:	b918      	cbnz	r0, 820d4 <xTaskGenericCreate+0x1c>
   820cc:	4b62      	ldr	r3, [pc, #392]	; (82258 <xTaskGenericCreate+0x1a0>)
   820ce:	4798      	blx	r3
   820d0:	bf00      	nop
   820d2:	e7fd      	b.n	820d0 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   820d4:	2d09      	cmp	r5, #9
   820d6:	d903      	bls.n	820e0 <xTaskGenericCreate+0x28>
   820d8:	4b5f      	ldr	r3, [pc, #380]	; (82258 <xTaskGenericCreate+0x1a0>)
   820da:	4798      	blx	r3
   820dc:	bf00      	nop
   820de:	e7fd      	b.n	820dc <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   820e0:	2050      	movs	r0, #80	; 0x50
   820e2:	4b5e      	ldr	r3, [pc, #376]	; (8225c <xTaskGenericCreate+0x1a4>)
   820e4:	4798      	blx	r3

	if( pxNewTCB != NULL )
   820e6:	4604      	mov	r4, r0
   820e8:	2800      	cmp	r0, #0
   820ea:	f000 80b1 	beq.w	82250 <xTaskGenericCreate+0x198>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   820ee:	f1b8 0f00 	cmp.w	r8, #0
   820f2:	f040 80a9 	bne.w	82248 <xTaskGenericCreate+0x190>
   820f6:	00b8      	lsls	r0, r7, #2
   820f8:	4b58      	ldr	r3, [pc, #352]	; (8225c <xTaskGenericCreate+0x1a4>)
   820fa:	4798      	blx	r3
   820fc:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   820fe:	b918      	cbnz	r0, 82108 <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   82100:	4620      	mov	r0, r4
   82102:	4b57      	ldr	r3, [pc, #348]	; (82260 <xTaskGenericCreate+0x1a8>)
   82104:	4798      	blx	r3
   82106:	e0a3      	b.n	82250 <xTaskGenericCreate+0x198>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   82108:	21a5      	movs	r1, #165	; 0xa5
   8210a:	00ba      	lsls	r2, r7, #2
   8210c:	4b55      	ldr	r3, [pc, #340]	; (82264 <xTaskGenericCreate+0x1ac>)
   8210e:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   82110:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   82114:	3f01      	subs	r7, #1
   82116:	6b23      	ldr	r3, [r4, #48]	; 0x30
   82118:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   8211c:	f023 0b07 	bic.w	fp, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   82120:	f104 0034 	add.w	r0, r4, #52	; 0x34
   82124:	4631      	mov	r1, r6
   82126:	2210      	movs	r2, #16
   82128:	4b4f      	ldr	r3, [pc, #316]	; (82268 <xTaskGenericCreate+0x1b0>)
   8212a:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   8212c:	2300      	movs	r3, #0
   8212e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   82132:	2d09      	cmp	r5, #9
   82134:	bf34      	ite	cc
   82136:	462e      	movcc	r6, r5
   82138:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   8213a:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   8213c:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   8213e:	1d27      	adds	r7, r4, #4
   82140:	4638      	mov	r0, r7
   82142:	f8df 8170 	ldr.w	r8, [pc, #368]	; 822b4 <xTaskGenericCreate+0x1fc>
   82146:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   82148:	f104 0018 	add.w	r0, r4, #24
   8214c:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   8214e:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   82150:	f1c6 060a 	rsb	r6, r6, #10
   82154:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   82156:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   82158:	4658      	mov	r0, fp
   8215a:	4649      	mov	r1, r9
   8215c:	4652      	mov	r2, sl
   8215e:	4b43      	ldr	r3, [pc, #268]	; (8226c <xTaskGenericCreate+0x1b4>)
   82160:	4798      	blx	r3
   82162:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   82164:	f010 0f07 	tst.w	r0, #7
   82168:	d003      	beq.n	82172 <xTaskGenericCreate+0xba>
   8216a:	4b3b      	ldr	r3, [pc, #236]	; (82258 <xTaskGenericCreate+0x1a0>)
   8216c:	4798      	blx	r3
   8216e:	bf00      	nop
   82170:	e7fd      	b.n	8216e <xTaskGenericCreate+0xb6>

		if( ( void * ) pxCreatedTask != NULL )
   82172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   82174:	b103      	cbz	r3, 82178 <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   82176:	601c      	str	r4, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   82178:	4b3d      	ldr	r3, [pc, #244]	; (82270 <xTaskGenericCreate+0x1b8>)
   8217a:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   8217c:	4b3d      	ldr	r3, [pc, #244]	; (82274 <xTaskGenericCreate+0x1bc>)
   8217e:	681a      	ldr	r2, [r3, #0]
   82180:	3201      	adds	r2, #1
   82182:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   82184:	4b3c      	ldr	r3, [pc, #240]	; (82278 <xTaskGenericCreate+0x1c0>)
   82186:	681b      	ldr	r3, [r3, #0]
   82188:	bb2b      	cbnz	r3, 821d6 <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   8218a:	4b3b      	ldr	r3, [pc, #236]	; (82278 <xTaskGenericCreate+0x1c0>)
   8218c:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   8218e:	4b39      	ldr	r3, [pc, #228]	; (82274 <xTaskGenericCreate+0x1bc>)
   82190:	681b      	ldr	r3, [r3, #0]
   82192:	2b01      	cmp	r3, #1
   82194:	d129      	bne.n	821ea <xTaskGenericCreate+0x132>
   82196:	4e39      	ldr	r6, [pc, #228]	; (8227c <xTaskGenericCreate+0x1c4>)
   82198:	f106 09c8 	add.w	r9, r6, #200	; 0xc8
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   8219c:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 82280 <xTaskGenericCreate+0x1c8>
   821a0:	4630      	mov	r0, r6
   821a2:	47c0      	blx	r8
   821a4:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   821a6:	454e      	cmp	r6, r9
   821a8:	d1fa      	bne.n	821a0 <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   821aa:	f8df 910c 	ldr.w	r9, [pc, #268]	; 822b8 <xTaskGenericCreate+0x200>
   821ae:	4648      	mov	r0, r9
   821b0:	4e33      	ldr	r6, [pc, #204]	; (82280 <xTaskGenericCreate+0x1c8>)
   821b2:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   821b4:	f8df 8104 	ldr.w	r8, [pc, #260]	; 822bc <xTaskGenericCreate+0x204>
   821b8:	4640      	mov	r0, r8
   821ba:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   821bc:	4831      	ldr	r0, [pc, #196]	; (82284 <xTaskGenericCreate+0x1cc>)
   821be:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   821c0:	4831      	ldr	r0, [pc, #196]	; (82288 <xTaskGenericCreate+0x1d0>)
   821c2:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   821c4:	4831      	ldr	r0, [pc, #196]	; (8228c <xTaskGenericCreate+0x1d4>)
   821c6:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   821c8:	4b31      	ldr	r3, [pc, #196]	; (82290 <xTaskGenericCreate+0x1d8>)
   821ca:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   821ce:	4b31      	ldr	r3, [pc, #196]	; (82294 <xTaskGenericCreate+0x1dc>)
   821d0:	f8c3 8000 	str.w	r8, [r3]
   821d4:	e009      	b.n	821ea <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   821d6:	4b30      	ldr	r3, [pc, #192]	; (82298 <xTaskGenericCreate+0x1e0>)
   821d8:	681b      	ldr	r3, [r3, #0]
   821da:	b933      	cbnz	r3, 821ea <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   821dc:	4b26      	ldr	r3, [pc, #152]	; (82278 <xTaskGenericCreate+0x1c0>)
   821de:	681b      	ldr	r3, [r3, #0]
   821e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   821e2:	429d      	cmp	r5, r3
					{
						pxCurrentTCB = pxNewTCB;
   821e4:	bf24      	itt	cs
   821e6:	4b24      	ldrcs	r3, [pc, #144]	; (82278 <xTaskGenericCreate+0x1c0>)
   821e8:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   821ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   821ec:	4a2b      	ldr	r2, [pc, #172]	; (8229c <xTaskGenericCreate+0x1e4>)
   821ee:	6812      	ldr	r2, [r2, #0]
   821f0:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   821f2:	bf84      	itt	hi
   821f4:	4a29      	ldrhi	r2, [pc, #164]	; (8229c <xTaskGenericCreate+0x1e4>)
   821f6:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   821f8:	4a29      	ldr	r2, [pc, #164]	; (822a0 <xTaskGenericCreate+0x1e8>)
   821fa:	6811      	ldr	r1, [r2, #0]
   821fc:	6461      	str	r1, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   821fe:	3101      	adds	r1, #1
   82200:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   82202:	4a28      	ldr	r2, [pc, #160]	; (822a4 <xTaskGenericCreate+0x1ec>)
   82204:	6812      	ldr	r2, [r2, #0]
   82206:	4293      	cmp	r3, r2
   82208:	bf84      	itt	hi
   8220a:	4a26      	ldrhi	r2, [pc, #152]	; (822a4 <xTaskGenericCreate+0x1ec>)
   8220c:	6013      	strhi	r3, [r2, #0]
   8220e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82212:	481a      	ldr	r0, [pc, #104]	; (8227c <xTaskGenericCreate+0x1c4>)
   82214:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   82218:	4639      	mov	r1, r7
   8221a:	4b23      	ldr	r3, [pc, #140]	; (822a8 <xTaskGenericCreate+0x1f0>)
   8221c:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   8221e:	4b23      	ldr	r3, [pc, #140]	; (822ac <xTaskGenericCreate+0x1f4>)
   82220:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   82222:	4b1d      	ldr	r3, [pc, #116]	; (82298 <xTaskGenericCreate+0x1e0>)
   82224:	681b      	ldr	r3, [r3, #0]
   82226:	b14b      	cbz	r3, 8223c <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   82228:	4b13      	ldr	r3, [pc, #76]	; (82278 <xTaskGenericCreate+0x1c0>)
   8222a:	681b      	ldr	r3, [r3, #0]
   8222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8222e:	429d      	cmp	r5, r3
   82230:	d907      	bls.n	82242 <xTaskGenericCreate+0x18a>
			{
				portYIELD_WITHIN_API();
   82232:	4b1f      	ldr	r3, [pc, #124]	; (822b0 <xTaskGenericCreate+0x1f8>)
   82234:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   82236:	2001      	movs	r0, #1
   82238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8223c:	2001      	movs	r0, #1
   8223e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82242:	2001      	movs	r0, #1
   82244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   82248:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
   8224c:	4640      	mov	r0, r8
   8224e:	e75b      	b.n	82108 <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   82250:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   82254:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82258:	000818b9 	.word	0x000818b9
   8225c:	00081a15 	.word	0x00081a15
   82260:	00081ad9 	.word	0x00081ad9
   82264:	00084865 	.word	0x00084865
   82268:	00084ab5 	.word	0x00084ab5
   8226c:	0008186d 	.word	0x0008186d
   82270:	000818c9 	.word	0x000818c9
   82274:	20078cd0 	.word	0x20078cd0
   82278:	20078c90 	.word	0x20078c90
   8227c:	20078bc4 	.word	0x20078bc4
   82280:	000817b1 	.word	0x000817b1
   82284:	20078c94 	.word	0x20078c94
   82288:	20078b98 	.word	0x20078b98
   8228c:	20078b78 	.word	0x20078b78
   82290:	20078b8c 	.word	0x20078b8c
   82294:	20078cb0 	.word	0x20078cb0
   82298:	20078b90 	.word	0x20078b90
   8229c:	20078cd4 	.word	0x20078cd4
   822a0:	20078cb4 	.word	0x20078cb4
   822a4:	20078bc0 	.word	0x20078bc0
   822a8:	000817d1 	.word	0x000817d1
   822ac:	000818e9 	.word	0x000818e9
   822b0:	000818a9 	.word	0x000818a9
   822b4:	000817c9 	.word	0x000817c9
   822b8:	20078cb8 	.word	0x20078cb8
   822bc:	20078bac 	.word	0x20078bac

000822c0 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   822c0:	b510      	push	{r4, lr}
   822c2:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   822c4:	2300      	movs	r3, #0
   822c6:	9300      	str	r3, [sp, #0]
   822c8:	9301      	str	r3, [sp, #4]
   822ca:	9302      	str	r3, [sp, #8]
   822cc:	9303      	str	r3, [sp, #12]
   822ce:	480f      	ldr	r0, [pc, #60]	; (8230c <vTaskStartScheduler+0x4c>)
   822d0:	490f      	ldr	r1, [pc, #60]	; (82310 <vTaskStartScheduler+0x50>)
   822d2:	f44f 7280 	mov.w	r2, #256	; 0x100
   822d6:	4c0f      	ldr	r4, [pc, #60]	; (82314 <vTaskStartScheduler+0x54>)
   822d8:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   822da:	2801      	cmp	r0, #1
   822dc:	d10e      	bne.n	822fc <vTaskStartScheduler+0x3c>
		{
			xReturn = xTimerCreateTimerTask();
   822de:	4b0e      	ldr	r3, [pc, #56]	; (82318 <vTaskStartScheduler+0x58>)
   822e0:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   822e2:	2801      	cmp	r0, #1
   822e4:	d10a      	bne.n	822fc <vTaskStartScheduler+0x3c>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   822e6:	4b0d      	ldr	r3, [pc, #52]	; (8231c <vTaskStartScheduler+0x5c>)
   822e8:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   822ea:	2201      	movs	r2, #1
   822ec:	4b0c      	ldr	r3, [pc, #48]	; (82320 <vTaskStartScheduler+0x60>)
   822ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   822f0:	2200      	movs	r2, #0
   822f2:	4b0c      	ldr	r3, [pc, #48]	; (82324 <vTaskStartScheduler+0x64>)
   822f4:	801a      	strh	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   822f6:	4b0c      	ldr	r3, [pc, #48]	; (82328 <vTaskStartScheduler+0x68>)
   822f8:	4798      	blx	r3
   822fa:	e004      	b.n	82306 <vTaskStartScheduler+0x46>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   822fc:	b918      	cbnz	r0, 82306 <vTaskStartScheduler+0x46>
   822fe:	4b07      	ldr	r3, [pc, #28]	; (8231c <vTaskStartScheduler+0x5c>)
   82300:	4798      	blx	r3
   82302:	bf00      	nop
   82304:	e7fd      	b.n	82302 <vTaskStartScheduler+0x42>
}
   82306:	b004      	add	sp, #16
   82308:	bd10      	pop	{r4, pc}
   8230a:	bf00      	nop
   8230c:	00082675 	.word	0x00082675
   82310:	0008a6fc 	.word	0x0008a6fc
   82314:	000820b9 	.word	0x000820b9
   82318:	00082b1d 	.word	0x00082b1d
   8231c:	000818b9 	.word	0x000818b9
   82320:	20078b90 	.word	0x20078b90
   82324:	20078cac 	.word	0x20078cac
   82328:	00081985 	.word	0x00081985

0008232c <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   8232c:	4b02      	ldr	r3, [pc, #8]	; (82338 <vTaskSuspendAll+0xc>)
   8232e:	681a      	ldr	r2, [r3, #0]
   82330:	3201      	adds	r2, #1
   82332:	601a      	str	r2, [r3, #0]
   82334:	4770      	bx	lr
   82336:	bf00      	nop
   82338:	20078c8c 	.word	0x20078c8c

0008233c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   8233c:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   8233e:	4b04      	ldr	r3, [pc, #16]	; (82350 <xTaskGetTickCount+0x14>)
   82340:	4798      	blx	r3
	{
		xTicks = xTickCount;
   82342:	4b04      	ldr	r3, [pc, #16]	; (82354 <xTaskGetTickCount+0x18>)
   82344:	881c      	ldrh	r4, [r3, #0]
   82346:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   82348:	4b03      	ldr	r3, [pc, #12]	; (82358 <xTaskGetTickCount+0x1c>)
   8234a:	4798      	blx	r3

	return xTicks;
}
   8234c:	4620      	mov	r0, r4
   8234e:	bd10      	pop	{r4, pc}
   82350:	000818c9 	.word	0x000818c9
   82354:	20078cac 	.word	0x20078cac
   82358:	000818e9 	.word	0x000818e9

0008235c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   8235c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82360:	4b3d      	ldr	r3, [pc, #244]	; (82458 <vTaskIncrementTick+0xfc>)
   82362:	681b      	ldr	r3, [r3, #0]
   82364:	2b00      	cmp	r3, #0
   82366:	d171      	bne.n	8244c <vTaskIncrementTick+0xf0>
	{
		++xTickCount;
   82368:	4b3c      	ldr	r3, [pc, #240]	; (8245c <vTaskIncrementTick+0x100>)
   8236a:	881a      	ldrh	r2, [r3, #0]
   8236c:	3201      	adds	r2, #1
   8236e:	b292      	uxth	r2, r2
   82370:	801a      	strh	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   82372:	881b      	ldrh	r3, [r3, #0]
   82374:	b29b      	uxth	r3, r3
   82376:	bb03      	cbnz	r3, 823ba <vTaskIncrementTick+0x5e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   82378:	4b39      	ldr	r3, [pc, #228]	; (82460 <vTaskIncrementTick+0x104>)
   8237a:	681b      	ldr	r3, [r3, #0]
   8237c:	681b      	ldr	r3, [r3, #0]
   8237e:	b11b      	cbz	r3, 82388 <vTaskIncrementTick+0x2c>
   82380:	4b38      	ldr	r3, [pc, #224]	; (82464 <vTaskIncrementTick+0x108>)
   82382:	4798      	blx	r3
   82384:	bf00      	nop
   82386:	e7fd      	b.n	82384 <vTaskIncrementTick+0x28>

			pxTemp = pxDelayedTaskList;
   82388:	4b35      	ldr	r3, [pc, #212]	; (82460 <vTaskIncrementTick+0x104>)
   8238a:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   8238c:	4a36      	ldr	r2, [pc, #216]	; (82468 <vTaskIncrementTick+0x10c>)
   8238e:	6810      	ldr	r0, [r2, #0]
   82390:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   82392:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   82394:	4a35      	ldr	r2, [pc, #212]	; (8246c <vTaskIncrementTick+0x110>)
   82396:	6811      	ldr	r1, [r2, #0]
   82398:	3101      	adds	r1, #1
   8239a:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8239c:	681b      	ldr	r3, [r3, #0]
   8239e:	681b      	ldr	r3, [r3, #0]
   823a0:	b923      	cbnz	r3, 823ac <vTaskIncrementTick+0x50>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   823a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   823a6:	4b32      	ldr	r3, [pc, #200]	; (82470 <vTaskIncrementTick+0x114>)
   823a8:	801a      	strh	r2, [r3, #0]
   823aa:	e006      	b.n	823ba <vTaskIncrementTick+0x5e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   823ac:	4b2c      	ldr	r3, [pc, #176]	; (82460 <vTaskIncrementTick+0x104>)
   823ae:	681b      	ldr	r3, [r3, #0]
   823b0:	68db      	ldr	r3, [r3, #12]
   823b2:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   823b4:	889a      	ldrh	r2, [r3, #4]
   823b6:	4b2e      	ldr	r3, [pc, #184]	; (82470 <vTaskIncrementTick+0x114>)
   823b8:	801a      	strh	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   823ba:	4b28      	ldr	r3, [pc, #160]	; (8245c <vTaskIncrementTick+0x100>)
   823bc:	881a      	ldrh	r2, [r3, #0]
   823be:	b292      	uxth	r2, r2
   823c0:	4b2b      	ldr	r3, [pc, #172]	; (82470 <vTaskIncrementTick+0x114>)
   823c2:	881b      	ldrh	r3, [r3, #0]
   823c4:	b29b      	uxth	r3, r3
   823c6:	429a      	cmp	r2, r3
   823c8:	d344      	bcc.n	82454 <vTaskIncrementTick+0xf8>
   823ca:	4b25      	ldr	r3, [pc, #148]	; (82460 <vTaskIncrementTick+0x104>)
   823cc:	681b      	ldr	r3, [r3, #0]
   823ce:	681b      	ldr	r3, [r3, #0]
   823d0:	b153      	cbz	r3, 823e8 <vTaskIncrementTick+0x8c>
   823d2:	4b23      	ldr	r3, [pc, #140]	; (82460 <vTaskIncrementTick+0x104>)
   823d4:	681b      	ldr	r3, [r3, #0]
   823d6:	68db      	ldr	r3, [r3, #12]
   823d8:	68dc      	ldr	r4, [r3, #12]
   823da:	88a3      	ldrh	r3, [r4, #4]
   823dc:	4a1f      	ldr	r2, [pc, #124]	; (8245c <vTaskIncrementTick+0x100>)
   823de:	8812      	ldrh	r2, [r2, #0]
   823e0:	b292      	uxth	r2, r2
   823e2:	4293      	cmp	r3, r2
   823e4:	d914      	bls.n	82410 <vTaskIncrementTick+0xb4>
   823e6:	e00f      	b.n	82408 <vTaskIncrementTick+0xac>
   823e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   823ec:	4b20      	ldr	r3, [pc, #128]	; (82470 <vTaskIncrementTick+0x114>)
   823ee:	801a      	strh	r2, [r3, #0]
   823f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823f4:	4b1a      	ldr	r3, [pc, #104]	; (82460 <vTaskIncrementTick+0x104>)
   823f6:	681b      	ldr	r3, [r3, #0]
   823f8:	68db      	ldr	r3, [r3, #12]
   823fa:	68dc      	ldr	r4, [r3, #12]
   823fc:	88a3      	ldrh	r3, [r4, #4]
   823fe:	4a17      	ldr	r2, [pc, #92]	; (8245c <vTaskIncrementTick+0x100>)
   82400:	8812      	ldrh	r2, [r2, #0]
   82402:	b292      	uxth	r2, r2
   82404:	4293      	cmp	r3, r2
   82406:	d907      	bls.n	82418 <vTaskIncrementTick+0xbc>
   82408:	4a19      	ldr	r2, [pc, #100]	; (82470 <vTaskIncrementTick+0x114>)
   8240a:	8013      	strh	r3, [r2, #0]
   8240c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82410:	4e18      	ldr	r6, [pc, #96]	; (82474 <vTaskIncrementTick+0x118>)
   82412:	4f19      	ldr	r7, [pc, #100]	; (82478 <vTaskIncrementTick+0x11c>)
   82414:	f8df 806c 	ldr.w	r8, [pc, #108]	; 82484 <vTaskIncrementTick+0x128>
   82418:	1d25      	adds	r5, r4, #4
   8241a:	4628      	mov	r0, r5
   8241c:	47b0      	blx	r6
   8241e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82420:	b113      	cbz	r3, 82428 <vTaskIncrementTick+0xcc>
   82422:	f104 0018 	add.w	r0, r4, #24
   82426:	47b0      	blx	r6
   82428:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8242a:	683a      	ldr	r2, [r7, #0]
   8242c:	4293      	cmp	r3, r2
   8242e:	bf88      	it	hi
   82430:	603b      	strhi	r3, [r7, #0]
   82432:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   82436:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   8243a:	4629      	mov	r1, r5
   8243c:	4b0f      	ldr	r3, [pc, #60]	; (8247c <vTaskIncrementTick+0x120>)
   8243e:	4798      	blx	r3
   82440:	4b07      	ldr	r3, [pc, #28]	; (82460 <vTaskIncrementTick+0x104>)
   82442:	681b      	ldr	r3, [r3, #0]
   82444:	681b      	ldr	r3, [r3, #0]
   82446:	2b00      	cmp	r3, #0
   82448:	d1d4      	bne.n	823f4 <vTaskIncrementTick+0x98>
   8244a:	e7cd      	b.n	823e8 <vTaskIncrementTick+0x8c>
	}
	else
	{
		++uxMissedTicks;
   8244c:	4b0c      	ldr	r3, [pc, #48]	; (82480 <vTaskIncrementTick+0x124>)
   8244e:	681a      	ldr	r2, [r3, #0]
   82450:	3201      	adds	r2, #1
   82452:	601a      	str	r2, [r3, #0]
   82454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82458:	20078c8c 	.word	0x20078c8c
   8245c:	20078cac 	.word	0x20078cac
   82460:	20078b8c 	.word	0x20078b8c
   82464:	000818b9 	.word	0x000818b9
   82468:	20078cb0 	.word	0x20078cb0
   8246c:	20078ca8 	.word	0x20078ca8
   82470:	200701a8 	.word	0x200701a8
   82474:	00081831 	.word	0x00081831
   82478:	20078bc0 	.word	0x20078bc0
   8247c:	000817d1 	.word	0x000817d1
   82480:	20078b74 	.word	0x20078b74
   82484:	20078bc4 	.word	0x20078bc4

00082488 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   82488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   8248c:	4b31      	ldr	r3, [pc, #196]	; (82554 <xTaskResumeAll+0xcc>)
   8248e:	681b      	ldr	r3, [r3, #0]
   82490:	b91b      	cbnz	r3, 8249a <xTaskResumeAll+0x12>
   82492:	4b31      	ldr	r3, [pc, #196]	; (82558 <xTaskResumeAll+0xd0>)
   82494:	4798      	blx	r3
   82496:	bf00      	nop
   82498:	e7fd      	b.n	82496 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   8249a:	4b30      	ldr	r3, [pc, #192]	; (8255c <xTaskResumeAll+0xd4>)
   8249c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   8249e:	4b2d      	ldr	r3, [pc, #180]	; (82554 <xTaskResumeAll+0xcc>)
   824a0:	681a      	ldr	r2, [r3, #0]
   824a2:	3a01      	subs	r2, #1
   824a4:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   824a6:	681b      	ldr	r3, [r3, #0]
   824a8:	2b00      	cmp	r3, #0
   824aa:	d148      	bne.n	8253e <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   824ac:	4b2c      	ldr	r3, [pc, #176]	; (82560 <xTaskResumeAll+0xd8>)
   824ae:	681b      	ldr	r3, [r3, #0]
   824b0:	2b00      	cmp	r3, #0
   824b2:	d046      	beq.n	82542 <xTaskResumeAll+0xba>
   824b4:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   824b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8258c <xTaskResumeAll+0x104>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   824ba:	4f2a      	ldr	r7, [pc, #168]	; (82564 <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   824bc:	4e2a      	ldr	r6, [pc, #168]	; (82568 <xTaskResumeAll+0xe0>)
   824be:	e01d      	b.n	824fc <xTaskResumeAll+0x74>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   824c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
   824c4:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   824c6:	f104 0018 	add.w	r0, r4, #24
   824ca:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   824cc:	f104 0904 	add.w	r9, r4, #4
   824d0:	4648      	mov	r0, r9
   824d2:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   824d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   824d6:	6832      	ldr	r2, [r6, #0]
   824d8:	4293      	cmp	r3, r2
   824da:	bf88      	it	hi
   824dc:	6033      	strhi	r3, [r6, #0]
   824de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   824e2:	4822      	ldr	r0, [pc, #136]	; (8256c <xTaskResumeAll+0xe4>)
   824e4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   824e8:	4649      	mov	r1, r9
   824ea:	4b21      	ldr	r3, [pc, #132]	; (82570 <xTaskResumeAll+0xe8>)
   824ec:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   824ee:	4b21      	ldr	r3, [pc, #132]	; (82574 <xTaskResumeAll+0xec>)
   824f0:	681b      	ldr	r3, [r3, #0]
   824f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   824f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   824f6:	429a      	cmp	r2, r3
   824f8:	bf28      	it	cs
   824fa:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   824fc:	f8d8 3000 	ldr.w	r3, [r8]
   82500:	2b00      	cmp	r3, #0
   82502:	d1dd      	bne.n	824c0 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   82504:	4b1c      	ldr	r3, [pc, #112]	; (82578 <xTaskResumeAll+0xf0>)
   82506:	681b      	ldr	r3, [r3, #0]
   82508:	b163      	cbz	r3, 82524 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8250a:	4b1b      	ldr	r3, [pc, #108]	; (82578 <xTaskResumeAll+0xf0>)
   8250c:	681b      	ldr	r3, [r3, #0]
   8250e:	b17b      	cbz	r3, 82530 <xTaskResumeAll+0xa8>
					{
						vTaskIncrementTick();
   82510:	4d1a      	ldr	r5, [pc, #104]	; (8257c <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
   82512:	4c19      	ldr	r4, [pc, #100]	; (82578 <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   82514:	47a8      	blx	r5
						--uxMissedTicks;
   82516:	6823      	ldr	r3, [r4, #0]
   82518:	3b01      	subs	r3, #1
   8251a:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8251c:	6823      	ldr	r3, [r4, #0]
   8251e:	2b00      	cmp	r3, #0
   82520:	d1f8      	bne.n	82514 <xTaskResumeAll+0x8c>
   82522:	e005      	b.n	82530 <xTaskResumeAll+0xa8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   82524:	2d01      	cmp	r5, #1
   82526:	d003      	beq.n	82530 <xTaskResumeAll+0xa8>
   82528:	4b15      	ldr	r3, [pc, #84]	; (82580 <xTaskResumeAll+0xf8>)
   8252a:	681b      	ldr	r3, [r3, #0]
   8252c:	2b01      	cmp	r3, #1
   8252e:	d10a      	bne.n	82546 <xTaskResumeAll+0xbe>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   82530:	2200      	movs	r2, #0
   82532:	4b13      	ldr	r3, [pc, #76]	; (82580 <xTaskResumeAll+0xf8>)
   82534:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   82536:	4b13      	ldr	r3, [pc, #76]	; (82584 <xTaskResumeAll+0xfc>)
   82538:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   8253a:	2401      	movs	r4, #1
   8253c:	e004      	b.n	82548 <xTaskResumeAll+0xc0>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8253e:	2400      	movs	r4, #0
   82540:	e002      	b.n	82548 <xTaskResumeAll+0xc0>
   82542:	2400      	movs	r4, #0
   82544:	e000      	b.n	82548 <xTaskResumeAll+0xc0>
   82546:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   82548:	4b0f      	ldr	r3, [pc, #60]	; (82588 <xTaskResumeAll+0x100>)
   8254a:	4798      	blx	r3

	return xAlreadyYielded;
}
   8254c:	4620      	mov	r0, r4
   8254e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82552:	bf00      	nop
   82554:	20078c8c 	.word	0x20078c8c
   82558:	000818b9 	.word	0x000818b9
   8255c:	000818c9 	.word	0x000818c9
   82560:	20078cd0 	.word	0x20078cd0
   82564:	00081831 	.word	0x00081831
   82568:	20078bc0 	.word	0x20078bc0
   8256c:	20078bc4 	.word	0x20078bc4
   82570:	000817d1 	.word	0x000817d1
   82574:	20078c90 	.word	0x20078c90
   82578:	20078b74 	.word	0x20078b74
   8257c:	0008235d 	.word	0x0008235d
   82580:	20078ccc 	.word	0x20078ccc
   82584:	000818a9 	.word	0x000818a9
   82588:	000818e9 	.word	0x000818e9
   8258c:	20078c94 	.word	0x20078c94

00082590 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   82590:	b538      	push	{r3, r4, r5, lr}
   82592:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   82594:	4605      	mov	r5, r0
   82596:	b918      	cbnz	r0, 825a0 <vTaskDelayUntil+0x10>
   82598:	4b1b      	ldr	r3, [pc, #108]	; (82608 <vTaskDelayUntil+0x78>)
   8259a:	4798      	blx	r3
   8259c:	bf00      	nop
   8259e:	e7fd      	b.n	8259c <vTaskDelayUntil+0xc>
		configASSERT( ( xTimeIncrement > 0U ) );
   825a0:	b919      	cbnz	r1, 825aa <vTaskDelayUntil+0x1a>
   825a2:	4b19      	ldr	r3, [pc, #100]	; (82608 <vTaskDelayUntil+0x78>)
   825a4:	4798      	blx	r3
   825a6:	bf00      	nop
   825a8:	e7fd      	b.n	825a6 <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   825aa:	4b18      	ldr	r3, [pc, #96]	; (8260c <vTaskDelayUntil+0x7c>)
   825ac:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   825ae:	882b      	ldrh	r3, [r5, #0]
   825b0:	441c      	add	r4, r3
   825b2:	b2a4      	uxth	r4, r4

			if( xTickCount < *pxPreviousWakeTime )
   825b4:	4a16      	ldr	r2, [pc, #88]	; (82610 <vTaskDelayUntil+0x80>)
   825b6:	8812      	ldrh	r2, [r2, #0]
   825b8:	b292      	uxth	r2, r2
   825ba:	4293      	cmp	r3, r2
   825bc:	d908      	bls.n	825d0 <vTaskDelayUntil+0x40>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   825be:	42a3      	cmp	r3, r4
   825c0:	d91e      	bls.n	82600 <vTaskDelayUntil+0x70>
   825c2:	4b13      	ldr	r3, [pc, #76]	; (82610 <vTaskDelayUntil+0x80>)
   825c4:	881b      	ldrh	r3, [r3, #0]
   825c6:	b29b      	uxth	r3, r3
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   825c8:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   825ca:	429c      	cmp	r4, r3
   825cc:	d910      	bls.n	825f0 <vTaskDelayUntil+0x60>
   825ce:	e007      	b.n	825e0 <vTaskDelayUntil+0x50>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   825d0:	42a3      	cmp	r3, r4
   825d2:	d813      	bhi.n	825fc <vTaskDelayUntil+0x6c>
   825d4:	4b0e      	ldr	r3, [pc, #56]	; (82610 <vTaskDelayUntil+0x80>)
   825d6:	881b      	ldrh	r3, [r3, #0]
   825d8:	b29b      	uxth	r3, r3
   825da:	429c      	cmp	r4, r3
   825dc:	d80e      	bhi.n	825fc <vTaskDelayUntil+0x6c>
   825de:	e00f      	b.n	82600 <vTaskDelayUntil+0x70>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   825e0:	4b0c      	ldr	r3, [pc, #48]	; (82614 <vTaskDelayUntil+0x84>)
   825e2:	6818      	ldr	r0, [r3, #0]
   825e4:	3004      	adds	r0, #4
   825e6:	4b0c      	ldr	r3, [pc, #48]	; (82618 <vTaskDelayUntil+0x88>)
   825e8:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   825ea:	4620      	mov	r0, r4
   825ec:	4b0b      	ldr	r3, [pc, #44]	; (8261c <vTaskDelayUntil+0x8c>)
   825ee:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   825f0:	4b0b      	ldr	r3, [pc, #44]	; (82620 <vTaskDelayUntil+0x90>)
   825f2:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   825f4:	b930      	cbnz	r0, 82604 <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
   825f6:	4b0b      	ldr	r3, [pc, #44]	; (82624 <vTaskDelayUntil+0x94>)
   825f8:	4798      	blx	r3
   825fa:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   825fc:	802c      	strh	r4, [r5, #0]
   825fe:	e7ef      	b.n	825e0 <vTaskDelayUntil+0x50>
   82600:	802c      	strh	r4, [r5, #0]
   82602:	e7f5      	b.n	825f0 <vTaskDelayUntil+0x60>
   82604:	bd38      	pop	{r3, r4, r5, pc}
   82606:	bf00      	nop
   82608:	000818b9 	.word	0x000818b9
   8260c:	0008232d 	.word	0x0008232d
   82610:	20078cac 	.word	0x20078cac
   82614:	20078c90 	.word	0x20078c90
   82618:	00081831 	.word	0x00081831
   8261c:	0008205d 	.word	0x0008205d
   82620:	00082489 	.word	0x00082489
   82624:	000818a9 	.word	0x000818a9

00082628 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   82628:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   8262a:	4604      	mov	r4, r0
   8262c:	b180      	cbz	r0, 82650 <vTaskDelay+0x28>
		{
			vTaskSuspendAll();
   8262e:	4b0a      	ldr	r3, [pc, #40]	; (82658 <vTaskDelay+0x30>)
   82630:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   82632:	4b0a      	ldr	r3, [pc, #40]	; (8265c <vTaskDelay+0x34>)
   82634:	881b      	ldrh	r3, [r3, #0]
   82636:	441c      	add	r4, r3
   82638:	b2a4      	uxth	r4, r4

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   8263a:	4b09      	ldr	r3, [pc, #36]	; (82660 <vTaskDelay+0x38>)
   8263c:	6818      	ldr	r0, [r3, #0]
   8263e:	3004      	adds	r0, #4
   82640:	4b08      	ldr	r3, [pc, #32]	; (82664 <vTaskDelay+0x3c>)
   82642:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   82644:	4620      	mov	r0, r4
   82646:	4b08      	ldr	r3, [pc, #32]	; (82668 <vTaskDelay+0x40>)
   82648:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   8264a:	4b08      	ldr	r3, [pc, #32]	; (8266c <vTaskDelay+0x44>)
   8264c:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   8264e:	b908      	cbnz	r0, 82654 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
   82650:	4b07      	ldr	r3, [pc, #28]	; (82670 <vTaskDelay+0x48>)
   82652:	4798      	blx	r3
   82654:	bd10      	pop	{r4, pc}
   82656:	bf00      	nop
   82658:	0008232d 	.word	0x0008232d
   8265c:	20078cac 	.word	0x20078cac
   82660:	20078c90 	.word	0x20078c90
   82664:	00081831 	.word	0x00081831
   82668:	0008205d 	.word	0x0008205d
   8266c:	00082489 	.word	0x00082489
   82670:	000818a9 	.word	0x000818a9

00082674 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   82674:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   82676:	4d15      	ldr	r5, [pc, #84]	; (826cc <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   82678:	4e15      	ldr	r6, [pc, #84]	; (826d0 <prvIdleTask+0x5c>)
			{
				taskYIELD();
   8267a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 826f4 <prvIdleTask+0x80>
   8267e:	e01c      	b.n	826ba <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   82680:	4b14      	ldr	r3, [pc, #80]	; (826d4 <prvIdleTask+0x60>)
   82682:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   82684:	4b14      	ldr	r3, [pc, #80]	; (826d8 <prvIdleTask+0x64>)
   82686:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
   82688:	4b14      	ldr	r3, [pc, #80]	; (826dc <prvIdleTask+0x68>)
   8268a:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   8268c:	b1ac      	cbz	r4, 826ba <prvIdleTask+0x46>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   8268e:	4b14      	ldr	r3, [pc, #80]	; (826e0 <prvIdleTask+0x6c>)
   82690:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   82692:	4b11      	ldr	r3, [pc, #68]	; (826d8 <prvIdleTask+0x64>)
   82694:	68db      	ldr	r3, [r3, #12]
   82696:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   82698:	1d20      	adds	r0, r4, #4
   8269a:	4b12      	ldr	r3, [pc, #72]	; (826e4 <prvIdleTask+0x70>)
   8269c:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   8269e:	4b12      	ldr	r3, [pc, #72]	; (826e8 <prvIdleTask+0x74>)
   826a0:	681a      	ldr	r2, [r3, #0]
   826a2:	3a01      	subs	r2, #1
   826a4:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   826a6:	682b      	ldr	r3, [r5, #0]
   826a8:	3b01      	subs	r3, #1
   826aa:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   826ac:	4b0f      	ldr	r3, [pc, #60]	; (826ec <prvIdleTask+0x78>)
   826ae:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   826b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
   826b2:	4f0f      	ldr	r7, [pc, #60]	; (826f0 <prvIdleTask+0x7c>)
   826b4:	47b8      	blx	r7
		vPortFree( pxTCB );
   826b6:	4620      	mov	r0, r4
   826b8:	47b8      	blx	r7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   826ba:	682b      	ldr	r3, [r5, #0]
   826bc:	2b00      	cmp	r3, #0
   826be:	d1df      	bne.n	82680 <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   826c0:	6833      	ldr	r3, [r6, #0]
   826c2:	2b01      	cmp	r3, #1
   826c4:	d9f9      	bls.n	826ba <prvIdleTask+0x46>
			{
				taskYIELD();
   826c6:	47c0      	blx	r8
   826c8:	e7f7      	b.n	826ba <prvIdleTask+0x46>
   826ca:	bf00      	nop
   826cc:	20078b94 	.word	0x20078b94
   826d0:	20078bc4 	.word	0x20078bc4
   826d4:	0008232d 	.word	0x0008232d
   826d8:	20078b98 	.word	0x20078b98
   826dc:	00082489 	.word	0x00082489
   826e0:	000818c9 	.word	0x000818c9
   826e4:	00081831 	.word	0x00081831
   826e8:	20078cd0 	.word	0x20078cd0
   826ec:	000818e9 	.word	0x000818e9
   826f0:	00081ad9 	.word	0x00081ad9
   826f4:	000818a9 	.word	0x000818a9

000826f8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   826f8:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   826fa:	4b1d      	ldr	r3, [pc, #116]	; (82770 <vTaskSwitchContext+0x78>)
   826fc:	681b      	ldr	r3, [r3, #0]
   826fe:	b95b      	cbnz	r3, 82718 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   82700:	4b1c      	ldr	r3, [pc, #112]	; (82774 <vTaskSwitchContext+0x7c>)
   82702:	681b      	ldr	r3, [r3, #0]
   82704:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82708:	009b      	lsls	r3, r3, #2
   8270a:	4a1b      	ldr	r2, [pc, #108]	; (82778 <vTaskSwitchContext+0x80>)
   8270c:	58d3      	ldr	r3, [r2, r3]
   8270e:	b9cb      	cbnz	r3, 82744 <vTaskSwitchContext+0x4c>
   82710:	4b18      	ldr	r3, [pc, #96]	; (82774 <vTaskSwitchContext+0x7c>)
   82712:	681b      	ldr	r3, [r3, #0]
   82714:	b953      	cbnz	r3, 8272c <vTaskSwitchContext+0x34>
   82716:	e005      	b.n	82724 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   82718:	2201      	movs	r2, #1
   8271a:	4b18      	ldr	r3, [pc, #96]	; (8277c <vTaskSwitchContext+0x84>)
   8271c:	601a      	str	r2, [r3, #0]
   8271e:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   82720:	681a      	ldr	r2, [r3, #0]
   82722:	b92a      	cbnz	r2, 82730 <vTaskSwitchContext+0x38>
   82724:	4b16      	ldr	r3, [pc, #88]	; (82780 <vTaskSwitchContext+0x88>)
   82726:	4798      	blx	r3
   82728:	bf00      	nop
   8272a:	e7fd      	b.n	82728 <vTaskSwitchContext+0x30>
   8272c:	4b11      	ldr	r3, [pc, #68]	; (82774 <vTaskSwitchContext+0x7c>)
   8272e:	4912      	ldr	r1, [pc, #72]	; (82778 <vTaskSwitchContext+0x80>)
   82730:	681a      	ldr	r2, [r3, #0]
   82732:	3a01      	subs	r2, #1
   82734:	601a      	str	r2, [r3, #0]
   82736:	681a      	ldr	r2, [r3, #0]
   82738:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8273c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   82740:	2a00      	cmp	r2, #0
   82742:	d0ed      	beq.n	82720 <vTaskSwitchContext+0x28>
   82744:	4b0b      	ldr	r3, [pc, #44]	; (82774 <vTaskSwitchContext+0x7c>)
   82746:	681b      	ldr	r3, [r3, #0]
   82748:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8274c:	4a0a      	ldr	r2, [pc, #40]	; (82778 <vTaskSwitchContext+0x80>)
   8274e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   82752:	685a      	ldr	r2, [r3, #4]
   82754:	6852      	ldr	r2, [r2, #4]
   82756:	605a      	str	r2, [r3, #4]
   82758:	f103 0108 	add.w	r1, r3, #8
   8275c:	428a      	cmp	r2, r1
   8275e:	bf04      	itt	eq
   82760:	6852      	ldreq	r2, [r2, #4]
   82762:	605a      	streq	r2, [r3, #4]
   82764:	685b      	ldr	r3, [r3, #4]
   82766:	68da      	ldr	r2, [r3, #12]
   82768:	4b06      	ldr	r3, [pc, #24]	; (82784 <vTaskSwitchContext+0x8c>)
   8276a:	601a      	str	r2, [r3, #0]
   8276c:	bd08      	pop	{r3, pc}
   8276e:	bf00      	nop
   82770:	20078c8c 	.word	0x20078c8c
   82774:	20078bc0 	.word	0x20078bc0
   82778:	20078bc4 	.word	0x20078bc4
   8277c:	20078ccc 	.word	0x20078ccc
   82780:	000818b9 	.word	0x000818b9
   82784:	20078c90 	.word	0x20078c90

00082788 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   82788:	b538      	push	{r3, r4, r5, lr}
   8278a:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   8278c:	b918      	cbnz	r0, 82796 <vTaskPlaceOnEventList+0xe>
   8278e:	4b0f      	ldr	r3, [pc, #60]	; (827cc <vTaskPlaceOnEventList+0x44>)
   82790:	4798      	blx	r3
   82792:	bf00      	nop
   82794:	e7fd      	b.n	82792 <vTaskPlaceOnEventList+0xa>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   82796:	4d0e      	ldr	r5, [pc, #56]	; (827d0 <vTaskPlaceOnEventList+0x48>)
   82798:	6829      	ldr	r1, [r5, #0]
   8279a:	3118      	adds	r1, #24
   8279c:	4b0d      	ldr	r3, [pc, #52]	; (827d4 <vTaskPlaceOnEventList+0x4c>)
   8279e:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   827a0:	6828      	ldr	r0, [r5, #0]
   827a2:	3004      	adds	r0, #4
   827a4:	4b0c      	ldr	r3, [pc, #48]	; (827d8 <vTaskPlaceOnEventList+0x50>)
   827a6:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   827a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   827ac:	429c      	cmp	r4, r3
   827ae:	d105      	bne.n	827bc <vTaskPlaceOnEventList+0x34>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   827b0:	6829      	ldr	r1, [r5, #0]
   827b2:	480a      	ldr	r0, [pc, #40]	; (827dc <vTaskPlaceOnEventList+0x54>)
   827b4:	3104      	adds	r1, #4
   827b6:	4b0a      	ldr	r3, [pc, #40]	; (827e0 <vTaskPlaceOnEventList+0x58>)
   827b8:	4798      	blx	r3
   827ba:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   827bc:	4b09      	ldr	r3, [pc, #36]	; (827e4 <vTaskPlaceOnEventList+0x5c>)
   827be:	8818      	ldrh	r0, [r3, #0]
   827c0:	4420      	add	r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   827c2:	b280      	uxth	r0, r0
   827c4:	4b08      	ldr	r3, [pc, #32]	; (827e8 <vTaskPlaceOnEventList+0x60>)
   827c6:	4798      	blx	r3
   827c8:	bd38      	pop	{r3, r4, r5, pc}
   827ca:	bf00      	nop
   827cc:	000818b9 	.word	0x000818b9
   827d0:	20078c90 	.word	0x20078c90
   827d4:	000817ed 	.word	0x000817ed
   827d8:	00081831 	.word	0x00081831
   827dc:	20078b78 	.word	0x20078b78
   827e0:	000817d1 	.word	0x000817d1
   827e4:	20078cac 	.word	0x20078cac
   827e8:	0008205d 	.word	0x0008205d

000827ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   827ec:	b538      	push	{r3, r4, r5, lr}
   827ee:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   827f0:	b918      	cbnz	r0, 827fa <vTaskPlaceOnEventListRestricted+0xe>
   827f2:	4b0a      	ldr	r3, [pc, #40]	; (8281c <vTaskPlaceOnEventListRestricted+0x30>)
   827f4:	4798      	blx	r3
   827f6:	bf00      	nop
   827f8:	e7fd      	b.n	827f6 <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   827fa:	4c09      	ldr	r4, [pc, #36]	; (82820 <vTaskPlaceOnEventListRestricted+0x34>)
   827fc:	6821      	ldr	r1, [r4, #0]
   827fe:	3118      	adds	r1, #24
   82800:	4b08      	ldr	r3, [pc, #32]	; (82824 <vTaskPlaceOnEventListRestricted+0x38>)
   82802:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82804:	6820      	ldr	r0, [r4, #0]
   82806:	3004      	adds	r0, #4
   82808:	4b07      	ldr	r3, [pc, #28]	; (82828 <vTaskPlaceOnEventListRestricted+0x3c>)
   8280a:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   8280c:	4b07      	ldr	r3, [pc, #28]	; (8282c <vTaskPlaceOnEventListRestricted+0x40>)
   8280e:	8818      	ldrh	r0, [r3, #0]
   82810:	4428      	add	r0, r5
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   82812:	b280      	uxth	r0, r0
   82814:	4b06      	ldr	r3, [pc, #24]	; (82830 <vTaskPlaceOnEventListRestricted+0x44>)
   82816:	4798      	blx	r3
   82818:	bd38      	pop	{r3, r4, r5, pc}
   8281a:	bf00      	nop
   8281c:	000818b9 	.word	0x000818b9
   82820:	20078c90 	.word	0x20078c90
   82824:	000817d1 	.word	0x000817d1
   82828:	00081831 	.word	0x00081831
   8282c:	20078cac 	.word	0x20078cac
   82830:	0008205d 	.word	0x0008205d

00082834 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   82834:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   82836:	68c3      	ldr	r3, [r0, #12]
   82838:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8283a:	b91c      	cbnz	r4, 82844 <xTaskRemoveFromEventList+0x10>
   8283c:	4b16      	ldr	r3, [pc, #88]	; (82898 <xTaskRemoveFromEventList+0x64>)
   8283e:	4798      	blx	r3
   82840:	bf00      	nop
   82842:	e7fd      	b.n	82840 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   82844:	f104 0518 	add.w	r5, r4, #24
   82848:	4628      	mov	r0, r5
   8284a:	4b14      	ldr	r3, [pc, #80]	; (8289c <xTaskRemoveFromEventList+0x68>)
   8284c:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8284e:	4b14      	ldr	r3, [pc, #80]	; (828a0 <xTaskRemoveFromEventList+0x6c>)
   82850:	681b      	ldr	r3, [r3, #0]
   82852:	b99b      	cbnz	r3, 8287c <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   82854:	1d25      	adds	r5, r4, #4
   82856:	4628      	mov	r0, r5
   82858:	4b10      	ldr	r3, [pc, #64]	; (8289c <xTaskRemoveFromEventList+0x68>)
   8285a:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   8285c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8285e:	4a11      	ldr	r2, [pc, #68]	; (828a4 <xTaskRemoveFromEventList+0x70>)
   82860:	6812      	ldr	r2, [r2, #0]
   82862:	4293      	cmp	r3, r2
   82864:	bf84      	itt	hi
   82866:	4a0f      	ldrhi	r2, [pc, #60]	; (828a4 <xTaskRemoveFromEventList+0x70>)
   82868:	6013      	strhi	r3, [r2, #0]
   8286a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8286e:	480e      	ldr	r0, [pc, #56]	; (828a8 <xTaskRemoveFromEventList+0x74>)
   82870:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   82874:	4629      	mov	r1, r5
   82876:	4b0d      	ldr	r3, [pc, #52]	; (828ac <xTaskRemoveFromEventList+0x78>)
   82878:	4798      	blx	r3
   8287a:	e003      	b.n	82884 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   8287c:	480c      	ldr	r0, [pc, #48]	; (828b0 <xTaskRemoveFromEventList+0x7c>)
   8287e:	4629      	mov	r1, r5
   82880:	4b0a      	ldr	r3, [pc, #40]	; (828ac <xTaskRemoveFromEventList+0x78>)
   82882:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82884:	4b0b      	ldr	r3, [pc, #44]	; (828b4 <xTaskRemoveFromEventList+0x80>)
   82886:	681b      	ldr	r3, [r3, #0]
   82888:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   8288c:	4298      	cmp	r0, r3
   8288e:	bf34      	ite	cc
   82890:	2000      	movcc	r0, #0
   82892:	2001      	movcs	r0, #1
   82894:	bd38      	pop	{r3, r4, r5, pc}
   82896:	bf00      	nop
   82898:	000818b9 	.word	0x000818b9
   8289c:	00081831 	.word	0x00081831
   828a0:	20078c8c 	.word	0x20078c8c
   828a4:	20078bc0 	.word	0x20078bc0
   828a8:	20078bc4 	.word	0x20078bc4
   828ac:	000817d1 	.word	0x000817d1
   828b0:	20078c94 	.word	0x20078c94
   828b4:	20078c90 	.word	0x20078c90

000828b8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   828b8:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   828ba:	b918      	cbnz	r0, 828c4 <vTaskSetTimeOutState+0xc>
   828bc:	4b05      	ldr	r3, [pc, #20]	; (828d4 <vTaskSetTimeOutState+0x1c>)
   828be:	4798      	blx	r3
   828c0:	bf00      	nop
   828c2:	e7fd      	b.n	828c0 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   828c4:	4a04      	ldr	r2, [pc, #16]	; (828d8 <vTaskSetTimeOutState+0x20>)
   828c6:	6812      	ldr	r2, [r2, #0]
   828c8:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   828ca:	4a04      	ldr	r2, [pc, #16]	; (828dc <vTaskSetTimeOutState+0x24>)
   828cc:	8812      	ldrh	r2, [r2, #0]
   828ce:	8082      	strh	r2, [r0, #4]
   828d0:	bd08      	pop	{r3, pc}
   828d2:	bf00      	nop
   828d4:	000818b9 	.word	0x000818b9
   828d8:	20078ca8 	.word	0x20078ca8
   828dc:	20078cac 	.word	0x20078cac

000828e0 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   828e0:	b538      	push	{r3, r4, r5, lr}
   828e2:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   828e4:	4604      	mov	r4, r0
   828e6:	b918      	cbnz	r0, 828f0 <xTaskCheckForTimeOut+0x10>
   828e8:	4b1a      	ldr	r3, [pc, #104]	; (82954 <xTaskCheckForTimeOut+0x74>)
   828ea:	4798      	blx	r3
   828ec:	bf00      	nop
   828ee:	e7fd      	b.n	828ec <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
   828f0:	b919      	cbnz	r1, 828fa <xTaskCheckForTimeOut+0x1a>
   828f2:	4b18      	ldr	r3, [pc, #96]	; (82954 <xTaskCheckForTimeOut+0x74>)
   828f4:	4798      	blx	r3
   828f6:	bf00      	nop
   828f8:	e7fd      	b.n	828f6 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   828fa:	4b17      	ldr	r3, [pc, #92]	; (82958 <xTaskCheckForTimeOut+0x78>)
   828fc:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   828fe:	882b      	ldrh	r3, [r5, #0]
   82900:	f64f 72ff 	movw	r2, #65535	; 0xffff
   82904:	4293      	cmp	r3, r2
   82906:	d01c      	beq.n	82942 <xTaskCheckForTimeOut+0x62>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   82908:	4a14      	ldr	r2, [pc, #80]	; (8295c <xTaskCheckForTimeOut+0x7c>)
   8290a:	6811      	ldr	r1, [r2, #0]
   8290c:	6822      	ldr	r2, [r4, #0]
   8290e:	428a      	cmp	r2, r1
   82910:	d005      	beq.n	8291e <xTaskCheckForTimeOut+0x3e>
   82912:	4a13      	ldr	r2, [pc, #76]	; (82960 <xTaskCheckForTimeOut+0x80>)
   82914:	8812      	ldrh	r2, [r2, #0]
   82916:	b292      	uxth	r2, r2
   82918:	88a1      	ldrh	r1, [r4, #4]
   8291a:	4291      	cmp	r1, r2
   8291c:	d913      	bls.n	82946 <xTaskCheckForTimeOut+0x66>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   8291e:	4a10      	ldr	r2, [pc, #64]	; (82960 <xTaskCheckForTimeOut+0x80>)
   82920:	8811      	ldrh	r1, [r2, #0]
   82922:	88a2      	ldrh	r2, [r4, #4]
   82924:	1a89      	subs	r1, r1, r2
   82926:	b289      	uxth	r1, r1
   82928:	428b      	cmp	r3, r1
   8292a:	d90e      	bls.n	8294a <xTaskCheckForTimeOut+0x6a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   8292c:	490c      	ldr	r1, [pc, #48]	; (82960 <xTaskCheckForTimeOut+0x80>)
   8292e:	8809      	ldrh	r1, [r1, #0]
   82930:	b289      	uxth	r1, r1
   82932:	1a52      	subs	r2, r2, r1
   82934:	4413      	add	r3, r2
   82936:	802b      	strh	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   82938:	4620      	mov	r0, r4
   8293a:	4b0a      	ldr	r3, [pc, #40]	; (82964 <xTaskCheckForTimeOut+0x84>)
   8293c:	4798      	blx	r3
			xReturn = pdFALSE;
   8293e:	2400      	movs	r4, #0
   82940:	e004      	b.n	8294c <xTaskCheckForTimeOut+0x6c>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   82942:	2400      	movs	r4, #0
   82944:	e002      	b.n	8294c <xTaskCheckForTimeOut+0x6c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   82946:	2401      	movs	r4, #1
   82948:	e000      	b.n	8294c <xTaskCheckForTimeOut+0x6c>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   8294a:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   8294c:	4b06      	ldr	r3, [pc, #24]	; (82968 <xTaskCheckForTimeOut+0x88>)
   8294e:	4798      	blx	r3

	return xReturn;
}
   82950:	4620      	mov	r0, r4
   82952:	bd38      	pop	{r3, r4, r5, pc}
   82954:	000818b9 	.word	0x000818b9
   82958:	000818c9 	.word	0x000818c9
   8295c:	20078ca8 	.word	0x20078ca8
   82960:	20078cac 	.word	0x20078cac
   82964:	000828b9 	.word	0x000828b9
   82968:	000818e9 	.word	0x000818e9

0008296c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   8296c:	2201      	movs	r2, #1
   8296e:	4b01      	ldr	r3, [pc, #4]	; (82974 <vTaskMissedYield+0x8>)
   82970:	601a      	str	r2, [r3, #0]
   82972:	4770      	bx	lr
   82974:	20078ccc 	.word	0x20078ccc

00082978 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   82978:	4b01      	ldr	r3, [pc, #4]	; (82980 <xTaskGetCurrentTaskHandle+0x8>)
   8297a:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   8297c:	4770      	bx	lr
   8297e:	bf00      	nop
   82980:	20078c90 	.word	0x20078c90

00082984 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   82984:	4b05      	ldr	r3, [pc, #20]	; (8299c <xTaskGetSchedulerState+0x18>)
   82986:	681b      	ldr	r3, [r3, #0]
   82988:	b133      	cbz	r3, 82998 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8298a:	4b05      	ldr	r3, [pc, #20]	; (829a0 <xTaskGetSchedulerState+0x1c>)
   8298c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   8298e:	2b00      	cmp	r3, #0
   82990:	bf14      	ite	ne
   82992:	2002      	movne	r0, #2
   82994:	2001      	moveq	r0, #1
   82996:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   82998:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   8299a:	4770      	bx	lr
   8299c:	20078b90 	.word	0x20078b90
   829a0:	20078c8c 	.word	0x20078c8c

000829a4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   829a4:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   829a6:	4604      	mov	r4, r0
   829a8:	2800      	cmp	r0, #0
   829aa:	d02e      	beq.n	82a0a <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   829ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   829ae:	4a17      	ldr	r2, [pc, #92]	; (82a0c <vTaskPriorityInherit+0x68>)
   829b0:	6812      	ldr	r2, [r2, #0]
   829b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   829b4:	4293      	cmp	r3, r2
   829b6:	d228      	bcs.n	82a0a <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   829b8:	4a14      	ldr	r2, [pc, #80]	; (82a0c <vTaskPriorityInherit+0x68>)
   829ba:	6812      	ldr	r2, [r2, #0]
   829bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   829be:	f1c2 020a 	rsb	r2, r2, #10
   829c2:	8302      	strh	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   829c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   829c8:	4a11      	ldr	r2, [pc, #68]	; (82a10 <vTaskPriorityInherit+0x6c>)
   829ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   829ce:	6942      	ldr	r2, [r0, #20]
   829d0:	429a      	cmp	r2, r3
   829d2:	d116      	bne.n	82a02 <vTaskPriorityInherit+0x5e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   829d4:	1d05      	adds	r5, r0, #4
   829d6:	4628      	mov	r0, r5
   829d8:	4b0e      	ldr	r3, [pc, #56]	; (82a14 <vTaskPriorityInherit+0x70>)
   829da:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   829dc:	4b0b      	ldr	r3, [pc, #44]	; (82a0c <vTaskPriorityInherit+0x68>)
   829de:	681b      	ldr	r3, [r3, #0]
   829e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   829e2:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   829e4:	4a0c      	ldr	r2, [pc, #48]	; (82a18 <vTaskPriorityInherit+0x74>)
   829e6:	6812      	ldr	r2, [r2, #0]
   829e8:	4293      	cmp	r3, r2
   829ea:	bf84      	itt	hi
   829ec:	4a0a      	ldrhi	r2, [pc, #40]	; (82a18 <vTaskPriorityInherit+0x74>)
   829ee:	6013      	strhi	r3, [r2, #0]
   829f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   829f4:	4806      	ldr	r0, [pc, #24]	; (82a10 <vTaskPriorityInherit+0x6c>)
   829f6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   829fa:	4629      	mov	r1, r5
   829fc:	4b07      	ldr	r3, [pc, #28]	; (82a1c <vTaskPriorityInherit+0x78>)
   829fe:	4798      	blx	r3
   82a00:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82a02:	4b02      	ldr	r3, [pc, #8]	; (82a0c <vTaskPriorityInherit+0x68>)
   82a04:	681b      	ldr	r3, [r3, #0]
   82a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82a08:	62c3      	str	r3, [r0, #44]	; 0x2c
   82a0a:	bd38      	pop	{r3, r4, r5, pc}
   82a0c:	20078c90 	.word	0x20078c90
   82a10:	20078bc4 	.word	0x20078bc4
   82a14:	00081831 	.word	0x00081831
   82a18:	20078bc0 	.word	0x20078bc0
   82a1c:	000817d1 	.word	0x000817d1

00082a20 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   82a20:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   82a22:	4604      	mov	r4, r0
   82a24:	b1d0      	cbz	r0, 82a5c <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   82a26:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   82a28:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   82a2a:	429a      	cmp	r2, r3
   82a2c:	d016      	beq.n	82a5c <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82a2e:	1d05      	adds	r5, r0, #4
   82a30:	4628      	mov	r0, r5
   82a32:	4b0b      	ldr	r3, [pc, #44]	; (82a60 <vTaskPriorityDisinherit+0x40>)
   82a34:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   82a36:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   82a38:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   82a3a:	f1c3 020a 	rsb	r2, r3, #10
   82a3e:	8322      	strh	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   82a40:	4a08      	ldr	r2, [pc, #32]	; (82a64 <vTaskPriorityDisinherit+0x44>)
   82a42:	6812      	ldr	r2, [r2, #0]
   82a44:	4293      	cmp	r3, r2
   82a46:	bf84      	itt	hi
   82a48:	4a06      	ldrhi	r2, [pc, #24]	; (82a64 <vTaskPriorityDisinherit+0x44>)
   82a4a:	6013      	strhi	r3, [r2, #0]
   82a4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82a50:	4805      	ldr	r0, [pc, #20]	; (82a68 <vTaskPriorityDisinherit+0x48>)
   82a52:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   82a56:	4629      	mov	r1, r5
   82a58:	4b04      	ldr	r3, [pc, #16]	; (82a6c <vTaskPriorityDisinherit+0x4c>)
   82a5a:	4798      	blx	r3
   82a5c:	bd38      	pop	{r3, r4, r5, pc}
   82a5e:	bf00      	nop
   82a60:	00081831 	.word	0x00081831
   82a64:	20078bc0 	.word	0x20078bc0
   82a68:	20078bc4 	.word	0x20078bc4
   82a6c:	000817d1 	.word	0x000817d1

00082a70 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   82a70:	b510      	push	{r4, lr}
   82a72:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   82a74:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82a76:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   82a78:	4291      	cmp	r1, r2
   82a7a:	d80b      	bhi.n	82a94 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   82a7c:	1ad3      	subs	r3, r2, r3
   82a7e:	8b01      	ldrh	r1, [r0, #24]
   82a80:	b29b      	uxth	r3, r3
   82a82:	4299      	cmp	r1, r3
   82a84:	d911      	bls.n	82aaa <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   82a86:	4b0b      	ldr	r3, [pc, #44]	; (82ab4 <prvInsertTimerInActiveList+0x44>)
   82a88:	6818      	ldr	r0, [r3, #0]
   82a8a:	1d21      	adds	r1, r4, #4
   82a8c:	4b0a      	ldr	r3, [pc, #40]	; (82ab8 <prvInsertTimerInActiveList+0x48>)
   82a8e:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   82a90:	2000      	movs	r0, #0
   82a92:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   82a94:	429a      	cmp	r2, r3
   82a96:	d201      	bcs.n	82a9c <prvInsertTimerInActiveList+0x2c>
   82a98:	4299      	cmp	r1, r3
   82a9a:	d208      	bcs.n	82aae <prvInsertTimerInActiveList+0x3e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82a9c:	4b07      	ldr	r3, [pc, #28]	; (82abc <prvInsertTimerInActiveList+0x4c>)
   82a9e:	6818      	ldr	r0, [r3, #0]
   82aa0:	1d21      	adds	r1, r4, #4
   82aa2:	4b05      	ldr	r3, [pc, #20]	; (82ab8 <prvInsertTimerInActiveList+0x48>)
   82aa4:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   82aa6:	2000      	movs	r0, #0
   82aa8:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   82aaa:	2001      	movs	r0, #1
   82aac:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   82aae:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   82ab0:	bd10      	pop	{r4, pc}
   82ab2:	bf00      	nop
   82ab4:	20078d0c 	.word	0x20078d0c
   82ab8:	000817ed 	.word	0x000817ed
   82abc:	20078cd8 	.word	0x20078cd8

00082ac0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   82ac0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   82ac2:	4b0d      	ldr	r3, [pc, #52]	; (82af8 <prvCheckForValidListAndQueue+0x38>)
   82ac4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   82ac6:	4b0d      	ldr	r3, [pc, #52]	; (82afc <prvCheckForValidListAndQueue+0x3c>)
   82ac8:	681b      	ldr	r3, [r3, #0]
   82aca:	b98b      	cbnz	r3, 82af0 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   82acc:	4d0c      	ldr	r5, [pc, #48]	; (82b00 <prvCheckForValidListAndQueue+0x40>)
   82ace:	4628      	mov	r0, r5
   82ad0:	4e0c      	ldr	r6, [pc, #48]	; (82b04 <prvCheckForValidListAndQueue+0x44>)
   82ad2:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   82ad4:	4c0c      	ldr	r4, [pc, #48]	; (82b08 <prvCheckForValidListAndQueue+0x48>)
   82ad6:	4620      	mov	r0, r4
   82ad8:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   82ada:	4b0c      	ldr	r3, [pc, #48]	; (82b0c <prvCheckForValidListAndQueue+0x4c>)
   82adc:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   82ade:	4b0c      	ldr	r3, [pc, #48]	; (82b10 <prvCheckForValidListAndQueue+0x50>)
   82ae0:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   82ae2:	2005      	movs	r0, #5
   82ae4:	210c      	movs	r1, #12
   82ae6:	2200      	movs	r2, #0
   82ae8:	4b0a      	ldr	r3, [pc, #40]	; (82b14 <prvCheckForValidListAndQueue+0x54>)
   82aea:	4798      	blx	r3
   82aec:	4b03      	ldr	r3, [pc, #12]	; (82afc <prvCheckForValidListAndQueue+0x3c>)
   82aee:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   82af0:	4b09      	ldr	r3, [pc, #36]	; (82b18 <prvCheckForValidListAndQueue+0x58>)
   82af2:	4798      	blx	r3
   82af4:	bd70      	pop	{r4, r5, r6, pc}
   82af6:	bf00      	nop
   82af8:	000818c9 	.word	0x000818c9
   82afc:	20078d08 	.word	0x20078d08
   82b00:	20078cdc 	.word	0x20078cdc
   82b04:	000817b1 	.word	0x000817b1
   82b08:	20078cf0 	.word	0x20078cf0
   82b0c:	20078cd8 	.word	0x20078cd8
   82b10:	20078d0c 	.word	0x20078d0c
   82b14:	00081ca1 	.word	0x00081ca1
   82b18:	000818e9 	.word	0x000818e9

00082b1c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   82b1c:	b510      	push	{r4, lr}
   82b1e:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   82b20:	4b0b      	ldr	r3, [pc, #44]	; (82b50 <xTimerCreateTimerTask+0x34>)
   82b22:	4798      	blx	r3

	if( xTimerQueue != NULL )
   82b24:	4b0b      	ldr	r3, [pc, #44]	; (82b54 <xTimerCreateTimerTask+0x38>)
   82b26:	681b      	ldr	r3, [r3, #0]
   82b28:	b163      	cbz	r3, 82b44 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   82b2a:	2309      	movs	r3, #9
   82b2c:	9300      	str	r3, [sp, #0]
   82b2e:	2300      	movs	r3, #0
   82b30:	9301      	str	r3, [sp, #4]
   82b32:	9302      	str	r3, [sp, #8]
   82b34:	9303      	str	r3, [sp, #12]
   82b36:	4808      	ldr	r0, [pc, #32]	; (82b58 <xTimerCreateTimerTask+0x3c>)
   82b38:	4908      	ldr	r1, [pc, #32]	; (82b5c <xTimerCreateTimerTask+0x40>)
   82b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
   82b3e:	4c08      	ldr	r4, [pc, #32]	; (82b60 <xTimerCreateTimerTask+0x44>)
   82b40:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   82b42:	b918      	cbnz	r0, 82b4c <xTimerCreateTimerTask+0x30>
   82b44:	4b07      	ldr	r3, [pc, #28]	; (82b64 <xTimerCreateTimerTask+0x48>)
   82b46:	4798      	blx	r3
   82b48:	bf00      	nop
   82b4a:	e7fd      	b.n	82b48 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   82b4c:	b004      	add	sp, #16
   82b4e:	bd10      	pop	{r4, pc}
   82b50:	00082ac1 	.word	0x00082ac1
   82b54:	20078d08 	.word	0x20078d08
   82b58:	00082c7d 	.word	0x00082c7d
   82b5c:	0008a704 	.word	0x0008a704
   82b60:	000820b9 	.word	0x000820b9
   82b64:	000818b9 	.word	0x000818b9

00082b68 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   82b68:	b510      	push	{r4, lr}
   82b6a:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   82b6c:	4c10      	ldr	r4, [pc, #64]	; (82bb0 <xTimerGenericCommand+0x48>)
   82b6e:	6824      	ldr	r4, [r4, #0]
   82b70:	b1d4      	cbz	r4, 82ba8 <xTimerGenericCommand+0x40>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   82b72:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   82b74:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   82b78:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   82b7a:	b973      	cbnz	r3, 82b9a <xTimerGenericCommand+0x32>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   82b7c:	4b0d      	ldr	r3, [pc, #52]	; (82bb4 <xTimerGenericCommand+0x4c>)
   82b7e:	4798      	blx	r3
   82b80:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   82b82:	4b0b      	ldr	r3, [pc, #44]	; (82bb0 <xTimerGenericCommand+0x48>)
   82b84:	6818      	ldr	r0, [r3, #0]
   82b86:	a901      	add	r1, sp, #4
   82b88:	bf07      	ittee	eq
   82b8a:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
   82b8e:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   82b90:	2200      	movne	r2, #0
   82b92:	4613      	movne	r3, r2
   82b94:	4c08      	ldr	r4, [pc, #32]	; (82bb8 <xTimerGenericCommand+0x50>)
   82b96:	47a0      	blx	r4
   82b98:	e007      	b.n	82baa <xTimerGenericCommand+0x42>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   82b9a:	4620      	mov	r0, r4
   82b9c:	a901      	add	r1, sp, #4
   82b9e:	461a      	mov	r2, r3
   82ba0:	2300      	movs	r3, #0
   82ba2:	4c06      	ldr	r4, [pc, #24]	; (82bbc <xTimerGenericCommand+0x54>)
   82ba4:	47a0      	blx	r4
   82ba6:	e000      	b.n	82baa <xTimerGenericCommand+0x42>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   82ba8:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   82baa:	b004      	add	sp, #16
   82bac:	bd10      	pop	{r4, pc}
   82bae:	bf00      	nop
   82bb0:	20078d08 	.word	0x20078d08
   82bb4:	00082985 	.word	0x00082985
   82bb8:	00081cf9 	.word	0x00081cf9
   82bbc:	00081e1d 	.word	0x00081e1d

00082bc0 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   82bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82bc4:	b082      	sub	sp, #8
   82bc6:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   82bc8:	4b24      	ldr	r3, [pc, #144]	; (82c5c <prvSampleTimeNow+0x9c>)
   82bca:	4798      	blx	r3
   82bcc:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   82bce:	4b24      	ldr	r3, [pc, #144]	; (82c60 <prvSampleTimeNow+0xa0>)
   82bd0:	881b      	ldrh	r3, [r3, #0]
   82bd2:	4283      	cmp	r3, r0
   82bd4:	d937      	bls.n	82c46 <prvSampleTimeNow+0x86>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82bd6:	4e23      	ldr	r6, [pc, #140]	; (82c64 <prvSampleTimeNow+0xa4>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82bd8:	4f23      	ldr	r7, [pc, #140]	; (82c68 <prvSampleTimeNow+0xa8>)
   82bda:	e027      	b.n	82c2c <prvSampleTimeNow+0x6c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82bdc:	68da      	ldr	r2, [r3, #12]
   82bde:	f8b2 a000 	ldrh.w	sl, [r2]
   82be2:	fa1f fa8a 	uxth.w	sl, sl

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82be6:	68db      	ldr	r3, [r3, #12]
   82be8:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82bea:	1d25      	adds	r5, r4, #4
   82bec:	4628      	mov	r0, r5
   82bee:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82bf2:	4620      	mov	r0, r4
   82bf4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82bf6:	69e3      	ldr	r3, [r4, #28]
   82bf8:	2b01      	cmp	r3, #1
   82bfa:	d117      	bne.n	82c2c <prvSampleTimeNow+0x6c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   82bfc:	8b23      	ldrh	r3, [r4, #24]
   82bfe:	4453      	add	r3, sl
   82c00:	b29b      	uxth	r3, r3
			if( xReloadTime > xNextExpireTime )
   82c02:	4553      	cmp	r3, sl
   82c04:	d906      	bls.n	82c14 <prvSampleTimeNow+0x54>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   82c06:	80a3      	strh	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82c08:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82c0a:	6830      	ldr	r0, [r6, #0]
   82c0c:	4629      	mov	r1, r5
   82c0e:	4b17      	ldr	r3, [pc, #92]	; (82c6c <prvSampleTimeNow+0xac>)
   82c10:	4798      	blx	r3
   82c12:	e00b      	b.n	82c2c <prvSampleTimeNow+0x6c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82c14:	2300      	movs	r3, #0
   82c16:	9300      	str	r3, [sp, #0]
   82c18:	4620      	mov	r0, r4
   82c1a:	4619      	mov	r1, r3
   82c1c:	4652      	mov	r2, sl
   82c1e:	4c14      	ldr	r4, [pc, #80]	; (82c70 <prvSampleTimeNow+0xb0>)
   82c20:	47a0      	blx	r4
				configASSERT( xResult );
   82c22:	b918      	cbnz	r0, 82c2c <prvSampleTimeNow+0x6c>
   82c24:	4b13      	ldr	r3, [pc, #76]	; (82c74 <prvSampleTimeNow+0xb4>)
   82c26:	4798      	blx	r3
   82c28:	bf00      	nop
   82c2a:	e7fd      	b.n	82c28 <prvSampleTimeNow+0x68>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82c2c:	6833      	ldr	r3, [r6, #0]
   82c2e:	681a      	ldr	r2, [r3, #0]
   82c30:	2a00      	cmp	r2, #0
   82c32:	d1d3      	bne.n	82bdc <prvSampleTimeNow+0x1c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   82c34:	4a10      	ldr	r2, [pc, #64]	; (82c78 <prvSampleTimeNow+0xb8>)
   82c36:	6811      	ldr	r1, [r2, #0]
   82c38:	480a      	ldr	r0, [pc, #40]	; (82c64 <prvSampleTimeNow+0xa4>)
   82c3a:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   82c3c:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   82c3e:	2301      	movs	r3, #1
   82c40:	f8c9 3000 	str.w	r3, [r9]
   82c44:	e002      	b.n	82c4c <prvSampleTimeNow+0x8c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   82c46:	2300      	movs	r3, #0
   82c48:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   82c4c:	4b04      	ldr	r3, [pc, #16]	; (82c60 <prvSampleTimeNow+0xa0>)
   82c4e:	f8a3 8000 	strh.w	r8, [r3]

	return xTimeNow;
}
   82c52:	4640      	mov	r0, r8
   82c54:	b002      	add	sp, #8
   82c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82c5a:	bf00      	nop
   82c5c:	0008233d 	.word	0x0008233d
   82c60:	20078d04 	.word	0x20078d04
   82c64:	20078cd8 	.word	0x20078cd8
   82c68:	00081831 	.word	0x00081831
   82c6c:	000817ed 	.word	0x000817ed
   82c70:	00082b69 	.word	0x00082b69
   82c74:	000818b9 	.word	0x000818b9
   82c78:	20078d0c 	.word	0x20078d0c

00082c7c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   82c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82c80:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   82c82:	4d51      	ldr	r5, [pc, #324]	; (82dc8 <prvTimerTask+0x14c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   82c84:	f8df 8170 	ldr.w	r8, [pc, #368]	; 82df8 <prvTimerTask+0x17c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   82c88:	4b50      	ldr	r3, [pc, #320]	; (82dcc <prvTimerTask+0x150>)
   82c8a:	681b      	ldr	r3, [r3, #0]
   82c8c:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   82c8e:	2a00      	cmp	r2, #0
   82c90:	f000 8090 	beq.w	82db4 <prvTimerTask+0x138>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82c94:	68db      	ldr	r3, [r3, #12]
   82c96:	881e      	ldrh	r6, [r3, #0]
   82c98:	b2b6      	uxth	r6, r6
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82c9a:	4b4d      	ldr	r3, [pc, #308]	; (82dd0 <prvTimerTask+0x154>)
   82c9c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82c9e:	a803      	add	r0, sp, #12
   82ca0:	4b4c      	ldr	r3, [pc, #304]	; (82dd4 <prvTimerTask+0x158>)
   82ca2:	4798      	blx	r3
   82ca4:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82ca6:	9b03      	ldr	r3, [sp, #12]
   82ca8:	2b00      	cmp	r3, #0
   82caa:	d132      	bne.n	82d12 <prvTimerTask+0x96>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   82cac:	4286      	cmp	r6, r0
   82cae:	d825      	bhi.n	82cfc <prvTimerTask+0x80>
			{
				xTaskResumeAll();
   82cb0:	4b49      	ldr	r3, [pc, #292]	; (82dd8 <prvTimerTask+0x15c>)
   82cb2:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82cb4:	4b45      	ldr	r3, [pc, #276]	; (82dcc <prvTimerTask+0x150>)
   82cb6:	681b      	ldr	r3, [r3, #0]
   82cb8:	68db      	ldr	r3, [r3, #12]
   82cba:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   82cbc:	1d20      	adds	r0, r4, #4
   82cbe:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82cc0:	69e3      	ldr	r3, [r4, #28]
   82cc2:	2b01      	cmp	r3, #1
   82cc4:	d115      	bne.n	82cf2 <prvTimerTask+0x76>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   82cc6:	8b21      	ldrh	r1, [r4, #24]
   82cc8:	4431      	add	r1, r6
   82cca:	4620      	mov	r0, r4
   82ccc:	b289      	uxth	r1, r1
   82cce:	463a      	mov	r2, r7
   82cd0:	4633      	mov	r3, r6
   82cd2:	4f42      	ldr	r7, [pc, #264]	; (82ddc <prvTimerTask+0x160>)
   82cd4:	47b8      	blx	r7
   82cd6:	2801      	cmp	r0, #1
   82cd8:	d10b      	bne.n	82cf2 <prvTimerTask+0x76>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82cda:	2300      	movs	r3, #0
   82cdc:	9300      	str	r3, [sp, #0]
   82cde:	4620      	mov	r0, r4
   82ce0:	4619      	mov	r1, r3
   82ce2:	4632      	mov	r2, r6
   82ce4:	4e3e      	ldr	r6, [pc, #248]	; (82de0 <prvTimerTask+0x164>)
   82ce6:	47b0      	blx	r6
			configASSERT( xResult );
   82ce8:	b918      	cbnz	r0, 82cf2 <prvTimerTask+0x76>
   82cea:	4b3e      	ldr	r3, [pc, #248]	; (82de4 <prvTimerTask+0x168>)
   82cec:	4798      	blx	r3
   82cee:	bf00      	nop
   82cf0:	e7fd      	b.n	82cee <prvTimerTask+0x72>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82cf4:	4620      	mov	r0, r4
   82cf6:	4798      	blx	r3
   82cf8:	e00d      	b.n	82d16 <prvTimerTask+0x9a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   82cfa:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   82cfc:	1bf1      	subs	r1, r6, r7
   82cfe:	6828      	ldr	r0, [r5, #0]
   82d00:	b289      	uxth	r1, r1
   82d02:	4b39      	ldr	r3, [pc, #228]	; (82de8 <prvTimerTask+0x16c>)
   82d04:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   82d06:	4b34      	ldr	r3, [pc, #208]	; (82dd8 <prvTimerTask+0x15c>)
   82d08:	4798      	blx	r3
   82d0a:	b920      	cbnz	r0, 82d16 <prvTimerTask+0x9a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   82d0c:	4b37      	ldr	r3, [pc, #220]	; (82dec <prvTimerTask+0x170>)
   82d0e:	4798      	blx	r3
   82d10:	e001      	b.n	82d16 <prvTimerTask+0x9a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   82d12:	4b31      	ldr	r3, [pc, #196]	; (82dd8 <prvTimerTask+0x15c>)
   82d14:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82d16:	a802      	add	r0, sp, #8
   82d18:	4b2e      	ldr	r3, [pc, #184]	; (82dd4 <prvTimerTask+0x158>)
   82d1a:	4798      	blx	r3
   82d1c:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82d1e:	4e34      	ldr	r6, [pc, #208]	; (82df0 <prvTimerTask+0x174>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82d20:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 82ddc <prvTimerTask+0x160>
   82d24:	e03e      	b.n	82da4 <prvTimerTask+0x128>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   82d26:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   82d28:	b11c      	cbz	r4, 82d32 <prvTimerTask+0xb6>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   82d2a:	6961      	ldr	r1, [r4, #20]
   82d2c:	b109      	cbz	r1, 82d32 <prvTimerTask+0xb6>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   82d2e:	1d20      	adds	r0, r4, #4
   82d30:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   82d32:	9903      	ldr	r1, [sp, #12]
   82d34:	2902      	cmp	r1, #2
   82d36:	d023      	beq.n	82d80 <prvTimerTask+0x104>
   82d38:	2903      	cmp	r1, #3
   82d3a:	d030      	beq.n	82d9e <prvTimerTask+0x122>
   82d3c:	2900      	cmp	r1, #0
   82d3e:	d131      	bne.n	82da4 <prvTimerTask+0x128>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   82d40:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   82d44:	8b21      	ldrh	r1, [r4, #24]
   82d46:	4419      	add	r1, r3
   82d48:	4620      	mov	r0, r4
   82d4a:	b289      	uxth	r1, r1
   82d4c:	463a      	mov	r2, r7
   82d4e:	47c8      	blx	r9
   82d50:	2801      	cmp	r0, #1
   82d52:	d127      	bne.n	82da4 <prvTimerTask+0x128>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82d56:	4620      	mov	r0, r4
   82d58:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82d5a:	69e3      	ldr	r3, [r4, #28]
   82d5c:	2b01      	cmp	r3, #1
   82d5e:	d121      	bne.n	82da4 <prvTimerTask+0x128>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   82d60:	8b22      	ldrh	r2, [r4, #24]
   82d62:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   82d66:	441a      	add	r2, r3
   82d68:	2300      	movs	r3, #0
   82d6a:	9300      	str	r3, [sp, #0]
   82d6c:	4620      	mov	r0, r4
   82d6e:	4619      	mov	r1, r3
   82d70:	b292      	uxth	r2, r2
   82d72:	4c1b      	ldr	r4, [pc, #108]	; (82de0 <prvTimerTask+0x164>)
   82d74:	47a0      	blx	r4
						configASSERT( xResult );
   82d76:	b9a8      	cbnz	r0, 82da4 <prvTimerTask+0x128>
   82d78:	4b1a      	ldr	r3, [pc, #104]	; (82de4 <prvTimerTask+0x168>)
   82d7a:	4798      	blx	r3
   82d7c:	bf00      	nop
   82d7e:	e7fd      	b.n	82d7c <prvTimerTask+0x100>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   82d80:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   82d84:	8323      	strh	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   82d86:	b91b      	cbnz	r3, 82d90 <prvTimerTask+0x114>
   82d88:	4b16      	ldr	r3, [pc, #88]	; (82de4 <prvTimerTask+0x168>)
   82d8a:	4798      	blx	r3
   82d8c:	bf00      	nop
   82d8e:	e7fd      	b.n	82d8c <prvTimerTask+0x110>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82d90:	18f9      	adds	r1, r7, r3
   82d92:	4620      	mov	r0, r4
   82d94:	b289      	uxth	r1, r1
   82d96:	463a      	mov	r2, r7
   82d98:	463b      	mov	r3, r7
   82d9a:	47c8      	blx	r9
   82d9c:	e002      	b.n	82da4 <prvTimerTask+0x128>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   82d9e:	4620      	mov	r0, r4
   82da0:	4b14      	ldr	r3, [pc, #80]	; (82df4 <prvTimerTask+0x178>)
   82da2:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82da4:	6828      	ldr	r0, [r5, #0]
   82da6:	a903      	add	r1, sp, #12
   82da8:	2200      	movs	r2, #0
   82daa:	4613      	mov	r3, r2
   82dac:	47b0      	blx	r6
   82dae:	2800      	cmp	r0, #0
   82db0:	d1b9      	bne.n	82d26 <prvTimerTask+0xaa>
   82db2:	e769      	b.n	82c88 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82db4:	4b06      	ldr	r3, [pc, #24]	; (82dd0 <prvTimerTask+0x154>)
   82db6:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82db8:	a803      	add	r0, sp, #12
   82dba:	4b06      	ldr	r3, [pc, #24]	; (82dd4 <prvTimerTask+0x158>)
   82dbc:	4798      	blx	r3
   82dbe:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82dc0:	9b03      	ldr	r3, [sp, #12]
   82dc2:	2b00      	cmp	r3, #0
   82dc4:	d099      	beq.n	82cfa <prvTimerTask+0x7e>
   82dc6:	e7a4      	b.n	82d12 <prvTimerTask+0x96>
   82dc8:	20078d08 	.word	0x20078d08
   82dcc:	20078cd8 	.word	0x20078cd8
   82dd0:	0008232d 	.word	0x0008232d
   82dd4:	00082bc1 	.word	0x00082bc1
   82dd8:	00082489 	.word	0x00082489
   82ddc:	00082a71 	.word	0x00082a71
   82de0:	00082b69 	.word	0x00082b69
   82de4:	000818b9 	.word	0x000818b9
   82de8:	00082011 	.word	0x00082011
   82dec:	000818a9 	.word	0x000818a9
   82df0:	00081ead 	.word	0x00081ead
   82df4:	00081ad9 	.word	0x00081ad9
   82df8:	00081831 	.word	0x00081831

00082dfc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82dfc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82dfe:	480e      	ldr	r0, [pc, #56]	; (82e38 <sysclk_init+0x3c>)
   82e00:	4b0e      	ldr	r3, [pc, #56]	; (82e3c <sysclk_init+0x40>)
   82e02:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82e04:	2000      	movs	r0, #0
   82e06:	213e      	movs	r1, #62	; 0x3e
   82e08:	4b0d      	ldr	r3, [pc, #52]	; (82e40 <sysclk_init+0x44>)
   82e0a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82e0c:	4c0d      	ldr	r4, [pc, #52]	; (82e44 <sysclk_init+0x48>)
   82e0e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82e10:	2800      	cmp	r0, #0
   82e12:	d0fc      	beq.n	82e0e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   82e14:	4b0c      	ldr	r3, [pc, #48]	; (82e48 <sysclk_init+0x4c>)
   82e16:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82e18:	4a0c      	ldr	r2, [pc, #48]	; (82e4c <sysclk_init+0x50>)
   82e1a:	4b0d      	ldr	r3, [pc, #52]	; (82e50 <sysclk_init+0x54>)
   82e1c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   82e1e:	4c0d      	ldr	r4, [pc, #52]	; (82e54 <sysclk_init+0x58>)
   82e20:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82e22:	2800      	cmp	r0, #0
   82e24:	d0fc      	beq.n	82e20 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82e26:	2010      	movs	r0, #16
   82e28:	4b0b      	ldr	r3, [pc, #44]	; (82e58 <sysclk_init+0x5c>)
   82e2a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82e2c:	4b0b      	ldr	r3, [pc, #44]	; (82e5c <sysclk_init+0x60>)
   82e2e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82e30:	4801      	ldr	r0, [pc, #4]	; (82e38 <sysclk_init+0x3c>)
   82e32:	4b02      	ldr	r3, [pc, #8]	; (82e3c <sysclk_init+0x40>)
   82e34:	4798      	blx	r3
   82e36:	bd10      	pop	{r4, pc}
   82e38:	0501bd00 	.word	0x0501bd00
   82e3c:	200700b1 	.word	0x200700b1
   82e40:	00083225 	.word	0x00083225
   82e44:	00083279 	.word	0x00083279
   82e48:	00083289 	.word	0x00083289
   82e4c:	200d3f01 	.word	0x200d3f01
   82e50:	400e0600 	.word	0x400e0600
   82e54:	00083299 	.word	0x00083299
   82e58:	000831c1 	.word	0x000831c1
   82e5c:	000833b5 	.word	0x000833b5

00082e60 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82e60:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82e62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82e66:	4b1e      	ldr	r3, [pc, #120]	; (82ee0 <board_init+0x80>)
   82e68:	605a      	str	r2, [r3, #4]
   82e6a:	200b      	movs	r0, #11
   82e6c:	4c1d      	ldr	r4, [pc, #116]	; (82ee4 <board_init+0x84>)
   82e6e:	47a0      	blx	r4
   82e70:	200c      	movs	r0, #12
   82e72:	47a0      	blx	r4
   82e74:	200d      	movs	r0, #13
   82e76:	47a0      	blx	r4
   82e78:	200e      	movs	r0, #14
   82e7a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82e7c:	203b      	movs	r0, #59	; 0x3b
   82e7e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82e82:	4c19      	ldr	r4, [pc, #100]	; (82ee8 <board_init+0x88>)
   82e84:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   82e86:	2055      	movs	r0, #85	; 0x55
   82e88:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82e8c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82e8e:	2056      	movs	r0, #86	; 0x56
   82e90:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82e94:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   82e96:	2068      	movs	r0, #104	; 0x68
   82e98:	4914      	ldr	r1, [pc, #80]	; (82eec <board_init+0x8c>)
   82e9a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82e9c:	205c      	movs	r0, #92	; 0x5c
   82e9e:	4914      	ldr	r1, [pc, #80]	; (82ef0 <board_init+0x90>)
   82ea0:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82ea2:	4814      	ldr	r0, [pc, #80]	; (82ef4 <board_init+0x94>)
   82ea4:	f44f 7140 	mov.w	r1, #768	; 0x300
   82ea8:	4a13      	ldr	r2, [pc, #76]	; (82ef8 <board_init+0x98>)
   82eaa:	4b14      	ldr	r3, [pc, #80]	; (82efc <board_init+0x9c>)
   82eac:	4798      	blx	r3
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   82eae:	2011      	movs	r0, #17
   82eb0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82eb4:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   82eb6:	2012      	movs	r0, #18
   82eb8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82ebc:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_TWI1
	gpio_configure_pin(TWI1_DATA_GPIO, TWI1_DATA_FLAGS);
   82ebe:	202c      	movs	r0, #44	; 0x2c
   82ec0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82ec4:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
   82ec6:	202d      	movs	r0, #45	; 0x2d
   82ec8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82ecc:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   82ece:	202b      	movs	r0, #43	; 0x2b
   82ed0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82ed4:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   82ed6:	202a      	movs	r0, #42	; 0x2a
   82ed8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82edc:	47a0      	blx	r4
   82ede:	bd10      	pop	{r4, pc}
   82ee0:	400e1a50 	.word	0x400e1a50
   82ee4:	000832a9 	.word	0x000832a9
   82ee8:	00082fa5 	.word	0x00082fa5
   82eec:	28000079 	.word	0x28000079
   82ef0:	28000001 	.word	0x28000001
   82ef4:	400e0e00 	.word	0x400e0e00
   82ef8:	08000001 	.word	0x08000001
   82efc:	00083079 	.word	0x00083079

00082f00 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82f00:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82f02:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   82f06:	d016      	beq.n	82f36 <pio_set_peripheral+0x36>
   82f08:	d804      	bhi.n	82f14 <pio_set_peripheral+0x14>
   82f0a:	b1c1      	cbz	r1, 82f3e <pio_set_peripheral+0x3e>
   82f0c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   82f10:	d00a      	beq.n	82f28 <pio_set_peripheral+0x28>
   82f12:	e013      	b.n	82f3c <pio_set_peripheral+0x3c>
   82f14:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   82f18:	d011      	beq.n	82f3e <pio_set_peripheral+0x3e>
   82f1a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   82f1e:	d00e      	beq.n	82f3e <pio_set_peripheral+0x3e>
   82f20:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   82f24:	d10a      	bne.n	82f3c <pio_set_peripheral+0x3c>
   82f26:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82f28:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82f2a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   82f2c:	400b      	ands	r3, r1
   82f2e:	ea23 0302 	bic.w	r3, r3, r2
   82f32:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82f34:	e002      	b.n	82f3c <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82f36:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82f38:	4313      	orrs	r3, r2
   82f3a:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82f3c:	6042      	str	r2, [r0, #4]
   82f3e:	4770      	bx	lr

00082f40 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82f40:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82f42:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   82f46:	bf14      	ite	ne
   82f48:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82f4a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82f4c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   82f50:	bf14      	ite	ne
   82f52:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82f54:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82f56:	f012 0f02 	tst.w	r2, #2
   82f5a:	d002      	beq.n	82f62 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   82f5c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   82f60:	e004      	b.n	82f6c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82f62:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   82f66:	bf18      	it	ne
   82f68:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82f6c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   82f6e:	6001      	str	r1, [r0, #0]
   82f70:	4770      	bx	lr
   82f72:	bf00      	nop

00082f74 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82f74:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82f76:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82f78:	9c01      	ldr	r4, [sp, #4]
   82f7a:	b10c      	cbz	r4, 82f80 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   82f7c:	6641      	str	r1, [r0, #100]	; 0x64
   82f7e:	e000      	b.n	82f82 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82f80:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82f82:	b10b      	cbz	r3, 82f88 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   82f84:	6501      	str	r1, [r0, #80]	; 0x50
   82f86:	e000      	b.n	82f8a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82f88:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82f8a:	b10a      	cbz	r2, 82f90 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   82f8c:	6301      	str	r1, [r0, #48]	; 0x30
   82f8e:	e000      	b.n	82f92 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82f90:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   82f92:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82f94:	6001      	str	r1, [r0, #0]
}
   82f96:	f85d 4b04 	ldr.w	r4, [sp], #4
   82f9a:	4770      	bx	lr

00082f9c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82f9c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   82f9e:	4770      	bx	lr

00082fa0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82fa0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   82fa2:	4770      	bx	lr

00082fa4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82fa4:	b570      	push	{r4, r5, r6, lr}
   82fa6:	b082      	sub	sp, #8
   82fa8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82faa:	0944      	lsrs	r4, r0, #5
   82fac:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   82fb0:	f204 7407 	addw	r4, r4, #1799	; 0x707
   82fb4:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82fb6:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   82fba:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   82fbe:	d030      	beq.n	83022 <pio_configure_pin+0x7e>
   82fc0:	d806      	bhi.n	82fd0 <pio_configure_pin+0x2c>
   82fc2:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   82fc6:	d00a      	beq.n	82fde <pio_configure_pin+0x3a>
   82fc8:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   82fcc:	d018      	beq.n	83000 <pio_configure_pin+0x5c>
   82fce:	e049      	b.n	83064 <pio_configure_pin+0xc0>
   82fd0:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82fd4:	d030      	beq.n	83038 <pio_configure_pin+0x94>
   82fd6:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   82fda:	d02d      	beq.n	83038 <pio_configure_pin+0x94>
   82fdc:	e042      	b.n	83064 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82fde:	f000 001f 	and.w	r0, r0, #31
   82fe2:	2401      	movs	r4, #1
   82fe4:	4084      	lsls	r4, r0
   82fe6:	4630      	mov	r0, r6
   82fe8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82fec:	4622      	mov	r2, r4
   82fee:	4b1f      	ldr	r3, [pc, #124]	; (8306c <pio_configure_pin+0xc8>)
   82ff0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82ff2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82ff6:	bf14      	ite	ne
   82ff8:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82ffa:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82ffc:	2001      	movs	r0, #1
   82ffe:	e032      	b.n	83066 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   83000:	f000 001f 	and.w	r0, r0, #31
   83004:	2401      	movs	r4, #1
   83006:	4084      	lsls	r4, r0
   83008:	4630      	mov	r0, r6
   8300a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8300e:	4622      	mov	r2, r4
   83010:	4b16      	ldr	r3, [pc, #88]	; (8306c <pio_configure_pin+0xc8>)
   83012:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   83014:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   83018:	bf14      	ite	ne
   8301a:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8301c:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8301e:	2001      	movs	r0, #1
   83020:	e021      	b.n	83066 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   83022:	f000 011f 	and.w	r1, r0, #31
   83026:	2401      	movs	r4, #1
   83028:	4630      	mov	r0, r6
   8302a:	fa04 f101 	lsl.w	r1, r4, r1
   8302e:	462a      	mov	r2, r5
   83030:	4b0f      	ldr	r3, [pc, #60]	; (83070 <pio_configure_pin+0xcc>)
   83032:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   83034:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   83036:	e016      	b.n	83066 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83038:	f000 011f 	and.w	r1, r0, #31
   8303c:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8303e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83042:	ea05 0304 	and.w	r3, r5, r4
   83046:	9300      	str	r3, [sp, #0]
   83048:	4630      	mov	r0, r6
   8304a:	fa04 f101 	lsl.w	r1, r4, r1
   8304e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   83052:	bf14      	ite	ne
   83054:	2200      	movne	r2, #0
   83056:	2201      	moveq	r2, #1
   83058:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8305c:	4d05      	ldr	r5, [pc, #20]	; (83074 <pio_configure_pin+0xd0>)
   8305e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   83060:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   83062:	e000      	b.n	83066 <pio_configure_pin+0xc2>

	default:
		return 0;
   83064:	2000      	movs	r0, #0
	}

	return 1;
}
   83066:	b002      	add	sp, #8
   83068:	bd70      	pop	{r4, r5, r6, pc}
   8306a:	bf00      	nop
   8306c:	00082f01 	.word	0x00082f01
   83070:	00082f41 	.word	0x00082f41
   83074:	00082f75 	.word	0x00082f75

00083078 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   83078:	b5f0      	push	{r4, r5, r6, r7, lr}
   8307a:	b083      	sub	sp, #12
   8307c:	4607      	mov	r7, r0
   8307e:	460e      	mov	r6, r1
   83080:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   83082:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   83086:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8308a:	d026      	beq.n	830da <pio_configure_pin_group+0x62>
   8308c:	d806      	bhi.n	8309c <pio_configure_pin_group+0x24>
   8308e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   83092:	d00a      	beq.n	830aa <pio_configure_pin_group+0x32>
   83094:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   83098:	d013      	beq.n	830c2 <pio_configure_pin_group+0x4a>
   8309a:	e034      	b.n	83106 <pio_configure_pin_group+0x8e>
   8309c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   830a0:	d01f      	beq.n	830e2 <pio_configure_pin_group+0x6a>
   830a2:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   830a6:	d01c      	beq.n	830e2 <pio_configure_pin_group+0x6a>
   830a8:	e02d      	b.n	83106 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   830aa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   830ae:	4632      	mov	r2, r6
   830b0:	4b16      	ldr	r3, [pc, #88]	; (8310c <pio_configure_pin_group+0x94>)
   830b2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   830b4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   830b8:	bf14      	ite	ne
   830ba:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   830bc:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   830be:	2001      	movs	r0, #1
   830c0:	e022      	b.n	83108 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   830c2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   830c6:	4632      	mov	r2, r6
   830c8:	4b10      	ldr	r3, [pc, #64]	; (8310c <pio_configure_pin_group+0x94>)
   830ca:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   830cc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   830d0:	bf14      	ite	ne
   830d2:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   830d4:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   830d6:	2001      	movs	r0, #1
   830d8:	e016      	b.n	83108 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   830da:	4b0d      	ldr	r3, [pc, #52]	; (83110 <pio_configure_pin_group+0x98>)
   830dc:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   830de:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   830e0:	e012      	b.n	83108 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   830e2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   830e6:	f005 0301 	and.w	r3, r5, #1
   830ea:	9300      	str	r3, [sp, #0]
   830ec:	4638      	mov	r0, r7
   830ee:	4631      	mov	r1, r6
   830f0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   830f4:	bf14      	ite	ne
   830f6:	2200      	movne	r2, #0
   830f8:	2201      	moveq	r2, #1
   830fa:	f3c5 0380 	ubfx	r3, r5, #2, #1
   830fe:	4c05      	ldr	r4, [pc, #20]	; (83114 <pio_configure_pin_group+0x9c>)
   83100:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   83102:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   83104:	e000      	b.n	83108 <pio_configure_pin_group+0x90>

	default:
		return 0;
   83106:	2000      	movs	r0, #0
	}

	return 1;
}
   83108:	b003      	add	sp, #12
   8310a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8310c:	00082f01 	.word	0x00082f01
   83110:	00082f41 	.word	0x00082f41
   83114:	00082f75 	.word	0x00082f75

00083118 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   83118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8311c:	4604      	mov	r4, r0
   8311e:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   83120:	4b10      	ldr	r3, [pc, #64]	; (83164 <pio_handler_process+0x4c>)
   83122:	4798      	blx	r3
   83124:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   83126:	4620      	mov	r0, r4
   83128:	4b0f      	ldr	r3, [pc, #60]	; (83168 <pio_handler_process+0x50>)
   8312a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8312c:	4005      	ands	r5, r0
   8312e:	d017      	beq.n	83160 <pio_handler_process+0x48>
   83130:	4f0e      	ldr	r7, [pc, #56]	; (8316c <pio_handler_process+0x54>)
   83132:	f107 040c 	add.w	r4, r7, #12
   83136:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83138:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   8313c:	42b3      	cmp	r3, r6
   8313e:	d10a      	bne.n	83156 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83140:	f854 1c08 	ldr.w	r1, [r4, #-8]
   83144:	4229      	tst	r1, r5
   83146:	d006      	beq.n	83156 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   83148:	6823      	ldr	r3, [r4, #0]
   8314a:	4630      	mov	r0, r6
   8314c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8314e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83152:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   83156:	42bc      	cmp	r4, r7
   83158:	d002      	beq.n	83160 <pio_handler_process+0x48>
   8315a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8315c:	2d00      	cmp	r5, #0
   8315e:	d1eb      	bne.n	83138 <pio_handler_process+0x20>
   83160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83164:	00082f9d 	.word	0x00082f9d
   83168:	00082fa1 	.word	0x00082fa1
   8316c:	20078d10 	.word	0x20078d10

00083170 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   83170:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   83172:	4802      	ldr	r0, [pc, #8]	; (8317c <PIOA_Handler+0xc>)
   83174:	210b      	movs	r1, #11
   83176:	4b02      	ldr	r3, [pc, #8]	; (83180 <PIOA_Handler+0x10>)
   83178:	4798      	blx	r3
   8317a:	bd08      	pop	{r3, pc}
   8317c:	400e0e00 	.word	0x400e0e00
   83180:	00083119 	.word	0x00083119

00083184 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   83184:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   83186:	4802      	ldr	r0, [pc, #8]	; (83190 <PIOB_Handler+0xc>)
   83188:	210c      	movs	r1, #12
   8318a:	4b02      	ldr	r3, [pc, #8]	; (83194 <PIOB_Handler+0x10>)
   8318c:	4798      	blx	r3
   8318e:	bd08      	pop	{r3, pc}
   83190:	400e1000 	.word	0x400e1000
   83194:	00083119 	.word	0x00083119

00083198 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   83198:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8319a:	4802      	ldr	r0, [pc, #8]	; (831a4 <PIOC_Handler+0xc>)
   8319c:	210d      	movs	r1, #13
   8319e:	4b02      	ldr	r3, [pc, #8]	; (831a8 <PIOC_Handler+0x10>)
   831a0:	4798      	blx	r3
   831a2:	bd08      	pop	{r3, pc}
   831a4:	400e1200 	.word	0x400e1200
   831a8:	00083119 	.word	0x00083119

000831ac <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   831ac:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   831ae:	4802      	ldr	r0, [pc, #8]	; (831b8 <PIOD_Handler+0xc>)
   831b0:	210e      	movs	r1, #14
   831b2:	4b02      	ldr	r3, [pc, #8]	; (831bc <PIOD_Handler+0x10>)
   831b4:	4798      	blx	r3
   831b6:	bd08      	pop	{r3, pc}
   831b8:	400e1400 	.word	0x400e1400
   831bc:	00083119 	.word	0x00083119

000831c0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   831c0:	4b17      	ldr	r3, [pc, #92]	; (83220 <pmc_switch_mck_to_pllack+0x60>)
   831c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   831c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   831c8:	4310      	orrs	r0, r2
   831ca:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   831cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   831ce:	f013 0f08 	tst.w	r3, #8
   831d2:	d109      	bne.n	831e8 <pmc_switch_mck_to_pllack+0x28>
   831d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   831d8:	4911      	ldr	r1, [pc, #68]	; (83220 <pmc_switch_mck_to_pllack+0x60>)
   831da:	e001      	b.n	831e0 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   831dc:	3b01      	subs	r3, #1
   831de:	d019      	beq.n	83214 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   831e0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   831e2:	f012 0f08 	tst.w	r2, #8
   831e6:	d0f9      	beq.n	831dc <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   831e8:	4b0d      	ldr	r3, [pc, #52]	; (83220 <pmc_switch_mck_to_pllack+0x60>)
   831ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   831ec:	f022 0203 	bic.w	r2, r2, #3
   831f0:	f042 0202 	orr.w	r2, r2, #2
   831f4:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   831f6:	6e98      	ldr	r0, [r3, #104]	; 0x68
   831f8:	f010 0008 	ands.w	r0, r0, #8
   831fc:	d10c      	bne.n	83218 <pmc_switch_mck_to_pllack+0x58>
   831fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83202:	4907      	ldr	r1, [pc, #28]	; (83220 <pmc_switch_mck_to_pllack+0x60>)
   83204:	e001      	b.n	8320a <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83206:	3b01      	subs	r3, #1
   83208:	d008      	beq.n	8321c <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8320a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8320c:	f012 0f08 	tst.w	r2, #8
   83210:	d0f9      	beq.n	83206 <pmc_switch_mck_to_pllack+0x46>
   83212:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   83214:	2001      	movs	r0, #1
   83216:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   83218:	2000      	movs	r0, #0
   8321a:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8321c:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8321e:	4770      	bx	lr
   83220:	400e0600 	.word	0x400e0600

00083224 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   83224:	b138      	cbz	r0, 83236 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83226:	4911      	ldr	r1, [pc, #68]	; (8326c <pmc_switch_mainck_to_xtal+0x48>)
   83228:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8322a:	4a11      	ldr	r2, [pc, #68]	; (83270 <pmc_switch_mainck_to_xtal+0x4c>)
   8322c:	401a      	ands	r2, r3
   8322e:	4b11      	ldr	r3, [pc, #68]	; (83274 <pmc_switch_mainck_to_xtal+0x50>)
   83230:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83232:	620b      	str	r3, [r1, #32]
   83234:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83236:	4a0d      	ldr	r2, [pc, #52]	; (8326c <pmc_switch_mainck_to_xtal+0x48>)
   83238:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8323a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8323e:	f023 0303 	bic.w	r3, r3, #3
   83242:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83246:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8324a:	0209      	lsls	r1, r1, #8
   8324c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8324e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83250:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83252:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83254:	f013 0f01 	tst.w	r3, #1
   83258:	d0fb      	beq.n	83252 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8325a:	4a04      	ldr	r2, [pc, #16]	; (8326c <pmc_switch_mainck_to_xtal+0x48>)
   8325c:	6a13      	ldr	r3, [r2, #32]
   8325e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   83262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83266:	6213      	str	r3, [r2, #32]
   83268:	4770      	bx	lr
   8326a:	bf00      	nop
   8326c:	400e0600 	.word	0x400e0600
   83270:	fec8fffc 	.word	0xfec8fffc
   83274:	01370002 	.word	0x01370002

00083278 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83278:	4b02      	ldr	r3, [pc, #8]	; (83284 <pmc_osc_is_ready_mainck+0xc>)
   8327a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8327c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   83280:	4770      	bx	lr
   83282:	bf00      	nop
   83284:	400e0600 	.word	0x400e0600

00083288 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83288:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8328c:	4b01      	ldr	r3, [pc, #4]	; (83294 <pmc_disable_pllack+0xc>)
   8328e:	629a      	str	r2, [r3, #40]	; 0x28
   83290:	4770      	bx	lr
   83292:	bf00      	nop
   83294:	400e0600 	.word	0x400e0600

00083298 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83298:	4b02      	ldr	r3, [pc, #8]	; (832a4 <pmc_is_locked_pllack+0xc>)
   8329a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8329c:	f000 0002 	and.w	r0, r0, #2
   832a0:	4770      	bx	lr
   832a2:	bf00      	nop
   832a4:	400e0600 	.word	0x400e0600

000832a8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   832a8:	282c      	cmp	r0, #44	; 0x2c
   832aa:	d820      	bhi.n	832ee <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   832ac:	281f      	cmp	r0, #31
   832ae:	d80d      	bhi.n	832cc <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   832b0:	4b12      	ldr	r3, [pc, #72]	; (832fc <pmc_enable_periph_clk+0x54>)
   832b2:	699a      	ldr	r2, [r3, #24]
   832b4:	2301      	movs	r3, #1
   832b6:	4083      	lsls	r3, r0
   832b8:	401a      	ands	r2, r3
   832ba:	4293      	cmp	r3, r2
   832bc:	d019      	beq.n	832f2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   832be:	2301      	movs	r3, #1
   832c0:	fa03 f000 	lsl.w	r0, r3, r0
   832c4:	4b0d      	ldr	r3, [pc, #52]	; (832fc <pmc_enable_periph_clk+0x54>)
   832c6:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   832c8:	2000      	movs	r0, #0
   832ca:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   832cc:	4b0b      	ldr	r3, [pc, #44]	; (832fc <pmc_enable_periph_clk+0x54>)
   832ce:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   832d2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   832d4:	2301      	movs	r3, #1
   832d6:	4083      	lsls	r3, r0
   832d8:	401a      	ands	r2, r3
   832da:	4293      	cmp	r3, r2
   832dc:	d00b      	beq.n	832f6 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   832de:	2301      	movs	r3, #1
   832e0:	fa03 f000 	lsl.w	r0, r3, r0
   832e4:	4b05      	ldr	r3, [pc, #20]	; (832fc <pmc_enable_periph_clk+0x54>)
   832e6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   832ea:	2000      	movs	r0, #0
   832ec:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   832ee:	2001      	movs	r0, #1
   832f0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   832f2:	2000      	movs	r0, #0
   832f4:	4770      	bx	lr
   832f6:	2000      	movs	r0, #0
}
   832f8:	4770      	bx	lr
   832fa:	bf00      	nop
   832fc:	400e0600 	.word	0x400e0600

00083300 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   83300:	e7fe      	b.n	83300 <Dummy_Handler>
   83302:	bf00      	nop

00083304 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   83304:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   83306:	4b1e      	ldr	r3, [pc, #120]	; (83380 <Reset_Handler+0x7c>)
   83308:	4a1e      	ldr	r2, [pc, #120]	; (83384 <Reset_Handler+0x80>)
   8330a:	429a      	cmp	r2, r3
   8330c:	d003      	beq.n	83316 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8330e:	4b1e      	ldr	r3, [pc, #120]	; (83388 <Reset_Handler+0x84>)
   83310:	4a1b      	ldr	r2, [pc, #108]	; (83380 <Reset_Handler+0x7c>)
   83312:	429a      	cmp	r2, r3
   83314:	d304      	bcc.n	83320 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83316:	4b1d      	ldr	r3, [pc, #116]	; (8338c <Reset_Handler+0x88>)
   83318:	4a1d      	ldr	r2, [pc, #116]	; (83390 <Reset_Handler+0x8c>)
   8331a:	429a      	cmp	r2, r3
   8331c:	d30f      	bcc.n	8333e <Reset_Handler+0x3a>
   8331e:	e01a      	b.n	83356 <Reset_Handler+0x52>
   83320:	4b1c      	ldr	r3, [pc, #112]	; (83394 <Reset_Handler+0x90>)
   83322:	4c1d      	ldr	r4, [pc, #116]	; (83398 <Reset_Handler+0x94>)
   83324:	1ae4      	subs	r4, r4, r3
   83326:	f024 0403 	bic.w	r4, r4, #3
   8332a:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8332c:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   8332e:	4814      	ldr	r0, [pc, #80]	; (83380 <Reset_Handler+0x7c>)
   83330:	4914      	ldr	r1, [pc, #80]	; (83384 <Reset_Handler+0x80>)
   83332:	585a      	ldr	r2, [r3, r1]
   83334:	501a      	str	r2, [r3, r0]
   83336:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   83338:	42a3      	cmp	r3, r4
   8333a:	d1fa      	bne.n	83332 <Reset_Handler+0x2e>
   8333c:	e7eb      	b.n	83316 <Reset_Handler+0x12>
   8333e:	4b17      	ldr	r3, [pc, #92]	; (8339c <Reset_Handler+0x98>)
   83340:	4917      	ldr	r1, [pc, #92]	; (833a0 <Reset_Handler+0x9c>)
   83342:	1ac9      	subs	r1, r1, r3
   83344:	f021 0103 	bic.w	r1, r1, #3
   83348:	1d1a      	adds	r2, r3, #4
   8334a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   8334c:	2200      	movs	r2, #0
   8334e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83352:	428b      	cmp	r3, r1
   83354:	d1fb      	bne.n	8334e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   83356:	4a13      	ldr	r2, [pc, #76]	; (833a4 <Reset_Handler+0xa0>)
   83358:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   8335c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83360:	4911      	ldr	r1, [pc, #68]	; (833a8 <Reset_Handler+0xa4>)
   83362:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   83364:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   83368:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   8336c:	d203      	bcs.n	83376 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8336e:	688a      	ldr	r2, [r1, #8]
   83370:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   83374:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   83376:	4b0d      	ldr	r3, [pc, #52]	; (833ac <Reset_Handler+0xa8>)
   83378:	4798      	blx	r3

	/* Branch to main function */
	main();
   8337a:	4b0d      	ldr	r3, [pc, #52]	; (833b0 <Reset_Handler+0xac>)
   8337c:	4798      	blx	r3
   8337e:	e7fe      	b.n	8337e <Reset_Handler+0x7a>
   83380:	20070000 	.word	0x20070000
   83384:	0008a958 	.word	0x0008a958
   83388:	20070a54 	.word	0x20070a54
   8338c:	20078e18 	.word	0x20078e18
   83390:	20070a58 	.word	0x20070a58
   83394:	20070004 	.word	0x20070004
   83398:	20070a57 	.word	0x20070a57
   8339c:	20070a54 	.word	0x20070a54
   833a0:	20078e13 	.word	0x20078e13
   833a4:	00080000 	.word	0x00080000
   833a8:	e000ed00 	.word	0xe000ed00
   833ac:	00084701 	.word	0x00084701
   833b0:	0008353d 	.word	0x0008353d

000833b4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   833b4:	4b3e      	ldr	r3, [pc, #248]	; (834b0 <SystemCoreClockUpdate+0xfc>)
   833b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   833b8:	f003 0303 	and.w	r3, r3, #3
   833bc:	2b03      	cmp	r3, #3
   833be:	d85f      	bhi.n	83480 <SystemCoreClockUpdate+0xcc>
   833c0:	e8df f003 	tbb	[pc, r3]
   833c4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   833c8:	4b3a      	ldr	r3, [pc, #232]	; (834b4 <SystemCoreClockUpdate+0x100>)
   833ca:	695b      	ldr	r3, [r3, #20]
   833cc:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   833d0:	bf14      	ite	ne
   833d2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   833d6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   833da:	4b37      	ldr	r3, [pc, #220]	; (834b8 <SystemCoreClockUpdate+0x104>)
   833dc:	601a      	str	r2, [r3, #0]
   833de:	e04f      	b.n	83480 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   833e0:	4b33      	ldr	r3, [pc, #204]	; (834b0 <SystemCoreClockUpdate+0xfc>)
   833e2:	6a1b      	ldr	r3, [r3, #32]
   833e4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   833e8:	d003      	beq.n	833f2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   833ea:	4a34      	ldr	r2, [pc, #208]	; (834bc <SystemCoreClockUpdate+0x108>)
   833ec:	4b32      	ldr	r3, [pc, #200]	; (834b8 <SystemCoreClockUpdate+0x104>)
   833ee:	601a      	str	r2, [r3, #0]
   833f0:	e046      	b.n	83480 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   833f2:	4a33      	ldr	r2, [pc, #204]	; (834c0 <SystemCoreClockUpdate+0x10c>)
   833f4:	4b30      	ldr	r3, [pc, #192]	; (834b8 <SystemCoreClockUpdate+0x104>)
   833f6:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   833f8:	4b2d      	ldr	r3, [pc, #180]	; (834b0 <SystemCoreClockUpdate+0xfc>)
   833fa:	6a1b      	ldr	r3, [r3, #32]
   833fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83400:	2b10      	cmp	r3, #16
   83402:	d002      	beq.n	8340a <SystemCoreClockUpdate+0x56>
   83404:	2b20      	cmp	r3, #32
   83406:	d004      	beq.n	83412 <SystemCoreClockUpdate+0x5e>
   83408:	e03a      	b.n	83480 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8340a:	4a2e      	ldr	r2, [pc, #184]	; (834c4 <SystemCoreClockUpdate+0x110>)
   8340c:	4b2a      	ldr	r3, [pc, #168]	; (834b8 <SystemCoreClockUpdate+0x104>)
   8340e:	601a      	str	r2, [r3, #0]
				break;
   83410:	e036      	b.n	83480 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   83412:	4a2a      	ldr	r2, [pc, #168]	; (834bc <SystemCoreClockUpdate+0x108>)
   83414:	4b28      	ldr	r3, [pc, #160]	; (834b8 <SystemCoreClockUpdate+0x104>)
   83416:	601a      	str	r2, [r3, #0]
				break;
   83418:	e032      	b.n	83480 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8341a:	4b25      	ldr	r3, [pc, #148]	; (834b0 <SystemCoreClockUpdate+0xfc>)
   8341c:	6a1b      	ldr	r3, [r3, #32]
   8341e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   83422:	d003      	beq.n	8342c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83424:	4a25      	ldr	r2, [pc, #148]	; (834bc <SystemCoreClockUpdate+0x108>)
   83426:	4b24      	ldr	r3, [pc, #144]	; (834b8 <SystemCoreClockUpdate+0x104>)
   83428:	601a      	str	r2, [r3, #0]
   8342a:	e012      	b.n	83452 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8342c:	4a24      	ldr	r2, [pc, #144]	; (834c0 <SystemCoreClockUpdate+0x10c>)
   8342e:	4b22      	ldr	r3, [pc, #136]	; (834b8 <SystemCoreClockUpdate+0x104>)
   83430:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83432:	4b1f      	ldr	r3, [pc, #124]	; (834b0 <SystemCoreClockUpdate+0xfc>)
   83434:	6a1b      	ldr	r3, [r3, #32]
   83436:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8343a:	2b10      	cmp	r3, #16
   8343c:	d002      	beq.n	83444 <SystemCoreClockUpdate+0x90>
   8343e:	2b20      	cmp	r3, #32
   83440:	d004      	beq.n	8344c <SystemCoreClockUpdate+0x98>
   83442:	e006      	b.n	83452 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83444:	4a1f      	ldr	r2, [pc, #124]	; (834c4 <SystemCoreClockUpdate+0x110>)
   83446:	4b1c      	ldr	r3, [pc, #112]	; (834b8 <SystemCoreClockUpdate+0x104>)
   83448:	601a      	str	r2, [r3, #0]
				break;
   8344a:	e002      	b.n	83452 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8344c:	4a1b      	ldr	r2, [pc, #108]	; (834bc <SystemCoreClockUpdate+0x108>)
   8344e:	4b1a      	ldr	r3, [pc, #104]	; (834b8 <SystemCoreClockUpdate+0x104>)
   83450:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   83452:	4b17      	ldr	r3, [pc, #92]	; (834b0 <SystemCoreClockUpdate+0xfc>)
   83454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83456:	f003 0303 	and.w	r3, r3, #3
   8345a:	2b02      	cmp	r3, #2
   8345c:	d10d      	bne.n	8347a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8345e:	4b14      	ldr	r3, [pc, #80]	; (834b0 <SystemCoreClockUpdate+0xfc>)
   83460:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83462:	6a99      	ldr	r1, [r3, #40]	; 0x28
   83464:	4b14      	ldr	r3, [pc, #80]	; (834b8 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83466:	f3c0 400a 	ubfx	r0, r0, #16, #11
   8346a:	681a      	ldr	r2, [r3, #0]
   8346c:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83470:	b2c9      	uxtb	r1, r1
   83472:	fbb2 f2f1 	udiv	r2, r2, r1
   83476:	601a      	str	r2, [r3, #0]
   83478:	e002      	b.n	83480 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8347a:	4a13      	ldr	r2, [pc, #76]	; (834c8 <SystemCoreClockUpdate+0x114>)
   8347c:	4b0e      	ldr	r3, [pc, #56]	; (834b8 <SystemCoreClockUpdate+0x104>)
   8347e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83480:	4b0b      	ldr	r3, [pc, #44]	; (834b0 <SystemCoreClockUpdate+0xfc>)
   83482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83484:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83488:	2b70      	cmp	r3, #112	; 0x70
   8348a:	d107      	bne.n	8349c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   8348c:	4b0a      	ldr	r3, [pc, #40]	; (834b8 <SystemCoreClockUpdate+0x104>)
   8348e:	681a      	ldr	r2, [r3, #0]
   83490:	490e      	ldr	r1, [pc, #56]	; (834cc <SystemCoreClockUpdate+0x118>)
   83492:	fba1 0202 	umull	r0, r2, r1, r2
   83496:	0852      	lsrs	r2, r2, #1
   83498:	601a      	str	r2, [r3, #0]
   8349a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8349c:	4b04      	ldr	r3, [pc, #16]	; (834b0 <SystemCoreClockUpdate+0xfc>)
   8349e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   834a0:	4b05      	ldr	r3, [pc, #20]	; (834b8 <SystemCoreClockUpdate+0x104>)
   834a2:	f3c1 1102 	ubfx	r1, r1, #4, #3
   834a6:	681a      	ldr	r2, [r3, #0]
   834a8:	40ca      	lsrs	r2, r1
   834aa:	601a      	str	r2, [r3, #0]
   834ac:	4770      	bx	lr
   834ae:	bf00      	nop
   834b0:	400e0600 	.word	0x400e0600
   834b4:	400e1a10 	.word	0x400e1a10
   834b8:	200701ac 	.word	0x200701ac
   834bc:	00b71b00 	.word	0x00b71b00
   834c0:	003d0900 	.word	0x003d0900
   834c4:	007a1200 	.word	0x007a1200
   834c8:	0e4e1c00 	.word	0x0e4e1c00
   834cc:	aaaaaaab 	.word	0xaaaaaaab

000834d0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   834d0:	4b09      	ldr	r3, [pc, #36]	; (834f8 <_sbrk+0x28>)
   834d2:	681b      	ldr	r3, [r3, #0]
   834d4:	b913      	cbnz	r3, 834dc <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   834d6:	4a09      	ldr	r2, [pc, #36]	; (834fc <_sbrk+0x2c>)
   834d8:	4b07      	ldr	r3, [pc, #28]	; (834f8 <_sbrk+0x28>)
   834da:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   834dc:	4b06      	ldr	r3, [pc, #24]	; (834f8 <_sbrk+0x28>)
   834de:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   834e0:	181a      	adds	r2, r3, r0
   834e2:	4907      	ldr	r1, [pc, #28]	; (83500 <_sbrk+0x30>)
   834e4:	4291      	cmp	r1, r2
   834e6:	db04      	blt.n	834f2 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   834e8:	4610      	mov	r0, r2
   834ea:	4a03      	ldr	r2, [pc, #12]	; (834f8 <_sbrk+0x28>)
   834ec:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   834ee:	4618      	mov	r0, r3
   834f0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   834f2:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   834f6:	4770      	bx	lr
   834f8:	20078d80 	.word	0x20078d80
   834fc:	2007ae18 	.word	0x2007ae18
   83500:	20087ffc 	.word	0x20087ffc

00083504 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   83504:	f04f 30ff 	mov.w	r0, #4294967295
   83508:	4770      	bx	lr
   8350a:	bf00      	nop

0008350c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8350c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   83510:	604b      	str	r3, [r1, #4]

	return 0;
}
   83512:	2000      	movs	r0, #0
   83514:	4770      	bx	lr
   83516:	bf00      	nop

00083518 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   83518:	2001      	movs	r0, #1
   8351a:	4770      	bx	lr

0008351c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   8351c:	2000      	movs	r0, #0
   8351e:	4770      	bx	lr

00083520 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   83520:	b510      	push	{r4, lr}
   83522:	200b      	movs	r0, #11
   83524:	4c04      	ldr	r4, [pc, #16]	; (83538 <ioport_init+0x18>)
   83526:	47a0      	blx	r4
   83528:	200c      	movs	r0, #12
   8352a:	47a0      	blx	r4
   8352c:	200d      	movs	r0, #13
   8352e:	47a0      	blx	r4
   83530:	200e      	movs	r0, #14
   83532:	47a0      	blx	r4
   83534:	bd10      	pop	{r4, pc}
   83536:	bf00      	nop
   83538:	000832a9 	.word	0x000832a9

0008353c <main>:




int main (void)
{
   8353c:	b510      	push	{r4, lr}
   8353e:	b084      	sub	sp, #16
	board_init();
   83540:	4b1e      	ldr	r3, [pc, #120]	; (835bc <main+0x80>)
   83542:	4798      	blx	r3
	sysclk_init();
   83544:	4b1e      	ldr	r3, [pc, #120]	; (835c0 <main+0x84>)
   83546:	4798      	blx	r3
	ioport_init();
   83548:	4c1e      	ldr	r4, [pc, #120]	; (835c4 <main+0x88>)
   8354a:	47a0      	blx	r4
	delayInit();
   8354c:	4b1e      	ldr	r3, [pc, #120]	; (835c8 <main+0x8c>)
   8354e:	4798      	blx	r3
	ioport_init();
   83550:	47a0      	blx	r4
	configure_console();
   83552:	4b1e      	ldr	r3, [pc, #120]	; (835cc <main+0x90>)
   83554:	4798      	blx	r3
	init_sensor();
   83556:	4b1e      	ldr	r3, [pc, #120]	; (835d0 <main+0x94>)
   83558:	4798      	blx	r3
	initMotor();
   8355a:	4b1e      	ldr	r3, [pc, #120]	; (835d4 <main+0x98>)
   8355c:	4798      	blx	r3
	//initDrive();
	//initRegulator();
	init_taskFunctions();
   8355e:	4b1e      	ldr	r3, [pc, #120]	; (835d8 <main+0x9c>)
   83560:	4798      	blx	r3
	init_twi_functions();
   83562:	4b1e      	ldr	r3, [pc, #120]	; (835dc <main+0xa0>)
   83564:	4798      	blx	r3
	//init_interrupt();
	
	
	printf("\nInit ok");
   83566:	481e      	ldr	r0, [pc, #120]	; (835e0 <main+0xa4>)
   83568:	4b1e      	ldr	r3, [pc, #120]	; (835e4 <main+0xa8>)
   8356a:	4798      	blx	r3
// 		
// 		if (xTaskCreate(task_pdmm_Com, (const signed char * const) "PDMM_COMMUNICATION", TASK_PDMM_COM_STACK_SIZE, NULL, TASK_PDMM_COM_STACK_PRIORITY, NULL) != pdPASS) {
// 			printf("Failed the PDMM Communication Task\r\n");
// 		}
		
		if (xTaskCreate(task_Regulate, (const signed char * const) "REGULATOR", TASK_REGULATE_STACK_SIZE, NULL, TASK_REGULATE_STACK_PRIORITY, NULL) != pdPASS) {
   8356c:	2303      	movs	r3, #3
   8356e:	9300      	str	r3, [sp, #0]
   83570:	2300      	movs	r3, #0
   83572:	9301      	str	r3, [sp, #4]
   83574:	9302      	str	r3, [sp, #8]
   83576:	9303      	str	r3, [sp, #12]
   83578:	481b      	ldr	r0, [pc, #108]	; (835e8 <main+0xac>)
   8357a:	491c      	ldr	r1, [pc, #112]	; (835ec <main+0xb0>)
   8357c:	f44f 7280 	mov.w	r2, #256	; 0x100
   83580:	4c1b      	ldr	r4, [pc, #108]	; (835f0 <main+0xb4>)
   83582:	47a0      	blx	r4
   83584:	2801      	cmp	r0, #1
   83586:	d002      	beq.n	8358e <main+0x52>
			printf("Failed the Regulator Task\r\n");
   83588:	481a      	ldr	r0, [pc, #104]	; (835f4 <main+0xb8>)
   8358a:	4b16      	ldr	r3, [pc, #88]	; (835e4 <main+0xa8>)
   8358c:	4798      	blx	r3
		}
 		
		if (xTaskCreate(task_ultraLjud, (const signed char * const) "ULTRALJUD SENSOR", TASK_ULTRALJUD_STACK_SIZE, NULL, TASK_ULTRALJUD_STACK_PRIORITY, NULL) != pdPASS) {
   8358e:	2305      	movs	r3, #5
   83590:	9300      	str	r3, [sp, #0]
   83592:	2300      	movs	r3, #0
   83594:	9301      	str	r3, [sp, #4]
   83596:	9302      	str	r3, [sp, #8]
   83598:	9303      	str	r3, [sp, #12]
   8359a:	4817      	ldr	r0, [pc, #92]	; (835f8 <main+0xbc>)
   8359c:	4917      	ldr	r1, [pc, #92]	; (835fc <main+0xc0>)
   8359e:	f44f 7280 	mov.w	r2, #256	; 0x100
   835a2:	4c13      	ldr	r4, [pc, #76]	; (835f0 <main+0xb4>)
   835a4:	47a0      	blx	r4
   835a6:	2801      	cmp	r0, #1
   835a8:	d002      	beq.n	835b0 <main+0x74>
			printf("Failed the UltraDistance Sensor Task\r\n");
   835aa:	4815      	ldr	r0, [pc, #84]	; (83600 <main+0xc4>)
   835ac:	4b0d      	ldr	r3, [pc, #52]	; (835e4 <main+0xa8>)
   835ae:	4798      	blx	r3
		}
		
		
		vTaskStartScheduler();
   835b0:	4b14      	ldr	r3, [pc, #80]	; (83604 <main+0xc8>)
   835b2:	4798      	blx	r3
		
		
	//}
}
   835b4:	2000      	movs	r0, #0
   835b6:	b004      	add	sp, #16
   835b8:	bd10      	pop	{r4, pc}
   835ba:	bf00      	nop
   835bc:	00082e61 	.word	0x00082e61
   835c0:	00082dfd 	.word	0x00082dfd
   835c4:	00083521 	.word	0x00083521
   835c8:	000816cd 	.word	0x000816cd
   835cc:	00081611 	.word	0x00081611
   835d0:	00081129 	.word	0x00081129
   835d4:	00081745 	.word	0x00081745
   835d8:	000807d1 	.word	0x000807d1
   835dc:	00080149 	.word	0x00080149
   835e0:	0008a70c 	.word	0x0008a70c
   835e4:	00084751 	.word	0x00084751
   835e8:	0008115d 	.word	0x0008115d
   835ec:	0008a718 	.word	0x0008a718
   835f0:	000820b9 	.word	0x000820b9
   835f4:	0008a724 	.word	0x0008a724
   835f8:	00080e61 	.word	0x00080e61
   835fc:	0008a740 	.word	0x0008a740
   83600:	0008a754 	.word	0x0008a754
   83604:	000822c1 	.word	0x000822c1

00083608 <acos>:
   83608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8360c:	b08a      	sub	sp, #40	; 0x28
   8360e:	4604      	mov	r4, r0
   83610:	460d      	mov	r5, r1
   83612:	f000 f8a5 	bl	83760 <__ieee754_acos>
   83616:	f8df 8094 	ldr.w	r8, [pc, #148]	; 836ac <acos+0xa4>
   8361a:	4606      	mov	r6, r0
   8361c:	f998 3000 	ldrsb.w	r3, [r8]
   83620:	460f      	mov	r7, r1
   83622:	3301      	adds	r3, #1
   83624:	d004      	beq.n	83630 <acos+0x28>
   83626:	4620      	mov	r0, r4
   83628:	4629      	mov	r1, r5
   8362a:	f000 fbb9 	bl	83da0 <__fpclassifyd>
   8362e:	b920      	cbnz	r0, 8363a <acos+0x32>
   83630:	4630      	mov	r0, r6
   83632:	4639      	mov	r1, r7
   83634:	b00a      	add	sp, #40	; 0x28
   83636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8363a:	4620      	mov	r0, r4
   8363c:	4629      	mov	r1, r5
   8363e:	f000 fbab 	bl	83d98 <fabs>
   83642:	2200      	movs	r2, #0
   83644:	4b16      	ldr	r3, [pc, #88]	; (836a0 <acos+0x98>)
   83646:	f001 f823 	bl	84690 <__aeabi_dcmpgt>
   8364a:	2800      	cmp	r0, #0
   8364c:	d0f0      	beq.n	83630 <acos+0x28>
   8364e:	4915      	ldr	r1, [pc, #84]	; (836a4 <acos+0x9c>)
   83650:	2300      	movs	r3, #0
   83652:	2201      	movs	r2, #1
   83654:	4814      	ldr	r0, [pc, #80]	; (836a8 <acos+0xa0>)
   83656:	9308      	str	r3, [sp, #32]
   83658:	e9cd 4504 	strd	r4, r5, [sp, #16]
   8365c:	e9cd 4502 	strd	r4, r5, [sp, #8]
   83660:	9101      	str	r1, [sp, #4]
   83662:	9200      	str	r2, [sp, #0]
   83664:	f000 fbc6 	bl	83df4 <nan>
   83668:	f998 3000 	ldrsb.w	r3, [r8]
   8366c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   83670:	2b02      	cmp	r3, #2
   83672:	d00a      	beq.n	8368a <acos+0x82>
   83674:	4668      	mov	r0, sp
   83676:	f000 fbbb 	bl	83df0 <matherr>
   8367a:	b130      	cbz	r0, 8368a <acos+0x82>
   8367c:	9b08      	ldr	r3, [sp, #32]
   8367e:	b94b      	cbnz	r3, 83694 <acos+0x8c>
   83680:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   83684:	b00a      	add	sp, #40	; 0x28
   83686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8368a:	f001 f833 	bl	846f4 <__errno>
   8368e:	2321      	movs	r3, #33	; 0x21
   83690:	6003      	str	r3, [r0, #0]
   83692:	e7f3      	b.n	8367c <acos+0x74>
   83694:	f001 f82e 	bl	846f4 <__errno>
   83698:	9b08      	ldr	r3, [sp, #32]
   8369a:	6003      	str	r3, [r0, #0]
   8369c:	e7f0      	b.n	83680 <acos+0x78>
   8369e:	bf00      	nop
   836a0:	3ff00000 	.word	0x3ff00000
   836a4:	0008a77c 	.word	0x0008a77c
   836a8:	0008a690 	.word	0x0008a690
   836ac:	200701b0 	.word	0x200701b0

000836b0 <sqrt>:
   836b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   836b4:	b08a      	sub	sp, #40	; 0x28
   836b6:	4604      	mov	r4, r0
   836b8:	460d      	mov	r5, r1
   836ba:	f000 faad 	bl	83c18 <__ieee754_sqrt>
   836be:	f8df a098 	ldr.w	sl, [pc, #152]	; 83758 <sqrt+0xa8>
   836c2:	4606      	mov	r6, r0
   836c4:	f99a 3000 	ldrsb.w	r3, [sl]
   836c8:	460f      	mov	r7, r1
   836ca:	3301      	adds	r3, #1
   836cc:	d00f      	beq.n	836ee <sqrt+0x3e>
   836ce:	4620      	mov	r0, r4
   836d0:	4629      	mov	r1, r5
   836d2:	f000 fb65 	bl	83da0 <__fpclassifyd>
   836d6:	b150      	cbz	r0, 836ee <sqrt+0x3e>
   836d8:	f04f 0800 	mov.w	r8, #0
   836dc:	f04f 0900 	mov.w	r9, #0
   836e0:	4642      	mov	r2, r8
   836e2:	464b      	mov	r3, r9
   836e4:	4620      	mov	r0, r4
   836e6:	4629      	mov	r1, r5
   836e8:	f000 ffb4 	bl	84654 <__aeabi_dcmplt>
   836ec:	b920      	cbnz	r0, 836f8 <sqrt+0x48>
   836ee:	4630      	mov	r0, r6
   836f0:	4639      	mov	r1, r7
   836f2:	b00a      	add	sp, #40	; 0x28
   836f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   836f8:	4916      	ldr	r1, [pc, #88]	; (83754 <sqrt+0xa4>)
   836fa:	f89a 6000 	ldrb.w	r6, [sl]
   836fe:	2201      	movs	r2, #1
   83700:	2300      	movs	r3, #0
   83702:	e9cd 4504 	strd	r4, r5, [sp, #16]
   83706:	e9cd 4502 	strd	r4, r5, [sp, #8]
   8370a:	9101      	str	r1, [sp, #4]
   8370c:	9200      	str	r2, [sp, #0]
   8370e:	9308      	str	r3, [sp, #32]
   83710:	b966      	cbnz	r6, 8372c <sqrt+0x7c>
   83712:	e9cd 8906 	strd	r8, r9, [sp, #24]
   83716:	4668      	mov	r0, sp
   83718:	f000 fb6a 	bl	83df0 <matherr>
   8371c:	b180      	cbz	r0, 83740 <sqrt+0x90>
   8371e:	9b08      	ldr	r3, [sp, #32]
   83720:	b99b      	cbnz	r3, 8374a <sqrt+0x9a>
   83722:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   83726:	b00a      	add	sp, #40	; 0x28
   83728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8372c:	4640      	mov	r0, r8
   8372e:	4649      	mov	r1, r9
   83730:	4642      	mov	r2, r8
   83732:	464b      	mov	r3, r9
   83734:	f000 fe46 	bl	843c4 <__aeabi_ddiv>
   83738:	2e02      	cmp	r6, #2
   8373a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   8373e:	d1ea      	bne.n	83716 <sqrt+0x66>
   83740:	f000 ffd8 	bl	846f4 <__errno>
   83744:	2321      	movs	r3, #33	; 0x21
   83746:	6003      	str	r3, [r0, #0]
   83748:	e7e9      	b.n	8371e <sqrt+0x6e>
   8374a:	f000 ffd3 	bl	846f4 <__errno>
   8374e:	9b08      	ldr	r3, [sp, #32]
   83750:	6003      	str	r3, [r0, #0]
   83752:	e7e6      	b.n	83722 <sqrt+0x72>
   83754:	0008a784 	.word	0x0008a784
   83758:	200701b0 	.word	0x200701b0
   8375c:	00000000 	.word	0x00000000

00083760 <__ieee754_acos>:
   83760:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83764:	4f80      	ldr	r7, [pc, #512]	; (83968 <__ieee754_acos+0x208>)
   83766:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   8376a:	42be      	cmp	r6, r7
   8376c:	4604      	mov	r4, r0
   8376e:	460d      	mov	r5, r1
   83770:	dd0e      	ble.n	83790 <__ieee754_acos+0x30>
   83772:	f106 4c40 	add.w	ip, r6, #3221225472	; 0xc0000000
   83776:	f50c 1c80 	add.w	ip, ip, #1048576	; 0x100000
   8377a:	ea5c 0c00 	orrs.w	ip, ip, r0
   8377e:	f040 80bb 	bne.w	838f8 <__ieee754_acos+0x198>
   83782:	2900      	cmp	r1, #0
   83784:	f340 817c 	ble.w	83a80 <__ieee754_acos+0x320>
   83788:	2000      	movs	r0, #0
   8378a:	2100      	movs	r1, #0
   8378c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83790:	4f76      	ldr	r7, [pc, #472]	; (8396c <__ieee754_acos+0x20c>)
   83792:	42be      	cmp	r6, r7
   83794:	f340 80a8 	ble.w	838e8 <__ieee754_acos+0x188>
   83798:	2900      	cmp	r1, #0
   8379a:	f2c0 8176 	blt.w	83a8a <__ieee754_acos+0x32a>
   8379e:	4602      	mov	r2, r0
   837a0:	460b      	mov	r3, r1
   837a2:	2000      	movs	r0, #0
   837a4:	4972      	ldr	r1, [pc, #456]	; (83970 <__ieee754_acos+0x210>)
   837a6:	f000 fb2f 	bl	83e08 <__aeabi_dsub>
   837aa:	2200      	movs	r2, #0
   837ac:	4b71      	ldr	r3, [pc, #452]	; (83974 <__ieee754_acos+0x214>)
   837ae:	f000 fcdf 	bl	84170 <__aeabi_dmul>
   837b2:	4604      	mov	r4, r0
   837b4:	460d      	mov	r5, r1
   837b6:	f000 fa2f 	bl	83c18 <__ieee754_sqrt>
   837ba:	a355      	add	r3, pc, #340	; (adr r3, 83910 <__ieee754_acos+0x1b0>)
   837bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   837c0:	4689      	mov	r9, r1
   837c2:	4680      	mov	r8, r0
   837c4:	4629      	mov	r1, r5
   837c6:	4620      	mov	r0, r4
   837c8:	f000 fcd2 	bl	84170 <__aeabi_dmul>
   837cc:	a352      	add	r3, pc, #328	; (adr r3, 83918 <__ieee754_acos+0x1b8>)
   837ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   837d2:	f000 fb1b 	bl	83e0c <__adddf3>
   837d6:	4622      	mov	r2, r4
   837d8:	462b      	mov	r3, r5
   837da:	f000 fcc9 	bl	84170 <__aeabi_dmul>
   837de:	a350      	add	r3, pc, #320	; (adr r3, 83920 <__ieee754_acos+0x1c0>)
   837e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   837e4:	f000 fb10 	bl	83e08 <__aeabi_dsub>
   837e8:	4622      	mov	r2, r4
   837ea:	462b      	mov	r3, r5
   837ec:	f000 fcc0 	bl	84170 <__aeabi_dmul>
   837f0:	a34d      	add	r3, pc, #308	; (adr r3, 83928 <__ieee754_acos+0x1c8>)
   837f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   837f6:	f000 fb09 	bl	83e0c <__adddf3>
   837fa:	4622      	mov	r2, r4
   837fc:	462b      	mov	r3, r5
   837fe:	f000 fcb7 	bl	84170 <__aeabi_dmul>
   83802:	a34b      	add	r3, pc, #300	; (adr r3, 83930 <__ieee754_acos+0x1d0>)
   83804:	e9d3 2300 	ldrd	r2, r3, [r3]
   83808:	f000 fafe 	bl	83e08 <__aeabi_dsub>
   8380c:	4622      	mov	r2, r4
   8380e:	462b      	mov	r3, r5
   83810:	f000 fcae 	bl	84170 <__aeabi_dmul>
   83814:	a348      	add	r3, pc, #288	; (adr r3, 83938 <__ieee754_acos+0x1d8>)
   83816:	e9d3 2300 	ldrd	r2, r3, [r3]
   8381a:	f000 faf7 	bl	83e0c <__adddf3>
   8381e:	4622      	mov	r2, r4
   83820:	462b      	mov	r3, r5
   83822:	f000 fca5 	bl	84170 <__aeabi_dmul>
   83826:	a346      	add	r3, pc, #280	; (adr r3, 83940 <__ieee754_acos+0x1e0>)
   83828:	e9d3 2300 	ldrd	r2, r3, [r3]
   8382c:	4682      	mov	sl, r0
   8382e:	468b      	mov	fp, r1
   83830:	4620      	mov	r0, r4
   83832:	4629      	mov	r1, r5
   83834:	f000 fc9c 	bl	84170 <__aeabi_dmul>
   83838:	a343      	add	r3, pc, #268	; (adr r3, 83948 <__ieee754_acos+0x1e8>)
   8383a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8383e:	f000 fae3 	bl	83e08 <__aeabi_dsub>
   83842:	4622      	mov	r2, r4
   83844:	462b      	mov	r3, r5
   83846:	f000 fc93 	bl	84170 <__aeabi_dmul>
   8384a:	a341      	add	r3, pc, #260	; (adr r3, 83950 <__ieee754_acos+0x1f0>)
   8384c:	e9d3 2300 	ldrd	r2, r3, [r3]
   83850:	f000 fadc 	bl	83e0c <__adddf3>
   83854:	4622      	mov	r2, r4
   83856:	462b      	mov	r3, r5
   83858:	f000 fc8a 	bl	84170 <__aeabi_dmul>
   8385c:	a33e      	add	r3, pc, #248	; (adr r3, 83958 <__ieee754_acos+0x1f8>)
   8385e:	e9d3 2300 	ldrd	r2, r3, [r3]
   83862:	f000 fad1 	bl	83e08 <__aeabi_dsub>
   83866:	4622      	mov	r2, r4
   83868:	462b      	mov	r3, r5
   8386a:	f000 fc81 	bl	84170 <__aeabi_dmul>
   8386e:	2200      	movs	r2, #0
   83870:	4b3f      	ldr	r3, [pc, #252]	; (83970 <__ieee754_acos+0x210>)
   83872:	f000 facb 	bl	83e0c <__adddf3>
   83876:	4602      	mov	r2, r0
   83878:	460b      	mov	r3, r1
   8387a:	4650      	mov	r0, sl
   8387c:	4659      	mov	r1, fp
   8387e:	f000 fda1 	bl	843c4 <__aeabi_ddiv>
   83882:	4642      	mov	r2, r8
   83884:	464b      	mov	r3, r9
   83886:	f000 fc73 	bl	84170 <__aeabi_dmul>
   8388a:	2600      	movs	r6, #0
   8388c:	4682      	mov	sl, r0
   8388e:	468b      	mov	fp, r1
   83890:	4632      	mov	r2, r6
   83892:	464b      	mov	r3, r9
   83894:	4630      	mov	r0, r6
   83896:	4649      	mov	r1, r9
   83898:	f000 fc6a 	bl	84170 <__aeabi_dmul>
   8389c:	4602      	mov	r2, r0
   8389e:	460b      	mov	r3, r1
   838a0:	4620      	mov	r0, r4
   838a2:	4629      	mov	r1, r5
   838a4:	f000 fab0 	bl	83e08 <__aeabi_dsub>
   838a8:	4632      	mov	r2, r6
   838aa:	4604      	mov	r4, r0
   838ac:	460d      	mov	r5, r1
   838ae:	464b      	mov	r3, r9
   838b0:	4640      	mov	r0, r8
   838b2:	4649      	mov	r1, r9
   838b4:	f000 faaa 	bl	83e0c <__adddf3>
   838b8:	4602      	mov	r2, r0
   838ba:	460b      	mov	r3, r1
   838bc:	4620      	mov	r0, r4
   838be:	4629      	mov	r1, r5
   838c0:	f000 fd80 	bl	843c4 <__aeabi_ddiv>
   838c4:	4602      	mov	r2, r0
   838c6:	460b      	mov	r3, r1
   838c8:	4650      	mov	r0, sl
   838ca:	4659      	mov	r1, fp
   838cc:	f000 fa9e 	bl	83e0c <__adddf3>
   838d0:	4602      	mov	r2, r0
   838d2:	460b      	mov	r3, r1
   838d4:	4630      	mov	r0, r6
   838d6:	4649      	mov	r1, r9
   838d8:	f000 fa98 	bl	83e0c <__adddf3>
   838dc:	4602      	mov	r2, r0
   838de:	460b      	mov	r3, r1
   838e0:	f000 fa94 	bl	83e0c <__adddf3>
   838e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   838e8:	4b23      	ldr	r3, [pc, #140]	; (83978 <__ieee754_acos+0x218>)
   838ea:	429e      	cmp	r6, r3
   838ec:	dc46      	bgt.n	8397c <__ieee754_acos+0x21c>
   838ee:	a11c      	add	r1, pc, #112	; (adr r1, 83960 <__ieee754_acos+0x200>)
   838f0:	e9d1 0100 	ldrd	r0, r1, [r1]
   838f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   838f8:	4602      	mov	r2, r0
   838fa:	460b      	mov	r3, r1
   838fc:	f000 fa84 	bl	83e08 <__aeabi_dsub>
   83900:	4602      	mov	r2, r0
   83902:	460b      	mov	r3, r1
   83904:	f000 fd5e 	bl	843c4 <__aeabi_ddiv>
   83908:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8390c:	f3af 8000 	nop.w
   83910:	0dfdf709 	.word	0x0dfdf709
   83914:	3f023de1 	.word	0x3f023de1
   83918:	7501b288 	.word	0x7501b288
   8391c:	3f49efe0 	.word	0x3f49efe0
   83920:	b5688f3b 	.word	0xb5688f3b
   83924:	3fa48228 	.word	0x3fa48228
   83928:	0e884455 	.word	0x0e884455
   8392c:	3fc9c155 	.word	0x3fc9c155
   83930:	03eb6f7d 	.word	0x03eb6f7d
   83934:	3fd4d612 	.word	0x3fd4d612
   83938:	55555555 	.word	0x55555555
   8393c:	3fc55555 	.word	0x3fc55555
   83940:	b12e9282 	.word	0xb12e9282
   83944:	3fb3b8c5 	.word	0x3fb3b8c5
   83948:	1b8d0159 	.word	0x1b8d0159
   8394c:	3fe6066c 	.word	0x3fe6066c
   83950:	9c598ac8 	.word	0x9c598ac8
   83954:	40002ae5 	.word	0x40002ae5
   83958:	1c8a2d4b 	.word	0x1c8a2d4b
   8395c:	40033a27 	.word	0x40033a27
   83960:	54442d18 	.word	0x54442d18
   83964:	3ff921fb 	.word	0x3ff921fb
   83968:	3fefffff 	.word	0x3fefffff
   8396c:	3fdfffff 	.word	0x3fdfffff
   83970:	3ff00000 	.word	0x3ff00000
   83974:	3fe00000 	.word	0x3fe00000
   83978:	3c600000 	.word	0x3c600000
   8397c:	4602      	mov	r2, r0
   8397e:	460b      	mov	r3, r1
   83980:	f000 fbf6 	bl	84170 <__aeabi_dmul>
   83984:	a388      	add	r3, pc, #544	; (adr r3, 83ba8 <__ieee754_acos+0x448>)
   83986:	e9d3 2300 	ldrd	r2, r3, [r3]
   8398a:	4606      	mov	r6, r0
   8398c:	460f      	mov	r7, r1
   8398e:	f000 fbef 	bl	84170 <__aeabi_dmul>
   83992:	a387      	add	r3, pc, #540	; (adr r3, 83bb0 <__ieee754_acos+0x450>)
   83994:	e9d3 2300 	ldrd	r2, r3, [r3]
   83998:	f000 fa38 	bl	83e0c <__adddf3>
   8399c:	4632      	mov	r2, r6
   8399e:	463b      	mov	r3, r7
   839a0:	f000 fbe6 	bl	84170 <__aeabi_dmul>
   839a4:	a384      	add	r3, pc, #528	; (adr r3, 83bb8 <__ieee754_acos+0x458>)
   839a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   839aa:	f000 fa2d 	bl	83e08 <__aeabi_dsub>
   839ae:	4632      	mov	r2, r6
   839b0:	463b      	mov	r3, r7
   839b2:	f000 fbdd 	bl	84170 <__aeabi_dmul>
   839b6:	a382      	add	r3, pc, #520	; (adr r3, 83bc0 <__ieee754_acos+0x460>)
   839b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   839bc:	f000 fa26 	bl	83e0c <__adddf3>
   839c0:	4632      	mov	r2, r6
   839c2:	463b      	mov	r3, r7
   839c4:	f000 fbd4 	bl	84170 <__aeabi_dmul>
   839c8:	a37f      	add	r3, pc, #508	; (adr r3, 83bc8 <__ieee754_acos+0x468>)
   839ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   839ce:	f000 fa1b 	bl	83e08 <__aeabi_dsub>
   839d2:	4632      	mov	r2, r6
   839d4:	463b      	mov	r3, r7
   839d6:	f000 fbcb 	bl	84170 <__aeabi_dmul>
   839da:	a37d      	add	r3, pc, #500	; (adr r3, 83bd0 <__ieee754_acos+0x470>)
   839dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   839e0:	f000 fa14 	bl	83e0c <__adddf3>
   839e4:	4632      	mov	r2, r6
   839e6:	463b      	mov	r3, r7
   839e8:	f000 fbc2 	bl	84170 <__aeabi_dmul>
   839ec:	a37a      	add	r3, pc, #488	; (adr r3, 83bd8 <__ieee754_acos+0x478>)
   839ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   839f2:	4680      	mov	r8, r0
   839f4:	4689      	mov	r9, r1
   839f6:	4630      	mov	r0, r6
   839f8:	4639      	mov	r1, r7
   839fa:	f000 fbb9 	bl	84170 <__aeabi_dmul>
   839fe:	a378      	add	r3, pc, #480	; (adr r3, 83be0 <__ieee754_acos+0x480>)
   83a00:	e9d3 2300 	ldrd	r2, r3, [r3]
   83a04:	f000 fa00 	bl	83e08 <__aeabi_dsub>
   83a08:	4632      	mov	r2, r6
   83a0a:	463b      	mov	r3, r7
   83a0c:	f000 fbb0 	bl	84170 <__aeabi_dmul>
   83a10:	a375      	add	r3, pc, #468	; (adr r3, 83be8 <__ieee754_acos+0x488>)
   83a12:	e9d3 2300 	ldrd	r2, r3, [r3]
   83a16:	f000 f9f9 	bl	83e0c <__adddf3>
   83a1a:	4632      	mov	r2, r6
   83a1c:	463b      	mov	r3, r7
   83a1e:	f000 fba7 	bl	84170 <__aeabi_dmul>
   83a22:	a373      	add	r3, pc, #460	; (adr r3, 83bf0 <__ieee754_acos+0x490>)
   83a24:	e9d3 2300 	ldrd	r2, r3, [r3]
   83a28:	f000 f9ee 	bl	83e08 <__aeabi_dsub>
   83a2c:	4632      	mov	r2, r6
   83a2e:	463b      	mov	r3, r7
   83a30:	f000 fb9e 	bl	84170 <__aeabi_dmul>
   83a34:	2200      	movs	r2, #0
   83a36:	4b76      	ldr	r3, [pc, #472]	; (83c10 <__ieee754_acos+0x4b0>)
   83a38:	f000 f9e8 	bl	83e0c <__adddf3>
   83a3c:	4602      	mov	r2, r0
   83a3e:	460b      	mov	r3, r1
   83a40:	4640      	mov	r0, r8
   83a42:	4649      	mov	r1, r9
   83a44:	f000 fcbe 	bl	843c4 <__aeabi_ddiv>
   83a48:	4602      	mov	r2, r0
   83a4a:	460b      	mov	r3, r1
   83a4c:	4620      	mov	r0, r4
   83a4e:	4629      	mov	r1, r5
   83a50:	f000 fb8e 	bl	84170 <__aeabi_dmul>
   83a54:	4602      	mov	r2, r0
   83a56:	460b      	mov	r3, r1
   83a58:	a167      	add	r1, pc, #412	; (adr r1, 83bf8 <__ieee754_acos+0x498>)
   83a5a:	e9d1 0100 	ldrd	r0, r1, [r1]
   83a5e:	f000 f9d3 	bl	83e08 <__aeabi_dsub>
   83a62:	4602      	mov	r2, r0
   83a64:	460b      	mov	r3, r1
   83a66:	4620      	mov	r0, r4
   83a68:	4629      	mov	r1, r5
   83a6a:	f000 f9cd 	bl	83e08 <__aeabi_dsub>
   83a6e:	4602      	mov	r2, r0
   83a70:	460b      	mov	r3, r1
   83a72:	a163      	add	r1, pc, #396	; (adr r1, 83c00 <__ieee754_acos+0x4a0>)
   83a74:	e9d1 0100 	ldrd	r0, r1, [r1]
   83a78:	f000 f9c6 	bl	83e08 <__aeabi_dsub>
   83a7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83a80:	a161      	add	r1, pc, #388	; (adr r1, 83c08 <__ieee754_acos+0x4a8>)
   83a82:	e9d1 0100 	ldrd	r0, r1, [r1]
   83a86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83a8a:	2200      	movs	r2, #0
   83a8c:	4b60      	ldr	r3, [pc, #384]	; (83c10 <__ieee754_acos+0x4b0>)
   83a8e:	f000 f9bd 	bl	83e0c <__adddf3>
   83a92:	2200      	movs	r2, #0
   83a94:	4b5f      	ldr	r3, [pc, #380]	; (83c14 <__ieee754_acos+0x4b4>)
   83a96:	f000 fb6b 	bl	84170 <__aeabi_dmul>
   83a9a:	a343      	add	r3, pc, #268	; (adr r3, 83ba8 <__ieee754_acos+0x448>)
   83a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   83aa0:	4604      	mov	r4, r0
   83aa2:	460d      	mov	r5, r1
   83aa4:	f000 fb64 	bl	84170 <__aeabi_dmul>
   83aa8:	a341      	add	r3, pc, #260	; (adr r3, 83bb0 <__ieee754_acos+0x450>)
   83aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   83aae:	f000 f9ad 	bl	83e0c <__adddf3>
   83ab2:	4622      	mov	r2, r4
   83ab4:	462b      	mov	r3, r5
   83ab6:	f000 fb5b 	bl	84170 <__aeabi_dmul>
   83aba:	a33f      	add	r3, pc, #252	; (adr r3, 83bb8 <__ieee754_acos+0x458>)
   83abc:	e9d3 2300 	ldrd	r2, r3, [r3]
   83ac0:	f000 f9a2 	bl	83e08 <__aeabi_dsub>
   83ac4:	4622      	mov	r2, r4
   83ac6:	462b      	mov	r3, r5
   83ac8:	f000 fb52 	bl	84170 <__aeabi_dmul>
   83acc:	a33c      	add	r3, pc, #240	; (adr r3, 83bc0 <__ieee754_acos+0x460>)
   83ace:	e9d3 2300 	ldrd	r2, r3, [r3]
   83ad2:	f000 f99b 	bl	83e0c <__adddf3>
   83ad6:	4622      	mov	r2, r4
   83ad8:	462b      	mov	r3, r5
   83ada:	f000 fb49 	bl	84170 <__aeabi_dmul>
   83ade:	a33a      	add	r3, pc, #232	; (adr r3, 83bc8 <__ieee754_acos+0x468>)
   83ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
   83ae4:	f000 f990 	bl	83e08 <__aeabi_dsub>
   83ae8:	4622      	mov	r2, r4
   83aea:	462b      	mov	r3, r5
   83aec:	f000 fb40 	bl	84170 <__aeabi_dmul>
   83af0:	a337      	add	r3, pc, #220	; (adr r3, 83bd0 <__ieee754_acos+0x470>)
   83af2:	e9d3 2300 	ldrd	r2, r3, [r3]
   83af6:	f000 f989 	bl	83e0c <__adddf3>
   83afa:	4622      	mov	r2, r4
   83afc:	462b      	mov	r3, r5
   83afe:	f000 fb37 	bl	84170 <__aeabi_dmul>
   83b02:	4680      	mov	r8, r0
   83b04:	4689      	mov	r9, r1
   83b06:	4620      	mov	r0, r4
   83b08:	4629      	mov	r1, r5
   83b0a:	f000 f885 	bl	83c18 <__ieee754_sqrt>
   83b0e:	a332      	add	r3, pc, #200	; (adr r3, 83bd8 <__ieee754_acos+0x478>)
   83b10:	e9d3 2300 	ldrd	r2, r3, [r3]
   83b14:	4606      	mov	r6, r0
   83b16:	460f      	mov	r7, r1
   83b18:	4620      	mov	r0, r4
   83b1a:	4629      	mov	r1, r5
   83b1c:	f000 fb28 	bl	84170 <__aeabi_dmul>
   83b20:	a32f      	add	r3, pc, #188	; (adr r3, 83be0 <__ieee754_acos+0x480>)
   83b22:	e9d3 2300 	ldrd	r2, r3, [r3]
   83b26:	f000 f96f 	bl	83e08 <__aeabi_dsub>
   83b2a:	4622      	mov	r2, r4
   83b2c:	462b      	mov	r3, r5
   83b2e:	f000 fb1f 	bl	84170 <__aeabi_dmul>
   83b32:	a32d      	add	r3, pc, #180	; (adr r3, 83be8 <__ieee754_acos+0x488>)
   83b34:	e9d3 2300 	ldrd	r2, r3, [r3]
   83b38:	f000 f968 	bl	83e0c <__adddf3>
   83b3c:	4622      	mov	r2, r4
   83b3e:	462b      	mov	r3, r5
   83b40:	f000 fb16 	bl	84170 <__aeabi_dmul>
   83b44:	a32a      	add	r3, pc, #168	; (adr r3, 83bf0 <__ieee754_acos+0x490>)
   83b46:	e9d3 2300 	ldrd	r2, r3, [r3]
   83b4a:	f000 f95d 	bl	83e08 <__aeabi_dsub>
   83b4e:	4622      	mov	r2, r4
   83b50:	462b      	mov	r3, r5
   83b52:	f000 fb0d 	bl	84170 <__aeabi_dmul>
   83b56:	2200      	movs	r2, #0
   83b58:	4b2d      	ldr	r3, [pc, #180]	; (83c10 <__ieee754_acos+0x4b0>)
   83b5a:	f000 f957 	bl	83e0c <__adddf3>
   83b5e:	4602      	mov	r2, r0
   83b60:	460b      	mov	r3, r1
   83b62:	4640      	mov	r0, r8
   83b64:	4649      	mov	r1, r9
   83b66:	f000 fc2d 	bl	843c4 <__aeabi_ddiv>
   83b6a:	4632      	mov	r2, r6
   83b6c:	463b      	mov	r3, r7
   83b6e:	f000 faff 	bl	84170 <__aeabi_dmul>
   83b72:	a321      	add	r3, pc, #132	; (adr r3, 83bf8 <__ieee754_acos+0x498>)
   83b74:	e9d3 2300 	ldrd	r2, r3, [r3]
   83b78:	f000 f946 	bl	83e08 <__aeabi_dsub>
   83b7c:	4602      	mov	r2, r0
   83b7e:	460b      	mov	r3, r1
   83b80:	4630      	mov	r0, r6
   83b82:	4639      	mov	r1, r7
   83b84:	f000 f942 	bl	83e0c <__adddf3>
   83b88:	4602      	mov	r2, r0
   83b8a:	460b      	mov	r3, r1
   83b8c:	f000 f93e 	bl	83e0c <__adddf3>
   83b90:	4602      	mov	r2, r0
   83b92:	460b      	mov	r3, r1
   83b94:	a11c      	add	r1, pc, #112	; (adr r1, 83c08 <__ieee754_acos+0x4a8>)
   83b96:	e9d1 0100 	ldrd	r0, r1, [r1]
   83b9a:	f000 f935 	bl	83e08 <__aeabi_dsub>
   83b9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83ba2:	bf00      	nop
   83ba4:	f3af 8000 	nop.w
   83ba8:	0dfdf709 	.word	0x0dfdf709
   83bac:	3f023de1 	.word	0x3f023de1
   83bb0:	7501b288 	.word	0x7501b288
   83bb4:	3f49efe0 	.word	0x3f49efe0
   83bb8:	b5688f3b 	.word	0xb5688f3b
   83bbc:	3fa48228 	.word	0x3fa48228
   83bc0:	0e884455 	.word	0x0e884455
   83bc4:	3fc9c155 	.word	0x3fc9c155
   83bc8:	03eb6f7d 	.word	0x03eb6f7d
   83bcc:	3fd4d612 	.word	0x3fd4d612
   83bd0:	55555555 	.word	0x55555555
   83bd4:	3fc55555 	.word	0x3fc55555
   83bd8:	b12e9282 	.word	0xb12e9282
   83bdc:	3fb3b8c5 	.word	0x3fb3b8c5
   83be0:	1b8d0159 	.word	0x1b8d0159
   83be4:	3fe6066c 	.word	0x3fe6066c
   83be8:	9c598ac8 	.word	0x9c598ac8
   83bec:	40002ae5 	.word	0x40002ae5
   83bf0:	1c8a2d4b 	.word	0x1c8a2d4b
   83bf4:	40033a27 	.word	0x40033a27
   83bf8:	33145c07 	.word	0x33145c07
   83bfc:	3c91a626 	.word	0x3c91a626
   83c00:	54442d18 	.word	0x54442d18
   83c04:	3ff921fb 	.word	0x3ff921fb
   83c08:	54442d18 	.word	0x54442d18
   83c0c:	400921fb 	.word	0x400921fb
   83c10:	3ff00000 	.word	0x3ff00000
   83c14:	3fe00000 	.word	0x3fe00000

00083c18 <__ieee754_sqrt>:
   83c18:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   83c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83c20:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
   83c24:	f8df 816c 	ldr.w	r8, [pc, #364]	; 83d94 <__ieee754_sqrt+0x17c>
   83c28:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
   83c2c:	45c4      	cmp	ip, r8
   83c2e:	4606      	mov	r6, r0
   83c30:	460f      	mov	r7, r1
   83c32:	460b      	mov	r3, r1
   83c34:	4602      	mov	r2, r0
   83c36:	f000 808f 	beq.w	83d58 <__ieee754_sqrt+0x140>
   83c3a:	2900      	cmp	r1, #0
   83c3c:	dd6f      	ble.n	83d1e <__ieee754_sqrt+0x106>
   83c3e:	150f      	asrs	r7, r1, #20
   83c40:	d078      	beq.n	83d34 <__ieee754_sqrt+0x11c>
   83c42:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   83c46:	f3c3 0313 	ubfx	r3, r3, #0, #20
   83c4a:	07f9      	lsls	r1, r7, #31
   83c4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83c50:	d460      	bmi.n	83d14 <__ieee754_sqrt+0xfc>
   83c52:	0fd1      	lsrs	r1, r2, #31
   83c54:	f04f 0c00 	mov.w	ip, #0
   83c58:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   83c5c:	107f      	asrs	r7, r7, #1
   83c5e:	0052      	lsls	r2, r2, #1
   83c60:	4665      	mov	r5, ip
   83c62:	2016      	movs	r0, #22
   83c64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   83c68:	186c      	adds	r4, r5, r1
   83c6a:	429c      	cmp	r4, r3
   83c6c:	ea4f 76d2 	mov.w	r6, r2, lsr #31
   83c70:	ea4f 0242 	mov.w	r2, r2, lsl #1
   83c74:	dc02      	bgt.n	83c7c <__ieee754_sqrt+0x64>
   83c76:	1b1b      	subs	r3, r3, r4
   83c78:	1865      	adds	r5, r4, r1
   83c7a:	448c      	add	ip, r1
   83c7c:	3801      	subs	r0, #1
   83c7e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   83c82:	ea4f 0151 	mov.w	r1, r1, lsr #1
   83c86:	d1ef      	bne.n	83c68 <__ieee754_sqrt+0x50>
   83c88:	4680      	mov	r8, r0
   83c8a:	2620      	movs	r6, #32
   83c8c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   83c90:	e009      	b.n	83ca6 <__ieee754_sqrt+0x8e>
   83c92:	d023      	beq.n	83cdc <__ieee754_sqrt+0xc4>
   83c94:	0fd4      	lsrs	r4, r2, #31
   83c96:	3e01      	subs	r6, #1
   83c98:	ea4f 0151 	mov.w	r1, r1, lsr #1
   83c9c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   83ca0:	ea4f 0242 	mov.w	r2, r2, lsl #1
   83ca4:	d01e      	beq.n	83ce4 <__ieee754_sqrt+0xcc>
   83ca6:	42ab      	cmp	r3, r5
   83ca8:	eb01 0408 	add.w	r4, r1, r8
   83cac:	ddf1      	ble.n	83c92 <__ieee754_sqrt+0x7a>
   83cae:	f004 4900 	and.w	r9, r4, #2147483648	; 0x80000000
   83cb2:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
   83cb6:	eb04 0801 	add.w	r8, r4, r1
   83cba:	d009      	beq.n	83cd0 <__ieee754_sqrt+0xb8>
   83cbc:	46a9      	mov	r9, r5
   83cbe:	1b5b      	subs	r3, r3, r5
   83cc0:	4294      	cmp	r4, r2
   83cc2:	bf88      	it	hi
   83cc4:	f103 33ff 	addhi.w	r3, r3, #4294967295
   83cc8:	1b12      	subs	r2, r2, r4
   83cca:	4408      	add	r0, r1
   83ccc:	464d      	mov	r5, r9
   83cce:	e7e1      	b.n	83c94 <__ieee754_sqrt+0x7c>
   83cd0:	f1b8 0f00 	cmp.w	r8, #0
   83cd4:	dbf2      	blt.n	83cbc <__ieee754_sqrt+0xa4>
   83cd6:	f105 0901 	add.w	r9, r5, #1
   83cda:	e7f0      	b.n	83cbe <__ieee754_sqrt+0xa6>
   83cdc:	4294      	cmp	r4, r2
   83cde:	d9e6      	bls.n	83cae <__ieee754_sqrt+0x96>
   83ce0:	461d      	mov	r5, r3
   83ce2:	e7d7      	b.n	83c94 <__ieee754_sqrt+0x7c>
   83ce4:	431a      	orrs	r2, r3
   83ce6:	d004      	beq.n	83cf2 <__ieee754_sqrt+0xda>
   83ce8:	1c43      	adds	r3, r0, #1
   83cea:	d041      	beq.n	83d70 <__ieee754_sqrt+0x158>
   83cec:	f000 0301 	and.w	r3, r0, #1
   83cf0:	4418      	add	r0, r3
   83cf2:	0846      	lsrs	r6, r0, #1
   83cf4:	ea4f 036c 	mov.w	r3, ip, asr #1
   83cf8:	f01c 0f01 	tst.w	ip, #1
   83cfc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   83d00:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83d04:	bf18      	it	ne
   83d06:	f046 4600 	orrne.w	r6, r6, #2147483648	; 0x80000000
   83d0a:	eb03 5107 	add.w	r1, r3, r7, lsl #20
   83d0e:	4630      	mov	r0, r6
   83d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83d14:	0fd1      	lsrs	r1, r2, #31
   83d16:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   83d1a:	0052      	lsls	r2, r2, #1
   83d1c:	e799      	b.n	83c52 <__ieee754_sqrt+0x3a>
   83d1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   83d22:	4303      	orrs	r3, r0
   83d24:	d022      	beq.n	83d6c <__ieee754_sqrt+0x154>
   83d26:	bb51      	cbnz	r1, 83d7e <__ieee754_sqrt+0x166>
   83d28:	460f      	mov	r7, r1
   83d2a:	0ad3      	lsrs	r3, r2, #11
   83d2c:	3f15      	subs	r7, #21
   83d2e:	0552      	lsls	r2, r2, #21
   83d30:	2b00      	cmp	r3, #0
   83d32:	d0fa      	beq.n	83d2a <__ieee754_sqrt+0x112>
   83d34:	f413 1180 	ands.w	r1, r3, #1048576	; 0x100000
   83d38:	d11d      	bne.n	83d76 <__ieee754_sqrt+0x15e>
   83d3a:	005b      	lsls	r3, r3, #1
   83d3c:	02d8      	lsls	r0, r3, #11
   83d3e:	f101 0101 	add.w	r1, r1, #1
   83d42:	d5fa      	bpl.n	83d3a <__ieee754_sqrt+0x122>
   83d44:	f1c1 0001 	rsb	r0, r1, #1
   83d48:	f1c1 0420 	rsb	r4, r1, #32
   83d4c:	fa22 f404 	lsr.w	r4, r2, r4
   83d50:	4407      	add	r7, r0
   83d52:	408a      	lsls	r2, r1
   83d54:	4323      	orrs	r3, r4
   83d56:	e774      	b.n	83c42 <__ieee754_sqrt+0x2a>
   83d58:	4602      	mov	r2, r0
   83d5a:	460b      	mov	r3, r1
   83d5c:	f000 fa08 	bl	84170 <__aeabi_dmul>
   83d60:	4632      	mov	r2, r6
   83d62:	463b      	mov	r3, r7
   83d64:	f000 f852 	bl	83e0c <__adddf3>
   83d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83d70:	f10c 0c01 	add.w	ip, ip, #1
   83d74:	e7be      	b.n	83cf4 <__ieee754_sqrt+0xdc>
   83d76:	2420      	movs	r4, #32
   83d78:	2001      	movs	r0, #1
   83d7a:	2100      	movs	r1, #0
   83d7c:	e7e6      	b.n	83d4c <__ieee754_sqrt+0x134>
   83d7e:	4602      	mov	r2, r0
   83d80:	460b      	mov	r3, r1
   83d82:	f000 f841 	bl	83e08 <__aeabi_dsub>
   83d86:	4602      	mov	r2, r0
   83d88:	460b      	mov	r3, r1
   83d8a:	f000 fb1b 	bl	843c4 <__aeabi_ddiv>
   83d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83d92:	bf00      	nop
   83d94:	7ff00000 	.word	0x7ff00000

00083d98 <fabs>:
   83d98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83d9c:	4770      	bx	lr
   83d9e:	bf00      	nop

00083da0 <__fpclassifyd>:
   83da0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   83da4:	b410      	push	{r4}
   83da6:	d008      	beq.n	83dba <__fpclassifyd+0x1a>
   83da8:	4a0f      	ldr	r2, [pc, #60]	; (83de8 <__fpclassifyd+0x48>)
   83daa:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
   83dae:	4294      	cmp	r4, r2
   83db0:	d80a      	bhi.n	83dc8 <__fpclassifyd+0x28>
   83db2:	2004      	movs	r0, #4
   83db4:	f85d 4b04 	ldr.w	r4, [sp], #4
   83db8:	4770      	bx	lr
   83dba:	2800      	cmp	r0, #0
   83dbc:	bf0c      	ite	eq
   83dbe:	2002      	moveq	r0, #2
   83dc0:	2003      	movne	r0, #3
   83dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
   83dc6:	4770      	bx	lr
   83dc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   83dcc:	d201      	bcs.n	83dd2 <__fpclassifyd+0x32>
   83dce:	2003      	movs	r0, #3
   83dd0:	e7f7      	b.n	83dc2 <__fpclassifyd+0x22>
   83dd2:	4a06      	ldr	r2, [pc, #24]	; (83dec <__fpclassifyd+0x4c>)
   83dd4:	4293      	cmp	r3, r2
   83dd6:	d001      	beq.n	83ddc <__fpclassifyd+0x3c>
   83dd8:	2000      	movs	r0, #0
   83dda:	e7f2      	b.n	83dc2 <__fpclassifyd+0x22>
   83ddc:	f1d0 0001 	rsbs	r0, r0, #1
   83de0:	bf38      	it	cc
   83de2:	2000      	movcc	r0, #0
   83de4:	e7ed      	b.n	83dc2 <__fpclassifyd+0x22>
   83de6:	bf00      	nop
   83de8:	7fdfffff 	.word	0x7fdfffff
   83dec:	7ff00000 	.word	0x7ff00000

00083df0 <matherr>:
   83df0:	2000      	movs	r0, #0
   83df2:	4770      	bx	lr

00083df4 <nan>:
   83df4:	2000      	movs	r0, #0
   83df6:	4901      	ldr	r1, [pc, #4]	; (83dfc <nan+0x8>)
   83df8:	4770      	bx	lr
   83dfa:	bf00      	nop
   83dfc:	7ff80000 	.word	0x7ff80000

00083e00 <__aeabi_drsub>:
   83e00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   83e04:	e002      	b.n	83e0c <__adddf3>
   83e06:	bf00      	nop

00083e08 <__aeabi_dsub>:
   83e08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00083e0c <__adddf3>:
   83e0c:	b530      	push	{r4, r5, lr}
   83e0e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   83e12:	ea4f 0543 	mov.w	r5, r3, lsl #1
   83e16:	ea94 0f05 	teq	r4, r5
   83e1a:	bf08      	it	eq
   83e1c:	ea90 0f02 	teqeq	r0, r2
   83e20:	bf1f      	itttt	ne
   83e22:	ea54 0c00 	orrsne.w	ip, r4, r0
   83e26:	ea55 0c02 	orrsne.w	ip, r5, r2
   83e2a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   83e2e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83e32:	f000 80e2 	beq.w	83ffa <__adddf3+0x1ee>
   83e36:	ea4f 5454 	mov.w	r4, r4, lsr #21
   83e3a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   83e3e:	bfb8      	it	lt
   83e40:	426d      	neglt	r5, r5
   83e42:	dd0c      	ble.n	83e5e <__adddf3+0x52>
   83e44:	442c      	add	r4, r5
   83e46:	ea80 0202 	eor.w	r2, r0, r2
   83e4a:	ea81 0303 	eor.w	r3, r1, r3
   83e4e:	ea82 0000 	eor.w	r0, r2, r0
   83e52:	ea83 0101 	eor.w	r1, r3, r1
   83e56:	ea80 0202 	eor.w	r2, r0, r2
   83e5a:	ea81 0303 	eor.w	r3, r1, r3
   83e5e:	2d36      	cmp	r5, #54	; 0x36
   83e60:	bf88      	it	hi
   83e62:	bd30      	pophi	{r4, r5, pc}
   83e64:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83e68:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83e6c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   83e70:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   83e74:	d002      	beq.n	83e7c <__adddf3+0x70>
   83e76:	4240      	negs	r0, r0
   83e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83e7c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   83e80:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83e84:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   83e88:	d002      	beq.n	83e90 <__adddf3+0x84>
   83e8a:	4252      	negs	r2, r2
   83e8c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83e90:	ea94 0f05 	teq	r4, r5
   83e94:	f000 80a7 	beq.w	83fe6 <__adddf3+0x1da>
   83e98:	f1a4 0401 	sub.w	r4, r4, #1
   83e9c:	f1d5 0e20 	rsbs	lr, r5, #32
   83ea0:	db0d      	blt.n	83ebe <__adddf3+0xb2>
   83ea2:	fa02 fc0e 	lsl.w	ip, r2, lr
   83ea6:	fa22 f205 	lsr.w	r2, r2, r5
   83eaa:	1880      	adds	r0, r0, r2
   83eac:	f141 0100 	adc.w	r1, r1, #0
   83eb0:	fa03 f20e 	lsl.w	r2, r3, lr
   83eb4:	1880      	adds	r0, r0, r2
   83eb6:	fa43 f305 	asr.w	r3, r3, r5
   83eba:	4159      	adcs	r1, r3
   83ebc:	e00e      	b.n	83edc <__adddf3+0xd0>
   83ebe:	f1a5 0520 	sub.w	r5, r5, #32
   83ec2:	f10e 0e20 	add.w	lr, lr, #32
   83ec6:	2a01      	cmp	r2, #1
   83ec8:	fa03 fc0e 	lsl.w	ip, r3, lr
   83ecc:	bf28      	it	cs
   83ece:	f04c 0c02 	orrcs.w	ip, ip, #2
   83ed2:	fa43 f305 	asr.w	r3, r3, r5
   83ed6:	18c0      	adds	r0, r0, r3
   83ed8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   83edc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83ee0:	d507      	bpl.n	83ef2 <__adddf3+0xe6>
   83ee2:	f04f 0e00 	mov.w	lr, #0
   83ee6:	f1dc 0c00 	rsbs	ip, ip, #0
   83eea:	eb7e 0000 	sbcs.w	r0, lr, r0
   83eee:	eb6e 0101 	sbc.w	r1, lr, r1
   83ef2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   83ef6:	d31b      	bcc.n	83f30 <__adddf3+0x124>
   83ef8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   83efc:	d30c      	bcc.n	83f18 <__adddf3+0x10c>
   83efe:	0849      	lsrs	r1, r1, #1
   83f00:	ea5f 0030 	movs.w	r0, r0, rrx
   83f04:	ea4f 0c3c 	mov.w	ip, ip, rrx
   83f08:	f104 0401 	add.w	r4, r4, #1
   83f0c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   83f10:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   83f14:	f080 809a 	bcs.w	8404c <__adddf3+0x240>
   83f18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83f1c:	bf08      	it	eq
   83f1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83f22:	f150 0000 	adcs.w	r0, r0, #0
   83f26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83f2a:	ea41 0105 	orr.w	r1, r1, r5
   83f2e:	bd30      	pop	{r4, r5, pc}
   83f30:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   83f34:	4140      	adcs	r0, r0
   83f36:	eb41 0101 	adc.w	r1, r1, r1
   83f3a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83f3e:	f1a4 0401 	sub.w	r4, r4, #1
   83f42:	d1e9      	bne.n	83f18 <__adddf3+0x10c>
   83f44:	f091 0f00 	teq	r1, #0
   83f48:	bf04      	itt	eq
   83f4a:	4601      	moveq	r1, r0
   83f4c:	2000      	moveq	r0, #0
   83f4e:	fab1 f381 	clz	r3, r1
   83f52:	bf08      	it	eq
   83f54:	3320      	addeq	r3, #32
   83f56:	f1a3 030b 	sub.w	r3, r3, #11
   83f5a:	f1b3 0220 	subs.w	r2, r3, #32
   83f5e:	da0c      	bge.n	83f7a <__adddf3+0x16e>
   83f60:	320c      	adds	r2, #12
   83f62:	dd08      	ble.n	83f76 <__adddf3+0x16a>
   83f64:	f102 0c14 	add.w	ip, r2, #20
   83f68:	f1c2 020c 	rsb	r2, r2, #12
   83f6c:	fa01 f00c 	lsl.w	r0, r1, ip
   83f70:	fa21 f102 	lsr.w	r1, r1, r2
   83f74:	e00c      	b.n	83f90 <__adddf3+0x184>
   83f76:	f102 0214 	add.w	r2, r2, #20
   83f7a:	bfd8      	it	le
   83f7c:	f1c2 0c20 	rsble	ip, r2, #32
   83f80:	fa01 f102 	lsl.w	r1, r1, r2
   83f84:	fa20 fc0c 	lsr.w	ip, r0, ip
   83f88:	bfdc      	itt	le
   83f8a:	ea41 010c 	orrle.w	r1, r1, ip
   83f8e:	4090      	lslle	r0, r2
   83f90:	1ae4      	subs	r4, r4, r3
   83f92:	bfa2      	ittt	ge
   83f94:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   83f98:	4329      	orrge	r1, r5
   83f9a:	bd30      	popge	{r4, r5, pc}
   83f9c:	ea6f 0404 	mvn.w	r4, r4
   83fa0:	3c1f      	subs	r4, #31
   83fa2:	da1c      	bge.n	83fde <__adddf3+0x1d2>
   83fa4:	340c      	adds	r4, #12
   83fa6:	dc0e      	bgt.n	83fc6 <__adddf3+0x1ba>
   83fa8:	f104 0414 	add.w	r4, r4, #20
   83fac:	f1c4 0220 	rsb	r2, r4, #32
   83fb0:	fa20 f004 	lsr.w	r0, r0, r4
   83fb4:	fa01 f302 	lsl.w	r3, r1, r2
   83fb8:	ea40 0003 	orr.w	r0, r0, r3
   83fbc:	fa21 f304 	lsr.w	r3, r1, r4
   83fc0:	ea45 0103 	orr.w	r1, r5, r3
   83fc4:	bd30      	pop	{r4, r5, pc}
   83fc6:	f1c4 040c 	rsb	r4, r4, #12
   83fca:	f1c4 0220 	rsb	r2, r4, #32
   83fce:	fa20 f002 	lsr.w	r0, r0, r2
   83fd2:	fa01 f304 	lsl.w	r3, r1, r4
   83fd6:	ea40 0003 	orr.w	r0, r0, r3
   83fda:	4629      	mov	r1, r5
   83fdc:	bd30      	pop	{r4, r5, pc}
   83fde:	fa21 f004 	lsr.w	r0, r1, r4
   83fe2:	4629      	mov	r1, r5
   83fe4:	bd30      	pop	{r4, r5, pc}
   83fe6:	f094 0f00 	teq	r4, #0
   83fea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   83fee:	bf06      	itte	eq
   83ff0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   83ff4:	3401      	addeq	r4, #1
   83ff6:	3d01      	subne	r5, #1
   83ff8:	e74e      	b.n	83e98 <__adddf3+0x8c>
   83ffa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83ffe:	bf18      	it	ne
   84000:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   84004:	d029      	beq.n	8405a <__adddf3+0x24e>
   84006:	ea94 0f05 	teq	r4, r5
   8400a:	bf08      	it	eq
   8400c:	ea90 0f02 	teqeq	r0, r2
   84010:	d005      	beq.n	8401e <__adddf3+0x212>
   84012:	ea54 0c00 	orrs.w	ip, r4, r0
   84016:	bf04      	itt	eq
   84018:	4619      	moveq	r1, r3
   8401a:	4610      	moveq	r0, r2
   8401c:	bd30      	pop	{r4, r5, pc}
   8401e:	ea91 0f03 	teq	r1, r3
   84022:	bf1e      	ittt	ne
   84024:	2100      	movne	r1, #0
   84026:	2000      	movne	r0, #0
   84028:	bd30      	popne	{r4, r5, pc}
   8402a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8402e:	d105      	bne.n	8403c <__adddf3+0x230>
   84030:	0040      	lsls	r0, r0, #1
   84032:	4149      	adcs	r1, r1
   84034:	bf28      	it	cs
   84036:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8403a:	bd30      	pop	{r4, r5, pc}
   8403c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   84040:	bf3c      	itt	cc
   84042:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   84046:	bd30      	popcc	{r4, r5, pc}
   84048:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8404c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   84050:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   84054:	f04f 0000 	mov.w	r0, #0
   84058:	bd30      	pop	{r4, r5, pc}
   8405a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8405e:	bf1a      	itte	ne
   84060:	4619      	movne	r1, r3
   84062:	4610      	movne	r0, r2
   84064:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   84068:	bf1c      	itt	ne
   8406a:	460b      	movne	r3, r1
   8406c:	4602      	movne	r2, r0
   8406e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   84072:	bf06      	itte	eq
   84074:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   84078:	ea91 0f03 	teqeq	r1, r3
   8407c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   84080:	bd30      	pop	{r4, r5, pc}
   84082:	bf00      	nop

00084084 <__aeabi_ui2d>:
   84084:	f090 0f00 	teq	r0, #0
   84088:	bf04      	itt	eq
   8408a:	2100      	moveq	r1, #0
   8408c:	4770      	bxeq	lr
   8408e:	b530      	push	{r4, r5, lr}
   84090:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84094:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84098:	f04f 0500 	mov.w	r5, #0
   8409c:	f04f 0100 	mov.w	r1, #0
   840a0:	e750      	b.n	83f44 <__adddf3+0x138>
   840a2:	bf00      	nop

000840a4 <__aeabi_i2d>:
   840a4:	f090 0f00 	teq	r0, #0
   840a8:	bf04      	itt	eq
   840aa:	2100      	moveq	r1, #0
   840ac:	4770      	bxeq	lr
   840ae:	b530      	push	{r4, r5, lr}
   840b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   840b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   840b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   840bc:	bf48      	it	mi
   840be:	4240      	negmi	r0, r0
   840c0:	f04f 0100 	mov.w	r1, #0
   840c4:	e73e      	b.n	83f44 <__adddf3+0x138>
   840c6:	bf00      	nop

000840c8 <__aeabi_f2d>:
   840c8:	0042      	lsls	r2, r0, #1
   840ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
   840ce:	ea4f 0131 	mov.w	r1, r1, rrx
   840d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   840d6:	bf1f      	itttt	ne
   840d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   840dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   840e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   840e4:	4770      	bxne	lr
   840e6:	f092 0f00 	teq	r2, #0
   840ea:	bf14      	ite	ne
   840ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   840f0:	4770      	bxeq	lr
   840f2:	b530      	push	{r4, r5, lr}
   840f4:	f44f 7460 	mov.w	r4, #896	; 0x380
   840f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   840fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   84100:	e720      	b.n	83f44 <__adddf3+0x138>
   84102:	bf00      	nop

00084104 <__aeabi_ul2d>:
   84104:	ea50 0201 	orrs.w	r2, r0, r1
   84108:	bf08      	it	eq
   8410a:	4770      	bxeq	lr
   8410c:	b530      	push	{r4, r5, lr}
   8410e:	f04f 0500 	mov.w	r5, #0
   84112:	e00a      	b.n	8412a <__aeabi_l2d+0x16>

00084114 <__aeabi_l2d>:
   84114:	ea50 0201 	orrs.w	r2, r0, r1
   84118:	bf08      	it	eq
   8411a:	4770      	bxeq	lr
   8411c:	b530      	push	{r4, r5, lr}
   8411e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   84122:	d502      	bpl.n	8412a <__aeabi_l2d+0x16>
   84124:	4240      	negs	r0, r0
   84126:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8412a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8412e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84132:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   84136:	f43f aedc 	beq.w	83ef2 <__adddf3+0xe6>
   8413a:	f04f 0203 	mov.w	r2, #3
   8413e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   84142:	bf18      	it	ne
   84144:	3203      	addne	r2, #3
   84146:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8414a:	bf18      	it	ne
   8414c:	3203      	addne	r2, #3
   8414e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   84152:	f1c2 0320 	rsb	r3, r2, #32
   84156:	fa00 fc03 	lsl.w	ip, r0, r3
   8415a:	fa20 f002 	lsr.w	r0, r0, r2
   8415e:	fa01 fe03 	lsl.w	lr, r1, r3
   84162:	ea40 000e 	orr.w	r0, r0, lr
   84166:	fa21 f102 	lsr.w	r1, r1, r2
   8416a:	4414      	add	r4, r2
   8416c:	e6c1      	b.n	83ef2 <__adddf3+0xe6>
   8416e:	bf00      	nop

00084170 <__aeabi_dmul>:
   84170:	b570      	push	{r4, r5, r6, lr}
   84172:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84176:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8417a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8417e:	bf1d      	ittte	ne
   84180:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   84184:	ea94 0f0c 	teqne	r4, ip
   84188:	ea95 0f0c 	teqne	r5, ip
   8418c:	f000 f8de 	bleq	8434c <__aeabi_dmul+0x1dc>
   84190:	442c      	add	r4, r5
   84192:	ea81 0603 	eor.w	r6, r1, r3
   84196:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8419a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8419e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   841a2:	bf18      	it	ne
   841a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   841a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   841ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   841b0:	d038      	beq.n	84224 <__aeabi_dmul+0xb4>
   841b2:	fba0 ce02 	umull	ip, lr, r0, r2
   841b6:	f04f 0500 	mov.w	r5, #0
   841ba:	fbe1 e502 	umlal	lr, r5, r1, r2
   841be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   841c2:	fbe0 e503 	umlal	lr, r5, r0, r3
   841c6:	f04f 0600 	mov.w	r6, #0
   841ca:	fbe1 5603 	umlal	r5, r6, r1, r3
   841ce:	f09c 0f00 	teq	ip, #0
   841d2:	bf18      	it	ne
   841d4:	f04e 0e01 	orrne.w	lr, lr, #1
   841d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   841dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   841e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   841e4:	d204      	bcs.n	841f0 <__aeabi_dmul+0x80>
   841e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   841ea:	416d      	adcs	r5, r5
   841ec:	eb46 0606 	adc.w	r6, r6, r6
   841f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   841f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   841f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   841fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   84200:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   84204:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   84208:	bf88      	it	hi
   8420a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8420e:	d81e      	bhi.n	8424e <__aeabi_dmul+0xde>
   84210:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   84214:	bf08      	it	eq
   84216:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8421a:	f150 0000 	adcs.w	r0, r0, #0
   8421e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84222:	bd70      	pop	{r4, r5, r6, pc}
   84224:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   84228:	ea46 0101 	orr.w	r1, r6, r1
   8422c:	ea40 0002 	orr.w	r0, r0, r2
   84230:	ea81 0103 	eor.w	r1, r1, r3
   84234:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   84238:	bfc2      	ittt	gt
   8423a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8423e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   84242:	bd70      	popgt	{r4, r5, r6, pc}
   84244:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84248:	f04f 0e00 	mov.w	lr, #0
   8424c:	3c01      	subs	r4, #1
   8424e:	f300 80ab 	bgt.w	843a8 <__aeabi_dmul+0x238>
   84252:	f114 0f36 	cmn.w	r4, #54	; 0x36
   84256:	bfde      	ittt	le
   84258:	2000      	movle	r0, #0
   8425a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8425e:	bd70      	pople	{r4, r5, r6, pc}
   84260:	f1c4 0400 	rsb	r4, r4, #0
   84264:	3c20      	subs	r4, #32
   84266:	da35      	bge.n	842d4 <__aeabi_dmul+0x164>
   84268:	340c      	adds	r4, #12
   8426a:	dc1b      	bgt.n	842a4 <__aeabi_dmul+0x134>
   8426c:	f104 0414 	add.w	r4, r4, #20
   84270:	f1c4 0520 	rsb	r5, r4, #32
   84274:	fa00 f305 	lsl.w	r3, r0, r5
   84278:	fa20 f004 	lsr.w	r0, r0, r4
   8427c:	fa01 f205 	lsl.w	r2, r1, r5
   84280:	ea40 0002 	orr.w	r0, r0, r2
   84284:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   84288:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8428c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   84290:	fa21 f604 	lsr.w	r6, r1, r4
   84294:	eb42 0106 	adc.w	r1, r2, r6
   84298:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8429c:	bf08      	it	eq
   8429e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   842a2:	bd70      	pop	{r4, r5, r6, pc}
   842a4:	f1c4 040c 	rsb	r4, r4, #12
   842a8:	f1c4 0520 	rsb	r5, r4, #32
   842ac:	fa00 f304 	lsl.w	r3, r0, r4
   842b0:	fa20 f005 	lsr.w	r0, r0, r5
   842b4:	fa01 f204 	lsl.w	r2, r1, r4
   842b8:	ea40 0002 	orr.w	r0, r0, r2
   842bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   842c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   842c4:	f141 0100 	adc.w	r1, r1, #0
   842c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   842cc:	bf08      	it	eq
   842ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   842d2:	bd70      	pop	{r4, r5, r6, pc}
   842d4:	f1c4 0520 	rsb	r5, r4, #32
   842d8:	fa00 f205 	lsl.w	r2, r0, r5
   842dc:	ea4e 0e02 	orr.w	lr, lr, r2
   842e0:	fa20 f304 	lsr.w	r3, r0, r4
   842e4:	fa01 f205 	lsl.w	r2, r1, r5
   842e8:	ea43 0302 	orr.w	r3, r3, r2
   842ec:	fa21 f004 	lsr.w	r0, r1, r4
   842f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   842f4:	fa21 f204 	lsr.w	r2, r1, r4
   842f8:	ea20 0002 	bic.w	r0, r0, r2
   842fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   84300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   84304:	bf08      	it	eq
   84306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8430a:	bd70      	pop	{r4, r5, r6, pc}
   8430c:	f094 0f00 	teq	r4, #0
   84310:	d10f      	bne.n	84332 <__aeabi_dmul+0x1c2>
   84312:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   84316:	0040      	lsls	r0, r0, #1
   84318:	eb41 0101 	adc.w	r1, r1, r1
   8431c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84320:	bf08      	it	eq
   84322:	3c01      	subeq	r4, #1
   84324:	d0f7      	beq.n	84316 <__aeabi_dmul+0x1a6>
   84326:	ea41 0106 	orr.w	r1, r1, r6
   8432a:	f095 0f00 	teq	r5, #0
   8432e:	bf18      	it	ne
   84330:	4770      	bxne	lr
   84332:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   84336:	0052      	lsls	r2, r2, #1
   84338:	eb43 0303 	adc.w	r3, r3, r3
   8433c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   84340:	bf08      	it	eq
   84342:	3d01      	subeq	r5, #1
   84344:	d0f7      	beq.n	84336 <__aeabi_dmul+0x1c6>
   84346:	ea43 0306 	orr.w	r3, r3, r6
   8434a:	4770      	bx	lr
   8434c:	ea94 0f0c 	teq	r4, ip
   84350:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   84354:	bf18      	it	ne
   84356:	ea95 0f0c 	teqne	r5, ip
   8435a:	d00c      	beq.n	84376 <__aeabi_dmul+0x206>
   8435c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   84360:	bf18      	it	ne
   84362:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   84366:	d1d1      	bne.n	8430c <__aeabi_dmul+0x19c>
   84368:	ea81 0103 	eor.w	r1, r1, r3
   8436c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   84370:	f04f 0000 	mov.w	r0, #0
   84374:	bd70      	pop	{r4, r5, r6, pc}
   84376:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8437a:	bf06      	itte	eq
   8437c:	4610      	moveq	r0, r2
   8437e:	4619      	moveq	r1, r3
   84380:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   84384:	d019      	beq.n	843ba <__aeabi_dmul+0x24a>
   84386:	ea94 0f0c 	teq	r4, ip
   8438a:	d102      	bne.n	84392 <__aeabi_dmul+0x222>
   8438c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   84390:	d113      	bne.n	843ba <__aeabi_dmul+0x24a>
   84392:	ea95 0f0c 	teq	r5, ip
   84396:	d105      	bne.n	843a4 <__aeabi_dmul+0x234>
   84398:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8439c:	bf1c      	itt	ne
   8439e:	4610      	movne	r0, r2
   843a0:	4619      	movne	r1, r3
   843a2:	d10a      	bne.n	843ba <__aeabi_dmul+0x24a>
   843a4:	ea81 0103 	eor.w	r1, r1, r3
   843a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   843ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   843b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   843b4:	f04f 0000 	mov.w	r0, #0
   843b8:	bd70      	pop	{r4, r5, r6, pc}
   843ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   843be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   843c2:	bd70      	pop	{r4, r5, r6, pc}

000843c4 <__aeabi_ddiv>:
   843c4:	b570      	push	{r4, r5, r6, lr}
   843c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   843ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   843ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   843d2:	bf1d      	ittte	ne
   843d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   843d8:	ea94 0f0c 	teqne	r4, ip
   843dc:	ea95 0f0c 	teqne	r5, ip
   843e0:	f000 f8a7 	bleq	84532 <__aeabi_ddiv+0x16e>
   843e4:	eba4 0405 	sub.w	r4, r4, r5
   843e8:	ea81 0e03 	eor.w	lr, r1, r3
   843ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   843f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   843f4:	f000 8088 	beq.w	84508 <__aeabi_ddiv+0x144>
   843f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   843fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   84400:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   84404:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   84408:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8440c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   84410:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   84414:	ea4f 2600 	mov.w	r6, r0, lsl #8
   84418:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8441c:	429d      	cmp	r5, r3
   8441e:	bf08      	it	eq
   84420:	4296      	cmpeq	r6, r2
   84422:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   84426:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8442a:	d202      	bcs.n	84432 <__aeabi_ddiv+0x6e>
   8442c:	085b      	lsrs	r3, r3, #1
   8442e:	ea4f 0232 	mov.w	r2, r2, rrx
   84432:	1ab6      	subs	r6, r6, r2
   84434:	eb65 0503 	sbc.w	r5, r5, r3
   84438:	085b      	lsrs	r3, r3, #1
   8443a:	ea4f 0232 	mov.w	r2, r2, rrx
   8443e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   84442:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   84446:	ebb6 0e02 	subs.w	lr, r6, r2
   8444a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8444e:	bf22      	ittt	cs
   84450:	1ab6      	subcs	r6, r6, r2
   84452:	4675      	movcs	r5, lr
   84454:	ea40 000c 	orrcs.w	r0, r0, ip
   84458:	085b      	lsrs	r3, r3, #1
   8445a:	ea4f 0232 	mov.w	r2, r2, rrx
   8445e:	ebb6 0e02 	subs.w	lr, r6, r2
   84462:	eb75 0e03 	sbcs.w	lr, r5, r3
   84466:	bf22      	ittt	cs
   84468:	1ab6      	subcs	r6, r6, r2
   8446a:	4675      	movcs	r5, lr
   8446c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   84470:	085b      	lsrs	r3, r3, #1
   84472:	ea4f 0232 	mov.w	r2, r2, rrx
   84476:	ebb6 0e02 	subs.w	lr, r6, r2
   8447a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8447e:	bf22      	ittt	cs
   84480:	1ab6      	subcs	r6, r6, r2
   84482:	4675      	movcs	r5, lr
   84484:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   84488:	085b      	lsrs	r3, r3, #1
   8448a:	ea4f 0232 	mov.w	r2, r2, rrx
   8448e:	ebb6 0e02 	subs.w	lr, r6, r2
   84492:	eb75 0e03 	sbcs.w	lr, r5, r3
   84496:	bf22      	ittt	cs
   84498:	1ab6      	subcs	r6, r6, r2
   8449a:	4675      	movcs	r5, lr
   8449c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   844a0:	ea55 0e06 	orrs.w	lr, r5, r6
   844a4:	d018      	beq.n	844d8 <__aeabi_ddiv+0x114>
   844a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   844aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   844ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
   844b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   844b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   844ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   844be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   844c2:	d1c0      	bne.n	84446 <__aeabi_ddiv+0x82>
   844c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   844c8:	d10b      	bne.n	844e2 <__aeabi_ddiv+0x11e>
   844ca:	ea41 0100 	orr.w	r1, r1, r0
   844ce:	f04f 0000 	mov.w	r0, #0
   844d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   844d6:	e7b6      	b.n	84446 <__aeabi_ddiv+0x82>
   844d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   844dc:	bf04      	itt	eq
   844de:	4301      	orreq	r1, r0
   844e0:	2000      	moveq	r0, #0
   844e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   844e6:	bf88      	it	hi
   844e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   844ec:	f63f aeaf 	bhi.w	8424e <__aeabi_dmul+0xde>
   844f0:	ebb5 0c03 	subs.w	ip, r5, r3
   844f4:	bf04      	itt	eq
   844f6:	ebb6 0c02 	subseq.w	ip, r6, r2
   844fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   844fe:	f150 0000 	adcs.w	r0, r0, #0
   84502:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84506:	bd70      	pop	{r4, r5, r6, pc}
   84508:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8450c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   84510:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   84514:	bfc2      	ittt	gt
   84516:	ebd4 050c 	rsbsgt	r5, r4, ip
   8451a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8451e:	bd70      	popgt	{r4, r5, r6, pc}
   84520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84524:	f04f 0e00 	mov.w	lr, #0
   84528:	3c01      	subs	r4, #1
   8452a:	e690      	b.n	8424e <__aeabi_dmul+0xde>
   8452c:	ea45 0e06 	orr.w	lr, r5, r6
   84530:	e68d      	b.n	8424e <__aeabi_dmul+0xde>
   84532:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   84536:	ea94 0f0c 	teq	r4, ip
   8453a:	bf08      	it	eq
   8453c:	ea95 0f0c 	teqeq	r5, ip
   84540:	f43f af3b 	beq.w	843ba <__aeabi_dmul+0x24a>
   84544:	ea94 0f0c 	teq	r4, ip
   84548:	d10a      	bne.n	84560 <__aeabi_ddiv+0x19c>
   8454a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8454e:	f47f af34 	bne.w	843ba <__aeabi_dmul+0x24a>
   84552:	ea95 0f0c 	teq	r5, ip
   84556:	f47f af25 	bne.w	843a4 <__aeabi_dmul+0x234>
   8455a:	4610      	mov	r0, r2
   8455c:	4619      	mov	r1, r3
   8455e:	e72c      	b.n	843ba <__aeabi_dmul+0x24a>
   84560:	ea95 0f0c 	teq	r5, ip
   84564:	d106      	bne.n	84574 <__aeabi_ddiv+0x1b0>
   84566:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8456a:	f43f aefd 	beq.w	84368 <__aeabi_dmul+0x1f8>
   8456e:	4610      	mov	r0, r2
   84570:	4619      	mov	r1, r3
   84572:	e722      	b.n	843ba <__aeabi_dmul+0x24a>
   84574:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   84578:	bf18      	it	ne
   8457a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8457e:	f47f aec5 	bne.w	8430c <__aeabi_dmul+0x19c>
   84582:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   84586:	f47f af0d 	bne.w	843a4 <__aeabi_dmul+0x234>
   8458a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8458e:	f47f aeeb 	bne.w	84368 <__aeabi_dmul+0x1f8>
   84592:	e712      	b.n	843ba <__aeabi_dmul+0x24a>

00084594 <__gedf2>:
   84594:	f04f 3cff 	mov.w	ip, #4294967295
   84598:	e006      	b.n	845a8 <__cmpdf2+0x4>
   8459a:	bf00      	nop

0008459c <__ledf2>:
   8459c:	f04f 0c01 	mov.w	ip, #1
   845a0:	e002      	b.n	845a8 <__cmpdf2+0x4>
   845a2:	bf00      	nop

000845a4 <__cmpdf2>:
   845a4:	f04f 0c01 	mov.w	ip, #1
   845a8:	f84d cd04 	str.w	ip, [sp, #-4]!
   845ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   845b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   845b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   845b8:	bf18      	it	ne
   845ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   845be:	d01b      	beq.n	845f8 <__cmpdf2+0x54>
   845c0:	b001      	add	sp, #4
   845c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   845c6:	bf0c      	ite	eq
   845c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   845cc:	ea91 0f03 	teqne	r1, r3
   845d0:	bf02      	ittt	eq
   845d2:	ea90 0f02 	teqeq	r0, r2
   845d6:	2000      	moveq	r0, #0
   845d8:	4770      	bxeq	lr
   845da:	f110 0f00 	cmn.w	r0, #0
   845de:	ea91 0f03 	teq	r1, r3
   845e2:	bf58      	it	pl
   845e4:	4299      	cmppl	r1, r3
   845e6:	bf08      	it	eq
   845e8:	4290      	cmpeq	r0, r2
   845ea:	bf2c      	ite	cs
   845ec:	17d8      	asrcs	r0, r3, #31
   845ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   845f2:	f040 0001 	orr.w	r0, r0, #1
   845f6:	4770      	bx	lr
   845f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   845fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   84600:	d102      	bne.n	84608 <__cmpdf2+0x64>
   84602:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   84606:	d107      	bne.n	84618 <__cmpdf2+0x74>
   84608:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8460c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   84610:	d1d6      	bne.n	845c0 <__cmpdf2+0x1c>
   84612:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   84616:	d0d3      	beq.n	845c0 <__cmpdf2+0x1c>
   84618:	f85d 0b04 	ldr.w	r0, [sp], #4
   8461c:	4770      	bx	lr
   8461e:	bf00      	nop

00084620 <__aeabi_cdrcmple>:
   84620:	4684      	mov	ip, r0
   84622:	4610      	mov	r0, r2
   84624:	4662      	mov	r2, ip
   84626:	468c      	mov	ip, r1
   84628:	4619      	mov	r1, r3
   8462a:	4663      	mov	r3, ip
   8462c:	e000      	b.n	84630 <__aeabi_cdcmpeq>
   8462e:	bf00      	nop

00084630 <__aeabi_cdcmpeq>:
   84630:	b501      	push	{r0, lr}
   84632:	f7ff ffb7 	bl	845a4 <__cmpdf2>
   84636:	2800      	cmp	r0, #0
   84638:	bf48      	it	mi
   8463a:	f110 0f00 	cmnmi.w	r0, #0
   8463e:	bd01      	pop	{r0, pc}

00084640 <__aeabi_dcmpeq>:
   84640:	f84d ed08 	str.w	lr, [sp, #-8]!
   84644:	f7ff fff4 	bl	84630 <__aeabi_cdcmpeq>
   84648:	bf0c      	ite	eq
   8464a:	2001      	moveq	r0, #1
   8464c:	2000      	movne	r0, #0
   8464e:	f85d fb08 	ldr.w	pc, [sp], #8
   84652:	bf00      	nop

00084654 <__aeabi_dcmplt>:
   84654:	f84d ed08 	str.w	lr, [sp, #-8]!
   84658:	f7ff ffea 	bl	84630 <__aeabi_cdcmpeq>
   8465c:	bf34      	ite	cc
   8465e:	2001      	movcc	r0, #1
   84660:	2000      	movcs	r0, #0
   84662:	f85d fb08 	ldr.w	pc, [sp], #8
   84666:	bf00      	nop

00084668 <__aeabi_dcmple>:
   84668:	f84d ed08 	str.w	lr, [sp, #-8]!
   8466c:	f7ff ffe0 	bl	84630 <__aeabi_cdcmpeq>
   84670:	bf94      	ite	ls
   84672:	2001      	movls	r0, #1
   84674:	2000      	movhi	r0, #0
   84676:	f85d fb08 	ldr.w	pc, [sp], #8
   8467a:	bf00      	nop

0008467c <__aeabi_dcmpge>:
   8467c:	f84d ed08 	str.w	lr, [sp, #-8]!
   84680:	f7ff ffce 	bl	84620 <__aeabi_cdrcmple>
   84684:	bf94      	ite	ls
   84686:	2001      	movls	r0, #1
   84688:	2000      	movhi	r0, #0
   8468a:	f85d fb08 	ldr.w	pc, [sp], #8
   8468e:	bf00      	nop

00084690 <__aeabi_dcmpgt>:
   84690:	f84d ed08 	str.w	lr, [sp, #-8]!
   84694:	f7ff ffc4 	bl	84620 <__aeabi_cdrcmple>
   84698:	bf34      	ite	cc
   8469a:	2001      	movcc	r0, #1
   8469c:	2000      	movcs	r0, #0
   8469e:	f85d fb08 	ldr.w	pc, [sp], #8
   846a2:	bf00      	nop

000846a4 <__aeabi_d2iz>:
   846a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   846a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   846ac:	d215      	bcs.n	846da <__aeabi_d2iz+0x36>
   846ae:	d511      	bpl.n	846d4 <__aeabi_d2iz+0x30>
   846b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   846b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   846b8:	d912      	bls.n	846e0 <__aeabi_d2iz+0x3c>
   846ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   846be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   846c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   846c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   846ca:	fa23 f002 	lsr.w	r0, r3, r2
   846ce:	bf18      	it	ne
   846d0:	4240      	negne	r0, r0
   846d2:	4770      	bx	lr
   846d4:	f04f 0000 	mov.w	r0, #0
   846d8:	4770      	bx	lr
   846da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   846de:	d105      	bne.n	846ec <__aeabi_d2iz+0x48>
   846e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   846e4:	bf08      	it	eq
   846e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   846ea:	4770      	bx	lr
   846ec:	f04f 0000 	mov.w	r0, #0
   846f0:	4770      	bx	lr
   846f2:	bf00      	nop

000846f4 <__errno>:
   846f4:	4b01      	ldr	r3, [pc, #4]	; (846fc <__errno+0x8>)
   846f6:	6818      	ldr	r0, [r3, #0]
   846f8:	4770      	bx	lr
   846fa:	bf00      	nop
   846fc:	200705e0 	.word	0x200705e0

00084700 <__libc_init_array>:
   84700:	b570      	push	{r4, r5, r6, lr}
   84702:	4e0f      	ldr	r6, [pc, #60]	; (84740 <__libc_init_array+0x40>)
   84704:	4d0f      	ldr	r5, [pc, #60]	; (84744 <__libc_init_array+0x44>)
   84706:	1b76      	subs	r6, r6, r5
   84708:	10b6      	asrs	r6, r6, #2
   8470a:	d007      	beq.n	8471c <__libc_init_array+0x1c>
   8470c:	3d04      	subs	r5, #4
   8470e:	2400      	movs	r4, #0
   84710:	3401      	adds	r4, #1
   84712:	f855 3f04 	ldr.w	r3, [r5, #4]!
   84716:	4798      	blx	r3
   84718:	42a6      	cmp	r6, r4
   8471a:	d1f9      	bne.n	84710 <__libc_init_array+0x10>
   8471c:	4e0a      	ldr	r6, [pc, #40]	; (84748 <__libc_init_array+0x48>)
   8471e:	4d0b      	ldr	r5, [pc, #44]	; (8474c <__libc_init_array+0x4c>)
   84720:	f006 f904 	bl	8a92c <_init>
   84724:	1b76      	subs	r6, r6, r5
   84726:	10b6      	asrs	r6, r6, #2
   84728:	d008      	beq.n	8473c <__libc_init_array+0x3c>
   8472a:	3d04      	subs	r5, #4
   8472c:	2400      	movs	r4, #0
   8472e:	3401      	adds	r4, #1
   84730:	f855 3f04 	ldr.w	r3, [r5, #4]!
   84734:	4798      	blx	r3
   84736:	42a6      	cmp	r6, r4
   84738:	d1f9      	bne.n	8472e <__libc_init_array+0x2e>
   8473a:	bd70      	pop	{r4, r5, r6, pc}
   8473c:	bd70      	pop	{r4, r5, r6, pc}
   8473e:	bf00      	nop
   84740:	0008a938 	.word	0x0008a938
   84744:	0008a938 	.word	0x0008a938
   84748:	0008a940 	.word	0x0008a940
   8474c:	0008a938 	.word	0x0008a938

00084750 <iprintf>:
   84750:	b40f      	push	{r0, r1, r2, r3}
   84752:	b510      	push	{r4, lr}
   84754:	4b07      	ldr	r3, [pc, #28]	; (84774 <iprintf+0x24>)
   84756:	b082      	sub	sp, #8
   84758:	ac04      	add	r4, sp, #16
   8475a:	f854 2b04 	ldr.w	r2, [r4], #4
   8475e:	6818      	ldr	r0, [r3, #0]
   84760:	4623      	mov	r3, r4
   84762:	6881      	ldr	r1, [r0, #8]
   84764:	9401      	str	r4, [sp, #4]
   84766:	f001 fc83 	bl	86070 <_vfiprintf_r>
   8476a:	b002      	add	sp, #8
   8476c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84770:	b004      	add	sp, #16
   84772:	4770      	bx	lr
   84774:	200705e0 	.word	0x200705e0

00084778 <memcpy>:
   84778:	4684      	mov	ip, r0
   8477a:	ea41 0300 	orr.w	r3, r1, r0
   8477e:	f013 0303 	ands.w	r3, r3, #3
   84782:	d149      	bne.n	84818 <memcpy+0xa0>
   84784:	3a40      	subs	r2, #64	; 0x40
   84786:	d323      	bcc.n	847d0 <memcpy+0x58>
   84788:	680b      	ldr	r3, [r1, #0]
   8478a:	6003      	str	r3, [r0, #0]
   8478c:	684b      	ldr	r3, [r1, #4]
   8478e:	6043      	str	r3, [r0, #4]
   84790:	688b      	ldr	r3, [r1, #8]
   84792:	6083      	str	r3, [r0, #8]
   84794:	68cb      	ldr	r3, [r1, #12]
   84796:	60c3      	str	r3, [r0, #12]
   84798:	690b      	ldr	r3, [r1, #16]
   8479a:	6103      	str	r3, [r0, #16]
   8479c:	694b      	ldr	r3, [r1, #20]
   8479e:	6143      	str	r3, [r0, #20]
   847a0:	698b      	ldr	r3, [r1, #24]
   847a2:	6183      	str	r3, [r0, #24]
   847a4:	69cb      	ldr	r3, [r1, #28]
   847a6:	61c3      	str	r3, [r0, #28]
   847a8:	6a0b      	ldr	r3, [r1, #32]
   847aa:	6203      	str	r3, [r0, #32]
   847ac:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   847ae:	6243      	str	r3, [r0, #36]	; 0x24
   847b0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   847b2:	6283      	str	r3, [r0, #40]	; 0x28
   847b4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   847b6:	62c3      	str	r3, [r0, #44]	; 0x2c
   847b8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   847ba:	6303      	str	r3, [r0, #48]	; 0x30
   847bc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   847be:	6343      	str	r3, [r0, #52]	; 0x34
   847c0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   847c2:	6383      	str	r3, [r0, #56]	; 0x38
   847c4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   847c6:	63c3      	str	r3, [r0, #60]	; 0x3c
   847c8:	3040      	adds	r0, #64	; 0x40
   847ca:	3140      	adds	r1, #64	; 0x40
   847cc:	3a40      	subs	r2, #64	; 0x40
   847ce:	d2db      	bcs.n	84788 <memcpy+0x10>
   847d0:	3230      	adds	r2, #48	; 0x30
   847d2:	d30b      	bcc.n	847ec <memcpy+0x74>
   847d4:	680b      	ldr	r3, [r1, #0]
   847d6:	6003      	str	r3, [r0, #0]
   847d8:	684b      	ldr	r3, [r1, #4]
   847da:	6043      	str	r3, [r0, #4]
   847dc:	688b      	ldr	r3, [r1, #8]
   847de:	6083      	str	r3, [r0, #8]
   847e0:	68cb      	ldr	r3, [r1, #12]
   847e2:	60c3      	str	r3, [r0, #12]
   847e4:	3010      	adds	r0, #16
   847e6:	3110      	adds	r1, #16
   847e8:	3a10      	subs	r2, #16
   847ea:	d2f3      	bcs.n	847d4 <memcpy+0x5c>
   847ec:	320c      	adds	r2, #12
   847ee:	d305      	bcc.n	847fc <memcpy+0x84>
   847f0:	f851 3b04 	ldr.w	r3, [r1], #4
   847f4:	f840 3b04 	str.w	r3, [r0], #4
   847f8:	3a04      	subs	r2, #4
   847fa:	d2f9      	bcs.n	847f0 <memcpy+0x78>
   847fc:	3204      	adds	r2, #4
   847fe:	d008      	beq.n	84812 <memcpy+0x9a>
   84800:	07d2      	lsls	r2, r2, #31
   84802:	bf1c      	itt	ne
   84804:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84808:	f800 3b01 	strbne.w	r3, [r0], #1
   8480c:	d301      	bcc.n	84812 <memcpy+0x9a>
   8480e:	880b      	ldrh	r3, [r1, #0]
   84810:	8003      	strh	r3, [r0, #0]
   84812:	4660      	mov	r0, ip
   84814:	4770      	bx	lr
   84816:	bf00      	nop
   84818:	2a08      	cmp	r2, #8
   8481a:	d313      	bcc.n	84844 <memcpy+0xcc>
   8481c:	078b      	lsls	r3, r1, #30
   8481e:	d0b1      	beq.n	84784 <memcpy+0xc>
   84820:	f010 0303 	ands.w	r3, r0, #3
   84824:	d0ae      	beq.n	84784 <memcpy+0xc>
   84826:	f1c3 0304 	rsb	r3, r3, #4
   8482a:	1ad2      	subs	r2, r2, r3
   8482c:	07db      	lsls	r3, r3, #31
   8482e:	bf1c      	itt	ne
   84830:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84834:	f800 3b01 	strbne.w	r3, [r0], #1
   84838:	d3a4      	bcc.n	84784 <memcpy+0xc>
   8483a:	f831 3b02 	ldrh.w	r3, [r1], #2
   8483e:	f820 3b02 	strh.w	r3, [r0], #2
   84842:	e79f      	b.n	84784 <memcpy+0xc>
   84844:	3a04      	subs	r2, #4
   84846:	d3d9      	bcc.n	847fc <memcpy+0x84>
   84848:	3a01      	subs	r2, #1
   8484a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8484e:	f800 3b01 	strb.w	r3, [r0], #1
   84852:	d2f9      	bcs.n	84848 <memcpy+0xd0>
   84854:	780b      	ldrb	r3, [r1, #0]
   84856:	7003      	strb	r3, [r0, #0]
   84858:	784b      	ldrb	r3, [r1, #1]
   8485a:	7043      	strb	r3, [r0, #1]
   8485c:	788b      	ldrb	r3, [r1, #2]
   8485e:	7083      	strb	r3, [r0, #2]
   84860:	4660      	mov	r0, ip
   84862:	4770      	bx	lr

00084864 <memset>:
   84864:	b4f0      	push	{r4, r5, r6, r7}
   84866:	0784      	lsls	r4, r0, #30
   84868:	d043      	beq.n	848f2 <memset+0x8e>
   8486a:	1e54      	subs	r4, r2, #1
   8486c:	2a00      	cmp	r2, #0
   8486e:	d03e      	beq.n	848ee <memset+0x8a>
   84870:	b2cd      	uxtb	r5, r1
   84872:	4603      	mov	r3, r0
   84874:	e003      	b.n	8487e <memset+0x1a>
   84876:	1e62      	subs	r2, r4, #1
   84878:	2c00      	cmp	r4, #0
   8487a:	d038      	beq.n	848ee <memset+0x8a>
   8487c:	4614      	mov	r4, r2
   8487e:	f803 5b01 	strb.w	r5, [r3], #1
   84882:	079a      	lsls	r2, r3, #30
   84884:	d1f7      	bne.n	84876 <memset+0x12>
   84886:	2c03      	cmp	r4, #3
   84888:	d92a      	bls.n	848e0 <memset+0x7c>
   8488a:	b2cd      	uxtb	r5, r1
   8488c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   84890:	2c0f      	cmp	r4, #15
   84892:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   84896:	d915      	bls.n	848c4 <memset+0x60>
   84898:	f1a4 0710 	sub.w	r7, r4, #16
   8489c:	093f      	lsrs	r7, r7, #4
   8489e:	f103 0610 	add.w	r6, r3, #16
   848a2:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   848a6:	461a      	mov	r2, r3
   848a8:	6015      	str	r5, [r2, #0]
   848aa:	6055      	str	r5, [r2, #4]
   848ac:	6095      	str	r5, [r2, #8]
   848ae:	60d5      	str	r5, [r2, #12]
   848b0:	3210      	adds	r2, #16
   848b2:	42b2      	cmp	r2, r6
   848b4:	d1f8      	bne.n	848a8 <memset+0x44>
   848b6:	f004 040f 	and.w	r4, r4, #15
   848ba:	3701      	adds	r7, #1
   848bc:	2c03      	cmp	r4, #3
   848be:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   848c2:	d90d      	bls.n	848e0 <memset+0x7c>
   848c4:	461e      	mov	r6, r3
   848c6:	4622      	mov	r2, r4
   848c8:	3a04      	subs	r2, #4
   848ca:	2a03      	cmp	r2, #3
   848cc:	f846 5b04 	str.w	r5, [r6], #4
   848d0:	d8fa      	bhi.n	848c8 <memset+0x64>
   848d2:	1f22      	subs	r2, r4, #4
   848d4:	f022 0203 	bic.w	r2, r2, #3
   848d8:	3204      	adds	r2, #4
   848da:	4413      	add	r3, r2
   848dc:	f004 0403 	and.w	r4, r4, #3
   848e0:	b12c      	cbz	r4, 848ee <memset+0x8a>
   848e2:	b2c9      	uxtb	r1, r1
   848e4:	441c      	add	r4, r3
   848e6:	f803 1b01 	strb.w	r1, [r3], #1
   848ea:	42a3      	cmp	r3, r4
   848ec:	d1fb      	bne.n	848e6 <memset+0x82>
   848ee:	bcf0      	pop	{r4, r5, r6, r7}
   848f0:	4770      	bx	lr
   848f2:	4614      	mov	r4, r2
   848f4:	4603      	mov	r3, r0
   848f6:	e7c6      	b.n	84886 <memset+0x22>

000848f8 <setbuf>:
   848f8:	2900      	cmp	r1, #0
   848fa:	bf0c      	ite	eq
   848fc:	2202      	moveq	r2, #2
   848fe:	2200      	movne	r2, #0
   84900:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84904:	f000 b800 	b.w	84908 <setvbuf>

00084908 <setvbuf>:
   84908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8490c:	4d3c      	ldr	r5, [pc, #240]	; (84a00 <setvbuf+0xf8>)
   8490e:	4604      	mov	r4, r0
   84910:	682d      	ldr	r5, [r5, #0]
   84912:	4688      	mov	r8, r1
   84914:	4616      	mov	r6, r2
   84916:	461f      	mov	r7, r3
   84918:	b115      	cbz	r5, 84920 <setvbuf+0x18>
   8491a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8491c:	2b00      	cmp	r3, #0
   8491e:	d04f      	beq.n	849c0 <setvbuf+0xb8>
   84920:	2e02      	cmp	r6, #2
   84922:	d830      	bhi.n	84986 <setvbuf+0x7e>
   84924:	2f00      	cmp	r7, #0
   84926:	db2e      	blt.n	84986 <setvbuf+0x7e>
   84928:	4628      	mov	r0, r5
   8492a:	4621      	mov	r1, r4
   8492c:	f003 fad4 	bl	87ed8 <_fflush_r>
   84930:	89a3      	ldrh	r3, [r4, #12]
   84932:	2200      	movs	r2, #0
   84934:	6062      	str	r2, [r4, #4]
   84936:	61a2      	str	r2, [r4, #24]
   84938:	061a      	lsls	r2, r3, #24
   8493a:	d428      	bmi.n	8498e <setvbuf+0x86>
   8493c:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   84940:	b29b      	uxth	r3, r3
   84942:	2e02      	cmp	r6, #2
   84944:	81a3      	strh	r3, [r4, #12]
   84946:	d02d      	beq.n	849a4 <setvbuf+0x9c>
   84948:	f1b8 0f00 	cmp.w	r8, #0
   8494c:	d03c      	beq.n	849c8 <setvbuf+0xc0>
   8494e:	2e01      	cmp	r6, #1
   84950:	d013      	beq.n	8497a <setvbuf+0x72>
   84952:	b29b      	uxth	r3, r3
   84954:	f003 0008 	and.w	r0, r3, #8
   84958:	4a2a      	ldr	r2, [pc, #168]	; (84a04 <setvbuf+0xfc>)
   8495a:	b280      	uxth	r0, r0
   8495c:	63ea      	str	r2, [r5, #60]	; 0x3c
   8495e:	f8c4 8000 	str.w	r8, [r4]
   84962:	f8c4 8010 	str.w	r8, [r4, #16]
   84966:	6167      	str	r7, [r4, #20]
   84968:	b178      	cbz	r0, 8498a <setvbuf+0x82>
   8496a:	f013 0f03 	tst.w	r3, #3
   8496e:	bf18      	it	ne
   84970:	2700      	movne	r7, #0
   84972:	60a7      	str	r7, [r4, #8]
   84974:	2000      	movs	r0, #0
   84976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8497a:	f043 0301 	orr.w	r3, r3, #1
   8497e:	427a      	negs	r2, r7
   84980:	81a3      	strh	r3, [r4, #12]
   84982:	61a2      	str	r2, [r4, #24]
   84984:	e7e5      	b.n	84952 <setvbuf+0x4a>
   84986:	f04f 30ff 	mov.w	r0, #4294967295
   8498a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8498e:	4628      	mov	r0, r5
   84990:	6921      	ldr	r1, [r4, #16]
   84992:	f003 fc01 	bl	88198 <_free_r>
   84996:	89a3      	ldrh	r3, [r4, #12]
   84998:	2e02      	cmp	r6, #2
   8499a:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   8499e:	b29b      	uxth	r3, r3
   849a0:	81a3      	strh	r3, [r4, #12]
   849a2:	d1d1      	bne.n	84948 <setvbuf+0x40>
   849a4:	2000      	movs	r0, #0
   849a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   849aa:	f043 0302 	orr.w	r3, r3, #2
   849ae:	2500      	movs	r5, #0
   849b0:	2101      	movs	r1, #1
   849b2:	81a3      	strh	r3, [r4, #12]
   849b4:	60a5      	str	r5, [r4, #8]
   849b6:	6022      	str	r2, [r4, #0]
   849b8:	6122      	str	r2, [r4, #16]
   849ba:	6161      	str	r1, [r4, #20]
   849bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   849c0:	4628      	mov	r0, r5
   849c2:	f003 faa5 	bl	87f10 <__sinit>
   849c6:	e7ab      	b.n	84920 <setvbuf+0x18>
   849c8:	2f00      	cmp	r7, #0
   849ca:	bf08      	it	eq
   849cc:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   849d0:	4638      	mov	r0, r7
   849d2:	f003 fedb 	bl	8878c <malloc>
   849d6:	4680      	mov	r8, r0
   849d8:	b128      	cbz	r0, 849e6 <setvbuf+0xde>
   849da:	89a3      	ldrh	r3, [r4, #12]
   849dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   849e0:	b29b      	uxth	r3, r3
   849e2:	81a3      	strh	r3, [r4, #12]
   849e4:	e7b3      	b.n	8494e <setvbuf+0x46>
   849e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
   849ea:	f003 fecf 	bl	8878c <malloc>
   849ee:	4680      	mov	r8, r0
   849f0:	b918      	cbnz	r0, 849fa <setvbuf+0xf2>
   849f2:	89a3      	ldrh	r3, [r4, #12]
   849f4:	f04f 30ff 	mov.w	r0, #4294967295
   849f8:	e7d5      	b.n	849a6 <setvbuf+0x9e>
   849fa:	f44f 6780 	mov.w	r7, #1024	; 0x400
   849fe:	e7ec      	b.n	849da <setvbuf+0xd2>
   84a00:	200705e0 	.word	0x200705e0
   84a04:	00087f05 	.word	0x00087f05

00084a08 <sprintf>:
   84a08:	b40e      	push	{r1, r2, r3}
   84a0a:	b5f0      	push	{r4, r5, r6, r7, lr}
   84a0c:	b09c      	sub	sp, #112	; 0x70
   84a0e:	ac21      	add	r4, sp, #132	; 0x84
   84a10:	f854 2b04 	ldr.w	r2, [r4], #4
   84a14:	490e      	ldr	r1, [pc, #56]	; (84a50 <sprintf+0x48>)
   84a16:	4606      	mov	r6, r0
   84a18:	4623      	mov	r3, r4
   84a1a:	f44f 7e02 	mov.w	lr, #520	; 0x208
   84a1e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   84a22:	6808      	ldr	r0, [r1, #0]
   84a24:	f64f 77ff 	movw	r7, #65535	; 0xffff
   84a28:	a902      	add	r1, sp, #8
   84a2a:	9602      	str	r6, [sp, #8]
   84a2c:	9606      	str	r6, [sp, #24]
   84a2e:	9401      	str	r4, [sp, #4]
   84a30:	f8ad e014 	strh.w	lr, [sp, #20]
   84a34:	9504      	str	r5, [sp, #16]
   84a36:	9507      	str	r5, [sp, #28]
   84a38:	f8ad 7016 	strh.w	r7, [sp, #22]
   84a3c:	f000 f86c 	bl	84b18 <_svfprintf_r>
   84a40:	9b02      	ldr	r3, [sp, #8]
   84a42:	2200      	movs	r2, #0
   84a44:	701a      	strb	r2, [r3, #0]
   84a46:	b01c      	add	sp, #112	; 0x70
   84a48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   84a4c:	b003      	add	sp, #12
   84a4e:	4770      	bx	lr
   84a50:	200705e0 	.word	0x200705e0

00084a54 <strlen>:
   84a54:	f020 0103 	bic.w	r1, r0, #3
   84a58:	f010 0003 	ands.w	r0, r0, #3
   84a5c:	f1c0 0000 	rsb	r0, r0, #0
   84a60:	f851 3b04 	ldr.w	r3, [r1], #4
   84a64:	f100 0c04 	add.w	ip, r0, #4
   84a68:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   84a6c:	f06f 0200 	mvn.w	r2, #0
   84a70:	bf1c      	itt	ne
   84a72:	fa22 f20c 	lsrne.w	r2, r2, ip
   84a76:	4313      	orrne	r3, r2
   84a78:	f04f 0c01 	mov.w	ip, #1
   84a7c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   84a80:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   84a84:	eba3 020c 	sub.w	r2, r3, ip
   84a88:	ea22 0203 	bic.w	r2, r2, r3
   84a8c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   84a90:	bf04      	itt	eq
   84a92:	f851 3b04 	ldreq.w	r3, [r1], #4
   84a96:	3004      	addeq	r0, #4
   84a98:	d0f4      	beq.n	84a84 <strlen+0x30>
   84a9a:	f013 0fff 	tst.w	r3, #255	; 0xff
   84a9e:	bf1f      	itttt	ne
   84aa0:	3001      	addne	r0, #1
   84aa2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   84aa6:	3001      	addne	r0, #1
   84aa8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   84aac:	bf18      	it	ne
   84aae:	3001      	addne	r0, #1
   84ab0:	4770      	bx	lr
   84ab2:	bf00      	nop

00084ab4 <strncpy>:
   84ab4:	ea40 0301 	orr.w	r3, r0, r1
   84ab8:	079b      	lsls	r3, r3, #30
   84aba:	b470      	push	{r4, r5, r6}
   84abc:	d12a      	bne.n	84b14 <strncpy+0x60>
   84abe:	2a03      	cmp	r2, #3
   84ac0:	d928      	bls.n	84b14 <strncpy+0x60>
   84ac2:	460c      	mov	r4, r1
   84ac4:	4603      	mov	r3, r0
   84ac6:	4621      	mov	r1, r4
   84ac8:	f854 5b04 	ldr.w	r5, [r4], #4
   84acc:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   84ad0:	ea26 0605 	bic.w	r6, r6, r5
   84ad4:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   84ad8:	d105      	bne.n	84ae6 <strncpy+0x32>
   84ada:	3a04      	subs	r2, #4
   84adc:	2a03      	cmp	r2, #3
   84ade:	f843 5b04 	str.w	r5, [r3], #4
   84ae2:	4621      	mov	r1, r4
   84ae4:	d8ef      	bhi.n	84ac6 <strncpy+0x12>
   84ae6:	b19a      	cbz	r2, 84b10 <strncpy+0x5c>
   84ae8:	780c      	ldrb	r4, [r1, #0]
   84aea:	3a01      	subs	r2, #1
   84aec:	701c      	strb	r4, [r3, #0]
   84aee:	3301      	adds	r3, #1
   84af0:	b13c      	cbz	r4, 84b02 <strncpy+0x4e>
   84af2:	b16a      	cbz	r2, 84b10 <strncpy+0x5c>
   84af4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   84af8:	3a01      	subs	r2, #1
   84afa:	f803 4b01 	strb.w	r4, [r3], #1
   84afe:	2c00      	cmp	r4, #0
   84b00:	d1f7      	bne.n	84af2 <strncpy+0x3e>
   84b02:	b12a      	cbz	r2, 84b10 <strncpy+0x5c>
   84b04:	441a      	add	r2, r3
   84b06:	2100      	movs	r1, #0
   84b08:	f803 1b01 	strb.w	r1, [r3], #1
   84b0c:	4293      	cmp	r3, r2
   84b0e:	d1fb      	bne.n	84b08 <strncpy+0x54>
   84b10:	bc70      	pop	{r4, r5, r6}
   84b12:	4770      	bx	lr
   84b14:	4603      	mov	r3, r0
   84b16:	e7e6      	b.n	84ae6 <strncpy+0x32>

00084b18 <_svfprintf_r>:
   84b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84b1c:	b0c9      	sub	sp, #292	; 0x124
   84b1e:	9310      	str	r3, [sp, #64]	; 0x40
   84b20:	910c      	str	r1, [sp, #48]	; 0x30
   84b22:	4691      	mov	r9, r2
   84b24:	900d      	str	r0, [sp, #52]	; 0x34
   84b26:	f003 fdbd 	bl	886a4 <_localeconv_r>
   84b2a:	6800      	ldr	r0, [r0, #0]
   84b2c:	9015      	str	r0, [sp, #84]	; 0x54
   84b2e:	f7ff ff91 	bl	84a54 <strlen>
   84b32:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84b34:	9018      	str	r0, [sp, #96]	; 0x60
   84b36:	89a3      	ldrh	r3, [r4, #12]
   84b38:	061e      	lsls	r6, r3, #24
   84b3a:	d503      	bpl.n	84b44 <_svfprintf_r+0x2c>
   84b3c:	6923      	ldr	r3, [r4, #16]
   84b3e:	2b00      	cmp	r3, #0
   84b40:	f001 8081 	beq.w	85c46 <_svfprintf_r+0x112e>
   84b44:	ac38      	add	r4, sp, #224	; 0xe0
   84b46:	46a4      	mov	ip, r4
   84b48:	9408      	str	r4, [sp, #32]
   84b4a:	942b      	str	r4, [sp, #172]	; 0xac
   84b4c:	2500      	movs	r5, #0
   84b4e:	2400      	movs	r4, #0
   84b50:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
   84b54:	2300      	movs	r3, #0
   84b56:	9311      	str	r3, [sp, #68]	; 0x44
   84b58:	932d      	str	r3, [sp, #180]	; 0xb4
   84b5a:	932c      	str	r3, [sp, #176]	; 0xb0
   84b5c:	931a      	str	r3, [sp, #104]	; 0x68
   84b5e:	9319      	str	r3, [sp, #100]	; 0x64
   84b60:	930e      	str	r3, [sp, #56]	; 0x38
   84b62:	4666      	mov	r6, ip
   84b64:	f899 3000 	ldrb.w	r3, [r9]
   84b68:	2b00      	cmp	r3, #0
   84b6a:	f000 80f8 	beq.w	84d5e <_svfprintf_r+0x246>
   84b6e:	2b25      	cmp	r3, #37	; 0x25
   84b70:	f000 80f5 	beq.w	84d5e <_svfprintf_r+0x246>
   84b74:	f109 0201 	add.w	r2, r9, #1
   84b78:	e001      	b.n	84b7e <_svfprintf_r+0x66>
   84b7a:	2b25      	cmp	r3, #37	; 0x25
   84b7c:	d004      	beq.n	84b88 <_svfprintf_r+0x70>
   84b7e:	7813      	ldrb	r3, [r2, #0]
   84b80:	4614      	mov	r4, r2
   84b82:	3201      	adds	r2, #1
   84b84:	2b00      	cmp	r3, #0
   84b86:	d1f8      	bne.n	84b7a <_svfprintf_r+0x62>
   84b88:	ebc9 0504 	rsb	r5, r9, r4
   84b8c:	b17d      	cbz	r5, 84bae <_svfprintf_r+0x96>
   84b8e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   84b90:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   84b92:	3301      	adds	r3, #1
   84b94:	442a      	add	r2, r5
   84b96:	2b07      	cmp	r3, #7
   84b98:	f8c6 9000 	str.w	r9, [r6]
   84b9c:	6075      	str	r5, [r6, #4]
   84b9e:	922d      	str	r2, [sp, #180]	; 0xb4
   84ba0:	932c      	str	r3, [sp, #176]	; 0xb0
   84ba2:	f300 80c2 	bgt.w	84d2a <_svfprintf_r+0x212>
   84ba6:	3608      	adds	r6, #8
   84ba8:	980e      	ldr	r0, [sp, #56]	; 0x38
   84baa:	4428      	add	r0, r5
   84bac:	900e      	str	r0, [sp, #56]	; 0x38
   84bae:	7823      	ldrb	r3, [r4, #0]
   84bb0:	2b00      	cmp	r3, #0
   84bb2:	f000 80c2 	beq.w	84d3a <_svfprintf_r+0x222>
   84bb6:	2300      	movs	r3, #0
   84bb8:	f894 8001 	ldrb.w	r8, [r4, #1]
   84bbc:	461a      	mov	r2, r3
   84bbe:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
   84bc2:	930f      	str	r3, [sp, #60]	; 0x3c
   84bc4:	9309      	str	r3, [sp, #36]	; 0x24
   84bc6:	f104 0901 	add.w	r9, r4, #1
   84bca:	f04f 34ff 	mov.w	r4, #4294967295
   84bce:	940a      	str	r4, [sp, #40]	; 0x28
   84bd0:	f109 0901 	add.w	r9, r9, #1
   84bd4:	f1a8 0320 	sub.w	r3, r8, #32
   84bd8:	2b58      	cmp	r3, #88	; 0x58
   84bda:	f200 83c5 	bhi.w	85368 <_svfprintf_r+0x850>
   84bde:	e8df f013 	tbh	[pc, r3, lsl #1]
   84be2:	026a      	.short	0x026a
   84be4:	03c303c3 	.word	0x03c303c3
   84be8:	03c30271 	.word	0x03c30271
   84bec:	03c303c3 	.word	0x03c303c3
   84bf0:	03c303c3 	.word	0x03c303c3
   84bf4:	031403c3 	.word	0x031403c3
   84bf8:	03c30366 	.word	0x03c30366
   84bfc:	00c0009d 	.word	0x00c0009d
   84c00:	027803c3 	.word	0x027803c3
   84c04:	027f027f 	.word	0x027f027f
   84c08:	027f027f 	.word	0x027f027f
   84c0c:	027f027f 	.word	0x027f027f
   84c10:	027f027f 	.word	0x027f027f
   84c14:	03c3027f 	.word	0x03c3027f
   84c18:	03c303c3 	.word	0x03c303c3
   84c1c:	03c303c3 	.word	0x03c303c3
   84c20:	03c303c3 	.word	0x03c303c3
   84c24:	03c303c3 	.word	0x03c303c3
   84c28:	029003c3 	.word	0x029003c3
   84c2c:	03c30371 	.word	0x03c30371
   84c30:	03c30371 	.word	0x03c30371
   84c34:	03c303c3 	.word	0x03c303c3
   84c38:	036a03c3 	.word	0x036a03c3
   84c3c:	03c303c3 	.word	0x03c303c3
   84c40:	03c30078 	.word	0x03c30078
   84c44:	03c303c3 	.word	0x03c303c3
   84c48:	03c303c3 	.word	0x03c303c3
   84c4c:	03c30059 	.word	0x03c30059
   84c50:	02af03c3 	.word	0x02af03c3
   84c54:	03c303c3 	.word	0x03c303c3
   84c58:	03c303c3 	.word	0x03c303c3
   84c5c:	03c303c3 	.word	0x03c303c3
   84c60:	03c303c3 	.word	0x03c303c3
   84c64:	03c303c3 	.word	0x03c303c3
   84c68:	03480337 	.word	0x03480337
   84c6c:	03710371 	.word	0x03710371
   84c70:	02ff0371 	.word	0x02ff0371
   84c74:	03c30348 	.word	0x03c30348
   84c78:	030803c3 	.word	0x030803c3
   84c7c:	02c503c3 	.word	0x02c503c3
   84c80:	0320007c 	.word	0x0320007c
   84c84:	03c303a3 	.word	0x03c303a3
   84c88:	03c302d9 	.word	0x03c302d9
   84c8c:	03c3005f 	.word	0x03c3005f
   84c90:	00de03c3 	.word	0x00de03c3
   84c94:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84c98:	f04c 0c10 	orr.w	ip, ip, #16
   84c9c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   84ca0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84ca2:	06a2      	lsls	r2, r4, #26
   84ca4:	f100 8354 	bmi.w	85350 <_svfprintf_r+0x838>
   84ca8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84caa:	06e3      	lsls	r3, r4, #27
   84cac:	f100 85bd 	bmi.w	8582a <_svfprintf_r+0xd12>
   84cb0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84cb4:	f01c 0f40 	tst.w	ip, #64	; 0x40
   84cb8:	f000 85b7 	beq.w	8582a <_svfprintf_r+0xd12>
   84cbc:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   84cc0:	2500      	movs	r5, #0
   84cc2:	f8bc 4000 	ldrh.w	r4, [ip]
   84cc6:	f10c 0c04 	add.w	ip, ip, #4
   84cca:	2301      	movs	r3, #1
   84ccc:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   84cd0:	e08c      	b.n	84dec <_svfprintf_r+0x2d4>
   84cd2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84cd4:	f045 0510 	orr.w	r5, r5, #16
   84cd8:	9509      	str	r5, [sp, #36]	; 0x24
   84cda:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84cde:	f01c 0320 	ands.w	r3, ip, #32
   84ce2:	f040 832a 	bne.w	8533a <_svfprintf_r+0x822>
   84ce6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84cea:	f01c 0210 	ands.w	r2, ip, #16
   84cee:	f040 85a4 	bne.w	8583a <_svfprintf_r+0xd22>
   84cf2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84cf6:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
   84cfa:	f000 859e 	beq.w	8583a <_svfprintf_r+0xd22>
   84cfe:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   84d02:	4613      	mov	r3, r2
   84d04:	f8bc 4000 	ldrh.w	r4, [ip]
   84d08:	f10c 0c04 	add.w	ip, ip, #4
   84d0c:	2500      	movs	r5, #0
   84d0e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   84d12:	e06b      	b.n	84dec <_svfprintf_r+0x2d4>
   84d14:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84d16:	9310      	str	r3, [sp, #64]	; 0x40
   84d18:	4264      	negs	r4, r4
   84d1a:	940f      	str	r4, [sp, #60]	; 0x3c
   84d1c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84d1e:	f045 0504 	orr.w	r5, r5, #4
   84d22:	9509      	str	r5, [sp, #36]	; 0x24
   84d24:	f899 8000 	ldrb.w	r8, [r9]
   84d28:	e752      	b.n	84bd0 <_svfprintf_r+0xb8>
   84d2a:	980d      	ldr	r0, [sp, #52]	; 0x34
   84d2c:	990c      	ldr	r1, [sp, #48]	; 0x30
   84d2e:	aa2b      	add	r2, sp, #172	; 0xac
   84d30:	f004 fdc2 	bl	898b8 <__ssprint_r>
   84d34:	b940      	cbnz	r0, 84d48 <_svfprintf_r+0x230>
   84d36:	ae38      	add	r6, sp, #224	; 0xe0
   84d38:	e736      	b.n	84ba8 <_svfprintf_r+0x90>
   84d3a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   84d3c:	b123      	cbz	r3, 84d48 <_svfprintf_r+0x230>
   84d3e:	980d      	ldr	r0, [sp, #52]	; 0x34
   84d40:	990c      	ldr	r1, [sp, #48]	; 0x30
   84d42:	aa2b      	add	r2, sp, #172	; 0xac
   84d44:	f004 fdb8 	bl	898b8 <__ssprint_r>
   84d48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84d4a:	980e      	ldr	r0, [sp, #56]	; 0x38
   84d4c:	89a3      	ldrh	r3, [r4, #12]
   84d4e:	f013 0f40 	tst.w	r3, #64	; 0x40
   84d52:	bf18      	it	ne
   84d54:	f04f 30ff 	movne.w	r0, #4294967295
   84d58:	b049      	add	sp, #292	; 0x124
   84d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d5e:	464c      	mov	r4, r9
   84d60:	e725      	b.n	84bae <_svfprintf_r+0x96>
   84d62:	f899 8000 	ldrb.w	r8, [r9]
   84d66:	f109 0001 	add.w	r0, r9, #1
   84d6a:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
   84d6e:	f001 810c 	beq.w	85f8a <_svfprintf_r+0x1472>
   84d72:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   84d76:	2b09      	cmp	r3, #9
   84d78:	bf98      	it	ls
   84d7a:	2100      	movls	r1, #0
   84d7c:	f201 806b 	bhi.w	85e56 <_svfprintf_r+0x133e>
   84d80:	f810 8b01 	ldrb.w	r8, [r0], #1
   84d84:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84d88:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   84d8c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   84d90:	2b09      	cmp	r3, #9
   84d92:	d9f5      	bls.n	84d80 <_svfprintf_r+0x268>
   84d94:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   84d98:	910a      	str	r1, [sp, #40]	; 0x28
   84d9a:	4681      	mov	r9, r0
   84d9c:	e71a      	b.n	84bd4 <_svfprintf_r+0xbc>
   84d9e:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84da0:	4ca1      	ldr	r4, [pc, #644]	; (85028 <_svfprintf_r+0x510>)
   84da2:	06af      	lsls	r7, r5, #26
   84da4:	941a      	str	r4, [sp, #104]	; 0x68
   84da6:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   84daa:	f140 81d1 	bpl.w	85150 <_svfprintf_r+0x638>
   84dae:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   84db2:	f10c 0307 	add.w	r3, ip, #7
   84db6:	f023 0307 	bic.w	r3, r3, #7
   84dba:	f103 0408 	add.w	r4, r3, #8
   84dbe:	9410      	str	r4, [sp, #64]	; 0x40
   84dc0:	e9d3 4500 	ldrd	r4, r5, [r3]
   84dc4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84dc8:	f01c 0f01 	tst.w	ip, #1
   84dcc:	f000 8462 	beq.w	85694 <_svfprintf_r+0xb7c>
   84dd0:	ea54 0005 	orrs.w	r0, r4, r5
   84dd4:	f000 845e 	beq.w	85694 <_svfprintf_r+0xb7c>
   84dd8:	2330      	movs	r3, #48	; 0x30
   84dda:	f04c 0c02 	orr.w	ip, ip, #2
   84dde:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
   84de2:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
   84de6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   84dea:	2302      	movs	r3, #2
   84dec:	f04f 0a00 	mov.w	sl, #0
   84df0:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   84df4:	990a      	ldr	r1, [sp, #40]	; 0x28
   84df6:	2900      	cmp	r1, #0
   84df8:	db05      	blt.n	84e06 <_svfprintf_r+0x2ee>
   84dfa:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84dfe:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
   84e02:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   84e06:	ea54 0005 	orrs.w	r0, r4, r5
   84e0a:	f040 82c5 	bne.w	85398 <_svfprintf_r+0x880>
   84e0e:	990a      	ldr	r1, [sp, #40]	; 0x28
   84e10:	2900      	cmp	r1, #0
   84e12:	f040 82c1 	bne.w	85398 <_svfprintf_r+0x880>
   84e16:	2b00      	cmp	r3, #0
   84e18:	f040 8438 	bne.w	8568c <_svfprintf_r+0xb74>
   84e1c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84e20:	f01c 0f01 	tst.w	ip, #1
   84e24:	f000 8432 	beq.w	8568c <_svfprintf_r+0xb74>
   84e28:	af48      	add	r7, sp, #288	; 0x120
   84e2a:	2330      	movs	r3, #48	; 0x30
   84e2c:	9d08      	ldr	r5, [sp, #32]
   84e2e:	f807 3d41 	strb.w	r3, [r7, #-65]!
   84e32:	1bec      	subs	r4, r5, r7
   84e34:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   84e38:	2500      	movs	r5, #0
   84e3a:	4564      	cmp	r4, ip
   84e3c:	bfa8      	it	ge
   84e3e:	46a4      	movge	ip, r4
   84e40:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   84e44:	9514      	str	r5, [sp, #80]	; 0x50
   84e46:	f1ba 0f00 	cmp.w	sl, #0
   84e4a:	d002      	beq.n	84e52 <_svfprintf_r+0x33a>
   84e4c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84e4e:	3501      	adds	r5, #1
   84e50:	950b      	str	r5, [sp, #44]	; 0x2c
   84e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84e54:	f013 0302 	ands.w	r3, r3, #2
   84e58:	9312      	str	r3, [sp, #72]	; 0x48
   84e5a:	d002      	beq.n	84e62 <_svfprintf_r+0x34a>
   84e5c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   84e5e:	3502      	adds	r5, #2
   84e60:	950b      	str	r5, [sp, #44]	; 0x2c
   84e62:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   84e66:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
   84e6a:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
   84e6e:	f040 8290 	bne.w	85392 <_svfprintf_r+0x87a>
   84e72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   84e74:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
   84e78:	ebcc 0b05 	rsb	fp, ip, r5
   84e7c:	f1bb 0f00 	cmp.w	fp, #0
   84e80:	f340 8287 	ble.w	85392 <_svfprintf_r+0x87a>
   84e84:	f1bb 0f10 	cmp.w	fp, #16
   84e88:	992d      	ldr	r1, [sp, #180]	; 0xb4
   84e8a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   84e8c:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 85030 <_svfprintf_r+0x518>
   84e90:	dd2c      	ble.n	84eec <_svfprintf_r+0x3d4>
   84e92:	971b      	str	r7, [sp, #108]	; 0x6c
   84e94:	4630      	mov	r0, r6
   84e96:	4657      	mov	r7, sl
   84e98:	2510      	movs	r5, #16
   84e9a:	46ca      	mov	sl, r9
   84e9c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   84e9e:	46a1      	mov	r9, r4
   84ea0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   84ea2:	e006      	b.n	84eb2 <_svfprintf_r+0x39a>
   84ea4:	f1ab 0b10 	sub.w	fp, fp, #16
   84ea8:	f1bb 0f10 	cmp.w	fp, #16
   84eac:	f100 0008 	add.w	r0, r0, #8
   84eb0:	dd17      	ble.n	84ee2 <_svfprintf_r+0x3ca>
   84eb2:	3201      	adds	r2, #1
   84eb4:	3110      	adds	r1, #16
   84eb6:	2a07      	cmp	r2, #7
   84eb8:	912d      	str	r1, [sp, #180]	; 0xb4
   84eba:	922c      	str	r2, [sp, #176]	; 0xb0
   84ebc:	6007      	str	r7, [r0, #0]
   84ebe:	6045      	str	r5, [r0, #4]
   84ec0:	ddf0      	ble.n	84ea4 <_svfprintf_r+0x38c>
   84ec2:	4620      	mov	r0, r4
   84ec4:	4631      	mov	r1, r6
   84ec6:	aa2b      	add	r2, sp, #172	; 0xac
   84ec8:	f004 fcf6 	bl	898b8 <__ssprint_r>
   84ecc:	2800      	cmp	r0, #0
   84ece:	f47f af3b 	bne.w	84d48 <_svfprintf_r+0x230>
   84ed2:	f1ab 0b10 	sub.w	fp, fp, #16
   84ed6:	f1bb 0f10 	cmp.w	fp, #16
   84eda:	992d      	ldr	r1, [sp, #180]	; 0xb4
   84edc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   84ede:	a838      	add	r0, sp, #224	; 0xe0
   84ee0:	dce7      	bgt.n	84eb2 <_svfprintf_r+0x39a>
   84ee2:	464c      	mov	r4, r9
   84ee4:	46d1      	mov	r9, sl
   84ee6:	46ba      	mov	sl, r7
   84ee8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
   84eea:	4606      	mov	r6, r0
   84eec:	3201      	adds	r2, #1
   84eee:	eb0b 0c01 	add.w	ip, fp, r1
   84ef2:	2a07      	cmp	r2, #7
   84ef4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   84ef8:	922c      	str	r2, [sp, #176]	; 0xb0
   84efa:	e886 0c00 	stmia.w	r6, {sl, fp}
   84efe:	f300 841a 	bgt.w	85736 <_svfprintf_r+0xc1e>
   84f02:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   84f06:	3608      	adds	r6, #8
   84f08:	f1ba 0f00 	cmp.w	sl, #0
   84f0c:	d00f      	beq.n	84f2e <_svfprintf_r+0x416>
   84f0e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   84f10:	f10c 0c01 	add.w	ip, ip, #1
   84f14:	3301      	adds	r3, #1
   84f16:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
   84f1a:	2201      	movs	r2, #1
   84f1c:	2b07      	cmp	r3, #7
   84f1e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   84f22:	932c      	str	r3, [sp, #176]	; 0xb0
   84f24:	e886 0006 	stmia.w	r6, {r1, r2}
   84f28:	f300 83a4 	bgt.w	85674 <_svfprintf_r+0xb5c>
   84f2c:	3608      	adds	r6, #8
   84f2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84f30:	b173      	cbz	r3, 84f50 <_svfprintf_r+0x438>
   84f32:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   84f34:	f10c 0c02 	add.w	ip, ip, #2
   84f38:	3301      	adds	r3, #1
   84f3a:	a924      	add	r1, sp, #144	; 0x90
   84f3c:	2202      	movs	r2, #2
   84f3e:	2b07      	cmp	r3, #7
   84f40:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   84f44:	932c      	str	r3, [sp, #176]	; 0xb0
   84f46:	e886 0006 	stmia.w	r6, {r1, r2}
   84f4a:	f300 8387 	bgt.w	8565c <_svfprintf_r+0xb44>
   84f4e:	3608      	adds	r6, #8
   84f50:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   84f52:	2d80      	cmp	r5, #128	; 0x80
   84f54:	f000 82ca 	beq.w	854ec <_svfprintf_r+0x9d4>
   84f58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   84f5a:	ebc4 0a05 	rsb	sl, r4, r5
   84f5e:	f1ba 0f00 	cmp.w	sl, #0
   84f62:	dd3b      	ble.n	84fdc <_svfprintf_r+0x4c4>
   84f64:	f1ba 0f10 	cmp.w	sl, #16
   84f68:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   84f6a:	4d30      	ldr	r5, [pc, #192]	; (8502c <_svfprintf_r+0x514>)
   84f6c:	dd2b      	ble.n	84fc6 <_svfprintf_r+0x4ae>
   84f6e:	940a      	str	r4, [sp, #40]	; 0x28
   84f70:	4632      	mov	r2, r6
   84f72:	f04f 0b10 	mov.w	fp, #16
   84f76:	462e      	mov	r6, r5
   84f78:	4661      	mov	r1, ip
   84f7a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   84f7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   84f7e:	e006      	b.n	84f8e <_svfprintf_r+0x476>
   84f80:	f1aa 0a10 	sub.w	sl, sl, #16
   84f84:	f1ba 0f10 	cmp.w	sl, #16
   84f88:	f102 0208 	add.w	r2, r2, #8
   84f8c:	dd17      	ble.n	84fbe <_svfprintf_r+0x4a6>
   84f8e:	3301      	adds	r3, #1
   84f90:	3110      	adds	r1, #16
   84f92:	2b07      	cmp	r3, #7
   84f94:	912d      	str	r1, [sp, #180]	; 0xb4
   84f96:	932c      	str	r3, [sp, #176]	; 0xb0
   84f98:	e882 0840 	stmia.w	r2, {r6, fp}
   84f9c:	ddf0      	ble.n	84f80 <_svfprintf_r+0x468>
   84f9e:	4620      	mov	r0, r4
   84fa0:	4629      	mov	r1, r5
   84fa2:	aa2b      	add	r2, sp, #172	; 0xac
   84fa4:	f004 fc88 	bl	898b8 <__ssprint_r>
   84fa8:	2800      	cmp	r0, #0
   84faa:	f47f aecd 	bne.w	84d48 <_svfprintf_r+0x230>
   84fae:	f1aa 0a10 	sub.w	sl, sl, #16
   84fb2:	f1ba 0f10 	cmp.w	sl, #16
   84fb6:	992d      	ldr	r1, [sp, #180]	; 0xb4
   84fb8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   84fba:	aa38      	add	r2, sp, #224	; 0xe0
   84fbc:	dce7      	bgt.n	84f8e <_svfprintf_r+0x476>
   84fbe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   84fc0:	4635      	mov	r5, r6
   84fc2:	468c      	mov	ip, r1
   84fc4:	4616      	mov	r6, r2
   84fc6:	3301      	adds	r3, #1
   84fc8:	44d4      	add	ip, sl
   84fca:	2b07      	cmp	r3, #7
   84fcc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   84fd0:	932c      	str	r3, [sp, #176]	; 0xb0
   84fd2:	e886 0420 	stmia.w	r6, {r5, sl}
   84fd6:	f300 8335 	bgt.w	85644 <_svfprintf_r+0xb2c>
   84fda:	3608      	adds	r6, #8
   84fdc:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84fde:	05ed      	lsls	r5, r5, #23
   84fe0:	f100 8224 	bmi.w	8542c <_svfprintf_r+0x914>
   84fe4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   84fe6:	44a4      	add	ip, r4
   84fe8:	3301      	adds	r3, #1
   84fea:	2b07      	cmp	r3, #7
   84fec:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   84ff0:	6037      	str	r7, [r6, #0]
   84ff2:	6074      	str	r4, [r6, #4]
   84ff4:	932c      	str	r3, [sp, #176]	; 0xb0
   84ff6:	f300 830f 	bgt.w	85618 <_svfprintf_r+0xb00>
   84ffa:	3608      	adds	r6, #8
   84ffc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84ffe:	0763      	lsls	r3, r4, #29
   85000:	d549      	bpl.n	85096 <_svfprintf_r+0x57e>
   85002:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   85004:	980b      	ldr	r0, [sp, #44]	; 0x2c
   85006:	1a2c      	subs	r4, r5, r0
   85008:	2c00      	cmp	r4, #0
   8500a:	dd44      	ble.n	85096 <_svfprintf_r+0x57e>
   8500c:	2c10      	cmp	r4, #16
   8500e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85010:	f8df a01c 	ldr.w	sl, [pc, #28]	; 85030 <_svfprintf_r+0x518>
   85014:	dd2b      	ble.n	8506e <_svfprintf_r+0x556>
   85016:	4657      	mov	r7, sl
   85018:	2510      	movs	r5, #16
   8501a:	4662      	mov	r2, ip
   8501c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   85020:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   85024:	e00b      	b.n	8503e <_svfprintf_r+0x526>
   85026:	bf00      	nop
   85028:	0008a7c8 	.word	0x0008a7c8
   8502c:	0008a794 	.word	0x0008a794
   85030:	0008a7e4 	.word	0x0008a7e4
   85034:	3c10      	subs	r4, #16
   85036:	2c10      	cmp	r4, #16
   85038:	f106 0608 	add.w	r6, r6, #8
   8503c:	dd15      	ble.n	8506a <_svfprintf_r+0x552>
   8503e:	3301      	adds	r3, #1
   85040:	3210      	adds	r2, #16
   85042:	2b07      	cmp	r3, #7
   85044:	922d      	str	r2, [sp, #180]	; 0xb4
   85046:	932c      	str	r3, [sp, #176]	; 0xb0
   85048:	6037      	str	r7, [r6, #0]
   8504a:	6075      	str	r5, [r6, #4]
   8504c:	ddf2      	ble.n	85034 <_svfprintf_r+0x51c>
   8504e:	4650      	mov	r0, sl
   85050:	4641      	mov	r1, r8
   85052:	aa2b      	add	r2, sp, #172	; 0xac
   85054:	f004 fc30 	bl	898b8 <__ssprint_r>
   85058:	2800      	cmp	r0, #0
   8505a:	f47f ae75 	bne.w	84d48 <_svfprintf_r+0x230>
   8505e:	3c10      	subs	r4, #16
   85060:	2c10      	cmp	r4, #16
   85062:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   85064:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85066:	ae38      	add	r6, sp, #224	; 0xe0
   85068:	dce9      	bgt.n	8503e <_svfprintf_r+0x526>
   8506a:	4694      	mov	ip, r2
   8506c:	46ba      	mov	sl, r7
   8506e:	3301      	adds	r3, #1
   85070:	44a4      	add	ip, r4
   85072:	2b07      	cmp	r3, #7
   85074:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   85078:	932c      	str	r3, [sp, #176]	; 0xb0
   8507a:	f8c6 a000 	str.w	sl, [r6]
   8507e:	6074      	str	r4, [r6, #4]
   85080:	dd09      	ble.n	85096 <_svfprintf_r+0x57e>
   85082:	980d      	ldr	r0, [sp, #52]	; 0x34
   85084:	990c      	ldr	r1, [sp, #48]	; 0x30
   85086:	aa2b      	add	r2, sp, #172	; 0xac
   85088:	f004 fc16 	bl	898b8 <__ssprint_r>
   8508c:	2800      	cmp	r0, #0
   8508e:	f47f ae5b 	bne.w	84d48 <_svfprintf_r+0x230>
   85092:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   85096:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   85098:	980b      	ldr	r0, [sp, #44]	; 0x2c
   8509a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   8509c:	42a8      	cmp	r0, r5
   8509e:	bfac      	ite	ge
   850a0:	1824      	addge	r4, r4, r0
   850a2:	1964      	addlt	r4, r4, r5
   850a4:	940e      	str	r4, [sp, #56]	; 0x38
   850a6:	f1bc 0f00 	cmp.w	ip, #0
   850aa:	f040 82c1 	bne.w	85630 <_svfprintf_r+0xb18>
   850ae:	2300      	movs	r3, #0
   850b0:	932c      	str	r3, [sp, #176]	; 0xb0
   850b2:	ae38      	add	r6, sp, #224	; 0xe0
   850b4:	e556      	b.n	84b64 <_svfprintf_r+0x4c>
   850b6:	f899 8000 	ldrb.w	r8, [r9]
   850ba:	2a00      	cmp	r2, #0
   850bc:	f47f ad88 	bne.w	84bd0 <_svfprintf_r+0xb8>
   850c0:	2220      	movs	r2, #32
   850c2:	e585      	b.n	84bd0 <_svfprintf_r+0xb8>
   850c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   850c6:	f045 0501 	orr.w	r5, r5, #1
   850ca:	9509      	str	r5, [sp, #36]	; 0x24
   850cc:	f899 8000 	ldrb.w	r8, [r9]
   850d0:	e57e      	b.n	84bd0 <_svfprintf_r+0xb8>
   850d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   850d4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   850d8:	9509      	str	r5, [sp, #36]	; 0x24
   850da:	f899 8000 	ldrb.w	r8, [r9]
   850de:	e577      	b.n	84bd0 <_svfprintf_r+0xb8>
   850e0:	2400      	movs	r4, #0
   850e2:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   850e6:	940f      	str	r4, [sp, #60]	; 0x3c
   850e8:	4621      	mov	r1, r4
   850ea:	f819 8b01 	ldrb.w	r8, [r9], #1
   850ee:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   850f2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   850f6:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   850fa:	2b09      	cmp	r3, #9
   850fc:	d9f5      	bls.n	850ea <_svfprintf_r+0x5d2>
   850fe:	910f      	str	r1, [sp, #60]	; 0x3c
   85100:	e568      	b.n	84bd4 <_svfprintf_r+0xbc>
   85102:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   85106:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   8510a:	f04c 0c10 	orr.w	ip, ip, #16
   8510e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   85112:	9c09      	ldr	r4, [sp, #36]	; 0x24
   85114:	06a5      	lsls	r5, r4, #26
   85116:	f140 80b2 	bpl.w	8527e <_svfprintf_r+0x766>
   8511a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8511c:	1de9      	adds	r1, r5, #7
   8511e:	f021 0107 	bic.w	r1, r1, #7
   85122:	e9d1 2300 	ldrd	r2, r3, [r1]
   85126:	3108      	adds	r1, #8
   85128:	9110      	str	r1, [sp, #64]	; 0x40
   8512a:	4614      	mov	r4, r2
   8512c:	461d      	mov	r5, r3
   8512e:	2a00      	cmp	r2, #0
   85130:	f173 0c00 	sbcs.w	ip, r3, #0
   85134:	f2c0 8394 	blt.w	85860 <_svfprintf_r+0xd48>
   85138:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   8513c:	2301      	movs	r3, #1
   8513e:	e659      	b.n	84df4 <_svfprintf_r+0x2dc>
   85140:	9d09      	ldr	r5, [sp, #36]	; 0x24
   85142:	4cb6      	ldr	r4, [pc, #728]	; (8541c <_svfprintf_r+0x904>)
   85144:	06af      	lsls	r7, r5, #26
   85146:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   8514a:	941a      	str	r4, [sp, #104]	; 0x68
   8514c:	f53f ae2f 	bmi.w	84dae <_svfprintf_r+0x296>
   85150:	9d09      	ldr	r5, [sp, #36]	; 0x24
   85152:	06ed      	lsls	r5, r5, #27
   85154:	f140 8443 	bpl.w	859de <_svfprintf_r+0xec6>
   85158:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   8515c:	2500      	movs	r5, #0
   8515e:	f8dc 4000 	ldr.w	r4, [ip]
   85162:	f10c 0c04 	add.w	ip, ip, #4
   85166:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   8516a:	e62b      	b.n	84dc4 <_svfprintf_r+0x2ac>
   8516c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   85170:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   85174:	f01c 0f20 	tst.w	ip, #32
   85178:	f000 8440 	beq.w	859fc <_svfprintf_r+0xee4>
   8517c:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8517e:	6821      	ldr	r1, [r4, #0]
   85180:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   85182:	17e5      	asrs	r5, r4, #31
   85184:	462b      	mov	r3, r5
   85186:	9d10      	ldr	r5, [sp, #64]	; 0x40
   85188:	4622      	mov	r2, r4
   8518a:	3504      	adds	r5, #4
   8518c:	9510      	str	r5, [sp, #64]	; 0x40
   8518e:	e9c1 2300 	strd	r2, r3, [r1]
   85192:	e4e7      	b.n	84b64 <_svfprintf_r+0x4c>
   85194:	9c10      	ldr	r4, [sp, #64]	; 0x40
   85196:	f04f 0a00 	mov.w	sl, #0
   8519a:	6827      	ldr	r7, [r4, #0]
   8519c:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   851a0:	1d25      	adds	r5, r4, #4
   851a2:	2f00      	cmp	r7, #0
   851a4:	f000 85e9 	beq.w	85d7a <_svfprintf_r+0x1262>
   851a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   851aa:	4638      	mov	r0, r7
   851ac:	2c00      	cmp	r4, #0
   851ae:	f2c0 859b 	blt.w	85ce8 <_svfprintf_r+0x11d0>
   851b2:	4651      	mov	r1, sl
   851b4:	4622      	mov	r2, r4
   851b6:	f003 fd8d 	bl	88cd4 <memchr>
   851ba:	2800      	cmp	r0, #0
   851bc:	f000 8613 	beq.w	85de6 <_svfprintf_r+0x12ce>
   851c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   851c2:	1bc0      	subs	r0, r0, r7
   851c4:	42a0      	cmp	r0, r4
   851c6:	bfb8      	it	lt
   851c8:	4604      	movlt	r4, r0
   851ca:	9510      	str	r5, [sp, #64]	; 0x40
   851cc:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
   851d0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   851d4:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
   851d8:	950b      	str	r5, [sp, #44]	; 0x2c
   851da:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   851de:	e632      	b.n	84e46 <_svfprintf_r+0x32e>
   851e0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   851e4:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
   851e8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   851ec:	f899 8000 	ldrb.w	r8, [r9]
   851f0:	e4ee      	b.n	84bd0 <_svfprintf_r+0xb8>
   851f2:	f899 8000 	ldrb.w	r8, [r9]
   851f6:	464b      	mov	r3, r9
   851f8:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   851fc:	f000 847f 	beq.w	85afe <_svfprintf_r+0xfe6>
   85200:	9d09      	ldr	r5, [sp, #36]	; 0x24
   85202:	f045 0510 	orr.w	r5, r5, #16
   85206:	9509      	str	r5, [sp, #36]	; 0x24
   85208:	e4e2      	b.n	84bd0 <_svfprintf_r+0xb8>
   8520a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8520c:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8520e:	6824      	ldr	r4, [r4, #0]
   85210:	1d2b      	adds	r3, r5, #4
   85212:	2c00      	cmp	r4, #0
   85214:	940f      	str	r4, [sp, #60]	; 0x3c
   85216:	f6ff ad7d 	blt.w	84d14 <_svfprintf_r+0x1fc>
   8521a:	9310      	str	r3, [sp, #64]	; 0x40
   8521c:	f899 8000 	ldrb.w	r8, [r9]
   85220:	e4d6      	b.n	84bd0 <_svfprintf_r+0xb8>
   85222:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85224:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   85228:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8522a:	487d      	ldr	r0, [pc, #500]	; (85420 <_svfprintf_r+0x908>)
   8522c:	3504      	adds	r5, #4
   8522e:	681c      	ldr	r4, [r3, #0]
   85230:	f04f 0878 	mov.w	r8, #120	; 0x78
   85234:	2330      	movs	r3, #48	; 0x30
   85236:	f04c 0c02 	orr.w	ip, ip, #2
   8523a:	9510      	str	r5, [sp, #64]	; 0x40
   8523c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
   85240:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   85244:	2500      	movs	r5, #0
   85246:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
   8524a:	901a      	str	r0, [sp, #104]	; 0x68
   8524c:	2302      	movs	r3, #2
   8524e:	e5cd      	b.n	84dec <_svfprintf_r+0x2d4>
   85250:	9b10      	ldr	r3, [sp, #64]	; 0x40
   85252:	9d10      	ldr	r5, [sp, #64]	; 0x40
   85254:	681a      	ldr	r2, [r3, #0]
   85256:	2401      	movs	r4, #1
   85258:	2300      	movs	r3, #0
   8525a:	3504      	adds	r5, #4
   8525c:	469a      	mov	sl, r3
   8525e:	940b      	str	r4, [sp, #44]	; 0x2c
   85260:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
   85264:	9510      	str	r5, [sp, #64]	; 0x40
   85266:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
   8526a:	930a      	str	r3, [sp, #40]	; 0x28
   8526c:	9314      	str	r3, [sp, #80]	; 0x50
   8526e:	af2e      	add	r7, sp, #184	; 0xb8
   85270:	e5ef      	b.n	84e52 <_svfprintf_r+0x33a>
   85272:	9c09      	ldr	r4, [sp, #36]	; 0x24
   85274:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   85278:	06a5      	lsls	r5, r4, #26
   8527a:	f53f af4e 	bmi.w	8511a <_svfprintf_r+0x602>
   8527e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   85282:	f01c 0f10 	tst.w	ip, #16
   85286:	f040 82df 	bne.w	85848 <_svfprintf_r+0xd30>
   8528a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   8528e:	f01c 0f40 	tst.w	ip, #64	; 0x40
   85292:	f000 82d9 	beq.w	85848 <_svfprintf_r+0xd30>
   85296:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   8529a:	f9bc 4000 	ldrsh.w	r4, [ip]
   8529e:	f10c 0c04 	add.w	ip, ip, #4
   852a2:	17e5      	asrs	r5, r4, #31
   852a4:	4622      	mov	r2, r4
   852a6:	462b      	mov	r3, r5
   852a8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   852ac:	e73f      	b.n	8512e <_svfprintf_r+0x616>
   852ae:	f899 8000 	ldrb.w	r8, [r9]
   852b2:	222b      	movs	r2, #43	; 0x2b
   852b4:	e48c      	b.n	84bd0 <_svfprintf_r+0xb8>
   852b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
   852b8:	f045 0508 	orr.w	r5, r5, #8
   852bc:	9509      	str	r5, [sp, #36]	; 0x24
   852be:	f899 8000 	ldrb.w	r8, [r9]
   852c2:	e485      	b.n	84bd0 <_svfprintf_r+0xb8>
   852c4:	9d10      	ldr	r5, [sp, #64]	; 0x40
   852c6:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   852ca:	1deb      	adds	r3, r5, #7
   852cc:	f023 0307 	bic.w	r3, r3, #7
   852d0:	f103 0c08 	add.w	ip, r3, #8
   852d4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   852d8:	e9d3 4500 	ldrd	r4, r5, [r3]
   852dc:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
   852e0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   852e4:	f7fe fd5c 	bl	83da0 <__fpclassifyd>
   852e8:	2801      	cmp	r0, #1
   852ea:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   852ee:	f040 835c 	bne.w	859aa <_svfprintf_r+0xe92>
   852f2:	2200      	movs	r2, #0
   852f4:	2300      	movs	r3, #0
   852f6:	f7ff f9ad 	bl	84654 <__aeabi_dcmplt>
   852fa:	2800      	cmp	r0, #0
   852fc:	f040 8563 	bne.w	85dc6 <_svfprintf_r+0x12ae>
   85300:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   85304:	2503      	movs	r5, #3
   85306:	950b      	str	r5, [sp, #44]	; 0x2c
   85308:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8530a:	4f46      	ldr	r7, [pc, #280]	; (85424 <_svfprintf_r+0x90c>)
   8530c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   85310:	4b45      	ldr	r3, [pc, #276]	; (85428 <_svfprintf_r+0x910>)
   85312:	2400      	movs	r4, #0
   85314:	9509      	str	r5, [sp, #36]	; 0x24
   85316:	2500      	movs	r5, #0
   85318:	940a      	str	r4, [sp, #40]	; 0x28
   8531a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   8531e:	bfd8      	it	le
   85320:	461f      	movle	r7, r3
   85322:	2403      	movs	r4, #3
   85324:	9514      	str	r5, [sp, #80]	; 0x50
   85326:	e58e      	b.n	84e46 <_svfprintf_r+0x32e>
   85328:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   8532c:	f04c 0c20 	orr.w	ip, ip, #32
   85330:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   85334:	f899 8000 	ldrb.w	r8, [r9]
   85338:	e44a      	b.n	84bd0 <_svfprintf_r+0xb8>
   8533a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8533c:	1de3      	adds	r3, r4, #7
   8533e:	f023 0307 	bic.w	r3, r3, #7
   85342:	f103 0508 	add.w	r5, r3, #8
   85346:	9510      	str	r5, [sp, #64]	; 0x40
   85348:	e9d3 4500 	ldrd	r4, r5, [r3]
   8534c:	2300      	movs	r3, #0
   8534e:	e54d      	b.n	84dec <_svfprintf_r+0x2d4>
   85350:	9d10      	ldr	r5, [sp, #64]	; 0x40
   85352:	1deb      	adds	r3, r5, #7
   85354:	f023 0307 	bic.w	r3, r3, #7
   85358:	f103 0c08 	add.w	ip, r3, #8
   8535c:	e9d3 4500 	ldrd	r4, r5, [r3]
   85360:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   85364:	2301      	movs	r3, #1
   85366:	e541      	b.n	84dec <_svfprintf_r+0x2d4>
   85368:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   8536c:	f1b8 0f00 	cmp.w	r8, #0
   85370:	f43f ace3 	beq.w	84d3a <_svfprintf_r+0x222>
   85374:	2300      	movs	r3, #0
   85376:	f04f 0c01 	mov.w	ip, #1
   8537a:	469a      	mov	sl, r3
   8537c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   85380:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
   85384:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
   85388:	930a      	str	r3, [sp, #40]	; 0x28
   8538a:	9314      	str	r3, [sp, #80]	; 0x50
   8538c:	4664      	mov	r4, ip
   8538e:	af2e      	add	r7, sp, #184	; 0xb8
   85390:	e55f      	b.n	84e52 <_svfprintf_r+0x33a>
   85392:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   85396:	e5b7      	b.n	84f08 <_svfprintf_r+0x3f0>
   85398:	2b01      	cmp	r3, #1
   8539a:	f000 80ec 	beq.w	85576 <_svfprintf_r+0xa5e>
   8539e:	2b02      	cmp	r3, #2
   853a0:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
   853a4:	d118      	bne.n	853d8 <_svfprintf_r+0x8c0>
   853a6:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
   853aa:	4619      	mov	r1, r3
   853ac:	f004 000f 	and.w	r0, r4, #15
   853b0:	0922      	lsrs	r2, r4, #4
   853b2:	f81c 0000 	ldrb.w	r0, [ip, r0]
   853b6:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   853ba:	092b      	lsrs	r3, r5, #4
   853bc:	7008      	strb	r0, [r1, #0]
   853be:	ea52 0003 	orrs.w	r0, r2, r3
   853c2:	460f      	mov	r7, r1
   853c4:	4614      	mov	r4, r2
   853c6:	461d      	mov	r5, r3
   853c8:	f101 31ff 	add.w	r1, r1, #4294967295
   853cc:	d1ee      	bne.n	853ac <_svfprintf_r+0x894>
   853ce:	9d08      	ldr	r5, [sp, #32]
   853d0:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
   853d4:	1bec      	subs	r4, r5, r7
   853d6:	e52d      	b.n	84e34 <_svfprintf_r+0x31c>
   853d8:	08e0      	lsrs	r0, r4, #3
   853da:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   853de:	f004 0207 	and.w	r2, r4, #7
   853e2:	08e9      	lsrs	r1, r5, #3
   853e4:	3230      	adds	r2, #48	; 0x30
   853e6:	ea50 0c01 	orrs.w	ip, r0, r1
   853ea:	461f      	mov	r7, r3
   853ec:	701a      	strb	r2, [r3, #0]
   853ee:	4604      	mov	r4, r0
   853f0:	460d      	mov	r5, r1
   853f2:	f103 33ff 	add.w	r3, r3, #4294967295
   853f6:	d1ef      	bne.n	853d8 <_svfprintf_r+0x8c0>
   853f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   853fa:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
   853fe:	07e0      	lsls	r0, r4, #31
   85400:	4639      	mov	r1, r7
   85402:	f140 80c1 	bpl.w	85588 <_svfprintf_r+0xa70>
   85406:	2a30      	cmp	r2, #48	; 0x30
   85408:	f000 80be 	beq.w	85588 <_svfprintf_r+0xa70>
   8540c:	9d08      	ldr	r5, [sp, #32]
   8540e:	461f      	mov	r7, r3
   85410:	2330      	movs	r3, #48	; 0x30
   85412:	1bec      	subs	r4, r5, r7
   85414:	f801 3c01 	strb.w	r3, [r1, #-1]
   85418:	e50c      	b.n	84e34 <_svfprintf_r+0x31c>
   8541a:	bf00      	nop
   8541c:	0008a7b4 	.word	0x0008a7b4
   85420:	0008a7c8 	.word	0x0008a7c8
   85424:	0008a7a8 	.word	0x0008a7a8
   85428:	0008a7a4 	.word	0x0008a7a4
   8542c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   85430:	f340 80ad 	ble.w	8558e <_svfprintf_r+0xa76>
   85434:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   85438:	2200      	movs	r2, #0
   8543a:	2300      	movs	r3, #0
   8543c:	f8cd c01c 	str.w	ip, [sp, #28]
   85440:	f7ff f8fe 	bl	84640 <__aeabi_dcmpeq>
   85444:	f8dd c01c 	ldr.w	ip, [sp, #28]
   85448:	2800      	cmp	r0, #0
   8544a:	f000 8126 	beq.w	8569a <_svfprintf_r+0xb82>
   8544e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85450:	49aa      	ldr	r1, [pc, #680]	; (856fc <_svfprintf_r+0xbe4>)
   85452:	3301      	adds	r3, #1
   85454:	f10c 0c01 	add.w	ip, ip, #1
   85458:	2201      	movs	r2, #1
   8545a:	2b07      	cmp	r3, #7
   8545c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   85460:	932c      	str	r3, [sp, #176]	; 0xb0
   85462:	e886 0006 	stmia.w	r6, {r1, r2}
   85466:	f300 82ed 	bgt.w	85a44 <_svfprintf_r+0xf2c>
   8546a:	3608      	adds	r6, #8
   8546c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8546e:	9c11      	ldr	r4, [sp, #68]	; 0x44
   85470:	42a3      	cmp	r3, r4
   85472:	db03      	blt.n	8547c <_svfprintf_r+0x964>
   85474:	9d09      	ldr	r5, [sp, #36]	; 0x24
   85476:	07ec      	lsls	r4, r5, #31
   85478:	f57f adc0 	bpl.w	84ffc <_svfprintf_r+0x4e4>
   8547c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8547e:	9c18      	ldr	r4, [sp, #96]	; 0x60
   85480:	3301      	adds	r3, #1
   85482:	9d15      	ldr	r5, [sp, #84]	; 0x54
   85484:	44a4      	add	ip, r4
   85486:	2b07      	cmp	r3, #7
   85488:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   8548c:	6035      	str	r5, [r6, #0]
   8548e:	6074      	str	r4, [r6, #4]
   85490:	932c      	str	r3, [sp, #176]	; 0xb0
   85492:	f300 833e 	bgt.w	85b12 <_svfprintf_r+0xffa>
   85496:	3608      	adds	r6, #8
   85498:	9d11      	ldr	r5, [sp, #68]	; 0x44
   8549a:	1e6c      	subs	r4, r5, #1
   8549c:	2c00      	cmp	r4, #0
   8549e:	f77f adad 	ble.w	84ffc <_svfprintf_r+0x4e4>
   854a2:	2c10      	cmp	r4, #16
   854a4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   854a6:	4d96      	ldr	r5, [pc, #600]	; (85700 <_svfprintf_r+0xbe8>)
   854a8:	f340 8197 	ble.w	857da <_svfprintf_r+0xcc2>
   854ac:	2710      	movs	r7, #16
   854ae:	4662      	mov	r2, ip
   854b0:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   854b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   854b8:	e004      	b.n	854c4 <_svfprintf_r+0x9ac>
   854ba:	3608      	adds	r6, #8
   854bc:	3c10      	subs	r4, #16
   854be:	2c10      	cmp	r4, #16
   854c0:	f340 818a 	ble.w	857d8 <_svfprintf_r+0xcc0>
   854c4:	3301      	adds	r3, #1
   854c6:	3210      	adds	r2, #16
   854c8:	2b07      	cmp	r3, #7
   854ca:	922d      	str	r2, [sp, #180]	; 0xb4
   854cc:	932c      	str	r3, [sp, #176]	; 0xb0
   854ce:	e886 00a0 	stmia.w	r6, {r5, r7}
   854d2:	ddf2      	ble.n	854ba <_svfprintf_r+0x9a2>
   854d4:	4640      	mov	r0, r8
   854d6:	4651      	mov	r1, sl
   854d8:	aa2b      	add	r2, sp, #172	; 0xac
   854da:	f004 f9ed 	bl	898b8 <__ssprint_r>
   854de:	2800      	cmp	r0, #0
   854e0:	f47f ac32 	bne.w	84d48 <_svfprintf_r+0x230>
   854e4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   854e6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   854e8:	ae38      	add	r6, sp, #224	; 0xe0
   854ea:	e7e7      	b.n	854bc <_svfprintf_r+0x9a4>
   854ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   854ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
   854f0:	ebc0 0a05 	rsb	sl, r0, r5
   854f4:	f1ba 0f00 	cmp.w	sl, #0
   854f8:	f77f ad2e 	ble.w	84f58 <_svfprintf_r+0x440>
   854fc:	f1ba 0f10 	cmp.w	sl, #16
   85500:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85502:	4d7f      	ldr	r5, [pc, #508]	; (85700 <_svfprintf_r+0xbe8>)
   85504:	dd2b      	ble.n	8555e <_svfprintf_r+0xa46>
   85506:	9412      	str	r4, [sp, #72]	; 0x48
   85508:	4632      	mov	r2, r6
   8550a:	f04f 0b10 	mov.w	fp, #16
   8550e:	462e      	mov	r6, r5
   85510:	4661      	mov	r1, ip
   85512:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   85514:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   85516:	e006      	b.n	85526 <_svfprintf_r+0xa0e>
   85518:	f1aa 0a10 	sub.w	sl, sl, #16
   8551c:	f1ba 0f10 	cmp.w	sl, #16
   85520:	f102 0208 	add.w	r2, r2, #8
   85524:	dd17      	ble.n	85556 <_svfprintf_r+0xa3e>
   85526:	3301      	adds	r3, #1
   85528:	3110      	adds	r1, #16
   8552a:	2b07      	cmp	r3, #7
   8552c:	912d      	str	r1, [sp, #180]	; 0xb4
   8552e:	932c      	str	r3, [sp, #176]	; 0xb0
   85530:	e882 0840 	stmia.w	r2, {r6, fp}
   85534:	ddf0      	ble.n	85518 <_svfprintf_r+0xa00>
   85536:	4620      	mov	r0, r4
   85538:	4629      	mov	r1, r5
   8553a:	aa2b      	add	r2, sp, #172	; 0xac
   8553c:	f004 f9bc 	bl	898b8 <__ssprint_r>
   85540:	2800      	cmp	r0, #0
   85542:	f47f ac01 	bne.w	84d48 <_svfprintf_r+0x230>
   85546:	f1aa 0a10 	sub.w	sl, sl, #16
   8554a:	f1ba 0f10 	cmp.w	sl, #16
   8554e:	992d      	ldr	r1, [sp, #180]	; 0xb4
   85550:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85552:	aa38      	add	r2, sp, #224	; 0xe0
   85554:	dce7      	bgt.n	85526 <_svfprintf_r+0xa0e>
   85556:	9c12      	ldr	r4, [sp, #72]	; 0x48
   85558:	4635      	mov	r5, r6
   8555a:	468c      	mov	ip, r1
   8555c:	4616      	mov	r6, r2
   8555e:	3301      	adds	r3, #1
   85560:	44d4      	add	ip, sl
   85562:	2b07      	cmp	r3, #7
   85564:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   85568:	932c      	str	r3, [sp, #176]	; 0xb0
   8556a:	e886 0420 	stmia.w	r6, {r5, sl}
   8556e:	f300 820f 	bgt.w	85990 <_svfprintf_r+0xe78>
   85572:	3608      	adds	r6, #8
   85574:	e4f0      	b.n	84f58 <_svfprintf_r+0x440>
   85576:	2d00      	cmp	r5, #0
   85578:	bf08      	it	eq
   8557a:	2c0a      	cmpeq	r4, #10
   8557c:	f080 8138 	bcs.w	857f0 <_svfprintf_r+0xcd8>
   85580:	3430      	adds	r4, #48	; 0x30
   85582:	af48      	add	r7, sp, #288	; 0x120
   85584:	f807 4d41 	strb.w	r4, [r7, #-65]!
   85588:	9d08      	ldr	r5, [sp, #32]
   8558a:	1bec      	subs	r4, r5, r7
   8558c:	e452      	b.n	84e34 <_svfprintf_r+0x31c>
   8558e:	9c11      	ldr	r4, [sp, #68]	; 0x44
   85590:	2c01      	cmp	r4, #1
   85592:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85594:	f340 81d2 	ble.w	8593c <_svfprintf_r+0xe24>
   85598:	3401      	adds	r4, #1
   8559a:	f10c 0301 	add.w	r3, ip, #1
   8559e:	2201      	movs	r2, #1
   855a0:	2c07      	cmp	r4, #7
   855a2:	932d      	str	r3, [sp, #180]	; 0xb4
   855a4:	6037      	str	r7, [r6, #0]
   855a6:	942c      	str	r4, [sp, #176]	; 0xb0
   855a8:	6072      	str	r2, [r6, #4]
   855aa:	f300 81d8 	bgt.w	8595e <_svfprintf_r+0xe46>
   855ae:	3608      	adds	r6, #8
   855b0:	9d15      	ldr	r5, [sp, #84]	; 0x54
   855b2:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   855b6:	3401      	adds	r4, #1
   855b8:	6035      	str	r5, [r6, #0]
   855ba:	9d18      	ldr	r5, [sp, #96]	; 0x60
   855bc:	4498      	add	r8, r3
   855be:	2c07      	cmp	r4, #7
   855c0:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   855c4:	942c      	str	r4, [sp, #176]	; 0xb0
   855c6:	6075      	str	r5, [r6, #4]
   855c8:	f300 81d5 	bgt.w	85976 <_svfprintf_r+0xe5e>
   855cc:	3608      	adds	r6, #8
   855ce:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   855d2:	2200      	movs	r2, #0
   855d4:	2300      	movs	r3, #0
   855d6:	f7ff f833 	bl	84640 <__aeabi_dcmpeq>
   855da:	9d11      	ldr	r5, [sp, #68]	; 0x44
   855dc:	2800      	cmp	r0, #0
   855de:	f040 80b9 	bne.w	85754 <_svfprintf_r+0xc3c>
   855e2:	1e6b      	subs	r3, r5, #1
   855e4:	3401      	adds	r4, #1
   855e6:	3701      	adds	r7, #1
   855e8:	4498      	add	r8, r3
   855ea:	2c07      	cmp	r4, #7
   855ec:	942c      	str	r4, [sp, #176]	; 0xb0
   855ee:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   855f2:	6037      	str	r7, [r6, #0]
   855f4:	6073      	str	r3, [r6, #4]
   855f6:	f300 80e2 	bgt.w	857be <_svfprintf_r+0xca6>
   855fa:	3608      	adds	r6, #8
   855fc:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
   85600:	3401      	adds	r4, #1
   85602:	9d19      	ldr	r5, [sp, #100]	; 0x64
   85604:	44c4      	add	ip, r8
   85606:	ab27      	add	r3, sp, #156	; 0x9c
   85608:	2c07      	cmp	r4, #7
   8560a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   8560e:	942c      	str	r4, [sp, #176]	; 0xb0
   85610:	e886 0028 	stmia.w	r6, {r3, r5}
   85614:	f77f acf1 	ble.w	84ffa <_svfprintf_r+0x4e2>
   85618:	980d      	ldr	r0, [sp, #52]	; 0x34
   8561a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8561c:	aa2b      	add	r2, sp, #172	; 0xac
   8561e:	f004 f94b 	bl	898b8 <__ssprint_r>
   85622:	2800      	cmp	r0, #0
   85624:	f47f ab90 	bne.w	84d48 <_svfprintf_r+0x230>
   85628:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   8562c:	ae38      	add	r6, sp, #224	; 0xe0
   8562e:	e4e5      	b.n	84ffc <_svfprintf_r+0x4e4>
   85630:	980d      	ldr	r0, [sp, #52]	; 0x34
   85632:	990c      	ldr	r1, [sp, #48]	; 0x30
   85634:	aa2b      	add	r2, sp, #172	; 0xac
   85636:	f004 f93f 	bl	898b8 <__ssprint_r>
   8563a:	2800      	cmp	r0, #0
   8563c:	f43f ad37 	beq.w	850ae <_svfprintf_r+0x596>
   85640:	f7ff bb82 	b.w	84d48 <_svfprintf_r+0x230>
   85644:	980d      	ldr	r0, [sp, #52]	; 0x34
   85646:	990c      	ldr	r1, [sp, #48]	; 0x30
   85648:	aa2b      	add	r2, sp, #172	; 0xac
   8564a:	f004 f935 	bl	898b8 <__ssprint_r>
   8564e:	2800      	cmp	r0, #0
   85650:	f47f ab7a 	bne.w	84d48 <_svfprintf_r+0x230>
   85654:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   85658:	ae38      	add	r6, sp, #224	; 0xe0
   8565a:	e4bf      	b.n	84fdc <_svfprintf_r+0x4c4>
   8565c:	980d      	ldr	r0, [sp, #52]	; 0x34
   8565e:	990c      	ldr	r1, [sp, #48]	; 0x30
   85660:	aa2b      	add	r2, sp, #172	; 0xac
   85662:	f004 f929 	bl	898b8 <__ssprint_r>
   85666:	2800      	cmp	r0, #0
   85668:	f47f ab6e 	bne.w	84d48 <_svfprintf_r+0x230>
   8566c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   85670:	ae38      	add	r6, sp, #224	; 0xe0
   85672:	e46d      	b.n	84f50 <_svfprintf_r+0x438>
   85674:	980d      	ldr	r0, [sp, #52]	; 0x34
   85676:	990c      	ldr	r1, [sp, #48]	; 0x30
   85678:	aa2b      	add	r2, sp, #172	; 0xac
   8567a:	f004 f91d 	bl	898b8 <__ssprint_r>
   8567e:	2800      	cmp	r0, #0
   85680:	f47f ab62 	bne.w	84d48 <_svfprintf_r+0x230>
   85684:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   85688:	ae38      	add	r6, sp, #224	; 0xe0
   8568a:	e450      	b.n	84f2e <_svfprintf_r+0x416>
   8568c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8568e:	af38      	add	r7, sp, #224	; 0xe0
   85690:	f7ff bbd0 	b.w	84e34 <_svfprintf_r+0x31c>
   85694:	2302      	movs	r3, #2
   85696:	f7ff bba9 	b.w	84dec <_svfprintf_r+0x2d4>
   8569a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8569c:	2b00      	cmp	r3, #0
   8569e:	f340 81dd 	ble.w	85a5c <_svfprintf_r+0xf44>
   856a2:	9c11      	ldr	r4, [sp, #68]	; 0x44
   856a4:	9d14      	ldr	r5, [sp, #80]	; 0x50
   856a6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   856aa:	42ac      	cmp	r4, r5
   856ac:	bfa8      	it	ge
   856ae:	462c      	movge	r4, r5
   856b0:	2c00      	cmp	r4, #0
   856b2:	44ba      	add	sl, r7
   856b4:	dd0b      	ble.n	856ce <_svfprintf_r+0xbb6>
   856b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   856b8:	44a4      	add	ip, r4
   856ba:	3301      	adds	r3, #1
   856bc:	2b07      	cmp	r3, #7
   856be:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   856c2:	6037      	str	r7, [r6, #0]
   856c4:	6074      	str	r4, [r6, #4]
   856c6:	932c      	str	r3, [sp, #176]	; 0xb0
   856c8:	f300 831e 	bgt.w	85d08 <_svfprintf_r+0x11f0>
   856cc:	3608      	adds	r6, #8
   856ce:	9d14      	ldr	r5, [sp, #80]	; 0x50
   856d0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   856d4:	1b2c      	subs	r4, r5, r4
   856d6:	2c00      	cmp	r4, #0
   856d8:	f340 80d7 	ble.w	8588a <_svfprintf_r+0xd72>
   856dc:	2c10      	cmp	r4, #16
   856de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   856e0:	4d07      	ldr	r5, [pc, #28]	; (85700 <_svfprintf_r+0xbe8>)
   856e2:	f340 81a3 	ble.w	85a2c <_svfprintf_r+0xf14>
   856e6:	970a      	str	r7, [sp, #40]	; 0x28
   856e8:	f04f 0810 	mov.w	r8, #16
   856ec:	462f      	mov	r7, r5
   856ee:	4662      	mov	r2, ip
   856f0:	4625      	mov	r5, r4
   856f2:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   856f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   856f8:	e009      	b.n	8570e <_svfprintf_r+0xbf6>
   856fa:	bf00      	nop
   856fc:	0008a368 	.word	0x0008a368
   85700:	0008a794 	.word	0x0008a794
   85704:	3608      	adds	r6, #8
   85706:	3d10      	subs	r5, #16
   85708:	2d10      	cmp	r5, #16
   8570a:	f340 818b 	ble.w	85a24 <_svfprintf_r+0xf0c>
   8570e:	3301      	adds	r3, #1
   85710:	3210      	adds	r2, #16
   85712:	2b07      	cmp	r3, #7
   85714:	922d      	str	r2, [sp, #180]	; 0xb4
   85716:	932c      	str	r3, [sp, #176]	; 0xb0
   85718:	e886 0180 	stmia.w	r6, {r7, r8}
   8571c:	ddf2      	ble.n	85704 <_svfprintf_r+0xbec>
   8571e:	4658      	mov	r0, fp
   85720:	4621      	mov	r1, r4
   85722:	aa2b      	add	r2, sp, #172	; 0xac
   85724:	f004 f8c8 	bl	898b8 <__ssprint_r>
   85728:	2800      	cmp	r0, #0
   8572a:	f47f ab0d 	bne.w	84d48 <_svfprintf_r+0x230>
   8572e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   85730:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85732:	ae38      	add	r6, sp, #224	; 0xe0
   85734:	e7e7      	b.n	85706 <_svfprintf_r+0xbee>
   85736:	980d      	ldr	r0, [sp, #52]	; 0x34
   85738:	990c      	ldr	r1, [sp, #48]	; 0x30
   8573a:	aa2b      	add	r2, sp, #172	; 0xac
   8573c:	f004 f8bc 	bl	898b8 <__ssprint_r>
   85740:	2800      	cmp	r0, #0
   85742:	f47f ab01 	bne.w	84d48 <_svfprintf_r+0x230>
   85746:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   8574a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   8574e:	ae38      	add	r6, sp, #224	; 0xe0
   85750:	f7ff bbda 	b.w	84f08 <_svfprintf_r+0x3f0>
   85754:	1e6f      	subs	r7, r5, #1
   85756:	2f00      	cmp	r7, #0
   85758:	f77f af50 	ble.w	855fc <_svfprintf_r+0xae4>
   8575c:	2f10      	cmp	r7, #16
   8575e:	4dae      	ldr	r5, [pc, #696]	; (85a18 <_svfprintf_r+0xf00>)
   85760:	dd23      	ble.n	857aa <_svfprintf_r+0xc92>
   85762:	4643      	mov	r3, r8
   85764:	f04f 0a10 	mov.w	sl, #16
   85768:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   8576c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   85770:	e004      	b.n	8577c <_svfprintf_r+0xc64>
   85772:	3f10      	subs	r7, #16
   85774:	2f10      	cmp	r7, #16
   85776:	f106 0608 	add.w	r6, r6, #8
   8577a:	dd15      	ble.n	857a8 <_svfprintf_r+0xc90>
   8577c:	3401      	adds	r4, #1
   8577e:	3310      	adds	r3, #16
   85780:	2c07      	cmp	r4, #7
   85782:	932d      	str	r3, [sp, #180]	; 0xb4
   85784:	942c      	str	r4, [sp, #176]	; 0xb0
   85786:	e886 0420 	stmia.w	r6, {r5, sl}
   8578a:	ddf2      	ble.n	85772 <_svfprintf_r+0xc5a>
   8578c:	4640      	mov	r0, r8
   8578e:	4659      	mov	r1, fp
   85790:	aa2b      	add	r2, sp, #172	; 0xac
   85792:	f004 f891 	bl	898b8 <__ssprint_r>
   85796:	2800      	cmp	r0, #0
   85798:	f47f aad6 	bne.w	84d48 <_svfprintf_r+0x230>
   8579c:	3f10      	subs	r7, #16
   8579e:	2f10      	cmp	r7, #16
   857a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   857a2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   857a4:	ae38      	add	r6, sp, #224	; 0xe0
   857a6:	dce9      	bgt.n	8577c <_svfprintf_r+0xc64>
   857a8:	4698      	mov	r8, r3
   857aa:	3401      	adds	r4, #1
   857ac:	44b8      	add	r8, r7
   857ae:	2c07      	cmp	r4, #7
   857b0:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   857b4:	942c      	str	r4, [sp, #176]	; 0xb0
   857b6:	e886 00a0 	stmia.w	r6, {r5, r7}
   857ba:	f77f af1e 	ble.w	855fa <_svfprintf_r+0xae2>
   857be:	980d      	ldr	r0, [sp, #52]	; 0x34
   857c0:	990c      	ldr	r1, [sp, #48]	; 0x30
   857c2:	aa2b      	add	r2, sp, #172	; 0xac
   857c4:	f004 f878 	bl	898b8 <__ssprint_r>
   857c8:	2800      	cmp	r0, #0
   857ca:	f47f aabd 	bne.w	84d48 <_svfprintf_r+0x230>
   857ce:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
   857d2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   857d4:	ae38      	add	r6, sp, #224	; 0xe0
   857d6:	e711      	b.n	855fc <_svfprintf_r+0xae4>
   857d8:	4694      	mov	ip, r2
   857da:	3301      	adds	r3, #1
   857dc:	44a4      	add	ip, r4
   857de:	2b07      	cmp	r3, #7
   857e0:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   857e4:	932c      	str	r3, [sp, #176]	; 0xb0
   857e6:	6035      	str	r5, [r6, #0]
   857e8:	6074      	str	r4, [r6, #4]
   857ea:	f77f ac06 	ble.w	84ffa <_svfprintf_r+0x4e2>
   857ee:	e713      	b.n	85618 <_svfprintf_r+0xb00>
   857f0:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
   857f4:	4620      	mov	r0, r4
   857f6:	4629      	mov	r1, r5
   857f8:	220a      	movs	r2, #10
   857fa:	2300      	movs	r3, #0
   857fc:	f004 faa6 	bl	89d4c <__aeabi_uldivmod>
   85800:	3230      	adds	r2, #48	; 0x30
   85802:	f88b 2000 	strb.w	r2, [fp]
   85806:	4620      	mov	r0, r4
   85808:	4629      	mov	r1, r5
   8580a:	220a      	movs	r2, #10
   8580c:	2300      	movs	r3, #0
   8580e:	f004 fa9d 	bl	89d4c <__aeabi_uldivmod>
   85812:	4604      	mov	r4, r0
   85814:	460d      	mov	r5, r1
   85816:	ea54 0c05 	orrs.w	ip, r4, r5
   8581a:	465f      	mov	r7, fp
   8581c:	f10b 3bff 	add.w	fp, fp, #4294967295
   85820:	d1e8      	bne.n	857f4 <_svfprintf_r+0xcdc>
   85822:	9d08      	ldr	r5, [sp, #32]
   85824:	1bec      	subs	r4, r5, r7
   85826:	f7ff bb05 	b.w	84e34 <_svfprintf_r+0x31c>
   8582a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8582c:	2301      	movs	r3, #1
   8582e:	682c      	ldr	r4, [r5, #0]
   85830:	3504      	adds	r5, #4
   85832:	9510      	str	r5, [sp, #64]	; 0x40
   85834:	2500      	movs	r5, #0
   85836:	f7ff bad9 	b.w	84dec <_svfprintf_r+0x2d4>
   8583a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8583c:	682c      	ldr	r4, [r5, #0]
   8583e:	3504      	adds	r5, #4
   85840:	9510      	str	r5, [sp, #64]	; 0x40
   85842:	2500      	movs	r5, #0
   85844:	f7ff bad2 	b.w	84dec <_svfprintf_r+0x2d4>
   85848:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8584a:	682c      	ldr	r4, [r5, #0]
   8584c:	3504      	adds	r5, #4
   8584e:	9510      	str	r5, [sp, #64]	; 0x40
   85850:	17e5      	asrs	r5, r4, #31
   85852:	4622      	mov	r2, r4
   85854:	462b      	mov	r3, r5
   85856:	2a00      	cmp	r2, #0
   85858:	f173 0c00 	sbcs.w	ip, r3, #0
   8585c:	f6bf ac6c 	bge.w	85138 <_svfprintf_r+0x620>
   85860:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   85864:	4264      	negs	r4, r4
   85866:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8586a:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   8586e:	2301      	movs	r3, #1
   85870:	f7ff bac0 	b.w	84df4 <_svfprintf_r+0x2dc>
   85874:	980d      	ldr	r0, [sp, #52]	; 0x34
   85876:	990c      	ldr	r1, [sp, #48]	; 0x30
   85878:	aa2b      	add	r2, sp, #172	; 0xac
   8587a:	f004 f81d 	bl	898b8 <__ssprint_r>
   8587e:	2800      	cmp	r0, #0
   85880:	f47f aa62 	bne.w	84d48 <_svfprintf_r+0x230>
   85884:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   85888:	ae38      	add	r6, sp, #224	; 0xe0
   8588a:	9d14      	ldr	r5, [sp, #80]	; 0x50
   8588c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   8588e:	442f      	add	r7, r5
   85890:	9d11      	ldr	r5, [sp, #68]	; 0x44
   85892:	42ac      	cmp	r4, r5
   85894:	db42      	blt.n	8591c <_svfprintf_r+0xe04>
   85896:	9d09      	ldr	r5, [sp, #36]	; 0x24
   85898:	07e9      	lsls	r1, r5, #31
   8589a:	d43f      	bmi.n	8591c <_svfprintf_r+0xe04>
   8589c:	9811      	ldr	r0, [sp, #68]	; 0x44
   8589e:	ebc7 050a 	rsb	r5, r7, sl
   858a2:	1b04      	subs	r4, r0, r4
   858a4:	42ac      	cmp	r4, r5
   858a6:	bfb8      	it	lt
   858a8:	4625      	movlt	r5, r4
   858aa:	2d00      	cmp	r5, #0
   858ac:	dd0b      	ble.n	858c6 <_svfprintf_r+0xdae>
   858ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   858b0:	44ac      	add	ip, r5
   858b2:	3301      	adds	r3, #1
   858b4:	2b07      	cmp	r3, #7
   858b6:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   858ba:	6037      	str	r7, [r6, #0]
   858bc:	6075      	str	r5, [r6, #4]
   858be:	932c      	str	r3, [sp, #176]	; 0xb0
   858c0:	f300 824c 	bgt.w	85d5c <_svfprintf_r+0x1244>
   858c4:	3608      	adds	r6, #8
   858c6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   858ca:	1b64      	subs	r4, r4, r5
   858cc:	2c00      	cmp	r4, #0
   858ce:	f77f ab95 	ble.w	84ffc <_svfprintf_r+0x4e4>
   858d2:	2c10      	cmp	r4, #16
   858d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   858d6:	4d50      	ldr	r5, [pc, #320]	; (85a18 <_svfprintf_r+0xf00>)
   858d8:	f77f af7f 	ble.w	857da <_svfprintf_r+0xcc2>
   858dc:	2710      	movs	r7, #16
   858de:	4662      	mov	r2, ip
   858e0:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   858e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   858e8:	e004      	b.n	858f4 <_svfprintf_r+0xddc>
   858ea:	3608      	adds	r6, #8
   858ec:	3c10      	subs	r4, #16
   858ee:	2c10      	cmp	r4, #16
   858f0:	f77f af72 	ble.w	857d8 <_svfprintf_r+0xcc0>
   858f4:	3301      	adds	r3, #1
   858f6:	3210      	adds	r2, #16
   858f8:	2b07      	cmp	r3, #7
   858fa:	922d      	str	r2, [sp, #180]	; 0xb4
   858fc:	932c      	str	r3, [sp, #176]	; 0xb0
   858fe:	e886 00a0 	stmia.w	r6, {r5, r7}
   85902:	ddf2      	ble.n	858ea <_svfprintf_r+0xdd2>
   85904:	4640      	mov	r0, r8
   85906:	4651      	mov	r1, sl
   85908:	aa2b      	add	r2, sp, #172	; 0xac
   8590a:	f003 ffd5 	bl	898b8 <__ssprint_r>
   8590e:	2800      	cmp	r0, #0
   85910:	f47f aa1a 	bne.w	84d48 <_svfprintf_r+0x230>
   85914:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   85916:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85918:	ae38      	add	r6, sp, #224	; 0xe0
   8591a:	e7e7      	b.n	858ec <_svfprintf_r+0xdd4>
   8591c:	9d18      	ldr	r5, [sp, #96]	; 0x60
   8591e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85920:	44ac      	add	ip, r5
   85922:	9d15      	ldr	r5, [sp, #84]	; 0x54
   85924:	3301      	adds	r3, #1
   85926:	6035      	str	r5, [r6, #0]
   85928:	9d18      	ldr	r5, [sp, #96]	; 0x60
   8592a:	2b07      	cmp	r3, #7
   8592c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   85930:	6075      	str	r5, [r6, #4]
   85932:	932c      	str	r3, [sp, #176]	; 0xb0
   85934:	f300 81f4 	bgt.w	85d20 <_svfprintf_r+0x1208>
   85938:	3608      	adds	r6, #8
   8593a:	e7af      	b.n	8589c <_svfprintf_r+0xd84>
   8593c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8593e:	07ea      	lsls	r2, r5, #31
   85940:	f53f ae2a 	bmi.w	85598 <_svfprintf_r+0xa80>
   85944:	3401      	adds	r4, #1
   85946:	f10c 0801 	add.w	r8, ip, #1
   8594a:	2301      	movs	r3, #1
   8594c:	2c07      	cmp	r4, #7
   8594e:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   85952:	942c      	str	r4, [sp, #176]	; 0xb0
   85954:	6037      	str	r7, [r6, #0]
   85956:	6073      	str	r3, [r6, #4]
   85958:	f77f ae4f 	ble.w	855fa <_svfprintf_r+0xae2>
   8595c:	e72f      	b.n	857be <_svfprintf_r+0xca6>
   8595e:	980d      	ldr	r0, [sp, #52]	; 0x34
   85960:	990c      	ldr	r1, [sp, #48]	; 0x30
   85962:	aa2b      	add	r2, sp, #172	; 0xac
   85964:	f003 ffa8 	bl	898b8 <__ssprint_r>
   85968:	2800      	cmp	r0, #0
   8596a:	f47f a9ed 	bne.w	84d48 <_svfprintf_r+0x230>
   8596e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   85970:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   85972:	ae38      	add	r6, sp, #224	; 0xe0
   85974:	e61c      	b.n	855b0 <_svfprintf_r+0xa98>
   85976:	980d      	ldr	r0, [sp, #52]	; 0x34
   85978:	990c      	ldr	r1, [sp, #48]	; 0x30
   8597a:	aa2b      	add	r2, sp, #172	; 0xac
   8597c:	f003 ff9c 	bl	898b8 <__ssprint_r>
   85980:	2800      	cmp	r0, #0
   85982:	f47f a9e1 	bne.w	84d48 <_svfprintf_r+0x230>
   85986:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
   8598a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8598c:	ae38      	add	r6, sp, #224	; 0xe0
   8598e:	e61e      	b.n	855ce <_svfprintf_r+0xab6>
   85990:	980d      	ldr	r0, [sp, #52]	; 0x34
   85992:	990c      	ldr	r1, [sp, #48]	; 0x30
   85994:	aa2b      	add	r2, sp, #172	; 0xac
   85996:	f003 ff8f 	bl	898b8 <__ssprint_r>
   8599a:	2800      	cmp	r0, #0
   8599c:	f47f a9d4 	bne.w	84d48 <_svfprintf_r+0x230>
   859a0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   859a4:	ae38      	add	r6, sp, #224	; 0xe0
   859a6:	f7ff bad7 	b.w	84f58 <_svfprintf_r+0x440>
   859aa:	f7fe f9f9 	bl	83da0 <__fpclassifyd>
   859ae:	2800      	cmp	r0, #0
   859b0:	f040 80bb 	bne.w	85b2a <_svfprintf_r+0x1012>
   859b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   859b6:	4f19      	ldr	r7, [pc, #100]	; (85a1c <_svfprintf_r+0xf04>)
   859b8:	4b19      	ldr	r3, [pc, #100]	; (85a20 <_svfprintf_r+0xf08>)
   859ba:	f04f 0c03 	mov.w	ip, #3
   859be:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   859c2:	9409      	str	r4, [sp, #36]	; 0x24
   859c4:	900a      	str	r0, [sp, #40]	; 0x28
   859c6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   859ca:	9014      	str	r0, [sp, #80]	; 0x50
   859cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   859d0:	bfd8      	it	le
   859d2:	461f      	movle	r7, r3
   859d4:	4664      	mov	r4, ip
   859d6:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   859da:	f7ff ba34 	b.w	84e46 <_svfprintf_r+0x32e>
   859de:	9c09      	ldr	r4, [sp, #36]	; 0x24
   859e0:	0664      	lsls	r4, r4, #25
   859e2:	f140 8150 	bpl.w	85c86 <_svfprintf_r+0x116e>
   859e6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   859ea:	2500      	movs	r5, #0
   859ec:	f8bc 4000 	ldrh.w	r4, [ip]
   859f0:	f10c 0c04 	add.w	ip, ip, #4
   859f4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   859f8:	f7ff b9e4 	b.w	84dc4 <_svfprintf_r+0x2ac>
   859fc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   85a00:	f01c 0f10 	tst.w	ip, #16
   85a04:	f000 8146 	beq.w	85c94 <_svfprintf_r+0x117c>
   85a08:	9c10      	ldr	r4, [sp, #64]	; 0x40
   85a0a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   85a0c:	6823      	ldr	r3, [r4, #0]
   85a0e:	3404      	adds	r4, #4
   85a10:	9410      	str	r4, [sp, #64]	; 0x40
   85a12:	601d      	str	r5, [r3, #0]
   85a14:	f7ff b8a6 	b.w	84b64 <_svfprintf_r+0x4c>
   85a18:	0008a794 	.word	0x0008a794
   85a1c:	0008a7b0 	.word	0x0008a7b0
   85a20:	0008a7ac 	.word	0x0008a7ac
   85a24:	462c      	mov	r4, r5
   85a26:	463d      	mov	r5, r7
   85a28:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   85a2a:	4694      	mov	ip, r2
   85a2c:	3301      	adds	r3, #1
   85a2e:	44a4      	add	ip, r4
   85a30:	2b07      	cmp	r3, #7
   85a32:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   85a36:	932c      	str	r3, [sp, #176]	; 0xb0
   85a38:	6035      	str	r5, [r6, #0]
   85a3a:	6074      	str	r4, [r6, #4]
   85a3c:	f73f af1a 	bgt.w	85874 <_svfprintf_r+0xd5c>
   85a40:	3608      	adds	r6, #8
   85a42:	e722      	b.n	8588a <_svfprintf_r+0xd72>
   85a44:	980d      	ldr	r0, [sp, #52]	; 0x34
   85a46:	990c      	ldr	r1, [sp, #48]	; 0x30
   85a48:	aa2b      	add	r2, sp, #172	; 0xac
   85a4a:	f003 ff35 	bl	898b8 <__ssprint_r>
   85a4e:	2800      	cmp	r0, #0
   85a50:	f47f a97a 	bne.w	84d48 <_svfprintf_r+0x230>
   85a54:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   85a58:	ae38      	add	r6, sp, #224	; 0xe0
   85a5a:	e507      	b.n	8546c <_svfprintf_r+0x954>
   85a5c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   85a5e:	49b7      	ldr	r1, [pc, #732]	; (85d3c <_svfprintf_r+0x1224>)
   85a60:	3201      	adds	r2, #1
   85a62:	f10c 0c01 	add.w	ip, ip, #1
   85a66:	2001      	movs	r0, #1
   85a68:	2a07      	cmp	r2, #7
   85a6a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   85a6e:	922c      	str	r2, [sp, #176]	; 0xb0
   85a70:	6031      	str	r1, [r6, #0]
   85a72:	6070      	str	r0, [r6, #4]
   85a74:	f300 80f7 	bgt.w	85c66 <_svfprintf_r+0x114e>
   85a78:	3608      	adds	r6, #8
   85a7a:	461c      	mov	r4, r3
   85a7c:	b92c      	cbnz	r4, 85a8a <_svfprintf_r+0xf72>
   85a7e:	9d11      	ldr	r5, [sp, #68]	; 0x44
   85a80:	b91d      	cbnz	r5, 85a8a <_svfprintf_r+0xf72>
   85a82:	9d09      	ldr	r5, [sp, #36]	; 0x24
   85a84:	07e8      	lsls	r0, r5, #31
   85a86:	f57f aab9 	bpl.w	84ffc <_svfprintf_r+0x4e4>
   85a8a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85a8c:	9d15      	ldr	r5, [sp, #84]	; 0x54
   85a8e:	9918      	ldr	r1, [sp, #96]	; 0x60
   85a90:	3301      	adds	r3, #1
   85a92:	6035      	str	r5, [r6, #0]
   85a94:	9d18      	ldr	r5, [sp, #96]	; 0x60
   85a96:	4461      	add	r1, ip
   85a98:	2b07      	cmp	r3, #7
   85a9a:	912d      	str	r1, [sp, #180]	; 0xb4
   85a9c:	6075      	str	r5, [r6, #4]
   85a9e:	932c      	str	r3, [sp, #176]	; 0xb0
   85aa0:	f300 81de 	bgt.w	85e60 <_svfprintf_r+0x1348>
   85aa4:	f106 0208 	add.w	r2, r6, #8
   85aa8:	4264      	negs	r4, r4
   85aaa:	2c00      	cmp	r4, #0
   85aac:	f340 810b 	ble.w	85cc6 <_svfprintf_r+0x11ae>
   85ab0:	2c10      	cmp	r4, #16
   85ab2:	4da3      	ldr	r5, [pc, #652]	; (85d40 <_svfprintf_r+0x1228>)
   85ab4:	f340 8148 	ble.w	85d48 <_svfprintf_r+0x1230>
   85ab8:	46a3      	mov	fp, r4
   85aba:	2610      	movs	r6, #16
   85abc:	460c      	mov	r4, r1
   85abe:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   85ac2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   85ac6:	e006      	b.n	85ad6 <_svfprintf_r+0xfbe>
   85ac8:	3208      	adds	r2, #8
   85aca:	f1ab 0b10 	sub.w	fp, fp, #16
   85ace:	f1bb 0f10 	cmp.w	fp, #16
   85ad2:	f340 8137 	ble.w	85d44 <_svfprintf_r+0x122c>
   85ad6:	3301      	adds	r3, #1
   85ad8:	3410      	adds	r4, #16
   85ada:	2b07      	cmp	r3, #7
   85adc:	942d      	str	r4, [sp, #180]	; 0xb4
   85ade:	932c      	str	r3, [sp, #176]	; 0xb0
   85ae0:	e882 0060 	stmia.w	r2, {r5, r6}
   85ae4:	ddf0      	ble.n	85ac8 <_svfprintf_r+0xfb0>
   85ae6:	4640      	mov	r0, r8
   85ae8:	4651      	mov	r1, sl
   85aea:	aa2b      	add	r2, sp, #172	; 0xac
   85aec:	f003 fee4 	bl	898b8 <__ssprint_r>
   85af0:	2800      	cmp	r0, #0
   85af2:	f47f a929 	bne.w	84d48 <_svfprintf_r+0x230>
   85af6:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
   85af8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85afa:	aa38      	add	r2, sp, #224	; 0xe0
   85afc:	e7e5      	b.n	85aca <_svfprintf_r+0xfb2>
   85afe:	9c09      	ldr	r4, [sp, #36]	; 0x24
   85b00:	f109 0901 	add.w	r9, r9, #1
   85b04:	f044 0420 	orr.w	r4, r4, #32
   85b08:	9409      	str	r4, [sp, #36]	; 0x24
   85b0a:	f893 8001 	ldrb.w	r8, [r3, #1]
   85b0e:	f7ff b85f 	b.w	84bd0 <_svfprintf_r+0xb8>
   85b12:	980d      	ldr	r0, [sp, #52]	; 0x34
   85b14:	990c      	ldr	r1, [sp, #48]	; 0x30
   85b16:	aa2b      	add	r2, sp, #172	; 0xac
   85b18:	f003 fece 	bl	898b8 <__ssprint_r>
   85b1c:	2800      	cmp	r0, #0
   85b1e:	f47f a913 	bne.w	84d48 <_svfprintf_r+0x230>
   85b22:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   85b26:	ae38      	add	r6, sp, #224	; 0xe0
   85b28:	e4b6      	b.n	85498 <_svfprintf_r+0x980>
   85b2a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85b2c:	f028 0a20 	bic.w	sl, r8, #32
   85b30:	3501      	adds	r5, #1
   85b32:	f000 80a5 	beq.w	85c80 <_svfprintf_r+0x1168>
   85b36:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   85b3a:	d104      	bne.n	85b46 <_svfprintf_r+0x102e>
   85b3c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85b3e:	2d00      	cmp	r5, #0
   85b40:	bf08      	it	eq
   85b42:	2501      	moveq	r5, #1
   85b44:	950a      	str	r5, [sp, #40]	; 0x28
   85b46:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   85b4a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   85b4e:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
   85b52:	2b00      	cmp	r3, #0
   85b54:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
   85b58:	f2c0 819c 	blt.w	85e94 <_svfprintf_r+0x137c>
   85b5c:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   85b60:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
   85b64:	f04f 0b00 	mov.w	fp, #0
   85b68:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   85b6c:	f000 819b 	beq.w	85ea6 <_svfprintf_r+0x138e>
   85b70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   85b74:	f000 81a9 	beq.w	85eca <_svfprintf_r+0x13b2>
   85b78:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   85b7c:	bf0a      	itet	eq
   85b7e:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
   85b80:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   85b82:	1c65      	addeq	r5, r4, #1
   85b84:	2002      	movs	r0, #2
   85b86:	a925      	add	r1, sp, #148	; 0x94
   85b88:	aa26      	add	r2, sp, #152	; 0x98
   85b8a:	ab29      	add	r3, sp, #164	; 0xa4
   85b8c:	e88d 0021 	stmia.w	sp, {r0, r5}
   85b90:	9203      	str	r2, [sp, #12]
   85b92:	9304      	str	r3, [sp, #16]
   85b94:	9102      	str	r1, [sp, #8]
   85b96:	980d      	ldr	r0, [sp, #52]	; 0x34
   85b98:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
   85b9c:	f001 f9dc 	bl	86f58 <_dtoa_r>
   85ba0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   85ba4:	4607      	mov	r7, r0
   85ba6:	d002      	beq.n	85bae <_svfprintf_r+0x1096>
   85ba8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   85bac:	d105      	bne.n	85bba <_svfprintf_r+0x10a2>
   85bae:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   85bb2:	f01c 0f01 	tst.w	ip, #1
   85bb6:	f000 819c 	beq.w	85ef2 <_svfprintf_r+0x13da>
   85bba:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   85bbe:	eb07 0405 	add.w	r4, r7, r5
   85bc2:	f000 811c 	beq.w	85dfe <_svfprintf_r+0x12e6>
   85bc6:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
   85bca:	2200      	movs	r2, #0
   85bcc:	2300      	movs	r3, #0
   85bce:	f7fe fd37 	bl	84640 <__aeabi_dcmpeq>
   85bd2:	2800      	cmp	r0, #0
   85bd4:	f040 8105 	bne.w	85de2 <_svfprintf_r+0x12ca>
   85bd8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85bda:	429c      	cmp	r4, r3
   85bdc:	d906      	bls.n	85bec <_svfprintf_r+0x10d4>
   85bde:	2130      	movs	r1, #48	; 0x30
   85be0:	1c5a      	adds	r2, r3, #1
   85be2:	9229      	str	r2, [sp, #164]	; 0xa4
   85be4:	7019      	strb	r1, [r3, #0]
   85be6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85be8:	429c      	cmp	r4, r3
   85bea:	d8f9      	bhi.n	85be0 <_svfprintf_r+0x10c8>
   85bec:	1bdb      	subs	r3, r3, r7
   85bee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   85bf2:	9311      	str	r3, [sp, #68]	; 0x44
   85bf4:	f000 80ed 	beq.w	85dd2 <_svfprintf_r+0x12ba>
   85bf8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   85bfc:	f340 81f2 	ble.w	85fe4 <_svfprintf_r+0x14cc>
   85c00:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   85c04:	f000 8168 	beq.w	85ed8 <_svfprintf_r+0x13c0>
   85c08:	9c25      	ldr	r4, [sp, #148]	; 0x94
   85c0a:	9414      	str	r4, [sp, #80]	; 0x50
   85c0c:	9c11      	ldr	r4, [sp, #68]	; 0x44
   85c0e:	9d14      	ldr	r5, [sp, #80]	; 0x50
   85c10:	42ac      	cmp	r4, r5
   85c12:	f300 8132 	bgt.w	85e7a <_svfprintf_r+0x1362>
   85c16:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   85c1a:	f01c 0f01 	tst.w	ip, #1
   85c1e:	f040 81ad 	bne.w	85f7c <_svfprintf_r+0x1464>
   85c22:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
   85c26:	462c      	mov	r4, r5
   85c28:	f04f 0867 	mov.w	r8, #103	; 0x67
   85c2c:	f1bb 0f00 	cmp.w	fp, #0
   85c30:	f040 80b2 	bne.w	85d98 <_svfprintf_r+0x1280>
   85c34:	9d12      	ldr	r5, [sp, #72]	; 0x48
   85c36:	930b      	str	r3, [sp, #44]	; 0x2c
   85c38:	9509      	str	r5, [sp, #36]	; 0x24
   85c3a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   85c3e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   85c42:	f7ff b900 	b.w	84e46 <_svfprintf_r+0x32e>
   85c46:	980d      	ldr	r0, [sp, #52]	; 0x34
   85c48:	2140      	movs	r1, #64	; 0x40
   85c4a:	f002 fda7 	bl	8879c <_malloc_r>
   85c4e:	6020      	str	r0, [r4, #0]
   85c50:	6120      	str	r0, [r4, #16]
   85c52:	2800      	cmp	r0, #0
   85c54:	f000 81bf 	beq.w	85fd6 <_svfprintf_r+0x14be>
   85c58:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   85c5c:	2340      	movs	r3, #64	; 0x40
   85c5e:	f8cc 3014 	str.w	r3, [ip, #20]
   85c62:	f7fe bf6f 	b.w	84b44 <_svfprintf_r+0x2c>
   85c66:	980d      	ldr	r0, [sp, #52]	; 0x34
   85c68:	990c      	ldr	r1, [sp, #48]	; 0x30
   85c6a:	aa2b      	add	r2, sp, #172	; 0xac
   85c6c:	f003 fe24 	bl	898b8 <__ssprint_r>
   85c70:	2800      	cmp	r0, #0
   85c72:	f47f a869 	bne.w	84d48 <_svfprintf_r+0x230>
   85c76:	9c25      	ldr	r4, [sp, #148]	; 0x94
   85c78:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   85c7c:	ae38      	add	r6, sp, #224	; 0xe0
   85c7e:	e6fd      	b.n	85a7c <_svfprintf_r+0xf64>
   85c80:	2406      	movs	r4, #6
   85c82:	940a      	str	r4, [sp, #40]	; 0x28
   85c84:	e75f      	b.n	85b46 <_svfprintf_r+0x102e>
   85c86:	9d10      	ldr	r5, [sp, #64]	; 0x40
   85c88:	682c      	ldr	r4, [r5, #0]
   85c8a:	3504      	adds	r5, #4
   85c8c:	9510      	str	r5, [sp, #64]	; 0x40
   85c8e:	2500      	movs	r5, #0
   85c90:	f7ff b898 	b.w	84dc4 <_svfprintf_r+0x2ac>
   85c94:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   85c98:	f01c 0f40 	tst.w	ip, #64	; 0x40
   85c9c:	f000 8087 	beq.w	85dae <_svfprintf_r+0x1296>
   85ca0:	9c10      	ldr	r4, [sp, #64]	; 0x40
   85ca2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   85ca4:	6823      	ldr	r3, [r4, #0]
   85ca6:	3404      	adds	r4, #4
   85ca8:	9410      	str	r4, [sp, #64]	; 0x40
   85caa:	801d      	strh	r5, [r3, #0]
   85cac:	f7fe bf5a 	b.w	84b64 <_svfprintf_r+0x4c>
   85cb0:	980d      	ldr	r0, [sp, #52]	; 0x34
   85cb2:	990c      	ldr	r1, [sp, #48]	; 0x30
   85cb4:	aa2b      	add	r2, sp, #172	; 0xac
   85cb6:	f003 fdff 	bl	898b8 <__ssprint_r>
   85cba:	2800      	cmp	r0, #0
   85cbc:	f47f a844 	bne.w	84d48 <_svfprintf_r+0x230>
   85cc0:	992d      	ldr	r1, [sp, #180]	; 0xb4
   85cc2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85cc4:	aa38      	add	r2, sp, #224	; 0xe0
   85cc6:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   85cca:	3301      	adds	r3, #1
   85ccc:	9c11      	ldr	r4, [sp, #68]	; 0x44
   85cce:	448c      	add	ip, r1
   85cd0:	2b07      	cmp	r3, #7
   85cd2:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   85cd6:	932c      	str	r3, [sp, #176]	; 0xb0
   85cd8:	6017      	str	r7, [r2, #0]
   85cda:	6054      	str	r4, [r2, #4]
   85cdc:	f73f ac9c 	bgt.w	85618 <_svfprintf_r+0xb00>
   85ce0:	f102 0608 	add.w	r6, r2, #8
   85ce4:	f7ff b98a 	b.w	84ffc <_svfprintf_r+0x4e4>
   85ce8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   85cec:	f7fe feb2 	bl	84a54 <strlen>
   85cf0:	9510      	str	r5, [sp, #64]	; 0x40
   85cf2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85cf4:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   85cf8:	4604      	mov	r4, r0
   85cfa:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   85cfe:	9514      	str	r5, [sp, #80]	; 0x50
   85d00:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   85d04:	f7ff b89f 	b.w	84e46 <_svfprintf_r+0x32e>
   85d08:	980d      	ldr	r0, [sp, #52]	; 0x34
   85d0a:	990c      	ldr	r1, [sp, #48]	; 0x30
   85d0c:	aa2b      	add	r2, sp, #172	; 0xac
   85d0e:	f003 fdd3 	bl	898b8 <__ssprint_r>
   85d12:	2800      	cmp	r0, #0
   85d14:	f47f a818 	bne.w	84d48 <_svfprintf_r+0x230>
   85d18:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   85d1c:	ae38      	add	r6, sp, #224	; 0xe0
   85d1e:	e4d6      	b.n	856ce <_svfprintf_r+0xbb6>
   85d20:	980d      	ldr	r0, [sp, #52]	; 0x34
   85d22:	990c      	ldr	r1, [sp, #48]	; 0x30
   85d24:	aa2b      	add	r2, sp, #172	; 0xac
   85d26:	f003 fdc7 	bl	898b8 <__ssprint_r>
   85d2a:	2800      	cmp	r0, #0
   85d2c:	f47f a80c 	bne.w	84d48 <_svfprintf_r+0x230>
   85d30:	9c25      	ldr	r4, [sp, #148]	; 0x94
   85d32:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   85d36:	ae38      	add	r6, sp, #224	; 0xe0
   85d38:	e5b0      	b.n	8589c <_svfprintf_r+0xd84>
   85d3a:	bf00      	nop
   85d3c:	0008a368 	.word	0x0008a368
   85d40:	0008a794 	.word	0x0008a794
   85d44:	4621      	mov	r1, r4
   85d46:	465c      	mov	r4, fp
   85d48:	3301      	adds	r3, #1
   85d4a:	4421      	add	r1, r4
   85d4c:	2b07      	cmp	r3, #7
   85d4e:	912d      	str	r1, [sp, #180]	; 0xb4
   85d50:	932c      	str	r3, [sp, #176]	; 0xb0
   85d52:	6015      	str	r5, [r2, #0]
   85d54:	6054      	str	r4, [r2, #4]
   85d56:	dcab      	bgt.n	85cb0 <_svfprintf_r+0x1198>
   85d58:	3208      	adds	r2, #8
   85d5a:	e7b4      	b.n	85cc6 <_svfprintf_r+0x11ae>
   85d5c:	980d      	ldr	r0, [sp, #52]	; 0x34
   85d5e:	990c      	ldr	r1, [sp, #48]	; 0x30
   85d60:	aa2b      	add	r2, sp, #172	; 0xac
   85d62:	f003 fda9 	bl	898b8 <__ssprint_r>
   85d66:	2800      	cmp	r0, #0
   85d68:	f47e afee 	bne.w	84d48 <_svfprintf_r+0x230>
   85d6c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   85d6e:	9911      	ldr	r1, [sp, #68]	; 0x44
   85d70:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   85d74:	1b0c      	subs	r4, r1, r4
   85d76:	ae38      	add	r6, sp, #224	; 0xe0
   85d78:	e5a5      	b.n	858c6 <_svfprintf_r+0xdae>
   85d7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   85d7c:	46ba      	mov	sl, r7
   85d7e:	2c06      	cmp	r4, #6
   85d80:	bf28      	it	cs
   85d82:	2406      	movcs	r4, #6
   85d84:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
   85d88:	970a      	str	r7, [sp, #40]	; 0x28
   85d8a:	9714      	str	r7, [sp, #80]	; 0x50
   85d8c:	9510      	str	r5, [sp, #64]	; 0x40
   85d8e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   85d92:	4f97      	ldr	r7, [pc, #604]	; (85ff0 <_svfprintf_r+0x14d8>)
   85d94:	f7ff b857 	b.w	84e46 <_svfprintf_r+0x32e>
   85d98:	9d12      	ldr	r5, [sp, #72]	; 0x48
   85d9a:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   85d9e:	9509      	str	r5, [sp, #36]	; 0x24
   85da0:	2500      	movs	r5, #0
   85da2:	930b      	str	r3, [sp, #44]	; 0x2c
   85da4:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   85da8:	950a      	str	r5, [sp, #40]	; 0x28
   85daa:	f7ff b84f 	b.w	84e4c <_svfprintf_r+0x334>
   85dae:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   85db2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   85db4:	f8dc 3000 	ldr.w	r3, [ip]
   85db8:	f10c 0c04 	add.w	ip, ip, #4
   85dbc:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   85dc0:	601c      	str	r4, [r3, #0]
   85dc2:	f7fe becf 	b.w	84b64 <_svfprintf_r+0x4c>
   85dc6:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   85dca:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   85dce:	f7ff ba99 	b.w	85304 <_svfprintf_r+0x7ec>
   85dd2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85dd4:	1cdc      	adds	r4, r3, #3
   85dd6:	db19      	blt.n	85e0c <_svfprintf_r+0x12f4>
   85dd8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   85dda:	429c      	cmp	r4, r3
   85ddc:	db16      	blt.n	85e0c <_svfprintf_r+0x12f4>
   85dde:	9314      	str	r3, [sp, #80]	; 0x50
   85de0:	e714      	b.n	85c0c <_svfprintf_r+0x10f4>
   85de2:	4623      	mov	r3, r4
   85de4:	e702      	b.n	85bec <_svfprintf_r+0x10d4>
   85de6:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
   85dea:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   85dee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   85df0:	9510      	str	r5, [sp, #64]	; 0x40
   85df2:	900a      	str	r0, [sp, #40]	; 0x28
   85df4:	9014      	str	r0, [sp, #80]	; 0x50
   85df6:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   85dfa:	f7ff b824 	b.w	84e46 <_svfprintf_r+0x32e>
   85dfe:	783b      	ldrb	r3, [r7, #0]
   85e00:	2b30      	cmp	r3, #48	; 0x30
   85e02:	f000 80ad 	beq.w	85f60 <_svfprintf_r+0x1448>
   85e06:	9d25      	ldr	r5, [sp, #148]	; 0x94
   85e08:	442c      	add	r4, r5
   85e0a:	e6dc      	b.n	85bc6 <_svfprintf_r+0x10ae>
   85e0c:	f1a8 0802 	sub.w	r8, r8, #2
   85e10:	1e59      	subs	r1, r3, #1
   85e12:	2900      	cmp	r1, #0
   85e14:	9125      	str	r1, [sp, #148]	; 0x94
   85e16:	bfba      	itte	lt
   85e18:	4249      	neglt	r1, r1
   85e1a:	232d      	movlt	r3, #45	; 0x2d
   85e1c:	232b      	movge	r3, #43	; 0x2b
   85e1e:	2909      	cmp	r1, #9
   85e20:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
   85e24:	f88d 309d 	strb.w	r3, [sp, #157]	; 0x9d
   85e28:	dc65      	bgt.n	85ef6 <_svfprintf_r+0x13de>
   85e2a:	2330      	movs	r3, #48	; 0x30
   85e2c:	3130      	adds	r1, #48	; 0x30
   85e2e:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
   85e32:	f88d 109f 	strb.w	r1, [sp, #159]	; 0x9f
   85e36:	ab28      	add	r3, sp, #160	; 0xa0
   85e38:	9d11      	ldr	r5, [sp, #68]	; 0x44
   85e3a:	aa27      	add	r2, sp, #156	; 0x9c
   85e3c:	9c11      	ldr	r4, [sp, #68]	; 0x44
   85e3e:	1a9a      	subs	r2, r3, r2
   85e40:	2d01      	cmp	r5, #1
   85e42:	9219      	str	r2, [sp, #100]	; 0x64
   85e44:	4414      	add	r4, r2
   85e46:	f340 80b7 	ble.w	85fb8 <_svfprintf_r+0x14a0>
   85e4a:	3401      	adds	r4, #1
   85e4c:	2500      	movs	r5, #0
   85e4e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   85e52:	9514      	str	r5, [sp, #80]	; 0x50
   85e54:	e6ea      	b.n	85c2c <_svfprintf_r+0x1114>
   85e56:	2400      	movs	r4, #0
   85e58:	4681      	mov	r9, r0
   85e5a:	940a      	str	r4, [sp, #40]	; 0x28
   85e5c:	f7fe beba 	b.w	84bd4 <_svfprintf_r+0xbc>
   85e60:	980d      	ldr	r0, [sp, #52]	; 0x34
   85e62:	990c      	ldr	r1, [sp, #48]	; 0x30
   85e64:	aa2b      	add	r2, sp, #172	; 0xac
   85e66:	f003 fd27 	bl	898b8 <__ssprint_r>
   85e6a:	2800      	cmp	r0, #0
   85e6c:	f47e af6c 	bne.w	84d48 <_svfprintf_r+0x230>
   85e70:	9c25      	ldr	r4, [sp, #148]	; 0x94
   85e72:	992d      	ldr	r1, [sp, #180]	; 0xb4
   85e74:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   85e76:	aa38      	add	r2, sp, #224	; 0xe0
   85e78:	e616      	b.n	85aa8 <_svfprintf_r+0xf90>
   85e7a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   85e7c:	9d11      	ldr	r5, [sp, #68]	; 0x44
   85e7e:	2c00      	cmp	r4, #0
   85e80:	bfd4      	ite	le
   85e82:	f1c4 0402 	rsble	r4, r4, #2
   85e86:	2401      	movgt	r4, #1
   85e88:	442c      	add	r4, r5
   85e8a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   85e8e:	f04f 0867 	mov.w	r8, #103	; 0x67
   85e92:	e6cb      	b.n	85c2c <_svfprintf_r+0x1114>
   85e94:	9917      	ldr	r1, [sp, #92]	; 0x5c
   85e96:	9816      	ldr	r0, [sp, #88]	; 0x58
   85e98:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   85e9c:	9020      	str	r0, [sp, #128]	; 0x80
   85e9e:	9121      	str	r1, [sp, #132]	; 0x84
   85ea0:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   85ea4:	e660      	b.n	85b68 <_svfprintf_r+0x1050>
   85ea6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85ea8:	2003      	movs	r0, #3
   85eaa:	a925      	add	r1, sp, #148	; 0x94
   85eac:	aa26      	add	r2, sp, #152	; 0x98
   85eae:	ab29      	add	r3, sp, #164	; 0xa4
   85eb0:	9501      	str	r5, [sp, #4]
   85eb2:	9000      	str	r0, [sp, #0]
   85eb4:	9203      	str	r2, [sp, #12]
   85eb6:	9304      	str	r3, [sp, #16]
   85eb8:	9102      	str	r1, [sp, #8]
   85eba:	980d      	ldr	r0, [sp, #52]	; 0x34
   85ebc:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
   85ec0:	f001 f84a 	bl	86f58 <_dtoa_r>
   85ec4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85ec6:	4607      	mov	r7, r0
   85ec8:	e677      	b.n	85bba <_svfprintf_r+0x10a2>
   85eca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   85ecc:	2003      	movs	r0, #3
   85ece:	a925      	add	r1, sp, #148	; 0x94
   85ed0:	aa26      	add	r2, sp, #152	; 0x98
   85ed2:	ab29      	add	r3, sp, #164	; 0xa4
   85ed4:	9401      	str	r4, [sp, #4]
   85ed6:	e7ec      	b.n	85eb2 <_svfprintf_r+0x139a>
   85ed8:	9d25      	ldr	r5, [sp, #148]	; 0x94
   85eda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   85edc:	2d00      	cmp	r5, #0
   85ede:	9514      	str	r5, [sp, #80]	; 0x50
   85ee0:	dd63      	ble.n	85faa <_svfprintf_r+0x1492>
   85ee2:	bbb4      	cbnz	r4, 85f52 <_svfprintf_r+0x143a>
   85ee4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   85ee6:	07e8      	lsls	r0, r5, #31
   85ee8:	d433      	bmi.n	85f52 <_svfprintf_r+0x143a>
   85eea:	9c14      	ldr	r4, [sp, #80]	; 0x50
   85eec:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   85ef0:	e69c      	b.n	85c2c <_svfprintf_r+0x1114>
   85ef2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   85ef4:	e67a      	b.n	85bec <_svfprintf_r+0x10d4>
   85ef6:	f10d 02aa 	add.w	r2, sp, #170	; 0xaa
   85efa:	4d3e      	ldr	r5, [pc, #248]	; (85ff4 <_svfprintf_r+0x14dc>)
   85efc:	17cb      	asrs	r3, r1, #31
   85efe:	fb85 5001 	smull	r5, r0, r5, r1
   85f02:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
   85f06:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   85f0a:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
   85f0e:	2809      	cmp	r0, #9
   85f10:	4613      	mov	r3, r2
   85f12:	f101 0230 	add.w	r2, r1, #48	; 0x30
   85f16:	701a      	strb	r2, [r3, #0]
   85f18:	4601      	mov	r1, r0
   85f1a:	f103 32ff 	add.w	r2, r3, #4294967295
   85f1e:	dcec      	bgt.n	85efa <_svfprintf_r+0x13e2>
   85f20:	f100 0130 	add.w	r1, r0, #48	; 0x30
   85f24:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
   85f28:	b2c9      	uxtb	r1, r1
   85f2a:	4294      	cmp	r4, r2
   85f2c:	f803 1c01 	strb.w	r1, [r3, #-1]
   85f30:	d95a      	bls.n	85fe8 <_svfprintf_r+0x14d0>
   85f32:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
   85f36:	461a      	mov	r2, r3
   85f38:	e001      	b.n	85f3e <_svfprintf_r+0x1426>
   85f3a:	f812 1b01 	ldrb.w	r1, [r2], #1
   85f3e:	42a2      	cmp	r2, r4
   85f40:	f800 1f01 	strb.w	r1, [r0, #1]!
   85f44:	d1f9      	bne.n	85f3a <_svfprintf_r+0x1422>
   85f46:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
   85f4a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
   85f4e:	3bf6      	subs	r3, #246	; 0xf6
   85f50:	e772      	b.n	85e38 <_svfprintf_r+0x1320>
   85f52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85f54:	1c6c      	adds	r4, r5, #1
   85f56:	9d14      	ldr	r5, [sp, #80]	; 0x50
   85f58:	442c      	add	r4, r5
   85f5a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   85f5e:	e665      	b.n	85c2c <_svfprintf_r+0x1114>
   85f60:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
   85f64:	2200      	movs	r2, #0
   85f66:	2300      	movs	r3, #0
   85f68:	f7fe fb6a 	bl	84640 <__aeabi_dcmpeq>
   85f6c:	2800      	cmp	r0, #0
   85f6e:	f47f af4a 	bne.w	85e06 <_svfprintf_r+0x12ee>
   85f72:	f1c5 0501 	rsb	r5, r5, #1
   85f76:	9525      	str	r5, [sp, #148]	; 0x94
   85f78:	442c      	add	r4, r5
   85f7a:	e624      	b.n	85bc6 <_svfprintf_r+0x10ae>
   85f7c:	9d14      	ldr	r5, [sp, #80]	; 0x50
   85f7e:	f04f 0867 	mov.w	r8, #103	; 0x67
   85f82:	1c6c      	adds	r4, r5, #1
   85f84:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   85f88:	e650      	b.n	85c2c <_svfprintf_r+0x1114>
   85f8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   85f8c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   85f90:	682d      	ldr	r5, [r5, #0]
   85f92:	f10c 0304 	add.w	r3, ip, #4
   85f96:	2d00      	cmp	r5, #0
   85f98:	f899 8001 	ldrb.w	r8, [r9, #1]
   85f9c:	950a      	str	r5, [sp, #40]	; 0x28
   85f9e:	9310      	str	r3, [sp, #64]	; 0x40
   85fa0:	4681      	mov	r9, r0
   85fa2:	f6be ae15 	bge.w	84bd0 <_svfprintf_r+0xb8>
   85fa6:	f7fe be10 	b.w	84bca <_svfprintf_r+0xb2>
   85faa:	b97c      	cbnz	r4, 85fcc <_svfprintf_r+0x14b4>
   85fac:	9d09      	ldr	r5, [sp, #36]	; 0x24
   85fae:	07e9      	lsls	r1, r5, #31
   85fb0:	d40c      	bmi.n	85fcc <_svfprintf_r+0x14b4>
   85fb2:	2301      	movs	r3, #1
   85fb4:	461c      	mov	r4, r3
   85fb6:	e639      	b.n	85c2c <_svfprintf_r+0x1114>
   85fb8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   85fbc:	f01c 0301 	ands.w	r3, ip, #1
   85fc0:	f47f af43 	bne.w	85e4a <_svfprintf_r+0x1332>
   85fc4:	9314      	str	r3, [sp, #80]	; 0x50
   85fc6:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   85fca:	e62f      	b.n	85c2c <_svfprintf_r+0x1114>
   85fcc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85fce:	1cac      	adds	r4, r5, #2
   85fd0:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   85fd4:	e62a      	b.n	85c2c <_svfprintf_r+0x1114>
   85fd6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   85fd8:	230c      	movs	r3, #12
   85fda:	602b      	str	r3, [r5, #0]
   85fdc:	f04f 30ff 	mov.w	r0, #4294967295
   85fe0:	f7fe beba 	b.w	84d58 <_svfprintf_r+0x240>
   85fe4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85fe6:	e713      	b.n	85e10 <_svfprintf_r+0x12f8>
   85fe8:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
   85fec:	e724      	b.n	85e38 <_svfprintf_r+0x1320>
   85fee:	bf00      	nop
   85ff0:	0008a7dc 	.word	0x0008a7dc
   85ff4:	66666667 	.word	0x66666667

00085ff8 <__sprint_r.part.0>:
   85ff8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   85ffa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85ffe:	049c      	lsls	r4, r3, #18
   86000:	460e      	mov	r6, r1
   86002:	4680      	mov	r8, r0
   86004:	4691      	mov	r9, r2
   86006:	d52a      	bpl.n	8605e <__sprint_r.part.0+0x66>
   86008:	6893      	ldr	r3, [r2, #8]
   8600a:	6812      	ldr	r2, [r2, #0]
   8600c:	f102 0a08 	add.w	sl, r2, #8
   86010:	b31b      	cbz	r3, 8605a <__sprint_r.part.0+0x62>
   86012:	e91a 00a0 	ldmdb	sl, {r5, r7}
   86016:	08bf      	lsrs	r7, r7, #2
   86018:	d017      	beq.n	8604a <__sprint_r.part.0+0x52>
   8601a:	3d04      	subs	r5, #4
   8601c:	2400      	movs	r4, #0
   8601e:	e001      	b.n	86024 <__sprint_r.part.0+0x2c>
   86020:	42a7      	cmp	r7, r4
   86022:	d010      	beq.n	86046 <__sprint_r.part.0+0x4e>
   86024:	4640      	mov	r0, r8
   86026:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8602a:	4632      	mov	r2, r6
   8602c:	f002 f806 	bl	8803c <_fputwc_r>
   86030:	1c43      	adds	r3, r0, #1
   86032:	f104 0401 	add.w	r4, r4, #1
   86036:	d1f3      	bne.n	86020 <__sprint_r.part.0+0x28>
   86038:	2300      	movs	r3, #0
   8603a:	f8c9 3008 	str.w	r3, [r9, #8]
   8603e:	f8c9 3004 	str.w	r3, [r9, #4]
   86042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86046:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8604a:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   8604e:	f8c9 3008 	str.w	r3, [r9, #8]
   86052:	f10a 0a08 	add.w	sl, sl, #8
   86056:	2b00      	cmp	r3, #0
   86058:	d1db      	bne.n	86012 <__sprint_r.part.0+0x1a>
   8605a:	2000      	movs	r0, #0
   8605c:	e7ec      	b.n	86038 <__sprint_r.part.0+0x40>
   8605e:	f002 f967 	bl	88330 <__sfvwrite_r>
   86062:	2300      	movs	r3, #0
   86064:	f8c9 3008 	str.w	r3, [r9, #8]
   86068:	f8c9 3004 	str.w	r3, [r9, #4]
   8606c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00086070 <_vfiprintf_r>:
   86070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86074:	b0b1      	sub	sp, #196	; 0xc4
   86076:	461c      	mov	r4, r3
   86078:	9102      	str	r1, [sp, #8]
   8607a:	4690      	mov	r8, r2
   8607c:	9308      	str	r3, [sp, #32]
   8607e:	9006      	str	r0, [sp, #24]
   86080:	b118      	cbz	r0, 8608a <_vfiprintf_r+0x1a>
   86082:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86084:	2b00      	cmp	r3, #0
   86086:	f000 80e8 	beq.w	8625a <_vfiprintf_r+0x1ea>
   8608a:	9d02      	ldr	r5, [sp, #8]
   8608c:	89ab      	ldrh	r3, [r5, #12]
   8608e:	b29a      	uxth	r2, r3
   86090:	0490      	lsls	r0, r2, #18
   86092:	d407      	bmi.n	860a4 <_vfiprintf_r+0x34>
   86094:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   86096:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8609a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   8609e:	81ab      	strh	r3, [r5, #12]
   860a0:	b29a      	uxth	r2, r3
   860a2:	6669      	str	r1, [r5, #100]	; 0x64
   860a4:	0711      	lsls	r1, r2, #28
   860a6:	f140 80b7 	bpl.w	86218 <_vfiprintf_r+0x1a8>
   860aa:	f8dd b008 	ldr.w	fp, [sp, #8]
   860ae:	f8db 3010 	ldr.w	r3, [fp, #16]
   860b2:	2b00      	cmp	r3, #0
   860b4:	f000 80b0 	beq.w	86218 <_vfiprintf_r+0x1a8>
   860b8:	f002 021a 	and.w	r2, r2, #26
   860bc:	2a0a      	cmp	r2, #10
   860be:	f000 80b7 	beq.w	86230 <_vfiprintf_r+0x1c0>
   860c2:	2300      	movs	r3, #0
   860c4:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   860c8:	930a      	str	r3, [sp, #40]	; 0x28
   860ca:	9315      	str	r3, [sp, #84]	; 0x54
   860cc:	9314      	str	r3, [sp, #80]	; 0x50
   860ce:	9309      	str	r3, [sp, #36]	; 0x24
   860d0:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   860d4:	464e      	mov	r6, r9
   860d6:	f898 3000 	ldrb.w	r3, [r8]
   860da:	2b00      	cmp	r3, #0
   860dc:	f000 84c8 	beq.w	86a70 <_vfiprintf_r+0xa00>
   860e0:	2b25      	cmp	r3, #37	; 0x25
   860e2:	f000 84c5 	beq.w	86a70 <_vfiprintf_r+0xa00>
   860e6:	f108 0201 	add.w	r2, r8, #1
   860ea:	e001      	b.n	860f0 <_vfiprintf_r+0x80>
   860ec:	2b25      	cmp	r3, #37	; 0x25
   860ee:	d004      	beq.n	860fa <_vfiprintf_r+0x8a>
   860f0:	7813      	ldrb	r3, [r2, #0]
   860f2:	4614      	mov	r4, r2
   860f4:	3201      	adds	r2, #1
   860f6:	2b00      	cmp	r3, #0
   860f8:	d1f8      	bne.n	860ec <_vfiprintf_r+0x7c>
   860fa:	ebc8 0504 	rsb	r5, r8, r4
   860fe:	b195      	cbz	r5, 86126 <_vfiprintf_r+0xb6>
   86100:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86102:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86104:	3301      	adds	r3, #1
   86106:	442a      	add	r2, r5
   86108:	2b07      	cmp	r3, #7
   8610a:	f8c6 8000 	str.w	r8, [r6]
   8610e:	6075      	str	r5, [r6, #4]
   86110:	9215      	str	r2, [sp, #84]	; 0x54
   86112:	9314      	str	r3, [sp, #80]	; 0x50
   86114:	dd7b      	ble.n	8620e <_vfiprintf_r+0x19e>
   86116:	2a00      	cmp	r2, #0
   86118:	f040 84d5 	bne.w	86ac6 <_vfiprintf_r+0xa56>
   8611c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8611e:	9214      	str	r2, [sp, #80]	; 0x50
   86120:	4428      	add	r0, r5
   86122:	464e      	mov	r6, r9
   86124:	9009      	str	r0, [sp, #36]	; 0x24
   86126:	7823      	ldrb	r3, [r4, #0]
   86128:	2b00      	cmp	r3, #0
   8612a:	f000 83ed 	beq.w	86908 <_vfiprintf_r+0x898>
   8612e:	2100      	movs	r1, #0
   86130:	f04f 0200 	mov.w	r2, #0
   86134:	f04f 3cff 	mov.w	ip, #4294967295
   86138:	7863      	ldrb	r3, [r4, #1]
   8613a:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   8613e:	9104      	str	r1, [sp, #16]
   86140:	468a      	mov	sl, r1
   86142:	f104 0801 	add.w	r8, r4, #1
   86146:	4608      	mov	r0, r1
   86148:	4665      	mov	r5, ip
   8614a:	f108 0801 	add.w	r8, r8, #1
   8614e:	f1a3 0220 	sub.w	r2, r3, #32
   86152:	2a58      	cmp	r2, #88	; 0x58
   86154:	f200 82d9 	bhi.w	8670a <_vfiprintf_r+0x69a>
   86158:	e8df f012 	tbh	[pc, r2, lsl #1]
   8615c:	02d702cb 	.word	0x02d702cb
   86160:	02d202d7 	.word	0x02d202d7
   86164:	02d702d7 	.word	0x02d702d7
   86168:	02d702d7 	.word	0x02d702d7
   8616c:	02d702d7 	.word	0x02d702d7
   86170:	028f0282 	.word	0x028f0282
   86174:	008402d7 	.word	0x008402d7
   86178:	02d70293 	.word	0x02d70293
   8617c:	0196012b 	.word	0x0196012b
   86180:	01960196 	.word	0x01960196
   86184:	01960196 	.word	0x01960196
   86188:	01960196 	.word	0x01960196
   8618c:	01960196 	.word	0x01960196
   86190:	02d702d7 	.word	0x02d702d7
   86194:	02d702d7 	.word	0x02d702d7
   86198:	02d702d7 	.word	0x02d702d7
   8619c:	02d702d7 	.word	0x02d702d7
   861a0:	02d702d7 	.word	0x02d702d7
   861a4:	02d70130 	.word	0x02d70130
   861a8:	02d702d7 	.word	0x02d702d7
   861ac:	02d702d7 	.word	0x02d702d7
   861b0:	02d702d7 	.word	0x02d702d7
   861b4:	02d702d7 	.word	0x02d702d7
   861b8:	017b02d7 	.word	0x017b02d7
   861bc:	02d702d7 	.word	0x02d702d7
   861c0:	02d702d7 	.word	0x02d702d7
   861c4:	01a402d7 	.word	0x01a402d7
   861c8:	02d702d7 	.word	0x02d702d7
   861cc:	02d701bf 	.word	0x02d701bf
   861d0:	02d702d7 	.word	0x02d702d7
   861d4:	02d702d7 	.word	0x02d702d7
   861d8:	02d702d7 	.word	0x02d702d7
   861dc:	02d702d7 	.word	0x02d702d7
   861e0:	01e402d7 	.word	0x01e402d7
   861e4:	02d701fa 	.word	0x02d701fa
   861e8:	02d702d7 	.word	0x02d702d7
   861ec:	01fa0216 	.word	0x01fa0216
   861f0:	02d702d7 	.word	0x02d702d7
   861f4:	02d7021b 	.word	0x02d7021b
   861f8:	00890228 	.word	0x00890228
   861fc:	027d0266 	.word	0x027d0266
   86200:	023a02d7 	.word	0x023a02d7
   86204:	011902d7 	.word	0x011902d7
   86208:	02d702d7 	.word	0x02d702d7
   8620c:	02af      	.short	0x02af
   8620e:	3608      	adds	r6, #8
   86210:	9809      	ldr	r0, [sp, #36]	; 0x24
   86212:	4428      	add	r0, r5
   86214:	9009      	str	r0, [sp, #36]	; 0x24
   86216:	e786      	b.n	86126 <_vfiprintf_r+0xb6>
   86218:	9806      	ldr	r0, [sp, #24]
   8621a:	9902      	ldr	r1, [sp, #8]
   8621c:	f000 fd90 	bl	86d40 <__swsetup_r>
   86220:	b9b0      	cbnz	r0, 86250 <_vfiprintf_r+0x1e0>
   86222:	9d02      	ldr	r5, [sp, #8]
   86224:	89aa      	ldrh	r2, [r5, #12]
   86226:	f002 021a 	and.w	r2, r2, #26
   8622a:	2a0a      	cmp	r2, #10
   8622c:	f47f af49 	bne.w	860c2 <_vfiprintf_r+0x52>
   86230:	f8dd b008 	ldr.w	fp, [sp, #8]
   86234:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   86238:	2b00      	cmp	r3, #0
   8623a:	f6ff af42 	blt.w	860c2 <_vfiprintf_r+0x52>
   8623e:	9806      	ldr	r0, [sp, #24]
   86240:	4659      	mov	r1, fp
   86242:	4642      	mov	r2, r8
   86244:	4623      	mov	r3, r4
   86246:	f000 fd3d 	bl	86cc4 <__sbprintf>
   8624a:	b031      	add	sp, #196	; 0xc4
   8624c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86250:	f04f 30ff 	mov.w	r0, #4294967295
   86254:	b031      	add	sp, #196	; 0xc4
   86256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8625a:	f001 fe59 	bl	87f10 <__sinit>
   8625e:	e714      	b.n	8608a <_vfiprintf_r+0x1a>
   86260:	4240      	negs	r0, r0
   86262:	9308      	str	r3, [sp, #32]
   86264:	f04a 0a04 	orr.w	sl, sl, #4
   86268:	f898 3000 	ldrb.w	r3, [r8]
   8626c:	e76d      	b.n	8614a <_vfiprintf_r+0xda>
   8626e:	f01a 0320 	ands.w	r3, sl, #32
   86272:	9004      	str	r0, [sp, #16]
   86274:	46ac      	mov	ip, r5
   86276:	f000 80f4 	beq.w	86462 <_vfiprintf_r+0x3f2>
   8627a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8627e:	f10b 0307 	add.w	r3, fp, #7
   86282:	f023 0307 	bic.w	r3, r3, #7
   86286:	f103 0408 	add.w	r4, r3, #8
   8628a:	9408      	str	r4, [sp, #32]
   8628c:	e9d3 4500 	ldrd	r4, r5, [r3]
   86290:	2300      	movs	r3, #0
   86292:	f04f 0000 	mov.w	r0, #0
   86296:	2100      	movs	r1, #0
   86298:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   8629c:	f8cd c014 	str.w	ip, [sp, #20]
   862a0:	9107      	str	r1, [sp, #28]
   862a2:	f1bc 0f00 	cmp.w	ip, #0
   862a6:	bfa8      	it	ge
   862a8:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   862ac:	ea54 0205 	orrs.w	r2, r4, r5
   862b0:	f040 80ad 	bne.w	8640e <_vfiprintf_r+0x39e>
   862b4:	f1bc 0f00 	cmp.w	ip, #0
   862b8:	f040 80a9 	bne.w	8640e <_vfiprintf_r+0x39e>
   862bc:	2b00      	cmp	r3, #0
   862be:	f040 83c0 	bne.w	86a42 <_vfiprintf_r+0x9d2>
   862c2:	f01a 0f01 	tst.w	sl, #1
   862c6:	f000 83bc 	beq.w	86a42 <_vfiprintf_r+0x9d2>
   862ca:	2330      	movs	r3, #48	; 0x30
   862cc:	af30      	add	r7, sp, #192	; 0xc0
   862ce:	f807 3d41 	strb.w	r3, [r7, #-65]!
   862d2:	ebc7 0409 	rsb	r4, r7, r9
   862d6:	9405      	str	r4, [sp, #20]
   862d8:	f8dd b014 	ldr.w	fp, [sp, #20]
   862dc:	9c07      	ldr	r4, [sp, #28]
   862de:	45e3      	cmp	fp, ip
   862e0:	bfb8      	it	lt
   862e2:	46e3      	movlt	fp, ip
   862e4:	f8cd b00c 	str.w	fp, [sp, #12]
   862e8:	b11c      	cbz	r4, 862f2 <_vfiprintf_r+0x282>
   862ea:	f10b 0b01 	add.w	fp, fp, #1
   862ee:	f8cd b00c 	str.w	fp, [sp, #12]
   862f2:	f01a 0502 	ands.w	r5, sl, #2
   862f6:	9507      	str	r5, [sp, #28]
   862f8:	d005      	beq.n	86306 <_vfiprintf_r+0x296>
   862fa:	f8dd b00c 	ldr.w	fp, [sp, #12]
   862fe:	f10b 0b02 	add.w	fp, fp, #2
   86302:	f8cd b00c 	str.w	fp, [sp, #12]
   86306:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   8630a:	930b      	str	r3, [sp, #44]	; 0x2c
   8630c:	f040 821b 	bne.w	86746 <_vfiprintf_r+0x6d6>
   86310:	9d04      	ldr	r5, [sp, #16]
   86312:	f8dd b00c 	ldr.w	fp, [sp, #12]
   86316:	ebcb 0405 	rsb	r4, fp, r5
   8631a:	2c00      	cmp	r4, #0
   8631c:	f340 8213 	ble.w	86746 <_vfiprintf_r+0x6d6>
   86320:	2c10      	cmp	r4, #16
   86322:	f340 8489 	ble.w	86c38 <_vfiprintf_r+0xbc8>
   86326:	4dbe      	ldr	r5, [pc, #760]	; (86620 <_vfiprintf_r+0x5b0>)
   86328:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8632a:	462b      	mov	r3, r5
   8632c:	9814      	ldr	r0, [sp, #80]	; 0x50
   8632e:	4625      	mov	r5, r4
   86330:	f04f 0b10 	mov.w	fp, #16
   86334:	4664      	mov	r4, ip
   86336:	46b4      	mov	ip, r6
   86338:	461e      	mov	r6, r3
   8633a:	e006      	b.n	8634a <_vfiprintf_r+0x2da>
   8633c:	1c83      	adds	r3, r0, #2
   8633e:	f10c 0c08 	add.w	ip, ip, #8
   86342:	4608      	mov	r0, r1
   86344:	3d10      	subs	r5, #16
   86346:	2d10      	cmp	r5, #16
   86348:	dd11      	ble.n	8636e <_vfiprintf_r+0x2fe>
   8634a:	1c41      	adds	r1, r0, #1
   8634c:	3210      	adds	r2, #16
   8634e:	2907      	cmp	r1, #7
   86350:	9215      	str	r2, [sp, #84]	; 0x54
   86352:	e88c 0840 	stmia.w	ip, {r6, fp}
   86356:	9114      	str	r1, [sp, #80]	; 0x50
   86358:	ddf0      	ble.n	8633c <_vfiprintf_r+0x2cc>
   8635a:	2a00      	cmp	r2, #0
   8635c:	f040 81e6 	bne.w	8672c <_vfiprintf_r+0x6bc>
   86360:	3d10      	subs	r5, #16
   86362:	2d10      	cmp	r5, #16
   86364:	f04f 0301 	mov.w	r3, #1
   86368:	4610      	mov	r0, r2
   8636a:	46cc      	mov	ip, r9
   8636c:	dced      	bgt.n	8634a <_vfiprintf_r+0x2da>
   8636e:	4631      	mov	r1, r6
   86370:	4666      	mov	r6, ip
   86372:	46a4      	mov	ip, r4
   86374:	462c      	mov	r4, r5
   86376:	460d      	mov	r5, r1
   86378:	4422      	add	r2, r4
   8637a:	2b07      	cmp	r3, #7
   8637c:	9215      	str	r2, [sp, #84]	; 0x54
   8637e:	6035      	str	r5, [r6, #0]
   86380:	6074      	str	r4, [r6, #4]
   86382:	9314      	str	r3, [sp, #80]	; 0x50
   86384:	f300 836d 	bgt.w	86a62 <_vfiprintf_r+0x9f2>
   86388:	3608      	adds	r6, #8
   8638a:	1c59      	adds	r1, r3, #1
   8638c:	e1de      	b.n	8674c <_vfiprintf_r+0x6dc>
   8638e:	f01a 0f20 	tst.w	sl, #32
   86392:	9004      	str	r0, [sp, #16]
   86394:	46ac      	mov	ip, r5
   86396:	f000 808d 	beq.w	864b4 <_vfiprintf_r+0x444>
   8639a:	9d08      	ldr	r5, [sp, #32]
   8639c:	1deb      	adds	r3, r5, #7
   8639e:	f023 0307 	bic.w	r3, r3, #7
   863a2:	f103 0b08 	add.w	fp, r3, #8
   863a6:	e9d3 4500 	ldrd	r4, r5, [r3]
   863aa:	f8cd b020 	str.w	fp, [sp, #32]
   863ae:	2301      	movs	r3, #1
   863b0:	e76f      	b.n	86292 <_vfiprintf_r+0x222>
   863b2:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   863b6:	f898 3000 	ldrb.w	r3, [r8]
   863ba:	e6c6      	b.n	8614a <_vfiprintf_r+0xda>
   863bc:	f04a 0a10 	orr.w	sl, sl, #16
   863c0:	f01a 0f20 	tst.w	sl, #32
   863c4:	9004      	str	r0, [sp, #16]
   863c6:	46ac      	mov	ip, r5
   863c8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   863cc:	f000 80c8 	beq.w	86560 <_vfiprintf_r+0x4f0>
   863d0:	9c08      	ldr	r4, [sp, #32]
   863d2:	1de1      	adds	r1, r4, #7
   863d4:	f021 0107 	bic.w	r1, r1, #7
   863d8:	e9d1 2300 	ldrd	r2, r3, [r1]
   863dc:	3108      	adds	r1, #8
   863de:	9108      	str	r1, [sp, #32]
   863e0:	4614      	mov	r4, r2
   863e2:	461d      	mov	r5, r3
   863e4:	2a00      	cmp	r2, #0
   863e6:	f173 0b00 	sbcs.w	fp, r3, #0
   863ea:	f2c0 83ce 	blt.w	86b8a <_vfiprintf_r+0xb1a>
   863ee:	f1bc 0f00 	cmp.w	ip, #0
   863f2:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   863f6:	bfa8      	it	ge
   863f8:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   863fc:	ea54 0205 	orrs.w	r2, r4, r5
   86400:	9007      	str	r0, [sp, #28]
   86402:	f8cd c014 	str.w	ip, [sp, #20]
   86406:	f04f 0301 	mov.w	r3, #1
   8640a:	f43f af53 	beq.w	862b4 <_vfiprintf_r+0x244>
   8640e:	2b01      	cmp	r3, #1
   86410:	f000 8319 	beq.w	86a46 <_vfiprintf_r+0x9d6>
   86414:	2b02      	cmp	r3, #2
   86416:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   8641a:	f040 824c 	bne.w	868b6 <_vfiprintf_r+0x846>
   8641e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   86422:	4619      	mov	r1, r3
   86424:	f004 000f 	and.w	r0, r4, #15
   86428:	0922      	lsrs	r2, r4, #4
   8642a:	f81b 0000 	ldrb.w	r0, [fp, r0]
   8642e:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   86432:	092b      	lsrs	r3, r5, #4
   86434:	7008      	strb	r0, [r1, #0]
   86436:	ea52 0003 	orrs.w	r0, r2, r3
   8643a:	460f      	mov	r7, r1
   8643c:	4614      	mov	r4, r2
   8643e:	461d      	mov	r5, r3
   86440:	f101 31ff 	add.w	r1, r1, #4294967295
   86444:	d1ee      	bne.n	86424 <_vfiprintf_r+0x3b4>
   86446:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   8644a:	ebc7 0309 	rsb	r3, r7, r9
   8644e:	9305      	str	r3, [sp, #20]
   86450:	e742      	b.n	862d8 <_vfiprintf_r+0x268>
   86452:	f04a 0a10 	orr.w	sl, sl, #16
   86456:	f01a 0320 	ands.w	r3, sl, #32
   8645a:	9004      	str	r0, [sp, #16]
   8645c:	46ac      	mov	ip, r5
   8645e:	f47f af0c 	bne.w	8627a <_vfiprintf_r+0x20a>
   86462:	f01a 0210 	ands.w	r2, sl, #16
   86466:	f040 8311 	bne.w	86a8c <_vfiprintf_r+0xa1c>
   8646a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   8646e:	f000 830d 	beq.w	86a8c <_vfiprintf_r+0xa1c>
   86472:	f8dd b020 	ldr.w	fp, [sp, #32]
   86476:	4613      	mov	r3, r2
   86478:	f8bb 4000 	ldrh.w	r4, [fp]
   8647c:	f10b 0b04 	add.w	fp, fp, #4
   86480:	2500      	movs	r5, #0
   86482:	f8cd b020 	str.w	fp, [sp, #32]
   86486:	e704      	b.n	86292 <_vfiprintf_r+0x222>
   86488:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8648c:	2000      	movs	r0, #0
   8648e:	f818 3b01 	ldrb.w	r3, [r8], #1
   86492:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   86496:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   8649a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8649e:	2a09      	cmp	r2, #9
   864a0:	d9f5      	bls.n	8648e <_vfiprintf_r+0x41e>
   864a2:	e654      	b.n	8614e <_vfiprintf_r+0xde>
   864a4:	f04a 0a10 	orr.w	sl, sl, #16
   864a8:	f01a 0f20 	tst.w	sl, #32
   864ac:	9004      	str	r0, [sp, #16]
   864ae:	46ac      	mov	ip, r5
   864b0:	f47f af73 	bne.w	8639a <_vfiprintf_r+0x32a>
   864b4:	f01a 0f10 	tst.w	sl, #16
   864b8:	f040 82ef 	bne.w	86a9a <_vfiprintf_r+0xa2a>
   864bc:	f01a 0f40 	tst.w	sl, #64	; 0x40
   864c0:	f000 82eb 	beq.w	86a9a <_vfiprintf_r+0xa2a>
   864c4:	f8dd b020 	ldr.w	fp, [sp, #32]
   864c8:	2500      	movs	r5, #0
   864ca:	f8bb 4000 	ldrh.w	r4, [fp]
   864ce:	f10b 0b04 	add.w	fp, fp, #4
   864d2:	2301      	movs	r3, #1
   864d4:	f8cd b020 	str.w	fp, [sp, #32]
   864d8:	e6db      	b.n	86292 <_vfiprintf_r+0x222>
   864da:	46ac      	mov	ip, r5
   864dc:	4d51      	ldr	r5, [pc, #324]	; (86624 <_vfiprintf_r+0x5b4>)
   864de:	f01a 0f20 	tst.w	sl, #32
   864e2:	9004      	str	r0, [sp, #16]
   864e4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   864e8:	950a      	str	r5, [sp, #40]	; 0x28
   864ea:	f000 80f0 	beq.w	866ce <_vfiprintf_r+0x65e>
   864ee:	9d08      	ldr	r5, [sp, #32]
   864f0:	1dea      	adds	r2, r5, #7
   864f2:	f022 0207 	bic.w	r2, r2, #7
   864f6:	f102 0b08 	add.w	fp, r2, #8
   864fa:	f8cd b020 	str.w	fp, [sp, #32]
   864fe:	e9d2 4500 	ldrd	r4, r5, [r2]
   86502:	f01a 0f01 	tst.w	sl, #1
   86506:	f000 82aa 	beq.w	86a5e <_vfiprintf_r+0x9ee>
   8650a:	ea54 0b05 	orrs.w	fp, r4, r5
   8650e:	f000 82a6 	beq.w	86a5e <_vfiprintf_r+0x9ee>
   86512:	2230      	movs	r2, #48	; 0x30
   86514:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   86518:	f04a 0a02 	orr.w	sl, sl, #2
   8651c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   86520:	2302      	movs	r3, #2
   86522:	e6b6      	b.n	86292 <_vfiprintf_r+0x222>
   86524:	9b08      	ldr	r3, [sp, #32]
   86526:	f8dd b020 	ldr.w	fp, [sp, #32]
   8652a:	681b      	ldr	r3, [r3, #0]
   8652c:	2401      	movs	r4, #1
   8652e:	f04f 0500 	mov.w	r5, #0
   86532:	f10b 0b04 	add.w	fp, fp, #4
   86536:	9004      	str	r0, [sp, #16]
   86538:	9403      	str	r4, [sp, #12]
   8653a:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8653e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   86542:	f8cd b020 	str.w	fp, [sp, #32]
   86546:	9405      	str	r4, [sp, #20]
   86548:	af16      	add	r7, sp, #88	; 0x58
   8654a:	f04f 0c00 	mov.w	ip, #0
   8654e:	e6d0      	b.n	862f2 <_vfiprintf_r+0x282>
   86550:	f01a 0f20 	tst.w	sl, #32
   86554:	9004      	str	r0, [sp, #16]
   86556:	46ac      	mov	ip, r5
   86558:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8655c:	f47f af38 	bne.w	863d0 <_vfiprintf_r+0x360>
   86560:	f01a 0f10 	tst.w	sl, #16
   86564:	f040 82a7 	bne.w	86ab6 <_vfiprintf_r+0xa46>
   86568:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8656c:	f000 82a3 	beq.w	86ab6 <_vfiprintf_r+0xa46>
   86570:	f8dd b020 	ldr.w	fp, [sp, #32]
   86574:	f9bb 4000 	ldrsh.w	r4, [fp]
   86578:	f10b 0b04 	add.w	fp, fp, #4
   8657c:	17e5      	asrs	r5, r4, #31
   8657e:	4622      	mov	r2, r4
   86580:	462b      	mov	r3, r5
   86582:	f8cd b020 	str.w	fp, [sp, #32]
   86586:	e72d      	b.n	863e4 <_vfiprintf_r+0x374>
   86588:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   8658c:	f898 3000 	ldrb.w	r3, [r8]
   86590:	e5db      	b.n	8614a <_vfiprintf_r+0xda>
   86592:	f898 3000 	ldrb.w	r3, [r8]
   86596:	4642      	mov	r2, r8
   86598:	2b6c      	cmp	r3, #108	; 0x6c
   8659a:	bf03      	ittte	eq
   8659c:	f108 0801 	addeq.w	r8, r8, #1
   865a0:	f04a 0a20 	orreq.w	sl, sl, #32
   865a4:	7853      	ldrbeq	r3, [r2, #1]
   865a6:	f04a 0a10 	orrne.w	sl, sl, #16
   865aa:	e5ce      	b.n	8614a <_vfiprintf_r+0xda>
   865ac:	f01a 0f20 	tst.w	sl, #32
   865b0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   865b4:	f000 82f7 	beq.w	86ba6 <_vfiprintf_r+0xb36>
   865b8:	9c08      	ldr	r4, [sp, #32]
   865ba:	6821      	ldr	r1, [r4, #0]
   865bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   865be:	17e5      	asrs	r5, r4, #31
   865c0:	462b      	mov	r3, r5
   865c2:	9d08      	ldr	r5, [sp, #32]
   865c4:	4622      	mov	r2, r4
   865c6:	3504      	adds	r5, #4
   865c8:	9508      	str	r5, [sp, #32]
   865ca:	e9c1 2300 	strd	r2, r3, [r1]
   865ce:	e582      	b.n	860d6 <_vfiprintf_r+0x66>
   865d0:	9c08      	ldr	r4, [sp, #32]
   865d2:	46ac      	mov	ip, r5
   865d4:	6827      	ldr	r7, [r4, #0]
   865d6:	f04f 0500 	mov.w	r5, #0
   865da:	9004      	str	r0, [sp, #16]
   865dc:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   865e0:	3404      	adds	r4, #4
   865e2:	2f00      	cmp	r7, #0
   865e4:	f000 8332 	beq.w	86c4c <_vfiprintf_r+0xbdc>
   865e8:	f1bc 0f00 	cmp.w	ip, #0
   865ec:	4638      	mov	r0, r7
   865ee:	f2c0 8307 	blt.w	86c00 <_vfiprintf_r+0xb90>
   865f2:	4662      	mov	r2, ip
   865f4:	2100      	movs	r1, #0
   865f6:	f8cd c004 	str.w	ip, [sp, #4]
   865fa:	f002 fb6b 	bl	88cd4 <memchr>
   865fe:	f8dd c004 	ldr.w	ip, [sp, #4]
   86602:	2800      	cmp	r0, #0
   86604:	f000 833a 	beq.w	86c7c <_vfiprintf_r+0xc0c>
   86608:	1bc0      	subs	r0, r0, r7
   8660a:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8660e:	4560      	cmp	r0, ip
   86610:	bfa8      	it	ge
   86612:	4660      	movge	r0, ip
   86614:	9005      	str	r0, [sp, #20]
   86616:	9408      	str	r4, [sp, #32]
   86618:	9507      	str	r5, [sp, #28]
   8661a:	f04f 0c00 	mov.w	ip, #0
   8661e:	e65b      	b.n	862d8 <_vfiprintf_r+0x268>
   86620:	0008a804 	.word	0x0008a804
   86624:	0008a7b4 	.word	0x0008a7b4
   86628:	9b08      	ldr	r3, [sp, #32]
   8662a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8662e:	9004      	str	r0, [sp, #16]
   86630:	48b2      	ldr	r0, [pc, #712]	; (868fc <_vfiprintf_r+0x88c>)
   86632:	681c      	ldr	r4, [r3, #0]
   86634:	2230      	movs	r2, #48	; 0x30
   86636:	2378      	movs	r3, #120	; 0x78
   86638:	f10b 0b04 	add.w	fp, fp, #4
   8663c:	46ac      	mov	ip, r5
   8663e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   86642:	f04a 0a02 	orr.w	sl, sl, #2
   86646:	f8cd b020 	str.w	fp, [sp, #32]
   8664a:	2500      	movs	r5, #0
   8664c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   86650:	900a      	str	r0, [sp, #40]	; 0x28
   86652:	2302      	movs	r3, #2
   86654:	e61d      	b.n	86292 <_vfiprintf_r+0x222>
   86656:	f04a 0a20 	orr.w	sl, sl, #32
   8665a:	f898 3000 	ldrb.w	r3, [r8]
   8665e:	e574      	b.n	8614a <_vfiprintf_r+0xda>
   86660:	f8dd b020 	ldr.w	fp, [sp, #32]
   86664:	f8db 0000 	ldr.w	r0, [fp]
   86668:	f10b 0304 	add.w	r3, fp, #4
   8666c:	2800      	cmp	r0, #0
   8666e:	f6ff adf7 	blt.w	86260 <_vfiprintf_r+0x1f0>
   86672:	9308      	str	r3, [sp, #32]
   86674:	f898 3000 	ldrb.w	r3, [r8]
   86678:	e567      	b.n	8614a <_vfiprintf_r+0xda>
   8667a:	f898 3000 	ldrb.w	r3, [r8]
   8667e:	212b      	movs	r1, #43	; 0x2b
   86680:	e563      	b.n	8614a <_vfiprintf_r+0xda>
   86682:	f898 3000 	ldrb.w	r3, [r8]
   86686:	f108 0401 	add.w	r4, r8, #1
   8668a:	2b2a      	cmp	r3, #42	; 0x2a
   8668c:	f000 8305 	beq.w	86c9a <_vfiprintf_r+0xc2a>
   86690:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   86694:	2a09      	cmp	r2, #9
   86696:	bf98      	it	ls
   86698:	2500      	movls	r5, #0
   8669a:	f200 82fa 	bhi.w	86c92 <_vfiprintf_r+0xc22>
   8669e:	f814 3b01 	ldrb.w	r3, [r4], #1
   866a2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   866a6:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   866aa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   866ae:	2a09      	cmp	r2, #9
   866b0:	d9f5      	bls.n	8669e <_vfiprintf_r+0x62e>
   866b2:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   866b6:	46a0      	mov	r8, r4
   866b8:	e549      	b.n	8614e <_vfiprintf_r+0xde>
   866ba:	4c90      	ldr	r4, [pc, #576]	; (868fc <_vfiprintf_r+0x88c>)
   866bc:	f01a 0f20 	tst.w	sl, #32
   866c0:	9004      	str	r0, [sp, #16]
   866c2:	46ac      	mov	ip, r5
   866c4:	940a      	str	r4, [sp, #40]	; 0x28
   866c6:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   866ca:	f47f af10 	bne.w	864ee <_vfiprintf_r+0x47e>
   866ce:	f01a 0f10 	tst.w	sl, #16
   866d2:	f040 81ea 	bne.w	86aaa <_vfiprintf_r+0xa3a>
   866d6:	f01a 0f40 	tst.w	sl, #64	; 0x40
   866da:	f000 81e6 	beq.w	86aaa <_vfiprintf_r+0xa3a>
   866de:	f8dd b020 	ldr.w	fp, [sp, #32]
   866e2:	2500      	movs	r5, #0
   866e4:	f8bb 4000 	ldrh.w	r4, [fp]
   866e8:	f10b 0b04 	add.w	fp, fp, #4
   866ec:	f8cd b020 	str.w	fp, [sp, #32]
   866f0:	e707      	b.n	86502 <_vfiprintf_r+0x492>
   866f2:	f898 3000 	ldrb.w	r3, [r8]
   866f6:	2900      	cmp	r1, #0
   866f8:	f47f ad27 	bne.w	8614a <_vfiprintf_r+0xda>
   866fc:	2120      	movs	r1, #32
   866fe:	e524      	b.n	8614a <_vfiprintf_r+0xda>
   86700:	f04a 0a01 	orr.w	sl, sl, #1
   86704:	f898 3000 	ldrb.w	r3, [r8]
   86708:	e51f      	b.n	8614a <_vfiprintf_r+0xda>
   8670a:	9004      	str	r0, [sp, #16]
   8670c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   86710:	2b00      	cmp	r3, #0
   86712:	f000 80f9 	beq.w	86908 <_vfiprintf_r+0x898>
   86716:	2501      	movs	r5, #1
   86718:	f04f 0b00 	mov.w	fp, #0
   8671c:	9503      	str	r5, [sp, #12]
   8671e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   86722:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   86726:	9505      	str	r5, [sp, #20]
   86728:	af16      	add	r7, sp, #88	; 0x58
   8672a:	e70e      	b.n	8654a <_vfiprintf_r+0x4da>
   8672c:	9806      	ldr	r0, [sp, #24]
   8672e:	9902      	ldr	r1, [sp, #8]
   86730:	aa13      	add	r2, sp, #76	; 0x4c
   86732:	f7ff fc61 	bl	85ff8 <__sprint_r.part.0>
   86736:	2800      	cmp	r0, #0
   86738:	f040 80ed 	bne.w	86916 <_vfiprintf_r+0x8a6>
   8673c:	9814      	ldr	r0, [sp, #80]	; 0x50
   8673e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86740:	1c43      	adds	r3, r0, #1
   86742:	46cc      	mov	ip, r9
   86744:	e5fe      	b.n	86344 <_vfiprintf_r+0x2d4>
   86746:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86748:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8674a:	1c59      	adds	r1, r3, #1
   8674c:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   86750:	b168      	cbz	r0, 8676e <_vfiprintf_r+0x6fe>
   86752:	3201      	adds	r2, #1
   86754:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   86758:	2301      	movs	r3, #1
   8675a:	2907      	cmp	r1, #7
   8675c:	9215      	str	r2, [sp, #84]	; 0x54
   8675e:	9114      	str	r1, [sp, #80]	; 0x50
   86760:	e886 0009 	stmia.w	r6, {r0, r3}
   86764:	f300 8160 	bgt.w	86a28 <_vfiprintf_r+0x9b8>
   86768:	460b      	mov	r3, r1
   8676a:	3608      	adds	r6, #8
   8676c:	3101      	adds	r1, #1
   8676e:	9c07      	ldr	r4, [sp, #28]
   86770:	b164      	cbz	r4, 8678c <_vfiprintf_r+0x71c>
   86772:	3202      	adds	r2, #2
   86774:	a812      	add	r0, sp, #72	; 0x48
   86776:	2302      	movs	r3, #2
   86778:	2907      	cmp	r1, #7
   8677a:	9215      	str	r2, [sp, #84]	; 0x54
   8677c:	9114      	str	r1, [sp, #80]	; 0x50
   8677e:	e886 0009 	stmia.w	r6, {r0, r3}
   86782:	f300 8157 	bgt.w	86a34 <_vfiprintf_r+0x9c4>
   86786:	460b      	mov	r3, r1
   86788:	3608      	adds	r6, #8
   8678a:	3101      	adds	r1, #1
   8678c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8678e:	2d80      	cmp	r5, #128	; 0x80
   86790:	f000 8101 	beq.w	86996 <_vfiprintf_r+0x926>
   86794:	9d05      	ldr	r5, [sp, #20]
   86796:	ebc5 040c 	rsb	r4, r5, ip
   8679a:	2c00      	cmp	r4, #0
   8679c:	dd2f      	ble.n	867fe <_vfiprintf_r+0x78e>
   8679e:	2c10      	cmp	r4, #16
   867a0:	4d57      	ldr	r5, [pc, #348]	; (86900 <_vfiprintf_r+0x890>)
   867a2:	dd22      	ble.n	867ea <_vfiprintf_r+0x77a>
   867a4:	4630      	mov	r0, r6
   867a6:	f04f 0b10 	mov.w	fp, #16
   867aa:	462e      	mov	r6, r5
   867ac:	4625      	mov	r5, r4
   867ae:	9c06      	ldr	r4, [sp, #24]
   867b0:	e006      	b.n	867c0 <_vfiprintf_r+0x750>
   867b2:	f103 0c02 	add.w	ip, r3, #2
   867b6:	3008      	adds	r0, #8
   867b8:	460b      	mov	r3, r1
   867ba:	3d10      	subs	r5, #16
   867bc:	2d10      	cmp	r5, #16
   867be:	dd10      	ble.n	867e2 <_vfiprintf_r+0x772>
   867c0:	1c59      	adds	r1, r3, #1
   867c2:	3210      	adds	r2, #16
   867c4:	2907      	cmp	r1, #7
   867c6:	9215      	str	r2, [sp, #84]	; 0x54
   867c8:	e880 0840 	stmia.w	r0, {r6, fp}
   867cc:	9114      	str	r1, [sp, #80]	; 0x50
   867ce:	ddf0      	ble.n	867b2 <_vfiprintf_r+0x742>
   867d0:	2a00      	cmp	r2, #0
   867d2:	d163      	bne.n	8689c <_vfiprintf_r+0x82c>
   867d4:	3d10      	subs	r5, #16
   867d6:	2d10      	cmp	r5, #16
   867d8:	f04f 0c01 	mov.w	ip, #1
   867dc:	4613      	mov	r3, r2
   867de:	4648      	mov	r0, r9
   867e0:	dcee      	bgt.n	867c0 <_vfiprintf_r+0x750>
   867e2:	462c      	mov	r4, r5
   867e4:	4661      	mov	r1, ip
   867e6:	4635      	mov	r5, r6
   867e8:	4606      	mov	r6, r0
   867ea:	4422      	add	r2, r4
   867ec:	2907      	cmp	r1, #7
   867ee:	9215      	str	r2, [sp, #84]	; 0x54
   867f0:	6035      	str	r5, [r6, #0]
   867f2:	6074      	str	r4, [r6, #4]
   867f4:	9114      	str	r1, [sp, #80]	; 0x50
   867f6:	f300 80c1 	bgt.w	8697c <_vfiprintf_r+0x90c>
   867fa:	3608      	adds	r6, #8
   867fc:	3101      	adds	r1, #1
   867fe:	9d05      	ldr	r5, [sp, #20]
   86800:	2907      	cmp	r1, #7
   86802:	442a      	add	r2, r5
   86804:	9215      	str	r2, [sp, #84]	; 0x54
   86806:	6037      	str	r7, [r6, #0]
   86808:	6075      	str	r5, [r6, #4]
   8680a:	9114      	str	r1, [sp, #80]	; 0x50
   8680c:	f340 80c1 	ble.w	86992 <_vfiprintf_r+0x922>
   86810:	2a00      	cmp	r2, #0
   86812:	f040 8130 	bne.w	86a76 <_vfiprintf_r+0xa06>
   86816:	9214      	str	r2, [sp, #80]	; 0x50
   86818:	464e      	mov	r6, r9
   8681a:	f01a 0f04 	tst.w	sl, #4
   8681e:	f000 808b 	beq.w	86938 <_vfiprintf_r+0x8c8>
   86822:	9d04      	ldr	r5, [sp, #16]
   86824:	f8dd b00c 	ldr.w	fp, [sp, #12]
   86828:	ebcb 0405 	rsb	r4, fp, r5
   8682c:	2c00      	cmp	r4, #0
   8682e:	f340 8083 	ble.w	86938 <_vfiprintf_r+0x8c8>
   86832:	2c10      	cmp	r4, #16
   86834:	f340 821e 	ble.w	86c74 <_vfiprintf_r+0xc04>
   86838:	9914      	ldr	r1, [sp, #80]	; 0x50
   8683a:	4d32      	ldr	r5, [pc, #200]	; (86904 <_vfiprintf_r+0x894>)
   8683c:	2710      	movs	r7, #16
   8683e:	f8dd a018 	ldr.w	sl, [sp, #24]
   86842:	f8dd b008 	ldr.w	fp, [sp, #8]
   86846:	e005      	b.n	86854 <_vfiprintf_r+0x7e4>
   86848:	1c88      	adds	r0, r1, #2
   8684a:	3608      	adds	r6, #8
   8684c:	4619      	mov	r1, r3
   8684e:	3c10      	subs	r4, #16
   86850:	2c10      	cmp	r4, #16
   86852:	dd10      	ble.n	86876 <_vfiprintf_r+0x806>
   86854:	1c4b      	adds	r3, r1, #1
   86856:	3210      	adds	r2, #16
   86858:	2b07      	cmp	r3, #7
   8685a:	9215      	str	r2, [sp, #84]	; 0x54
   8685c:	e886 00a0 	stmia.w	r6, {r5, r7}
   86860:	9314      	str	r3, [sp, #80]	; 0x50
   86862:	ddf1      	ble.n	86848 <_vfiprintf_r+0x7d8>
   86864:	2a00      	cmp	r2, #0
   86866:	d17d      	bne.n	86964 <_vfiprintf_r+0x8f4>
   86868:	3c10      	subs	r4, #16
   8686a:	2c10      	cmp	r4, #16
   8686c:	f04f 0001 	mov.w	r0, #1
   86870:	4611      	mov	r1, r2
   86872:	464e      	mov	r6, r9
   86874:	dcee      	bgt.n	86854 <_vfiprintf_r+0x7e4>
   86876:	4422      	add	r2, r4
   86878:	2807      	cmp	r0, #7
   8687a:	9215      	str	r2, [sp, #84]	; 0x54
   8687c:	6035      	str	r5, [r6, #0]
   8687e:	6074      	str	r4, [r6, #4]
   86880:	9014      	str	r0, [sp, #80]	; 0x50
   86882:	dd59      	ble.n	86938 <_vfiprintf_r+0x8c8>
   86884:	2a00      	cmp	r2, #0
   86886:	d14f      	bne.n	86928 <_vfiprintf_r+0x8b8>
   86888:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8688a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8688e:	9d04      	ldr	r5, [sp, #16]
   86890:	45ab      	cmp	fp, r5
   86892:	bfac      	ite	ge
   86894:	445c      	addge	r4, fp
   86896:	1964      	addlt	r4, r4, r5
   86898:	9409      	str	r4, [sp, #36]	; 0x24
   8689a:	e05e      	b.n	8695a <_vfiprintf_r+0x8ea>
   8689c:	4620      	mov	r0, r4
   8689e:	9902      	ldr	r1, [sp, #8]
   868a0:	aa13      	add	r2, sp, #76	; 0x4c
   868a2:	f7ff fba9 	bl	85ff8 <__sprint_r.part.0>
   868a6:	2800      	cmp	r0, #0
   868a8:	d135      	bne.n	86916 <_vfiprintf_r+0x8a6>
   868aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   868ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
   868ae:	f103 0c01 	add.w	ip, r3, #1
   868b2:	4648      	mov	r0, r9
   868b4:	e781      	b.n	867ba <_vfiprintf_r+0x74a>
   868b6:	08e0      	lsrs	r0, r4, #3
   868b8:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   868bc:	f004 0207 	and.w	r2, r4, #7
   868c0:	08e9      	lsrs	r1, r5, #3
   868c2:	3230      	adds	r2, #48	; 0x30
   868c4:	ea50 0b01 	orrs.w	fp, r0, r1
   868c8:	461f      	mov	r7, r3
   868ca:	701a      	strb	r2, [r3, #0]
   868cc:	4604      	mov	r4, r0
   868ce:	460d      	mov	r5, r1
   868d0:	f103 33ff 	add.w	r3, r3, #4294967295
   868d4:	d1ef      	bne.n	868b6 <_vfiprintf_r+0x846>
   868d6:	f01a 0f01 	tst.w	sl, #1
   868da:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   868de:	4639      	mov	r1, r7
   868e0:	f000 80b9 	beq.w	86a56 <_vfiprintf_r+0x9e6>
   868e4:	2a30      	cmp	r2, #48	; 0x30
   868e6:	f43f acf4 	beq.w	862d2 <_vfiprintf_r+0x262>
   868ea:	461f      	mov	r7, r3
   868ec:	ebc7 0509 	rsb	r5, r7, r9
   868f0:	2330      	movs	r3, #48	; 0x30
   868f2:	9505      	str	r5, [sp, #20]
   868f4:	f801 3c01 	strb.w	r3, [r1, #-1]
   868f8:	e4ee      	b.n	862d8 <_vfiprintf_r+0x268>
   868fa:	bf00      	nop
   868fc:	0008a7c8 	.word	0x0008a7c8
   86900:	0008a7f4 	.word	0x0008a7f4
   86904:	0008a804 	.word	0x0008a804
   86908:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8690a:	b123      	cbz	r3, 86916 <_vfiprintf_r+0x8a6>
   8690c:	9806      	ldr	r0, [sp, #24]
   8690e:	9902      	ldr	r1, [sp, #8]
   86910:	aa13      	add	r2, sp, #76	; 0x4c
   86912:	f7ff fb71 	bl	85ff8 <__sprint_r.part.0>
   86916:	9c02      	ldr	r4, [sp, #8]
   86918:	89a3      	ldrh	r3, [r4, #12]
   8691a:	065b      	lsls	r3, r3, #25
   8691c:	f53f ac98 	bmi.w	86250 <_vfiprintf_r+0x1e0>
   86920:	9809      	ldr	r0, [sp, #36]	; 0x24
   86922:	b031      	add	sp, #196	; 0xc4
   86924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86928:	9806      	ldr	r0, [sp, #24]
   8692a:	9902      	ldr	r1, [sp, #8]
   8692c:	aa13      	add	r2, sp, #76	; 0x4c
   8692e:	f7ff fb63 	bl	85ff8 <__sprint_r.part.0>
   86932:	2800      	cmp	r0, #0
   86934:	d1ef      	bne.n	86916 <_vfiprintf_r+0x8a6>
   86936:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86938:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8693a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8693e:	9d04      	ldr	r5, [sp, #16]
   86940:	45ab      	cmp	fp, r5
   86942:	bfac      	ite	ge
   86944:	445c      	addge	r4, fp
   86946:	1964      	addlt	r4, r4, r5
   86948:	9409      	str	r4, [sp, #36]	; 0x24
   8694a:	b132      	cbz	r2, 8695a <_vfiprintf_r+0x8ea>
   8694c:	9806      	ldr	r0, [sp, #24]
   8694e:	9902      	ldr	r1, [sp, #8]
   86950:	aa13      	add	r2, sp, #76	; 0x4c
   86952:	f7ff fb51 	bl	85ff8 <__sprint_r.part.0>
   86956:	2800      	cmp	r0, #0
   86958:	d1dd      	bne.n	86916 <_vfiprintf_r+0x8a6>
   8695a:	2000      	movs	r0, #0
   8695c:	9014      	str	r0, [sp, #80]	; 0x50
   8695e:	464e      	mov	r6, r9
   86960:	f7ff bbb9 	b.w	860d6 <_vfiprintf_r+0x66>
   86964:	4650      	mov	r0, sl
   86966:	4659      	mov	r1, fp
   86968:	aa13      	add	r2, sp, #76	; 0x4c
   8696a:	f7ff fb45 	bl	85ff8 <__sprint_r.part.0>
   8696e:	2800      	cmp	r0, #0
   86970:	d1d1      	bne.n	86916 <_vfiprintf_r+0x8a6>
   86972:	9914      	ldr	r1, [sp, #80]	; 0x50
   86974:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86976:	1c48      	adds	r0, r1, #1
   86978:	464e      	mov	r6, r9
   8697a:	e768      	b.n	8684e <_vfiprintf_r+0x7de>
   8697c:	2a00      	cmp	r2, #0
   8697e:	f040 80f7 	bne.w	86b70 <_vfiprintf_r+0xb00>
   86982:	9c05      	ldr	r4, [sp, #20]
   86984:	2301      	movs	r3, #1
   86986:	9720      	str	r7, [sp, #128]	; 0x80
   86988:	9421      	str	r4, [sp, #132]	; 0x84
   8698a:	9415      	str	r4, [sp, #84]	; 0x54
   8698c:	4622      	mov	r2, r4
   8698e:	9314      	str	r3, [sp, #80]	; 0x50
   86990:	464e      	mov	r6, r9
   86992:	3608      	adds	r6, #8
   86994:	e741      	b.n	8681a <_vfiprintf_r+0x7aa>
   86996:	9d04      	ldr	r5, [sp, #16]
   86998:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8699c:	ebcb 0405 	rsb	r4, fp, r5
   869a0:	2c00      	cmp	r4, #0
   869a2:	f77f aef7 	ble.w	86794 <_vfiprintf_r+0x724>
   869a6:	2c10      	cmp	r4, #16
   869a8:	4da6      	ldr	r5, [pc, #664]	; (86c44 <_vfiprintf_r+0xbd4>)
   869aa:	f340 8170 	ble.w	86c8e <_vfiprintf_r+0xc1e>
   869ae:	4629      	mov	r1, r5
   869b0:	f04f 0b10 	mov.w	fp, #16
   869b4:	4625      	mov	r5, r4
   869b6:	4664      	mov	r4, ip
   869b8:	46b4      	mov	ip, r6
   869ba:	460e      	mov	r6, r1
   869bc:	e006      	b.n	869cc <_vfiprintf_r+0x95c>
   869be:	1c98      	adds	r0, r3, #2
   869c0:	f10c 0c08 	add.w	ip, ip, #8
   869c4:	460b      	mov	r3, r1
   869c6:	3d10      	subs	r5, #16
   869c8:	2d10      	cmp	r5, #16
   869ca:	dd0f      	ble.n	869ec <_vfiprintf_r+0x97c>
   869cc:	1c59      	adds	r1, r3, #1
   869ce:	3210      	adds	r2, #16
   869d0:	2907      	cmp	r1, #7
   869d2:	9215      	str	r2, [sp, #84]	; 0x54
   869d4:	e88c 0840 	stmia.w	ip, {r6, fp}
   869d8:	9114      	str	r1, [sp, #80]	; 0x50
   869da:	ddf0      	ble.n	869be <_vfiprintf_r+0x94e>
   869dc:	b9ba      	cbnz	r2, 86a0e <_vfiprintf_r+0x99e>
   869de:	3d10      	subs	r5, #16
   869e0:	2d10      	cmp	r5, #16
   869e2:	f04f 0001 	mov.w	r0, #1
   869e6:	4613      	mov	r3, r2
   869e8:	46cc      	mov	ip, r9
   869ea:	dcef      	bgt.n	869cc <_vfiprintf_r+0x95c>
   869ec:	4633      	mov	r3, r6
   869ee:	4666      	mov	r6, ip
   869f0:	46a4      	mov	ip, r4
   869f2:	462c      	mov	r4, r5
   869f4:	461d      	mov	r5, r3
   869f6:	4422      	add	r2, r4
   869f8:	2807      	cmp	r0, #7
   869fa:	9215      	str	r2, [sp, #84]	; 0x54
   869fc:	6035      	str	r5, [r6, #0]
   869fe:	6074      	str	r4, [r6, #4]
   86a00:	9014      	str	r0, [sp, #80]	; 0x50
   86a02:	f300 80af 	bgt.w	86b64 <_vfiprintf_r+0xaf4>
   86a06:	3608      	adds	r6, #8
   86a08:	1c41      	adds	r1, r0, #1
   86a0a:	4603      	mov	r3, r0
   86a0c:	e6c2      	b.n	86794 <_vfiprintf_r+0x724>
   86a0e:	9806      	ldr	r0, [sp, #24]
   86a10:	9902      	ldr	r1, [sp, #8]
   86a12:	aa13      	add	r2, sp, #76	; 0x4c
   86a14:	f7ff faf0 	bl	85ff8 <__sprint_r.part.0>
   86a18:	2800      	cmp	r0, #0
   86a1a:	f47f af7c 	bne.w	86916 <_vfiprintf_r+0x8a6>
   86a1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86a20:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86a22:	1c58      	adds	r0, r3, #1
   86a24:	46cc      	mov	ip, r9
   86a26:	e7ce      	b.n	869c6 <_vfiprintf_r+0x956>
   86a28:	2a00      	cmp	r2, #0
   86a2a:	d179      	bne.n	86b20 <_vfiprintf_r+0xab0>
   86a2c:	4619      	mov	r1, r3
   86a2e:	464e      	mov	r6, r9
   86a30:	4613      	mov	r3, r2
   86a32:	e69c      	b.n	8676e <_vfiprintf_r+0x6fe>
   86a34:	2a00      	cmp	r2, #0
   86a36:	f040 8084 	bne.w	86b42 <_vfiprintf_r+0xad2>
   86a3a:	2101      	movs	r1, #1
   86a3c:	4613      	mov	r3, r2
   86a3e:	464e      	mov	r6, r9
   86a40:	e6a4      	b.n	8678c <_vfiprintf_r+0x71c>
   86a42:	464f      	mov	r7, r9
   86a44:	e448      	b.n	862d8 <_vfiprintf_r+0x268>
   86a46:	2d00      	cmp	r5, #0
   86a48:	bf08      	it	eq
   86a4a:	2c0a      	cmpeq	r4, #10
   86a4c:	d246      	bcs.n	86adc <_vfiprintf_r+0xa6c>
   86a4e:	3430      	adds	r4, #48	; 0x30
   86a50:	af30      	add	r7, sp, #192	; 0xc0
   86a52:	f807 4d41 	strb.w	r4, [r7, #-65]!
   86a56:	ebc7 0309 	rsb	r3, r7, r9
   86a5a:	9305      	str	r3, [sp, #20]
   86a5c:	e43c      	b.n	862d8 <_vfiprintf_r+0x268>
   86a5e:	2302      	movs	r3, #2
   86a60:	e417      	b.n	86292 <_vfiprintf_r+0x222>
   86a62:	2a00      	cmp	r2, #0
   86a64:	f040 80af 	bne.w	86bc6 <_vfiprintf_r+0xb56>
   86a68:	4613      	mov	r3, r2
   86a6a:	2101      	movs	r1, #1
   86a6c:	464e      	mov	r6, r9
   86a6e:	e66d      	b.n	8674c <_vfiprintf_r+0x6dc>
   86a70:	4644      	mov	r4, r8
   86a72:	f7ff bb58 	b.w	86126 <_vfiprintf_r+0xb6>
   86a76:	9806      	ldr	r0, [sp, #24]
   86a78:	9902      	ldr	r1, [sp, #8]
   86a7a:	aa13      	add	r2, sp, #76	; 0x4c
   86a7c:	f7ff fabc 	bl	85ff8 <__sprint_r.part.0>
   86a80:	2800      	cmp	r0, #0
   86a82:	f47f af48 	bne.w	86916 <_vfiprintf_r+0x8a6>
   86a86:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86a88:	464e      	mov	r6, r9
   86a8a:	e6c6      	b.n	8681a <_vfiprintf_r+0x7aa>
   86a8c:	9d08      	ldr	r5, [sp, #32]
   86a8e:	682c      	ldr	r4, [r5, #0]
   86a90:	3504      	adds	r5, #4
   86a92:	9508      	str	r5, [sp, #32]
   86a94:	2500      	movs	r5, #0
   86a96:	f7ff bbfc 	b.w	86292 <_vfiprintf_r+0x222>
   86a9a:	9d08      	ldr	r5, [sp, #32]
   86a9c:	2301      	movs	r3, #1
   86a9e:	682c      	ldr	r4, [r5, #0]
   86aa0:	3504      	adds	r5, #4
   86aa2:	9508      	str	r5, [sp, #32]
   86aa4:	2500      	movs	r5, #0
   86aa6:	f7ff bbf4 	b.w	86292 <_vfiprintf_r+0x222>
   86aaa:	9d08      	ldr	r5, [sp, #32]
   86aac:	682c      	ldr	r4, [r5, #0]
   86aae:	3504      	adds	r5, #4
   86ab0:	9508      	str	r5, [sp, #32]
   86ab2:	2500      	movs	r5, #0
   86ab4:	e525      	b.n	86502 <_vfiprintf_r+0x492>
   86ab6:	9d08      	ldr	r5, [sp, #32]
   86ab8:	682c      	ldr	r4, [r5, #0]
   86aba:	3504      	adds	r5, #4
   86abc:	9508      	str	r5, [sp, #32]
   86abe:	17e5      	asrs	r5, r4, #31
   86ac0:	4622      	mov	r2, r4
   86ac2:	462b      	mov	r3, r5
   86ac4:	e48e      	b.n	863e4 <_vfiprintf_r+0x374>
   86ac6:	9806      	ldr	r0, [sp, #24]
   86ac8:	9902      	ldr	r1, [sp, #8]
   86aca:	aa13      	add	r2, sp, #76	; 0x4c
   86acc:	f7ff fa94 	bl	85ff8 <__sprint_r.part.0>
   86ad0:	2800      	cmp	r0, #0
   86ad2:	f47f af20 	bne.w	86916 <_vfiprintf_r+0x8a6>
   86ad6:	464e      	mov	r6, r9
   86ad8:	f7ff bb9a 	b.w	86210 <_vfiprintf_r+0x1a0>
   86adc:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   86ae0:	9603      	str	r6, [sp, #12]
   86ae2:	465e      	mov	r6, fp
   86ae4:	46e3      	mov	fp, ip
   86ae6:	4620      	mov	r0, r4
   86ae8:	4629      	mov	r1, r5
   86aea:	220a      	movs	r2, #10
   86aec:	2300      	movs	r3, #0
   86aee:	f003 f92d 	bl	89d4c <__aeabi_uldivmod>
   86af2:	3230      	adds	r2, #48	; 0x30
   86af4:	7032      	strb	r2, [r6, #0]
   86af6:	4620      	mov	r0, r4
   86af8:	4629      	mov	r1, r5
   86afa:	220a      	movs	r2, #10
   86afc:	2300      	movs	r3, #0
   86afe:	f003 f925 	bl	89d4c <__aeabi_uldivmod>
   86b02:	4604      	mov	r4, r0
   86b04:	460d      	mov	r5, r1
   86b06:	ea54 0005 	orrs.w	r0, r4, r5
   86b0a:	4637      	mov	r7, r6
   86b0c:	f106 36ff 	add.w	r6, r6, #4294967295
   86b10:	d1e9      	bne.n	86ae6 <_vfiprintf_r+0xa76>
   86b12:	ebc7 0309 	rsb	r3, r7, r9
   86b16:	46dc      	mov	ip, fp
   86b18:	9e03      	ldr	r6, [sp, #12]
   86b1a:	9305      	str	r3, [sp, #20]
   86b1c:	f7ff bbdc 	b.w	862d8 <_vfiprintf_r+0x268>
   86b20:	9806      	ldr	r0, [sp, #24]
   86b22:	9902      	ldr	r1, [sp, #8]
   86b24:	aa13      	add	r2, sp, #76	; 0x4c
   86b26:	f8cd c004 	str.w	ip, [sp, #4]
   86b2a:	f7ff fa65 	bl	85ff8 <__sprint_r.part.0>
   86b2e:	f8dd c004 	ldr.w	ip, [sp, #4]
   86b32:	2800      	cmp	r0, #0
   86b34:	f47f aeef 	bne.w	86916 <_vfiprintf_r+0x8a6>
   86b38:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86b3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86b3c:	1c59      	adds	r1, r3, #1
   86b3e:	464e      	mov	r6, r9
   86b40:	e615      	b.n	8676e <_vfiprintf_r+0x6fe>
   86b42:	9806      	ldr	r0, [sp, #24]
   86b44:	9902      	ldr	r1, [sp, #8]
   86b46:	aa13      	add	r2, sp, #76	; 0x4c
   86b48:	f8cd c004 	str.w	ip, [sp, #4]
   86b4c:	f7ff fa54 	bl	85ff8 <__sprint_r.part.0>
   86b50:	f8dd c004 	ldr.w	ip, [sp, #4]
   86b54:	2800      	cmp	r0, #0
   86b56:	f47f aede 	bne.w	86916 <_vfiprintf_r+0x8a6>
   86b5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86b5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86b5e:	1c59      	adds	r1, r3, #1
   86b60:	464e      	mov	r6, r9
   86b62:	e613      	b.n	8678c <_vfiprintf_r+0x71c>
   86b64:	2a00      	cmp	r2, #0
   86b66:	d156      	bne.n	86c16 <_vfiprintf_r+0xba6>
   86b68:	2101      	movs	r1, #1
   86b6a:	4613      	mov	r3, r2
   86b6c:	464e      	mov	r6, r9
   86b6e:	e611      	b.n	86794 <_vfiprintf_r+0x724>
   86b70:	9806      	ldr	r0, [sp, #24]
   86b72:	9902      	ldr	r1, [sp, #8]
   86b74:	aa13      	add	r2, sp, #76	; 0x4c
   86b76:	f7ff fa3f 	bl	85ff8 <__sprint_r.part.0>
   86b7a:	2800      	cmp	r0, #0
   86b7c:	f47f aecb 	bne.w	86916 <_vfiprintf_r+0x8a6>
   86b80:	9914      	ldr	r1, [sp, #80]	; 0x50
   86b82:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86b84:	3101      	adds	r1, #1
   86b86:	464e      	mov	r6, r9
   86b88:	e639      	b.n	867fe <_vfiprintf_r+0x78e>
   86b8a:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   86b8e:	4264      	negs	r4, r4
   86b90:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   86b94:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   86b98:	f8cd b01c 	str.w	fp, [sp, #28]
   86b9c:	f8cd c014 	str.w	ip, [sp, #20]
   86ba0:	2301      	movs	r3, #1
   86ba2:	f7ff bb7e 	b.w	862a2 <_vfiprintf_r+0x232>
   86ba6:	f01a 0f10 	tst.w	sl, #16
   86baa:	d11d      	bne.n	86be8 <_vfiprintf_r+0xb78>
   86bac:	f01a 0f40 	tst.w	sl, #64	; 0x40
   86bb0:	d058      	beq.n	86c64 <_vfiprintf_r+0xbf4>
   86bb2:	9d08      	ldr	r5, [sp, #32]
   86bb4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   86bb8:	682b      	ldr	r3, [r5, #0]
   86bba:	3504      	adds	r5, #4
   86bbc:	9508      	str	r5, [sp, #32]
   86bbe:	f8a3 b000 	strh.w	fp, [r3]
   86bc2:	f7ff ba88 	b.w	860d6 <_vfiprintf_r+0x66>
   86bc6:	9806      	ldr	r0, [sp, #24]
   86bc8:	9902      	ldr	r1, [sp, #8]
   86bca:	aa13      	add	r2, sp, #76	; 0x4c
   86bcc:	f8cd c004 	str.w	ip, [sp, #4]
   86bd0:	f7ff fa12 	bl	85ff8 <__sprint_r.part.0>
   86bd4:	f8dd c004 	ldr.w	ip, [sp, #4]
   86bd8:	2800      	cmp	r0, #0
   86bda:	f47f ae9c 	bne.w	86916 <_vfiprintf_r+0x8a6>
   86bde:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86be0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86be2:	1c59      	adds	r1, r3, #1
   86be4:	464e      	mov	r6, r9
   86be6:	e5b1      	b.n	8674c <_vfiprintf_r+0x6dc>
   86be8:	f8dd b020 	ldr.w	fp, [sp, #32]
   86bec:	9c09      	ldr	r4, [sp, #36]	; 0x24
   86bee:	f8db 3000 	ldr.w	r3, [fp]
   86bf2:	f10b 0b04 	add.w	fp, fp, #4
   86bf6:	f8cd b020 	str.w	fp, [sp, #32]
   86bfa:	601c      	str	r4, [r3, #0]
   86bfc:	f7ff ba6b 	b.w	860d6 <_vfiprintf_r+0x66>
   86c00:	9408      	str	r4, [sp, #32]
   86c02:	f7fd ff27 	bl	84a54 <strlen>
   86c06:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   86c0a:	9005      	str	r0, [sp, #20]
   86c0c:	9407      	str	r4, [sp, #28]
   86c0e:	f04f 0c00 	mov.w	ip, #0
   86c12:	f7ff bb61 	b.w	862d8 <_vfiprintf_r+0x268>
   86c16:	9806      	ldr	r0, [sp, #24]
   86c18:	9902      	ldr	r1, [sp, #8]
   86c1a:	aa13      	add	r2, sp, #76	; 0x4c
   86c1c:	f8cd c004 	str.w	ip, [sp, #4]
   86c20:	f7ff f9ea 	bl	85ff8 <__sprint_r.part.0>
   86c24:	f8dd c004 	ldr.w	ip, [sp, #4]
   86c28:	2800      	cmp	r0, #0
   86c2a:	f47f ae74 	bne.w	86916 <_vfiprintf_r+0x8a6>
   86c2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86c30:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86c32:	1c59      	adds	r1, r3, #1
   86c34:	464e      	mov	r6, r9
   86c36:	e5ad      	b.n	86794 <_vfiprintf_r+0x724>
   86c38:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86c3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86c3c:	3301      	adds	r3, #1
   86c3e:	4d02      	ldr	r5, [pc, #8]	; (86c48 <_vfiprintf_r+0xbd8>)
   86c40:	f7ff bb9a 	b.w	86378 <_vfiprintf_r+0x308>
   86c44:	0008a7f4 	.word	0x0008a7f4
   86c48:	0008a804 	.word	0x0008a804
   86c4c:	f1bc 0f06 	cmp.w	ip, #6
   86c50:	bf34      	ite	cc
   86c52:	4663      	movcc	r3, ip
   86c54:	2306      	movcs	r3, #6
   86c56:	9408      	str	r4, [sp, #32]
   86c58:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   86c5c:	9305      	str	r3, [sp, #20]
   86c5e:	9403      	str	r4, [sp, #12]
   86c60:	4f16      	ldr	r7, [pc, #88]	; (86cbc <_vfiprintf_r+0xc4c>)
   86c62:	e472      	b.n	8654a <_vfiprintf_r+0x4da>
   86c64:	9c08      	ldr	r4, [sp, #32]
   86c66:	9d09      	ldr	r5, [sp, #36]	; 0x24
   86c68:	6823      	ldr	r3, [r4, #0]
   86c6a:	3404      	adds	r4, #4
   86c6c:	9408      	str	r4, [sp, #32]
   86c6e:	601d      	str	r5, [r3, #0]
   86c70:	f7ff ba31 	b.w	860d6 <_vfiprintf_r+0x66>
   86c74:	9814      	ldr	r0, [sp, #80]	; 0x50
   86c76:	4d12      	ldr	r5, [pc, #72]	; (86cc0 <_vfiprintf_r+0xc50>)
   86c78:	3001      	adds	r0, #1
   86c7a:	e5fc      	b.n	86876 <_vfiprintf_r+0x806>
   86c7c:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   86c80:	f8cd c014 	str.w	ip, [sp, #20]
   86c84:	9507      	str	r5, [sp, #28]
   86c86:	9408      	str	r4, [sp, #32]
   86c88:	4684      	mov	ip, r0
   86c8a:	f7ff bb25 	b.w	862d8 <_vfiprintf_r+0x268>
   86c8e:	4608      	mov	r0, r1
   86c90:	e6b1      	b.n	869f6 <_vfiprintf_r+0x986>
   86c92:	46a0      	mov	r8, r4
   86c94:	2500      	movs	r5, #0
   86c96:	f7ff ba5a 	b.w	8614e <_vfiprintf_r+0xde>
   86c9a:	f8dd b020 	ldr.w	fp, [sp, #32]
   86c9e:	f898 3001 	ldrb.w	r3, [r8, #1]
   86ca2:	f8db 5000 	ldr.w	r5, [fp]
   86ca6:	f10b 0204 	add.w	r2, fp, #4
   86caa:	2d00      	cmp	r5, #0
   86cac:	9208      	str	r2, [sp, #32]
   86cae:	46a0      	mov	r8, r4
   86cb0:	f6bf aa4b 	bge.w	8614a <_vfiprintf_r+0xda>
   86cb4:	f04f 35ff 	mov.w	r5, #4294967295
   86cb8:	f7ff ba47 	b.w	8614a <_vfiprintf_r+0xda>
   86cbc:	0008a7dc 	.word	0x0008a7dc
   86cc0:	0008a804 	.word	0x0008a804

00086cc4 <__sbprintf>:
   86cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86cc8:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   86cca:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   86cce:	4688      	mov	r8, r1
   86cd0:	9719      	str	r7, [sp, #100]	; 0x64
   86cd2:	f8d8 701c 	ldr.w	r7, [r8, #28]
   86cd6:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   86cda:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   86cde:	9707      	str	r7, [sp, #28]
   86ce0:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   86ce4:	ac1a      	add	r4, sp, #104	; 0x68
   86ce6:	f44f 6580 	mov.w	r5, #1024	; 0x400
   86cea:	f02a 0a02 	bic.w	sl, sl, #2
   86cee:	2600      	movs	r6, #0
   86cf0:	4669      	mov	r1, sp
   86cf2:	9400      	str	r4, [sp, #0]
   86cf4:	9404      	str	r4, [sp, #16]
   86cf6:	9502      	str	r5, [sp, #8]
   86cf8:	9505      	str	r5, [sp, #20]
   86cfa:	f8ad a00c 	strh.w	sl, [sp, #12]
   86cfe:	f8ad 900e 	strh.w	r9, [sp, #14]
   86d02:	9709      	str	r7, [sp, #36]	; 0x24
   86d04:	9606      	str	r6, [sp, #24]
   86d06:	4605      	mov	r5, r0
   86d08:	f7ff f9b2 	bl	86070 <_vfiprintf_r>
   86d0c:	1e04      	subs	r4, r0, #0
   86d0e:	db07      	blt.n	86d20 <__sbprintf+0x5c>
   86d10:	4628      	mov	r0, r5
   86d12:	4669      	mov	r1, sp
   86d14:	f001 f8e0 	bl	87ed8 <_fflush_r>
   86d18:	42b0      	cmp	r0, r6
   86d1a:	bf18      	it	ne
   86d1c:	f04f 34ff 	movne.w	r4, #4294967295
   86d20:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   86d24:	065b      	lsls	r3, r3, #25
   86d26:	d505      	bpl.n	86d34 <__sbprintf+0x70>
   86d28:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   86d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   86d30:	f8a8 300c 	strh.w	r3, [r8, #12]
   86d34:	4620      	mov	r0, r4
   86d36:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   86d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86d3e:	bf00      	nop

00086d40 <__swsetup_r>:
   86d40:	4b2f      	ldr	r3, [pc, #188]	; (86e00 <__swsetup_r+0xc0>)
   86d42:	b570      	push	{r4, r5, r6, lr}
   86d44:	4606      	mov	r6, r0
   86d46:	6818      	ldr	r0, [r3, #0]
   86d48:	460c      	mov	r4, r1
   86d4a:	b110      	cbz	r0, 86d52 <__swsetup_r+0x12>
   86d4c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   86d4e:	2a00      	cmp	r2, #0
   86d50:	d036      	beq.n	86dc0 <__swsetup_r+0x80>
   86d52:	89a5      	ldrh	r5, [r4, #12]
   86d54:	b2ab      	uxth	r3, r5
   86d56:	0719      	lsls	r1, r3, #28
   86d58:	d50c      	bpl.n	86d74 <__swsetup_r+0x34>
   86d5a:	6922      	ldr	r2, [r4, #16]
   86d5c:	b1aa      	cbz	r2, 86d8a <__swsetup_r+0x4a>
   86d5e:	f013 0101 	ands.w	r1, r3, #1
   86d62:	d01e      	beq.n	86da2 <__swsetup_r+0x62>
   86d64:	6963      	ldr	r3, [r4, #20]
   86d66:	2100      	movs	r1, #0
   86d68:	425b      	negs	r3, r3
   86d6a:	61a3      	str	r3, [r4, #24]
   86d6c:	60a1      	str	r1, [r4, #8]
   86d6e:	b1f2      	cbz	r2, 86dae <__swsetup_r+0x6e>
   86d70:	2000      	movs	r0, #0
   86d72:	bd70      	pop	{r4, r5, r6, pc}
   86d74:	06da      	lsls	r2, r3, #27
   86d76:	d53a      	bpl.n	86dee <__swsetup_r+0xae>
   86d78:	075b      	lsls	r3, r3, #29
   86d7a:	d424      	bmi.n	86dc6 <__swsetup_r+0x86>
   86d7c:	6922      	ldr	r2, [r4, #16]
   86d7e:	f045 0308 	orr.w	r3, r5, #8
   86d82:	81a3      	strh	r3, [r4, #12]
   86d84:	b29b      	uxth	r3, r3
   86d86:	2a00      	cmp	r2, #0
   86d88:	d1e9      	bne.n	86d5e <__swsetup_r+0x1e>
   86d8a:	f403 7120 	and.w	r1, r3, #640	; 0x280
   86d8e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   86d92:	d0e4      	beq.n	86d5e <__swsetup_r+0x1e>
   86d94:	4630      	mov	r0, r6
   86d96:	4621      	mov	r1, r4
   86d98:	f001 fc88 	bl	886ac <__smakebuf_r>
   86d9c:	89a3      	ldrh	r3, [r4, #12]
   86d9e:	6922      	ldr	r2, [r4, #16]
   86da0:	e7dd      	b.n	86d5e <__swsetup_r+0x1e>
   86da2:	0798      	lsls	r0, r3, #30
   86da4:	bf58      	it	pl
   86da6:	6961      	ldrpl	r1, [r4, #20]
   86da8:	60a1      	str	r1, [r4, #8]
   86daa:	2a00      	cmp	r2, #0
   86dac:	d1e0      	bne.n	86d70 <__swsetup_r+0x30>
   86dae:	89a3      	ldrh	r3, [r4, #12]
   86db0:	061a      	lsls	r2, r3, #24
   86db2:	d5dd      	bpl.n	86d70 <__swsetup_r+0x30>
   86db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   86db8:	81a3      	strh	r3, [r4, #12]
   86dba:	f04f 30ff 	mov.w	r0, #4294967295
   86dbe:	bd70      	pop	{r4, r5, r6, pc}
   86dc0:	f001 f8a6 	bl	87f10 <__sinit>
   86dc4:	e7c5      	b.n	86d52 <__swsetup_r+0x12>
   86dc6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   86dc8:	b149      	cbz	r1, 86dde <__swsetup_r+0x9e>
   86dca:	f104 0340 	add.w	r3, r4, #64	; 0x40
   86dce:	4299      	cmp	r1, r3
   86dd0:	d003      	beq.n	86dda <__swsetup_r+0x9a>
   86dd2:	4630      	mov	r0, r6
   86dd4:	f001 f9e0 	bl	88198 <_free_r>
   86dd8:	89a5      	ldrh	r5, [r4, #12]
   86dda:	2300      	movs	r3, #0
   86ddc:	6323      	str	r3, [r4, #48]	; 0x30
   86dde:	6922      	ldr	r2, [r4, #16]
   86de0:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   86de4:	2100      	movs	r1, #0
   86de6:	b2ad      	uxth	r5, r5
   86de8:	6022      	str	r2, [r4, #0]
   86dea:	6061      	str	r1, [r4, #4]
   86dec:	e7c7      	b.n	86d7e <__swsetup_r+0x3e>
   86dee:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   86df2:	2309      	movs	r3, #9
   86df4:	6033      	str	r3, [r6, #0]
   86df6:	f04f 30ff 	mov.w	r0, #4294967295
   86dfa:	81a5      	strh	r5, [r4, #12]
   86dfc:	bd70      	pop	{r4, r5, r6, pc}
   86dfe:	bf00      	nop
   86e00:	200705e0 	.word	0x200705e0

00086e04 <register_fini>:
   86e04:	4b02      	ldr	r3, [pc, #8]	; (86e10 <register_fini+0xc>)
   86e06:	b113      	cbz	r3, 86e0e <register_fini+0xa>
   86e08:	4802      	ldr	r0, [pc, #8]	; (86e14 <register_fini+0x10>)
   86e0a:	f000 b805 	b.w	86e18 <atexit>
   86e0e:	4770      	bx	lr
   86e10:	00000000 	.word	0x00000000
   86e14:	0008800d 	.word	0x0008800d

00086e18 <atexit>:
   86e18:	4601      	mov	r1, r0
   86e1a:	2000      	movs	r0, #0
   86e1c:	4602      	mov	r2, r0
   86e1e:	4603      	mov	r3, r0
   86e20:	f002 be68 	b.w	89af4 <__register_exitproc>

00086e24 <quorem>:
   86e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86e28:	6903      	ldr	r3, [r0, #16]
   86e2a:	690d      	ldr	r5, [r1, #16]
   86e2c:	b083      	sub	sp, #12
   86e2e:	429d      	cmp	r5, r3
   86e30:	4683      	mov	fp, r0
   86e32:	f300 808c 	bgt.w	86f4e <quorem+0x12a>
   86e36:	3d01      	subs	r5, #1
   86e38:	f101 0414 	add.w	r4, r1, #20
   86e3c:	f100 0a14 	add.w	sl, r0, #20
   86e40:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   86e44:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
   86e48:	3201      	adds	r2, #1
   86e4a:	fbb3 f8f2 	udiv	r8, r3, r2
   86e4e:	00aa      	lsls	r2, r5, #2
   86e50:	4691      	mov	r9, r2
   86e52:	9200      	str	r2, [sp, #0]
   86e54:	4452      	add	r2, sl
   86e56:	44a1      	add	r9, r4
   86e58:	9201      	str	r2, [sp, #4]
   86e5a:	f1b8 0f00 	cmp.w	r8, #0
   86e5e:	d03e      	beq.n	86ede <quorem+0xba>
   86e60:	2600      	movs	r6, #0
   86e62:	4630      	mov	r0, r6
   86e64:	4622      	mov	r2, r4
   86e66:	4653      	mov	r3, sl
   86e68:	468c      	mov	ip, r1
   86e6a:	f852 7b04 	ldr.w	r7, [r2], #4
   86e6e:	6819      	ldr	r1, [r3, #0]
   86e70:	fa1f fe87 	uxth.w	lr, r7
   86e74:	0c3f      	lsrs	r7, r7, #16
   86e76:	fb0e 6e08 	mla	lr, lr, r8, r6
   86e7a:	fb07 f608 	mul.w	r6, r7, r8
   86e7e:	eb06 461e 	add.w	r6, r6, lr, lsr #16
   86e82:	fa1f fe8e 	uxth.w	lr, lr
   86e86:	ebce 0e00 	rsb	lr, lr, r0
   86e8a:	b28f      	uxth	r7, r1
   86e8c:	b2b0      	uxth	r0, r6
   86e8e:	4477      	add	r7, lr
   86e90:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
   86e94:	eb00 4027 	add.w	r0, r0, r7, asr #16
   86e98:	b2bf      	uxth	r7, r7
   86e9a:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
   86e9e:	4591      	cmp	r9, r2
   86ea0:	f843 7b04 	str.w	r7, [r3], #4
   86ea4:	ea4f 4020 	mov.w	r0, r0, asr #16
   86ea8:	ea4f 4616 	mov.w	r6, r6, lsr #16
   86eac:	d2dd      	bcs.n	86e6a <quorem+0x46>
   86eae:	9a00      	ldr	r2, [sp, #0]
   86eb0:	4661      	mov	r1, ip
   86eb2:	f85a 3002 	ldr.w	r3, [sl, r2]
   86eb6:	b993      	cbnz	r3, 86ede <quorem+0xba>
   86eb8:	9a01      	ldr	r2, [sp, #4]
   86eba:	1f13      	subs	r3, r2, #4
   86ebc:	459a      	cmp	sl, r3
   86ebe:	d20c      	bcs.n	86eda <quorem+0xb6>
   86ec0:	f852 3c04 	ldr.w	r3, [r2, #-4]
   86ec4:	b94b      	cbnz	r3, 86eda <quorem+0xb6>
   86ec6:	f1a2 0308 	sub.w	r3, r2, #8
   86eca:	e002      	b.n	86ed2 <quorem+0xae>
   86ecc:	681a      	ldr	r2, [r3, #0]
   86ece:	3b04      	subs	r3, #4
   86ed0:	b91a      	cbnz	r2, 86eda <quorem+0xb6>
   86ed2:	459a      	cmp	sl, r3
   86ed4:	f105 35ff 	add.w	r5, r5, #4294967295
   86ed8:	d3f8      	bcc.n	86ecc <quorem+0xa8>
   86eda:	f8cb 5010 	str.w	r5, [fp, #16]
   86ede:	4658      	mov	r0, fp
   86ee0:	f002 f9c8 	bl	89274 <__mcmp>
   86ee4:	2800      	cmp	r0, #0
   86ee6:	db2e      	blt.n	86f46 <quorem+0x122>
   86ee8:	f108 0801 	add.w	r8, r8, #1
   86eec:	4653      	mov	r3, sl
   86eee:	2200      	movs	r2, #0
   86ef0:	f854 6b04 	ldr.w	r6, [r4], #4
   86ef4:	6818      	ldr	r0, [r3, #0]
   86ef6:	b2b1      	uxth	r1, r6
   86ef8:	1a51      	subs	r1, r2, r1
   86efa:	b287      	uxth	r7, r0
   86efc:	0c36      	lsrs	r6, r6, #16
   86efe:	4439      	add	r1, r7
   86f00:	ebc6 4010 	rsb	r0, r6, r0, lsr #16
   86f04:	eb00 4221 	add.w	r2, r0, r1, asr #16
   86f08:	b289      	uxth	r1, r1
   86f0a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   86f0e:	45a1      	cmp	r9, r4
   86f10:	f843 1b04 	str.w	r1, [r3], #4
   86f14:	ea4f 4222 	mov.w	r2, r2, asr #16
   86f18:	d2ea      	bcs.n	86ef0 <quorem+0xcc>
   86f1a:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   86f1e:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
   86f22:	b982      	cbnz	r2, 86f46 <quorem+0x122>
   86f24:	1f1a      	subs	r2, r3, #4
   86f26:	4592      	cmp	sl, r2
   86f28:	d20b      	bcs.n	86f42 <quorem+0x11e>
   86f2a:	f853 2c04 	ldr.w	r2, [r3, #-4]
   86f2e:	b942      	cbnz	r2, 86f42 <quorem+0x11e>
   86f30:	3b08      	subs	r3, #8
   86f32:	e002      	b.n	86f3a <quorem+0x116>
   86f34:	681a      	ldr	r2, [r3, #0]
   86f36:	3b04      	subs	r3, #4
   86f38:	b91a      	cbnz	r2, 86f42 <quorem+0x11e>
   86f3a:	459a      	cmp	sl, r3
   86f3c:	f105 35ff 	add.w	r5, r5, #4294967295
   86f40:	d3f8      	bcc.n	86f34 <quorem+0x110>
   86f42:	f8cb 5010 	str.w	r5, [fp, #16]
   86f46:	4640      	mov	r0, r8
   86f48:	b003      	add	sp, #12
   86f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86f4e:	2000      	movs	r0, #0
   86f50:	b003      	add	sp, #12
   86f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86f56:	bf00      	nop

00086f58 <_dtoa_r>:
   86f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86f5c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   86f5e:	b09b      	sub	sp, #108	; 0x6c
   86f60:	4604      	mov	r4, r0
   86f62:	4692      	mov	sl, r2
   86f64:	469b      	mov	fp, r3
   86f66:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   86f68:	b141      	cbz	r1, 86f7c <_dtoa_r+0x24>
   86f6a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   86f6c:	2201      	movs	r2, #1
   86f6e:	409a      	lsls	r2, r3
   86f70:	604b      	str	r3, [r1, #4]
   86f72:	608a      	str	r2, [r1, #8]
   86f74:	f001 ff88 	bl	88e88 <_Bfree>
   86f78:	2300      	movs	r3, #0
   86f7a:	6423      	str	r3, [r4, #64]	; 0x40
   86f7c:	f1bb 0f00 	cmp.w	fp, #0
   86f80:	46d9      	mov	r9, fp
   86f82:	db33      	blt.n	86fec <_dtoa_r+0x94>
   86f84:	2300      	movs	r3, #0
   86f86:	602b      	str	r3, [r5, #0]
   86f88:	4ba5      	ldr	r3, [pc, #660]	; (87220 <_dtoa_r+0x2c8>)
   86f8a:	461a      	mov	r2, r3
   86f8c:	ea09 0303 	and.w	r3, r9, r3
   86f90:	4293      	cmp	r3, r2
   86f92:	d014      	beq.n	86fbe <_dtoa_r+0x66>
   86f94:	4650      	mov	r0, sl
   86f96:	4659      	mov	r1, fp
   86f98:	2200      	movs	r2, #0
   86f9a:	2300      	movs	r3, #0
   86f9c:	f7fd fb50 	bl	84640 <__aeabi_dcmpeq>
   86fa0:	4680      	mov	r8, r0
   86fa2:	b348      	cbz	r0, 86ff8 <_dtoa_r+0xa0>
   86fa4:	9e26      	ldr	r6, [sp, #152]	; 0x98
   86fa6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   86fa8:	2301      	movs	r3, #1
   86faa:	6033      	str	r3, [r6, #0]
   86fac:	2d00      	cmp	r5, #0
   86fae:	f000 80ca 	beq.w	87146 <_dtoa_r+0x1ee>
   86fb2:	489c      	ldr	r0, [pc, #624]	; (87224 <_dtoa_r+0x2cc>)
   86fb4:	6028      	str	r0, [r5, #0]
   86fb6:	3801      	subs	r0, #1
   86fb8:	b01b      	add	sp, #108	; 0x6c
   86fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86fbe:	9d26      	ldr	r5, [sp, #152]	; 0x98
   86fc0:	f242 730f 	movw	r3, #9999	; 0x270f
   86fc4:	602b      	str	r3, [r5, #0]
   86fc6:	f1ba 0f00 	cmp.w	sl, #0
   86fca:	f000 80a5 	beq.w	87118 <_dtoa_r+0x1c0>
   86fce:	4896      	ldr	r0, [pc, #600]	; (87228 <_dtoa_r+0x2d0>)
   86fd0:	9e28      	ldr	r6, [sp, #160]	; 0xa0
   86fd2:	2e00      	cmp	r6, #0
   86fd4:	d0f0      	beq.n	86fb8 <_dtoa_r+0x60>
   86fd6:	78c3      	ldrb	r3, [r0, #3]
   86fd8:	2b00      	cmp	r3, #0
   86fda:	f000 80b6 	beq.w	8714a <_dtoa_r+0x1f2>
   86fde:	f100 0308 	add.w	r3, r0, #8
   86fe2:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   86fe4:	602b      	str	r3, [r5, #0]
   86fe6:	b01b      	add	sp, #108	; 0x6c
   86fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86fec:	2301      	movs	r3, #1
   86fee:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
   86ff2:	602b      	str	r3, [r5, #0]
   86ff4:	46cb      	mov	fp, r9
   86ff6:	e7c7      	b.n	86f88 <_dtoa_r+0x30>
   86ff8:	aa19      	add	r2, sp, #100	; 0x64
   86ffa:	ab18      	add	r3, sp, #96	; 0x60
   86ffc:	e88d 000c 	stmia.w	sp, {r2, r3}
   87000:	4620      	mov	r0, r4
   87002:	4652      	mov	r2, sl
   87004:	465b      	mov	r3, fp
   87006:	f002 f9c5 	bl	89394 <__d2b>
   8700a:	ea5f 5519 	movs.w	r5, r9, lsr #20
   8700e:	900a      	str	r0, [sp, #40]	; 0x28
   87010:	f040 808b 	bne.w	8712a <_dtoa_r+0x1d2>
   87014:	9f18      	ldr	r7, [sp, #96]	; 0x60
   87016:	9d19      	ldr	r5, [sp, #100]	; 0x64
   87018:	f46f 6382 	mvn.w	r3, #1040	; 0x410
   8701c:	443d      	add	r5, r7
   8701e:	429d      	cmp	r5, r3
   87020:	f2c0 8295 	blt.w	8754e <_dtoa_r+0x5f6>
   87024:	331f      	adds	r3, #31
   87026:	f205 4212 	addw	r2, r5, #1042	; 0x412
   8702a:	1b5b      	subs	r3, r3, r5
   8702c:	fa09 f303 	lsl.w	r3, r9, r3
   87030:	fa2a f202 	lsr.w	r2, sl, r2
   87034:	ea43 0002 	orr.w	r0, r3, r2
   87038:	f7fd f824 	bl	84084 <__aeabi_ui2d>
   8703c:	2601      	movs	r6, #1
   8703e:	3d01      	subs	r5, #1
   87040:	46b8      	mov	r8, r7
   87042:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   87046:	9616      	str	r6, [sp, #88]	; 0x58
   87048:	2200      	movs	r2, #0
   8704a:	4b78      	ldr	r3, [pc, #480]	; (8722c <_dtoa_r+0x2d4>)
   8704c:	f7fc fedc 	bl	83e08 <__aeabi_dsub>
   87050:	a36d      	add	r3, pc, #436	; (adr r3, 87208 <_dtoa_r+0x2b0>)
   87052:	e9d3 2300 	ldrd	r2, r3, [r3]
   87056:	f7fd f88b 	bl	84170 <__aeabi_dmul>
   8705a:	a36d      	add	r3, pc, #436	; (adr r3, 87210 <_dtoa_r+0x2b8>)
   8705c:	e9d3 2300 	ldrd	r2, r3, [r3]
   87060:	f7fc fed4 	bl	83e0c <__adddf3>
   87064:	4606      	mov	r6, r0
   87066:	4628      	mov	r0, r5
   87068:	460f      	mov	r7, r1
   8706a:	f7fd f81b 	bl	840a4 <__aeabi_i2d>
   8706e:	a36a      	add	r3, pc, #424	; (adr r3, 87218 <_dtoa_r+0x2c0>)
   87070:	e9d3 2300 	ldrd	r2, r3, [r3]
   87074:	f7fd f87c 	bl	84170 <__aeabi_dmul>
   87078:	4602      	mov	r2, r0
   8707a:	460b      	mov	r3, r1
   8707c:	4630      	mov	r0, r6
   8707e:	4639      	mov	r1, r7
   87080:	f7fc fec4 	bl	83e0c <__adddf3>
   87084:	4606      	mov	r6, r0
   87086:	460f      	mov	r7, r1
   87088:	f7fd fb0c 	bl	846a4 <__aeabi_d2iz>
   8708c:	4639      	mov	r1, r7
   8708e:	9007      	str	r0, [sp, #28]
   87090:	2200      	movs	r2, #0
   87092:	4630      	mov	r0, r6
   87094:	2300      	movs	r3, #0
   87096:	f7fd fadd 	bl	84654 <__aeabi_dcmplt>
   8709a:	2800      	cmp	r0, #0
   8709c:	f040 8229 	bne.w	874f2 <_dtoa_r+0x59a>
   870a0:	9e07      	ldr	r6, [sp, #28]
   870a2:	2e16      	cmp	r6, #22
   870a4:	f200 8222 	bhi.w	874ec <_dtoa_r+0x594>
   870a8:	4961      	ldr	r1, [pc, #388]	; (87230 <_dtoa_r+0x2d8>)
   870aa:	4652      	mov	r2, sl
   870ac:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
   870b0:	465b      	mov	r3, fp
   870b2:	e9d1 0100 	ldrd	r0, r1, [r1]
   870b6:	f7fd faeb 	bl	84690 <__aeabi_dcmpgt>
   870ba:	2800      	cmp	r0, #0
   870bc:	f000 824c 	beq.w	87558 <_dtoa_r+0x600>
   870c0:	3e01      	subs	r6, #1
   870c2:	9607      	str	r6, [sp, #28]
   870c4:	2600      	movs	r6, #0
   870c6:	960e      	str	r6, [sp, #56]	; 0x38
   870c8:	ebc5 0508 	rsb	r5, r5, r8
   870cc:	3d01      	subs	r5, #1
   870ce:	9506      	str	r5, [sp, #24]
   870d0:	f100 8226 	bmi.w	87520 <_dtoa_r+0x5c8>
   870d4:	2500      	movs	r5, #0
   870d6:	9508      	str	r5, [sp, #32]
   870d8:	9e07      	ldr	r6, [sp, #28]
   870da:	2e00      	cmp	r6, #0
   870dc:	f2c0 8217 	blt.w	8750e <_dtoa_r+0x5b6>
   870e0:	9d06      	ldr	r5, [sp, #24]
   870e2:	960d      	str	r6, [sp, #52]	; 0x34
   870e4:	4435      	add	r5, r6
   870e6:	2600      	movs	r6, #0
   870e8:	9506      	str	r5, [sp, #24]
   870ea:	960c      	str	r6, [sp, #48]	; 0x30
   870ec:	9d24      	ldr	r5, [sp, #144]	; 0x90
   870ee:	2d09      	cmp	r5, #9
   870f0:	d82d      	bhi.n	8714e <_dtoa_r+0x1f6>
   870f2:	2d05      	cmp	r5, #5
   870f4:	bfc4      	itt	gt
   870f6:	3d04      	subgt	r5, #4
   870f8:	9524      	strgt	r5, [sp, #144]	; 0x90
   870fa:	9e24      	ldr	r6, [sp, #144]	; 0x90
   870fc:	bfc8      	it	gt
   870fe:	2500      	movgt	r5, #0
   87100:	f1a6 0302 	sub.w	r3, r6, #2
   87104:	bfd8      	it	le
   87106:	2501      	movle	r5, #1
   87108:	2b03      	cmp	r3, #3
   8710a:	d822      	bhi.n	87152 <_dtoa_r+0x1fa>
   8710c:	e8df f013 	tbh	[pc, r3, lsl #1]
   87110:	029e03b7 	.word	0x029e03b7
   87114:	049a03c0 	.word	0x049a03c0
   87118:	4a46      	ldr	r2, [pc, #280]	; (87234 <_dtoa_r+0x2dc>)
   8711a:	4b43      	ldr	r3, [pc, #268]	; (87228 <_dtoa_r+0x2d0>)
   8711c:	f3c9 0013 	ubfx	r0, r9, #0, #20
   87120:	2800      	cmp	r0, #0
   87122:	bf0c      	ite	eq
   87124:	4610      	moveq	r0, r2
   87126:	4618      	movne	r0, r3
   87128:	e752      	b.n	86fd0 <_dtoa_r+0x78>
   8712a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   8712e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   87132:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   87136:	4650      	mov	r0, sl
   87138:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   8713c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   87140:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   87144:	e780      	b.n	87048 <_dtoa_r+0xf0>
   87146:	483c      	ldr	r0, [pc, #240]	; (87238 <_dtoa_r+0x2e0>)
   87148:	e736      	b.n	86fb8 <_dtoa_r+0x60>
   8714a:	1cc3      	adds	r3, r0, #3
   8714c:	e749      	b.n	86fe2 <_dtoa_r+0x8a>
   8714e:	2500      	movs	r5, #0
   87150:	9524      	str	r5, [sp, #144]	; 0x90
   87152:	2500      	movs	r5, #0
   87154:	6465      	str	r5, [r4, #68]	; 0x44
   87156:	4629      	mov	r1, r5
   87158:	4620      	mov	r0, r4
   8715a:	f001 fe6f 	bl	88e3c <_Balloc>
   8715e:	f04f 39ff 	mov.w	r9, #4294967295
   87162:	2601      	movs	r6, #1
   87164:	9009      	str	r0, [sp, #36]	; 0x24
   87166:	9525      	str	r5, [sp, #148]	; 0x94
   87168:	6420      	str	r0, [r4, #64]	; 0x40
   8716a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   8716e:	960b      	str	r6, [sp, #44]	; 0x2c
   87170:	9b19      	ldr	r3, [sp, #100]	; 0x64
   87172:	2b00      	cmp	r3, #0
   87174:	f2c0 80d2 	blt.w	8731c <_dtoa_r+0x3c4>
   87178:	9e07      	ldr	r6, [sp, #28]
   8717a:	2e0e      	cmp	r6, #14
   8717c:	f300 80ce 	bgt.w	8731c <_dtoa_r+0x3c4>
   87180:	4b2b      	ldr	r3, [pc, #172]	; (87230 <_dtoa_r+0x2d8>)
   87182:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   87186:	e9d3 0100 	ldrd	r0, r1, [r3]
   8718a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   8718e:	9925      	ldr	r1, [sp, #148]	; 0x94
   87190:	2900      	cmp	r1, #0
   87192:	f2c0 8380 	blt.w	87896 <_dtoa_r+0x93e>
   87196:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8719a:	4659      	mov	r1, fp
   8719c:	4650      	mov	r0, sl
   8719e:	f7fd f911 	bl	843c4 <__aeabi_ddiv>
   871a2:	f7fd fa7f 	bl	846a4 <__aeabi_d2iz>
   871a6:	4605      	mov	r5, r0
   871a8:	f7fc ff7c 	bl	840a4 <__aeabi_i2d>
   871ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   871b0:	f7fc ffde 	bl	84170 <__aeabi_dmul>
   871b4:	4602      	mov	r2, r0
   871b6:	460b      	mov	r3, r1
   871b8:	4650      	mov	r0, sl
   871ba:	4659      	mov	r1, fp
   871bc:	f7fc fe24 	bl	83e08 <__aeabi_dsub>
   871c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   871c2:	f105 0330 	add.w	r3, r5, #48	; 0x30
   871c6:	f1b9 0f01 	cmp.w	r9, #1
   871ca:	4606      	mov	r6, r0
   871cc:	460f      	mov	r7, r1
   871ce:	7013      	strb	r3, [r2, #0]
   871d0:	f102 0b01 	add.w	fp, r2, #1
   871d4:	d064      	beq.n	872a0 <_dtoa_r+0x348>
   871d6:	2200      	movs	r2, #0
   871d8:	4b18      	ldr	r3, [pc, #96]	; (8723c <_dtoa_r+0x2e4>)
   871da:	f7fc ffc9 	bl	84170 <__aeabi_dmul>
   871de:	2200      	movs	r2, #0
   871e0:	2300      	movs	r3, #0
   871e2:	4606      	mov	r6, r0
   871e4:	460f      	mov	r7, r1
   871e6:	f7fd fa2b 	bl	84640 <__aeabi_dcmpeq>
   871ea:	2800      	cmp	r0, #0
   871ec:	f040 8081 	bne.w	872f2 <_dtoa_r+0x39a>
   871f0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   871f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   871f6:	44c8      	add	r8, r9
   871f8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   871fc:	f105 0902 	add.w	r9, r5, #2
   87200:	9403      	str	r4, [sp, #12]
   87202:	e028      	b.n	87256 <_dtoa_r+0x2fe>
   87204:	f3af 8000 	nop.w
   87208:	636f4361 	.word	0x636f4361
   8720c:	3fd287a7 	.word	0x3fd287a7
   87210:	8b60c8b3 	.word	0x8b60c8b3
   87214:	3fc68a28 	.word	0x3fc68a28
   87218:	509f79fb 	.word	0x509f79fb
   8721c:	3fd34413 	.word	0x3fd34413
   87220:	7ff00000 	.word	0x7ff00000
   87224:	0008a369 	.word	0x0008a369
   87228:	0008a820 	.word	0x0008a820
   8722c:	3ff80000 	.word	0x3ff80000
   87230:	0008a830 	.word	0x0008a830
   87234:	0008a814 	.word	0x0008a814
   87238:	0008a368 	.word	0x0008a368
   8723c:	40240000 	.word	0x40240000
   87240:	f7fc ff96 	bl	84170 <__aeabi_dmul>
   87244:	2200      	movs	r2, #0
   87246:	2300      	movs	r3, #0
   87248:	4606      	mov	r6, r0
   8724a:	460f      	mov	r7, r1
   8724c:	f7fd f9f8 	bl	84640 <__aeabi_dcmpeq>
   87250:	2800      	cmp	r0, #0
   87252:	f040 83c1 	bne.w	879d8 <_dtoa_r+0xa80>
   87256:	4652      	mov	r2, sl
   87258:	465b      	mov	r3, fp
   8725a:	4630      	mov	r0, r6
   8725c:	4639      	mov	r1, r7
   8725e:	f7fd f8b1 	bl	843c4 <__aeabi_ddiv>
   87262:	f7fd fa1f 	bl	846a4 <__aeabi_d2iz>
   87266:	4605      	mov	r5, r0
   87268:	f7fc ff1c 	bl	840a4 <__aeabi_i2d>
   8726c:	4652      	mov	r2, sl
   8726e:	465b      	mov	r3, fp
   87270:	f7fc ff7e 	bl	84170 <__aeabi_dmul>
   87274:	4602      	mov	r2, r0
   87276:	460b      	mov	r3, r1
   87278:	4630      	mov	r0, r6
   8727a:	4639      	mov	r1, r7
   8727c:	f7fc fdc4 	bl	83e08 <__aeabi_dsub>
   87280:	f105 0e30 	add.w	lr, r5, #48	; 0x30
   87284:	45c1      	cmp	r9, r8
   87286:	f809 ec01 	strb.w	lr, [r9, #-1]
   8728a:	464c      	mov	r4, r9
   8728c:	4606      	mov	r6, r0
   8728e:	460f      	mov	r7, r1
   87290:	f04f 0200 	mov.w	r2, #0
   87294:	4ba7      	ldr	r3, [pc, #668]	; (87534 <_dtoa_r+0x5dc>)
   87296:	f109 0901 	add.w	r9, r9, #1
   8729a:	d1d1      	bne.n	87240 <_dtoa_r+0x2e8>
   8729c:	46a3      	mov	fp, r4
   8729e:	9c03      	ldr	r4, [sp, #12]
   872a0:	4632      	mov	r2, r6
   872a2:	463b      	mov	r3, r7
   872a4:	4630      	mov	r0, r6
   872a6:	4639      	mov	r1, r7
   872a8:	f7fc fdb0 	bl	83e0c <__adddf3>
   872ac:	4606      	mov	r6, r0
   872ae:	460f      	mov	r7, r1
   872b0:	4632      	mov	r2, r6
   872b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   872b6:	463b      	mov	r3, r7
   872b8:	f7fd f9cc 	bl	84654 <__aeabi_dcmplt>
   872bc:	b940      	cbnz	r0, 872d0 <_dtoa_r+0x378>
   872be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   872c2:	4632      	mov	r2, r6
   872c4:	463b      	mov	r3, r7
   872c6:	f7fd f9bb 	bl	84640 <__aeabi_dcmpeq>
   872ca:	b190      	cbz	r0, 872f2 <_dtoa_r+0x39a>
   872cc:	07eb      	lsls	r3, r5, #31
   872ce:	d510      	bpl.n	872f2 <_dtoa_r+0x39a>
   872d0:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
   872d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   872d6:	e005      	b.n	872e4 <_dtoa_r+0x38c>
   872d8:	429a      	cmp	r2, r3
   872da:	f000 8429 	beq.w	87b30 <_dtoa_r+0xbd8>
   872de:	f813 5c01 	ldrb.w	r5, [r3, #-1]
   872e2:	469b      	mov	fp, r3
   872e4:	2d39      	cmp	r5, #57	; 0x39
   872e6:	f10b 33ff 	add.w	r3, fp, #4294967295
   872ea:	d0f5      	beq.n	872d8 <_dtoa_r+0x380>
   872ec:	1c6a      	adds	r2, r5, #1
   872ee:	b2d2      	uxtb	r2, r2
   872f0:	701a      	strb	r2, [r3, #0]
   872f2:	4620      	mov	r0, r4
   872f4:	990a      	ldr	r1, [sp, #40]	; 0x28
   872f6:	f001 fdc7 	bl	88e88 <_Bfree>
   872fa:	9e07      	ldr	r6, [sp, #28]
   872fc:	9d26      	ldr	r5, [sp, #152]	; 0x98
   872fe:	1c73      	adds	r3, r6, #1
   87300:	9e28      	ldr	r6, [sp, #160]	; 0xa0
   87302:	2200      	movs	r2, #0
   87304:	f88b 2000 	strb.w	r2, [fp]
   87308:	602b      	str	r3, [r5, #0]
   8730a:	2e00      	cmp	r6, #0
   8730c:	f000 8325 	beq.w	8795a <_dtoa_r+0xa02>
   87310:	9809      	ldr	r0, [sp, #36]	; 0x24
   87312:	f8c6 b000 	str.w	fp, [r6]
   87316:	b01b      	add	sp, #108	; 0x6c
   87318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8731c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8731e:	2d00      	cmp	r5, #0
   87320:	f000 8103 	beq.w	8752a <_dtoa_r+0x5d2>
   87324:	9e24      	ldr	r6, [sp, #144]	; 0x90
   87326:	2e01      	cmp	r6, #1
   87328:	f340 82dc 	ble.w	878e4 <_dtoa_r+0x98c>
   8732c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   8732e:	f109 37ff 	add.w	r7, r9, #4294967295
   87332:	42be      	cmp	r6, r7
   87334:	f2c0 8389 	blt.w	87a4a <_dtoa_r+0xaf2>
   87338:	1bf7      	subs	r7, r6, r7
   8733a:	f1b9 0f00 	cmp.w	r9, #0
   8733e:	f2c0 8487 	blt.w	87c50 <_dtoa_r+0xcf8>
   87342:	9d08      	ldr	r5, [sp, #32]
   87344:	464b      	mov	r3, r9
   87346:	9e08      	ldr	r6, [sp, #32]
   87348:	4620      	mov	r0, r4
   8734a:	441e      	add	r6, r3
   8734c:	9608      	str	r6, [sp, #32]
   8734e:	9e06      	ldr	r6, [sp, #24]
   87350:	2101      	movs	r1, #1
   87352:	441e      	add	r6, r3
   87354:	9606      	str	r6, [sp, #24]
   87356:	f001 fe39 	bl	88fcc <__i2b>
   8735a:	4606      	mov	r6, r0
   8735c:	b165      	cbz	r5, 87378 <_dtoa_r+0x420>
   8735e:	9806      	ldr	r0, [sp, #24]
   87360:	2800      	cmp	r0, #0
   87362:	dd09      	ble.n	87378 <_dtoa_r+0x420>
   87364:	4603      	mov	r3, r0
   87366:	9908      	ldr	r1, [sp, #32]
   87368:	42ab      	cmp	r3, r5
   8736a:	bfa8      	it	ge
   8736c:	462b      	movge	r3, r5
   8736e:	1ac9      	subs	r1, r1, r3
   87370:	1ac0      	subs	r0, r0, r3
   87372:	9108      	str	r1, [sp, #32]
   87374:	1aed      	subs	r5, r5, r3
   87376:	9006      	str	r0, [sp, #24]
   87378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8737a:	2a00      	cmp	r2, #0
   8737c:	dd1d      	ble.n	873ba <_dtoa_r+0x462>
   8737e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87380:	2b00      	cmp	r3, #0
   87382:	f000 8358 	beq.w	87a36 <_dtoa_r+0xade>
   87386:	2f00      	cmp	r7, #0
   87388:	dd11      	ble.n	873ae <_dtoa_r+0x456>
   8738a:	4631      	mov	r1, r6
   8738c:	463a      	mov	r2, r7
   8738e:	4620      	mov	r0, r4
   87390:	f001 fec4 	bl	8911c <__pow5mult>
   87394:	4606      	mov	r6, r0
   87396:	4631      	mov	r1, r6
   87398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8739a:	4620      	mov	r0, r4
   8739c:	f001 fe20 	bl	88fe0 <__multiply>
   873a0:	990a      	ldr	r1, [sp, #40]	; 0x28
   873a2:	4680      	mov	r8, r0
   873a4:	4620      	mov	r0, r4
   873a6:	f001 fd6f 	bl	88e88 <_Bfree>
   873aa:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   873ae:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
   873b2:	ebbe 0207 	subs.w	r2, lr, r7
   873b6:	f040 828f 	bne.w	878d8 <_dtoa_r+0x980>
   873ba:	4620      	mov	r0, r4
   873bc:	2101      	movs	r1, #1
   873be:	f001 fe05 	bl	88fcc <__i2b>
   873c2:	4680      	mov	r8, r0
   873c4:	980d      	ldr	r0, [sp, #52]	; 0x34
   873c6:	2800      	cmp	r0, #0
   873c8:	dd05      	ble.n	873d6 <_dtoa_r+0x47e>
   873ca:	4641      	mov	r1, r8
   873cc:	4620      	mov	r0, r4
   873ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   873d0:	f001 fea4 	bl	8911c <__pow5mult>
   873d4:	4680      	mov	r8, r0
   873d6:	9924      	ldr	r1, [sp, #144]	; 0x90
   873d8:	2901      	cmp	r1, #1
   873da:	f340 82c1 	ble.w	87960 <_dtoa_r+0xa08>
   873de:	2700      	movs	r7, #0
   873e0:	980d      	ldr	r0, [sp, #52]	; 0x34
   873e2:	2800      	cmp	r0, #0
   873e4:	f040 82af 	bne.w	87946 <_dtoa_r+0x9ee>
   873e8:	2001      	movs	r0, #1
   873ea:	9b06      	ldr	r3, [sp, #24]
   873ec:	4403      	add	r3, r0
   873ee:	f013 031f 	ands.w	r3, r3, #31
   873f2:	f000 80a1 	beq.w	87538 <_dtoa_r+0x5e0>
   873f6:	f1c3 0220 	rsb	r2, r3, #32
   873fa:	2a04      	cmp	r2, #4
   873fc:	f340 84b7 	ble.w	87d6e <_dtoa_r+0xe16>
   87400:	9908      	ldr	r1, [sp, #32]
   87402:	9a06      	ldr	r2, [sp, #24]
   87404:	f1c3 031c 	rsb	r3, r3, #28
   87408:	4419      	add	r1, r3
   8740a:	441a      	add	r2, r3
   8740c:	9108      	str	r1, [sp, #32]
   8740e:	441d      	add	r5, r3
   87410:	9206      	str	r2, [sp, #24]
   87412:	9908      	ldr	r1, [sp, #32]
   87414:	2900      	cmp	r1, #0
   87416:	dd05      	ble.n	87424 <_dtoa_r+0x4cc>
   87418:	990a      	ldr	r1, [sp, #40]	; 0x28
   8741a:	9a08      	ldr	r2, [sp, #32]
   8741c:	4620      	mov	r0, r4
   8741e:	f001 fecb 	bl	891b8 <__lshift>
   87422:	900a      	str	r0, [sp, #40]	; 0x28
   87424:	9a06      	ldr	r2, [sp, #24]
   87426:	2a00      	cmp	r2, #0
   87428:	dd04      	ble.n	87434 <_dtoa_r+0x4dc>
   8742a:	4641      	mov	r1, r8
   8742c:	4620      	mov	r0, r4
   8742e:	f001 fec3 	bl	891b8 <__lshift>
   87432:	4680      	mov	r8, r0
   87434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87436:	2b00      	cmp	r3, #0
   87438:	f040 826a 	bne.w	87910 <_dtoa_r+0x9b8>
   8743c:	f1b9 0f00 	cmp.w	r9, #0
   87440:	f340 82a6 	ble.w	87990 <_dtoa_r+0xa38>
   87444:	980b      	ldr	r0, [sp, #44]	; 0x2c
   87446:	2800      	cmp	r0, #0
   87448:	f040 8088 	bne.w	8755c <_dtoa_r+0x604>
   8744c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8744e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   87450:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   87454:	e006      	b.n	87464 <_dtoa_r+0x50c>
   87456:	4639      	mov	r1, r7
   87458:	4620      	mov	r0, r4
   8745a:	220a      	movs	r2, #10
   8745c:	2300      	movs	r3, #0
   8745e:	f001 fd1d 	bl	88e9c <__multadd>
   87462:	4607      	mov	r7, r0
   87464:	4638      	mov	r0, r7
   87466:	4641      	mov	r1, r8
   87468:	f7ff fcdc 	bl	86e24 <quorem>
   8746c:	3030      	adds	r0, #48	; 0x30
   8746e:	f80b 0005 	strb.w	r0, [fp, r5]
   87472:	3501      	adds	r5, #1
   87474:	45a9      	cmp	r9, r5
   87476:	dcee      	bgt.n	87456 <_dtoa_r+0x4fe>
   87478:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   8747c:	4682      	mov	sl, r0
   8747e:	970a      	str	r7, [sp, #40]	; 0x28
   87480:	f1b9 0f01 	cmp.w	r9, #1
   87484:	bfac      	ite	ge
   87486:	44cb      	addge	fp, r9
   87488:	f10b 0b01 	addlt.w	fp, fp, #1
   8748c:	2500      	movs	r5, #0
   8748e:	990a      	ldr	r1, [sp, #40]	; 0x28
   87490:	2201      	movs	r2, #1
   87492:	4620      	mov	r0, r4
   87494:	f001 fe90 	bl	891b8 <__lshift>
   87498:	4641      	mov	r1, r8
   8749a:	900a      	str	r0, [sp, #40]	; 0x28
   8749c:	f001 feea 	bl	89274 <__mcmp>
   874a0:	2800      	cmp	r0, #0
   874a2:	f340 8309 	ble.w	87ab8 <_dtoa_r+0xb60>
   874a6:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   874aa:	9909      	ldr	r1, [sp, #36]	; 0x24
   874ac:	e005      	b.n	874ba <_dtoa_r+0x562>
   874ae:	4299      	cmp	r1, r3
   874b0:	f000 828b 	beq.w	879ca <_dtoa_r+0xa72>
   874b4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   874b8:	469b      	mov	fp, r3
   874ba:	2a39      	cmp	r2, #57	; 0x39
   874bc:	f10b 33ff 	add.w	r3, fp, #4294967295
   874c0:	d0f5      	beq.n	874ae <_dtoa_r+0x556>
   874c2:	3201      	adds	r2, #1
   874c4:	701a      	strb	r2, [r3, #0]
   874c6:	4641      	mov	r1, r8
   874c8:	4620      	mov	r0, r4
   874ca:	f001 fcdd 	bl	88e88 <_Bfree>
   874ce:	2e00      	cmp	r6, #0
   874d0:	f43f af0f 	beq.w	872f2 <_dtoa_r+0x39a>
   874d4:	b12d      	cbz	r5, 874e2 <_dtoa_r+0x58a>
   874d6:	42b5      	cmp	r5, r6
   874d8:	d003      	beq.n	874e2 <_dtoa_r+0x58a>
   874da:	4629      	mov	r1, r5
   874dc:	4620      	mov	r0, r4
   874de:	f001 fcd3 	bl	88e88 <_Bfree>
   874e2:	4631      	mov	r1, r6
   874e4:	4620      	mov	r0, r4
   874e6:	f001 fccf 	bl	88e88 <_Bfree>
   874ea:	e702      	b.n	872f2 <_dtoa_r+0x39a>
   874ec:	2601      	movs	r6, #1
   874ee:	960e      	str	r6, [sp, #56]	; 0x38
   874f0:	e5ea      	b.n	870c8 <_dtoa_r+0x170>
   874f2:	9807      	ldr	r0, [sp, #28]
   874f4:	f7fc fdd6 	bl	840a4 <__aeabi_i2d>
   874f8:	4632      	mov	r2, r6
   874fa:	463b      	mov	r3, r7
   874fc:	f7fd f8a0 	bl	84640 <__aeabi_dcmpeq>
   87500:	2800      	cmp	r0, #0
   87502:	f47f adcd 	bne.w	870a0 <_dtoa_r+0x148>
   87506:	9e07      	ldr	r6, [sp, #28]
   87508:	3e01      	subs	r6, #1
   8750a:	9607      	str	r6, [sp, #28]
   8750c:	e5c8      	b.n	870a0 <_dtoa_r+0x148>
   8750e:	9e07      	ldr	r6, [sp, #28]
   87510:	9d08      	ldr	r5, [sp, #32]
   87512:	1bad      	subs	r5, r5, r6
   87514:	9508      	str	r5, [sp, #32]
   87516:	4275      	negs	r5, r6
   87518:	2600      	movs	r6, #0
   8751a:	950c      	str	r5, [sp, #48]	; 0x30
   8751c:	960d      	str	r6, [sp, #52]	; 0x34
   8751e:	e5e5      	b.n	870ec <_dtoa_r+0x194>
   87520:	426d      	negs	r5, r5
   87522:	2600      	movs	r6, #0
   87524:	9508      	str	r5, [sp, #32]
   87526:	9606      	str	r6, [sp, #24]
   87528:	e5d6      	b.n	870d8 <_dtoa_r+0x180>
   8752a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8752c:	9d08      	ldr	r5, [sp, #32]
   8752e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   87530:	e714      	b.n	8735c <_dtoa_r+0x404>
   87532:	bf00      	nop
   87534:	40240000 	.word	0x40240000
   87538:	231c      	movs	r3, #28
   8753a:	f8dd e020 	ldr.w	lr, [sp, #32]
   8753e:	9806      	ldr	r0, [sp, #24]
   87540:	449e      	add	lr, r3
   87542:	4418      	add	r0, r3
   87544:	f8cd e020 	str.w	lr, [sp, #32]
   87548:	441d      	add	r5, r3
   8754a:	9006      	str	r0, [sp, #24]
   8754c:	e761      	b.n	87412 <_dtoa_r+0x4ba>
   8754e:	48a7      	ldr	r0, [pc, #668]	; (877ec <_dtoa_r+0x894>)
   87550:	1b40      	subs	r0, r0, r5
   87552:	fa0a f000 	lsl.w	r0, sl, r0
   87556:	e56f      	b.n	87038 <_dtoa_r+0xe0>
   87558:	900e      	str	r0, [sp, #56]	; 0x38
   8755a:	e5b5      	b.n	870c8 <_dtoa_r+0x170>
   8755c:	2d00      	cmp	r5, #0
   8755e:	dd05      	ble.n	8756c <_dtoa_r+0x614>
   87560:	4631      	mov	r1, r6
   87562:	462a      	mov	r2, r5
   87564:	4620      	mov	r0, r4
   87566:	f001 fe27 	bl	891b8 <__lshift>
   8756a:	4606      	mov	r6, r0
   8756c:	2f00      	cmp	r7, #0
   8756e:	f040 82e9 	bne.w	87b44 <_dtoa_r+0xbec>
   87572:	4637      	mov	r7, r6
   87574:	9d09      	ldr	r5, [sp, #36]	; 0x24
   87576:	9809      	ldr	r0, [sp, #36]	; 0x24
   87578:	444d      	add	r5, r9
   8757a:	9508      	str	r5, [sp, #32]
   8757c:	f00a 0501 	and.w	r5, sl, #1
   87580:	950b      	str	r5, [sp, #44]	; 0x2c
   87582:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   87586:	1c45      	adds	r5, r0, #1
   87588:	e00a      	b.n	875a0 <_dtoa_r+0x648>
   8758a:	f001 fc87 	bl	88e9c <__multadd>
   8758e:	4639      	mov	r1, r7
   87590:	4606      	mov	r6, r0
   87592:	220a      	movs	r2, #10
   87594:	4620      	mov	r0, r4
   87596:	2300      	movs	r3, #0
   87598:	f001 fc80 	bl	88e9c <__multadd>
   8759c:	4607      	mov	r7, r0
   8759e:	3501      	adds	r5, #1
   875a0:	4641      	mov	r1, r8
   875a2:	4648      	mov	r0, r9
   875a4:	f7ff fc3e 	bl	86e24 <quorem>
   875a8:	4631      	mov	r1, r6
   875aa:	4683      	mov	fp, r0
   875ac:	4648      	mov	r0, r9
   875ae:	f001 fe61 	bl	89274 <__mcmp>
   875b2:	4641      	mov	r1, r8
   875b4:	9003      	str	r0, [sp, #12]
   875b6:	463a      	mov	r2, r7
   875b8:	4620      	mov	r0, r4
   875ba:	f001 fe7f 	bl	892bc <__mdiff>
   875be:	68c2      	ldr	r2, [r0, #12]
   875c0:	1e69      	subs	r1, r5, #1
   875c2:	4603      	mov	r3, r0
   875c4:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
   875c8:	9106      	str	r1, [sp, #24]
   875ca:	2a00      	cmp	r2, #0
   875cc:	f040 8193 	bne.w	878f6 <_dtoa_r+0x99e>
   875d0:	4619      	mov	r1, r3
   875d2:	4648      	mov	r0, r9
   875d4:	9302      	str	r3, [sp, #8]
   875d6:	f001 fe4d 	bl	89274 <__mcmp>
   875da:	9b02      	ldr	r3, [sp, #8]
   875dc:	4602      	mov	r2, r0
   875de:	4619      	mov	r1, r3
   875e0:	4620      	mov	r0, r4
   875e2:	9202      	str	r2, [sp, #8]
   875e4:	f001 fc50 	bl	88e88 <_Bfree>
   875e8:	9a02      	ldr	r2, [sp, #8]
   875ea:	b92a      	cbnz	r2, 875f8 <_dtoa_r+0x6a0>
   875ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   875ee:	b91b      	cbnz	r3, 875f8 <_dtoa_r+0x6a0>
   875f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   875f2:	2800      	cmp	r0, #0
   875f4:	f000 8393 	beq.w	87d1e <_dtoa_r+0xdc6>
   875f8:	9b03      	ldr	r3, [sp, #12]
   875fa:	2b00      	cmp	r3, #0
   875fc:	f2c0 8234 	blt.w	87a68 <_dtoa_r+0xb10>
   87600:	d105      	bne.n	8760e <_dtoa_r+0x6b6>
   87602:	9824      	ldr	r0, [sp, #144]	; 0x90
   87604:	b918      	cbnz	r0, 8760e <_dtoa_r+0x6b6>
   87606:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87608:	2900      	cmp	r1, #0
   8760a:	f000 822d 	beq.w	87a68 <_dtoa_r+0xb10>
   8760e:	2a00      	cmp	r2, #0
   87610:	f300 82ac 	bgt.w	87b6c <_dtoa_r+0xc14>
   87614:	f8dd e020 	ldr.w	lr, [sp, #32]
   87618:	f805 ac01 	strb.w	sl, [r5, #-1]
   8761c:	4575      	cmp	r5, lr
   8761e:	46ab      	mov	fp, r5
   87620:	f000 82b4 	beq.w	87b8c <_dtoa_r+0xc34>
   87624:	4649      	mov	r1, r9
   87626:	220a      	movs	r2, #10
   87628:	2300      	movs	r3, #0
   8762a:	4620      	mov	r0, r4
   8762c:	f001 fc36 	bl	88e9c <__multadd>
   87630:	42be      	cmp	r6, r7
   87632:	4681      	mov	r9, r0
   87634:	4631      	mov	r1, r6
   87636:	4620      	mov	r0, r4
   87638:	f04f 020a 	mov.w	r2, #10
   8763c:	f04f 0300 	mov.w	r3, #0
   87640:	d1a3      	bne.n	8758a <_dtoa_r+0x632>
   87642:	f001 fc2b 	bl	88e9c <__multadd>
   87646:	4606      	mov	r6, r0
   87648:	4607      	mov	r7, r0
   8764a:	e7a8      	b.n	8759e <_dtoa_r+0x646>
   8764c:	2600      	movs	r6, #0
   8764e:	960b      	str	r6, [sp, #44]	; 0x2c
   87650:	9e07      	ldr	r6, [sp, #28]
   87652:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
   87656:	44b6      	add	lr, r6
   87658:	f10e 0901 	add.w	r9, lr, #1
   8765c:	f1b9 0f00 	cmp.w	r9, #0
   87660:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
   87664:	464e      	mov	r6, r9
   87666:	f340 8150 	ble.w	8790a <_dtoa_r+0x9b2>
   8766a:	2100      	movs	r1, #0
   8766c:	2e17      	cmp	r6, #23
   8766e:	6461      	str	r1, [r4, #68]	; 0x44
   87670:	d90a      	bls.n	87688 <_dtoa_r+0x730>
   87672:	2201      	movs	r2, #1
   87674:	2304      	movs	r3, #4
   87676:	005b      	lsls	r3, r3, #1
   87678:	f103 0014 	add.w	r0, r3, #20
   8767c:	42b0      	cmp	r0, r6
   8767e:	4611      	mov	r1, r2
   87680:	f102 0201 	add.w	r2, r2, #1
   87684:	d9f7      	bls.n	87676 <_dtoa_r+0x71e>
   87686:	6461      	str	r1, [r4, #68]	; 0x44
   87688:	4620      	mov	r0, r4
   8768a:	f001 fbd7 	bl	88e3c <_Balloc>
   8768e:	2e0e      	cmp	r6, #14
   87690:	9009      	str	r0, [sp, #36]	; 0x24
   87692:	6420      	str	r0, [r4, #64]	; 0x40
   87694:	f63f ad6c 	bhi.w	87170 <_dtoa_r+0x218>
   87698:	2d00      	cmp	r5, #0
   8769a:	f43f ad69 	beq.w	87170 <_dtoa_r+0x218>
   8769e:	9d07      	ldr	r5, [sp, #28]
   876a0:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
   876a4:	2d00      	cmp	r5, #0
   876a6:	f340 821c 	ble.w	87ae2 <_dtoa_r+0xb8a>
   876aa:	4b51      	ldr	r3, [pc, #324]	; (877f0 <_dtoa_r+0x898>)
   876ac:	f005 020f 	and.w	r2, r5, #15
   876b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   876b4:	112d      	asrs	r5, r5, #4
   876b6:	e9d3 6700 	ldrd	r6, r7, [r3]
   876ba:	06eb      	lsls	r3, r5, #27
   876bc:	f140 81cd 	bpl.w	87a5a <_dtoa_r+0xb02>
   876c0:	4b4c      	ldr	r3, [pc, #304]	; (877f4 <_dtoa_r+0x89c>)
   876c2:	4650      	mov	r0, sl
   876c4:	4659      	mov	r1, fp
   876c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   876ca:	f7fc fe7b 	bl	843c4 <__aeabi_ddiv>
   876ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   876d2:	f005 050f 	and.w	r5, r5, #15
   876d6:	f04f 0803 	mov.w	r8, #3
   876da:	b18d      	cbz	r5, 87700 <_dtoa_r+0x7a8>
   876dc:	f8df a114 	ldr.w	sl, [pc, #276]	; 877f4 <_dtoa_r+0x89c>
   876e0:	4630      	mov	r0, r6
   876e2:	4639      	mov	r1, r7
   876e4:	07ee      	lsls	r6, r5, #31
   876e6:	d505      	bpl.n	876f4 <_dtoa_r+0x79c>
   876e8:	e9da 2300 	ldrd	r2, r3, [sl]
   876ec:	f108 0801 	add.w	r8, r8, #1
   876f0:	f7fc fd3e 	bl	84170 <__aeabi_dmul>
   876f4:	106d      	asrs	r5, r5, #1
   876f6:	f10a 0a08 	add.w	sl, sl, #8
   876fa:	d1f3      	bne.n	876e4 <_dtoa_r+0x78c>
   876fc:	4606      	mov	r6, r0
   876fe:	460f      	mov	r7, r1
   87700:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87704:	4632      	mov	r2, r6
   87706:	463b      	mov	r3, r7
   87708:	f7fc fe5c 	bl	843c4 <__aeabi_ddiv>
   8770c:	4682      	mov	sl, r0
   8770e:	468b      	mov	fp, r1
   87710:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   87712:	b145      	cbz	r5, 87726 <_dtoa_r+0x7ce>
   87714:	4650      	mov	r0, sl
   87716:	4659      	mov	r1, fp
   87718:	2200      	movs	r2, #0
   8771a:	4b37      	ldr	r3, [pc, #220]	; (877f8 <_dtoa_r+0x8a0>)
   8771c:	f7fc ff9a 	bl	84654 <__aeabi_dcmplt>
   87720:	2800      	cmp	r0, #0
   87722:	f040 82aa 	bne.w	87c7a <_dtoa_r+0xd22>
   87726:	4640      	mov	r0, r8
   87728:	f7fc fcbc 	bl	840a4 <__aeabi_i2d>
   8772c:	4652      	mov	r2, sl
   8772e:	465b      	mov	r3, fp
   87730:	f7fc fd1e 	bl	84170 <__aeabi_dmul>
   87734:	2200      	movs	r2, #0
   87736:	4b31      	ldr	r3, [pc, #196]	; (877fc <_dtoa_r+0x8a4>)
   87738:	f7fc fb68 	bl	83e0c <__adddf3>
   8773c:	4606      	mov	r6, r0
   8773e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   87742:	f1b9 0f00 	cmp.w	r9, #0
   87746:	f000 815a 	beq.w	879fe <_dtoa_r+0xaa6>
   8774a:	9d07      	ldr	r5, [sp, #28]
   8774c:	46c8      	mov	r8, r9
   8774e:	9517      	str	r5, [sp, #92]	; 0x5c
   87750:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   87752:	2d00      	cmp	r5, #0
   87754:	f000 8223 	beq.w	87b9e <_dtoa_r+0xc46>
   87758:	4b25      	ldr	r3, [pc, #148]	; (877f0 <_dtoa_r+0x898>)
   8775a:	2000      	movs	r0, #0
   8775c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   87760:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   87764:	4926      	ldr	r1, [pc, #152]	; (87800 <_dtoa_r+0x8a8>)
   87766:	f7fc fe2d 	bl	843c4 <__aeabi_ddiv>
   8776a:	4632      	mov	r2, r6
   8776c:	463b      	mov	r3, r7
   8776e:	f7fc fb4b 	bl	83e08 <__aeabi_dsub>
   87772:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87776:	4659      	mov	r1, fp
   87778:	4650      	mov	r0, sl
   8777a:	f7fc ff93 	bl	846a4 <__aeabi_d2iz>
   8777e:	4605      	mov	r5, r0
   87780:	f7fc fc90 	bl	840a4 <__aeabi_i2d>
   87784:	4602      	mov	r2, r0
   87786:	460b      	mov	r3, r1
   87788:	4650      	mov	r0, sl
   8778a:	4659      	mov	r1, fp
   8778c:	f7fc fb3c 	bl	83e08 <__aeabi_dsub>
   87790:	3530      	adds	r5, #48	; 0x30
   87792:	9e09      	ldr	r6, [sp, #36]	; 0x24
   87794:	e9cd 0104 	strd	r0, r1, [sp, #16]
   87798:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8779c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   877a0:	b2ed      	uxtb	r5, r5
   877a2:	7035      	strb	r5, [r6, #0]
   877a4:	f106 0b01 	add.w	fp, r6, #1
   877a8:	f7fc ff72 	bl	84690 <__aeabi_dcmpgt>
   877ac:	2800      	cmp	r0, #0
   877ae:	f040 82ab 	bne.w	87d08 <_dtoa_r+0xdb0>
   877b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   877b6:	2000      	movs	r0, #0
   877b8:	490f      	ldr	r1, [pc, #60]	; (877f8 <_dtoa_r+0x8a0>)
   877ba:	f7fc fb25 	bl	83e08 <__aeabi_dsub>
   877be:	4602      	mov	r2, r0
   877c0:	460b      	mov	r3, r1
   877c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   877c6:	f7fc ff63 	bl	84690 <__aeabi_dcmpgt>
   877ca:	2800      	cmp	r0, #0
   877cc:	f040 82a2 	bne.w	87d14 <_dtoa_r+0xdbc>
   877d0:	f1b8 0f01 	cmp.w	r8, #1
   877d4:	f340 8181 	ble.w	87ada <_dtoa_r+0xb82>
   877d8:	44b0      	add	r8, r6
   877da:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
   877de:	46a2      	mov	sl, r4
   877e0:	46c1      	mov	r9, r8
   877e2:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   877e6:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
   877ea:	e019      	b.n	87820 <_dtoa_r+0x8c8>
   877ec:	fffffbee 	.word	0xfffffbee
   877f0:	0008a830 	.word	0x0008a830
   877f4:	0008a8f8 	.word	0x0008a8f8
   877f8:	3ff00000 	.word	0x3ff00000
   877fc:	401c0000 	.word	0x401c0000
   87800:	3fe00000 	.word	0x3fe00000
   87804:	2000      	movs	r0, #0
   87806:	49a8      	ldr	r1, [pc, #672]	; (87aa8 <_dtoa_r+0xb50>)
   87808:	f7fc fafe 	bl	83e08 <__aeabi_dsub>
   8780c:	4622      	mov	r2, r4
   8780e:	462b      	mov	r3, r5
   87810:	f7fc ff20 	bl	84654 <__aeabi_dcmplt>
   87814:	2800      	cmp	r0, #0
   87816:	f040 827b 	bne.w	87d10 <_dtoa_r+0xdb8>
   8781a:	45cb      	cmp	fp, r9
   8781c:	f000 815a 	beq.w	87ad4 <_dtoa_r+0xb7c>
   87820:	4620      	mov	r0, r4
   87822:	4629      	mov	r1, r5
   87824:	2200      	movs	r2, #0
   87826:	4ba1      	ldr	r3, [pc, #644]	; (87aac <_dtoa_r+0xb54>)
   87828:	f7fc fca2 	bl	84170 <__aeabi_dmul>
   8782c:	2200      	movs	r2, #0
   8782e:	4b9f      	ldr	r3, [pc, #636]	; (87aac <_dtoa_r+0xb54>)
   87830:	4604      	mov	r4, r0
   87832:	460d      	mov	r5, r1
   87834:	4630      	mov	r0, r6
   87836:	4639      	mov	r1, r7
   87838:	f7fc fc9a 	bl	84170 <__aeabi_dmul>
   8783c:	460f      	mov	r7, r1
   8783e:	4606      	mov	r6, r0
   87840:	f7fc ff30 	bl	846a4 <__aeabi_d2iz>
   87844:	4680      	mov	r8, r0
   87846:	f7fc fc2d 	bl	840a4 <__aeabi_i2d>
   8784a:	4602      	mov	r2, r0
   8784c:	460b      	mov	r3, r1
   8784e:	4630      	mov	r0, r6
   87850:	4639      	mov	r1, r7
   87852:	f7fc fad9 	bl	83e08 <__aeabi_dsub>
   87856:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8785a:	fa5f f888 	uxtb.w	r8, r8
   8785e:	4622      	mov	r2, r4
   87860:	462b      	mov	r3, r5
   87862:	f80b 8b01 	strb.w	r8, [fp], #1
   87866:	4606      	mov	r6, r0
   87868:	460f      	mov	r7, r1
   8786a:	f7fc fef3 	bl	84654 <__aeabi_dcmplt>
   8786e:	4632      	mov	r2, r6
   87870:	463b      	mov	r3, r7
   87872:	2800      	cmp	r0, #0
   87874:	d0c6      	beq.n	87804 <_dtoa_r+0x8ac>
   87876:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   87878:	4654      	mov	r4, sl
   8787a:	9607      	str	r6, [sp, #28]
   8787c:	e539      	b.n	872f2 <_dtoa_r+0x39a>
   8787e:	2600      	movs	r6, #0
   87880:	960b      	str	r6, [sp, #44]	; 0x2c
   87882:	9825      	ldr	r0, [sp, #148]	; 0x94
   87884:	2800      	cmp	r0, #0
   87886:	dd3c      	ble.n	87902 <_dtoa_r+0x9aa>
   87888:	4606      	mov	r6, r0
   8788a:	900f      	str	r0, [sp, #60]	; 0x3c
   8788c:	4681      	mov	r9, r0
   8788e:	e6ec      	b.n	8766a <_dtoa_r+0x712>
   87890:	2601      	movs	r6, #1
   87892:	960b      	str	r6, [sp, #44]	; 0x2c
   87894:	e7f5      	b.n	87882 <_dtoa_r+0x92a>
   87896:	f1b9 0f00 	cmp.w	r9, #0
   8789a:	f73f ac7c 	bgt.w	87196 <_dtoa_r+0x23e>
   8789e:	f040 80c6 	bne.w	87a2e <_dtoa_r+0xad6>
   878a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   878a6:	2200      	movs	r2, #0
   878a8:	4b81      	ldr	r3, [pc, #516]	; (87ab0 <_dtoa_r+0xb58>)
   878aa:	f7fc fc61 	bl	84170 <__aeabi_dmul>
   878ae:	4652      	mov	r2, sl
   878b0:	465b      	mov	r3, fp
   878b2:	f7fc fee3 	bl	8467c <__aeabi_dcmpge>
   878b6:	46c8      	mov	r8, r9
   878b8:	464e      	mov	r6, r9
   878ba:	2800      	cmp	r0, #0
   878bc:	d07c      	beq.n	879b8 <_dtoa_r+0xa60>
   878be:	9d25      	ldr	r5, [sp, #148]	; 0x94
   878c0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   878c4:	43ed      	mvns	r5, r5
   878c6:	9507      	str	r5, [sp, #28]
   878c8:	4641      	mov	r1, r8
   878ca:	4620      	mov	r0, r4
   878cc:	f001 fadc 	bl	88e88 <_Bfree>
   878d0:	2e00      	cmp	r6, #0
   878d2:	f47f ae06 	bne.w	874e2 <_dtoa_r+0x58a>
   878d6:	e50c      	b.n	872f2 <_dtoa_r+0x39a>
   878d8:	990a      	ldr	r1, [sp, #40]	; 0x28
   878da:	4620      	mov	r0, r4
   878dc:	f001 fc1e 	bl	8911c <__pow5mult>
   878e0:	900a      	str	r0, [sp, #40]	; 0x28
   878e2:	e56a      	b.n	873ba <_dtoa_r+0x462>
   878e4:	9d16      	ldr	r5, [sp, #88]	; 0x58
   878e6:	2d00      	cmp	r5, #0
   878e8:	f000 81b8 	beq.w	87c5c <_dtoa_r+0xd04>
   878ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
   878f0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   878f2:	9d08      	ldr	r5, [sp, #32]
   878f4:	e527      	b.n	87346 <_dtoa_r+0x3ee>
   878f6:	4601      	mov	r1, r0
   878f8:	4620      	mov	r0, r4
   878fa:	f001 fac5 	bl	88e88 <_Bfree>
   878fe:	2201      	movs	r2, #1
   87900:	e67a      	b.n	875f8 <_dtoa_r+0x6a0>
   87902:	2601      	movs	r6, #1
   87904:	9625      	str	r6, [sp, #148]	; 0x94
   87906:	960f      	str	r6, [sp, #60]	; 0x3c
   87908:	46b1      	mov	r9, r6
   8790a:	2100      	movs	r1, #0
   8790c:	6461      	str	r1, [r4, #68]	; 0x44
   8790e:	e6bb      	b.n	87688 <_dtoa_r+0x730>
   87910:	980a      	ldr	r0, [sp, #40]	; 0x28
   87912:	4641      	mov	r1, r8
   87914:	f001 fcae 	bl	89274 <__mcmp>
   87918:	2800      	cmp	r0, #0
   8791a:	f6bf ad8f 	bge.w	8743c <_dtoa_r+0x4e4>
   8791e:	f8dd e01c 	ldr.w	lr, [sp, #28]
   87922:	990a      	ldr	r1, [sp, #40]	; 0x28
   87924:	f10e 3eff 	add.w	lr, lr, #4294967295
   87928:	4620      	mov	r0, r4
   8792a:	220a      	movs	r2, #10
   8792c:	2300      	movs	r3, #0
   8792e:	f8cd e01c 	str.w	lr, [sp, #28]
   87932:	f001 fab3 	bl	88e9c <__multadd>
   87936:	900a      	str	r0, [sp, #40]	; 0x28
   87938:	980b      	ldr	r0, [sp, #44]	; 0x2c
   8793a:	2800      	cmp	r0, #0
   8793c:	f040 8209 	bne.w	87d52 <_dtoa_r+0xdfa>
   87940:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   87944:	e57a      	b.n	8743c <_dtoa_r+0x4e4>
   87946:	f8d8 3010 	ldr.w	r3, [r8, #16]
   8794a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8794e:	6918      	ldr	r0, [r3, #16]
   87950:	f001 faee 	bl	88f30 <__hi0bits>
   87954:	f1c0 0020 	rsb	r0, r0, #32
   87958:	e547      	b.n	873ea <_dtoa_r+0x492>
   8795a:	9809      	ldr	r0, [sp, #36]	; 0x24
   8795c:	f7ff bb2c 	b.w	86fb8 <_dtoa_r+0x60>
   87960:	f1ba 0f00 	cmp.w	sl, #0
   87964:	f47f ad3b 	bne.w	873de <_dtoa_r+0x486>
   87968:	f3cb 0313 	ubfx	r3, fp, #0, #20
   8796c:	2b00      	cmp	r3, #0
   8796e:	f040 817c 	bne.w	87c6a <_dtoa_r+0xd12>
   87972:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   87976:	0d3f      	lsrs	r7, r7, #20
   87978:	053f      	lsls	r7, r7, #20
   8797a:	2f00      	cmp	r7, #0
   8797c:	f43f ad30 	beq.w	873e0 <_dtoa_r+0x488>
   87980:	9a08      	ldr	r2, [sp, #32]
   87982:	9b06      	ldr	r3, [sp, #24]
   87984:	3201      	adds	r2, #1
   87986:	3301      	adds	r3, #1
   87988:	9208      	str	r2, [sp, #32]
   8798a:	9306      	str	r3, [sp, #24]
   8798c:	2701      	movs	r7, #1
   8798e:	e527      	b.n	873e0 <_dtoa_r+0x488>
   87990:	9924      	ldr	r1, [sp, #144]	; 0x90
   87992:	2902      	cmp	r1, #2
   87994:	f77f ad56 	ble.w	87444 <_dtoa_r+0x4ec>
   87998:	f1b9 0f00 	cmp.w	r9, #0
   8799c:	d18f      	bne.n	878be <_dtoa_r+0x966>
   8799e:	4641      	mov	r1, r8
   879a0:	464b      	mov	r3, r9
   879a2:	2205      	movs	r2, #5
   879a4:	4620      	mov	r0, r4
   879a6:	f001 fa79 	bl	88e9c <__multadd>
   879aa:	4680      	mov	r8, r0
   879ac:	4641      	mov	r1, r8
   879ae:	980a      	ldr	r0, [sp, #40]	; 0x28
   879b0:	f001 fc60 	bl	89274 <__mcmp>
   879b4:	2800      	cmp	r0, #0
   879b6:	dd82      	ble.n	878be <_dtoa_r+0x966>
   879b8:	9d07      	ldr	r5, [sp, #28]
   879ba:	2331      	movs	r3, #49	; 0x31
   879bc:	3501      	adds	r5, #1
   879be:	9507      	str	r5, [sp, #28]
   879c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   879c2:	702b      	strb	r3, [r5, #0]
   879c4:	f105 0b01 	add.w	fp, r5, #1
   879c8:	e77e      	b.n	878c8 <_dtoa_r+0x970>
   879ca:	9807      	ldr	r0, [sp, #28]
   879cc:	9909      	ldr	r1, [sp, #36]	; 0x24
   879ce:	2331      	movs	r3, #49	; 0x31
   879d0:	3001      	adds	r0, #1
   879d2:	9007      	str	r0, [sp, #28]
   879d4:	700b      	strb	r3, [r1, #0]
   879d6:	e576      	b.n	874c6 <_dtoa_r+0x56e>
   879d8:	46a3      	mov	fp, r4
   879da:	9c03      	ldr	r4, [sp, #12]
   879dc:	e489      	b.n	872f2 <_dtoa_r+0x39a>
   879de:	4640      	mov	r0, r8
   879e0:	f7fc fb60 	bl	840a4 <__aeabi_i2d>
   879e4:	4602      	mov	r2, r0
   879e6:	460b      	mov	r3, r1
   879e8:	4650      	mov	r0, sl
   879ea:	4659      	mov	r1, fp
   879ec:	f7fc fbc0 	bl	84170 <__aeabi_dmul>
   879f0:	2200      	movs	r2, #0
   879f2:	4b30      	ldr	r3, [pc, #192]	; (87ab4 <_dtoa_r+0xb5c>)
   879f4:	f7fc fa0a 	bl	83e0c <__adddf3>
   879f8:	4606      	mov	r6, r0
   879fa:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   879fe:	4650      	mov	r0, sl
   87a00:	4659      	mov	r1, fp
   87a02:	2200      	movs	r2, #0
   87a04:	4b2a      	ldr	r3, [pc, #168]	; (87ab0 <_dtoa_r+0xb58>)
   87a06:	f7fc f9ff 	bl	83e08 <__aeabi_dsub>
   87a0a:	4632      	mov	r2, r6
   87a0c:	463b      	mov	r3, r7
   87a0e:	4682      	mov	sl, r0
   87a10:	468b      	mov	fp, r1
   87a12:	f7fc fe3d 	bl	84690 <__aeabi_dcmpgt>
   87a16:	2800      	cmp	r0, #0
   87a18:	f040 80bd 	bne.w	87b96 <_dtoa_r+0xc3e>
   87a1c:	4632      	mov	r2, r6
   87a1e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   87a22:	4650      	mov	r0, sl
   87a24:	4659      	mov	r1, fp
   87a26:	f7fc fe15 	bl	84654 <__aeabi_dcmplt>
   87a2a:	2800      	cmp	r0, #0
   87a2c:	d055      	beq.n	87ada <_dtoa_r+0xb82>
   87a2e:	f04f 0800 	mov.w	r8, #0
   87a32:	4646      	mov	r6, r8
   87a34:	e743      	b.n	878be <_dtoa_r+0x966>
   87a36:	990a      	ldr	r1, [sp, #40]	; 0x28
   87a38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87a3a:	4620      	mov	r0, r4
   87a3c:	f001 fb6e 	bl	8911c <__pow5mult>
   87a40:	900a      	str	r0, [sp, #40]	; 0x28
   87a42:	e4ba      	b.n	873ba <_dtoa_r+0x462>
   87a44:	2601      	movs	r6, #1
   87a46:	960b      	str	r6, [sp, #44]	; 0x2c
   87a48:	e602      	b.n	87650 <_dtoa_r+0x6f8>
   87a4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   87a4c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   87a4e:	1b7b      	subs	r3, r7, r5
   87a50:	441e      	add	r6, r3
   87a52:	970c      	str	r7, [sp, #48]	; 0x30
   87a54:	960d      	str	r6, [sp, #52]	; 0x34
   87a56:	2700      	movs	r7, #0
   87a58:	e46f      	b.n	8733a <_dtoa_r+0x3e2>
   87a5a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   87a5e:	f04f 0802 	mov.w	r8, #2
   87a62:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87a66:	e638      	b.n	876da <_dtoa_r+0x782>
   87a68:	2a00      	cmp	r2, #0
   87a6a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   87a6e:	46d9      	mov	r9, fp
   87a70:	dd11      	ble.n	87a96 <_dtoa_r+0xb3e>
   87a72:	990a      	ldr	r1, [sp, #40]	; 0x28
   87a74:	2201      	movs	r2, #1
   87a76:	4620      	mov	r0, r4
   87a78:	f001 fb9e 	bl	891b8 <__lshift>
   87a7c:	4641      	mov	r1, r8
   87a7e:	900a      	str	r0, [sp, #40]	; 0x28
   87a80:	f001 fbf8 	bl	89274 <__mcmp>
   87a84:	2800      	cmp	r0, #0
   87a86:	f340 815d 	ble.w	87d44 <_dtoa_r+0xdec>
   87a8a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   87a8e:	f000 811b 	beq.w	87cc8 <_dtoa_r+0xd70>
   87a92:	f109 0a31 	add.w	sl, r9, #49	; 0x31
   87a96:	9b06      	ldr	r3, [sp, #24]
   87a98:	4635      	mov	r5, r6
   87a9a:	f883 a000 	strb.w	sl, [r3]
   87a9e:	f103 0b01 	add.w	fp, r3, #1
   87aa2:	463e      	mov	r6, r7
   87aa4:	e50f      	b.n	874c6 <_dtoa_r+0x56e>
   87aa6:	bf00      	nop
   87aa8:	3ff00000 	.word	0x3ff00000
   87aac:	40240000 	.word	0x40240000
   87ab0:	40140000 	.word	0x40140000
   87ab4:	401c0000 	.word	0x401c0000
   87ab8:	d103      	bne.n	87ac2 <_dtoa_r+0xb6a>
   87aba:	f01a 0f01 	tst.w	sl, #1
   87abe:	f47f acf2 	bne.w	874a6 <_dtoa_r+0x54e>
   87ac2:	465b      	mov	r3, fp
   87ac4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   87ac8:	469b      	mov	fp, r3
   87aca:	2a30      	cmp	r2, #48	; 0x30
   87acc:	f103 33ff 	add.w	r3, r3, #4294967295
   87ad0:	d0f8      	beq.n	87ac4 <_dtoa_r+0xb6c>
   87ad2:	e4f8      	b.n	874c6 <_dtoa_r+0x56e>
   87ad4:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   87ad8:	4654      	mov	r4, sl
   87ada:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   87ade:	f7ff bb47 	b.w	87170 <_dtoa_r+0x218>
   87ae2:	9e07      	ldr	r6, [sp, #28]
   87ae4:	4275      	negs	r5, r6
   87ae6:	2d00      	cmp	r5, #0
   87ae8:	f000 80c2 	beq.w	87c70 <_dtoa_r+0xd18>
   87aec:	4ba3      	ldr	r3, [pc, #652]	; (87d7c <_dtoa_r+0xe24>)
   87aee:	f005 020f 	and.w	r2, r5, #15
   87af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87af6:	e9d3 2300 	ldrd	r2, r3, [r3]
   87afa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   87afe:	f7fc fb37 	bl	84170 <__aeabi_dmul>
   87b02:	112d      	asrs	r5, r5, #4
   87b04:	4682      	mov	sl, r0
   87b06:	468b      	mov	fp, r1
   87b08:	f000 812e 	beq.w	87d68 <_dtoa_r+0xe10>
   87b0c:	4e9c      	ldr	r6, [pc, #624]	; (87d80 <_dtoa_r+0xe28>)
   87b0e:	f04f 0802 	mov.w	r8, #2
   87b12:	07ea      	lsls	r2, r5, #31
   87b14:	d505      	bpl.n	87b22 <_dtoa_r+0xbca>
   87b16:	e9d6 2300 	ldrd	r2, r3, [r6]
   87b1a:	f108 0801 	add.w	r8, r8, #1
   87b1e:	f7fc fb27 	bl	84170 <__aeabi_dmul>
   87b22:	106d      	asrs	r5, r5, #1
   87b24:	f106 0608 	add.w	r6, r6, #8
   87b28:	d1f3      	bne.n	87b12 <_dtoa_r+0xbba>
   87b2a:	4682      	mov	sl, r0
   87b2c:	468b      	mov	fp, r1
   87b2e:	e5ef      	b.n	87710 <_dtoa_r+0x7b8>
   87b30:	9e07      	ldr	r6, [sp, #28]
   87b32:	9d09      	ldr	r5, [sp, #36]	; 0x24
   87b34:	2230      	movs	r2, #48	; 0x30
   87b36:	702a      	strb	r2, [r5, #0]
   87b38:	3601      	adds	r6, #1
   87b3a:	2231      	movs	r2, #49	; 0x31
   87b3c:	9607      	str	r6, [sp, #28]
   87b3e:	701a      	strb	r2, [r3, #0]
   87b40:	f7ff bbd7 	b.w	872f2 <_dtoa_r+0x39a>
   87b44:	6871      	ldr	r1, [r6, #4]
   87b46:	4620      	mov	r0, r4
   87b48:	f001 f978 	bl	88e3c <_Balloc>
   87b4c:	6933      	ldr	r3, [r6, #16]
   87b4e:	4605      	mov	r5, r0
   87b50:	1c9a      	adds	r2, r3, #2
   87b52:	0092      	lsls	r2, r2, #2
   87b54:	f106 010c 	add.w	r1, r6, #12
   87b58:	300c      	adds	r0, #12
   87b5a:	f7fc fe0d 	bl	84778 <memcpy>
   87b5e:	4620      	mov	r0, r4
   87b60:	4629      	mov	r1, r5
   87b62:	2201      	movs	r2, #1
   87b64:	f001 fb28 	bl	891b8 <__lshift>
   87b68:	4607      	mov	r7, r0
   87b6a:	e503      	b.n	87574 <_dtoa_r+0x61c>
   87b6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   87b70:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   87b74:	f000 80a8 	beq.w	87cc8 <_dtoa_r+0xd70>
   87b78:	9d06      	ldr	r5, [sp, #24]
   87b7a:	f10a 0301 	add.w	r3, sl, #1
   87b7e:	702b      	strb	r3, [r5, #0]
   87b80:	4635      	mov	r5, r6
   87b82:	9e06      	ldr	r6, [sp, #24]
   87b84:	f106 0b01 	add.w	fp, r6, #1
   87b88:	463e      	mov	r6, r7
   87b8a:	e49c      	b.n	874c6 <_dtoa_r+0x56e>
   87b8c:	4635      	mov	r5, r6
   87b8e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   87b92:	463e      	mov	r6, r7
   87b94:	e47b      	b.n	8748e <_dtoa_r+0x536>
   87b96:	f04f 0800 	mov.w	r8, #0
   87b9a:	4646      	mov	r6, r8
   87b9c:	e70c      	b.n	879b8 <_dtoa_r+0xa60>
   87b9e:	4977      	ldr	r1, [pc, #476]	; (87d7c <_dtoa_r+0xe24>)
   87ba0:	f108 35ff 	add.w	r5, r8, #4294967295
   87ba4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   87ba8:	4632      	mov	r2, r6
   87baa:	463b      	mov	r3, r7
   87bac:	e9d1 0100 	ldrd	r0, r1, [r1]
   87bb0:	9510      	str	r5, [sp, #64]	; 0x40
   87bb2:	f7fc fadd 	bl	84170 <__aeabi_dmul>
   87bb6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   87bba:	4659      	mov	r1, fp
   87bbc:	4650      	mov	r0, sl
   87bbe:	f7fc fd71 	bl	846a4 <__aeabi_d2iz>
   87bc2:	4605      	mov	r5, r0
   87bc4:	f7fc fa6e 	bl	840a4 <__aeabi_i2d>
   87bc8:	4602      	mov	r2, r0
   87bca:	460b      	mov	r3, r1
   87bcc:	4650      	mov	r0, sl
   87bce:	4659      	mov	r1, fp
   87bd0:	f7fc f91a 	bl	83e08 <__aeabi_dsub>
   87bd4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   87bd8:	3530      	adds	r5, #48	; 0x30
   87bda:	f1b8 0f01 	cmp.w	r8, #1
   87bde:	4606      	mov	r6, r0
   87be0:	460f      	mov	r7, r1
   87be2:	f88e 5000 	strb.w	r5, [lr]
   87be6:	f10e 0b01 	add.w	fp, lr, #1
   87bea:	d01e      	beq.n	87c2a <_dtoa_r+0xcd2>
   87bec:	9d09      	ldr	r5, [sp, #36]	; 0x24
   87bee:	1e6b      	subs	r3, r5, #1
   87bf0:	eb03 0a08 	add.w	sl, r3, r8
   87bf4:	2200      	movs	r2, #0
   87bf6:	4b63      	ldr	r3, [pc, #396]	; (87d84 <_dtoa_r+0xe2c>)
   87bf8:	f7fc faba 	bl	84170 <__aeabi_dmul>
   87bfc:	460f      	mov	r7, r1
   87bfe:	4606      	mov	r6, r0
   87c00:	f7fc fd50 	bl	846a4 <__aeabi_d2iz>
   87c04:	4680      	mov	r8, r0
   87c06:	f7fc fa4d 	bl	840a4 <__aeabi_i2d>
   87c0a:	f108 0830 	add.w	r8, r8, #48	; 0x30
   87c0e:	4602      	mov	r2, r0
   87c10:	460b      	mov	r3, r1
   87c12:	4630      	mov	r0, r6
   87c14:	4639      	mov	r1, r7
   87c16:	f7fc f8f7 	bl	83e08 <__aeabi_dsub>
   87c1a:	f805 8f01 	strb.w	r8, [r5, #1]!
   87c1e:	4555      	cmp	r5, sl
   87c20:	d1e8      	bne.n	87bf4 <_dtoa_r+0xc9c>
   87c22:	9d10      	ldr	r5, [sp, #64]	; 0x40
   87c24:	4606      	mov	r6, r0
   87c26:	460f      	mov	r7, r1
   87c28:	44ab      	add	fp, r5
   87c2a:	2200      	movs	r2, #0
   87c2c:	4b56      	ldr	r3, [pc, #344]	; (87d88 <_dtoa_r+0xe30>)
   87c2e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87c32:	f7fc f8eb 	bl	83e0c <__adddf3>
   87c36:	4632      	mov	r2, r6
   87c38:	463b      	mov	r3, r7
   87c3a:	f7fc fd0b 	bl	84654 <__aeabi_dcmplt>
   87c3e:	2800      	cmp	r0, #0
   87c40:	d04d      	beq.n	87cde <_dtoa_r+0xd86>
   87c42:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   87c44:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87c46:	9607      	str	r6, [sp, #28]
   87c48:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
   87c4c:	f7ff bb4a 	b.w	872e4 <_dtoa_r+0x38c>
   87c50:	9e08      	ldr	r6, [sp, #32]
   87c52:	2300      	movs	r3, #0
   87c54:	ebc9 0506 	rsb	r5, r9, r6
   87c58:	f7ff bb75 	b.w	87346 <_dtoa_r+0x3ee>
   87c5c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   87c5e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87c60:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   87c64:	9d08      	ldr	r5, [sp, #32]
   87c66:	f7ff bb6e 	b.w	87346 <_dtoa_r+0x3ee>
   87c6a:	4657      	mov	r7, sl
   87c6c:	f7ff bbb8 	b.w	873e0 <_dtoa_r+0x488>
   87c70:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   87c74:	f04f 0802 	mov.w	r8, #2
   87c78:	e54a      	b.n	87710 <_dtoa_r+0x7b8>
   87c7a:	f1b9 0f00 	cmp.w	r9, #0
   87c7e:	f43f aeae 	beq.w	879de <_dtoa_r+0xa86>
   87c82:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   87c84:	2e00      	cmp	r6, #0
   87c86:	f77f af28 	ble.w	87ada <_dtoa_r+0xb82>
   87c8a:	2200      	movs	r2, #0
   87c8c:	4b3d      	ldr	r3, [pc, #244]	; (87d84 <_dtoa_r+0xe2c>)
   87c8e:	4650      	mov	r0, sl
   87c90:	4659      	mov	r1, fp
   87c92:	f7fc fa6d 	bl	84170 <__aeabi_dmul>
   87c96:	4682      	mov	sl, r0
   87c98:	f108 0001 	add.w	r0, r8, #1
   87c9c:	468b      	mov	fp, r1
   87c9e:	f7fc fa01 	bl	840a4 <__aeabi_i2d>
   87ca2:	4602      	mov	r2, r0
   87ca4:	460b      	mov	r3, r1
   87ca6:	4650      	mov	r0, sl
   87ca8:	4659      	mov	r1, fp
   87caa:	f7fc fa61 	bl	84170 <__aeabi_dmul>
   87cae:	2200      	movs	r2, #0
   87cb0:	4b36      	ldr	r3, [pc, #216]	; (87d8c <_dtoa_r+0xe34>)
   87cb2:	f7fc f8ab 	bl	83e0c <__adddf3>
   87cb6:	9d07      	ldr	r5, [sp, #28]
   87cb8:	4606      	mov	r6, r0
   87cba:	3d01      	subs	r5, #1
   87cbc:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   87cc0:	9517      	str	r5, [sp, #92]	; 0x5c
   87cc2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   87cc6:	e543      	b.n	87750 <_dtoa_r+0x7f8>
   87cc8:	4635      	mov	r5, r6
   87cca:	9b06      	ldr	r3, [sp, #24]
   87ccc:	9e06      	ldr	r6, [sp, #24]
   87cce:	2239      	movs	r2, #57	; 0x39
   87cd0:	7032      	strb	r2, [r6, #0]
   87cd2:	f103 0b01 	add.w	fp, r3, #1
   87cd6:	463e      	mov	r6, r7
   87cd8:	9909      	ldr	r1, [sp, #36]	; 0x24
   87cda:	f7ff bbee 	b.w	874ba <_dtoa_r+0x562>
   87cde:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   87ce2:	2000      	movs	r0, #0
   87ce4:	4928      	ldr	r1, [pc, #160]	; (87d88 <_dtoa_r+0xe30>)
   87ce6:	f7fc f88f 	bl	83e08 <__aeabi_dsub>
   87cea:	4632      	mov	r2, r6
   87cec:	463b      	mov	r3, r7
   87cee:	f7fc fccf 	bl	84690 <__aeabi_dcmpgt>
   87cf2:	2800      	cmp	r0, #0
   87cf4:	f43f aef1 	beq.w	87ada <_dtoa_r+0xb82>
   87cf8:	465b      	mov	r3, fp
   87cfa:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   87cfe:	469b      	mov	fp, r3
   87d00:	2a30      	cmp	r2, #48	; 0x30
   87d02:	f103 33ff 	add.w	r3, r3, #4294967295
   87d06:	d0f8      	beq.n	87cfa <_dtoa_r+0xda2>
   87d08:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   87d0a:	9507      	str	r5, [sp, #28]
   87d0c:	f7ff baf1 	b.w	872f2 <_dtoa_r+0x39a>
   87d10:	4645      	mov	r5, r8
   87d12:	4654      	mov	r4, sl
   87d14:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   87d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87d18:	9607      	str	r6, [sp, #28]
   87d1a:	f7ff bae3 	b.w	872e4 <_dtoa_r+0x38c>
   87d1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   87d22:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   87d26:	d0cf      	beq.n	87cc8 <_dtoa_r+0xd70>
   87d28:	9b03      	ldr	r3, [sp, #12]
   87d2a:	4635      	mov	r5, r6
   87d2c:	2b00      	cmp	r3, #0
   87d2e:	9e06      	ldr	r6, [sp, #24]
   87d30:	bfc8      	it	gt
   87d32:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
   87d36:	f886 a000 	strb.w	sl, [r6]
   87d3a:	f106 0b01 	add.w	fp, r6, #1
   87d3e:	463e      	mov	r6, r7
   87d40:	f7ff bbc1 	b.w	874c6 <_dtoa_r+0x56e>
   87d44:	f47f aea7 	bne.w	87a96 <_dtoa_r+0xb3e>
   87d48:	f01a 0f01 	tst.w	sl, #1
   87d4c:	f43f aea3 	beq.w	87a96 <_dtoa_r+0xb3e>
   87d50:	e69b      	b.n	87a8a <_dtoa_r+0xb32>
   87d52:	4631      	mov	r1, r6
   87d54:	4620      	mov	r0, r4
   87d56:	220a      	movs	r2, #10
   87d58:	2300      	movs	r3, #0
   87d5a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   87d5e:	f001 f89d 	bl	88e9c <__multadd>
   87d62:	4606      	mov	r6, r0
   87d64:	f7ff bb6a 	b.w	8743c <_dtoa_r+0x4e4>
   87d68:	f04f 0802 	mov.w	r8, #2
   87d6c:	e4d0      	b.n	87710 <_dtoa_r+0x7b8>
   87d6e:	f43f ab50 	beq.w	87412 <_dtoa_r+0x4ba>
   87d72:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   87d76:	f7ff bbe0 	b.w	8753a <_dtoa_r+0x5e2>
   87d7a:	bf00      	nop
   87d7c:	0008a830 	.word	0x0008a830
   87d80:	0008a8f8 	.word	0x0008a8f8
   87d84:	40240000 	.word	0x40240000
   87d88:	3fe00000 	.word	0x3fe00000
   87d8c:	401c0000 	.word	0x401c0000

00087d90 <__sflush_r>:
   87d90:	898b      	ldrh	r3, [r1, #12]
   87d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87d96:	b29a      	uxth	r2, r3
   87d98:	460d      	mov	r5, r1
   87d9a:	0711      	lsls	r1, r2, #28
   87d9c:	4680      	mov	r8, r0
   87d9e:	d43c      	bmi.n	87e1a <__sflush_r+0x8a>
   87da0:	686a      	ldr	r2, [r5, #4]
   87da2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   87da6:	2a00      	cmp	r2, #0
   87da8:	81ab      	strh	r3, [r5, #12]
   87daa:	dd59      	ble.n	87e60 <__sflush_r+0xd0>
   87dac:	6aac      	ldr	r4, [r5, #40]	; 0x28
   87dae:	2c00      	cmp	r4, #0
   87db0:	d04b      	beq.n	87e4a <__sflush_r+0xba>
   87db2:	b29b      	uxth	r3, r3
   87db4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   87db8:	2100      	movs	r1, #0
   87dba:	b292      	uxth	r2, r2
   87dbc:	f8d8 6000 	ldr.w	r6, [r8]
   87dc0:	f8c8 1000 	str.w	r1, [r8]
   87dc4:	2a00      	cmp	r2, #0
   87dc6:	d04f      	beq.n	87e68 <__sflush_r+0xd8>
   87dc8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   87dca:	075f      	lsls	r7, r3, #29
   87dcc:	d505      	bpl.n	87dda <__sflush_r+0x4a>
   87dce:	6869      	ldr	r1, [r5, #4]
   87dd0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   87dd2:	1a52      	subs	r2, r2, r1
   87dd4:	b10b      	cbz	r3, 87dda <__sflush_r+0x4a>
   87dd6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   87dd8:	1ad2      	subs	r2, r2, r3
   87dda:	4640      	mov	r0, r8
   87ddc:	69e9      	ldr	r1, [r5, #28]
   87dde:	2300      	movs	r3, #0
   87de0:	47a0      	blx	r4
   87de2:	1c44      	adds	r4, r0, #1
   87de4:	d04a      	beq.n	87e7c <__sflush_r+0xec>
   87de6:	89ab      	ldrh	r3, [r5, #12]
   87de8:	692a      	ldr	r2, [r5, #16]
   87dea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   87dee:	b29b      	uxth	r3, r3
   87df0:	2100      	movs	r1, #0
   87df2:	602a      	str	r2, [r5, #0]
   87df4:	04da      	lsls	r2, r3, #19
   87df6:	81ab      	strh	r3, [r5, #12]
   87df8:	6069      	str	r1, [r5, #4]
   87dfa:	d44c      	bmi.n	87e96 <__sflush_r+0x106>
   87dfc:	6b29      	ldr	r1, [r5, #48]	; 0x30
   87dfe:	f8c8 6000 	str.w	r6, [r8]
   87e02:	b311      	cbz	r1, 87e4a <__sflush_r+0xba>
   87e04:	f105 0340 	add.w	r3, r5, #64	; 0x40
   87e08:	4299      	cmp	r1, r3
   87e0a:	d002      	beq.n	87e12 <__sflush_r+0x82>
   87e0c:	4640      	mov	r0, r8
   87e0e:	f000 f9c3 	bl	88198 <_free_r>
   87e12:	2000      	movs	r0, #0
   87e14:	6328      	str	r0, [r5, #48]	; 0x30
   87e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87e1a:	692e      	ldr	r6, [r5, #16]
   87e1c:	b1ae      	cbz	r6, 87e4a <__sflush_r+0xba>
   87e1e:	0791      	lsls	r1, r2, #30
   87e20:	682c      	ldr	r4, [r5, #0]
   87e22:	bf0c      	ite	eq
   87e24:	696b      	ldreq	r3, [r5, #20]
   87e26:	2300      	movne	r3, #0
   87e28:	602e      	str	r6, [r5, #0]
   87e2a:	1ba4      	subs	r4, r4, r6
   87e2c:	60ab      	str	r3, [r5, #8]
   87e2e:	e00a      	b.n	87e46 <__sflush_r+0xb6>
   87e30:	4632      	mov	r2, r6
   87e32:	4623      	mov	r3, r4
   87e34:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   87e36:	4640      	mov	r0, r8
   87e38:	69e9      	ldr	r1, [r5, #28]
   87e3a:	47b8      	blx	r7
   87e3c:	2800      	cmp	r0, #0
   87e3e:	ebc0 0404 	rsb	r4, r0, r4
   87e42:	4406      	add	r6, r0
   87e44:	dd04      	ble.n	87e50 <__sflush_r+0xc0>
   87e46:	2c00      	cmp	r4, #0
   87e48:	dcf2      	bgt.n	87e30 <__sflush_r+0xa0>
   87e4a:	2000      	movs	r0, #0
   87e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87e50:	89ab      	ldrh	r3, [r5, #12]
   87e52:	f04f 30ff 	mov.w	r0, #4294967295
   87e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87e5a:	81ab      	strh	r3, [r5, #12]
   87e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87e60:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   87e62:	2a00      	cmp	r2, #0
   87e64:	dca2      	bgt.n	87dac <__sflush_r+0x1c>
   87e66:	e7f0      	b.n	87e4a <__sflush_r+0xba>
   87e68:	2301      	movs	r3, #1
   87e6a:	4640      	mov	r0, r8
   87e6c:	69e9      	ldr	r1, [r5, #28]
   87e6e:	47a0      	blx	r4
   87e70:	1c43      	adds	r3, r0, #1
   87e72:	4602      	mov	r2, r0
   87e74:	d01e      	beq.n	87eb4 <__sflush_r+0x124>
   87e76:	89ab      	ldrh	r3, [r5, #12]
   87e78:	6aac      	ldr	r4, [r5, #40]	; 0x28
   87e7a:	e7a6      	b.n	87dca <__sflush_r+0x3a>
   87e7c:	f8d8 3000 	ldr.w	r3, [r8]
   87e80:	b95b      	cbnz	r3, 87e9a <__sflush_r+0x10a>
   87e82:	89aa      	ldrh	r2, [r5, #12]
   87e84:	6929      	ldr	r1, [r5, #16]
   87e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   87e8a:	b292      	uxth	r2, r2
   87e8c:	606b      	str	r3, [r5, #4]
   87e8e:	04d3      	lsls	r3, r2, #19
   87e90:	81aa      	strh	r2, [r5, #12]
   87e92:	6029      	str	r1, [r5, #0]
   87e94:	d5b2      	bpl.n	87dfc <__sflush_r+0x6c>
   87e96:	6528      	str	r0, [r5, #80]	; 0x50
   87e98:	e7b0      	b.n	87dfc <__sflush_r+0x6c>
   87e9a:	2b1d      	cmp	r3, #29
   87e9c:	d001      	beq.n	87ea2 <__sflush_r+0x112>
   87e9e:	2b16      	cmp	r3, #22
   87ea0:	d113      	bne.n	87eca <__sflush_r+0x13a>
   87ea2:	89a9      	ldrh	r1, [r5, #12]
   87ea4:	692b      	ldr	r3, [r5, #16]
   87ea6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   87eaa:	2200      	movs	r2, #0
   87eac:	81a9      	strh	r1, [r5, #12]
   87eae:	602b      	str	r3, [r5, #0]
   87eb0:	606a      	str	r2, [r5, #4]
   87eb2:	e7a3      	b.n	87dfc <__sflush_r+0x6c>
   87eb4:	f8d8 3000 	ldr.w	r3, [r8]
   87eb8:	2b00      	cmp	r3, #0
   87eba:	d0dc      	beq.n	87e76 <__sflush_r+0xe6>
   87ebc:	2b1d      	cmp	r3, #29
   87ebe:	d001      	beq.n	87ec4 <__sflush_r+0x134>
   87ec0:	2b16      	cmp	r3, #22
   87ec2:	d1c5      	bne.n	87e50 <__sflush_r+0xc0>
   87ec4:	f8c8 6000 	str.w	r6, [r8]
   87ec8:	e7bf      	b.n	87e4a <__sflush_r+0xba>
   87eca:	89ab      	ldrh	r3, [r5, #12]
   87ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87ed0:	81ab      	strh	r3, [r5, #12]
   87ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87ed6:	bf00      	nop

00087ed8 <_fflush_r>:
   87ed8:	b510      	push	{r4, lr}
   87eda:	4604      	mov	r4, r0
   87edc:	b082      	sub	sp, #8
   87ede:	b108      	cbz	r0, 87ee4 <_fflush_r+0xc>
   87ee0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87ee2:	b153      	cbz	r3, 87efa <_fflush_r+0x22>
   87ee4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   87ee8:	b908      	cbnz	r0, 87eee <_fflush_r+0x16>
   87eea:	b002      	add	sp, #8
   87eec:	bd10      	pop	{r4, pc}
   87eee:	4620      	mov	r0, r4
   87ef0:	b002      	add	sp, #8
   87ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   87ef6:	f7ff bf4b 	b.w	87d90 <__sflush_r>
   87efa:	9101      	str	r1, [sp, #4]
   87efc:	f000 f808 	bl	87f10 <__sinit>
   87f00:	9901      	ldr	r1, [sp, #4]
   87f02:	e7ef      	b.n	87ee4 <_fflush_r+0xc>

00087f04 <_cleanup_r>:
   87f04:	4901      	ldr	r1, [pc, #4]	; (87f0c <_cleanup_r+0x8>)
   87f06:	f000 bb9f 	b.w	88648 <_fwalk>
   87f0a:	bf00      	nop
   87f0c:	00089ca1 	.word	0x00089ca1

00087f10 <__sinit>:
   87f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87f14:	6b84      	ldr	r4, [r0, #56]	; 0x38
   87f16:	b083      	sub	sp, #12
   87f18:	4607      	mov	r7, r0
   87f1a:	2c00      	cmp	r4, #0
   87f1c:	d165      	bne.n	87fea <__sinit+0xda>
   87f1e:	687d      	ldr	r5, [r7, #4]
   87f20:	4833      	ldr	r0, [pc, #204]	; (87ff0 <__sinit+0xe0>)
   87f22:	2304      	movs	r3, #4
   87f24:	2103      	movs	r1, #3
   87f26:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   87f2a:	63f8      	str	r0, [r7, #60]	; 0x3c
   87f2c:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   87f30:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   87f34:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   87f38:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   87f3c:	81ab      	strh	r3, [r5, #12]
   87f3e:	602c      	str	r4, [r5, #0]
   87f40:	606c      	str	r4, [r5, #4]
   87f42:	60ac      	str	r4, [r5, #8]
   87f44:	666c      	str	r4, [r5, #100]	; 0x64
   87f46:	81ec      	strh	r4, [r5, #14]
   87f48:	612c      	str	r4, [r5, #16]
   87f4a:	616c      	str	r4, [r5, #20]
   87f4c:	61ac      	str	r4, [r5, #24]
   87f4e:	4621      	mov	r1, r4
   87f50:	2208      	movs	r2, #8
   87f52:	f7fc fc87 	bl	84864 <memset>
   87f56:	f8df b09c 	ldr.w	fp, [pc, #156]	; 87ff4 <__sinit+0xe4>
   87f5a:	68be      	ldr	r6, [r7, #8]
   87f5c:	f8df a098 	ldr.w	sl, [pc, #152]	; 87ff8 <__sinit+0xe8>
   87f60:	f8df 9098 	ldr.w	r9, [pc, #152]	; 87ffc <__sinit+0xec>
   87f64:	f8df 8098 	ldr.w	r8, [pc, #152]	; 88000 <__sinit+0xf0>
   87f68:	2301      	movs	r3, #1
   87f6a:	2209      	movs	r2, #9
   87f6c:	61ed      	str	r5, [r5, #28]
   87f6e:	f8c5 b020 	str.w	fp, [r5, #32]
   87f72:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   87f76:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   87f7a:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   87f7e:	4621      	mov	r1, r4
   87f80:	81f3      	strh	r3, [r6, #14]
   87f82:	81b2      	strh	r2, [r6, #12]
   87f84:	6034      	str	r4, [r6, #0]
   87f86:	6074      	str	r4, [r6, #4]
   87f88:	60b4      	str	r4, [r6, #8]
   87f8a:	6674      	str	r4, [r6, #100]	; 0x64
   87f8c:	6134      	str	r4, [r6, #16]
   87f8e:	6174      	str	r4, [r6, #20]
   87f90:	61b4      	str	r4, [r6, #24]
   87f92:	2208      	movs	r2, #8
   87f94:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   87f98:	9301      	str	r3, [sp, #4]
   87f9a:	f7fc fc63 	bl	84864 <memset>
   87f9e:	68fd      	ldr	r5, [r7, #12]
   87fa0:	2012      	movs	r0, #18
   87fa2:	2202      	movs	r2, #2
   87fa4:	61f6      	str	r6, [r6, #28]
   87fa6:	f8c6 b020 	str.w	fp, [r6, #32]
   87faa:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   87fae:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   87fb2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   87fb6:	4621      	mov	r1, r4
   87fb8:	81a8      	strh	r0, [r5, #12]
   87fba:	81ea      	strh	r2, [r5, #14]
   87fbc:	602c      	str	r4, [r5, #0]
   87fbe:	606c      	str	r4, [r5, #4]
   87fc0:	60ac      	str	r4, [r5, #8]
   87fc2:	666c      	str	r4, [r5, #100]	; 0x64
   87fc4:	612c      	str	r4, [r5, #16]
   87fc6:	616c      	str	r4, [r5, #20]
   87fc8:	61ac      	str	r4, [r5, #24]
   87fca:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   87fce:	2208      	movs	r2, #8
   87fd0:	f7fc fc48 	bl	84864 <memset>
   87fd4:	9b01      	ldr	r3, [sp, #4]
   87fd6:	61ed      	str	r5, [r5, #28]
   87fd8:	f8c5 b020 	str.w	fp, [r5, #32]
   87fdc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   87fe0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   87fe4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   87fe8:	63bb      	str	r3, [r7, #56]	; 0x38
   87fea:	b003      	add	sp, #12
   87fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87ff0:	00087f05 	.word	0x00087f05
   87ff4:	00089835 	.word	0x00089835
   87ff8:	00089859 	.word	0x00089859
   87ffc:	00089891 	.word	0x00089891
   88000:	000898b1 	.word	0x000898b1

00088004 <__sfp_lock_acquire>:
   88004:	4770      	bx	lr
   88006:	bf00      	nop

00088008 <__sfp_lock_release>:
   88008:	4770      	bx	lr
   8800a:	bf00      	nop

0008800c <__libc_fini_array>:
   8800c:	b538      	push	{r3, r4, r5, lr}
   8800e:	4d09      	ldr	r5, [pc, #36]	; (88034 <__libc_fini_array+0x28>)
   88010:	4c09      	ldr	r4, [pc, #36]	; (88038 <__libc_fini_array+0x2c>)
   88012:	1b64      	subs	r4, r4, r5
   88014:	10a4      	asrs	r4, r4, #2
   88016:	bf18      	it	ne
   88018:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   8801c:	d005      	beq.n	8802a <__libc_fini_array+0x1e>
   8801e:	3c01      	subs	r4, #1
   88020:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   88024:	4798      	blx	r3
   88026:	2c00      	cmp	r4, #0
   88028:	d1f9      	bne.n	8801e <__libc_fini_array+0x12>
   8802a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8802e:	f002 bc87 	b.w	8a940 <_fini>
   88032:	bf00      	nop
   88034:	0008a94c 	.word	0x0008a94c
   88038:	0008a950 	.word	0x0008a950

0008803c <_fputwc_r>:
   8803c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88040:	8993      	ldrh	r3, [r2, #12]
   88042:	460f      	mov	r7, r1
   88044:	0499      	lsls	r1, r3, #18
   88046:	b082      	sub	sp, #8
   88048:	4614      	mov	r4, r2
   8804a:	4680      	mov	r8, r0
   8804c:	d406      	bmi.n	8805c <_fputwc_r+0x20>
   8804e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   88050:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   88054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   88058:	81a3      	strh	r3, [r4, #12]
   8805a:	6662      	str	r2, [r4, #100]	; 0x64
   8805c:	f000 fb1c 	bl	88698 <__locale_mb_cur_max>
   88060:	2801      	cmp	r0, #1
   88062:	d03e      	beq.n	880e2 <_fputwc_r+0xa6>
   88064:	463a      	mov	r2, r7
   88066:	4640      	mov	r0, r8
   88068:	a901      	add	r1, sp, #4
   8806a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8806e:	f001 fcf7 	bl	89a60 <_wcrtomb_r>
   88072:	1c42      	adds	r2, r0, #1
   88074:	4606      	mov	r6, r0
   88076:	d02d      	beq.n	880d4 <_fputwc_r+0x98>
   88078:	2800      	cmp	r0, #0
   8807a:	d03a      	beq.n	880f2 <_fputwc_r+0xb6>
   8807c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   88080:	2500      	movs	r5, #0
   88082:	e009      	b.n	88098 <_fputwc_r+0x5c>
   88084:	6823      	ldr	r3, [r4, #0]
   88086:	7019      	strb	r1, [r3, #0]
   88088:	6823      	ldr	r3, [r4, #0]
   8808a:	3301      	adds	r3, #1
   8808c:	6023      	str	r3, [r4, #0]
   8808e:	3501      	adds	r5, #1
   88090:	42b5      	cmp	r5, r6
   88092:	d22e      	bcs.n	880f2 <_fputwc_r+0xb6>
   88094:	ab01      	add	r3, sp, #4
   88096:	5ce9      	ldrb	r1, [r5, r3]
   88098:	68a3      	ldr	r3, [r4, #8]
   8809a:	3b01      	subs	r3, #1
   8809c:	2b00      	cmp	r3, #0
   8809e:	60a3      	str	r3, [r4, #8]
   880a0:	daf0      	bge.n	88084 <_fputwc_r+0x48>
   880a2:	69a2      	ldr	r2, [r4, #24]
   880a4:	4293      	cmp	r3, r2
   880a6:	db06      	blt.n	880b6 <_fputwc_r+0x7a>
   880a8:	6823      	ldr	r3, [r4, #0]
   880aa:	7019      	strb	r1, [r3, #0]
   880ac:	6823      	ldr	r3, [r4, #0]
   880ae:	7819      	ldrb	r1, [r3, #0]
   880b0:	3301      	adds	r3, #1
   880b2:	290a      	cmp	r1, #10
   880b4:	d1ea      	bne.n	8808c <_fputwc_r+0x50>
   880b6:	4640      	mov	r0, r8
   880b8:	4622      	mov	r2, r4
   880ba:	f001 fc7d 	bl	899b8 <__swbuf_r>
   880be:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   880c2:	4258      	negs	r0, r3
   880c4:	4158      	adcs	r0, r3
   880c6:	2800      	cmp	r0, #0
   880c8:	d0e1      	beq.n	8808e <_fputwc_r+0x52>
   880ca:	f04f 30ff 	mov.w	r0, #4294967295
   880ce:	b002      	add	sp, #8
   880d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   880d4:	89a3      	ldrh	r3, [r4, #12]
   880d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   880da:	81a3      	strh	r3, [r4, #12]
   880dc:	b002      	add	sp, #8
   880de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   880e2:	1e7b      	subs	r3, r7, #1
   880e4:	2bfe      	cmp	r3, #254	; 0xfe
   880e6:	d8bd      	bhi.n	88064 <_fputwc_r+0x28>
   880e8:	b2f9      	uxtb	r1, r7
   880ea:	4606      	mov	r6, r0
   880ec:	f88d 1004 	strb.w	r1, [sp, #4]
   880f0:	e7c6      	b.n	88080 <_fputwc_r+0x44>
   880f2:	4638      	mov	r0, r7
   880f4:	b002      	add	sp, #8
   880f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   880fa:	bf00      	nop

000880fc <_malloc_trim_r>:
   880fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   880fe:	4d23      	ldr	r5, [pc, #140]	; (8818c <_malloc_trim_r+0x90>)
   88100:	460f      	mov	r7, r1
   88102:	4604      	mov	r4, r0
   88104:	f000 fe96 	bl	88e34 <__malloc_lock>
   88108:	68ab      	ldr	r3, [r5, #8]
   8810a:	685e      	ldr	r6, [r3, #4]
   8810c:	f026 0603 	bic.w	r6, r6, #3
   88110:	1bf1      	subs	r1, r6, r7
   88112:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   88116:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8811a:	f021 010f 	bic.w	r1, r1, #15
   8811e:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   88122:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   88126:	db07      	blt.n	88138 <_malloc_trim_r+0x3c>
   88128:	4620      	mov	r0, r4
   8812a:	2100      	movs	r1, #0
   8812c:	f001 fb70 	bl	89810 <_sbrk_r>
   88130:	68ab      	ldr	r3, [r5, #8]
   88132:	4433      	add	r3, r6
   88134:	4298      	cmp	r0, r3
   88136:	d004      	beq.n	88142 <_malloc_trim_r+0x46>
   88138:	4620      	mov	r0, r4
   8813a:	f000 fe7d 	bl	88e38 <__malloc_unlock>
   8813e:	2000      	movs	r0, #0
   88140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88142:	4620      	mov	r0, r4
   88144:	4279      	negs	r1, r7
   88146:	f001 fb63 	bl	89810 <_sbrk_r>
   8814a:	3001      	adds	r0, #1
   8814c:	d00d      	beq.n	8816a <_malloc_trim_r+0x6e>
   8814e:	4b10      	ldr	r3, [pc, #64]	; (88190 <_malloc_trim_r+0x94>)
   88150:	68aa      	ldr	r2, [r5, #8]
   88152:	6819      	ldr	r1, [r3, #0]
   88154:	1bf6      	subs	r6, r6, r7
   88156:	f046 0601 	orr.w	r6, r6, #1
   8815a:	4620      	mov	r0, r4
   8815c:	1bc9      	subs	r1, r1, r7
   8815e:	6056      	str	r6, [r2, #4]
   88160:	6019      	str	r1, [r3, #0]
   88162:	f000 fe69 	bl	88e38 <__malloc_unlock>
   88166:	2001      	movs	r0, #1
   88168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8816a:	4620      	mov	r0, r4
   8816c:	2100      	movs	r1, #0
   8816e:	f001 fb4f 	bl	89810 <_sbrk_r>
   88172:	68ab      	ldr	r3, [r5, #8]
   88174:	1ac2      	subs	r2, r0, r3
   88176:	2a0f      	cmp	r2, #15
   88178:	ddde      	ble.n	88138 <_malloc_trim_r+0x3c>
   8817a:	4d06      	ldr	r5, [pc, #24]	; (88194 <_malloc_trim_r+0x98>)
   8817c:	4904      	ldr	r1, [pc, #16]	; (88190 <_malloc_trim_r+0x94>)
   8817e:	682d      	ldr	r5, [r5, #0]
   88180:	f042 0201 	orr.w	r2, r2, #1
   88184:	1b40      	subs	r0, r0, r5
   88186:	605a      	str	r2, [r3, #4]
   88188:	6008      	str	r0, [r1, #0]
   8818a:	e7d5      	b.n	88138 <_malloc_trim_r+0x3c>
   8818c:	20070640 	.word	0x20070640
   88190:	20078d90 	.word	0x20078d90
   88194:	20070a4c 	.word	0x20070a4c

00088198 <_free_r>:
   88198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8819c:	460d      	mov	r5, r1
   8819e:	4606      	mov	r6, r0
   881a0:	2900      	cmp	r1, #0
   881a2:	d055      	beq.n	88250 <_free_r+0xb8>
   881a4:	f000 fe46 	bl	88e34 <__malloc_lock>
   881a8:	f855 1c04 	ldr.w	r1, [r5, #-4]
   881ac:	f8df c170 	ldr.w	ip, [pc, #368]	; 88320 <_free_r+0x188>
   881b0:	f1a5 0408 	sub.w	r4, r5, #8
   881b4:	f021 0301 	bic.w	r3, r1, #1
   881b8:	18e2      	adds	r2, r4, r3
   881ba:	f8dc 0008 	ldr.w	r0, [ip, #8]
   881be:	6857      	ldr	r7, [r2, #4]
   881c0:	4290      	cmp	r0, r2
   881c2:	f027 0703 	bic.w	r7, r7, #3
   881c6:	d068      	beq.n	8829a <_free_r+0x102>
   881c8:	f011 0101 	ands.w	r1, r1, #1
   881cc:	6057      	str	r7, [r2, #4]
   881ce:	d032      	beq.n	88236 <_free_r+0x9e>
   881d0:	2100      	movs	r1, #0
   881d2:	19d0      	adds	r0, r2, r7
   881d4:	6840      	ldr	r0, [r0, #4]
   881d6:	07c0      	lsls	r0, r0, #31
   881d8:	d406      	bmi.n	881e8 <_free_r+0x50>
   881da:	443b      	add	r3, r7
   881dc:	6890      	ldr	r0, [r2, #8]
   881de:	2900      	cmp	r1, #0
   881e0:	d04d      	beq.n	8827e <_free_r+0xe6>
   881e2:	68d2      	ldr	r2, [r2, #12]
   881e4:	60c2      	str	r2, [r0, #12]
   881e6:	6090      	str	r0, [r2, #8]
   881e8:	f043 0201 	orr.w	r2, r3, #1
   881ec:	6062      	str	r2, [r4, #4]
   881ee:	50e3      	str	r3, [r4, r3]
   881f0:	b9e1      	cbnz	r1, 8822c <_free_r+0x94>
   881f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   881f6:	d32d      	bcc.n	88254 <_free_r+0xbc>
   881f8:	0a5a      	lsrs	r2, r3, #9
   881fa:	2a04      	cmp	r2, #4
   881fc:	d869      	bhi.n	882d2 <_free_r+0x13a>
   881fe:	0998      	lsrs	r0, r3, #6
   88200:	3038      	adds	r0, #56	; 0x38
   88202:	0041      	lsls	r1, r0, #1
   88204:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   88208:	f8dc 2008 	ldr.w	r2, [ip, #8]
   8820c:	4944      	ldr	r1, [pc, #272]	; (88320 <_free_r+0x188>)
   8820e:	4562      	cmp	r2, ip
   88210:	d065      	beq.n	882de <_free_r+0x146>
   88212:	6851      	ldr	r1, [r2, #4]
   88214:	f021 0103 	bic.w	r1, r1, #3
   88218:	428b      	cmp	r3, r1
   8821a:	d202      	bcs.n	88222 <_free_r+0x8a>
   8821c:	6892      	ldr	r2, [r2, #8]
   8821e:	4594      	cmp	ip, r2
   88220:	d1f7      	bne.n	88212 <_free_r+0x7a>
   88222:	68d3      	ldr	r3, [r2, #12]
   88224:	60e3      	str	r3, [r4, #12]
   88226:	60a2      	str	r2, [r4, #8]
   88228:	609c      	str	r4, [r3, #8]
   8822a:	60d4      	str	r4, [r2, #12]
   8822c:	4630      	mov	r0, r6
   8822e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88232:	f000 be01 	b.w	88e38 <__malloc_unlock>
   88236:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8823a:	f10c 0808 	add.w	r8, ip, #8
   8823e:	1b64      	subs	r4, r4, r5
   88240:	68a0      	ldr	r0, [r4, #8]
   88242:	442b      	add	r3, r5
   88244:	4540      	cmp	r0, r8
   88246:	d042      	beq.n	882ce <_free_r+0x136>
   88248:	68e5      	ldr	r5, [r4, #12]
   8824a:	60c5      	str	r5, [r0, #12]
   8824c:	60a8      	str	r0, [r5, #8]
   8824e:	e7c0      	b.n	881d2 <_free_r+0x3a>
   88250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88254:	08db      	lsrs	r3, r3, #3
   88256:	109a      	asrs	r2, r3, #2
   88258:	2001      	movs	r0, #1
   8825a:	4090      	lsls	r0, r2
   8825c:	f8dc 1004 	ldr.w	r1, [ip, #4]
   88260:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   88264:	689a      	ldr	r2, [r3, #8]
   88266:	4301      	orrs	r1, r0
   88268:	60a2      	str	r2, [r4, #8]
   8826a:	60e3      	str	r3, [r4, #12]
   8826c:	f8cc 1004 	str.w	r1, [ip, #4]
   88270:	4630      	mov	r0, r6
   88272:	609c      	str	r4, [r3, #8]
   88274:	60d4      	str	r4, [r2, #12]
   88276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8827a:	f000 bddd 	b.w	88e38 <__malloc_unlock>
   8827e:	4d29      	ldr	r5, [pc, #164]	; (88324 <_free_r+0x18c>)
   88280:	42a8      	cmp	r0, r5
   88282:	d1ae      	bne.n	881e2 <_free_r+0x4a>
   88284:	f043 0201 	orr.w	r2, r3, #1
   88288:	f8cc 4014 	str.w	r4, [ip, #20]
   8828c:	f8cc 4010 	str.w	r4, [ip, #16]
   88290:	60e0      	str	r0, [r4, #12]
   88292:	60a0      	str	r0, [r4, #8]
   88294:	6062      	str	r2, [r4, #4]
   88296:	50e3      	str	r3, [r4, r3]
   88298:	e7c8      	b.n	8822c <_free_r+0x94>
   8829a:	441f      	add	r7, r3
   8829c:	07cb      	lsls	r3, r1, #31
   8829e:	d407      	bmi.n	882b0 <_free_r+0x118>
   882a0:	f855 1c08 	ldr.w	r1, [r5, #-8]
   882a4:	1a64      	subs	r4, r4, r1
   882a6:	68e3      	ldr	r3, [r4, #12]
   882a8:	68a2      	ldr	r2, [r4, #8]
   882aa:	440f      	add	r7, r1
   882ac:	60d3      	str	r3, [r2, #12]
   882ae:	609a      	str	r2, [r3, #8]
   882b0:	4b1d      	ldr	r3, [pc, #116]	; (88328 <_free_r+0x190>)
   882b2:	f047 0201 	orr.w	r2, r7, #1
   882b6:	681b      	ldr	r3, [r3, #0]
   882b8:	6062      	str	r2, [r4, #4]
   882ba:	429f      	cmp	r7, r3
   882bc:	f8cc 4008 	str.w	r4, [ip, #8]
   882c0:	d3b4      	bcc.n	8822c <_free_r+0x94>
   882c2:	4b1a      	ldr	r3, [pc, #104]	; (8832c <_free_r+0x194>)
   882c4:	4630      	mov	r0, r6
   882c6:	6819      	ldr	r1, [r3, #0]
   882c8:	f7ff ff18 	bl	880fc <_malloc_trim_r>
   882cc:	e7ae      	b.n	8822c <_free_r+0x94>
   882ce:	2101      	movs	r1, #1
   882d0:	e77f      	b.n	881d2 <_free_r+0x3a>
   882d2:	2a14      	cmp	r2, #20
   882d4:	d80b      	bhi.n	882ee <_free_r+0x156>
   882d6:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   882da:	0041      	lsls	r1, r0, #1
   882dc:	e792      	b.n	88204 <_free_r+0x6c>
   882de:	1080      	asrs	r0, r0, #2
   882e0:	2501      	movs	r5, #1
   882e2:	4085      	lsls	r5, r0
   882e4:	6848      	ldr	r0, [r1, #4]
   882e6:	4613      	mov	r3, r2
   882e8:	4328      	orrs	r0, r5
   882ea:	6048      	str	r0, [r1, #4]
   882ec:	e79a      	b.n	88224 <_free_r+0x8c>
   882ee:	2a54      	cmp	r2, #84	; 0x54
   882f0:	d803      	bhi.n	882fa <_free_r+0x162>
   882f2:	0b18      	lsrs	r0, r3, #12
   882f4:	306e      	adds	r0, #110	; 0x6e
   882f6:	0041      	lsls	r1, r0, #1
   882f8:	e784      	b.n	88204 <_free_r+0x6c>
   882fa:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   882fe:	d803      	bhi.n	88308 <_free_r+0x170>
   88300:	0bd8      	lsrs	r0, r3, #15
   88302:	3077      	adds	r0, #119	; 0x77
   88304:	0041      	lsls	r1, r0, #1
   88306:	e77d      	b.n	88204 <_free_r+0x6c>
   88308:	f240 5154 	movw	r1, #1364	; 0x554
   8830c:	428a      	cmp	r2, r1
   8830e:	d803      	bhi.n	88318 <_free_r+0x180>
   88310:	0c98      	lsrs	r0, r3, #18
   88312:	307c      	adds	r0, #124	; 0x7c
   88314:	0041      	lsls	r1, r0, #1
   88316:	e775      	b.n	88204 <_free_r+0x6c>
   88318:	21fc      	movs	r1, #252	; 0xfc
   8831a:	207e      	movs	r0, #126	; 0x7e
   8831c:	e772      	b.n	88204 <_free_r+0x6c>
   8831e:	bf00      	nop
   88320:	20070640 	.word	0x20070640
   88324:	20070648 	.word	0x20070648
   88328:	20070a48 	.word	0x20070a48
   8832c:	20078d8c 	.word	0x20078d8c

00088330 <__sfvwrite_r>:
   88330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88334:	6893      	ldr	r3, [r2, #8]
   88336:	b083      	sub	sp, #12
   88338:	4616      	mov	r6, r2
   8833a:	4681      	mov	r9, r0
   8833c:	460c      	mov	r4, r1
   8833e:	b32b      	cbz	r3, 8838c <__sfvwrite_r+0x5c>
   88340:	898b      	ldrh	r3, [r1, #12]
   88342:	0719      	lsls	r1, r3, #28
   88344:	d526      	bpl.n	88394 <__sfvwrite_r+0x64>
   88346:	6922      	ldr	r2, [r4, #16]
   88348:	b322      	cbz	r2, 88394 <__sfvwrite_r+0x64>
   8834a:	f003 0202 	and.w	r2, r3, #2
   8834e:	b292      	uxth	r2, r2
   88350:	6835      	ldr	r5, [r6, #0]
   88352:	2a00      	cmp	r2, #0
   88354:	d02c      	beq.n	883b0 <__sfvwrite_r+0x80>
   88356:	f04f 0a00 	mov.w	sl, #0
   8835a:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 88644 <__sfvwrite_r+0x314>
   8835e:	46d0      	mov	r8, sl
   88360:	45d8      	cmp	r8, fp
   88362:	bf34      	ite	cc
   88364:	4643      	movcc	r3, r8
   88366:	465b      	movcs	r3, fp
   88368:	4652      	mov	r2, sl
   8836a:	4648      	mov	r0, r9
   8836c:	f1b8 0f00 	cmp.w	r8, #0
   88370:	d04f      	beq.n	88412 <__sfvwrite_r+0xe2>
   88372:	69e1      	ldr	r1, [r4, #28]
   88374:	6a67      	ldr	r7, [r4, #36]	; 0x24
   88376:	47b8      	blx	r7
   88378:	2800      	cmp	r0, #0
   8837a:	dd56      	ble.n	8842a <__sfvwrite_r+0xfa>
   8837c:	68b3      	ldr	r3, [r6, #8]
   8837e:	4482      	add	sl, r0
   88380:	1a1b      	subs	r3, r3, r0
   88382:	ebc0 0808 	rsb	r8, r0, r8
   88386:	60b3      	str	r3, [r6, #8]
   88388:	2b00      	cmp	r3, #0
   8838a:	d1e9      	bne.n	88360 <__sfvwrite_r+0x30>
   8838c:	2000      	movs	r0, #0
   8838e:	b003      	add	sp, #12
   88390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88394:	4648      	mov	r0, r9
   88396:	4621      	mov	r1, r4
   88398:	f7fe fcd2 	bl	86d40 <__swsetup_r>
   8839c:	2800      	cmp	r0, #0
   8839e:	f040 8148 	bne.w	88632 <__sfvwrite_r+0x302>
   883a2:	89a3      	ldrh	r3, [r4, #12]
   883a4:	6835      	ldr	r5, [r6, #0]
   883a6:	f003 0202 	and.w	r2, r3, #2
   883aa:	b292      	uxth	r2, r2
   883ac:	2a00      	cmp	r2, #0
   883ae:	d1d2      	bne.n	88356 <__sfvwrite_r+0x26>
   883b0:	f013 0a01 	ands.w	sl, r3, #1
   883b4:	d142      	bne.n	8843c <__sfvwrite_r+0x10c>
   883b6:	46d0      	mov	r8, sl
   883b8:	f1b8 0f00 	cmp.w	r8, #0
   883bc:	d023      	beq.n	88406 <__sfvwrite_r+0xd6>
   883be:	059a      	lsls	r2, r3, #22
   883c0:	68a7      	ldr	r7, [r4, #8]
   883c2:	d576      	bpl.n	884b2 <__sfvwrite_r+0x182>
   883c4:	45b8      	cmp	r8, r7
   883c6:	f0c0 80a4 	bcc.w	88512 <__sfvwrite_r+0x1e2>
   883ca:	f413 6f90 	tst.w	r3, #1152	; 0x480
   883ce:	f040 80b2 	bne.w	88536 <__sfvwrite_r+0x206>
   883d2:	6820      	ldr	r0, [r4, #0]
   883d4:	46bb      	mov	fp, r7
   883d6:	4651      	mov	r1, sl
   883d8:	465a      	mov	r2, fp
   883da:	f000 fcc5 	bl	88d68 <memmove>
   883de:	68a2      	ldr	r2, [r4, #8]
   883e0:	6821      	ldr	r1, [r4, #0]
   883e2:	1bd2      	subs	r2, r2, r7
   883e4:	eb01 030b 	add.w	r3, r1, fp
   883e8:	60a2      	str	r2, [r4, #8]
   883ea:	6023      	str	r3, [r4, #0]
   883ec:	4642      	mov	r2, r8
   883ee:	68b3      	ldr	r3, [r6, #8]
   883f0:	4492      	add	sl, r2
   883f2:	1a9b      	subs	r3, r3, r2
   883f4:	ebc2 0808 	rsb	r8, r2, r8
   883f8:	60b3      	str	r3, [r6, #8]
   883fa:	2b00      	cmp	r3, #0
   883fc:	d0c6      	beq.n	8838c <__sfvwrite_r+0x5c>
   883fe:	89a3      	ldrh	r3, [r4, #12]
   88400:	f1b8 0f00 	cmp.w	r8, #0
   88404:	d1db      	bne.n	883be <__sfvwrite_r+0x8e>
   88406:	f8d5 a000 	ldr.w	sl, [r5]
   8840a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8840e:	3508      	adds	r5, #8
   88410:	e7d2      	b.n	883b8 <__sfvwrite_r+0x88>
   88412:	f8d5 a000 	ldr.w	sl, [r5]
   88416:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8841a:	3508      	adds	r5, #8
   8841c:	e7a0      	b.n	88360 <__sfvwrite_r+0x30>
   8841e:	4648      	mov	r0, r9
   88420:	4621      	mov	r1, r4
   88422:	f7ff fd59 	bl	87ed8 <_fflush_r>
   88426:	2800      	cmp	r0, #0
   88428:	d059      	beq.n	884de <__sfvwrite_r+0x1ae>
   8842a:	89a3      	ldrh	r3, [r4, #12]
   8842c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88430:	f04f 30ff 	mov.w	r0, #4294967295
   88434:	81a3      	strh	r3, [r4, #12]
   88436:	b003      	add	sp, #12
   88438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8843c:	4692      	mov	sl, r2
   8843e:	9201      	str	r2, [sp, #4]
   88440:	4693      	mov	fp, r2
   88442:	4690      	mov	r8, r2
   88444:	f1b8 0f00 	cmp.w	r8, #0
   88448:	d02b      	beq.n	884a2 <__sfvwrite_r+0x172>
   8844a:	9f01      	ldr	r7, [sp, #4]
   8844c:	2f00      	cmp	r7, #0
   8844e:	d064      	beq.n	8851a <__sfvwrite_r+0x1ea>
   88450:	6820      	ldr	r0, [r4, #0]
   88452:	6921      	ldr	r1, [r4, #16]
   88454:	45c2      	cmp	sl, r8
   88456:	bf34      	ite	cc
   88458:	4653      	movcc	r3, sl
   8845a:	4643      	movcs	r3, r8
   8845c:	4288      	cmp	r0, r1
   8845e:	461f      	mov	r7, r3
   88460:	f8d4 c008 	ldr.w	ip, [r4, #8]
   88464:	6962      	ldr	r2, [r4, #20]
   88466:	d903      	bls.n	88470 <__sfvwrite_r+0x140>
   88468:	4494      	add	ip, r2
   8846a:	4563      	cmp	r3, ip
   8846c:	f300 80ae 	bgt.w	885cc <__sfvwrite_r+0x29c>
   88470:	4293      	cmp	r3, r2
   88472:	db36      	blt.n	884e2 <__sfvwrite_r+0x1b2>
   88474:	4613      	mov	r3, r2
   88476:	6a67      	ldr	r7, [r4, #36]	; 0x24
   88478:	4648      	mov	r0, r9
   8847a:	69e1      	ldr	r1, [r4, #28]
   8847c:	465a      	mov	r2, fp
   8847e:	47b8      	blx	r7
   88480:	1e07      	subs	r7, r0, #0
   88482:	ddd2      	ble.n	8842a <__sfvwrite_r+0xfa>
   88484:	ebba 0a07 	subs.w	sl, sl, r7
   88488:	d03a      	beq.n	88500 <__sfvwrite_r+0x1d0>
   8848a:	68b3      	ldr	r3, [r6, #8]
   8848c:	44bb      	add	fp, r7
   8848e:	1bdb      	subs	r3, r3, r7
   88490:	ebc7 0808 	rsb	r8, r7, r8
   88494:	60b3      	str	r3, [r6, #8]
   88496:	2b00      	cmp	r3, #0
   88498:	f43f af78 	beq.w	8838c <__sfvwrite_r+0x5c>
   8849c:	f1b8 0f00 	cmp.w	r8, #0
   884a0:	d1d3      	bne.n	8844a <__sfvwrite_r+0x11a>
   884a2:	2700      	movs	r7, #0
   884a4:	f8d5 b000 	ldr.w	fp, [r5]
   884a8:	f8d5 8004 	ldr.w	r8, [r5, #4]
   884ac:	9701      	str	r7, [sp, #4]
   884ae:	3508      	adds	r5, #8
   884b0:	e7c8      	b.n	88444 <__sfvwrite_r+0x114>
   884b2:	6820      	ldr	r0, [r4, #0]
   884b4:	6923      	ldr	r3, [r4, #16]
   884b6:	4298      	cmp	r0, r3
   884b8:	d802      	bhi.n	884c0 <__sfvwrite_r+0x190>
   884ba:	6963      	ldr	r3, [r4, #20]
   884bc:	4598      	cmp	r8, r3
   884be:	d272      	bcs.n	885a6 <__sfvwrite_r+0x276>
   884c0:	45b8      	cmp	r8, r7
   884c2:	bf38      	it	cc
   884c4:	4647      	movcc	r7, r8
   884c6:	463a      	mov	r2, r7
   884c8:	4651      	mov	r1, sl
   884ca:	f000 fc4d 	bl	88d68 <memmove>
   884ce:	68a3      	ldr	r3, [r4, #8]
   884d0:	6822      	ldr	r2, [r4, #0]
   884d2:	1bdb      	subs	r3, r3, r7
   884d4:	443a      	add	r2, r7
   884d6:	60a3      	str	r3, [r4, #8]
   884d8:	6022      	str	r2, [r4, #0]
   884da:	2b00      	cmp	r3, #0
   884dc:	d09f      	beq.n	8841e <__sfvwrite_r+0xee>
   884de:	463a      	mov	r2, r7
   884e0:	e785      	b.n	883ee <__sfvwrite_r+0xbe>
   884e2:	461a      	mov	r2, r3
   884e4:	4659      	mov	r1, fp
   884e6:	9300      	str	r3, [sp, #0]
   884e8:	f000 fc3e 	bl	88d68 <memmove>
   884ec:	9b00      	ldr	r3, [sp, #0]
   884ee:	68a1      	ldr	r1, [r4, #8]
   884f0:	6822      	ldr	r2, [r4, #0]
   884f2:	1ac9      	subs	r1, r1, r3
   884f4:	ebba 0a07 	subs.w	sl, sl, r7
   884f8:	4413      	add	r3, r2
   884fa:	60a1      	str	r1, [r4, #8]
   884fc:	6023      	str	r3, [r4, #0]
   884fe:	d1c4      	bne.n	8848a <__sfvwrite_r+0x15a>
   88500:	4648      	mov	r0, r9
   88502:	4621      	mov	r1, r4
   88504:	f7ff fce8 	bl	87ed8 <_fflush_r>
   88508:	2800      	cmp	r0, #0
   8850a:	d18e      	bne.n	8842a <__sfvwrite_r+0xfa>
   8850c:	f8cd a004 	str.w	sl, [sp, #4]
   88510:	e7bb      	b.n	8848a <__sfvwrite_r+0x15a>
   88512:	6820      	ldr	r0, [r4, #0]
   88514:	4647      	mov	r7, r8
   88516:	46c3      	mov	fp, r8
   88518:	e75d      	b.n	883d6 <__sfvwrite_r+0xa6>
   8851a:	4658      	mov	r0, fp
   8851c:	210a      	movs	r1, #10
   8851e:	4642      	mov	r2, r8
   88520:	f000 fbd8 	bl	88cd4 <memchr>
   88524:	2800      	cmp	r0, #0
   88526:	d07f      	beq.n	88628 <__sfvwrite_r+0x2f8>
   88528:	f100 0a01 	add.w	sl, r0, #1
   8852c:	2701      	movs	r7, #1
   8852e:	ebcb 0a0a 	rsb	sl, fp, sl
   88532:	9701      	str	r7, [sp, #4]
   88534:	e78c      	b.n	88450 <__sfvwrite_r+0x120>
   88536:	6822      	ldr	r2, [r4, #0]
   88538:	6921      	ldr	r1, [r4, #16]
   8853a:	6967      	ldr	r7, [r4, #20]
   8853c:	ebc1 0c02 	rsb	ip, r1, r2
   88540:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   88544:	f10c 0201 	add.w	r2, ip, #1
   88548:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8854c:	4442      	add	r2, r8
   8854e:	107f      	asrs	r7, r7, #1
   88550:	4297      	cmp	r7, r2
   88552:	bf34      	ite	cc
   88554:	4617      	movcc	r7, r2
   88556:	463a      	movcs	r2, r7
   88558:	055b      	lsls	r3, r3, #21
   8855a:	d54f      	bpl.n	885fc <__sfvwrite_r+0x2cc>
   8855c:	4611      	mov	r1, r2
   8855e:	4648      	mov	r0, r9
   88560:	f8cd c000 	str.w	ip, [sp]
   88564:	f000 f91a 	bl	8879c <_malloc_r>
   88568:	f8dd c000 	ldr.w	ip, [sp]
   8856c:	4683      	mov	fp, r0
   8856e:	2800      	cmp	r0, #0
   88570:	d062      	beq.n	88638 <__sfvwrite_r+0x308>
   88572:	4662      	mov	r2, ip
   88574:	6921      	ldr	r1, [r4, #16]
   88576:	f8cd c000 	str.w	ip, [sp]
   8857a:	f7fc f8fd 	bl	84778 <memcpy>
   8857e:	89a2      	ldrh	r2, [r4, #12]
   88580:	f8dd c000 	ldr.w	ip, [sp]
   88584:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   88588:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8858c:	81a2      	strh	r2, [r4, #12]
   8858e:	eb0b 000c 	add.w	r0, fp, ip
   88592:	ebcc 0207 	rsb	r2, ip, r7
   88596:	f8c4 b010 	str.w	fp, [r4, #16]
   8859a:	6167      	str	r7, [r4, #20]
   8859c:	6020      	str	r0, [r4, #0]
   8859e:	60a2      	str	r2, [r4, #8]
   885a0:	4647      	mov	r7, r8
   885a2:	46c3      	mov	fp, r8
   885a4:	e717      	b.n	883d6 <__sfvwrite_r+0xa6>
   885a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   885aa:	4590      	cmp	r8, r2
   885ac:	bf38      	it	cc
   885ae:	4642      	movcc	r2, r8
   885b0:	fb92 f2f3 	sdiv	r2, r2, r3
   885b4:	fb02 f303 	mul.w	r3, r2, r3
   885b8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   885ba:	4648      	mov	r0, r9
   885bc:	69e1      	ldr	r1, [r4, #28]
   885be:	4652      	mov	r2, sl
   885c0:	47b8      	blx	r7
   885c2:	2800      	cmp	r0, #0
   885c4:	f77f af31 	ble.w	8842a <__sfvwrite_r+0xfa>
   885c8:	4602      	mov	r2, r0
   885ca:	e710      	b.n	883ee <__sfvwrite_r+0xbe>
   885cc:	4662      	mov	r2, ip
   885ce:	4659      	mov	r1, fp
   885d0:	f8cd c000 	str.w	ip, [sp]
   885d4:	f000 fbc8 	bl	88d68 <memmove>
   885d8:	f8dd c000 	ldr.w	ip, [sp]
   885dc:	6823      	ldr	r3, [r4, #0]
   885de:	4648      	mov	r0, r9
   885e0:	4463      	add	r3, ip
   885e2:	6023      	str	r3, [r4, #0]
   885e4:	4621      	mov	r1, r4
   885e6:	f8cd c000 	str.w	ip, [sp]
   885ea:	f7ff fc75 	bl	87ed8 <_fflush_r>
   885ee:	f8dd c000 	ldr.w	ip, [sp]
   885f2:	2800      	cmp	r0, #0
   885f4:	f47f af19 	bne.w	8842a <__sfvwrite_r+0xfa>
   885f8:	4667      	mov	r7, ip
   885fa:	e743      	b.n	88484 <__sfvwrite_r+0x154>
   885fc:	4648      	mov	r0, r9
   885fe:	f8cd c000 	str.w	ip, [sp]
   88602:	f000 ff25 	bl	89450 <_realloc_r>
   88606:	f8dd c000 	ldr.w	ip, [sp]
   8860a:	4683      	mov	fp, r0
   8860c:	2800      	cmp	r0, #0
   8860e:	d1be      	bne.n	8858e <__sfvwrite_r+0x25e>
   88610:	4648      	mov	r0, r9
   88612:	6921      	ldr	r1, [r4, #16]
   88614:	f7ff fdc0 	bl	88198 <_free_r>
   88618:	89a3      	ldrh	r3, [r4, #12]
   8861a:	220c      	movs	r2, #12
   8861c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   88620:	b29b      	uxth	r3, r3
   88622:	f8c9 2000 	str.w	r2, [r9]
   88626:	e701      	b.n	8842c <__sfvwrite_r+0xfc>
   88628:	2701      	movs	r7, #1
   8862a:	f108 0a01 	add.w	sl, r8, #1
   8862e:	9701      	str	r7, [sp, #4]
   88630:	e70e      	b.n	88450 <__sfvwrite_r+0x120>
   88632:	f04f 30ff 	mov.w	r0, #4294967295
   88636:	e6aa      	b.n	8838e <__sfvwrite_r+0x5e>
   88638:	230c      	movs	r3, #12
   8863a:	f8c9 3000 	str.w	r3, [r9]
   8863e:	89a3      	ldrh	r3, [r4, #12]
   88640:	e6f4      	b.n	8842c <__sfvwrite_r+0xfc>
   88642:	bf00      	nop
   88644:	7ffffc00 	.word	0x7ffffc00

00088648 <_fwalk>:
   88648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8864c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   88650:	4688      	mov	r8, r1
   88652:	d019      	beq.n	88688 <_fwalk+0x40>
   88654:	2600      	movs	r6, #0
   88656:	687d      	ldr	r5, [r7, #4]
   88658:	68bc      	ldr	r4, [r7, #8]
   8865a:	3d01      	subs	r5, #1
   8865c:	d40e      	bmi.n	8867c <_fwalk+0x34>
   8865e:	89a3      	ldrh	r3, [r4, #12]
   88660:	3d01      	subs	r5, #1
   88662:	2b01      	cmp	r3, #1
   88664:	d906      	bls.n	88674 <_fwalk+0x2c>
   88666:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8866a:	4620      	mov	r0, r4
   8866c:	3301      	adds	r3, #1
   8866e:	d001      	beq.n	88674 <_fwalk+0x2c>
   88670:	47c0      	blx	r8
   88672:	4306      	orrs	r6, r0
   88674:	1c6b      	adds	r3, r5, #1
   88676:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8867a:	d1f0      	bne.n	8865e <_fwalk+0x16>
   8867c:	683f      	ldr	r7, [r7, #0]
   8867e:	2f00      	cmp	r7, #0
   88680:	d1e9      	bne.n	88656 <_fwalk+0xe>
   88682:	4630      	mov	r0, r6
   88684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   88688:	463e      	mov	r6, r7
   8868a:	4630      	mov	r0, r6
   8868c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00088690 <__locale_charset>:
   88690:	4800      	ldr	r0, [pc, #0]	; (88694 <__locale_charset+0x4>)
   88692:	4770      	bx	lr
   88694:	2007061c 	.word	0x2007061c

00088698 <__locale_mb_cur_max>:
   88698:	4b01      	ldr	r3, [pc, #4]	; (886a0 <__locale_mb_cur_max+0x8>)
   8869a:	6818      	ldr	r0, [r3, #0]
   8869c:	4770      	bx	lr
   8869e:	bf00      	nop
   886a0:	2007063c 	.word	0x2007063c

000886a4 <_localeconv_r>:
   886a4:	4800      	ldr	r0, [pc, #0]	; (886a8 <_localeconv_r+0x4>)
   886a6:	4770      	bx	lr
   886a8:	200705e4 	.word	0x200705e4

000886ac <__smakebuf_r>:
   886ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   886ae:	898b      	ldrh	r3, [r1, #12]
   886b0:	b091      	sub	sp, #68	; 0x44
   886b2:	b29a      	uxth	r2, r3
   886b4:	0796      	lsls	r6, r2, #30
   886b6:	460c      	mov	r4, r1
   886b8:	4605      	mov	r5, r0
   886ba:	d437      	bmi.n	8872c <__smakebuf_r+0x80>
   886bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   886c0:	2900      	cmp	r1, #0
   886c2:	db17      	blt.n	886f4 <__smakebuf_r+0x48>
   886c4:	aa01      	add	r2, sp, #4
   886c6:	f001 faf3 	bl	89cb0 <_fstat_r>
   886ca:	2800      	cmp	r0, #0
   886cc:	db10      	blt.n	886f0 <__smakebuf_r+0x44>
   886ce:	9b02      	ldr	r3, [sp, #8]
   886d0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   886d4:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   886d8:	424f      	negs	r7, r1
   886da:	414f      	adcs	r7, r1
   886dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   886e0:	d02c      	beq.n	8873c <__smakebuf_r+0x90>
   886e2:	89a3      	ldrh	r3, [r4, #12]
   886e4:	f44f 6680 	mov.w	r6, #1024	; 0x400
   886e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   886ec:	81a3      	strh	r3, [r4, #12]
   886ee:	e00b      	b.n	88708 <__smakebuf_r+0x5c>
   886f0:	89a3      	ldrh	r3, [r4, #12]
   886f2:	b29a      	uxth	r2, r3
   886f4:	f012 0f80 	tst.w	r2, #128	; 0x80
   886f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   886fc:	81a3      	strh	r3, [r4, #12]
   886fe:	bf14      	ite	ne
   88700:	2640      	movne	r6, #64	; 0x40
   88702:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   88706:	2700      	movs	r7, #0
   88708:	4628      	mov	r0, r5
   8870a:	4631      	mov	r1, r6
   8870c:	f000 f846 	bl	8879c <_malloc_r>
   88710:	89a3      	ldrh	r3, [r4, #12]
   88712:	2800      	cmp	r0, #0
   88714:	d029      	beq.n	8876a <__smakebuf_r+0xbe>
   88716:	4a1b      	ldr	r2, [pc, #108]	; (88784 <__smakebuf_r+0xd8>)
   88718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8871c:	63ea      	str	r2, [r5, #60]	; 0x3c
   8871e:	81a3      	strh	r3, [r4, #12]
   88720:	6020      	str	r0, [r4, #0]
   88722:	6120      	str	r0, [r4, #16]
   88724:	6166      	str	r6, [r4, #20]
   88726:	b9a7      	cbnz	r7, 88752 <__smakebuf_r+0xa6>
   88728:	b011      	add	sp, #68	; 0x44
   8872a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8872c:	f101 0343 	add.w	r3, r1, #67	; 0x43
   88730:	2201      	movs	r2, #1
   88732:	600b      	str	r3, [r1, #0]
   88734:	610b      	str	r3, [r1, #16]
   88736:	614a      	str	r2, [r1, #20]
   88738:	b011      	add	sp, #68	; 0x44
   8873a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8873c:	4a12      	ldr	r2, [pc, #72]	; (88788 <__smakebuf_r+0xdc>)
   8873e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   88740:	4293      	cmp	r3, r2
   88742:	d1ce      	bne.n	886e2 <__smakebuf_r+0x36>
   88744:	89a3      	ldrh	r3, [r4, #12]
   88746:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8874a:	4333      	orrs	r3, r6
   8874c:	81a3      	strh	r3, [r4, #12]
   8874e:	64e6      	str	r6, [r4, #76]	; 0x4c
   88750:	e7da      	b.n	88708 <__smakebuf_r+0x5c>
   88752:	4628      	mov	r0, r5
   88754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   88758:	f001 fabe 	bl	89cd8 <_isatty_r>
   8875c:	2800      	cmp	r0, #0
   8875e:	d0e3      	beq.n	88728 <__smakebuf_r+0x7c>
   88760:	89a3      	ldrh	r3, [r4, #12]
   88762:	f043 0301 	orr.w	r3, r3, #1
   88766:	81a3      	strh	r3, [r4, #12]
   88768:	e7de      	b.n	88728 <__smakebuf_r+0x7c>
   8876a:	059a      	lsls	r2, r3, #22
   8876c:	d4dc      	bmi.n	88728 <__smakebuf_r+0x7c>
   8876e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   88772:	f043 0302 	orr.w	r3, r3, #2
   88776:	2101      	movs	r1, #1
   88778:	81a3      	strh	r3, [r4, #12]
   8877a:	6022      	str	r2, [r4, #0]
   8877c:	6122      	str	r2, [r4, #16]
   8877e:	6161      	str	r1, [r4, #20]
   88780:	e7d2      	b.n	88728 <__smakebuf_r+0x7c>
   88782:	bf00      	nop
   88784:	00087f05 	.word	0x00087f05
   88788:	00089891 	.word	0x00089891

0008878c <malloc>:
   8878c:	4b02      	ldr	r3, [pc, #8]	; (88798 <malloc+0xc>)
   8878e:	4601      	mov	r1, r0
   88790:	6818      	ldr	r0, [r3, #0]
   88792:	f000 b803 	b.w	8879c <_malloc_r>
   88796:	bf00      	nop
   88798:	200705e0 	.word	0x200705e0

0008879c <_malloc_r>:
   8879c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   887a0:	f101 050b 	add.w	r5, r1, #11
   887a4:	2d16      	cmp	r5, #22
   887a6:	b083      	sub	sp, #12
   887a8:	4606      	mov	r6, r0
   887aa:	d927      	bls.n	887fc <_malloc_r+0x60>
   887ac:	f035 0507 	bics.w	r5, r5, #7
   887b0:	d427      	bmi.n	88802 <_malloc_r+0x66>
   887b2:	42a9      	cmp	r1, r5
   887b4:	d825      	bhi.n	88802 <_malloc_r+0x66>
   887b6:	4630      	mov	r0, r6
   887b8:	f000 fb3c 	bl	88e34 <__malloc_lock>
   887bc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   887c0:	d226      	bcs.n	88810 <_malloc_r+0x74>
   887c2:	4fc1      	ldr	r7, [pc, #772]	; (88ac8 <_malloc_r+0x32c>)
   887c4:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   887c8:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   887cc:	68dc      	ldr	r4, [r3, #12]
   887ce:	429c      	cmp	r4, r3
   887d0:	f000 81d2 	beq.w	88b78 <_malloc_r+0x3dc>
   887d4:	6863      	ldr	r3, [r4, #4]
   887d6:	68e2      	ldr	r2, [r4, #12]
   887d8:	f023 0303 	bic.w	r3, r3, #3
   887dc:	4423      	add	r3, r4
   887de:	6858      	ldr	r0, [r3, #4]
   887e0:	68a1      	ldr	r1, [r4, #8]
   887e2:	f040 0501 	orr.w	r5, r0, #1
   887e6:	60ca      	str	r2, [r1, #12]
   887e8:	4630      	mov	r0, r6
   887ea:	6091      	str	r1, [r2, #8]
   887ec:	605d      	str	r5, [r3, #4]
   887ee:	f000 fb23 	bl	88e38 <__malloc_unlock>
   887f2:	3408      	adds	r4, #8
   887f4:	4620      	mov	r0, r4
   887f6:	b003      	add	sp, #12
   887f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   887fc:	2510      	movs	r5, #16
   887fe:	42a9      	cmp	r1, r5
   88800:	d9d9      	bls.n	887b6 <_malloc_r+0x1a>
   88802:	2400      	movs	r4, #0
   88804:	230c      	movs	r3, #12
   88806:	4620      	mov	r0, r4
   88808:	6033      	str	r3, [r6, #0]
   8880a:	b003      	add	sp, #12
   8880c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88810:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   88814:	f000 8089 	beq.w	8892a <_malloc_r+0x18e>
   88818:	f1bc 0f04 	cmp.w	ip, #4
   8881c:	f200 8160 	bhi.w	88ae0 <_malloc_r+0x344>
   88820:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   88824:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   88828:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8882c:	4fa6      	ldr	r7, [pc, #664]	; (88ac8 <_malloc_r+0x32c>)
   8882e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   88832:	68cc      	ldr	r4, [r1, #12]
   88834:	42a1      	cmp	r1, r4
   88836:	d105      	bne.n	88844 <_malloc_r+0xa8>
   88838:	e00c      	b.n	88854 <_malloc_r+0xb8>
   8883a:	2b00      	cmp	r3, #0
   8883c:	da79      	bge.n	88932 <_malloc_r+0x196>
   8883e:	68e4      	ldr	r4, [r4, #12]
   88840:	42a1      	cmp	r1, r4
   88842:	d007      	beq.n	88854 <_malloc_r+0xb8>
   88844:	6862      	ldr	r2, [r4, #4]
   88846:	f022 0203 	bic.w	r2, r2, #3
   8884a:	1b53      	subs	r3, r2, r5
   8884c:	2b0f      	cmp	r3, #15
   8884e:	ddf4      	ble.n	8883a <_malloc_r+0x9e>
   88850:	f10c 3cff 	add.w	ip, ip, #4294967295
   88854:	f10c 0c01 	add.w	ip, ip, #1
   88858:	4b9b      	ldr	r3, [pc, #620]	; (88ac8 <_malloc_r+0x32c>)
   8885a:	693c      	ldr	r4, [r7, #16]
   8885c:	f103 0e08 	add.w	lr, r3, #8
   88860:	4574      	cmp	r4, lr
   88862:	f000 817e 	beq.w	88b62 <_malloc_r+0x3c6>
   88866:	6861      	ldr	r1, [r4, #4]
   88868:	f021 0103 	bic.w	r1, r1, #3
   8886c:	1b4a      	subs	r2, r1, r5
   8886e:	2a0f      	cmp	r2, #15
   88870:	f300 8164 	bgt.w	88b3c <_malloc_r+0x3a0>
   88874:	2a00      	cmp	r2, #0
   88876:	f8c3 e014 	str.w	lr, [r3, #20]
   8887a:	f8c3 e010 	str.w	lr, [r3, #16]
   8887e:	da69      	bge.n	88954 <_malloc_r+0x1b8>
   88880:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   88884:	f080 813a 	bcs.w	88afc <_malloc_r+0x360>
   88888:	08c9      	lsrs	r1, r1, #3
   8888a:	108a      	asrs	r2, r1, #2
   8888c:	f04f 0801 	mov.w	r8, #1
   88890:	fa08 f802 	lsl.w	r8, r8, r2
   88894:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   88898:	685a      	ldr	r2, [r3, #4]
   8889a:	6888      	ldr	r0, [r1, #8]
   8889c:	ea48 0202 	orr.w	r2, r8, r2
   888a0:	60a0      	str	r0, [r4, #8]
   888a2:	60e1      	str	r1, [r4, #12]
   888a4:	605a      	str	r2, [r3, #4]
   888a6:	608c      	str	r4, [r1, #8]
   888a8:	60c4      	str	r4, [r0, #12]
   888aa:	ea4f 03ac 	mov.w	r3, ip, asr #2
   888ae:	2001      	movs	r0, #1
   888b0:	4098      	lsls	r0, r3
   888b2:	4290      	cmp	r0, r2
   888b4:	d85b      	bhi.n	8896e <_malloc_r+0x1d2>
   888b6:	4202      	tst	r2, r0
   888b8:	d106      	bne.n	888c8 <_malloc_r+0x12c>
   888ba:	f02c 0c03 	bic.w	ip, ip, #3
   888be:	0040      	lsls	r0, r0, #1
   888c0:	4202      	tst	r2, r0
   888c2:	f10c 0c04 	add.w	ip, ip, #4
   888c6:	d0fa      	beq.n	888be <_malloc_r+0x122>
   888c8:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   888cc:	4644      	mov	r4, r8
   888ce:	46e1      	mov	r9, ip
   888d0:	68e3      	ldr	r3, [r4, #12]
   888d2:	429c      	cmp	r4, r3
   888d4:	d107      	bne.n	888e6 <_malloc_r+0x14a>
   888d6:	e146      	b.n	88b66 <_malloc_r+0x3ca>
   888d8:	2a00      	cmp	r2, #0
   888da:	f280 8157 	bge.w	88b8c <_malloc_r+0x3f0>
   888de:	68db      	ldr	r3, [r3, #12]
   888e0:	429c      	cmp	r4, r3
   888e2:	f000 8140 	beq.w	88b66 <_malloc_r+0x3ca>
   888e6:	6859      	ldr	r1, [r3, #4]
   888e8:	f021 0103 	bic.w	r1, r1, #3
   888ec:	1b4a      	subs	r2, r1, r5
   888ee:	2a0f      	cmp	r2, #15
   888f0:	ddf2      	ble.n	888d8 <_malloc_r+0x13c>
   888f2:	461c      	mov	r4, r3
   888f4:	f854 cf08 	ldr.w	ip, [r4, #8]!
   888f8:	68d9      	ldr	r1, [r3, #12]
   888fa:	f045 0901 	orr.w	r9, r5, #1
   888fe:	f042 0801 	orr.w	r8, r2, #1
   88902:	441d      	add	r5, r3
   88904:	f8c3 9004 	str.w	r9, [r3, #4]
   88908:	4630      	mov	r0, r6
   8890a:	f8cc 100c 	str.w	r1, [ip, #12]
   8890e:	f8c1 c008 	str.w	ip, [r1, #8]
   88912:	617d      	str	r5, [r7, #20]
   88914:	613d      	str	r5, [r7, #16]
   88916:	f8c5 e00c 	str.w	lr, [r5, #12]
   8891a:	f8c5 e008 	str.w	lr, [r5, #8]
   8891e:	f8c5 8004 	str.w	r8, [r5, #4]
   88922:	50aa      	str	r2, [r5, r2]
   88924:	f000 fa88 	bl	88e38 <__malloc_unlock>
   88928:	e764      	b.n	887f4 <_malloc_r+0x58>
   8892a:	217e      	movs	r1, #126	; 0x7e
   8892c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   88930:	e77c      	b.n	8882c <_malloc_r+0x90>
   88932:	4422      	add	r2, r4
   88934:	6850      	ldr	r0, [r2, #4]
   88936:	68e3      	ldr	r3, [r4, #12]
   88938:	68a1      	ldr	r1, [r4, #8]
   8893a:	f040 0501 	orr.w	r5, r0, #1
   8893e:	60cb      	str	r3, [r1, #12]
   88940:	4630      	mov	r0, r6
   88942:	6099      	str	r1, [r3, #8]
   88944:	6055      	str	r5, [r2, #4]
   88946:	f000 fa77 	bl	88e38 <__malloc_unlock>
   8894a:	3408      	adds	r4, #8
   8894c:	4620      	mov	r0, r4
   8894e:	b003      	add	sp, #12
   88950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88954:	4421      	add	r1, r4
   88956:	684b      	ldr	r3, [r1, #4]
   88958:	4630      	mov	r0, r6
   8895a:	f043 0301 	orr.w	r3, r3, #1
   8895e:	604b      	str	r3, [r1, #4]
   88960:	f000 fa6a 	bl	88e38 <__malloc_unlock>
   88964:	3408      	adds	r4, #8
   88966:	4620      	mov	r0, r4
   88968:	b003      	add	sp, #12
   8896a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8896e:	68bc      	ldr	r4, [r7, #8]
   88970:	6863      	ldr	r3, [r4, #4]
   88972:	f023 0903 	bic.w	r9, r3, #3
   88976:	45a9      	cmp	r9, r5
   88978:	d304      	bcc.n	88984 <_malloc_r+0x1e8>
   8897a:	ebc5 0309 	rsb	r3, r5, r9
   8897e:	2b0f      	cmp	r3, #15
   88980:	f300 8091 	bgt.w	88aa6 <_malloc_r+0x30a>
   88984:	4b51      	ldr	r3, [pc, #324]	; (88acc <_malloc_r+0x330>)
   88986:	4a52      	ldr	r2, [pc, #328]	; (88ad0 <_malloc_r+0x334>)
   88988:	6819      	ldr	r1, [r3, #0]
   8898a:	6813      	ldr	r3, [r2, #0]
   8898c:	eb05 0a01 	add.w	sl, r5, r1
   88990:	3301      	adds	r3, #1
   88992:	eb04 0b09 	add.w	fp, r4, r9
   88996:	f000 8161 	beq.w	88c5c <_malloc_r+0x4c0>
   8899a:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   8899e:	f10a 0a0f 	add.w	sl, sl, #15
   889a2:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   889a6:	f02a 0a0f 	bic.w	sl, sl, #15
   889aa:	4630      	mov	r0, r6
   889ac:	4651      	mov	r1, sl
   889ae:	9201      	str	r2, [sp, #4]
   889b0:	f000 ff2e 	bl	89810 <_sbrk_r>
   889b4:	f1b0 3fff 	cmp.w	r0, #4294967295
   889b8:	4680      	mov	r8, r0
   889ba:	9a01      	ldr	r2, [sp, #4]
   889bc:	f000 8101 	beq.w	88bc2 <_malloc_r+0x426>
   889c0:	4583      	cmp	fp, r0
   889c2:	f200 80fb 	bhi.w	88bbc <_malloc_r+0x420>
   889c6:	f8df c114 	ldr.w	ip, [pc, #276]	; 88adc <_malloc_r+0x340>
   889ca:	45c3      	cmp	fp, r8
   889cc:	f8dc 3000 	ldr.w	r3, [ip]
   889d0:	4453      	add	r3, sl
   889d2:	f8cc 3000 	str.w	r3, [ip]
   889d6:	f000 814a 	beq.w	88c6e <_malloc_r+0x4d2>
   889da:	6812      	ldr	r2, [r2, #0]
   889dc:	493c      	ldr	r1, [pc, #240]	; (88ad0 <_malloc_r+0x334>)
   889de:	3201      	adds	r2, #1
   889e0:	bf1b      	ittet	ne
   889e2:	ebcb 0b08 	rsbne	fp, fp, r8
   889e6:	445b      	addne	r3, fp
   889e8:	f8c1 8000 	streq.w	r8, [r1]
   889ec:	f8cc 3000 	strne.w	r3, [ip]
   889f0:	f018 0307 	ands.w	r3, r8, #7
   889f4:	f000 8114 	beq.w	88c20 <_malloc_r+0x484>
   889f8:	f1c3 0208 	rsb	r2, r3, #8
   889fc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   88a00:	4490      	add	r8, r2
   88a02:	3308      	adds	r3, #8
   88a04:	44c2      	add	sl, r8
   88a06:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   88a0a:	ebca 0a03 	rsb	sl, sl, r3
   88a0e:	4651      	mov	r1, sl
   88a10:	4630      	mov	r0, r6
   88a12:	f8cd c004 	str.w	ip, [sp, #4]
   88a16:	f000 fefb 	bl	89810 <_sbrk_r>
   88a1a:	1c43      	adds	r3, r0, #1
   88a1c:	f8dd c004 	ldr.w	ip, [sp, #4]
   88a20:	f000 8135 	beq.w	88c8e <_malloc_r+0x4f2>
   88a24:	ebc8 0200 	rsb	r2, r8, r0
   88a28:	4452      	add	r2, sl
   88a2a:	f042 0201 	orr.w	r2, r2, #1
   88a2e:	f8dc 3000 	ldr.w	r3, [ip]
   88a32:	42bc      	cmp	r4, r7
   88a34:	4453      	add	r3, sl
   88a36:	f8c7 8008 	str.w	r8, [r7, #8]
   88a3a:	f8cc 3000 	str.w	r3, [ip]
   88a3e:	f8c8 2004 	str.w	r2, [r8, #4]
   88a42:	f8df a098 	ldr.w	sl, [pc, #152]	; 88adc <_malloc_r+0x340>
   88a46:	d015      	beq.n	88a74 <_malloc_r+0x2d8>
   88a48:	f1b9 0f0f 	cmp.w	r9, #15
   88a4c:	f240 80eb 	bls.w	88c26 <_malloc_r+0x48a>
   88a50:	6861      	ldr	r1, [r4, #4]
   88a52:	f1a9 020c 	sub.w	r2, r9, #12
   88a56:	f022 0207 	bic.w	r2, r2, #7
   88a5a:	f001 0101 	and.w	r1, r1, #1
   88a5e:	ea42 0e01 	orr.w	lr, r2, r1
   88a62:	2005      	movs	r0, #5
   88a64:	18a1      	adds	r1, r4, r2
   88a66:	2a0f      	cmp	r2, #15
   88a68:	f8c4 e004 	str.w	lr, [r4, #4]
   88a6c:	6048      	str	r0, [r1, #4]
   88a6e:	6088      	str	r0, [r1, #8]
   88a70:	f200 8111 	bhi.w	88c96 <_malloc_r+0x4fa>
   88a74:	4a17      	ldr	r2, [pc, #92]	; (88ad4 <_malloc_r+0x338>)
   88a76:	68bc      	ldr	r4, [r7, #8]
   88a78:	6811      	ldr	r1, [r2, #0]
   88a7a:	428b      	cmp	r3, r1
   88a7c:	bf88      	it	hi
   88a7e:	6013      	strhi	r3, [r2, #0]
   88a80:	4a15      	ldr	r2, [pc, #84]	; (88ad8 <_malloc_r+0x33c>)
   88a82:	6811      	ldr	r1, [r2, #0]
   88a84:	428b      	cmp	r3, r1
   88a86:	bf88      	it	hi
   88a88:	6013      	strhi	r3, [r2, #0]
   88a8a:	6862      	ldr	r2, [r4, #4]
   88a8c:	f022 0203 	bic.w	r2, r2, #3
   88a90:	4295      	cmp	r5, r2
   88a92:	ebc5 0302 	rsb	r3, r5, r2
   88a96:	d801      	bhi.n	88a9c <_malloc_r+0x300>
   88a98:	2b0f      	cmp	r3, #15
   88a9a:	dc04      	bgt.n	88aa6 <_malloc_r+0x30a>
   88a9c:	4630      	mov	r0, r6
   88a9e:	f000 f9cb 	bl	88e38 <__malloc_unlock>
   88aa2:	2400      	movs	r4, #0
   88aa4:	e6a6      	b.n	887f4 <_malloc_r+0x58>
   88aa6:	f045 0201 	orr.w	r2, r5, #1
   88aaa:	f043 0301 	orr.w	r3, r3, #1
   88aae:	4425      	add	r5, r4
   88ab0:	6062      	str	r2, [r4, #4]
   88ab2:	4630      	mov	r0, r6
   88ab4:	60bd      	str	r5, [r7, #8]
   88ab6:	606b      	str	r3, [r5, #4]
   88ab8:	f000 f9be 	bl	88e38 <__malloc_unlock>
   88abc:	3408      	adds	r4, #8
   88abe:	4620      	mov	r0, r4
   88ac0:	b003      	add	sp, #12
   88ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88ac6:	bf00      	nop
   88ac8:	20070640 	.word	0x20070640
   88acc:	20078d8c 	.word	0x20078d8c
   88ad0:	20070a4c 	.word	0x20070a4c
   88ad4:	20078d88 	.word	0x20078d88
   88ad8:	20078d84 	.word	0x20078d84
   88adc:	20078d90 	.word	0x20078d90
   88ae0:	f1bc 0f14 	cmp.w	ip, #20
   88ae4:	d961      	bls.n	88baa <_malloc_r+0x40e>
   88ae6:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   88aea:	f200 808f 	bhi.w	88c0c <_malloc_r+0x470>
   88aee:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   88af2:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   88af6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   88afa:	e697      	b.n	8882c <_malloc_r+0x90>
   88afc:	0a4b      	lsrs	r3, r1, #9
   88afe:	2b04      	cmp	r3, #4
   88b00:	d958      	bls.n	88bb4 <_malloc_r+0x418>
   88b02:	2b14      	cmp	r3, #20
   88b04:	f200 80ad 	bhi.w	88c62 <_malloc_r+0x4c6>
   88b08:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   88b0c:	0050      	lsls	r0, r2, #1
   88b0e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   88b12:	6883      	ldr	r3, [r0, #8]
   88b14:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 88cd0 <_malloc_r+0x534>
   88b18:	4283      	cmp	r3, r0
   88b1a:	f000 808a 	beq.w	88c32 <_malloc_r+0x496>
   88b1e:	685a      	ldr	r2, [r3, #4]
   88b20:	f022 0203 	bic.w	r2, r2, #3
   88b24:	4291      	cmp	r1, r2
   88b26:	d202      	bcs.n	88b2e <_malloc_r+0x392>
   88b28:	689b      	ldr	r3, [r3, #8]
   88b2a:	4298      	cmp	r0, r3
   88b2c:	d1f7      	bne.n	88b1e <_malloc_r+0x382>
   88b2e:	68d9      	ldr	r1, [r3, #12]
   88b30:	687a      	ldr	r2, [r7, #4]
   88b32:	60e1      	str	r1, [r4, #12]
   88b34:	60a3      	str	r3, [r4, #8]
   88b36:	608c      	str	r4, [r1, #8]
   88b38:	60dc      	str	r4, [r3, #12]
   88b3a:	e6b6      	b.n	888aa <_malloc_r+0x10e>
   88b3c:	f045 0701 	orr.w	r7, r5, #1
   88b40:	f042 0101 	orr.w	r1, r2, #1
   88b44:	4425      	add	r5, r4
   88b46:	6067      	str	r7, [r4, #4]
   88b48:	4630      	mov	r0, r6
   88b4a:	615d      	str	r5, [r3, #20]
   88b4c:	611d      	str	r5, [r3, #16]
   88b4e:	f8c5 e00c 	str.w	lr, [r5, #12]
   88b52:	f8c5 e008 	str.w	lr, [r5, #8]
   88b56:	6069      	str	r1, [r5, #4]
   88b58:	50aa      	str	r2, [r5, r2]
   88b5a:	3408      	adds	r4, #8
   88b5c:	f000 f96c 	bl	88e38 <__malloc_unlock>
   88b60:	e648      	b.n	887f4 <_malloc_r+0x58>
   88b62:	685a      	ldr	r2, [r3, #4]
   88b64:	e6a1      	b.n	888aa <_malloc_r+0x10e>
   88b66:	f109 0901 	add.w	r9, r9, #1
   88b6a:	f019 0f03 	tst.w	r9, #3
   88b6e:	f104 0408 	add.w	r4, r4, #8
   88b72:	f47f aead 	bne.w	888d0 <_malloc_r+0x134>
   88b76:	e02d      	b.n	88bd4 <_malloc_r+0x438>
   88b78:	f104 0308 	add.w	r3, r4, #8
   88b7c:	6964      	ldr	r4, [r4, #20]
   88b7e:	42a3      	cmp	r3, r4
   88b80:	bf08      	it	eq
   88b82:	f10c 0c02 	addeq.w	ip, ip, #2
   88b86:	f43f ae67 	beq.w	88858 <_malloc_r+0xbc>
   88b8a:	e623      	b.n	887d4 <_malloc_r+0x38>
   88b8c:	4419      	add	r1, r3
   88b8e:	6848      	ldr	r0, [r1, #4]
   88b90:	461c      	mov	r4, r3
   88b92:	f854 2f08 	ldr.w	r2, [r4, #8]!
   88b96:	68db      	ldr	r3, [r3, #12]
   88b98:	f040 0501 	orr.w	r5, r0, #1
   88b9c:	604d      	str	r5, [r1, #4]
   88b9e:	4630      	mov	r0, r6
   88ba0:	60d3      	str	r3, [r2, #12]
   88ba2:	609a      	str	r2, [r3, #8]
   88ba4:	f000 f948 	bl	88e38 <__malloc_unlock>
   88ba8:	e624      	b.n	887f4 <_malloc_r+0x58>
   88baa:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   88bae:	ea4f 014c 	mov.w	r1, ip, lsl #1
   88bb2:	e63b      	b.n	8882c <_malloc_r+0x90>
   88bb4:	098a      	lsrs	r2, r1, #6
   88bb6:	3238      	adds	r2, #56	; 0x38
   88bb8:	0050      	lsls	r0, r2, #1
   88bba:	e7a8      	b.n	88b0e <_malloc_r+0x372>
   88bbc:	42bc      	cmp	r4, r7
   88bbe:	f43f af02 	beq.w	889c6 <_malloc_r+0x22a>
   88bc2:	68bc      	ldr	r4, [r7, #8]
   88bc4:	6862      	ldr	r2, [r4, #4]
   88bc6:	f022 0203 	bic.w	r2, r2, #3
   88bca:	e761      	b.n	88a90 <_malloc_r+0x2f4>
   88bcc:	f8d8 8000 	ldr.w	r8, [r8]
   88bd0:	4598      	cmp	r8, r3
   88bd2:	d17a      	bne.n	88cca <_malloc_r+0x52e>
   88bd4:	f01c 0f03 	tst.w	ip, #3
   88bd8:	f1a8 0308 	sub.w	r3, r8, #8
   88bdc:	f10c 3cff 	add.w	ip, ip, #4294967295
   88be0:	d1f4      	bne.n	88bcc <_malloc_r+0x430>
   88be2:	687b      	ldr	r3, [r7, #4]
   88be4:	ea23 0300 	bic.w	r3, r3, r0
   88be8:	607b      	str	r3, [r7, #4]
   88bea:	0040      	lsls	r0, r0, #1
   88bec:	4298      	cmp	r0, r3
   88bee:	f63f aebe 	bhi.w	8896e <_malloc_r+0x1d2>
   88bf2:	2800      	cmp	r0, #0
   88bf4:	f43f aebb 	beq.w	8896e <_malloc_r+0x1d2>
   88bf8:	4203      	tst	r3, r0
   88bfa:	46cc      	mov	ip, r9
   88bfc:	f47f ae64 	bne.w	888c8 <_malloc_r+0x12c>
   88c00:	0040      	lsls	r0, r0, #1
   88c02:	4203      	tst	r3, r0
   88c04:	f10c 0c04 	add.w	ip, ip, #4
   88c08:	d0fa      	beq.n	88c00 <_malloc_r+0x464>
   88c0a:	e65d      	b.n	888c8 <_malloc_r+0x12c>
   88c0c:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   88c10:	d819      	bhi.n	88c46 <_malloc_r+0x4aa>
   88c12:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   88c16:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   88c1a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   88c1e:	e605      	b.n	8882c <_malloc_r+0x90>
   88c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   88c24:	e6ee      	b.n	88a04 <_malloc_r+0x268>
   88c26:	2301      	movs	r3, #1
   88c28:	f8c8 3004 	str.w	r3, [r8, #4]
   88c2c:	4644      	mov	r4, r8
   88c2e:	2200      	movs	r2, #0
   88c30:	e72e      	b.n	88a90 <_malloc_r+0x2f4>
   88c32:	1092      	asrs	r2, r2, #2
   88c34:	2001      	movs	r0, #1
   88c36:	4090      	lsls	r0, r2
   88c38:	f8d8 2004 	ldr.w	r2, [r8, #4]
   88c3c:	4619      	mov	r1, r3
   88c3e:	4302      	orrs	r2, r0
   88c40:	f8c8 2004 	str.w	r2, [r8, #4]
   88c44:	e775      	b.n	88b32 <_malloc_r+0x396>
   88c46:	f240 5354 	movw	r3, #1364	; 0x554
   88c4a:	459c      	cmp	ip, r3
   88c4c:	d81b      	bhi.n	88c86 <_malloc_r+0x4ea>
   88c4e:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   88c52:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   88c56:	ea4f 014c 	mov.w	r1, ip, lsl #1
   88c5a:	e5e7      	b.n	8882c <_malloc_r+0x90>
   88c5c:	f10a 0a10 	add.w	sl, sl, #16
   88c60:	e6a3      	b.n	889aa <_malloc_r+0x20e>
   88c62:	2b54      	cmp	r3, #84	; 0x54
   88c64:	d81f      	bhi.n	88ca6 <_malloc_r+0x50a>
   88c66:	0b0a      	lsrs	r2, r1, #12
   88c68:	326e      	adds	r2, #110	; 0x6e
   88c6a:	0050      	lsls	r0, r2, #1
   88c6c:	e74f      	b.n	88b0e <_malloc_r+0x372>
   88c6e:	f3cb 010b 	ubfx	r1, fp, #0, #12
   88c72:	2900      	cmp	r1, #0
   88c74:	f47f aeb1 	bne.w	889da <_malloc_r+0x23e>
   88c78:	eb0a 0109 	add.w	r1, sl, r9
   88c7c:	68ba      	ldr	r2, [r7, #8]
   88c7e:	f041 0101 	orr.w	r1, r1, #1
   88c82:	6051      	str	r1, [r2, #4]
   88c84:	e6f6      	b.n	88a74 <_malloc_r+0x2d8>
   88c86:	21fc      	movs	r1, #252	; 0xfc
   88c88:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   88c8c:	e5ce      	b.n	8882c <_malloc_r+0x90>
   88c8e:	2201      	movs	r2, #1
   88c90:	f04f 0a00 	mov.w	sl, #0
   88c94:	e6cb      	b.n	88a2e <_malloc_r+0x292>
   88c96:	f104 0108 	add.w	r1, r4, #8
   88c9a:	4630      	mov	r0, r6
   88c9c:	f7ff fa7c 	bl	88198 <_free_r>
   88ca0:	f8da 3000 	ldr.w	r3, [sl]
   88ca4:	e6e6      	b.n	88a74 <_malloc_r+0x2d8>
   88ca6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   88caa:	d803      	bhi.n	88cb4 <_malloc_r+0x518>
   88cac:	0bca      	lsrs	r2, r1, #15
   88cae:	3277      	adds	r2, #119	; 0x77
   88cb0:	0050      	lsls	r0, r2, #1
   88cb2:	e72c      	b.n	88b0e <_malloc_r+0x372>
   88cb4:	f240 5254 	movw	r2, #1364	; 0x554
   88cb8:	4293      	cmp	r3, r2
   88cba:	d803      	bhi.n	88cc4 <_malloc_r+0x528>
   88cbc:	0c8a      	lsrs	r2, r1, #18
   88cbe:	327c      	adds	r2, #124	; 0x7c
   88cc0:	0050      	lsls	r0, r2, #1
   88cc2:	e724      	b.n	88b0e <_malloc_r+0x372>
   88cc4:	20fc      	movs	r0, #252	; 0xfc
   88cc6:	227e      	movs	r2, #126	; 0x7e
   88cc8:	e721      	b.n	88b0e <_malloc_r+0x372>
   88cca:	687b      	ldr	r3, [r7, #4]
   88ccc:	e78d      	b.n	88bea <_malloc_r+0x44e>
   88cce:	bf00      	nop
   88cd0:	20070640 	.word	0x20070640

00088cd4 <memchr>:
   88cd4:	0783      	lsls	r3, r0, #30
   88cd6:	b470      	push	{r4, r5, r6}
   88cd8:	b2c9      	uxtb	r1, r1
   88cda:	d040      	beq.n	88d5e <memchr+0x8a>
   88cdc:	1e54      	subs	r4, r2, #1
   88cde:	b32a      	cbz	r2, 88d2c <memchr+0x58>
   88ce0:	7803      	ldrb	r3, [r0, #0]
   88ce2:	428b      	cmp	r3, r1
   88ce4:	d023      	beq.n	88d2e <memchr+0x5a>
   88ce6:	1c43      	adds	r3, r0, #1
   88ce8:	e004      	b.n	88cf4 <memchr+0x20>
   88cea:	b1fc      	cbz	r4, 88d2c <memchr+0x58>
   88cec:	7805      	ldrb	r5, [r0, #0]
   88cee:	4614      	mov	r4, r2
   88cf0:	428d      	cmp	r5, r1
   88cf2:	d01c      	beq.n	88d2e <memchr+0x5a>
   88cf4:	f013 0f03 	tst.w	r3, #3
   88cf8:	4618      	mov	r0, r3
   88cfa:	f104 32ff 	add.w	r2, r4, #4294967295
   88cfe:	f103 0301 	add.w	r3, r3, #1
   88d02:	d1f2      	bne.n	88cea <memchr+0x16>
   88d04:	2c03      	cmp	r4, #3
   88d06:	d814      	bhi.n	88d32 <memchr+0x5e>
   88d08:	1e65      	subs	r5, r4, #1
   88d0a:	b354      	cbz	r4, 88d62 <memchr+0x8e>
   88d0c:	7803      	ldrb	r3, [r0, #0]
   88d0e:	428b      	cmp	r3, r1
   88d10:	d00d      	beq.n	88d2e <memchr+0x5a>
   88d12:	1c42      	adds	r2, r0, #1
   88d14:	2300      	movs	r3, #0
   88d16:	e002      	b.n	88d1e <memchr+0x4a>
   88d18:	7804      	ldrb	r4, [r0, #0]
   88d1a:	428c      	cmp	r4, r1
   88d1c:	d007      	beq.n	88d2e <memchr+0x5a>
   88d1e:	42ab      	cmp	r3, r5
   88d20:	4610      	mov	r0, r2
   88d22:	f103 0301 	add.w	r3, r3, #1
   88d26:	f102 0201 	add.w	r2, r2, #1
   88d2a:	d1f5      	bne.n	88d18 <memchr+0x44>
   88d2c:	2000      	movs	r0, #0
   88d2e:	bc70      	pop	{r4, r5, r6}
   88d30:	4770      	bx	lr
   88d32:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   88d36:	4603      	mov	r3, r0
   88d38:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   88d3c:	681a      	ldr	r2, [r3, #0]
   88d3e:	4618      	mov	r0, r3
   88d40:	4072      	eors	r2, r6
   88d42:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   88d46:	ea25 0202 	bic.w	r2, r5, r2
   88d4a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   88d4e:	f103 0304 	add.w	r3, r3, #4
   88d52:	d1d9      	bne.n	88d08 <memchr+0x34>
   88d54:	3c04      	subs	r4, #4
   88d56:	2c03      	cmp	r4, #3
   88d58:	4618      	mov	r0, r3
   88d5a:	d8ef      	bhi.n	88d3c <memchr+0x68>
   88d5c:	e7d4      	b.n	88d08 <memchr+0x34>
   88d5e:	4614      	mov	r4, r2
   88d60:	e7d0      	b.n	88d04 <memchr+0x30>
   88d62:	4620      	mov	r0, r4
   88d64:	e7e3      	b.n	88d2e <memchr+0x5a>
   88d66:	bf00      	nop

00088d68 <memmove>:
   88d68:	4288      	cmp	r0, r1
   88d6a:	b4f0      	push	{r4, r5, r6, r7}
   88d6c:	d910      	bls.n	88d90 <memmove+0x28>
   88d6e:	188c      	adds	r4, r1, r2
   88d70:	42a0      	cmp	r0, r4
   88d72:	d20d      	bcs.n	88d90 <memmove+0x28>
   88d74:	1885      	adds	r5, r0, r2
   88d76:	1e53      	subs	r3, r2, #1
   88d78:	b142      	cbz	r2, 88d8c <memmove+0x24>
   88d7a:	4621      	mov	r1, r4
   88d7c:	462a      	mov	r2, r5
   88d7e:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   88d82:	3b01      	subs	r3, #1
   88d84:	f802 4d01 	strb.w	r4, [r2, #-1]!
   88d88:	1c5c      	adds	r4, r3, #1
   88d8a:	d1f8      	bne.n	88d7e <memmove+0x16>
   88d8c:	bcf0      	pop	{r4, r5, r6, r7}
   88d8e:	4770      	bx	lr
   88d90:	2a0f      	cmp	r2, #15
   88d92:	d944      	bls.n	88e1e <memmove+0xb6>
   88d94:	ea40 0301 	orr.w	r3, r0, r1
   88d98:	079b      	lsls	r3, r3, #30
   88d9a:	d144      	bne.n	88e26 <memmove+0xbe>
   88d9c:	f1a2 0710 	sub.w	r7, r2, #16
   88da0:	093f      	lsrs	r7, r7, #4
   88da2:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   88da6:	3610      	adds	r6, #16
   88da8:	460c      	mov	r4, r1
   88daa:	4603      	mov	r3, r0
   88dac:	6825      	ldr	r5, [r4, #0]
   88dae:	3310      	adds	r3, #16
   88db0:	f843 5c10 	str.w	r5, [r3, #-16]
   88db4:	6865      	ldr	r5, [r4, #4]
   88db6:	3410      	adds	r4, #16
   88db8:	f843 5c0c 	str.w	r5, [r3, #-12]
   88dbc:	f854 5c08 	ldr.w	r5, [r4, #-8]
   88dc0:	f843 5c08 	str.w	r5, [r3, #-8]
   88dc4:	f854 5c04 	ldr.w	r5, [r4, #-4]
   88dc8:	f843 5c04 	str.w	r5, [r3, #-4]
   88dcc:	42b3      	cmp	r3, r6
   88dce:	d1ed      	bne.n	88dac <memmove+0x44>
   88dd0:	1c7b      	adds	r3, r7, #1
   88dd2:	f002 0c0f 	and.w	ip, r2, #15
   88dd6:	011b      	lsls	r3, r3, #4
   88dd8:	f1bc 0f03 	cmp.w	ip, #3
   88ddc:	4419      	add	r1, r3
   88dde:	4403      	add	r3, r0
   88de0:	d923      	bls.n	88e2a <memmove+0xc2>
   88de2:	460e      	mov	r6, r1
   88de4:	461d      	mov	r5, r3
   88de6:	4664      	mov	r4, ip
   88de8:	f856 7b04 	ldr.w	r7, [r6], #4
   88dec:	3c04      	subs	r4, #4
   88dee:	2c03      	cmp	r4, #3
   88df0:	f845 7b04 	str.w	r7, [r5], #4
   88df4:	d8f8      	bhi.n	88de8 <memmove+0x80>
   88df6:	f1ac 0404 	sub.w	r4, ip, #4
   88dfa:	f024 0403 	bic.w	r4, r4, #3
   88dfe:	3404      	adds	r4, #4
   88e00:	f002 0203 	and.w	r2, r2, #3
   88e04:	4423      	add	r3, r4
   88e06:	4421      	add	r1, r4
   88e08:	2a00      	cmp	r2, #0
   88e0a:	d0bf      	beq.n	88d8c <memmove+0x24>
   88e0c:	441a      	add	r2, r3
   88e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
   88e12:	f803 4b01 	strb.w	r4, [r3], #1
   88e16:	4293      	cmp	r3, r2
   88e18:	d1f9      	bne.n	88e0e <memmove+0xa6>
   88e1a:	bcf0      	pop	{r4, r5, r6, r7}
   88e1c:	4770      	bx	lr
   88e1e:	4603      	mov	r3, r0
   88e20:	2a00      	cmp	r2, #0
   88e22:	d1f3      	bne.n	88e0c <memmove+0xa4>
   88e24:	e7b2      	b.n	88d8c <memmove+0x24>
   88e26:	4603      	mov	r3, r0
   88e28:	e7f0      	b.n	88e0c <memmove+0xa4>
   88e2a:	4662      	mov	r2, ip
   88e2c:	2a00      	cmp	r2, #0
   88e2e:	d1ed      	bne.n	88e0c <memmove+0xa4>
   88e30:	e7ac      	b.n	88d8c <memmove+0x24>
   88e32:	bf00      	nop

00088e34 <__malloc_lock>:
   88e34:	4770      	bx	lr
   88e36:	bf00      	nop

00088e38 <__malloc_unlock>:
   88e38:	4770      	bx	lr
   88e3a:	bf00      	nop

00088e3c <_Balloc>:
   88e3c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   88e3e:	b570      	push	{r4, r5, r6, lr}
   88e40:	4605      	mov	r5, r0
   88e42:	460c      	mov	r4, r1
   88e44:	b14a      	cbz	r2, 88e5a <_Balloc+0x1e>
   88e46:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   88e4a:	b180      	cbz	r0, 88e6e <_Balloc+0x32>
   88e4c:	6801      	ldr	r1, [r0, #0]
   88e4e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   88e52:	2200      	movs	r2, #0
   88e54:	6102      	str	r2, [r0, #16]
   88e56:	60c2      	str	r2, [r0, #12]
   88e58:	bd70      	pop	{r4, r5, r6, pc}
   88e5a:	2221      	movs	r2, #33	; 0x21
   88e5c:	2104      	movs	r1, #4
   88e5e:	f000 fe9d 	bl	89b9c <_calloc_r>
   88e62:	64e8      	str	r0, [r5, #76]	; 0x4c
   88e64:	4602      	mov	r2, r0
   88e66:	2800      	cmp	r0, #0
   88e68:	d1ed      	bne.n	88e46 <_Balloc+0xa>
   88e6a:	2000      	movs	r0, #0
   88e6c:	bd70      	pop	{r4, r5, r6, pc}
   88e6e:	2101      	movs	r1, #1
   88e70:	fa01 f604 	lsl.w	r6, r1, r4
   88e74:	1d72      	adds	r2, r6, #5
   88e76:	4628      	mov	r0, r5
   88e78:	0092      	lsls	r2, r2, #2
   88e7a:	f000 fe8f 	bl	89b9c <_calloc_r>
   88e7e:	2800      	cmp	r0, #0
   88e80:	d0f3      	beq.n	88e6a <_Balloc+0x2e>
   88e82:	6044      	str	r4, [r0, #4]
   88e84:	6086      	str	r6, [r0, #8]
   88e86:	e7e4      	b.n	88e52 <_Balloc+0x16>

00088e88 <_Bfree>:
   88e88:	b131      	cbz	r1, 88e98 <_Bfree+0x10>
   88e8a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   88e8c:	684a      	ldr	r2, [r1, #4]
   88e8e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   88e92:	6008      	str	r0, [r1, #0]
   88e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   88e98:	4770      	bx	lr
   88e9a:	bf00      	nop

00088e9c <__multadd>:
   88e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   88ea0:	690f      	ldr	r7, [r1, #16]
   88ea2:	b083      	sub	sp, #12
   88ea4:	4688      	mov	r8, r1
   88ea6:	4681      	mov	r9, r0
   88ea8:	f101 0514 	add.w	r5, r1, #20
   88eac:	2400      	movs	r4, #0
   88eae:	682e      	ldr	r6, [r5, #0]
   88eb0:	3401      	adds	r4, #1
   88eb2:	b2b1      	uxth	r1, r6
   88eb4:	0c36      	lsrs	r6, r6, #16
   88eb6:	fb02 3301 	mla	r3, r2, r1, r3
   88eba:	fb02 f606 	mul.w	r6, r2, r6
   88ebe:	b299      	uxth	r1, r3
   88ec0:	eb06 4313 	add.w	r3, r6, r3, lsr #16
   88ec4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   88ec8:	42a7      	cmp	r7, r4
   88eca:	f845 1b04 	str.w	r1, [r5], #4
   88ece:	ea4f 4313 	mov.w	r3, r3, lsr #16
   88ed2:	dcec      	bgt.n	88eae <__multadd+0x12>
   88ed4:	b14b      	cbz	r3, 88eea <__multadd+0x4e>
   88ed6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   88eda:	4297      	cmp	r7, r2
   88edc:	da09      	bge.n	88ef2 <__multadd+0x56>
   88ede:	eb08 0287 	add.w	r2, r8, r7, lsl #2
   88ee2:	3701      	adds	r7, #1
   88ee4:	6153      	str	r3, [r2, #20]
   88ee6:	f8c8 7010 	str.w	r7, [r8, #16]
   88eea:	4640      	mov	r0, r8
   88eec:	b003      	add	sp, #12
   88eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   88ef2:	f8d8 1004 	ldr.w	r1, [r8, #4]
   88ef6:	4648      	mov	r0, r9
   88ef8:	3101      	adds	r1, #1
   88efa:	9301      	str	r3, [sp, #4]
   88efc:	f7ff ff9e 	bl	88e3c <_Balloc>
   88f00:	f8d8 2010 	ldr.w	r2, [r8, #16]
   88f04:	f108 010c 	add.w	r1, r8, #12
   88f08:	3202      	adds	r2, #2
   88f0a:	4604      	mov	r4, r0
   88f0c:	0092      	lsls	r2, r2, #2
   88f0e:	300c      	adds	r0, #12
   88f10:	f7fb fc32 	bl	84778 <memcpy>
   88f14:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
   88f18:	f8d8 1004 	ldr.w	r1, [r8, #4]
   88f1c:	9b01      	ldr	r3, [sp, #4]
   88f1e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   88f22:	f8c8 0000 	str.w	r0, [r8]
   88f26:	f842 8021 	str.w	r8, [r2, r1, lsl #2]
   88f2a:	46a0      	mov	r8, r4
   88f2c:	e7d7      	b.n	88ede <__multadd+0x42>
   88f2e:	bf00      	nop

00088f30 <__hi0bits>:
   88f30:	0c03      	lsrs	r3, r0, #16
   88f32:	041b      	lsls	r3, r3, #16
   88f34:	b9b3      	cbnz	r3, 88f64 <__hi0bits+0x34>
   88f36:	0400      	lsls	r0, r0, #16
   88f38:	2310      	movs	r3, #16
   88f3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   88f3e:	bf04      	itt	eq
   88f40:	0200      	lsleq	r0, r0, #8
   88f42:	3308      	addeq	r3, #8
   88f44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   88f48:	bf04      	itt	eq
   88f4a:	0100      	lsleq	r0, r0, #4
   88f4c:	3304      	addeq	r3, #4
   88f4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   88f52:	bf04      	itt	eq
   88f54:	0080      	lsleq	r0, r0, #2
   88f56:	3302      	addeq	r3, #2
   88f58:	2800      	cmp	r0, #0
   88f5a:	db07      	blt.n	88f6c <__hi0bits+0x3c>
   88f5c:	0042      	lsls	r2, r0, #1
   88f5e:	d403      	bmi.n	88f68 <__hi0bits+0x38>
   88f60:	2020      	movs	r0, #32
   88f62:	4770      	bx	lr
   88f64:	2300      	movs	r3, #0
   88f66:	e7e8      	b.n	88f3a <__hi0bits+0xa>
   88f68:	1c58      	adds	r0, r3, #1
   88f6a:	4770      	bx	lr
   88f6c:	4618      	mov	r0, r3
   88f6e:	4770      	bx	lr

00088f70 <__lo0bits>:
   88f70:	6803      	ldr	r3, [r0, #0]
   88f72:	f013 0207 	ands.w	r2, r3, #7
   88f76:	d007      	beq.n	88f88 <__lo0bits+0x18>
   88f78:	07d9      	lsls	r1, r3, #31
   88f7a:	d420      	bmi.n	88fbe <__lo0bits+0x4e>
   88f7c:	079a      	lsls	r2, r3, #30
   88f7e:	d420      	bmi.n	88fc2 <__lo0bits+0x52>
   88f80:	089b      	lsrs	r3, r3, #2
   88f82:	6003      	str	r3, [r0, #0]
   88f84:	2002      	movs	r0, #2
   88f86:	4770      	bx	lr
   88f88:	b299      	uxth	r1, r3
   88f8a:	b909      	cbnz	r1, 88f90 <__lo0bits+0x20>
   88f8c:	0c1b      	lsrs	r3, r3, #16
   88f8e:	2210      	movs	r2, #16
   88f90:	f013 0fff 	tst.w	r3, #255	; 0xff
   88f94:	bf04      	itt	eq
   88f96:	0a1b      	lsreq	r3, r3, #8
   88f98:	3208      	addeq	r2, #8
   88f9a:	0719      	lsls	r1, r3, #28
   88f9c:	bf04      	itt	eq
   88f9e:	091b      	lsreq	r3, r3, #4
   88fa0:	3204      	addeq	r2, #4
   88fa2:	0799      	lsls	r1, r3, #30
   88fa4:	bf04      	itt	eq
   88fa6:	089b      	lsreq	r3, r3, #2
   88fa8:	3202      	addeq	r2, #2
   88faa:	07d9      	lsls	r1, r3, #31
   88fac:	d404      	bmi.n	88fb8 <__lo0bits+0x48>
   88fae:	085b      	lsrs	r3, r3, #1
   88fb0:	d101      	bne.n	88fb6 <__lo0bits+0x46>
   88fb2:	2020      	movs	r0, #32
   88fb4:	4770      	bx	lr
   88fb6:	3201      	adds	r2, #1
   88fb8:	6003      	str	r3, [r0, #0]
   88fba:	4610      	mov	r0, r2
   88fbc:	4770      	bx	lr
   88fbe:	2000      	movs	r0, #0
   88fc0:	4770      	bx	lr
   88fc2:	085b      	lsrs	r3, r3, #1
   88fc4:	6003      	str	r3, [r0, #0]
   88fc6:	2001      	movs	r0, #1
   88fc8:	4770      	bx	lr
   88fca:	bf00      	nop

00088fcc <__i2b>:
   88fcc:	b510      	push	{r4, lr}
   88fce:	460c      	mov	r4, r1
   88fd0:	2101      	movs	r1, #1
   88fd2:	f7ff ff33 	bl	88e3c <_Balloc>
   88fd6:	2201      	movs	r2, #1
   88fd8:	6144      	str	r4, [r0, #20]
   88fda:	6102      	str	r2, [r0, #16]
   88fdc:	bd10      	pop	{r4, pc}
   88fde:	bf00      	nop

00088fe0 <__multiply>:
   88fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88fe4:	690d      	ldr	r5, [r1, #16]
   88fe6:	f8d2 9010 	ldr.w	r9, [r2, #16]
   88fea:	b085      	sub	sp, #20
   88fec:	454d      	cmp	r5, r9
   88fee:	460c      	mov	r4, r1
   88ff0:	4692      	mov	sl, r2
   88ff2:	da04      	bge.n	88ffe <__multiply+0x1e>
   88ff4:	462a      	mov	r2, r5
   88ff6:	4654      	mov	r4, sl
   88ff8:	464d      	mov	r5, r9
   88ffa:	468a      	mov	sl, r1
   88ffc:	4691      	mov	r9, r2
   88ffe:	68a3      	ldr	r3, [r4, #8]
   89000:	eb05 0709 	add.w	r7, r5, r9
   89004:	6861      	ldr	r1, [r4, #4]
   89006:	429f      	cmp	r7, r3
   89008:	bfc8      	it	gt
   8900a:	3101      	addgt	r1, #1
   8900c:	f7ff ff16 	bl	88e3c <_Balloc>
   89010:	f100 0614 	add.w	r6, r0, #20
   89014:	eb06 0887 	add.w	r8, r6, r7, lsl #2
   89018:	4546      	cmp	r6, r8
   8901a:	9001      	str	r0, [sp, #4]
   8901c:	d205      	bcs.n	8902a <__multiply+0x4a>
   8901e:	4633      	mov	r3, r6
   89020:	2000      	movs	r0, #0
   89022:	f843 0b04 	str.w	r0, [r3], #4
   89026:	4598      	cmp	r8, r3
   89028:	d8fb      	bhi.n	89022 <__multiply+0x42>
   8902a:	f10a 0c14 	add.w	ip, sl, #20
   8902e:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
   89032:	3414      	adds	r4, #20
   89034:	45cc      	cmp	ip, r9
   89036:	9400      	str	r4, [sp, #0]
   89038:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   8903c:	d25b      	bcs.n	890f6 <__multiply+0x116>
   8903e:	f8cd 8008 	str.w	r8, [sp, #8]
   89042:	9703      	str	r7, [sp, #12]
   89044:	46c8      	mov	r8, r9
   89046:	f85c 3b04 	ldr.w	r3, [ip], #4
   8904a:	b29c      	uxth	r4, r3
   8904c:	b324      	cbz	r4, 89098 <__multiply+0xb8>
   8904e:	9a00      	ldr	r2, [sp, #0]
   89050:	4633      	mov	r3, r6
   89052:	f04f 0900 	mov.w	r9, #0
   89056:	e000      	b.n	8905a <__multiply+0x7a>
   89058:	460b      	mov	r3, r1
   8905a:	f852 7b04 	ldr.w	r7, [r2], #4
   8905e:	6819      	ldr	r1, [r3, #0]
   89060:	fa1f fb87 	uxth.w	fp, r7
   89064:	fa1f fa81 	uxth.w	sl, r1
   89068:	0c38      	lsrs	r0, r7, #16
   8906a:	0c09      	lsrs	r1, r1, #16
   8906c:	fb04 aa0b 	mla	sl, r4, fp, sl
   89070:	fb04 1000 	mla	r0, r4, r0, r1
   89074:	44d1      	add	r9, sl
   89076:	eb00 4019 	add.w	r0, r0, r9, lsr #16
   8907a:	fa1f f989 	uxth.w	r9, r9
   8907e:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
   89082:	4619      	mov	r1, r3
   89084:	4295      	cmp	r5, r2
   89086:	ea4f 4910 	mov.w	r9, r0, lsr #16
   8908a:	f841 7b04 	str.w	r7, [r1], #4
   8908e:	d8e3      	bhi.n	89058 <__multiply+0x78>
   89090:	f8c3 9004 	str.w	r9, [r3, #4]
   89094:	f85c 3c04 	ldr.w	r3, [ip, #-4]
   89098:	ea5f 4913 	movs.w	r9, r3, lsr #16
   8909c:	d024      	beq.n	890e8 <__multiply+0x108>
   8909e:	f8d6 a000 	ldr.w	sl, [r6]
   890a2:	9b00      	ldr	r3, [sp, #0]
   890a4:	4650      	mov	r0, sl
   890a6:	4631      	mov	r1, r6
   890a8:	f04f 0b00 	mov.w	fp, #0
   890ac:	e000      	b.n	890b0 <__multiply+0xd0>
   890ae:	4611      	mov	r1, r2
   890b0:	881a      	ldrh	r2, [r3, #0]
   890b2:	0c00      	lsrs	r0, r0, #16
   890b4:	fb09 0002 	mla	r0, r9, r2, r0
   890b8:	fa1f fa8a 	uxth.w	sl, sl
   890bc:	4483      	add	fp, r0
   890be:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
   890c2:	460a      	mov	r2, r1
   890c4:	f842 0b04 	str.w	r0, [r2], #4
   890c8:	f853 7b04 	ldr.w	r7, [r3], #4
   890cc:	6848      	ldr	r0, [r1, #4]
   890ce:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   890d2:	b284      	uxth	r4, r0
   890d4:	fb09 4a0a 	mla	sl, r9, sl, r4
   890d8:	429d      	cmp	r5, r3
   890da:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
   890de:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
   890e2:	d8e4      	bhi.n	890ae <__multiply+0xce>
   890e4:	f8c1 a004 	str.w	sl, [r1, #4]
   890e8:	45e0      	cmp	r8, ip
   890ea:	f106 0604 	add.w	r6, r6, #4
   890ee:	d8aa      	bhi.n	89046 <__multiply+0x66>
   890f0:	f8dd 8008 	ldr.w	r8, [sp, #8]
   890f4:	9f03      	ldr	r7, [sp, #12]
   890f6:	2f00      	cmp	r7, #0
   890f8:	dd0a      	ble.n	89110 <__multiply+0x130>
   890fa:	f858 3c04 	ldr.w	r3, [r8, #-4]
   890fe:	f1a8 0804 	sub.w	r8, r8, #4
   89102:	b11b      	cbz	r3, 8910c <__multiply+0x12c>
   89104:	e004      	b.n	89110 <__multiply+0x130>
   89106:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   8910a:	b90b      	cbnz	r3, 89110 <__multiply+0x130>
   8910c:	3f01      	subs	r7, #1
   8910e:	d1fa      	bne.n	89106 <__multiply+0x126>
   89110:	9b01      	ldr	r3, [sp, #4]
   89112:	4618      	mov	r0, r3
   89114:	611f      	str	r7, [r3, #16]
   89116:	b005      	add	sp, #20
   89118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008911c <__pow5mult>:
   8911c:	f012 0303 	ands.w	r3, r2, #3
   89120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89124:	4614      	mov	r4, r2
   89126:	4607      	mov	r7, r0
   89128:	460e      	mov	r6, r1
   8912a:	d12c      	bne.n	89186 <__pow5mult+0x6a>
   8912c:	10a4      	asrs	r4, r4, #2
   8912e:	d01c      	beq.n	8916a <__pow5mult+0x4e>
   89130:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   89132:	2d00      	cmp	r5, #0
   89134:	d030      	beq.n	89198 <__pow5mult+0x7c>
   89136:	f04f 0800 	mov.w	r8, #0
   8913a:	e004      	b.n	89146 <__pow5mult+0x2a>
   8913c:	1064      	asrs	r4, r4, #1
   8913e:	d014      	beq.n	8916a <__pow5mult+0x4e>
   89140:	6828      	ldr	r0, [r5, #0]
   89142:	b1a8      	cbz	r0, 89170 <__pow5mult+0x54>
   89144:	4605      	mov	r5, r0
   89146:	07e3      	lsls	r3, r4, #31
   89148:	d5f8      	bpl.n	8913c <__pow5mult+0x20>
   8914a:	4638      	mov	r0, r7
   8914c:	4631      	mov	r1, r6
   8914e:	462a      	mov	r2, r5
   89150:	f7ff ff46 	bl	88fe0 <__multiply>
   89154:	b1ae      	cbz	r6, 89182 <__pow5mult+0x66>
   89156:	6872      	ldr	r2, [r6, #4]
   89158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8915a:	1064      	asrs	r4, r4, #1
   8915c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   89160:	6031      	str	r1, [r6, #0]
   89162:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   89166:	4606      	mov	r6, r0
   89168:	d1ea      	bne.n	89140 <__pow5mult+0x24>
   8916a:	4630      	mov	r0, r6
   8916c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89170:	4638      	mov	r0, r7
   89172:	4629      	mov	r1, r5
   89174:	462a      	mov	r2, r5
   89176:	f7ff ff33 	bl	88fe0 <__multiply>
   8917a:	6028      	str	r0, [r5, #0]
   8917c:	f8c0 8000 	str.w	r8, [r0]
   89180:	e7e0      	b.n	89144 <__pow5mult+0x28>
   89182:	4606      	mov	r6, r0
   89184:	e7da      	b.n	8913c <__pow5mult+0x20>
   89186:	4a0b      	ldr	r2, [pc, #44]	; (891b4 <__pow5mult+0x98>)
   89188:	3b01      	subs	r3, #1
   8918a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8918e:	2300      	movs	r3, #0
   89190:	f7ff fe84 	bl	88e9c <__multadd>
   89194:	4606      	mov	r6, r0
   89196:	e7c9      	b.n	8912c <__pow5mult+0x10>
   89198:	2101      	movs	r1, #1
   8919a:	4638      	mov	r0, r7
   8919c:	f7ff fe4e 	bl	88e3c <_Balloc>
   891a0:	f240 2171 	movw	r1, #625	; 0x271
   891a4:	2201      	movs	r2, #1
   891a6:	2300      	movs	r3, #0
   891a8:	6141      	str	r1, [r0, #20]
   891aa:	6102      	str	r2, [r0, #16]
   891ac:	4605      	mov	r5, r0
   891ae:	64b8      	str	r0, [r7, #72]	; 0x48
   891b0:	6003      	str	r3, [r0, #0]
   891b2:	e7c0      	b.n	89136 <__pow5mult+0x1a>
   891b4:	0008a920 	.word	0x0008a920

000891b8 <__lshift>:
   891b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   891bc:	690b      	ldr	r3, [r1, #16]
   891be:	ea4f 1a62 	mov.w	sl, r2, asr #5
   891c2:	eb0a 0903 	add.w	r9, sl, r3
   891c6:	688b      	ldr	r3, [r1, #8]
   891c8:	f109 0601 	add.w	r6, r9, #1
   891cc:	429e      	cmp	r6, r3
   891ce:	460f      	mov	r7, r1
   891d0:	4693      	mov	fp, r2
   891d2:	4680      	mov	r8, r0
   891d4:	6849      	ldr	r1, [r1, #4]
   891d6:	dd04      	ble.n	891e2 <__lshift+0x2a>
   891d8:	005b      	lsls	r3, r3, #1
   891da:	429e      	cmp	r6, r3
   891dc:	f101 0101 	add.w	r1, r1, #1
   891e0:	dcfa      	bgt.n	891d8 <__lshift+0x20>
   891e2:	4640      	mov	r0, r8
   891e4:	f7ff fe2a 	bl	88e3c <_Balloc>
   891e8:	f1ba 0f00 	cmp.w	sl, #0
   891ec:	f100 0414 	add.w	r4, r0, #20
   891f0:	dd09      	ble.n	89206 <__lshift+0x4e>
   891f2:	2300      	movs	r3, #0
   891f4:	461a      	mov	r2, r3
   891f6:	4625      	mov	r5, r4
   891f8:	3301      	adds	r3, #1
   891fa:	4553      	cmp	r3, sl
   891fc:	f845 2b04 	str.w	r2, [r5], #4
   89200:	d1fa      	bne.n	891f8 <__lshift+0x40>
   89202:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   89206:	693a      	ldr	r2, [r7, #16]
   89208:	f107 0314 	add.w	r3, r7, #20
   8920c:	f01b 0b1f 	ands.w	fp, fp, #31
   89210:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   89214:	d021      	beq.n	8925a <__lshift+0xa2>
   89216:	f1cb 0a20 	rsb	sl, fp, #32
   8921a:	2200      	movs	r2, #0
   8921c:	e000      	b.n	89220 <__lshift+0x68>
   8921e:	462c      	mov	r4, r5
   89220:	6819      	ldr	r1, [r3, #0]
   89222:	4625      	mov	r5, r4
   89224:	fa01 f10b 	lsl.w	r1, r1, fp
   89228:	430a      	orrs	r2, r1
   8922a:	f845 2b04 	str.w	r2, [r5], #4
   8922e:	f853 2b04 	ldr.w	r2, [r3], #4
   89232:	4563      	cmp	r3, ip
   89234:	fa22 f20a 	lsr.w	r2, r2, sl
   89238:	d3f1      	bcc.n	8921e <__lshift+0x66>
   8923a:	6062      	str	r2, [r4, #4]
   8923c:	b10a      	cbz	r2, 89242 <__lshift+0x8a>
   8923e:	f109 0602 	add.w	r6, r9, #2
   89242:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   89246:	687a      	ldr	r2, [r7, #4]
   89248:	3e01      	subs	r6, #1
   8924a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8924e:	6106      	str	r6, [r0, #16]
   89250:	6039      	str	r1, [r7, #0]
   89252:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   89256:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8925a:	f853 2b04 	ldr.w	r2, [r3], #4
   8925e:	459c      	cmp	ip, r3
   89260:	f844 2b04 	str.w	r2, [r4], #4
   89264:	d9ed      	bls.n	89242 <__lshift+0x8a>
   89266:	f853 2b04 	ldr.w	r2, [r3], #4
   8926a:	459c      	cmp	ip, r3
   8926c:	f844 2b04 	str.w	r2, [r4], #4
   89270:	d8f3      	bhi.n	8925a <__lshift+0xa2>
   89272:	e7e6      	b.n	89242 <__lshift+0x8a>

00089274 <__mcmp>:
   89274:	6902      	ldr	r2, [r0, #16]
   89276:	690b      	ldr	r3, [r1, #16]
   89278:	b410      	push	{r4}
   8927a:	1ad2      	subs	r2, r2, r3
   8927c:	d115      	bne.n	892aa <__mcmp+0x36>
   8927e:	009b      	lsls	r3, r3, #2
   89280:	3014      	adds	r0, #20
   89282:	3114      	adds	r1, #20
   89284:	4419      	add	r1, r3
   89286:	4403      	add	r3, r0
   89288:	e001      	b.n	8928e <__mcmp+0x1a>
   8928a:	4298      	cmp	r0, r3
   8928c:	d211      	bcs.n	892b2 <__mcmp+0x3e>
   8928e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   89292:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   89296:	42a2      	cmp	r2, r4
   89298:	d0f7      	beq.n	8928a <__mcmp+0x16>
   8929a:	4294      	cmp	r4, r2
   8929c:	bf94      	ite	ls
   8929e:	2001      	movls	r0, #1
   892a0:	f04f 30ff 	movhi.w	r0, #4294967295
   892a4:	f85d 4b04 	ldr.w	r4, [sp], #4
   892a8:	4770      	bx	lr
   892aa:	4610      	mov	r0, r2
   892ac:	f85d 4b04 	ldr.w	r4, [sp], #4
   892b0:	4770      	bx	lr
   892b2:	2000      	movs	r0, #0
   892b4:	f85d 4b04 	ldr.w	r4, [sp], #4
   892b8:	4770      	bx	lr
   892ba:	bf00      	nop

000892bc <__mdiff>:
   892bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   892c0:	460d      	mov	r5, r1
   892c2:	4604      	mov	r4, r0
   892c4:	4611      	mov	r1, r2
   892c6:	4628      	mov	r0, r5
   892c8:	4616      	mov	r6, r2
   892ca:	f7ff ffd3 	bl	89274 <__mcmp>
   892ce:	1e07      	subs	r7, r0, #0
   892d0:	d056      	beq.n	89380 <__mdiff+0xc4>
   892d2:	db4f      	blt.n	89374 <__mdiff+0xb8>
   892d4:	f04f 0900 	mov.w	r9, #0
   892d8:	6869      	ldr	r1, [r5, #4]
   892da:	4620      	mov	r0, r4
   892dc:	f7ff fdae 	bl	88e3c <_Balloc>
   892e0:	692f      	ldr	r7, [r5, #16]
   892e2:	6932      	ldr	r2, [r6, #16]
   892e4:	3514      	adds	r5, #20
   892e6:	3614      	adds	r6, #20
   892e8:	f8c0 900c 	str.w	r9, [r0, #12]
   892ec:	f100 0314 	add.w	r3, r0, #20
   892f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   892f4:	eb06 0882 	add.w	r8, r6, r2, lsl #2
   892f8:	2100      	movs	r1, #0
   892fa:	f855 4b04 	ldr.w	r4, [r5], #4
   892fe:	f856 2b04 	ldr.w	r2, [r6], #4
   89302:	fa1f fa84 	uxth.w	sl, r4
   89306:	448a      	add	sl, r1
   89308:	fa1f f982 	uxth.w	r9, r2
   8930c:	0c11      	lsrs	r1, r2, #16
   8930e:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
   89312:	ebc9 020a 	rsb	r2, r9, sl
   89316:	eb01 4122 	add.w	r1, r1, r2, asr #16
   8931a:	b292      	uxth	r2, r2
   8931c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   89320:	45b0      	cmp	r8, r6
   89322:	f843 2b04 	str.w	r2, [r3], #4
   89326:	ea4f 4121 	mov.w	r1, r1, asr #16
   8932a:	462c      	mov	r4, r5
   8932c:	d8e5      	bhi.n	892fa <__mdiff+0x3e>
   8932e:	45ac      	cmp	ip, r5
   89330:	4698      	mov	r8, r3
   89332:	d915      	bls.n	89360 <__mdiff+0xa4>
   89334:	f854 6b04 	ldr.w	r6, [r4], #4
   89338:	b2b2      	uxth	r2, r6
   8933a:	4411      	add	r1, r2
   8933c:	0c36      	lsrs	r6, r6, #16
   8933e:	eb06 4621 	add.w	r6, r6, r1, asr #16
   89342:	b289      	uxth	r1, r1
   89344:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   89348:	45a4      	cmp	ip, r4
   8934a:	f843 2b04 	str.w	r2, [r3], #4
   8934e:	ea4f 4126 	mov.w	r1, r6, asr #16
   89352:	d8ef      	bhi.n	89334 <__mdiff+0x78>
   89354:	43eb      	mvns	r3, r5
   89356:	4463      	add	r3, ip
   89358:	f023 0303 	bic.w	r3, r3, #3
   8935c:	3304      	adds	r3, #4
   8935e:	4443      	add	r3, r8
   89360:	3b04      	subs	r3, #4
   89362:	b922      	cbnz	r2, 8936e <__mdiff+0xb2>
   89364:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   89368:	3f01      	subs	r7, #1
   8936a:	2a00      	cmp	r2, #0
   8936c:	d0fa      	beq.n	89364 <__mdiff+0xa8>
   8936e:	6107      	str	r7, [r0, #16]
   89370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89374:	462b      	mov	r3, r5
   89376:	f04f 0901 	mov.w	r9, #1
   8937a:	4635      	mov	r5, r6
   8937c:	461e      	mov	r6, r3
   8937e:	e7ab      	b.n	892d8 <__mdiff+0x1c>
   89380:	4620      	mov	r0, r4
   89382:	4639      	mov	r1, r7
   89384:	f7ff fd5a 	bl	88e3c <_Balloc>
   89388:	2301      	movs	r3, #1
   8938a:	6147      	str	r7, [r0, #20]
   8938c:	6103      	str	r3, [r0, #16]
   8938e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89392:	bf00      	nop

00089394 <__d2b>:
   89394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   89398:	2101      	movs	r1, #1
   8939a:	b083      	sub	sp, #12
   8939c:	461d      	mov	r5, r3
   8939e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   893a2:	4614      	mov	r4, r2
   893a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   893a6:	f7ff fd49 	bl	88e3c <_Balloc>
   893aa:	f3c5 0313 	ubfx	r3, r5, #0, #20
   893ae:	4680      	mov	r8, r0
   893b0:	b10e      	cbz	r6, 893b6 <__d2b+0x22>
   893b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   893b6:	9301      	str	r3, [sp, #4]
   893b8:	b324      	cbz	r4, 89404 <__d2b+0x70>
   893ba:	a802      	add	r0, sp, #8
   893bc:	f840 4d08 	str.w	r4, [r0, #-8]!
   893c0:	4668      	mov	r0, sp
   893c2:	f7ff fdd5 	bl	88f70 <__lo0bits>
   893c6:	2800      	cmp	r0, #0
   893c8:	d135      	bne.n	89436 <__d2b+0xa2>
   893ca:	e89d 000c 	ldmia.w	sp, {r2, r3}
   893ce:	f8c8 2014 	str.w	r2, [r8, #20]
   893d2:	2b00      	cmp	r3, #0
   893d4:	bf0c      	ite	eq
   893d6:	2401      	moveq	r4, #1
   893d8:	2402      	movne	r4, #2
   893da:	f8c8 3018 	str.w	r3, [r8, #24]
   893de:	f8c8 4010 	str.w	r4, [r8, #16]
   893e2:	b9de      	cbnz	r6, 8941c <__d2b+0x88>
   893e4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   893e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   893ec:	6038      	str	r0, [r7, #0]
   893ee:	6918      	ldr	r0, [r3, #16]
   893f0:	f7ff fd9e 	bl	88f30 <__hi0bits>
   893f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   893f6:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
   893fa:	6018      	str	r0, [r3, #0]
   893fc:	4640      	mov	r0, r8
   893fe:	b003      	add	sp, #12
   89400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   89404:	a801      	add	r0, sp, #4
   89406:	f7ff fdb3 	bl	88f70 <__lo0bits>
   8940a:	9b01      	ldr	r3, [sp, #4]
   8940c:	2401      	movs	r4, #1
   8940e:	3020      	adds	r0, #32
   89410:	f8c8 3014 	str.w	r3, [r8, #20]
   89414:	f8c8 4010 	str.w	r4, [r8, #16]
   89418:	2e00      	cmp	r6, #0
   8941a:	d0e3      	beq.n	893e4 <__d2b+0x50>
   8941c:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
   89420:	eb09 0300 	add.w	r3, r9, r0
   89424:	603b      	str	r3, [r7, #0]
   89426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89428:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8942c:	6018      	str	r0, [r3, #0]
   8942e:	4640      	mov	r0, r8
   89430:	b003      	add	sp, #12
   89432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   89436:	9b01      	ldr	r3, [sp, #4]
   89438:	f1c0 0120 	rsb	r1, r0, #32
   8943c:	fa03 f101 	lsl.w	r1, r3, r1
   89440:	40c3      	lsrs	r3, r0
   89442:	9a00      	ldr	r2, [sp, #0]
   89444:	9301      	str	r3, [sp, #4]
   89446:	430a      	orrs	r2, r1
   89448:	f8c8 2014 	str.w	r2, [r8, #20]
   8944c:	e7c1      	b.n	893d2 <__d2b+0x3e>
   8944e:	bf00      	nop

00089450 <_realloc_r>:
   89450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89454:	460c      	mov	r4, r1
   89456:	b083      	sub	sp, #12
   89458:	4690      	mov	r8, r2
   8945a:	4681      	mov	r9, r0
   8945c:	2900      	cmp	r1, #0
   8945e:	f000 80ba 	beq.w	895d6 <_realloc_r+0x186>
   89462:	f7ff fce7 	bl	88e34 <__malloc_lock>
   89466:	f108 060b 	add.w	r6, r8, #11
   8946a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8946e:	2e16      	cmp	r6, #22
   89470:	f023 0503 	bic.w	r5, r3, #3
   89474:	f1a4 0708 	sub.w	r7, r4, #8
   89478:	d84b      	bhi.n	89512 <_realloc_r+0xc2>
   8947a:	2110      	movs	r1, #16
   8947c:	460e      	mov	r6, r1
   8947e:	45b0      	cmp	r8, r6
   89480:	d84c      	bhi.n	8951c <_realloc_r+0xcc>
   89482:	428d      	cmp	r5, r1
   89484:	da51      	bge.n	8952a <_realloc_r+0xda>
   89486:	f8df b384 	ldr.w	fp, [pc, #900]	; 8980c <_realloc_r+0x3bc>
   8948a:	1978      	adds	r0, r7, r5
   8948c:	f8db e008 	ldr.w	lr, [fp, #8]
   89490:	4586      	cmp	lr, r0
   89492:	f000 80a6 	beq.w	895e2 <_realloc_r+0x192>
   89496:	6842      	ldr	r2, [r0, #4]
   89498:	f022 0c01 	bic.w	ip, r2, #1
   8949c:	4484      	add	ip, r0
   8949e:	f8dc c004 	ldr.w	ip, [ip, #4]
   894a2:	f01c 0f01 	tst.w	ip, #1
   894a6:	d054      	beq.n	89552 <_realloc_r+0x102>
   894a8:	2200      	movs	r2, #0
   894aa:	4610      	mov	r0, r2
   894ac:	07db      	lsls	r3, r3, #31
   894ae:	d46f      	bmi.n	89590 <_realloc_r+0x140>
   894b0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   894b4:	ebc3 0a07 	rsb	sl, r3, r7
   894b8:	f8da 3004 	ldr.w	r3, [sl, #4]
   894bc:	f023 0303 	bic.w	r3, r3, #3
   894c0:	442b      	add	r3, r5
   894c2:	2800      	cmp	r0, #0
   894c4:	d062      	beq.n	8958c <_realloc_r+0x13c>
   894c6:	4570      	cmp	r0, lr
   894c8:	f000 80e9 	beq.w	8969e <_realloc_r+0x24e>
   894cc:	eb02 0e03 	add.w	lr, r2, r3
   894d0:	458e      	cmp	lr, r1
   894d2:	db5b      	blt.n	8958c <_realloc_r+0x13c>
   894d4:	68c3      	ldr	r3, [r0, #12]
   894d6:	6882      	ldr	r2, [r0, #8]
   894d8:	46d0      	mov	r8, sl
   894da:	60d3      	str	r3, [r2, #12]
   894dc:	609a      	str	r2, [r3, #8]
   894de:	f858 1f08 	ldr.w	r1, [r8, #8]!
   894e2:	f8da 300c 	ldr.w	r3, [sl, #12]
   894e6:	1f2a      	subs	r2, r5, #4
   894e8:	2a24      	cmp	r2, #36	; 0x24
   894ea:	60cb      	str	r3, [r1, #12]
   894ec:	6099      	str	r1, [r3, #8]
   894ee:	f200 8123 	bhi.w	89738 <_realloc_r+0x2e8>
   894f2:	2a13      	cmp	r2, #19
   894f4:	f240 80b0 	bls.w	89658 <_realloc_r+0x208>
   894f8:	6823      	ldr	r3, [r4, #0]
   894fa:	2a1b      	cmp	r2, #27
   894fc:	f8ca 3008 	str.w	r3, [sl, #8]
   89500:	6863      	ldr	r3, [r4, #4]
   89502:	f8ca 300c 	str.w	r3, [sl, #12]
   89506:	f200 812b 	bhi.w	89760 <_realloc_r+0x310>
   8950a:	3408      	adds	r4, #8
   8950c:	f10a 0310 	add.w	r3, sl, #16
   89510:	e0a3      	b.n	8965a <_realloc_r+0x20a>
   89512:	f026 0607 	bic.w	r6, r6, #7
   89516:	2e00      	cmp	r6, #0
   89518:	4631      	mov	r1, r6
   8951a:	dab0      	bge.n	8947e <_realloc_r+0x2e>
   8951c:	230c      	movs	r3, #12
   8951e:	2000      	movs	r0, #0
   89520:	f8c9 3000 	str.w	r3, [r9]
   89524:	b003      	add	sp, #12
   89526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8952a:	46a0      	mov	r8, r4
   8952c:	1baa      	subs	r2, r5, r6
   8952e:	2a0f      	cmp	r2, #15
   89530:	f003 0301 	and.w	r3, r3, #1
   89534:	d81a      	bhi.n	8956c <_realloc_r+0x11c>
   89536:	432b      	orrs	r3, r5
   89538:	607b      	str	r3, [r7, #4]
   8953a:	443d      	add	r5, r7
   8953c:	686b      	ldr	r3, [r5, #4]
   8953e:	f043 0301 	orr.w	r3, r3, #1
   89542:	606b      	str	r3, [r5, #4]
   89544:	4648      	mov	r0, r9
   89546:	f7ff fc77 	bl	88e38 <__malloc_unlock>
   8954a:	4640      	mov	r0, r8
   8954c:	b003      	add	sp, #12
   8954e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89552:	f022 0203 	bic.w	r2, r2, #3
   89556:	eb02 0c05 	add.w	ip, r2, r5
   8955a:	458c      	cmp	ip, r1
   8955c:	dba6      	blt.n	894ac <_realloc_r+0x5c>
   8955e:	68c2      	ldr	r2, [r0, #12]
   89560:	6881      	ldr	r1, [r0, #8]
   89562:	46a0      	mov	r8, r4
   89564:	60ca      	str	r2, [r1, #12]
   89566:	4665      	mov	r5, ip
   89568:	6091      	str	r1, [r2, #8]
   8956a:	e7df      	b.n	8952c <_realloc_r+0xdc>
   8956c:	19b9      	adds	r1, r7, r6
   8956e:	4333      	orrs	r3, r6
   89570:	f042 0001 	orr.w	r0, r2, #1
   89574:	607b      	str	r3, [r7, #4]
   89576:	440a      	add	r2, r1
   89578:	6048      	str	r0, [r1, #4]
   8957a:	6853      	ldr	r3, [r2, #4]
   8957c:	3108      	adds	r1, #8
   8957e:	f043 0301 	orr.w	r3, r3, #1
   89582:	6053      	str	r3, [r2, #4]
   89584:	4648      	mov	r0, r9
   89586:	f7fe fe07 	bl	88198 <_free_r>
   8958a:	e7db      	b.n	89544 <_realloc_r+0xf4>
   8958c:	428b      	cmp	r3, r1
   8958e:	da33      	bge.n	895f8 <_realloc_r+0x1a8>
   89590:	4641      	mov	r1, r8
   89592:	4648      	mov	r0, r9
   89594:	f7ff f902 	bl	8879c <_malloc_r>
   89598:	4680      	mov	r8, r0
   8959a:	2800      	cmp	r0, #0
   8959c:	d0d2      	beq.n	89544 <_realloc_r+0xf4>
   8959e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   895a2:	f1a0 0108 	sub.w	r1, r0, #8
   895a6:	f023 0201 	bic.w	r2, r3, #1
   895aa:	443a      	add	r2, r7
   895ac:	4291      	cmp	r1, r2
   895ae:	f000 80bc 	beq.w	8972a <_realloc_r+0x2da>
   895b2:	1f2a      	subs	r2, r5, #4
   895b4:	2a24      	cmp	r2, #36	; 0x24
   895b6:	d86e      	bhi.n	89696 <_realloc_r+0x246>
   895b8:	2a13      	cmp	r2, #19
   895ba:	d842      	bhi.n	89642 <_realloc_r+0x1f2>
   895bc:	4603      	mov	r3, r0
   895be:	4622      	mov	r2, r4
   895c0:	6811      	ldr	r1, [r2, #0]
   895c2:	6019      	str	r1, [r3, #0]
   895c4:	6851      	ldr	r1, [r2, #4]
   895c6:	6059      	str	r1, [r3, #4]
   895c8:	6892      	ldr	r2, [r2, #8]
   895ca:	609a      	str	r2, [r3, #8]
   895cc:	4621      	mov	r1, r4
   895ce:	4648      	mov	r0, r9
   895d0:	f7fe fde2 	bl	88198 <_free_r>
   895d4:	e7b6      	b.n	89544 <_realloc_r+0xf4>
   895d6:	4611      	mov	r1, r2
   895d8:	b003      	add	sp, #12
   895da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   895de:	f7ff b8dd 	b.w	8879c <_malloc_r>
   895e2:	f8de 2004 	ldr.w	r2, [lr, #4]
   895e6:	f106 0c10 	add.w	ip, r6, #16
   895ea:	f022 0203 	bic.w	r2, r2, #3
   895ee:	1950      	adds	r0, r2, r5
   895f0:	4560      	cmp	r0, ip
   895f2:	da3d      	bge.n	89670 <_realloc_r+0x220>
   895f4:	4670      	mov	r0, lr
   895f6:	e759      	b.n	894ac <_realloc_r+0x5c>
   895f8:	46d0      	mov	r8, sl
   895fa:	f858 0f08 	ldr.w	r0, [r8, #8]!
   895fe:	f8da 100c 	ldr.w	r1, [sl, #12]
   89602:	1f2a      	subs	r2, r5, #4
   89604:	2a24      	cmp	r2, #36	; 0x24
   89606:	60c1      	str	r1, [r0, #12]
   89608:	6088      	str	r0, [r1, #8]
   8960a:	f200 80a0 	bhi.w	8974e <_realloc_r+0x2fe>
   8960e:	2a13      	cmp	r2, #19
   89610:	f240 809b 	bls.w	8974a <_realloc_r+0x2fa>
   89614:	6821      	ldr	r1, [r4, #0]
   89616:	2a1b      	cmp	r2, #27
   89618:	f8ca 1008 	str.w	r1, [sl, #8]
   8961c:	6861      	ldr	r1, [r4, #4]
   8961e:	f8ca 100c 	str.w	r1, [sl, #12]
   89622:	f200 80b2 	bhi.w	8978a <_realloc_r+0x33a>
   89626:	3408      	adds	r4, #8
   89628:	f10a 0210 	add.w	r2, sl, #16
   8962c:	6821      	ldr	r1, [r4, #0]
   8962e:	461d      	mov	r5, r3
   89630:	6011      	str	r1, [r2, #0]
   89632:	6861      	ldr	r1, [r4, #4]
   89634:	4657      	mov	r7, sl
   89636:	6051      	str	r1, [r2, #4]
   89638:	68a3      	ldr	r3, [r4, #8]
   8963a:	6093      	str	r3, [r2, #8]
   8963c:	f8da 3004 	ldr.w	r3, [sl, #4]
   89640:	e774      	b.n	8952c <_realloc_r+0xdc>
   89642:	6823      	ldr	r3, [r4, #0]
   89644:	2a1b      	cmp	r2, #27
   89646:	6003      	str	r3, [r0, #0]
   89648:	6863      	ldr	r3, [r4, #4]
   8964a:	6043      	str	r3, [r0, #4]
   8964c:	d862      	bhi.n	89714 <_realloc_r+0x2c4>
   8964e:	f100 0308 	add.w	r3, r0, #8
   89652:	f104 0208 	add.w	r2, r4, #8
   89656:	e7b3      	b.n	895c0 <_realloc_r+0x170>
   89658:	4643      	mov	r3, r8
   8965a:	6822      	ldr	r2, [r4, #0]
   8965c:	4675      	mov	r5, lr
   8965e:	601a      	str	r2, [r3, #0]
   89660:	6862      	ldr	r2, [r4, #4]
   89662:	4657      	mov	r7, sl
   89664:	605a      	str	r2, [r3, #4]
   89666:	68a2      	ldr	r2, [r4, #8]
   89668:	609a      	str	r2, [r3, #8]
   8966a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8966e:	e75d      	b.n	8952c <_realloc_r+0xdc>
   89670:	1b83      	subs	r3, r0, r6
   89672:	4437      	add	r7, r6
   89674:	f043 0301 	orr.w	r3, r3, #1
   89678:	f8cb 7008 	str.w	r7, [fp, #8]
   8967c:	607b      	str	r3, [r7, #4]
   8967e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   89682:	4648      	mov	r0, r9
   89684:	f003 0301 	and.w	r3, r3, #1
   89688:	431e      	orrs	r6, r3
   8968a:	f844 6c04 	str.w	r6, [r4, #-4]
   8968e:	f7ff fbd3 	bl	88e38 <__malloc_unlock>
   89692:	4620      	mov	r0, r4
   89694:	e75a      	b.n	8954c <_realloc_r+0xfc>
   89696:	4621      	mov	r1, r4
   89698:	f7ff fb66 	bl	88d68 <memmove>
   8969c:	e796      	b.n	895cc <_realloc_r+0x17c>
   8969e:	eb02 0c03 	add.w	ip, r2, r3
   896a2:	f106 0210 	add.w	r2, r6, #16
   896a6:	4594      	cmp	ip, r2
   896a8:	f6ff af70 	blt.w	8958c <_realloc_r+0x13c>
   896ac:	4657      	mov	r7, sl
   896ae:	f857 1f08 	ldr.w	r1, [r7, #8]!
   896b2:	f8da 300c 	ldr.w	r3, [sl, #12]
   896b6:	1f2a      	subs	r2, r5, #4
   896b8:	2a24      	cmp	r2, #36	; 0x24
   896ba:	60cb      	str	r3, [r1, #12]
   896bc:	6099      	str	r1, [r3, #8]
   896be:	f200 8086 	bhi.w	897ce <_realloc_r+0x37e>
   896c2:	2a13      	cmp	r2, #19
   896c4:	d977      	bls.n	897b6 <_realloc_r+0x366>
   896c6:	6823      	ldr	r3, [r4, #0]
   896c8:	2a1b      	cmp	r2, #27
   896ca:	f8ca 3008 	str.w	r3, [sl, #8]
   896ce:	6863      	ldr	r3, [r4, #4]
   896d0:	f8ca 300c 	str.w	r3, [sl, #12]
   896d4:	f200 8084 	bhi.w	897e0 <_realloc_r+0x390>
   896d8:	3408      	adds	r4, #8
   896da:	f10a 0310 	add.w	r3, sl, #16
   896de:	6822      	ldr	r2, [r4, #0]
   896e0:	601a      	str	r2, [r3, #0]
   896e2:	6862      	ldr	r2, [r4, #4]
   896e4:	605a      	str	r2, [r3, #4]
   896e6:	68a2      	ldr	r2, [r4, #8]
   896e8:	609a      	str	r2, [r3, #8]
   896ea:	ebc6 020c 	rsb	r2, r6, ip
   896ee:	eb0a 0306 	add.w	r3, sl, r6
   896f2:	f042 0201 	orr.w	r2, r2, #1
   896f6:	f8cb 3008 	str.w	r3, [fp, #8]
   896fa:	605a      	str	r2, [r3, #4]
   896fc:	f8da 3004 	ldr.w	r3, [sl, #4]
   89700:	4648      	mov	r0, r9
   89702:	f003 0301 	and.w	r3, r3, #1
   89706:	431e      	orrs	r6, r3
   89708:	f8ca 6004 	str.w	r6, [sl, #4]
   8970c:	f7ff fb94 	bl	88e38 <__malloc_unlock>
   89710:	4638      	mov	r0, r7
   89712:	e71b      	b.n	8954c <_realloc_r+0xfc>
   89714:	68a3      	ldr	r3, [r4, #8]
   89716:	2a24      	cmp	r2, #36	; 0x24
   89718:	6083      	str	r3, [r0, #8]
   8971a:	68e3      	ldr	r3, [r4, #12]
   8971c:	60c3      	str	r3, [r0, #12]
   8971e:	d02b      	beq.n	89778 <_realloc_r+0x328>
   89720:	f100 0310 	add.w	r3, r0, #16
   89724:	f104 0210 	add.w	r2, r4, #16
   89728:	e74a      	b.n	895c0 <_realloc_r+0x170>
   8972a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8972e:	46a0      	mov	r8, r4
   89730:	f022 0203 	bic.w	r2, r2, #3
   89734:	4415      	add	r5, r2
   89736:	e6f9      	b.n	8952c <_realloc_r+0xdc>
   89738:	4621      	mov	r1, r4
   8973a:	4640      	mov	r0, r8
   8973c:	4675      	mov	r5, lr
   8973e:	4657      	mov	r7, sl
   89740:	f7ff fb12 	bl	88d68 <memmove>
   89744:	f8da 3004 	ldr.w	r3, [sl, #4]
   89748:	e6f0      	b.n	8952c <_realloc_r+0xdc>
   8974a:	4642      	mov	r2, r8
   8974c:	e76e      	b.n	8962c <_realloc_r+0x1dc>
   8974e:	4621      	mov	r1, r4
   89750:	4640      	mov	r0, r8
   89752:	461d      	mov	r5, r3
   89754:	4657      	mov	r7, sl
   89756:	f7ff fb07 	bl	88d68 <memmove>
   8975a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8975e:	e6e5      	b.n	8952c <_realloc_r+0xdc>
   89760:	68a3      	ldr	r3, [r4, #8]
   89762:	2a24      	cmp	r2, #36	; 0x24
   89764:	f8ca 3010 	str.w	r3, [sl, #16]
   89768:	68e3      	ldr	r3, [r4, #12]
   8976a:	f8ca 3014 	str.w	r3, [sl, #20]
   8976e:	d018      	beq.n	897a2 <_realloc_r+0x352>
   89770:	3410      	adds	r4, #16
   89772:	f10a 0318 	add.w	r3, sl, #24
   89776:	e770      	b.n	8965a <_realloc_r+0x20a>
   89778:	6922      	ldr	r2, [r4, #16]
   8977a:	f100 0318 	add.w	r3, r0, #24
   8977e:	6102      	str	r2, [r0, #16]
   89780:	6961      	ldr	r1, [r4, #20]
   89782:	f104 0218 	add.w	r2, r4, #24
   89786:	6141      	str	r1, [r0, #20]
   89788:	e71a      	b.n	895c0 <_realloc_r+0x170>
   8978a:	68a1      	ldr	r1, [r4, #8]
   8978c:	2a24      	cmp	r2, #36	; 0x24
   8978e:	f8ca 1010 	str.w	r1, [sl, #16]
   89792:	68e1      	ldr	r1, [r4, #12]
   89794:	f8ca 1014 	str.w	r1, [sl, #20]
   89798:	d00f      	beq.n	897ba <_realloc_r+0x36a>
   8979a:	3410      	adds	r4, #16
   8979c:	f10a 0218 	add.w	r2, sl, #24
   897a0:	e744      	b.n	8962c <_realloc_r+0x1dc>
   897a2:	6922      	ldr	r2, [r4, #16]
   897a4:	f10a 0320 	add.w	r3, sl, #32
   897a8:	f8ca 2018 	str.w	r2, [sl, #24]
   897ac:	6962      	ldr	r2, [r4, #20]
   897ae:	3418      	adds	r4, #24
   897b0:	f8ca 201c 	str.w	r2, [sl, #28]
   897b4:	e751      	b.n	8965a <_realloc_r+0x20a>
   897b6:	463b      	mov	r3, r7
   897b8:	e791      	b.n	896de <_realloc_r+0x28e>
   897ba:	6921      	ldr	r1, [r4, #16]
   897bc:	f10a 0220 	add.w	r2, sl, #32
   897c0:	f8ca 1018 	str.w	r1, [sl, #24]
   897c4:	6961      	ldr	r1, [r4, #20]
   897c6:	3418      	adds	r4, #24
   897c8:	f8ca 101c 	str.w	r1, [sl, #28]
   897cc:	e72e      	b.n	8962c <_realloc_r+0x1dc>
   897ce:	4621      	mov	r1, r4
   897d0:	4638      	mov	r0, r7
   897d2:	f8cd c004 	str.w	ip, [sp, #4]
   897d6:	f7ff fac7 	bl	88d68 <memmove>
   897da:	f8dd c004 	ldr.w	ip, [sp, #4]
   897de:	e784      	b.n	896ea <_realloc_r+0x29a>
   897e0:	68a3      	ldr	r3, [r4, #8]
   897e2:	2a24      	cmp	r2, #36	; 0x24
   897e4:	f8ca 3010 	str.w	r3, [sl, #16]
   897e8:	68e3      	ldr	r3, [r4, #12]
   897ea:	f8ca 3014 	str.w	r3, [sl, #20]
   897ee:	d003      	beq.n	897f8 <_realloc_r+0x3a8>
   897f0:	3410      	adds	r4, #16
   897f2:	f10a 0318 	add.w	r3, sl, #24
   897f6:	e772      	b.n	896de <_realloc_r+0x28e>
   897f8:	6922      	ldr	r2, [r4, #16]
   897fa:	f10a 0320 	add.w	r3, sl, #32
   897fe:	f8ca 2018 	str.w	r2, [sl, #24]
   89802:	6962      	ldr	r2, [r4, #20]
   89804:	3418      	adds	r4, #24
   89806:	f8ca 201c 	str.w	r2, [sl, #28]
   8980a:	e768      	b.n	896de <_realloc_r+0x28e>
   8980c:	20070640 	.word	0x20070640

00089810 <_sbrk_r>:
   89810:	b538      	push	{r3, r4, r5, lr}
   89812:	4c07      	ldr	r4, [pc, #28]	; (89830 <_sbrk_r+0x20>)
   89814:	2300      	movs	r3, #0
   89816:	4605      	mov	r5, r0
   89818:	4608      	mov	r0, r1
   8981a:	6023      	str	r3, [r4, #0]
   8981c:	f7f9 fe58 	bl	834d0 <_sbrk>
   89820:	1c43      	adds	r3, r0, #1
   89822:	d000      	beq.n	89826 <_sbrk_r+0x16>
   89824:	bd38      	pop	{r3, r4, r5, pc}
   89826:	6823      	ldr	r3, [r4, #0]
   89828:	2b00      	cmp	r3, #0
   8982a:	d0fb      	beq.n	89824 <_sbrk_r+0x14>
   8982c:	602b      	str	r3, [r5, #0]
   8982e:	bd38      	pop	{r3, r4, r5, pc}
   89830:	20078e14 	.word	0x20078e14

00089834 <__sread>:
   89834:	b510      	push	{r4, lr}
   89836:	460c      	mov	r4, r1
   89838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8983c:	f000 fa72 	bl	89d24 <_read_r>
   89840:	2800      	cmp	r0, #0
   89842:	db03      	blt.n	8984c <__sread+0x18>
   89844:	6d23      	ldr	r3, [r4, #80]	; 0x50
   89846:	4403      	add	r3, r0
   89848:	6523      	str	r3, [r4, #80]	; 0x50
   8984a:	bd10      	pop	{r4, pc}
   8984c:	89a3      	ldrh	r3, [r4, #12]
   8984e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   89852:	81a3      	strh	r3, [r4, #12]
   89854:	bd10      	pop	{r4, pc}
   89856:	bf00      	nop

00089858 <__swrite>:
   89858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8985c:	460c      	mov	r4, r1
   8985e:	8989      	ldrh	r1, [r1, #12]
   89860:	461d      	mov	r5, r3
   89862:	05cb      	lsls	r3, r1, #23
   89864:	4616      	mov	r6, r2
   89866:	4607      	mov	r7, r0
   89868:	d506      	bpl.n	89878 <__swrite+0x20>
   8986a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8986e:	2200      	movs	r2, #0
   89870:	2302      	movs	r3, #2
   89872:	f000 fa43 	bl	89cfc <_lseek_r>
   89876:	89a1      	ldrh	r1, [r4, #12]
   89878:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8987c:	81a1      	strh	r1, [r4, #12]
   8987e:	4638      	mov	r0, r7
   89880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   89884:	4632      	mov	r2, r6
   89886:	462b      	mov	r3, r5
   89888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8988c:	f000 b91e 	b.w	89acc <_write_r>

00089890 <__sseek>:
   89890:	b510      	push	{r4, lr}
   89892:	460c      	mov	r4, r1
   89894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   89898:	f000 fa30 	bl	89cfc <_lseek_r>
   8989c:	89a3      	ldrh	r3, [r4, #12]
   8989e:	1c42      	adds	r2, r0, #1
   898a0:	bf0e      	itee	eq
   898a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   898a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   898aa:	6520      	strne	r0, [r4, #80]	; 0x50
   898ac:	81a3      	strh	r3, [r4, #12]
   898ae:	bd10      	pop	{r4, pc}

000898b0 <__sclose>:
   898b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   898b4:	f000 b9a2 	b.w	89bfc <_close_r>

000898b8 <__ssprint_r>:
   898b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   898bc:	6894      	ldr	r4, [r2, #8]
   898be:	b083      	sub	sp, #12
   898c0:	4692      	mov	sl, r2
   898c2:	4680      	mov	r8, r0
   898c4:	460d      	mov	r5, r1
   898c6:	6816      	ldr	r6, [r2, #0]
   898c8:	2c00      	cmp	r4, #0
   898ca:	d06f      	beq.n	899ac <__ssprint_r+0xf4>
   898cc:	f04f 0b00 	mov.w	fp, #0
   898d0:	6808      	ldr	r0, [r1, #0]
   898d2:	688b      	ldr	r3, [r1, #8]
   898d4:	465c      	mov	r4, fp
   898d6:	2c00      	cmp	r4, #0
   898d8:	d043      	beq.n	89962 <__ssprint_r+0xaa>
   898da:	429c      	cmp	r4, r3
   898dc:	461f      	mov	r7, r3
   898de:	d345      	bcc.n	8996c <__ssprint_r+0xb4>
   898e0:	89ab      	ldrh	r3, [r5, #12]
   898e2:	f413 6f90 	tst.w	r3, #1152	; 0x480
   898e6:	d044      	beq.n	89972 <__ssprint_r+0xba>
   898e8:	696f      	ldr	r7, [r5, #20]
   898ea:	6929      	ldr	r1, [r5, #16]
   898ec:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   898f0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   898f4:	ebc1 0900 	rsb	r9, r1, r0
   898f8:	1c62      	adds	r2, r4, #1
   898fa:	107f      	asrs	r7, r7, #1
   898fc:	444a      	add	r2, r9
   898fe:	4297      	cmp	r7, r2
   89900:	bf34      	ite	cc
   89902:	4617      	movcc	r7, r2
   89904:	463a      	movcs	r2, r7
   89906:	055b      	lsls	r3, r3, #21
   89908:	d535      	bpl.n	89976 <__ssprint_r+0xbe>
   8990a:	4611      	mov	r1, r2
   8990c:	4640      	mov	r0, r8
   8990e:	f7fe ff45 	bl	8879c <_malloc_r>
   89912:	2800      	cmp	r0, #0
   89914:	d039      	beq.n	8998a <__ssprint_r+0xd2>
   89916:	6929      	ldr	r1, [r5, #16]
   89918:	464a      	mov	r2, r9
   8991a:	9001      	str	r0, [sp, #4]
   8991c:	f7fa ff2c 	bl	84778 <memcpy>
   89920:	89aa      	ldrh	r2, [r5, #12]
   89922:	9b01      	ldr	r3, [sp, #4]
   89924:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   89928:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8992c:	81aa      	strh	r2, [r5, #12]
   8992e:	ebc9 0207 	rsb	r2, r9, r7
   89932:	eb03 0009 	add.w	r0, r3, r9
   89936:	616f      	str	r7, [r5, #20]
   89938:	612b      	str	r3, [r5, #16]
   8993a:	6028      	str	r0, [r5, #0]
   8993c:	60aa      	str	r2, [r5, #8]
   8993e:	4627      	mov	r7, r4
   89940:	46a1      	mov	r9, r4
   89942:	464a      	mov	r2, r9
   89944:	4659      	mov	r1, fp
   89946:	f7ff fa0f 	bl	88d68 <memmove>
   8994a:	f8da 2008 	ldr.w	r2, [sl, #8]
   8994e:	68ab      	ldr	r3, [r5, #8]
   89950:	6828      	ldr	r0, [r5, #0]
   89952:	1bdb      	subs	r3, r3, r7
   89954:	4448      	add	r0, r9
   89956:	1b14      	subs	r4, r2, r4
   89958:	60ab      	str	r3, [r5, #8]
   8995a:	6028      	str	r0, [r5, #0]
   8995c:	f8ca 4008 	str.w	r4, [sl, #8]
   89960:	b324      	cbz	r4, 899ac <__ssprint_r+0xf4>
   89962:	f8d6 b000 	ldr.w	fp, [r6]
   89966:	6874      	ldr	r4, [r6, #4]
   89968:	3608      	adds	r6, #8
   8996a:	e7b4      	b.n	898d6 <__ssprint_r+0x1e>
   8996c:	4627      	mov	r7, r4
   8996e:	46a1      	mov	r9, r4
   89970:	e7e7      	b.n	89942 <__ssprint_r+0x8a>
   89972:	46b9      	mov	r9, r7
   89974:	e7e5      	b.n	89942 <__ssprint_r+0x8a>
   89976:	4640      	mov	r0, r8
   89978:	f7ff fd6a 	bl	89450 <_realloc_r>
   8997c:	4603      	mov	r3, r0
   8997e:	2800      	cmp	r0, #0
   89980:	d1d5      	bne.n	8992e <__ssprint_r+0x76>
   89982:	4640      	mov	r0, r8
   89984:	6929      	ldr	r1, [r5, #16]
   89986:	f7fe fc07 	bl	88198 <_free_r>
   8998a:	89aa      	ldrh	r2, [r5, #12]
   8998c:	230c      	movs	r3, #12
   8998e:	f8c8 3000 	str.w	r3, [r8]
   89992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   89996:	2300      	movs	r3, #0
   89998:	f04f 30ff 	mov.w	r0, #4294967295
   8999c:	81aa      	strh	r2, [r5, #12]
   8999e:	f8ca 3008 	str.w	r3, [sl, #8]
   899a2:	f8ca 3004 	str.w	r3, [sl, #4]
   899a6:	b003      	add	sp, #12
   899a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   899ac:	4620      	mov	r0, r4
   899ae:	f8ca 4004 	str.w	r4, [sl, #4]
   899b2:	b003      	add	sp, #12
   899b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000899b8 <__swbuf_r>:
   899b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   899ba:	460d      	mov	r5, r1
   899bc:	4614      	mov	r4, r2
   899be:	4607      	mov	r7, r0
   899c0:	b110      	cbz	r0, 899c8 <__swbuf_r+0x10>
   899c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   899c4:	2b00      	cmp	r3, #0
   899c6:	d048      	beq.n	89a5a <__swbuf_r+0xa2>
   899c8:	89a2      	ldrh	r2, [r4, #12]
   899ca:	69a0      	ldr	r0, [r4, #24]
   899cc:	b293      	uxth	r3, r2
   899ce:	60a0      	str	r0, [r4, #8]
   899d0:	0718      	lsls	r0, r3, #28
   899d2:	d538      	bpl.n	89a46 <__swbuf_r+0x8e>
   899d4:	6926      	ldr	r6, [r4, #16]
   899d6:	2e00      	cmp	r6, #0
   899d8:	d035      	beq.n	89a46 <__swbuf_r+0x8e>
   899da:	0499      	lsls	r1, r3, #18
   899dc:	b2ed      	uxtb	r5, r5
   899de:	d515      	bpl.n	89a0c <__swbuf_r+0x54>
   899e0:	6823      	ldr	r3, [r4, #0]
   899e2:	6962      	ldr	r2, [r4, #20]
   899e4:	1b9e      	subs	r6, r3, r6
   899e6:	4296      	cmp	r6, r2
   899e8:	da1c      	bge.n	89a24 <__swbuf_r+0x6c>
   899ea:	3601      	adds	r6, #1
   899ec:	68a2      	ldr	r2, [r4, #8]
   899ee:	1c59      	adds	r1, r3, #1
   899f0:	3a01      	subs	r2, #1
   899f2:	60a2      	str	r2, [r4, #8]
   899f4:	6021      	str	r1, [r4, #0]
   899f6:	701d      	strb	r5, [r3, #0]
   899f8:	6963      	ldr	r3, [r4, #20]
   899fa:	42b3      	cmp	r3, r6
   899fc:	d01a      	beq.n	89a34 <__swbuf_r+0x7c>
   899fe:	89a3      	ldrh	r3, [r4, #12]
   89a00:	07db      	lsls	r3, r3, #31
   89a02:	d501      	bpl.n	89a08 <__swbuf_r+0x50>
   89a04:	2d0a      	cmp	r5, #10
   89a06:	d015      	beq.n	89a34 <__swbuf_r+0x7c>
   89a08:	4628      	mov	r0, r5
   89a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89a0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89a0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   89a12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   89a16:	6663      	str	r3, [r4, #100]	; 0x64
   89a18:	6823      	ldr	r3, [r4, #0]
   89a1a:	81a2      	strh	r2, [r4, #12]
   89a1c:	6962      	ldr	r2, [r4, #20]
   89a1e:	1b9e      	subs	r6, r3, r6
   89a20:	4296      	cmp	r6, r2
   89a22:	dbe2      	blt.n	899ea <__swbuf_r+0x32>
   89a24:	4638      	mov	r0, r7
   89a26:	4621      	mov	r1, r4
   89a28:	f7fe fa56 	bl	87ed8 <_fflush_r>
   89a2c:	b940      	cbnz	r0, 89a40 <__swbuf_r+0x88>
   89a2e:	6823      	ldr	r3, [r4, #0]
   89a30:	2601      	movs	r6, #1
   89a32:	e7db      	b.n	899ec <__swbuf_r+0x34>
   89a34:	4638      	mov	r0, r7
   89a36:	4621      	mov	r1, r4
   89a38:	f7fe fa4e 	bl	87ed8 <_fflush_r>
   89a3c:	2800      	cmp	r0, #0
   89a3e:	d0e3      	beq.n	89a08 <__swbuf_r+0x50>
   89a40:	f04f 30ff 	mov.w	r0, #4294967295
   89a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89a46:	4638      	mov	r0, r7
   89a48:	4621      	mov	r1, r4
   89a4a:	f7fd f979 	bl	86d40 <__swsetup_r>
   89a4e:	2800      	cmp	r0, #0
   89a50:	d1f6      	bne.n	89a40 <__swbuf_r+0x88>
   89a52:	89a2      	ldrh	r2, [r4, #12]
   89a54:	6926      	ldr	r6, [r4, #16]
   89a56:	b293      	uxth	r3, r2
   89a58:	e7bf      	b.n	899da <__swbuf_r+0x22>
   89a5a:	f7fe fa59 	bl	87f10 <__sinit>
   89a5e:	e7b3      	b.n	899c8 <__swbuf_r+0x10>

00089a60 <_wcrtomb_r>:
   89a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89a64:	461e      	mov	r6, r3
   89a66:	b086      	sub	sp, #24
   89a68:	460c      	mov	r4, r1
   89a6a:	4605      	mov	r5, r0
   89a6c:	4617      	mov	r7, r2
   89a6e:	4b0f      	ldr	r3, [pc, #60]	; (89aac <_wcrtomb_r+0x4c>)
   89a70:	b191      	cbz	r1, 89a98 <_wcrtomb_r+0x38>
   89a72:	f8d3 8000 	ldr.w	r8, [r3]
   89a76:	f7fe fe0b 	bl	88690 <__locale_charset>
   89a7a:	9600      	str	r6, [sp, #0]
   89a7c:	4603      	mov	r3, r0
   89a7e:	4621      	mov	r1, r4
   89a80:	463a      	mov	r2, r7
   89a82:	4628      	mov	r0, r5
   89a84:	47c0      	blx	r8
   89a86:	1c43      	adds	r3, r0, #1
   89a88:	d103      	bne.n	89a92 <_wcrtomb_r+0x32>
   89a8a:	2200      	movs	r2, #0
   89a8c:	238a      	movs	r3, #138	; 0x8a
   89a8e:	6032      	str	r2, [r6, #0]
   89a90:	602b      	str	r3, [r5, #0]
   89a92:	b006      	add	sp, #24
   89a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89a98:	681f      	ldr	r7, [r3, #0]
   89a9a:	f7fe fdf9 	bl	88690 <__locale_charset>
   89a9e:	9600      	str	r6, [sp, #0]
   89aa0:	4603      	mov	r3, r0
   89aa2:	4622      	mov	r2, r4
   89aa4:	4628      	mov	r0, r5
   89aa6:	a903      	add	r1, sp, #12
   89aa8:	47b8      	blx	r7
   89aaa:	e7ec      	b.n	89a86 <_wcrtomb_r+0x26>
   89aac:	20070a50 	.word	0x20070a50

00089ab0 <__ascii_wctomb>:
   89ab0:	b121      	cbz	r1, 89abc <__ascii_wctomb+0xc>
   89ab2:	2aff      	cmp	r2, #255	; 0xff
   89ab4:	d804      	bhi.n	89ac0 <__ascii_wctomb+0x10>
   89ab6:	700a      	strb	r2, [r1, #0]
   89ab8:	2001      	movs	r0, #1
   89aba:	4770      	bx	lr
   89abc:	4608      	mov	r0, r1
   89abe:	4770      	bx	lr
   89ac0:	238a      	movs	r3, #138	; 0x8a
   89ac2:	6003      	str	r3, [r0, #0]
   89ac4:	f04f 30ff 	mov.w	r0, #4294967295
   89ac8:	4770      	bx	lr
   89aca:	bf00      	nop

00089acc <_write_r>:
   89acc:	b570      	push	{r4, r5, r6, lr}
   89ace:	4c08      	ldr	r4, [pc, #32]	; (89af0 <_write_r+0x24>)
   89ad0:	4606      	mov	r6, r0
   89ad2:	2500      	movs	r5, #0
   89ad4:	4608      	mov	r0, r1
   89ad6:	4611      	mov	r1, r2
   89ad8:	461a      	mov	r2, r3
   89ada:	6025      	str	r5, [r4, #0]
   89adc:	f7f7 fbd2 	bl	81284 <_write>
   89ae0:	1c43      	adds	r3, r0, #1
   89ae2:	d000      	beq.n	89ae6 <_write_r+0x1a>
   89ae4:	bd70      	pop	{r4, r5, r6, pc}
   89ae6:	6823      	ldr	r3, [r4, #0]
   89ae8:	2b00      	cmp	r3, #0
   89aea:	d0fb      	beq.n	89ae4 <_write_r+0x18>
   89aec:	6033      	str	r3, [r6, #0]
   89aee:	bd70      	pop	{r4, r5, r6, pc}
   89af0:	20078e14 	.word	0x20078e14

00089af4 <__register_exitproc>:
   89af4:	b5f0      	push	{r4, r5, r6, r7, lr}
   89af6:	4c27      	ldr	r4, [pc, #156]	; (89b94 <__register_exitproc+0xa0>)
   89af8:	b085      	sub	sp, #20
   89afa:	6826      	ldr	r6, [r4, #0]
   89afc:	4607      	mov	r7, r0
   89afe:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   89b02:	2c00      	cmp	r4, #0
   89b04:	d040      	beq.n	89b88 <__register_exitproc+0x94>
   89b06:	6865      	ldr	r5, [r4, #4]
   89b08:	2d1f      	cmp	r5, #31
   89b0a:	dd1e      	ble.n	89b4a <__register_exitproc+0x56>
   89b0c:	4822      	ldr	r0, [pc, #136]	; (89b98 <__register_exitproc+0xa4>)
   89b0e:	b918      	cbnz	r0, 89b18 <__register_exitproc+0x24>
   89b10:	f04f 30ff 	mov.w	r0, #4294967295
   89b14:	b005      	add	sp, #20
   89b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   89b18:	f44f 70c8 	mov.w	r0, #400	; 0x190
   89b1c:	9103      	str	r1, [sp, #12]
   89b1e:	9202      	str	r2, [sp, #8]
   89b20:	9301      	str	r3, [sp, #4]
   89b22:	f7fe fe33 	bl	8878c <malloc>
   89b26:	9903      	ldr	r1, [sp, #12]
   89b28:	4604      	mov	r4, r0
   89b2a:	9a02      	ldr	r2, [sp, #8]
   89b2c:	9b01      	ldr	r3, [sp, #4]
   89b2e:	2800      	cmp	r0, #0
   89b30:	d0ee      	beq.n	89b10 <__register_exitproc+0x1c>
   89b32:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   89b36:	2000      	movs	r0, #0
   89b38:	6025      	str	r5, [r4, #0]
   89b3a:	6060      	str	r0, [r4, #4]
   89b3c:	4605      	mov	r5, r0
   89b3e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   89b42:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   89b46:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   89b4a:	b93f      	cbnz	r7, 89b5c <__register_exitproc+0x68>
   89b4c:	1c6b      	adds	r3, r5, #1
   89b4e:	2000      	movs	r0, #0
   89b50:	3502      	adds	r5, #2
   89b52:	6063      	str	r3, [r4, #4]
   89b54:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   89b58:	b005      	add	sp, #20
   89b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   89b5c:	2601      	movs	r6, #1
   89b5e:	40ae      	lsls	r6, r5
   89b60:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   89b64:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   89b68:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   89b6c:	2f02      	cmp	r7, #2
   89b6e:	ea42 0206 	orr.w	r2, r2, r6
   89b72:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   89b76:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   89b7a:	d1e7      	bne.n	89b4c <__register_exitproc+0x58>
   89b7c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   89b80:	431e      	orrs	r6, r3
   89b82:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   89b86:	e7e1      	b.n	89b4c <__register_exitproc+0x58>
   89b88:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   89b8c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   89b90:	e7b9      	b.n	89b06 <__register_exitproc+0x12>
   89b92:	bf00      	nop
   89b94:	0008a790 	.word	0x0008a790
   89b98:	0008878d 	.word	0x0008878d

00089b9c <_calloc_r>:
   89b9c:	b510      	push	{r4, lr}
   89b9e:	fb02 f101 	mul.w	r1, r2, r1
   89ba2:	f7fe fdfb 	bl	8879c <_malloc_r>
   89ba6:	4604      	mov	r4, r0
   89ba8:	b168      	cbz	r0, 89bc6 <_calloc_r+0x2a>
   89baa:	f850 2c04 	ldr.w	r2, [r0, #-4]
   89bae:	f022 0203 	bic.w	r2, r2, #3
   89bb2:	3a04      	subs	r2, #4
   89bb4:	2a24      	cmp	r2, #36	; 0x24
   89bb6:	d818      	bhi.n	89bea <_calloc_r+0x4e>
   89bb8:	2a13      	cmp	r2, #19
   89bba:	d806      	bhi.n	89bca <_calloc_r+0x2e>
   89bbc:	4603      	mov	r3, r0
   89bbe:	2200      	movs	r2, #0
   89bc0:	601a      	str	r2, [r3, #0]
   89bc2:	605a      	str	r2, [r3, #4]
   89bc4:	609a      	str	r2, [r3, #8]
   89bc6:	4620      	mov	r0, r4
   89bc8:	bd10      	pop	{r4, pc}
   89bca:	2300      	movs	r3, #0
   89bcc:	2a1b      	cmp	r2, #27
   89bce:	6003      	str	r3, [r0, #0]
   89bd0:	6043      	str	r3, [r0, #4]
   89bd2:	d90f      	bls.n	89bf4 <_calloc_r+0x58>
   89bd4:	2a24      	cmp	r2, #36	; 0x24
   89bd6:	6083      	str	r3, [r0, #8]
   89bd8:	60c3      	str	r3, [r0, #12]
   89bda:	bf05      	ittet	eq
   89bdc:	6103      	streq	r3, [r0, #16]
   89bde:	6143      	streq	r3, [r0, #20]
   89be0:	f100 0310 	addne.w	r3, r0, #16
   89be4:	f100 0318 	addeq.w	r3, r0, #24
   89be8:	e7e9      	b.n	89bbe <_calloc_r+0x22>
   89bea:	2100      	movs	r1, #0
   89bec:	f7fa fe3a 	bl	84864 <memset>
   89bf0:	4620      	mov	r0, r4
   89bf2:	bd10      	pop	{r4, pc}
   89bf4:	f100 0308 	add.w	r3, r0, #8
   89bf8:	e7e1      	b.n	89bbe <_calloc_r+0x22>
   89bfa:	bf00      	nop

00089bfc <_close_r>:
   89bfc:	b538      	push	{r3, r4, r5, lr}
   89bfe:	4c07      	ldr	r4, [pc, #28]	; (89c1c <_close_r+0x20>)
   89c00:	2300      	movs	r3, #0
   89c02:	4605      	mov	r5, r0
   89c04:	4608      	mov	r0, r1
   89c06:	6023      	str	r3, [r4, #0]
   89c08:	f7f9 fc7c 	bl	83504 <_close>
   89c0c:	1c43      	adds	r3, r0, #1
   89c0e:	d000      	beq.n	89c12 <_close_r+0x16>
   89c10:	bd38      	pop	{r3, r4, r5, pc}
   89c12:	6823      	ldr	r3, [r4, #0]
   89c14:	2b00      	cmp	r3, #0
   89c16:	d0fb      	beq.n	89c10 <_close_r+0x14>
   89c18:	602b      	str	r3, [r5, #0]
   89c1a:	bd38      	pop	{r3, r4, r5, pc}
   89c1c:	20078e14 	.word	0x20078e14

00089c20 <_fclose_r>:
   89c20:	b570      	push	{r4, r5, r6, lr}
   89c22:	460c      	mov	r4, r1
   89c24:	4605      	mov	r5, r0
   89c26:	b131      	cbz	r1, 89c36 <_fclose_r+0x16>
   89c28:	b110      	cbz	r0, 89c30 <_fclose_r+0x10>
   89c2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89c2c:	2b00      	cmp	r3, #0
   89c2e:	d02f      	beq.n	89c90 <_fclose_r+0x70>
   89c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89c34:	b90b      	cbnz	r3, 89c3a <_fclose_r+0x1a>
   89c36:	2000      	movs	r0, #0
   89c38:	bd70      	pop	{r4, r5, r6, pc}
   89c3a:	4628      	mov	r0, r5
   89c3c:	4621      	mov	r1, r4
   89c3e:	f7fe f94b 	bl	87ed8 <_fflush_r>
   89c42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   89c44:	4606      	mov	r6, r0
   89c46:	b133      	cbz	r3, 89c56 <_fclose_r+0x36>
   89c48:	4628      	mov	r0, r5
   89c4a:	69e1      	ldr	r1, [r4, #28]
   89c4c:	4798      	blx	r3
   89c4e:	2800      	cmp	r0, #0
   89c50:	bfb8      	it	lt
   89c52:	f04f 36ff 	movlt.w	r6, #4294967295
   89c56:	89a3      	ldrh	r3, [r4, #12]
   89c58:	061b      	lsls	r3, r3, #24
   89c5a:	d41c      	bmi.n	89c96 <_fclose_r+0x76>
   89c5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   89c5e:	b141      	cbz	r1, 89c72 <_fclose_r+0x52>
   89c60:	f104 0340 	add.w	r3, r4, #64	; 0x40
   89c64:	4299      	cmp	r1, r3
   89c66:	d002      	beq.n	89c6e <_fclose_r+0x4e>
   89c68:	4628      	mov	r0, r5
   89c6a:	f7fe fa95 	bl	88198 <_free_r>
   89c6e:	2300      	movs	r3, #0
   89c70:	6323      	str	r3, [r4, #48]	; 0x30
   89c72:	6c61      	ldr	r1, [r4, #68]	; 0x44
   89c74:	b121      	cbz	r1, 89c80 <_fclose_r+0x60>
   89c76:	4628      	mov	r0, r5
   89c78:	f7fe fa8e 	bl	88198 <_free_r>
   89c7c:	2300      	movs	r3, #0
   89c7e:	6463      	str	r3, [r4, #68]	; 0x44
   89c80:	f7fe f9c0 	bl	88004 <__sfp_lock_acquire>
   89c84:	2300      	movs	r3, #0
   89c86:	81a3      	strh	r3, [r4, #12]
   89c88:	f7fe f9be 	bl	88008 <__sfp_lock_release>
   89c8c:	4630      	mov	r0, r6
   89c8e:	bd70      	pop	{r4, r5, r6, pc}
   89c90:	f7fe f93e 	bl	87f10 <__sinit>
   89c94:	e7cc      	b.n	89c30 <_fclose_r+0x10>
   89c96:	4628      	mov	r0, r5
   89c98:	6921      	ldr	r1, [r4, #16]
   89c9a:	f7fe fa7d 	bl	88198 <_free_r>
   89c9e:	e7dd      	b.n	89c5c <_fclose_r+0x3c>

00089ca0 <fclose>:
   89ca0:	4b02      	ldr	r3, [pc, #8]	; (89cac <fclose+0xc>)
   89ca2:	4601      	mov	r1, r0
   89ca4:	6818      	ldr	r0, [r3, #0]
   89ca6:	f7ff bfbb 	b.w	89c20 <_fclose_r>
   89caa:	bf00      	nop
   89cac:	200705e0 	.word	0x200705e0

00089cb0 <_fstat_r>:
   89cb0:	b538      	push	{r3, r4, r5, lr}
   89cb2:	4c08      	ldr	r4, [pc, #32]	; (89cd4 <_fstat_r+0x24>)
   89cb4:	2300      	movs	r3, #0
   89cb6:	4605      	mov	r5, r0
   89cb8:	4608      	mov	r0, r1
   89cba:	4611      	mov	r1, r2
   89cbc:	6023      	str	r3, [r4, #0]
   89cbe:	f7f9 fc25 	bl	8350c <_fstat>
   89cc2:	1c43      	adds	r3, r0, #1
   89cc4:	d000      	beq.n	89cc8 <_fstat_r+0x18>
   89cc6:	bd38      	pop	{r3, r4, r5, pc}
   89cc8:	6823      	ldr	r3, [r4, #0]
   89cca:	2b00      	cmp	r3, #0
   89ccc:	d0fb      	beq.n	89cc6 <_fstat_r+0x16>
   89cce:	602b      	str	r3, [r5, #0]
   89cd0:	bd38      	pop	{r3, r4, r5, pc}
   89cd2:	bf00      	nop
   89cd4:	20078e14 	.word	0x20078e14

00089cd8 <_isatty_r>:
   89cd8:	b538      	push	{r3, r4, r5, lr}
   89cda:	4c07      	ldr	r4, [pc, #28]	; (89cf8 <_isatty_r+0x20>)
   89cdc:	2300      	movs	r3, #0
   89cde:	4605      	mov	r5, r0
   89ce0:	4608      	mov	r0, r1
   89ce2:	6023      	str	r3, [r4, #0]
   89ce4:	f7f9 fc18 	bl	83518 <_isatty>
   89ce8:	1c43      	adds	r3, r0, #1
   89cea:	d000      	beq.n	89cee <_isatty_r+0x16>
   89cec:	bd38      	pop	{r3, r4, r5, pc}
   89cee:	6823      	ldr	r3, [r4, #0]
   89cf0:	2b00      	cmp	r3, #0
   89cf2:	d0fb      	beq.n	89cec <_isatty_r+0x14>
   89cf4:	602b      	str	r3, [r5, #0]
   89cf6:	bd38      	pop	{r3, r4, r5, pc}
   89cf8:	20078e14 	.word	0x20078e14

00089cfc <_lseek_r>:
   89cfc:	b570      	push	{r4, r5, r6, lr}
   89cfe:	4c08      	ldr	r4, [pc, #32]	; (89d20 <_lseek_r+0x24>)
   89d00:	4606      	mov	r6, r0
   89d02:	2500      	movs	r5, #0
   89d04:	4608      	mov	r0, r1
   89d06:	4611      	mov	r1, r2
   89d08:	461a      	mov	r2, r3
   89d0a:	6025      	str	r5, [r4, #0]
   89d0c:	f7f9 fc06 	bl	8351c <_lseek>
   89d10:	1c43      	adds	r3, r0, #1
   89d12:	d000      	beq.n	89d16 <_lseek_r+0x1a>
   89d14:	bd70      	pop	{r4, r5, r6, pc}
   89d16:	6823      	ldr	r3, [r4, #0]
   89d18:	2b00      	cmp	r3, #0
   89d1a:	d0fb      	beq.n	89d14 <_lseek_r+0x18>
   89d1c:	6033      	str	r3, [r6, #0]
   89d1e:	bd70      	pop	{r4, r5, r6, pc}
   89d20:	20078e14 	.word	0x20078e14

00089d24 <_read_r>:
   89d24:	b570      	push	{r4, r5, r6, lr}
   89d26:	4c08      	ldr	r4, [pc, #32]	; (89d48 <_read_r+0x24>)
   89d28:	4606      	mov	r6, r0
   89d2a:	2500      	movs	r5, #0
   89d2c:	4608      	mov	r0, r1
   89d2e:	4611      	mov	r1, r2
   89d30:	461a      	mov	r2, r3
   89d32:	6025      	str	r5, [r4, #0]
   89d34:	f7f7 fa86 	bl	81244 <_read>
   89d38:	1c43      	adds	r3, r0, #1
   89d3a:	d000      	beq.n	89d3e <_read_r+0x1a>
   89d3c:	bd70      	pop	{r4, r5, r6, pc}
   89d3e:	6823      	ldr	r3, [r4, #0]
   89d40:	2b00      	cmp	r3, #0
   89d42:	d0fb      	beq.n	89d3c <_read_r+0x18>
   89d44:	6033      	str	r3, [r6, #0]
   89d46:	bd70      	pop	{r4, r5, r6, pc}
   89d48:	20078e14 	.word	0x20078e14

00089d4c <__aeabi_uldivmod>:
   89d4c:	b94b      	cbnz	r3, 89d62 <__aeabi_uldivmod+0x16>
   89d4e:	b942      	cbnz	r2, 89d62 <__aeabi_uldivmod+0x16>
   89d50:	2900      	cmp	r1, #0
   89d52:	bf08      	it	eq
   89d54:	2800      	cmpeq	r0, #0
   89d56:	d002      	beq.n	89d5e <__aeabi_uldivmod+0x12>
   89d58:	f04f 31ff 	mov.w	r1, #4294967295
   89d5c:	4608      	mov	r0, r1
   89d5e:	f000 b83b 	b.w	89dd8 <__aeabi_idiv0>
   89d62:	b082      	sub	sp, #8
   89d64:	46ec      	mov	ip, sp
   89d66:	e92d 5000 	stmdb	sp!, {ip, lr}
   89d6a:	f000 f81d 	bl	89da8 <__gnu_uldivmod_helper>
   89d6e:	f8dd e004 	ldr.w	lr, [sp, #4]
   89d72:	b002      	add	sp, #8
   89d74:	bc0c      	pop	{r2, r3}
   89d76:	4770      	bx	lr

00089d78 <__gnu_ldivmod_helper>:
   89d78:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   89d7c:	9e08      	ldr	r6, [sp, #32]
   89d7e:	4614      	mov	r4, r2
   89d80:	461d      	mov	r5, r3
   89d82:	4680      	mov	r8, r0
   89d84:	4689      	mov	r9, r1
   89d86:	f000 f829 	bl	89ddc <__divdi3>
   89d8a:	fb04 f301 	mul.w	r3, r4, r1
   89d8e:	fba4 ab00 	umull	sl, fp, r4, r0
   89d92:	fb00 3205 	mla	r2, r0, r5, r3
   89d96:	4493      	add	fp, r2
   89d98:	ebb8 080a 	subs.w	r8, r8, sl
   89d9c:	eb69 090b 	sbc.w	r9, r9, fp
   89da0:	e9c6 8900 	strd	r8, r9, [r6]
   89da4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00089da8 <__gnu_uldivmod_helper>:
   89da8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   89dac:	9e08      	ldr	r6, [sp, #32]
   89dae:	4614      	mov	r4, r2
   89db0:	461d      	mov	r5, r3
   89db2:	4680      	mov	r8, r0
   89db4:	4689      	mov	r9, r1
   89db6:	f000 f961 	bl	8a07c <__udivdi3>
   89dba:	fb00 f505 	mul.w	r5, r0, r5
   89dbe:	fba0 ab04 	umull	sl, fp, r0, r4
   89dc2:	fb04 5401 	mla	r4, r4, r1, r5
   89dc6:	44a3      	add	fp, r4
   89dc8:	ebb8 080a 	subs.w	r8, r8, sl
   89dcc:	eb69 090b 	sbc.w	r9, r9, fp
   89dd0:	e9c6 8900 	strd	r8, r9, [r6]
   89dd4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00089dd8 <__aeabi_idiv0>:
   89dd8:	4770      	bx	lr
   89dda:	bf00      	nop

00089ddc <__divdi3>:
   89ddc:	2900      	cmp	r1, #0
   89dde:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   89de2:	f2c0 80a1 	blt.w	89f28 <__divdi3+0x14c>
   89de6:	2400      	movs	r4, #0
   89de8:	2b00      	cmp	r3, #0
   89dea:	f2c0 8098 	blt.w	89f1e <__divdi3+0x142>
   89dee:	4615      	mov	r5, r2
   89df0:	4606      	mov	r6, r0
   89df2:	460f      	mov	r7, r1
   89df4:	2b00      	cmp	r3, #0
   89df6:	d13f      	bne.n	89e78 <__divdi3+0x9c>
   89df8:	428a      	cmp	r2, r1
   89dfa:	d958      	bls.n	89eae <__divdi3+0xd2>
   89dfc:	fab2 f382 	clz	r3, r2
   89e00:	b14b      	cbz	r3, 89e16 <__divdi3+0x3a>
   89e02:	f1c3 0220 	rsb	r2, r3, #32
   89e06:	fa01 f703 	lsl.w	r7, r1, r3
   89e0a:	fa20 f202 	lsr.w	r2, r0, r2
   89e0e:	409d      	lsls	r5, r3
   89e10:	fa00 f603 	lsl.w	r6, r0, r3
   89e14:	4317      	orrs	r7, r2
   89e16:	0c29      	lsrs	r1, r5, #16
   89e18:	fbb7 f2f1 	udiv	r2, r7, r1
   89e1c:	fb01 7712 	mls	r7, r1, r2, r7
   89e20:	b2a8      	uxth	r0, r5
   89e22:	fb00 f302 	mul.w	r3, r0, r2
   89e26:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   89e2a:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   89e2e:	42bb      	cmp	r3, r7
   89e30:	d909      	bls.n	89e46 <__divdi3+0x6a>
   89e32:	197f      	adds	r7, r7, r5
   89e34:	f102 3cff 	add.w	ip, r2, #4294967295
   89e38:	f080 8105 	bcs.w	8a046 <__divdi3+0x26a>
   89e3c:	42bb      	cmp	r3, r7
   89e3e:	f240 8102 	bls.w	8a046 <__divdi3+0x26a>
   89e42:	3a02      	subs	r2, #2
   89e44:	442f      	add	r7, r5
   89e46:	1aff      	subs	r7, r7, r3
   89e48:	fbb7 f3f1 	udiv	r3, r7, r1
   89e4c:	fb01 7113 	mls	r1, r1, r3, r7
   89e50:	fb00 f003 	mul.w	r0, r0, r3
   89e54:	b2b6      	uxth	r6, r6
   89e56:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   89e5a:	4288      	cmp	r0, r1
   89e5c:	d908      	bls.n	89e70 <__divdi3+0x94>
   89e5e:	1949      	adds	r1, r1, r5
   89e60:	f103 37ff 	add.w	r7, r3, #4294967295
   89e64:	f080 80f1 	bcs.w	8a04a <__divdi3+0x26e>
   89e68:	4288      	cmp	r0, r1
   89e6a:	f240 80ee 	bls.w	8a04a <__divdi3+0x26e>
   89e6e:	3b02      	subs	r3, #2
   89e70:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   89e74:	2300      	movs	r3, #0
   89e76:	e003      	b.n	89e80 <__divdi3+0xa4>
   89e78:	428b      	cmp	r3, r1
   89e7a:	d90a      	bls.n	89e92 <__divdi3+0xb6>
   89e7c:	2300      	movs	r3, #0
   89e7e:	461a      	mov	r2, r3
   89e80:	4610      	mov	r0, r2
   89e82:	4619      	mov	r1, r3
   89e84:	b114      	cbz	r4, 89e8c <__divdi3+0xb0>
   89e86:	4240      	negs	r0, r0
   89e88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   89e8c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   89e90:	4770      	bx	lr
   89e92:	fab3 f883 	clz	r8, r3
   89e96:	f1b8 0f00 	cmp.w	r8, #0
   89e9a:	f040 8088 	bne.w	89fae <__divdi3+0x1d2>
   89e9e:	428b      	cmp	r3, r1
   89ea0:	d302      	bcc.n	89ea8 <__divdi3+0xcc>
   89ea2:	4282      	cmp	r2, r0
   89ea4:	f200 80e2 	bhi.w	8a06c <__divdi3+0x290>
   89ea8:	2300      	movs	r3, #0
   89eaa:	2201      	movs	r2, #1
   89eac:	e7e8      	b.n	89e80 <__divdi3+0xa4>
   89eae:	b912      	cbnz	r2, 89eb6 <__divdi3+0xda>
   89eb0:	2301      	movs	r3, #1
   89eb2:	fbb3 f5f2 	udiv	r5, r3, r2
   89eb6:	fab5 f285 	clz	r2, r5
   89eba:	2a00      	cmp	r2, #0
   89ebc:	d13a      	bne.n	89f34 <__divdi3+0x158>
   89ebe:	1b7f      	subs	r7, r7, r5
   89ec0:	0c28      	lsrs	r0, r5, #16
   89ec2:	fa1f fc85 	uxth.w	ip, r5
   89ec6:	2301      	movs	r3, #1
   89ec8:	fbb7 f1f0 	udiv	r1, r7, r0
   89ecc:	fb00 7711 	mls	r7, r0, r1, r7
   89ed0:	fb0c f201 	mul.w	r2, ip, r1
   89ed4:	ea4f 4816 	mov.w	r8, r6, lsr #16
   89ed8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   89edc:	42ba      	cmp	r2, r7
   89ede:	d907      	bls.n	89ef0 <__divdi3+0x114>
   89ee0:	197f      	adds	r7, r7, r5
   89ee2:	f101 38ff 	add.w	r8, r1, #4294967295
   89ee6:	d202      	bcs.n	89eee <__divdi3+0x112>
   89ee8:	42ba      	cmp	r2, r7
   89eea:	f200 80c4 	bhi.w	8a076 <__divdi3+0x29a>
   89eee:	4641      	mov	r1, r8
   89ef0:	1abf      	subs	r7, r7, r2
   89ef2:	fbb7 f2f0 	udiv	r2, r7, r0
   89ef6:	fb00 7012 	mls	r0, r0, r2, r7
   89efa:	fb0c fc02 	mul.w	ip, ip, r2
   89efe:	b2b6      	uxth	r6, r6
   89f00:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   89f04:	4584      	cmp	ip, r0
   89f06:	d907      	bls.n	89f18 <__divdi3+0x13c>
   89f08:	1940      	adds	r0, r0, r5
   89f0a:	f102 37ff 	add.w	r7, r2, #4294967295
   89f0e:	d202      	bcs.n	89f16 <__divdi3+0x13a>
   89f10:	4584      	cmp	ip, r0
   89f12:	f200 80ae 	bhi.w	8a072 <__divdi3+0x296>
   89f16:	463a      	mov	r2, r7
   89f18:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   89f1c:	e7b0      	b.n	89e80 <__divdi3+0xa4>
   89f1e:	43e4      	mvns	r4, r4
   89f20:	4252      	negs	r2, r2
   89f22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   89f26:	e762      	b.n	89dee <__divdi3+0x12>
   89f28:	4240      	negs	r0, r0
   89f2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   89f2e:	f04f 34ff 	mov.w	r4, #4294967295
   89f32:	e759      	b.n	89de8 <__divdi3+0xc>
   89f34:	4095      	lsls	r5, r2
   89f36:	f1c2 0920 	rsb	r9, r2, #32
   89f3a:	fa27 f109 	lsr.w	r1, r7, r9
   89f3e:	fa26 f909 	lsr.w	r9, r6, r9
   89f42:	4097      	lsls	r7, r2
   89f44:	0c28      	lsrs	r0, r5, #16
   89f46:	fbb1 f8f0 	udiv	r8, r1, r0
   89f4a:	fb00 1118 	mls	r1, r0, r8, r1
   89f4e:	fa1f fc85 	uxth.w	ip, r5
   89f52:	fb0c f308 	mul.w	r3, ip, r8
   89f56:	ea49 0907 	orr.w	r9, r9, r7
   89f5a:	ea4f 4719 	mov.w	r7, r9, lsr #16
   89f5e:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   89f62:	428b      	cmp	r3, r1
   89f64:	fa06 f602 	lsl.w	r6, r6, r2
   89f68:	d908      	bls.n	89f7c <__divdi3+0x1a0>
   89f6a:	1949      	adds	r1, r1, r5
   89f6c:	f108 32ff 	add.w	r2, r8, #4294967295
   89f70:	d27a      	bcs.n	8a068 <__divdi3+0x28c>
   89f72:	428b      	cmp	r3, r1
   89f74:	d978      	bls.n	8a068 <__divdi3+0x28c>
   89f76:	f1a8 0802 	sub.w	r8, r8, #2
   89f7a:	4429      	add	r1, r5
   89f7c:	1ac9      	subs	r1, r1, r3
   89f7e:	fbb1 f3f0 	udiv	r3, r1, r0
   89f82:	fb00 1713 	mls	r7, r0, r3, r1
   89f86:	fb0c f203 	mul.w	r2, ip, r3
   89f8a:	fa1f f989 	uxth.w	r9, r9
   89f8e:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   89f92:	42ba      	cmp	r2, r7
   89f94:	d907      	bls.n	89fa6 <__divdi3+0x1ca>
   89f96:	197f      	adds	r7, r7, r5
   89f98:	f103 31ff 	add.w	r1, r3, #4294967295
   89f9c:	d260      	bcs.n	8a060 <__divdi3+0x284>
   89f9e:	42ba      	cmp	r2, r7
   89fa0:	d95e      	bls.n	8a060 <__divdi3+0x284>
   89fa2:	3b02      	subs	r3, #2
   89fa4:	442f      	add	r7, r5
   89fa6:	1abf      	subs	r7, r7, r2
   89fa8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   89fac:	e78c      	b.n	89ec8 <__divdi3+0xec>
   89fae:	f1c8 0220 	rsb	r2, r8, #32
   89fb2:	fa25 f102 	lsr.w	r1, r5, r2
   89fb6:	fa03 fc08 	lsl.w	ip, r3, r8
   89fba:	fa27 f302 	lsr.w	r3, r7, r2
   89fbe:	fa20 f202 	lsr.w	r2, r0, r2
   89fc2:	fa07 f708 	lsl.w	r7, r7, r8
   89fc6:	ea41 0c0c 	orr.w	ip, r1, ip
   89fca:	ea4f 491c 	mov.w	r9, ip, lsr #16
   89fce:	fbb3 f1f9 	udiv	r1, r3, r9
   89fd2:	fb09 3311 	mls	r3, r9, r1, r3
   89fd6:	fa1f fa8c 	uxth.w	sl, ip
   89fda:	fb0a fb01 	mul.w	fp, sl, r1
   89fde:	4317      	orrs	r7, r2
   89fe0:	0c3a      	lsrs	r2, r7, #16
   89fe2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   89fe6:	459b      	cmp	fp, r3
   89fe8:	fa05 f008 	lsl.w	r0, r5, r8
   89fec:	d908      	bls.n	8a000 <__divdi3+0x224>
   89fee:	eb13 030c 	adds.w	r3, r3, ip
   89ff2:	f101 32ff 	add.w	r2, r1, #4294967295
   89ff6:	d235      	bcs.n	8a064 <__divdi3+0x288>
   89ff8:	459b      	cmp	fp, r3
   89ffa:	d933      	bls.n	8a064 <__divdi3+0x288>
   89ffc:	3902      	subs	r1, #2
   89ffe:	4463      	add	r3, ip
   8a000:	ebcb 0303 	rsb	r3, fp, r3
   8a004:	fbb3 f2f9 	udiv	r2, r3, r9
   8a008:	fb09 3312 	mls	r3, r9, r2, r3
   8a00c:	fb0a fa02 	mul.w	sl, sl, r2
   8a010:	b2bf      	uxth	r7, r7
   8a012:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   8a016:	45ba      	cmp	sl, r7
   8a018:	d908      	bls.n	8a02c <__divdi3+0x250>
   8a01a:	eb17 070c 	adds.w	r7, r7, ip
   8a01e:	f102 33ff 	add.w	r3, r2, #4294967295
   8a022:	d21b      	bcs.n	8a05c <__divdi3+0x280>
   8a024:	45ba      	cmp	sl, r7
   8a026:	d919      	bls.n	8a05c <__divdi3+0x280>
   8a028:	3a02      	subs	r2, #2
   8a02a:	4467      	add	r7, ip
   8a02c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   8a030:	fba5 0100 	umull	r0, r1, r5, r0
   8a034:	ebca 0707 	rsb	r7, sl, r7
   8a038:	428f      	cmp	r7, r1
   8a03a:	f04f 0300 	mov.w	r3, #0
   8a03e:	d30a      	bcc.n	8a056 <__divdi3+0x27a>
   8a040:	d005      	beq.n	8a04e <__divdi3+0x272>
   8a042:	462a      	mov	r2, r5
   8a044:	e71c      	b.n	89e80 <__divdi3+0xa4>
   8a046:	4662      	mov	r2, ip
   8a048:	e6fd      	b.n	89e46 <__divdi3+0x6a>
   8a04a:	463b      	mov	r3, r7
   8a04c:	e710      	b.n	89e70 <__divdi3+0x94>
   8a04e:	fa06 f608 	lsl.w	r6, r6, r8
   8a052:	4286      	cmp	r6, r0
   8a054:	d2f5      	bcs.n	8a042 <__divdi3+0x266>
   8a056:	1e6a      	subs	r2, r5, #1
   8a058:	2300      	movs	r3, #0
   8a05a:	e711      	b.n	89e80 <__divdi3+0xa4>
   8a05c:	461a      	mov	r2, r3
   8a05e:	e7e5      	b.n	8a02c <__divdi3+0x250>
   8a060:	460b      	mov	r3, r1
   8a062:	e7a0      	b.n	89fa6 <__divdi3+0x1ca>
   8a064:	4611      	mov	r1, r2
   8a066:	e7cb      	b.n	8a000 <__divdi3+0x224>
   8a068:	4690      	mov	r8, r2
   8a06a:	e787      	b.n	89f7c <__divdi3+0x1a0>
   8a06c:	4643      	mov	r3, r8
   8a06e:	4642      	mov	r2, r8
   8a070:	e706      	b.n	89e80 <__divdi3+0xa4>
   8a072:	3a02      	subs	r2, #2
   8a074:	e750      	b.n	89f18 <__divdi3+0x13c>
   8a076:	3902      	subs	r1, #2
   8a078:	442f      	add	r7, r5
   8a07a:	e739      	b.n	89ef0 <__divdi3+0x114>

0008a07c <__udivdi3>:
   8a07c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8a080:	4614      	mov	r4, r2
   8a082:	4605      	mov	r5, r0
   8a084:	460e      	mov	r6, r1
   8a086:	2b00      	cmp	r3, #0
   8a088:	d143      	bne.n	8a112 <__udivdi3+0x96>
   8a08a:	428a      	cmp	r2, r1
   8a08c:	d953      	bls.n	8a136 <__udivdi3+0xba>
   8a08e:	fab2 f782 	clz	r7, r2
   8a092:	b157      	cbz	r7, 8a0aa <__udivdi3+0x2e>
   8a094:	f1c7 0620 	rsb	r6, r7, #32
   8a098:	fa20 f606 	lsr.w	r6, r0, r6
   8a09c:	fa01 f307 	lsl.w	r3, r1, r7
   8a0a0:	fa02 f407 	lsl.w	r4, r2, r7
   8a0a4:	fa00 f507 	lsl.w	r5, r0, r7
   8a0a8:	431e      	orrs	r6, r3
   8a0aa:	0c21      	lsrs	r1, r4, #16
   8a0ac:	fbb6 f2f1 	udiv	r2, r6, r1
   8a0b0:	fb01 6612 	mls	r6, r1, r2, r6
   8a0b4:	b2a0      	uxth	r0, r4
   8a0b6:	fb00 f302 	mul.w	r3, r0, r2
   8a0ba:	0c2f      	lsrs	r7, r5, #16
   8a0bc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   8a0c0:	42b3      	cmp	r3, r6
   8a0c2:	d909      	bls.n	8a0d8 <__udivdi3+0x5c>
   8a0c4:	1936      	adds	r6, r6, r4
   8a0c6:	f102 37ff 	add.w	r7, r2, #4294967295
   8a0ca:	f080 80fd 	bcs.w	8a2c8 <__udivdi3+0x24c>
   8a0ce:	42b3      	cmp	r3, r6
   8a0d0:	f240 80fa 	bls.w	8a2c8 <__udivdi3+0x24c>
   8a0d4:	3a02      	subs	r2, #2
   8a0d6:	4426      	add	r6, r4
   8a0d8:	1af6      	subs	r6, r6, r3
   8a0da:	fbb6 f3f1 	udiv	r3, r6, r1
   8a0de:	fb01 6113 	mls	r1, r1, r3, r6
   8a0e2:	fb00 f003 	mul.w	r0, r0, r3
   8a0e6:	b2ad      	uxth	r5, r5
   8a0e8:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   8a0ec:	4288      	cmp	r0, r1
   8a0ee:	d908      	bls.n	8a102 <__udivdi3+0x86>
   8a0f0:	1909      	adds	r1, r1, r4
   8a0f2:	f103 36ff 	add.w	r6, r3, #4294967295
   8a0f6:	f080 80e9 	bcs.w	8a2cc <__udivdi3+0x250>
   8a0fa:	4288      	cmp	r0, r1
   8a0fc:	f240 80e6 	bls.w	8a2cc <__udivdi3+0x250>
   8a100:	3b02      	subs	r3, #2
   8a102:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8a106:	2300      	movs	r3, #0
   8a108:	4610      	mov	r0, r2
   8a10a:	4619      	mov	r1, r3
   8a10c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8a110:	4770      	bx	lr
   8a112:	428b      	cmp	r3, r1
   8a114:	d84c      	bhi.n	8a1b0 <__udivdi3+0x134>
   8a116:	fab3 f683 	clz	r6, r3
   8a11a:	2e00      	cmp	r6, #0
   8a11c:	d14f      	bne.n	8a1be <__udivdi3+0x142>
   8a11e:	428b      	cmp	r3, r1
   8a120:	d302      	bcc.n	8a128 <__udivdi3+0xac>
   8a122:	4282      	cmp	r2, r0
   8a124:	f200 80dd 	bhi.w	8a2e2 <__udivdi3+0x266>
   8a128:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8a12c:	2300      	movs	r3, #0
   8a12e:	2201      	movs	r2, #1
   8a130:	4610      	mov	r0, r2
   8a132:	4619      	mov	r1, r3
   8a134:	4770      	bx	lr
   8a136:	b912      	cbnz	r2, 8a13e <__udivdi3+0xc2>
   8a138:	2401      	movs	r4, #1
   8a13a:	fbb4 f4f2 	udiv	r4, r4, r2
   8a13e:	fab4 f284 	clz	r2, r4
   8a142:	2a00      	cmp	r2, #0
   8a144:	f040 8082 	bne.w	8a24c <__udivdi3+0x1d0>
   8a148:	1b09      	subs	r1, r1, r4
   8a14a:	0c26      	lsrs	r6, r4, #16
   8a14c:	b2a7      	uxth	r7, r4
   8a14e:	2301      	movs	r3, #1
   8a150:	fbb1 f0f6 	udiv	r0, r1, r6
   8a154:	fb06 1110 	mls	r1, r6, r0, r1
   8a158:	fb07 f200 	mul.w	r2, r7, r0
   8a15c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   8a160:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   8a164:	428a      	cmp	r2, r1
   8a166:	d907      	bls.n	8a178 <__udivdi3+0xfc>
   8a168:	1909      	adds	r1, r1, r4
   8a16a:	f100 3cff 	add.w	ip, r0, #4294967295
   8a16e:	d202      	bcs.n	8a176 <__udivdi3+0xfa>
   8a170:	428a      	cmp	r2, r1
   8a172:	f200 80c8 	bhi.w	8a306 <__udivdi3+0x28a>
   8a176:	4660      	mov	r0, ip
   8a178:	1a89      	subs	r1, r1, r2
   8a17a:	fbb1 f2f6 	udiv	r2, r1, r6
   8a17e:	fb06 1112 	mls	r1, r6, r2, r1
   8a182:	fb07 f702 	mul.w	r7, r7, r2
   8a186:	b2ad      	uxth	r5, r5
   8a188:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8a18c:	42af      	cmp	r7, r5
   8a18e:	d908      	bls.n	8a1a2 <__udivdi3+0x126>
   8a190:	192c      	adds	r4, r5, r4
   8a192:	f102 31ff 	add.w	r1, r2, #4294967295
   8a196:	f080 809b 	bcs.w	8a2d0 <__udivdi3+0x254>
   8a19a:	42a7      	cmp	r7, r4
   8a19c:	f240 8098 	bls.w	8a2d0 <__udivdi3+0x254>
   8a1a0:	3a02      	subs	r2, #2
   8a1a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   8a1a6:	4610      	mov	r0, r2
   8a1a8:	4619      	mov	r1, r3
   8a1aa:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8a1ae:	4770      	bx	lr
   8a1b0:	2300      	movs	r3, #0
   8a1b2:	461a      	mov	r2, r3
   8a1b4:	4610      	mov	r0, r2
   8a1b6:	4619      	mov	r1, r3
   8a1b8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8a1bc:	4770      	bx	lr
   8a1be:	f1c6 0520 	rsb	r5, r6, #32
   8a1c2:	fa22 f705 	lsr.w	r7, r2, r5
   8a1c6:	fa03 f406 	lsl.w	r4, r3, r6
   8a1ca:	fa21 f305 	lsr.w	r3, r1, r5
   8a1ce:	fa01 fb06 	lsl.w	fp, r1, r6
   8a1d2:	fa20 f505 	lsr.w	r5, r0, r5
   8a1d6:	433c      	orrs	r4, r7
   8a1d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   8a1dc:	fbb3 fcf8 	udiv	ip, r3, r8
   8a1e0:	fb08 331c 	mls	r3, r8, ip, r3
   8a1e4:	fa1f f984 	uxth.w	r9, r4
   8a1e8:	fb09 fa0c 	mul.w	sl, r9, ip
   8a1ec:	ea45 0b0b 	orr.w	fp, r5, fp
   8a1f0:	ea4f 451b 	mov.w	r5, fp, lsr #16
   8a1f4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   8a1f8:	459a      	cmp	sl, r3
   8a1fa:	fa02 f206 	lsl.w	r2, r2, r6
   8a1fe:	d904      	bls.n	8a20a <__udivdi3+0x18e>
   8a200:	191b      	adds	r3, r3, r4
   8a202:	f10c 35ff 	add.w	r5, ip, #4294967295
   8a206:	d36f      	bcc.n	8a2e8 <__udivdi3+0x26c>
   8a208:	46ac      	mov	ip, r5
   8a20a:	ebca 0303 	rsb	r3, sl, r3
   8a20e:	fbb3 f5f8 	udiv	r5, r3, r8
   8a212:	fb08 3315 	mls	r3, r8, r5, r3
   8a216:	fb09 f905 	mul.w	r9, r9, r5
   8a21a:	fa1f fb8b 	uxth.w	fp, fp
   8a21e:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   8a222:	45b9      	cmp	r9, r7
   8a224:	d904      	bls.n	8a230 <__udivdi3+0x1b4>
   8a226:	193f      	adds	r7, r7, r4
   8a228:	f105 33ff 	add.w	r3, r5, #4294967295
   8a22c:	d362      	bcc.n	8a2f4 <__udivdi3+0x278>
   8a22e:	461d      	mov	r5, r3
   8a230:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   8a234:	fbac 2302 	umull	r2, r3, ip, r2
   8a238:	ebc9 0707 	rsb	r7, r9, r7
   8a23c:	429f      	cmp	r7, r3
   8a23e:	f04f 0500 	mov.w	r5, #0
   8a242:	d34a      	bcc.n	8a2da <__udivdi3+0x25e>
   8a244:	d046      	beq.n	8a2d4 <__udivdi3+0x258>
   8a246:	4662      	mov	r2, ip
   8a248:	462b      	mov	r3, r5
   8a24a:	e75d      	b.n	8a108 <__udivdi3+0x8c>
   8a24c:	4094      	lsls	r4, r2
   8a24e:	f1c2 0920 	rsb	r9, r2, #32
   8a252:	fa21 fc09 	lsr.w	ip, r1, r9
   8a256:	4091      	lsls	r1, r2
   8a258:	fa20 f909 	lsr.w	r9, r0, r9
   8a25c:	0c26      	lsrs	r6, r4, #16
   8a25e:	fbbc f8f6 	udiv	r8, ip, r6
   8a262:	fb06 cc18 	mls	ip, r6, r8, ip
   8a266:	b2a7      	uxth	r7, r4
   8a268:	fb07 f308 	mul.w	r3, r7, r8
   8a26c:	ea49 0901 	orr.w	r9, r9, r1
   8a270:	ea4f 4119 	mov.w	r1, r9, lsr #16
   8a274:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   8a278:	4563      	cmp	r3, ip
   8a27a:	fa00 f502 	lsl.w	r5, r0, r2
   8a27e:	d909      	bls.n	8a294 <__udivdi3+0x218>
   8a280:	eb1c 0c04 	adds.w	ip, ip, r4
   8a284:	f108 32ff 	add.w	r2, r8, #4294967295
   8a288:	d23b      	bcs.n	8a302 <__udivdi3+0x286>
   8a28a:	4563      	cmp	r3, ip
   8a28c:	d939      	bls.n	8a302 <__udivdi3+0x286>
   8a28e:	f1a8 0802 	sub.w	r8, r8, #2
   8a292:	44a4      	add	ip, r4
   8a294:	ebc3 0c0c 	rsb	ip, r3, ip
   8a298:	fbbc f3f6 	udiv	r3, ip, r6
   8a29c:	fb06 c113 	mls	r1, r6, r3, ip
   8a2a0:	fb07 f203 	mul.w	r2, r7, r3
   8a2a4:	fa1f f989 	uxth.w	r9, r9
   8a2a8:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   8a2ac:	428a      	cmp	r2, r1
   8a2ae:	d907      	bls.n	8a2c0 <__udivdi3+0x244>
   8a2b0:	1909      	adds	r1, r1, r4
   8a2b2:	f103 30ff 	add.w	r0, r3, #4294967295
   8a2b6:	d222      	bcs.n	8a2fe <__udivdi3+0x282>
   8a2b8:	428a      	cmp	r2, r1
   8a2ba:	d920      	bls.n	8a2fe <__udivdi3+0x282>
   8a2bc:	3b02      	subs	r3, #2
   8a2be:	4421      	add	r1, r4
   8a2c0:	1a89      	subs	r1, r1, r2
   8a2c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8a2c6:	e743      	b.n	8a150 <__udivdi3+0xd4>
   8a2c8:	463a      	mov	r2, r7
   8a2ca:	e705      	b.n	8a0d8 <__udivdi3+0x5c>
   8a2cc:	4633      	mov	r3, r6
   8a2ce:	e718      	b.n	8a102 <__udivdi3+0x86>
   8a2d0:	460a      	mov	r2, r1
   8a2d2:	e766      	b.n	8a1a2 <__udivdi3+0x126>
   8a2d4:	40b0      	lsls	r0, r6
   8a2d6:	4290      	cmp	r0, r2
   8a2d8:	d2b5      	bcs.n	8a246 <__udivdi3+0x1ca>
   8a2da:	f10c 32ff 	add.w	r2, ip, #4294967295
   8a2de:	2300      	movs	r3, #0
   8a2e0:	e712      	b.n	8a108 <__udivdi3+0x8c>
   8a2e2:	4633      	mov	r3, r6
   8a2e4:	4632      	mov	r2, r6
   8a2e6:	e70f      	b.n	8a108 <__udivdi3+0x8c>
   8a2e8:	459a      	cmp	sl, r3
   8a2ea:	d98d      	bls.n	8a208 <__udivdi3+0x18c>
   8a2ec:	f1ac 0c02 	sub.w	ip, ip, #2
   8a2f0:	4423      	add	r3, r4
   8a2f2:	e78a      	b.n	8a20a <__udivdi3+0x18e>
   8a2f4:	45b9      	cmp	r9, r7
   8a2f6:	d99a      	bls.n	8a22e <__udivdi3+0x1b2>
   8a2f8:	3d02      	subs	r5, #2
   8a2fa:	4427      	add	r7, r4
   8a2fc:	e798      	b.n	8a230 <__udivdi3+0x1b4>
   8a2fe:	4603      	mov	r3, r0
   8a300:	e7de      	b.n	8a2c0 <__udivdi3+0x244>
   8a302:	4690      	mov	r8, r2
   8a304:	e7c6      	b.n	8a294 <__udivdi3+0x218>
   8a306:	3802      	subs	r0, #2
   8a308:	4421      	add	r1, r4
   8a30a:	e735      	b.n	8a178 <__udivdi3+0xfc>
   8a30c:	20495754 	.word	0x20495754
   8a310:	2056414e 	.word	0x2056414e
   8a314:	00004b4f 	.word	0x00004b4f
   8a318:	20495754 	.word	0x20495754
   8a31c:	20424150 	.word	0x20424150
   8a320:	00004b4f 	.word	0x00004b4f
   8a324:	73206e69 	.word	0x73206e69
   8a328:	0a646e65 	.word	0x0a646e65
   8a32c:	00000000 	.word	0x00000000
   8a330:	2056414e 	.word	0x2056414e
   8a334:	4b434150 	.word	0x4b434150
   8a338:	00000000 	.word	0x00000000
   8a33c:	49595254 	.word	0x49595254
   8a340:	5420474e 	.word	0x5420474e
   8a344:	4553204f 	.word	0x4553204f
   8a348:	000a444e 	.word	0x000a444e
   8a34c:	656e6f64 	.word	0x656e6f64
   8a350:	6e657320 	.word	0x6e657320
   8a354:	676e6964 	.word	0x676e6964
   8a358:	76616e20 	.word	0x76616e20
   8a35c:	0000000a 	.word	0x0000000a
   8a360:	20424150 	.word	0x20424150
   8a364:	4b434150 	.word	0x4b434150
   8a368:	00000030 	.word	0x00000030
   8a36c:	656e6f64 	.word	0x656e6f64
   8a370:	6e657320 	.word	0x6e657320
   8a374:	676e6964 	.word	0x676e6964
   8a378:	62617020 	.word	0x62617020
   8a37c:	0000000a 	.word	0x0000000a
   8a380:	72617453 	.word	0x72617453
   8a384:	666f2074 	.word	0x666f2074
   8a388:	63657220 	.word	0x63657220
   8a38c:	65766965 	.word	0x65766965
   8a390:	0000000a 	.word	0x0000000a
   8a394:	69595254 	.word	0x69595254
   8a398:	7420676e 	.word	0x7420676e
   8a39c:	6572206f 	.word	0x6572206f
   8a3a0:	76696563 	.word	0x76696563
   8a3a4:	616e2065 	.word	0x616e2065
   8a3a8:	00000076 	.word	0x00000076
   8a3ac:	656e6f64 	.word	0x656e6f64
   8a3b0:	6e657320 	.word	0x6e657320
   8a3b4:	676e6964 	.word	0x676e6964
   8a3b8:	00000000 	.word	0x00000000
   8a3bc:	69595254 	.word	0x69595254
   8a3c0:	7420676e 	.word	0x7420676e
   8a3c4:	6572206f 	.word	0x6572206f
   8a3c8:	76696563 	.word	0x76696563
   8a3cc:	61502065 	.word	0x61502065
   8a3d0:	00000000 	.word	0x00000000
   8a3d4:	6c61430a 	.word	0x6c61430a
   8a3d8:	203d2063 	.word	0x203d2063
   8a3dc:	00006425 	.word	0x00006425
   8a3e0:	6c6c6548 	.word	0x6c6c6548
   8a3e4:	00003f6f 	.word	0x00003f6f
   8a3e8:	6e69500a 	.word	0x6e69500a
   8a3ec:	4b4f2073 	.word	0x4b4f2073
   8a3f0:	00000000 	.word	0x00000000
   8a3f4:	696e490a 	.word	0x696e490a
   8a3f8:	6e695f74 	.word	0x6e695f74
   8a3fc:	72726574 	.word	0x72726574
   8a400:	20747075 	.word	0x20747075
   8a404:	00006b6f 	.word	0x00006b6f
   8a408:	7261540a 	.word	0x7261540a
   8a40c:	20746567 	.word	0x20746567
   8a410:	74736944 	.word	0x74736944
   8a414:	65636e61 	.word	0x65636e61
   8a418:	6425203a 	.word	0x6425203a
   8a41c:	00000000 	.word	0x00000000
   8a420:	6c65460a 	.word	0x6c65460a
   8a424:	6472e476 	.word	0x6472e476
   8a428:	25203a65 	.word	0x25203a65
   8a42c:	00000064 	.word	0x00000064
   8a430:	6972640a 	.word	0x6972640a
   8a434:	6f436576 	.word	0x6f436576
   8a438:	20746e75 	.word	0x20746e75
   8a43c:	6425203d 	.word	0x6425203d
   8a440:	00000000 	.word	0x00000000
   8a444:	7665720a 	.word	0x7665720a
   8a448:	65737265 	.word	0x65737265
   8a44c:	676e615f 	.word	0x676e615f
   8a450:	203a656c 	.word	0x203a656c
   8a454:	00006425 	.word	0x00006425
   8a458:	7269640a 	.word	0x7269640a
   8a45c:	5f746365 	.word	0x5f746365
   8a460:	6c676e61 	.word	0x6c676e61
   8a464:	25203a65 	.word	0x25203a65
   8a468:	00000064 	.word	0x00000064
   8a46c:	756f630a 	.word	0x756f630a
   8a470:	6e20746e 	.word	0x6e20746e
   8a474:	006c6c75 	.word	0x006c6c75
   8a478:	635f720a 	.word	0x635f720a
   8a47c:	746e756f 	.word	0x746e756f
   8a480:	25203d20 	.word	0x25203d20
   8a484:	00000064 	.word	0x00000064
   8a488:	756f630a 	.word	0x756f630a
   8a48c:	725f746e 	.word	0x725f746e
   8a490:	74686769 	.word	0x74686769
   8a494:	25203d20 	.word	0x25203d20
   8a498:	00000064 	.word	0x00000064
   8a49c:	635f6c0a 	.word	0x635f6c0a
   8a4a0:	746e756f 	.word	0x746e756f
   8a4a4:	25203d20 	.word	0x25203d20
   8a4a8:	00000064 	.word	0x00000064
   8a4ac:	756f630a 	.word	0x756f630a
   8a4b0:	6c5f746e 	.word	0x6c5f746e
   8a4b4:	20746665 	.word	0x20746665
   8a4b8:	6425203d 	.word	0x6425203d
   8a4bc:	00000000 	.word	0x00000000
   8a4c0:	756f430a 	.word	0x756f430a
   8a4c4:	7265746e 	.word	0x7265746e
   8a4c8:	25203d20 	.word	0x25203d20
   8a4cc:	00000064 	.word	0x00000064
   8a4d0:	7275540a 	.word	0x7275540a
   8a4d4:	656c206e 	.word	0x656c206e
   8a4d8:	00007466 	.word	0x00007466
   8a4dc:	7275540a 	.word	0x7275540a
   8a4e0:	6972206e 	.word	0x6972206e
   8a4e4:	00746867 	.word	0x00746867
   8a4e8:	7275540a 	.word	0x7275540a
   8a4ec:	7261206e 	.word	0x7261206e
   8a4f0:	646e756f 	.word	0x646e756f
   8a4f4:	00000000 	.word	0x00000000
   8a4f8:	206e4f0a 	.word	0x206e4f0a
   8a4fc:	67726174 	.word	0x67726174
   8a500:	00007465 	.word	0x00007465
   8a504:	7272450a 	.word	0x7272450a
   8a508:	0000726f 	.word	0x0000726f
   8a50c:	7275630a 	.word	0x7275630a
   8a510:	746e6572 	.word	0x746e6572
   8a514:	253d7820 	.word	0x253d7820
   8a518:	3d792064 	.word	0x3d792064
   8a51c:	00006425 	.word	0x00006425
   8a520:	7361540a 	.word	0x7361540a
   8a524:	6c55206b 	.word	0x6c55206b
   8a528:	6c617274 	.word	0x6c617274
   8a52c:	0064756a 	.word	0x0064756a
   8a530:	49595254 	.word	0x49595254
   8a534:	5420474e 	.word	0x5420474e
   8a538:	4553204f 	.word	0x4553204f
   8a53c:	5420444e 	.word	0x5420444e
   8a540:	4150204f 	.word	0x4150204f
   8a544:	00000000 	.word	0x00000000
   8a548:	7465470a 	.word	0x7465470a
   8a54c:	61747320 	.word	0x61747320
   8a550:	64207472 	.word	0x64207472
   8a554:	00617461 	.word	0x00617461
   8a558:	6174730a 	.word	0x6174730a
   8a55c:	64207472 	.word	0x64207472
   8a560:	2e617461 	.word	0x2e617461
   8a564:	253d7820 	.word	0x253d7820
   8a568:	3d792064 	.word	0x3d792064
   8a56c:	00006425 	.word	0x00006425
   8a570:	69614d0a 	.word	0x69614d0a
   8a574:	6163206e 	.word	0x6163206e
   8a578:	31206573 	.word	0x31206573
   8a57c:	00000000 	.word	0x00000000
   8a580:	7261740a 	.word	0x7261740a
   8a584:	20746567 	.word	0x20746567
   8a588:	6c676e61 	.word	0x6c676e61
   8a58c:	203d2065 	.word	0x203d2065
   8a590:	00006425 	.word	0x00006425
   8a594:	7275630a 	.word	0x7275630a
   8a598:	746e6572 	.word	0x746e6572
   8a59c:	6c676e41 	.word	0x6c676e41
   8a5a0:	203d2065 	.word	0x203d2065
   8a5a4:	00006425 	.word	0x00006425
   8a5a8:	69614d0a 	.word	0x69614d0a
   8a5ac:	6163206e 	.word	0x6163206e
   8a5b0:	32206573 	.word	0x32206573
   8a5b4:	00000000 	.word	0x00000000
   8a5b8:	736c450a 	.word	0x736c450a
   8a5bc:	61635f65 	.word	0x61635f65
   8a5c0:	6172656d 	.word	0x6172656d
   8a5c4:	00000000 	.word	0x00000000
   8a5c8:	69616d0a 	.word	0x69616d0a
   8a5cc:	6564206e 	.word	0x6564206e
   8a5d0:	6c756166 	.word	0x6c756166
   8a5d4:	00000074 	.word	0x00000074
   8a5d8:	3d20580a 	.word	0x3d20580a
   8a5dc:	20642520 	.word	0x20642520
   8a5e0:	2068636f 	.word	0x2068636f
   8a5e4:	203d2079 	.word	0x203d2079
   8a5e8:	00006425 	.word	0x00006425
   8a5ec:	696e490a 	.word	0x696e490a
   8a5f0:	65732074 	.word	0x65732074
   8a5f4:	726f736e 	.word	0x726f736e
   8a5f8:	004b4f20 	.word	0x004b4f20
   8a5fc:	7465530a 	.word	0x7465530a
   8a600:	68634520 	.word	0x68634520
   8a604:	2026206f 	.word	0x2026206f
   8a608:	67697254 	.word	0x67697254
   8a60c:	20726567 	.word	0x20726567
   8a610:	00004b4f 	.word	0x00004b4f
   8a614:	6365520a 	.word	0x6365520a
   8a618:	65766965 	.word	0x65766965
   8a61c:	25203a64 	.word	0x25203a64
   8a620:	00000064 	.word	0x00000064
   8a624:	6961460a 	.word	0x6961460a
   8a628:	2064656c 	.word	0x2064656c
   8a62c:	72206f74 	.word	0x72206f74
   8a630:	69656365 	.word	0x69656365
   8a634:	00006576 	.word	0x00006576
   8a638:	746f520a 	.word	0x746f520a
   8a63c:	20657461 	.word	0x20657461
   8a640:	20746f6e 	.word	0x20746f6e
   8a644:	706d6f63 	.word	0x706d6f63
   8a648:	6574656c 	.word	0x6574656c
   8a64c:	00000064 	.word	0x00000064
   8a650:	6a624f0a 	.word	0x6a624f0a
   8a654:	20746365 	.word	0x20746365
   8a658:	20746f6e 	.word	0x20746f6e
   8a65c:	6e756f66 	.word	0x6e756f66
   8a660:	00000064 	.word	0x00000064
   8a664:	6665440a 	.word	0x6665440a
   8a668:	746c7561 	.word	0x746c7561
   8a66c:	00000000 	.word	0x00000000
   8a670:	736e6f4b 	.word	0x736e6f4b
   8a674:	6e656c6f 	.word	0x6e656c6f
   8a678:	61657220 	.word	0x61657220
   8a67c:	000a6f64 	.word	0x000a6f64
   8a680:	3d3d3d3d 	.word	0x3d3d3d3d
   8a684:	3d3d3d3d 	.word	0x3d3d3d3d
   8a688:	3d3d3d3d 	.word	0x3d3d3d3d
   8a68c:	0a3d3d3d 	.word	0x0a3d3d3d
   8a690:	00000000 	.word	0x00000000
   8a694:	25202d2d 	.word	0x25202d2d
   8a698:	000d0a73 	.word	0x000d0a73
   8a69c:	75647241 	.word	0x75647241
   8a6a0:	206f6e69 	.word	0x206f6e69
   8a6a4:	2f657544 	.word	0x2f657544
   8a6a8:	00000058 	.word	0x00000058
   8a6ac:	43202d2d 	.word	0x43202d2d
   8a6b0:	69706d6f 	.word	0x69706d6f
   8a6b4:	3a64656c 	.word	0x3a64656c
   8a6b8:	20732520 	.word	0x20732520
   8a6bc:	2d207325 	.word	0x2d207325
   8a6c0:	000d0a2d 	.word	0x000d0a2d
   8a6c4:	2079614d 	.word	0x2079614d
   8a6c8:	32203232 	.word	0x32203232
   8a6cc:	00373130 	.word	0x00373130
   8a6d0:	343a3731 	.word	0x343a3731
   8a6d4:	33343a38 	.word	0x33343a38
   8a6d8:	00000000 	.word	0x00000000
   8a6dc:	6c696857 	.word	0x6c696857
   8a6e0:	74617365 	.word	0x74617365
   8a6e4:	006e6573 	.word	0x006e6573
   8a6e8:	09097325 	.word	0x09097325
   8a6ec:	25096325 	.word	0x25096325
   8a6f0:	75250975 	.word	0x75250975
   8a6f4:	0d752509 	.word	0x0d752509
   8a6f8:	0000000a 	.word	0x0000000a
   8a6fc:	454c4449 	.word	0x454c4449
   8a700:	00000000 	.word	0x00000000
   8a704:	20726d54 	.word	0x20726d54
   8a708:	00637653 	.word	0x00637653
   8a70c:	696e490a 	.word	0x696e490a
   8a710:	6b6f2074 	.word	0x6b6f2074
   8a714:	00000000 	.word	0x00000000
   8a718:	55474552 	.word	0x55474552
   8a71c:	4f54414c 	.word	0x4f54414c
   8a720:	00000052 	.word	0x00000052
   8a724:	6c696146 	.word	0x6c696146
   8a728:	74206465 	.word	0x74206465
   8a72c:	52206568 	.word	0x52206568
   8a730:	6c756765 	.word	0x6c756765
   8a734:	726f7461 	.word	0x726f7461
   8a738:	73615420 	.word	0x73615420
   8a73c:	000a0d6b 	.word	0x000a0d6b
   8a740:	52544c55 	.word	0x52544c55
   8a744:	554a4c41 	.word	0x554a4c41
   8a748:	45532044 	.word	0x45532044
   8a74c:	524f534e 	.word	0x524f534e
   8a750:	00000000 	.word	0x00000000
   8a754:	6c696146 	.word	0x6c696146
   8a758:	74206465 	.word	0x74206465
   8a75c:	55206568 	.word	0x55206568
   8a760:	6172746c 	.word	0x6172746c
   8a764:	74736944 	.word	0x74736944
   8a768:	65636e61 	.word	0x65636e61
   8a76c:	6e655320 	.word	0x6e655320
   8a770:	20726f73 	.word	0x20726f73
   8a774:	6b736154 	.word	0x6b736154
   8a778:	00000a0d 	.word	0x00000a0d
   8a77c:	736f6361 	.word	0x736f6361
   8a780:	00000000 	.word	0x00000000
   8a784:	74727173 	.word	0x74727173
   8a788:	00000000 	.word	0x00000000
   8a78c:	00000043 	.word	0x00000043

0008a790 <_global_impure_ptr>:
   8a790:	200701b8                                ... 

0008a794 <zeroes.6763>:
   8a794:	30303030 30303030 30303030 30303030     0000000000000000
   8a7a4:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   8a7b4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   8a7c4:	00000000 33323130 37363534 62613938     ....0123456789ab
   8a7d4:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

0008a7e4 <blanks.6762>:
   8a7e4:	20202020 20202020 20202020 20202020                     

0008a7f4 <zeroes.6721>:
   8a7f4:	30303030 30303030 30303030 30303030     0000000000000000

0008a804 <blanks.6720>:
   8a804:	20202020 20202020 20202020 20202020                     
   8a814:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   8a824:	49534f50 00000058 0000002e              POSIX.......

0008a830 <__mprec_tens>:
   8a830:	00000000 3ff00000 00000000 40240000     .......?......$@
   8a840:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8a850:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8a860:	00000000 412e8480 00000000 416312d0     .......A......cA
   8a870:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8a880:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8a890:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8a8a0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8a8b0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8a8c0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8a8d0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8a8e0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8a8f0:	79d99db4 44ea7843                       ...yCx.D

0008a8f8 <__mprec_bigtens>:
   8a8f8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8a908:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8a918:	7f73bf3c 75154fdd                       <.s..O.u

0008a920 <p05.5269>:
   8a920:	00000005 00000019 0000007d              ........}...

0008a92c <_init>:
   8a92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a92e:	bf00      	nop
   8a930:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8a932:	bc08      	pop	{r3}
   8a934:	469e      	mov	lr, r3
   8a936:	4770      	bx	lr

0008a938 <__init_array_start>:
   8a938:	00086e05 	.word	0x00086e05

0008a93c <__frame_dummy_init_array_entry>:
   8a93c:	00080119                                ....

0008a940 <_fini>:
   8a940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a942:	bf00      	nop
   8a944:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8a946:	bc08      	pop	{r3}
   8a948:	469e      	mov	lr, r3
   8a94a:	4770      	bx	lr

0008a94c <__fini_array_start>:
   8a94c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	200701ac 	.word	0x200701ac

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <packet_received_pab>:
	...
20070140:	20070a7c 00000003 00000002              |.. ........

2007014c <packet_received_nav>:
	...
20070154:	20070a80 00000005 00000003              ... ........

20070160 <packet_pab>:
	...
20070168:	20070a74 00000003 00000002              t.. ........

20070174 <packet_nav>:
	...
2007017c:	20070a78 00000001 00000003              x.. ........

20070188 <Kp>:
20070188:	00000004                                ....

2007018c <speed>:
2007018c:	00000672                                r...

20070190 <angle>:
20070190:	00000087                                ....

20070194 <main_case>:
20070194:	00000001                                ....

20070198 <sensordistance>:
20070198:	0000000a                                ....

2007019c <dir>:
2007019c:	0000002d                                -...

200701a0 <uxCriticalNesting>:
200701a0:	aaaaaaaa                                ....

200701a4 <xFreeBytesRemaining>:
200701a4:	00008000                                ....

200701a8 <xNextTaskUnblockTime>:
200701a8:	0001ffff                                         ..

200701aa <g_interrupt_enabled>:
200701aa:	09000001                                         ..

200701ac <SystemCoreClock>:
200701ac:	003d0900                                ..=.

200701b0 <__fdlib_version>:
200701b0:	00000001 00000000                       ........

200701b8 <impure_data>:
200701b8:	00000000 200704a4 2007050c 20070574     ....... ... t.. 
	...
200701ec:	0008a78c 00000000 00000000 00000000     ................
	...
20070260:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070270:	0005deec 0000000b 00000000 00000000     ................
	...

200705e0 <_impure_ptr>:
200705e0:	200701b8                                ... 

200705e4 <lconv>:
200705e4:	0008a82c 0008a690 0008a690 0008a690     ,...............
200705f4:	0008a690 0008a690 0008a690 0008a690     ................
20070604:	0008a690 0008a690 ffffffff ffffffff     ................
20070614:	ffffffff 0000ffff                       ........

2007061c <lc_ctype_charset>:
2007061c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007063c <__mb_cur_max>:
2007063c:	00000001                                ....

20070640 <__malloc_av_>:
	...
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 

20070a48 <__malloc_trim_threshold>:
20070a48:	00020000                                ....

20070a4c <__malloc_sbrk_base>:
20070a4c:	ffffffff                                ....

20070a50 <__wctomb>:
20070a50:	00089ab1                                ....
