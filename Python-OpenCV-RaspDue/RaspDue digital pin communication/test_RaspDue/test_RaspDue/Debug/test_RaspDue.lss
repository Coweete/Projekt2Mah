
test_RaspDue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e70  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083e70  00083e70  0000be70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000099c  20070000  00083e78  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000174  2007099c  00084814  0001099c  2**2
                  ALLOC
  4 .stack        00002000  20070b10  00084988  0001099c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0001099c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109c5  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000d108  00000000  00000000  00010a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002457  00000000  00000000  0001db28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000042a4  00000000  00000000  0001ff7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009d0  00000000  00000000  00024223  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008e8  00000000  00000000  00024bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00018184  00000000  00000000  000254db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000efce  00000000  00000000  0003d65f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00060761  00000000  00000000  0004c62d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001f0c  00000000  00000000  000acd90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b10 	.word	0x20072b10
   80004:	00080b95 	.word	0x00080b95
   80008:	00080b91 	.word	0x00080b91
   8000c:	00080b91 	.word	0x00080b91
   80010:	00080b91 	.word	0x00080b91
   80014:	00080b91 	.word	0x00080b91
   80018:	00080b91 	.word	0x00080b91
	...
   8002c:	00080b91 	.word	0x00080b91
   80030:	00080b91 	.word	0x00080b91
   80034:	00000000 	.word	0x00000000
   80038:	00080b91 	.word	0x00080b91
   8003c:	00080b91 	.word	0x00080b91
   80040:	00080b91 	.word	0x00080b91
   80044:	00080b91 	.word	0x00080b91
   80048:	00080b91 	.word	0x00080b91
   8004c:	00080b91 	.word	0x00080b91
   80050:	00080b91 	.word	0x00080b91
   80054:	00080b91 	.word	0x00080b91
   80058:	00080b91 	.word	0x00080b91
   8005c:	00080b91 	.word	0x00080b91
   80060:	00080b91 	.word	0x00080b91
   80064:	00080b91 	.word	0x00080b91
   80068:	00000000 	.word	0x00000000
   8006c:	00080a01 	.word	0x00080a01
   80070:	00080a15 	.word	0x00080a15
   80074:	00080a29 	.word	0x00080a29
   80078:	00080a3d 	.word	0x00080a3d
	...
   80084:	000801b5 	.word	0x000801b5
   80088:	00080b91 	.word	0x00080b91
   8008c:	00080b91 	.word	0x00080b91
   80090:	00080b91 	.word	0x00080b91
   80094:	00080b91 	.word	0x00080b91
   80098:	00080b91 	.word	0x00080b91
   8009c:	00080b91 	.word	0x00080b91
   800a0:	00080b91 	.word	0x00080b91
   800a4:	00000000 	.word	0x00000000
   800a8:	00080b91 	.word	0x00080b91
   800ac:	00080b91 	.word	0x00080b91
   800b0:	00080b91 	.word	0x00080b91
   800b4:	00080b91 	.word	0x00080b91
   800b8:	00080b91 	.word	0x00080b91
   800bc:	00080b91 	.word	0x00080b91
   800c0:	00080b91 	.word	0x00080b91
   800c4:	00080b91 	.word	0x00080b91
   800c8:	00080b91 	.word	0x00080b91
   800cc:	00080b91 	.word	0x00080b91
   800d0:	00080b91 	.word	0x00080b91
   800d4:	00080b91 	.word	0x00080b91
   800d8:	00080b91 	.word	0x00080b91
   800dc:	00080b91 	.word	0x00080b91
   800e0:	00080b91 	.word	0x00080b91
   800e4:	00080b91 	.word	0x00080b91
   800e8:	00080b91 	.word	0x00080b91
   800ec:	00080b91 	.word	0x00080b91
   800f0:	00080b91 	.word	0x00080b91

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007099c 	.word	0x2007099c
   80110:	00000000 	.word	0x00000000
   80114:	00083e78 	.word	0x00083e78

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00083e78 	.word	0x00083e78
   8013c:	200709a0 	.word	0x200709a0
   80140:	00083e78 	.word	0x00083e78
   80144:	00000000 	.word	0x00000000

00080148 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8014c:	460c      	mov	r4, r1
   8014e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80150:	b960      	cbnz	r0, 8016c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80152:	2a00      	cmp	r2, #0
   80154:	dd0e      	ble.n	80174 <_read+0x2c>
   80156:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80158:	4e09      	ldr	r6, [pc, #36]	; (80180 <_read+0x38>)
   8015a:	4d0a      	ldr	r5, [pc, #40]	; (80184 <_read+0x3c>)
   8015c:	6830      	ldr	r0, [r6, #0]
   8015e:	4621      	mov	r1, r4
   80160:	682b      	ldr	r3, [r5, #0]
   80162:	4798      	blx	r3
		ptr++;
   80164:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80166:	42bc      	cmp	r4, r7
   80168:	d1f8      	bne.n	8015c <_read+0x14>
   8016a:	e006      	b.n	8017a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8016c:	f04f 30ff 	mov.w	r0, #4294967295
   80170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80174:	2000      	movs	r0, #0
   80176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8017a:	4640      	mov	r0, r8
	}
	return nChars;
}
   8017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80180:	20070b08 	.word	0x20070b08
   80184:	20070b00 	.word	0x20070b00

00080188 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80188:	6943      	ldr	r3, [r0, #20]
   8018a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8018e:	bf1d      	ittte	ne
   80190:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80194:	61c1      	strne	r1, [r0, #28]
	return 0;
   80196:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80198:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8019a:	4770      	bx	lr

0008019c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8019c:	6943      	ldr	r3, [r0, #20]
   8019e:	f013 0f01 	tst.w	r3, #1
   801a2:	d005      	beq.n	801b0 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   801a4:	6983      	ldr	r3, [r0, #24]
   801a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   801aa:	600b      	str	r3, [r1, #0]

	return 0;
   801ac:	2000      	movs	r0, #0
   801ae:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   801b0:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   801b2:	4770      	bx	lr

000801b4 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   801b4:	b500      	push	{lr}
   801b6:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   801b8:	4813      	ldr	r0, [pc, #76]	; (80208 <USART0_Handler+0x54>)
   801ba:	f10d 0107 	add.w	r1, sp, #7
   801be:	2201      	movs	r2, #1
   801c0:	4b12      	ldr	r3, [pc, #72]	; (8020c <USART0_Handler+0x58>)
   801c2:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   801c4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   801c6:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   801ca:	2200      	movs	r2, #0
   801cc:	4b10      	ldr	r3, [pc, #64]	; (80210 <USART0_Handler+0x5c>)
   801ce:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   801d0:	4b10      	ldr	r3, [pc, #64]	; (80214 <USART0_Handler+0x60>)
   801d2:	781a      	ldrb	r2, [r3, #0]
   801d4:	3201      	adds	r2, #1
   801d6:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   801d8:	4b0f      	ldr	r3, [pc, #60]	; (80218 <USART0_Handler+0x64>)
   801da:	781b      	ldrb	r3, [r3, #0]
   801dc:	f89d 1007 	ldrb.w	r1, [sp, #7]
   801e0:	4a0e      	ldr	r2, [pc, #56]	; (8021c <USART0_Handler+0x68>)
   801e2:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   801e4:	2b9b      	cmp	r3, #155	; 0x9b
   801e6:	d103      	bne.n	801f0 <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   801e8:	2200      	movs	r2, #0
   801ea:	4b0b      	ldr	r3, [pc, #44]	; (80218 <USART0_Handler+0x64>)
   801ec:	701a      	strb	r2, [r3, #0]
   801ee:	e002      	b.n	801f6 <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   801f0:	3301      	adds	r3, #1
   801f2:	4a09      	ldr	r2, [pc, #36]	; (80218 <USART0_Handler+0x64>)
   801f4:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   801f6:	2201      	movs	r2, #1
   801f8:	4b05      	ldr	r3, [pc, #20]	; (80210 <USART0_Handler+0x5c>)
   801fa:	701a      	strb	r2, [r3, #0]
   801fc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   80200:	b662      	cpsie	i
}
   80202:	b003      	add	sp, #12
   80204:	f85d fb04 	ldr.w	pc, [sp], #4
   80208:	40098000 	.word	0x40098000
   8020c:	0008058d 	.word	0x0008058d
   80210:	2007012c 	.word	0x2007012c
   80214:	20070a55 	.word	0x20070a55
   80218:	20070a54 	.word	0x20070a54
   8021c:	200709b8 	.word	0x200709b8

00080220 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80220:	b5f0      	push	{r4, r5, r6, r7, lr}
   80222:	b083      	sub	sp, #12
   80224:	4604      	mov	r4, r0
   80226:	460d      	mov	r5, r1
	uint32_t val = 0;
   80228:	2300      	movs	r3, #0
   8022a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8022c:	4b1f      	ldr	r3, [pc, #124]	; (802ac <usart_serial_getchar+0x8c>)
   8022e:	4298      	cmp	r0, r3
   80230:	d107      	bne.n	80242 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80232:	461f      	mov	r7, r3
   80234:	4e1e      	ldr	r6, [pc, #120]	; (802b0 <usart_serial_getchar+0x90>)
   80236:	4638      	mov	r0, r7
   80238:	4629      	mov	r1, r5
   8023a:	47b0      	blx	r6
   8023c:	2800      	cmp	r0, #0
   8023e:	d1fa      	bne.n	80236 <usart_serial_getchar+0x16>
   80240:	e019      	b.n	80276 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80242:	4b1c      	ldr	r3, [pc, #112]	; (802b4 <usart_serial_getchar+0x94>)
   80244:	4298      	cmp	r0, r3
   80246:	d109      	bne.n	8025c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80248:	461f      	mov	r7, r3
   8024a:	4e1b      	ldr	r6, [pc, #108]	; (802b8 <usart_serial_getchar+0x98>)
   8024c:	4638      	mov	r0, r7
   8024e:	a901      	add	r1, sp, #4
   80250:	47b0      	blx	r6
   80252:	2800      	cmp	r0, #0
   80254:	d1fa      	bne.n	8024c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80256:	9b01      	ldr	r3, [sp, #4]
   80258:	702b      	strb	r3, [r5, #0]
   8025a:	e019      	b.n	80290 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8025c:	4b17      	ldr	r3, [pc, #92]	; (802bc <usart_serial_getchar+0x9c>)
   8025e:	4298      	cmp	r0, r3
   80260:	d109      	bne.n	80276 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80262:	461e      	mov	r6, r3
   80264:	4c14      	ldr	r4, [pc, #80]	; (802b8 <usart_serial_getchar+0x98>)
   80266:	4630      	mov	r0, r6
   80268:	a901      	add	r1, sp, #4
   8026a:	47a0      	blx	r4
   8026c:	2800      	cmp	r0, #0
   8026e:	d1fa      	bne.n	80266 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80270:	9b01      	ldr	r3, [sp, #4]
   80272:	702b      	strb	r3, [r5, #0]
   80274:	e018      	b.n	802a8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80276:	4b12      	ldr	r3, [pc, #72]	; (802c0 <usart_serial_getchar+0xa0>)
   80278:	429c      	cmp	r4, r3
   8027a:	d109      	bne.n	80290 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   8027c:	461e      	mov	r6, r3
   8027e:	4c0e      	ldr	r4, [pc, #56]	; (802b8 <usart_serial_getchar+0x98>)
   80280:	4630      	mov	r0, r6
   80282:	a901      	add	r1, sp, #4
   80284:	47a0      	blx	r4
   80286:	2800      	cmp	r0, #0
   80288:	d1fa      	bne.n	80280 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8028a:	9b01      	ldr	r3, [sp, #4]
   8028c:	702b      	strb	r3, [r5, #0]
   8028e:	e00b      	b.n	802a8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80290:	4b0c      	ldr	r3, [pc, #48]	; (802c4 <usart_serial_getchar+0xa4>)
   80292:	429c      	cmp	r4, r3
   80294:	d108      	bne.n	802a8 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80296:	461e      	mov	r6, r3
   80298:	4c07      	ldr	r4, [pc, #28]	; (802b8 <usart_serial_getchar+0x98>)
   8029a:	4630      	mov	r0, r6
   8029c:	a901      	add	r1, sp, #4
   8029e:	47a0      	blx	r4
   802a0:	2800      	cmp	r0, #0
   802a2:	d1fa      	bne.n	8029a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   802a4:	9b01      	ldr	r3, [sp, #4]
   802a6:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   802a8:	b003      	add	sp, #12
   802aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   802ac:	400e0800 	.word	0x400e0800
   802b0:	00080699 	.word	0x00080699
   802b4:	40098000 	.word	0x40098000
   802b8:	0008019d 	.word	0x0008019d
   802bc:	4009c000 	.word	0x4009c000
   802c0:	400a0000 	.word	0x400a0000
   802c4:	400a4000 	.word	0x400a4000

000802c8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   802c8:	b570      	push	{r4, r5, r6, lr}
   802ca:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   802cc:	4b21      	ldr	r3, [pc, #132]	; (80354 <usart_serial_putchar+0x8c>)
   802ce:	4298      	cmp	r0, r3
   802d0:	d107      	bne.n	802e2 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   802d2:	461e      	mov	r6, r3
   802d4:	4d20      	ldr	r5, [pc, #128]	; (80358 <usart_serial_putchar+0x90>)
   802d6:	4630      	mov	r0, r6
   802d8:	4621      	mov	r1, r4
   802da:	47a8      	blx	r5
   802dc:	2800      	cmp	r0, #0
   802de:	d1fa      	bne.n	802d6 <usart_serial_putchar+0xe>
   802e0:	e02b      	b.n	8033a <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   802e2:	4b1e      	ldr	r3, [pc, #120]	; (8035c <usart_serial_putchar+0x94>)
   802e4:	4298      	cmp	r0, r3
   802e6:	d107      	bne.n	802f8 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   802e8:	461e      	mov	r6, r3
   802ea:	4d1d      	ldr	r5, [pc, #116]	; (80360 <usart_serial_putchar+0x98>)
   802ec:	4630      	mov	r0, r6
   802ee:	4621      	mov	r1, r4
   802f0:	47a8      	blx	r5
   802f2:	2800      	cmp	r0, #0
   802f4:	d1fa      	bne.n	802ec <usart_serial_putchar+0x24>
   802f6:	e022      	b.n	8033e <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   802f8:	4b1a      	ldr	r3, [pc, #104]	; (80364 <usart_serial_putchar+0x9c>)
   802fa:	4298      	cmp	r0, r3
   802fc:	d107      	bne.n	8030e <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   802fe:	461e      	mov	r6, r3
   80300:	4d17      	ldr	r5, [pc, #92]	; (80360 <usart_serial_putchar+0x98>)
   80302:	4630      	mov	r0, r6
   80304:	4621      	mov	r1, r4
   80306:	47a8      	blx	r5
   80308:	2800      	cmp	r0, #0
   8030a:	d1fa      	bne.n	80302 <usart_serial_putchar+0x3a>
   8030c:	e019      	b.n	80342 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8030e:	4b16      	ldr	r3, [pc, #88]	; (80368 <usart_serial_putchar+0xa0>)
   80310:	4298      	cmp	r0, r3
   80312:	d107      	bne.n	80324 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80314:	461e      	mov	r6, r3
   80316:	4d12      	ldr	r5, [pc, #72]	; (80360 <usart_serial_putchar+0x98>)
   80318:	4630      	mov	r0, r6
   8031a:	4621      	mov	r1, r4
   8031c:	47a8      	blx	r5
   8031e:	2800      	cmp	r0, #0
   80320:	d1fa      	bne.n	80318 <usart_serial_putchar+0x50>
   80322:	e010      	b.n	80346 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80324:	4b11      	ldr	r3, [pc, #68]	; (8036c <usart_serial_putchar+0xa4>)
   80326:	4298      	cmp	r0, r3
   80328:	d10f      	bne.n	8034a <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   8032a:	461e      	mov	r6, r3
   8032c:	4d0c      	ldr	r5, [pc, #48]	; (80360 <usart_serial_putchar+0x98>)
   8032e:	4630      	mov	r0, r6
   80330:	4621      	mov	r1, r4
   80332:	47a8      	blx	r5
   80334:	2800      	cmp	r0, #0
   80336:	d1fa      	bne.n	8032e <usart_serial_putchar+0x66>
   80338:	e009      	b.n	8034e <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   8033a:	2001      	movs	r0, #1
   8033c:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8033e:	2001      	movs	r0, #1
   80340:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80342:	2001      	movs	r0, #1
   80344:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80346:	2001      	movs	r0, #1
   80348:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8034a:	2000      	movs	r0, #0
   8034c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8034e:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80350:	bd70      	pop	{r4, r5, r6, pc}
   80352:	bf00      	nop
   80354:	400e0800 	.word	0x400e0800
   80358:	00080689 	.word	0x00080689
   8035c:	40098000 	.word	0x40098000
   80360:	00080189 	.word	0x00080189
   80364:	4009c000 	.word	0x4009c000
   80368:	400a0000 	.word	0x400a0000
   8036c:	400a4000 	.word	0x400a4000

00080370 <configureConsole>:
#include "consoleFunctions.h"

void configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   80370:	b530      	push	{r4, r5, lr}
   80372:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80374:	2008      	movs	r0, #8
   80376:	4d15      	ldr	r5, [pc, #84]	; (803cc <configureConsole+0x5c>)
   80378:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8037a:	4c15      	ldr	r4, [pc, #84]	; (803d0 <configureConsole+0x60>)
   8037c:	4b15      	ldr	r3, [pc, #84]	; (803d4 <configureConsole+0x64>)
   8037e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80380:	4a15      	ldr	r2, [pc, #84]	; (803d8 <configureConsole+0x68>)
   80382:	4b16      	ldr	r3, [pc, #88]	; (803dc <configureConsole+0x6c>)
   80384:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80386:	4a16      	ldr	r2, [pc, #88]	; (803e0 <configureConsole+0x70>)
   80388:	4b16      	ldr	r3, [pc, #88]	; (803e4 <configureConsole+0x74>)
   8038a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8038c:	4b16      	ldr	r3, [pc, #88]	; (803e8 <configureConsole+0x78>)
   8038e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80390:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80394:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80396:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8039a:	9303      	str	r3, [sp, #12]
   8039c:	2008      	movs	r0, #8
   8039e:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   803a0:	4620      	mov	r0, r4
   803a2:	a901      	add	r1, sp, #4
   803a4:	4b11      	ldr	r3, [pc, #68]	; (803ec <configureConsole+0x7c>)
   803a6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   803a8:	4d11      	ldr	r5, [pc, #68]	; (803f0 <configureConsole+0x80>)
   803aa:	682b      	ldr	r3, [r5, #0]
   803ac:	6898      	ldr	r0, [r3, #8]
   803ae:	2100      	movs	r1, #0
   803b0:	4c10      	ldr	r4, [pc, #64]	; (803f4 <configureConsole+0x84>)
   803b2:	47a0      	blx	r4
	setbuf(stdin, NULL);
   803b4:	682b      	ldr	r3, [r5, #0]
   803b6:	6858      	ldr	r0, [r3, #4]
   803b8:	2100      	movs	r1, #0
   803ba:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   803bc:	480e      	ldr	r0, [pc, #56]	; (803f8 <configureConsole+0x88>)
   803be:	4c0f      	ldr	r4, [pc, #60]	; (803fc <configureConsole+0x8c>)
   803c0:	47a0      	blx	r4
	printf("=============\n");
   803c2:	480f      	ldr	r0, [pc, #60]	; (80400 <configureConsole+0x90>)
   803c4:	47a0      	blx	r4
   803c6:	b005      	add	sp, #20
   803c8:	bd30      	pop	{r4, r5, pc}
   803ca:	bf00      	nop
   803cc:	00080b39 	.word	0x00080b39
   803d0:	400e0800 	.word	0x400e0800
   803d4:	20070b08 	.word	0x20070b08
   803d8:	000802c9 	.word	0x000802c9
   803dc:	20070b04 	.word	0x20070b04
   803e0:	00080221 	.word	0x00080221
   803e4:	20070b00 	.word	0x20070b00
   803e8:	0501bd00 	.word	0x0501bd00
   803ec:	00080651 	.word	0x00080651
   803f0:	20070560 	.word	0x20070560
   803f4:	00080f09 	.word	0x00080f09
   803f8:	00083d90 	.word	0x00083d90
   803fc:	00080e4d 	.word	0x00080e4d
   80400:	00083da0 	.word	0x00083da0

00080404 <initCommunication_pins>:
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80404:	4b16      	ldr	r3, [pc, #88]	; (80460 <initCommunication_pins+0x5c>)
   80406:	2280      	movs	r2, #128	; 0x80
   80408:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8040a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8040e:	f44f 7280 	mov.w	r2, #256	; 0x100
   80412:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80414:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80418:	4a12      	ldr	r2, [pc, #72]	; (80464 <initCommunication_pins+0x60>)
   8041a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   8041e:	6151      	str	r1, [r2, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80420:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80424:	6159      	str	r1, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80426:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8042a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   8042e:	6159      	str	r1, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80430:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80434:	f44f 7100 	mov.w	r1, #512	; 0x200
   80438:	6119      	str	r1, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8043a:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8043e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   80442:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80444:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80448:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   8044c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8044e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80452:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80456:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80458:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   8045c:	4770      	bx	lr
   8045e:	bf00      	nop
   80460:	400e1200 	.word	0x400e1200
   80464:	400e0e00 	.word	0x400e0e00

00080468 <startCOM>:
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80468:	2280      	movs	r2, #128	; 0x80
   8046a:	4b01      	ldr	r3, [pc, #4]	; (80470 <startCOM+0x8>)
   8046c:	631a      	str	r2, [r3, #48]	; 0x30
   8046e:	4770      	bx	lr
   80470:	400e1200 	.word	0x400e1200

00080474 <camera_detection>:
void startCOM(void){
	setPin(START_COM, 1);	
}

void camera_detection(void)
{ 
   80474:	b508      	push	{r3, lr}
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80476:	4c29      	ldr	r4, [pc, #164]	; (8051c <camera_detection+0xa8>)
   80478:	4d29      	ldr	r5, [pc, #164]	; (80520 <camera_detection+0xac>)
		else if(getPin(NODETECTION_IN)== HIGH){
			setPin(NODETECTION_OUT, HIGH);
			setPin(LEFT_OUT, LOW);
			setPin(TARGET_OUT, LOW);
			setPin(RIGHT_OUT, LOW);
			printf("no object\n");
   8047a:	4e2a      	ldr	r6, [pc, #168]	; (80524 <camera_detection+0xb0>)
   8047c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
}

void camera_detection(void)
{ 
	while(1){
		if(getPin(RIGHT_IN) == HIGH){
   8047e:	f413 7f80 	tst.w	r3, #256	; 0x100
   80482:	d00f      	beq.n	804a4 <camera_detection+0x30>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80484:	f44f 7300 	mov.w	r3, #512	; 0x200
   80488:	6323      	str	r3, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8048a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   8048e:	636b      	str	r3, [r5, #52]	; 0x34
   80490:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   80494:	6363      	str	r3, [r4, #52]	; 0x34
   80496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   8049a:	6363      	str	r3, [r4, #52]	; 0x34
			setPin(RIGHT_OUT, HIGH);
			setPin(TARGET_OUT, LOW);
			setPin(LEFT_OUT, LOW);
			setPin(NODETECTION_OUT, LOW);
			printf("rotate left\n");
   8049c:	4822      	ldr	r0, [pc, #136]	; (80528 <camera_detection+0xb4>)
   8049e:	4b23      	ldr	r3, [pc, #140]	; (8052c <camera_detection+0xb8>)
   804a0:	4798      	blx	r3
   804a2:	e7eb      	b.n	8047c <camera_detection+0x8>
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   804a4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
		}
		else if(getPin(TARGET_IN) == HIGH){
   804a6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   804aa:	d00f      	beq.n	804cc <camera_detection+0x58>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   804ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   804b0:	632b      	str	r3, [r5, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   804b2:	f44f 7300 	mov.w	r3, #512	; 0x200
   804b6:	6363      	str	r3, [r4, #52]	; 0x34
   804b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   804bc:	6363      	str	r3, [r4, #52]	; 0x34
   804be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   804c2:	6363      	str	r3, [r4, #52]	; 0x34
			setPin(TARGET_OUT, HIGH);
			setPin(RIGHT_OUT, LOW);
			setPin(LEFT_OUT, LOW);
			setPin(NODETECTION_OUT, LOW);
			printf("stop and move forward\n");
   804c4:	481a      	ldr	r0, [pc, #104]	; (80530 <camera_detection+0xbc>)
   804c6:	4b19      	ldr	r3, [pc, #100]	; (8052c <camera_detection+0xb8>)
   804c8:	4798      	blx	r3
   804ca:	e7d7      	b.n	8047c <camera_detection+0x8>
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   804cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		}
		else if(getPin(LEFT_IN) == HIGH){
   804ce:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   804d2:	d00f      	beq.n	804f4 <camera_detection+0x80>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   804d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   804d8:	6323      	str	r3, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   804da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   804de:	636b      	str	r3, [r5, #52]	; 0x34
   804e0:	f44f 7300 	mov.w	r3, #512	; 0x200
   804e4:	6363      	str	r3, [r4, #52]	; 0x34
   804e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   804ea:	6363      	str	r3, [r4, #52]	; 0x34
			setPin(LEFT_OUT, HIGH);
			setPin(TARGET_OUT, LOW);
			setPin(RIGHT_OUT, LOW);
			setPin(NODETECTION_OUT, LOW);
			printf("rotate right\n");
   804ec:	4811      	ldr	r0, [pc, #68]	; (80534 <camera_detection+0xc0>)
   804ee:	4b0f      	ldr	r3, [pc, #60]	; (8052c <camera_detection+0xb8>)
   804f0:	4798      	blx	r3
   804f2:	e7c3      	b.n	8047c <camera_detection+0x8>
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   804f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		}
		else if(getPin(NODETECTION_IN)== HIGH){
   804f6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   804fa:	d0bf      	beq.n	8047c <camera_detection+0x8>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   804fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   80500:	6323      	str	r3, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80502:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   80506:	6363      	str	r3, [r4, #52]	; 0x34
   80508:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   8050c:	636b      	str	r3, [r5, #52]	; 0x34
   8050e:	f44f 7300 	mov.w	r3, #512	; 0x200
   80512:	6363      	str	r3, [r4, #52]	; 0x34
			setPin(NODETECTION_OUT, HIGH);
			setPin(LEFT_OUT, LOW);
			setPin(TARGET_OUT, LOW);
			setPin(RIGHT_OUT, LOW);
			printf("no object\n");
   80514:	4630      	mov	r0, r6
   80516:	4b05      	ldr	r3, [pc, #20]	; (8052c <camera_detection+0xb8>)
   80518:	4798      	blx	r3
   8051a:	e7af      	b.n	8047c <camera_detection+0x8>
   8051c:	400e1200 	.word	0x400e1200
   80520:	400e0e00 	.word	0x400e0e00
   80524:	00083de8 	.word	0x00083de8
   80528:	00083db0 	.word	0x00083db0
   8052c:	00080e4d 	.word	0x00080e4d
   80530:	00083dc0 	.word	0x00083dc0
   80534:	00083dd8 	.word	0x00083dd8

00080538 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8053c:	460e      	mov	r6, r1
   8053e:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80540:	3801      	subs	r0, #1
   80542:	2802      	cmp	r0, #2
   80544:	d80f      	bhi.n	80566 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   80546:	b192      	cbz	r2, 8056e <_write+0x36>
   80548:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8054a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80588 <_write+0x50>
   8054e:	4f0d      	ldr	r7, [pc, #52]	; (80584 <_write+0x4c>)
   80550:	f8d8 0000 	ldr.w	r0, [r8]
   80554:	5d31      	ldrb	r1, [r6, r4]
   80556:	683b      	ldr	r3, [r7, #0]
   80558:	4798      	blx	r3
   8055a:	2800      	cmp	r0, #0
   8055c:	db0a      	blt.n	80574 <_write+0x3c>
			return -1;
		}
		++nChars;
   8055e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80560:	42a5      	cmp	r5, r4
   80562:	d1f5      	bne.n	80550 <_write+0x18>
   80564:	e00a      	b.n	8057c <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80566:	f04f 30ff 	mov.w	r0, #4294967295
   8056a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   8056e:	2000      	movs	r0, #0
   80570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80574:	f04f 30ff 	mov.w	r0, #4294967295
   80578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   8057c:	4620      	mov	r0, r4
	}
	return nChars;
}
   8057e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80582:	bf00      	nop
   80584:	20070b04 	.word	0x20070b04
   80588:	20070b08 	.word	0x20070b08

0008058c <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   8058c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80590:	b083      	sub	sp, #12
   80592:	4605      	mov	r5, r0
	while (len) {
   80594:	4690      	mov	r8, r2
   80596:	2a00      	cmp	r2, #0
   80598:	d047      	beq.n	8062a <usart_serial_read_packet+0x9e>
   8059a:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8059c:	4f25      	ldr	r7, [pc, #148]	; (80634 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   8059e:	4c26      	ldr	r4, [pc, #152]	; (80638 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   805a0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8064c <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   805a4:	f8df b094 	ldr.w	fp, [pc, #148]	; 8063c <usart_serial_read_packet+0xb0>
   805a8:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   805ac:	2300      	movs	r3, #0
   805ae:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   805b0:	4b22      	ldr	r3, [pc, #136]	; (8063c <usart_serial_read_packet+0xb0>)
   805b2:	429d      	cmp	r5, r3
   805b4:	d106      	bne.n	805c4 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   805b6:	4658      	mov	r0, fp
   805b8:	4649      	mov	r1, r9
   805ba:	4b21      	ldr	r3, [pc, #132]	; (80640 <usart_serial_read_packet+0xb4>)
   805bc:	4798      	blx	r3
   805be:	2800      	cmp	r0, #0
   805c0:	d1f9      	bne.n	805b6 <usart_serial_read_packet+0x2a>
   805c2:	e019      	b.n	805f8 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   805c4:	4b1f      	ldr	r3, [pc, #124]	; (80644 <usart_serial_read_packet+0xb8>)
   805c6:	429d      	cmp	r5, r3
   805c8:	d109      	bne.n	805de <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   805ca:	4699      	mov	r9, r3
   805cc:	4648      	mov	r0, r9
   805ce:	a901      	add	r1, sp, #4
   805d0:	47a0      	blx	r4
   805d2:	2800      	cmp	r0, #0
   805d4:	d1fa      	bne.n	805cc <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   805d6:	9b01      	ldr	r3, [sp, #4]
   805d8:	f806 3c01 	strb.w	r3, [r6, #-1]
   805dc:	e017      	b.n	8060e <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   805de:	4b1a      	ldr	r3, [pc, #104]	; (80648 <usart_serial_read_packet+0xbc>)
   805e0:	429d      	cmp	r5, r3
   805e2:	d109      	bne.n	805f8 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   805e4:	4699      	mov	r9, r3
   805e6:	4648      	mov	r0, r9
   805e8:	a901      	add	r1, sp, #4
   805ea:	47a0      	blx	r4
   805ec:	2800      	cmp	r0, #0
   805ee:	d1fa      	bne.n	805e6 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   805f0:	9b01      	ldr	r3, [sp, #4]
   805f2:	f806 3c01 	strb.w	r3, [r6, #-1]
   805f6:	e014      	b.n	80622 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   805f8:	4555      	cmp	r5, sl
   805fa:	d108      	bne.n	8060e <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   805fc:	4650      	mov	r0, sl
   805fe:	a901      	add	r1, sp, #4
   80600:	47a0      	blx	r4
   80602:	2800      	cmp	r0, #0
   80604:	d1fa      	bne.n	805fc <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   80606:	9b01      	ldr	r3, [sp, #4]
   80608:	f806 3c01 	strb.w	r3, [r6, #-1]
   8060c:	e009      	b.n	80622 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8060e:	42bd      	cmp	r5, r7
   80610:	d107      	bne.n	80622 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80612:	4638      	mov	r0, r7
   80614:	a901      	add	r1, sp, #4
   80616:	47a0      	blx	r4
   80618:	2800      	cmp	r0, #0
   8061a:	d1fa      	bne.n	80612 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   8061c:	9b01      	ldr	r3, [sp, #4]
   8061e:	f806 3c01 	strb.w	r3, [r6, #-1]
   80622:	3601      	adds	r6, #1
   80624:	f1b8 0801 	subs.w	r8, r8, #1
   80628:	d1be      	bne.n	805a8 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   8062a:	2000      	movs	r0, #0
   8062c:	b003      	add	sp, #12
   8062e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80632:	bf00      	nop
   80634:	400a4000 	.word	0x400a4000
   80638:	0008019d 	.word	0x0008019d
   8063c:	400e0800 	.word	0x400e0800
   80640:	00080699 	.word	0x00080699
   80644:	40098000 	.word	0x40098000
   80648:	4009c000 	.word	0x4009c000
   8064c:	400a0000 	.word	0x400a0000

00080650 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80650:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80652:	23ac      	movs	r3, #172	; 0xac
   80654:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80656:	680a      	ldr	r2, [r1, #0]
   80658:	684b      	ldr	r3, [r1, #4]
   8065a:	fbb2 f3f3 	udiv	r3, r2, r3
   8065e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80660:	1e5c      	subs	r4, r3, #1
   80662:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80666:	4294      	cmp	r4, r2
   80668:	d80a      	bhi.n	80680 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   8066a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8066c:	688b      	ldr	r3, [r1, #8]
   8066e:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80670:	f240 2302 	movw	r3, #514	; 0x202
   80674:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80678:	2350      	movs	r3, #80	; 0x50
   8067a:	6003      	str	r3, [r0, #0]

	return 0;
   8067c:	2000      	movs	r0, #0
   8067e:	e000      	b.n	80682 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80680:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80682:	f85d 4b04 	ldr.w	r4, [sp], #4
   80686:	4770      	bx	lr

00080688 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80688:	6943      	ldr	r3, [r0, #20]
   8068a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8068e:	bf1a      	itte	ne
   80690:	61c1      	strne	r1, [r0, #28]
	return 0;
   80692:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80694:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80696:	4770      	bx	lr

00080698 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80698:	6943      	ldr	r3, [r0, #20]
   8069a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8069e:	bf1d      	ittte	ne
   806a0:	6983      	ldrne	r3, [r0, #24]
   806a2:	700b      	strbne	r3, [r1, #0]
	return 0;
   806a4:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   806a6:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   806a8:	4770      	bx	lr
   806aa:	bf00      	nop

000806ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   806ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   806ae:	480e      	ldr	r0, [pc, #56]	; (806e8 <sysclk_init+0x3c>)
   806b0:	4b0e      	ldr	r3, [pc, #56]	; (806ec <sysclk_init+0x40>)
   806b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   806b4:	2000      	movs	r0, #0
   806b6:	213e      	movs	r1, #62	; 0x3e
   806b8:	4b0d      	ldr	r3, [pc, #52]	; (806f0 <sysclk_init+0x44>)
   806ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   806bc:	4c0d      	ldr	r4, [pc, #52]	; (806f4 <sysclk_init+0x48>)
   806be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   806c0:	2800      	cmp	r0, #0
   806c2:	d0fc      	beq.n	806be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   806c4:	4b0c      	ldr	r3, [pc, #48]	; (806f8 <sysclk_init+0x4c>)
   806c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   806c8:	4a0c      	ldr	r2, [pc, #48]	; (806fc <sysclk_init+0x50>)
   806ca:	4b0d      	ldr	r3, [pc, #52]	; (80700 <sysclk_init+0x54>)
   806cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   806ce:	4c0d      	ldr	r4, [pc, #52]	; (80704 <sysclk_init+0x58>)
   806d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   806d2:	2800      	cmp	r0, #0
   806d4:	d0fc      	beq.n	806d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   806d6:	2010      	movs	r0, #16
   806d8:	4b0b      	ldr	r3, [pc, #44]	; (80708 <sysclk_init+0x5c>)
   806da:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   806dc:	4b0b      	ldr	r3, [pc, #44]	; (8070c <sysclk_init+0x60>)
   806de:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   806e0:	4801      	ldr	r0, [pc, #4]	; (806e8 <sysclk_init+0x3c>)
   806e2:	4b02      	ldr	r3, [pc, #8]	; (806ec <sysclk_init+0x40>)
   806e4:	4798      	blx	r3
   806e6:	bd10      	pop	{r4, pc}
   806e8:	0501bd00 	.word	0x0501bd00
   806ec:	200700a5 	.word	0x200700a5
   806f0:	00080ab5 	.word	0x00080ab5
   806f4:	00080b09 	.word	0x00080b09
   806f8:	00080b19 	.word	0x00080b19
   806fc:	200d3f01 	.word	0x200d3f01
   80700:	400e0600 	.word	0x400e0600
   80704:	00080b29 	.word	0x00080b29
   80708:	00080a51 	.word	0x00080a51
   8070c:	00080c45 	.word	0x00080c45

00080710 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80710:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80712:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80716:	4b17      	ldr	r3, [pc, #92]	; (80774 <board_init+0x64>)
   80718:	605a      	str	r2, [r3, #4]
   8071a:	200b      	movs	r0, #11
   8071c:	4c16      	ldr	r4, [pc, #88]	; (80778 <board_init+0x68>)
   8071e:	47a0      	blx	r4
   80720:	200c      	movs	r0, #12
   80722:	47a0      	blx	r4
   80724:	200d      	movs	r0, #13
   80726:	47a0      	blx	r4
   80728:	200e      	movs	r0, #14
   8072a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8072c:	203b      	movs	r0, #59	; 0x3b
   8072e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80732:	4c12      	ldr	r4, [pc, #72]	; (8077c <board_init+0x6c>)
   80734:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80736:	2055      	movs	r0, #85	; 0x55
   80738:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8073c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8073e:	2056      	movs	r0, #86	; 0x56
   80740:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80744:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80746:	2068      	movs	r0, #104	; 0x68
   80748:	490d      	ldr	r1, [pc, #52]	; (80780 <board_init+0x70>)
   8074a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8074c:	205c      	movs	r0, #92	; 0x5c
   8074e:	490d      	ldr	r1, [pc, #52]	; (80784 <board_init+0x74>)
   80750:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80752:	480d      	ldr	r0, [pc, #52]	; (80788 <board_init+0x78>)
   80754:	f44f 7140 	mov.w	r1, #768	; 0x300
   80758:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8075c:	4b0b      	ldr	r3, [pc, #44]	; (8078c <board_init+0x7c>)
   8075e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80760:	202b      	movs	r0, #43	; 0x2b
   80762:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80766:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80768:	202a      	movs	r0, #42	; 0x2a
   8076a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8076e:	47a0      	blx	r4
   80770:	bd10      	pop	{r4, pc}
   80772:	bf00      	nop
   80774:	400e1a50 	.word	0x400e1a50
   80778:	00080b39 	.word	0x00080b39
   8077c:	00080835 	.word	0x00080835
   80780:	28000079 	.word	0x28000079
   80784:	28000001 	.word	0x28000001
   80788:	400e0e00 	.word	0x400e0e00
   8078c:	00080909 	.word	0x00080909

00080790 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80790:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80792:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80796:	d016      	beq.n	807c6 <pio_set_peripheral+0x36>
   80798:	d804      	bhi.n	807a4 <pio_set_peripheral+0x14>
   8079a:	b1c1      	cbz	r1, 807ce <pio_set_peripheral+0x3e>
   8079c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   807a0:	d00a      	beq.n	807b8 <pio_set_peripheral+0x28>
   807a2:	e013      	b.n	807cc <pio_set_peripheral+0x3c>
   807a4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   807a8:	d011      	beq.n	807ce <pio_set_peripheral+0x3e>
   807aa:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   807ae:	d00e      	beq.n	807ce <pio_set_peripheral+0x3e>
   807b0:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   807b4:	d10a      	bne.n	807cc <pio_set_peripheral+0x3c>
   807b6:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   807b8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   807ba:	6f01      	ldr	r1, [r0, #112]	; 0x70
   807bc:	400b      	ands	r3, r1
   807be:	ea23 0302 	bic.w	r3, r3, r2
   807c2:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   807c4:	e002      	b.n	807cc <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   807c6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   807c8:	4313      	orrs	r3, r2
   807ca:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   807cc:	6042      	str	r2, [r0, #4]
   807ce:	4770      	bx	lr

000807d0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   807d0:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   807d2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   807d6:	bf14      	ite	ne
   807d8:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   807da:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   807dc:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   807e0:	bf14      	ite	ne
   807e2:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   807e4:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   807e6:	f012 0f02 	tst.w	r2, #2
   807ea:	d002      	beq.n	807f2 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   807ec:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   807f0:	e004      	b.n	807fc <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   807f2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   807f6:	bf18      	it	ne
   807f8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   807fc:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   807fe:	6001      	str	r1, [r0, #0]
   80800:	4770      	bx	lr
   80802:	bf00      	nop

00080804 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80804:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80806:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80808:	9c01      	ldr	r4, [sp, #4]
   8080a:	b10c      	cbz	r4, 80810 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   8080c:	6641      	str	r1, [r0, #100]	; 0x64
   8080e:	e000      	b.n	80812 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80810:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80812:	b10b      	cbz	r3, 80818 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80814:	6501      	str	r1, [r0, #80]	; 0x50
   80816:	e000      	b.n	8081a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80818:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8081a:	b10a      	cbz	r2, 80820 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   8081c:	6301      	str	r1, [r0, #48]	; 0x30
   8081e:	e000      	b.n	80822 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80820:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80822:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80824:	6001      	str	r1, [r0, #0]
}
   80826:	f85d 4b04 	ldr.w	r4, [sp], #4
   8082a:	4770      	bx	lr

0008082c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8082c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8082e:	4770      	bx	lr

00080830 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80830:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80832:	4770      	bx	lr

00080834 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80834:	b570      	push	{r4, r5, r6, lr}
   80836:	b082      	sub	sp, #8
   80838:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8083a:	0944      	lsrs	r4, r0, #5
   8083c:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80840:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80844:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80846:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   8084a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8084e:	d030      	beq.n	808b2 <pio_configure_pin+0x7e>
   80850:	d806      	bhi.n	80860 <pio_configure_pin+0x2c>
   80852:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80856:	d00a      	beq.n	8086e <pio_configure_pin+0x3a>
   80858:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   8085c:	d018      	beq.n	80890 <pio_configure_pin+0x5c>
   8085e:	e049      	b.n	808f4 <pio_configure_pin+0xc0>
   80860:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80864:	d030      	beq.n	808c8 <pio_configure_pin+0x94>
   80866:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8086a:	d02d      	beq.n	808c8 <pio_configure_pin+0x94>
   8086c:	e042      	b.n	808f4 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8086e:	f000 001f 	and.w	r0, r0, #31
   80872:	2401      	movs	r4, #1
   80874:	4084      	lsls	r4, r0
   80876:	4630      	mov	r0, r6
   80878:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8087c:	4622      	mov	r2, r4
   8087e:	4b1f      	ldr	r3, [pc, #124]	; (808fc <pio_configure_pin+0xc8>)
   80880:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80882:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80886:	bf14      	ite	ne
   80888:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8088a:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8088c:	2001      	movs	r0, #1
   8088e:	e032      	b.n	808f6 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80890:	f000 001f 	and.w	r0, r0, #31
   80894:	2401      	movs	r4, #1
   80896:	4084      	lsls	r4, r0
   80898:	4630      	mov	r0, r6
   8089a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8089e:	4622      	mov	r2, r4
   808a0:	4b16      	ldr	r3, [pc, #88]	; (808fc <pio_configure_pin+0xc8>)
   808a2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   808a4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   808a8:	bf14      	ite	ne
   808aa:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   808ac:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   808ae:	2001      	movs	r0, #1
   808b0:	e021      	b.n	808f6 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   808b2:	f000 011f 	and.w	r1, r0, #31
   808b6:	2401      	movs	r4, #1
   808b8:	4630      	mov	r0, r6
   808ba:	fa04 f101 	lsl.w	r1, r4, r1
   808be:	462a      	mov	r2, r5
   808c0:	4b0f      	ldr	r3, [pc, #60]	; (80900 <pio_configure_pin+0xcc>)
   808c2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   808c4:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   808c6:	e016      	b.n	808f6 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   808c8:	f000 011f 	and.w	r1, r0, #31
   808cc:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   808ce:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   808d2:	ea05 0304 	and.w	r3, r5, r4
   808d6:	9300      	str	r3, [sp, #0]
   808d8:	4630      	mov	r0, r6
   808da:	fa04 f101 	lsl.w	r1, r4, r1
   808de:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   808e2:	bf14      	ite	ne
   808e4:	2200      	movne	r2, #0
   808e6:	2201      	moveq	r2, #1
   808e8:	f3c5 0380 	ubfx	r3, r5, #2, #1
   808ec:	4d05      	ldr	r5, [pc, #20]	; (80904 <pio_configure_pin+0xd0>)
   808ee:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   808f0:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   808f2:	e000      	b.n	808f6 <pio_configure_pin+0xc2>

	default:
		return 0;
   808f4:	2000      	movs	r0, #0
	}

	return 1;
}
   808f6:	b002      	add	sp, #8
   808f8:	bd70      	pop	{r4, r5, r6, pc}
   808fa:	bf00      	nop
   808fc:	00080791 	.word	0x00080791
   80900:	000807d1 	.word	0x000807d1
   80904:	00080805 	.word	0x00080805

00080908 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80908:	b5f0      	push	{r4, r5, r6, r7, lr}
   8090a:	b083      	sub	sp, #12
   8090c:	4607      	mov	r7, r0
   8090e:	460e      	mov	r6, r1
   80910:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80912:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80916:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8091a:	d026      	beq.n	8096a <pio_configure_pin_group+0x62>
   8091c:	d806      	bhi.n	8092c <pio_configure_pin_group+0x24>
   8091e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80922:	d00a      	beq.n	8093a <pio_configure_pin_group+0x32>
   80924:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80928:	d013      	beq.n	80952 <pio_configure_pin_group+0x4a>
   8092a:	e034      	b.n	80996 <pio_configure_pin_group+0x8e>
   8092c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80930:	d01f      	beq.n	80972 <pio_configure_pin_group+0x6a>
   80932:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80936:	d01c      	beq.n	80972 <pio_configure_pin_group+0x6a>
   80938:	e02d      	b.n	80996 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8093a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8093e:	4632      	mov	r2, r6
   80940:	4b16      	ldr	r3, [pc, #88]	; (8099c <pio_configure_pin_group+0x94>)
   80942:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80944:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80948:	bf14      	ite	ne
   8094a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8094c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8094e:	2001      	movs	r0, #1
   80950:	e022      	b.n	80998 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80952:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80956:	4632      	mov	r2, r6
   80958:	4b10      	ldr	r3, [pc, #64]	; (8099c <pio_configure_pin_group+0x94>)
   8095a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8095c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80960:	bf14      	ite	ne
   80962:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80964:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80966:	2001      	movs	r0, #1
   80968:	e016      	b.n	80998 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8096a:	4b0d      	ldr	r3, [pc, #52]	; (809a0 <pio_configure_pin_group+0x98>)
   8096c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8096e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80970:	e012      	b.n	80998 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80972:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80976:	f005 0301 	and.w	r3, r5, #1
   8097a:	9300      	str	r3, [sp, #0]
   8097c:	4638      	mov	r0, r7
   8097e:	4631      	mov	r1, r6
   80980:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80984:	bf14      	ite	ne
   80986:	2200      	movne	r2, #0
   80988:	2201      	moveq	r2, #1
   8098a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8098e:	4c05      	ldr	r4, [pc, #20]	; (809a4 <pio_configure_pin_group+0x9c>)
   80990:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80992:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80994:	e000      	b.n	80998 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80996:	2000      	movs	r0, #0
	}

	return 1;
}
   80998:	b003      	add	sp, #12
   8099a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8099c:	00080791 	.word	0x00080791
   809a0:	000807d1 	.word	0x000807d1
   809a4:	00080805 	.word	0x00080805

000809a8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   809a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   809ac:	4604      	mov	r4, r0
   809ae:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   809b0:	4b10      	ldr	r3, [pc, #64]	; (809f4 <pio_handler_process+0x4c>)
   809b2:	4798      	blx	r3
   809b4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   809b6:	4620      	mov	r0, r4
   809b8:	4b0f      	ldr	r3, [pc, #60]	; (809f8 <pio_handler_process+0x50>)
   809ba:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   809bc:	4005      	ands	r5, r0
   809be:	d017      	beq.n	809f0 <pio_handler_process+0x48>
   809c0:	4f0e      	ldr	r7, [pc, #56]	; (809fc <pio_handler_process+0x54>)
   809c2:	f107 040c 	add.w	r4, r7, #12
   809c6:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   809c8:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   809cc:	42b3      	cmp	r3, r6
   809ce:	d10a      	bne.n	809e6 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   809d0:	f854 1c08 	ldr.w	r1, [r4, #-8]
   809d4:	4229      	tst	r1, r5
   809d6:	d006      	beq.n	809e6 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   809d8:	6823      	ldr	r3, [r4, #0]
   809da:	4630      	mov	r0, r6
   809dc:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   809de:	f854 3c08 	ldr.w	r3, [r4, #-8]
   809e2:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   809e6:	42bc      	cmp	r4, r7
   809e8:	d002      	beq.n	809f0 <pio_handler_process+0x48>
   809ea:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   809ec:	2d00      	cmp	r5, #0
   809ee:	d1eb      	bne.n	809c8 <pio_handler_process+0x20>
   809f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   809f4:	0008082d 	.word	0x0008082d
   809f8:	00080831 	.word	0x00080831
   809fc:	20070a58 	.word	0x20070a58

00080a00 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80a00:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80a02:	4802      	ldr	r0, [pc, #8]	; (80a0c <PIOA_Handler+0xc>)
   80a04:	210b      	movs	r1, #11
   80a06:	4b02      	ldr	r3, [pc, #8]	; (80a10 <PIOA_Handler+0x10>)
   80a08:	4798      	blx	r3
   80a0a:	bd08      	pop	{r3, pc}
   80a0c:	400e0e00 	.word	0x400e0e00
   80a10:	000809a9 	.word	0x000809a9

00080a14 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80a14:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80a16:	4802      	ldr	r0, [pc, #8]	; (80a20 <PIOB_Handler+0xc>)
   80a18:	210c      	movs	r1, #12
   80a1a:	4b02      	ldr	r3, [pc, #8]	; (80a24 <PIOB_Handler+0x10>)
   80a1c:	4798      	blx	r3
   80a1e:	bd08      	pop	{r3, pc}
   80a20:	400e1000 	.word	0x400e1000
   80a24:	000809a9 	.word	0x000809a9

00080a28 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80a28:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80a2a:	4802      	ldr	r0, [pc, #8]	; (80a34 <PIOC_Handler+0xc>)
   80a2c:	210d      	movs	r1, #13
   80a2e:	4b02      	ldr	r3, [pc, #8]	; (80a38 <PIOC_Handler+0x10>)
   80a30:	4798      	blx	r3
   80a32:	bd08      	pop	{r3, pc}
   80a34:	400e1200 	.word	0x400e1200
   80a38:	000809a9 	.word	0x000809a9

00080a3c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80a3c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80a3e:	4802      	ldr	r0, [pc, #8]	; (80a48 <PIOD_Handler+0xc>)
   80a40:	210e      	movs	r1, #14
   80a42:	4b02      	ldr	r3, [pc, #8]	; (80a4c <PIOD_Handler+0x10>)
   80a44:	4798      	blx	r3
   80a46:	bd08      	pop	{r3, pc}
   80a48:	400e1400 	.word	0x400e1400
   80a4c:	000809a9 	.word	0x000809a9

00080a50 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80a50:	4b17      	ldr	r3, [pc, #92]	; (80ab0 <pmc_switch_mck_to_pllack+0x60>)
   80a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80a54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   80a58:	4310      	orrs	r0, r2
   80a5a:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80a5e:	f013 0f08 	tst.w	r3, #8
   80a62:	d109      	bne.n	80a78 <pmc_switch_mck_to_pllack+0x28>
   80a64:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80a68:	4911      	ldr	r1, [pc, #68]	; (80ab0 <pmc_switch_mck_to_pllack+0x60>)
   80a6a:	e001      	b.n	80a70 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80a6c:	3b01      	subs	r3, #1
   80a6e:	d019      	beq.n	80aa4 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a70:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80a72:	f012 0f08 	tst.w	r2, #8
   80a76:	d0f9      	beq.n	80a6c <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80a78:	4b0d      	ldr	r3, [pc, #52]	; (80ab0 <pmc_switch_mck_to_pllack+0x60>)
   80a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80a7c:	f022 0203 	bic.w	r2, r2, #3
   80a80:	f042 0202 	orr.w	r2, r2, #2
   80a84:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a86:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80a88:	f010 0008 	ands.w	r0, r0, #8
   80a8c:	d10c      	bne.n	80aa8 <pmc_switch_mck_to_pllack+0x58>
   80a8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80a92:	4907      	ldr	r1, [pc, #28]	; (80ab0 <pmc_switch_mck_to_pllack+0x60>)
   80a94:	e001      	b.n	80a9a <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80a96:	3b01      	subs	r3, #1
   80a98:	d008      	beq.n	80aac <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a9a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80a9c:	f012 0f08 	tst.w	r2, #8
   80aa0:	d0f9      	beq.n	80a96 <pmc_switch_mck_to_pllack+0x46>
   80aa2:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80aa4:	2001      	movs	r0, #1
   80aa6:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80aa8:	2000      	movs	r0, #0
   80aaa:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80aac:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80aae:	4770      	bx	lr
   80ab0:	400e0600 	.word	0x400e0600

00080ab4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80ab4:	b138      	cbz	r0, 80ac6 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80ab6:	4911      	ldr	r1, [pc, #68]	; (80afc <pmc_switch_mainck_to_xtal+0x48>)
   80ab8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80aba:	4a11      	ldr	r2, [pc, #68]	; (80b00 <pmc_switch_mainck_to_xtal+0x4c>)
   80abc:	401a      	ands	r2, r3
   80abe:	4b11      	ldr	r3, [pc, #68]	; (80b04 <pmc_switch_mainck_to_xtal+0x50>)
   80ac0:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80ac2:	620b      	str	r3, [r1, #32]
   80ac4:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80ac6:	4a0d      	ldr	r2, [pc, #52]	; (80afc <pmc_switch_mainck_to_xtal+0x48>)
   80ac8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80aca:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80ace:	f023 0303 	bic.w	r3, r3, #3
   80ad2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80ad6:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80ada:	0209      	lsls	r1, r1, #8
   80adc:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80ade:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80ae0:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80ae2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80ae4:	f013 0f01 	tst.w	r3, #1
   80ae8:	d0fb      	beq.n	80ae2 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80aea:	4a04      	ldr	r2, [pc, #16]	; (80afc <pmc_switch_mainck_to_xtal+0x48>)
   80aec:	6a13      	ldr	r3, [r2, #32]
   80aee:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80af6:	6213      	str	r3, [r2, #32]
   80af8:	4770      	bx	lr
   80afa:	bf00      	nop
   80afc:	400e0600 	.word	0x400e0600
   80b00:	fec8fffc 	.word	0xfec8fffc
   80b04:	01370002 	.word	0x01370002

00080b08 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80b08:	4b02      	ldr	r3, [pc, #8]	; (80b14 <pmc_osc_is_ready_mainck+0xc>)
   80b0a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80b0c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80b10:	4770      	bx	lr
   80b12:	bf00      	nop
   80b14:	400e0600 	.word	0x400e0600

00080b18 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80b18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80b1c:	4b01      	ldr	r3, [pc, #4]	; (80b24 <pmc_disable_pllack+0xc>)
   80b1e:	629a      	str	r2, [r3, #40]	; 0x28
   80b20:	4770      	bx	lr
   80b22:	bf00      	nop
   80b24:	400e0600 	.word	0x400e0600

00080b28 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80b28:	4b02      	ldr	r3, [pc, #8]	; (80b34 <pmc_is_locked_pllack+0xc>)
   80b2a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80b2c:	f000 0002 	and.w	r0, r0, #2
   80b30:	4770      	bx	lr
   80b32:	bf00      	nop
   80b34:	400e0600 	.word	0x400e0600

00080b38 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80b38:	282c      	cmp	r0, #44	; 0x2c
   80b3a:	d820      	bhi.n	80b7e <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80b3c:	281f      	cmp	r0, #31
   80b3e:	d80d      	bhi.n	80b5c <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80b40:	4b12      	ldr	r3, [pc, #72]	; (80b8c <pmc_enable_periph_clk+0x54>)
   80b42:	699a      	ldr	r2, [r3, #24]
   80b44:	2301      	movs	r3, #1
   80b46:	4083      	lsls	r3, r0
   80b48:	401a      	ands	r2, r3
   80b4a:	4293      	cmp	r3, r2
   80b4c:	d019      	beq.n	80b82 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80b4e:	2301      	movs	r3, #1
   80b50:	fa03 f000 	lsl.w	r0, r3, r0
   80b54:	4b0d      	ldr	r3, [pc, #52]	; (80b8c <pmc_enable_periph_clk+0x54>)
   80b56:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80b58:	2000      	movs	r0, #0
   80b5a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80b5c:	4b0b      	ldr	r3, [pc, #44]	; (80b8c <pmc_enable_periph_clk+0x54>)
   80b5e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   80b62:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80b64:	2301      	movs	r3, #1
   80b66:	4083      	lsls	r3, r0
   80b68:	401a      	ands	r2, r3
   80b6a:	4293      	cmp	r3, r2
   80b6c:	d00b      	beq.n	80b86 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80b6e:	2301      	movs	r3, #1
   80b70:	fa03 f000 	lsl.w	r0, r3, r0
   80b74:	4b05      	ldr	r3, [pc, #20]	; (80b8c <pmc_enable_periph_clk+0x54>)
   80b76:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80b7a:	2000      	movs	r0, #0
   80b7c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80b7e:	2001      	movs	r0, #1
   80b80:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80b82:	2000      	movs	r0, #0
   80b84:	4770      	bx	lr
   80b86:	2000      	movs	r0, #0
}
   80b88:	4770      	bx	lr
   80b8a:	bf00      	nop
   80b8c:	400e0600 	.word	0x400e0600

00080b90 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80b90:	e7fe      	b.n	80b90 <Dummy_Handler>
   80b92:	bf00      	nop

00080b94 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80b94:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80b96:	4b1e      	ldr	r3, [pc, #120]	; (80c10 <Reset_Handler+0x7c>)
   80b98:	4a1e      	ldr	r2, [pc, #120]	; (80c14 <Reset_Handler+0x80>)
   80b9a:	429a      	cmp	r2, r3
   80b9c:	d003      	beq.n	80ba6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80b9e:	4b1e      	ldr	r3, [pc, #120]	; (80c18 <Reset_Handler+0x84>)
   80ba0:	4a1b      	ldr	r2, [pc, #108]	; (80c10 <Reset_Handler+0x7c>)
   80ba2:	429a      	cmp	r2, r3
   80ba4:	d304      	bcc.n	80bb0 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80ba6:	4b1d      	ldr	r3, [pc, #116]	; (80c1c <Reset_Handler+0x88>)
   80ba8:	4a1d      	ldr	r2, [pc, #116]	; (80c20 <Reset_Handler+0x8c>)
   80baa:	429a      	cmp	r2, r3
   80bac:	d30f      	bcc.n	80bce <Reset_Handler+0x3a>
   80bae:	e01a      	b.n	80be6 <Reset_Handler+0x52>
   80bb0:	4b1c      	ldr	r3, [pc, #112]	; (80c24 <Reset_Handler+0x90>)
   80bb2:	4c1d      	ldr	r4, [pc, #116]	; (80c28 <Reset_Handler+0x94>)
   80bb4:	1ae4      	subs	r4, r4, r3
   80bb6:	f024 0403 	bic.w	r4, r4, #3
   80bba:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80bbc:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80bbe:	4814      	ldr	r0, [pc, #80]	; (80c10 <Reset_Handler+0x7c>)
   80bc0:	4914      	ldr	r1, [pc, #80]	; (80c14 <Reset_Handler+0x80>)
   80bc2:	585a      	ldr	r2, [r3, r1]
   80bc4:	501a      	str	r2, [r3, r0]
   80bc6:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80bc8:	42a3      	cmp	r3, r4
   80bca:	d1fa      	bne.n	80bc2 <Reset_Handler+0x2e>
   80bcc:	e7eb      	b.n	80ba6 <Reset_Handler+0x12>
   80bce:	4b17      	ldr	r3, [pc, #92]	; (80c2c <Reset_Handler+0x98>)
   80bd0:	4917      	ldr	r1, [pc, #92]	; (80c30 <Reset_Handler+0x9c>)
   80bd2:	1ac9      	subs	r1, r1, r3
   80bd4:	f021 0103 	bic.w	r1, r1, #3
   80bd8:	1d1a      	adds	r2, r3, #4
   80bda:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80bdc:	2200      	movs	r2, #0
   80bde:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80be2:	428b      	cmp	r3, r1
   80be4:	d1fb      	bne.n	80bde <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80be6:	4a13      	ldr	r2, [pc, #76]	; (80c34 <Reset_Handler+0xa0>)
   80be8:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80bec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80bf0:	4911      	ldr	r1, [pc, #68]	; (80c38 <Reset_Handler+0xa4>)
   80bf2:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80bf4:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80bf8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80bfc:	d203      	bcs.n	80c06 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80bfe:	688a      	ldr	r2, [r1, #8]
   80c00:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80c04:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80c06:	4b0d      	ldr	r3, [pc, #52]	; (80c3c <Reset_Handler+0xa8>)
   80c08:	4798      	blx	r3

	/* Branch to main function */
	main();
   80c0a:	4b0d      	ldr	r3, [pc, #52]	; (80c40 <Reset_Handler+0xac>)
   80c0c:	4798      	blx	r3
   80c0e:	e7fe      	b.n	80c0e <Reset_Handler+0x7a>
   80c10:	20070000 	.word	0x20070000
   80c14:	00083e78 	.word	0x00083e78
   80c18:	2007099c 	.word	0x2007099c
   80c1c:	20070b10 	.word	0x20070b10
   80c20:	2007099c 	.word	0x2007099c
   80c24:	20070004 	.word	0x20070004
   80c28:	2007099f 	.word	0x2007099f
   80c2c:	20070998 	.word	0x20070998
   80c30:	20070b0b 	.word	0x20070b0b
   80c34:	00080000 	.word	0x00080000
   80c38:	e000ed00 	.word	0xe000ed00
   80c3c:	00080dfd 	.word	0x00080dfd
   80c40:	00080db1 	.word	0x00080db1

00080c44 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80c44:	4b3e      	ldr	r3, [pc, #248]	; (80d40 <SystemCoreClockUpdate+0xfc>)
   80c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80c48:	f003 0303 	and.w	r3, r3, #3
   80c4c:	2b03      	cmp	r3, #3
   80c4e:	d85f      	bhi.n	80d10 <SystemCoreClockUpdate+0xcc>
   80c50:	e8df f003 	tbb	[pc, r3]
   80c54:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80c58:	4b3a      	ldr	r3, [pc, #232]	; (80d44 <SystemCoreClockUpdate+0x100>)
   80c5a:	695b      	ldr	r3, [r3, #20]
   80c5c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80c60:	bf14      	ite	ne
   80c62:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80c66:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80c6a:	4b37      	ldr	r3, [pc, #220]	; (80d48 <SystemCoreClockUpdate+0x104>)
   80c6c:	601a      	str	r2, [r3, #0]
   80c6e:	e04f      	b.n	80d10 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80c70:	4b33      	ldr	r3, [pc, #204]	; (80d40 <SystemCoreClockUpdate+0xfc>)
   80c72:	6a1b      	ldr	r3, [r3, #32]
   80c74:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80c78:	d003      	beq.n	80c82 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80c7a:	4a34      	ldr	r2, [pc, #208]	; (80d4c <SystemCoreClockUpdate+0x108>)
   80c7c:	4b32      	ldr	r3, [pc, #200]	; (80d48 <SystemCoreClockUpdate+0x104>)
   80c7e:	601a      	str	r2, [r3, #0]
   80c80:	e046      	b.n	80d10 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80c82:	4a33      	ldr	r2, [pc, #204]	; (80d50 <SystemCoreClockUpdate+0x10c>)
   80c84:	4b30      	ldr	r3, [pc, #192]	; (80d48 <SystemCoreClockUpdate+0x104>)
   80c86:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80c88:	4b2d      	ldr	r3, [pc, #180]	; (80d40 <SystemCoreClockUpdate+0xfc>)
   80c8a:	6a1b      	ldr	r3, [r3, #32]
   80c8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80c90:	2b10      	cmp	r3, #16
   80c92:	d002      	beq.n	80c9a <SystemCoreClockUpdate+0x56>
   80c94:	2b20      	cmp	r3, #32
   80c96:	d004      	beq.n	80ca2 <SystemCoreClockUpdate+0x5e>
   80c98:	e03a      	b.n	80d10 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80c9a:	4a2e      	ldr	r2, [pc, #184]	; (80d54 <SystemCoreClockUpdate+0x110>)
   80c9c:	4b2a      	ldr	r3, [pc, #168]	; (80d48 <SystemCoreClockUpdate+0x104>)
   80c9e:	601a      	str	r2, [r3, #0]
				break;
   80ca0:	e036      	b.n	80d10 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80ca2:	4a2a      	ldr	r2, [pc, #168]	; (80d4c <SystemCoreClockUpdate+0x108>)
   80ca4:	4b28      	ldr	r3, [pc, #160]	; (80d48 <SystemCoreClockUpdate+0x104>)
   80ca6:	601a      	str	r2, [r3, #0]
				break;
   80ca8:	e032      	b.n	80d10 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80caa:	4b25      	ldr	r3, [pc, #148]	; (80d40 <SystemCoreClockUpdate+0xfc>)
   80cac:	6a1b      	ldr	r3, [r3, #32]
   80cae:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80cb2:	d003      	beq.n	80cbc <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80cb4:	4a25      	ldr	r2, [pc, #148]	; (80d4c <SystemCoreClockUpdate+0x108>)
   80cb6:	4b24      	ldr	r3, [pc, #144]	; (80d48 <SystemCoreClockUpdate+0x104>)
   80cb8:	601a      	str	r2, [r3, #0]
   80cba:	e012      	b.n	80ce2 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80cbc:	4a24      	ldr	r2, [pc, #144]	; (80d50 <SystemCoreClockUpdate+0x10c>)
   80cbe:	4b22      	ldr	r3, [pc, #136]	; (80d48 <SystemCoreClockUpdate+0x104>)
   80cc0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80cc2:	4b1f      	ldr	r3, [pc, #124]	; (80d40 <SystemCoreClockUpdate+0xfc>)
   80cc4:	6a1b      	ldr	r3, [r3, #32]
   80cc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80cca:	2b10      	cmp	r3, #16
   80ccc:	d002      	beq.n	80cd4 <SystemCoreClockUpdate+0x90>
   80cce:	2b20      	cmp	r3, #32
   80cd0:	d004      	beq.n	80cdc <SystemCoreClockUpdate+0x98>
   80cd2:	e006      	b.n	80ce2 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80cd4:	4a1f      	ldr	r2, [pc, #124]	; (80d54 <SystemCoreClockUpdate+0x110>)
   80cd6:	4b1c      	ldr	r3, [pc, #112]	; (80d48 <SystemCoreClockUpdate+0x104>)
   80cd8:	601a      	str	r2, [r3, #0]
				break;
   80cda:	e002      	b.n	80ce2 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80cdc:	4a1b      	ldr	r2, [pc, #108]	; (80d4c <SystemCoreClockUpdate+0x108>)
   80cde:	4b1a      	ldr	r3, [pc, #104]	; (80d48 <SystemCoreClockUpdate+0x104>)
   80ce0:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80ce2:	4b17      	ldr	r3, [pc, #92]	; (80d40 <SystemCoreClockUpdate+0xfc>)
   80ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ce6:	f003 0303 	and.w	r3, r3, #3
   80cea:	2b02      	cmp	r3, #2
   80cec:	d10d      	bne.n	80d0a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80cee:	4b14      	ldr	r3, [pc, #80]	; (80d40 <SystemCoreClockUpdate+0xfc>)
   80cf0:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80cf2:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80cf4:	4b14      	ldr	r3, [pc, #80]	; (80d48 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80cf6:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80cfa:	681a      	ldr	r2, [r3, #0]
   80cfc:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80d00:	b2c9      	uxtb	r1, r1
   80d02:	fbb2 f2f1 	udiv	r2, r2, r1
   80d06:	601a      	str	r2, [r3, #0]
   80d08:	e002      	b.n	80d10 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80d0a:	4a13      	ldr	r2, [pc, #76]	; (80d58 <SystemCoreClockUpdate+0x114>)
   80d0c:	4b0e      	ldr	r3, [pc, #56]	; (80d48 <SystemCoreClockUpdate+0x104>)
   80d0e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80d10:	4b0b      	ldr	r3, [pc, #44]	; (80d40 <SystemCoreClockUpdate+0xfc>)
   80d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80d14:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80d18:	2b70      	cmp	r3, #112	; 0x70
   80d1a:	d107      	bne.n	80d2c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80d1c:	4b0a      	ldr	r3, [pc, #40]	; (80d48 <SystemCoreClockUpdate+0x104>)
   80d1e:	681a      	ldr	r2, [r3, #0]
   80d20:	490e      	ldr	r1, [pc, #56]	; (80d5c <SystemCoreClockUpdate+0x118>)
   80d22:	fba1 0202 	umull	r0, r2, r1, r2
   80d26:	0852      	lsrs	r2, r2, #1
   80d28:	601a      	str	r2, [r3, #0]
   80d2a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80d2c:	4b04      	ldr	r3, [pc, #16]	; (80d40 <SystemCoreClockUpdate+0xfc>)
   80d2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80d30:	4b05      	ldr	r3, [pc, #20]	; (80d48 <SystemCoreClockUpdate+0x104>)
   80d32:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80d36:	681a      	ldr	r2, [r3, #0]
   80d38:	40ca      	lsrs	r2, r1
   80d3a:	601a      	str	r2, [r3, #0]
   80d3c:	4770      	bx	lr
   80d3e:	bf00      	nop
   80d40:	400e0600 	.word	0x400e0600
   80d44:	400e1a10 	.word	0x400e1a10
   80d48:	20070130 	.word	0x20070130
   80d4c:	00b71b00 	.word	0x00b71b00
   80d50:	003d0900 	.word	0x003d0900
   80d54:	007a1200 	.word	0x007a1200
   80d58:	0e4e1c00 	.word	0x0e4e1c00
   80d5c:	aaaaaaab 	.word	0xaaaaaaab

00080d60 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80d60:	4b09      	ldr	r3, [pc, #36]	; (80d88 <_sbrk+0x28>)
   80d62:	681b      	ldr	r3, [r3, #0]
   80d64:	b913      	cbnz	r3, 80d6c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80d66:	4a09      	ldr	r2, [pc, #36]	; (80d8c <_sbrk+0x2c>)
   80d68:	4b07      	ldr	r3, [pc, #28]	; (80d88 <_sbrk+0x28>)
   80d6a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80d6c:	4b06      	ldr	r3, [pc, #24]	; (80d88 <_sbrk+0x28>)
   80d6e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80d70:	181a      	adds	r2, r3, r0
   80d72:	4907      	ldr	r1, [pc, #28]	; (80d90 <_sbrk+0x30>)
   80d74:	4291      	cmp	r1, r2
   80d76:	db04      	blt.n	80d82 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80d78:	4610      	mov	r0, r2
   80d7a:	4a03      	ldr	r2, [pc, #12]	; (80d88 <_sbrk+0x28>)
   80d7c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80d7e:	4618      	mov	r0, r3
   80d80:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80d82:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80d86:	4770      	bx	lr
   80d88:	20070ac8 	.word	0x20070ac8
   80d8c:	20072b10 	.word	0x20072b10
   80d90:	20087ffc 	.word	0x20087ffc

00080d94 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80d94:	f04f 30ff 	mov.w	r0, #4294967295
   80d98:	4770      	bx	lr
   80d9a:	bf00      	nop

00080d9c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80d9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80da0:	604b      	str	r3, [r1, #4]

	return 0;
}
   80da2:	2000      	movs	r0, #0
   80da4:	4770      	bx	lr
   80da6:	bf00      	nop

00080da8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80da8:	2001      	movs	r0, #1
   80daa:	4770      	bx	lr

00080dac <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80dac:	2000      	movs	r0, #0
   80dae:	4770      	bx	lr

00080db0 <main>:
#include "console/consoleFunctions.h"
#include "raspDue.h"
#include "communicationPins.h"

int main (void)
{
   80db0:	b510      	push	{r4, lr}
	board_init();
   80db2:	4b0b      	ldr	r3, [pc, #44]	; (80de0 <main+0x30>)
   80db4:	4798      	blx	r3
	sysclk_init();
   80db6:	4b0b      	ldr	r3, [pc, #44]	; (80de4 <main+0x34>)
   80db8:	4798      	blx	r3
   80dba:	200b      	movs	r0, #11
   80dbc:	4c0a      	ldr	r4, [pc, #40]	; (80de8 <main+0x38>)
   80dbe:	47a0      	blx	r4
   80dc0:	200c      	movs	r0, #12
   80dc2:	47a0      	blx	r4
   80dc4:	200d      	movs	r0, #13
   80dc6:	47a0      	blx	r4
   80dc8:	200e      	movs	r0, #14
   80dca:	47a0      	blx	r4
	ioport_init();
	configureConsole();
   80dcc:	4b07      	ldr	r3, [pc, #28]	; (80dec <main+0x3c>)
   80dce:	4798      	blx	r3
	initCommunication_pins();
   80dd0:	4b07      	ldr	r3, [pc, #28]	; (80df0 <main+0x40>)
   80dd2:	4798      	blx	r3
	startCOM();
   80dd4:	4b07      	ldr	r3, [pc, #28]	; (80df4 <main+0x44>)
   80dd6:	4798      	blx	r3
	camera_detection();		
   80dd8:	4b07      	ldr	r3, [pc, #28]	; (80df8 <main+0x48>)
   80dda:	4798      	blx	r3
}
   80ddc:	2000      	movs	r0, #0
   80dde:	bd10      	pop	{r4, pc}
   80de0:	00080711 	.word	0x00080711
   80de4:	000806ad 	.word	0x000806ad
   80de8:	00080b39 	.word	0x00080b39
   80dec:	00080371 	.word	0x00080371
   80df0:	00080405 	.word	0x00080405
   80df4:	00080469 	.word	0x00080469
   80df8:	00080475 	.word	0x00080475

00080dfc <__libc_init_array>:
   80dfc:	b570      	push	{r4, r5, r6, lr}
   80dfe:	4e0f      	ldr	r6, [pc, #60]	; (80e3c <__libc_init_array+0x40>)
   80e00:	4d0f      	ldr	r5, [pc, #60]	; (80e40 <__libc_init_array+0x44>)
   80e02:	1b76      	subs	r6, r6, r5
   80e04:	10b6      	asrs	r6, r6, #2
   80e06:	d007      	beq.n	80e18 <__libc_init_array+0x1c>
   80e08:	3d04      	subs	r5, #4
   80e0a:	2400      	movs	r4, #0
   80e0c:	3401      	adds	r4, #1
   80e0e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80e12:	4798      	blx	r3
   80e14:	42a6      	cmp	r6, r4
   80e16:	d1f9      	bne.n	80e0c <__libc_init_array+0x10>
   80e18:	4e0a      	ldr	r6, [pc, #40]	; (80e44 <__libc_init_array+0x48>)
   80e1a:	4d0b      	ldr	r5, [pc, #44]	; (80e48 <__libc_init_array+0x4c>)
   80e1c:	f003 f816 	bl	83e4c <_init>
   80e20:	1b76      	subs	r6, r6, r5
   80e22:	10b6      	asrs	r6, r6, #2
   80e24:	d008      	beq.n	80e38 <__libc_init_array+0x3c>
   80e26:	3d04      	subs	r5, #4
   80e28:	2400      	movs	r4, #0
   80e2a:	3401      	adds	r4, #1
   80e2c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80e30:	4798      	blx	r3
   80e32:	42a6      	cmp	r6, r4
   80e34:	d1f9      	bne.n	80e2a <__libc_init_array+0x2e>
   80e36:	bd70      	pop	{r4, r5, r6, pc}
   80e38:	bd70      	pop	{r4, r5, r6, pc}
   80e3a:	bf00      	nop
   80e3c:	00083e58 	.word	0x00083e58
   80e40:	00083e58 	.word	0x00083e58
   80e44:	00083e60 	.word	0x00083e60
   80e48:	00083e58 	.word	0x00083e58

00080e4c <iprintf>:
   80e4c:	b40f      	push	{r0, r1, r2, r3}
   80e4e:	b510      	push	{r4, lr}
   80e50:	4b07      	ldr	r3, [pc, #28]	; (80e70 <iprintf+0x24>)
   80e52:	b082      	sub	sp, #8
   80e54:	ac04      	add	r4, sp, #16
   80e56:	f854 2b04 	ldr.w	r2, [r4], #4
   80e5a:	6818      	ldr	r0, [r3, #0]
   80e5c:	4623      	mov	r3, r4
   80e5e:	6881      	ldr	r1, [r0, #8]
   80e60:	9401      	str	r4, [sp, #4]
   80e62:	f000 f915 	bl	81090 <_vfiprintf_r>
   80e66:	b002      	add	sp, #8
   80e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80e6c:	b004      	add	sp, #16
   80e6e:	4770      	bx	lr
   80e70:	20070560 	.word	0x20070560

00080e74 <memset>:
   80e74:	b4f0      	push	{r4, r5, r6, r7}
   80e76:	0784      	lsls	r4, r0, #30
   80e78:	d043      	beq.n	80f02 <memset+0x8e>
   80e7a:	1e54      	subs	r4, r2, #1
   80e7c:	2a00      	cmp	r2, #0
   80e7e:	d03e      	beq.n	80efe <memset+0x8a>
   80e80:	b2cd      	uxtb	r5, r1
   80e82:	4603      	mov	r3, r0
   80e84:	e003      	b.n	80e8e <memset+0x1a>
   80e86:	1e62      	subs	r2, r4, #1
   80e88:	2c00      	cmp	r4, #0
   80e8a:	d038      	beq.n	80efe <memset+0x8a>
   80e8c:	4614      	mov	r4, r2
   80e8e:	f803 5b01 	strb.w	r5, [r3], #1
   80e92:	079a      	lsls	r2, r3, #30
   80e94:	d1f7      	bne.n	80e86 <memset+0x12>
   80e96:	2c03      	cmp	r4, #3
   80e98:	d92a      	bls.n	80ef0 <memset+0x7c>
   80e9a:	b2cd      	uxtb	r5, r1
   80e9c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80ea0:	2c0f      	cmp	r4, #15
   80ea2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80ea6:	d915      	bls.n	80ed4 <memset+0x60>
   80ea8:	f1a4 0710 	sub.w	r7, r4, #16
   80eac:	093f      	lsrs	r7, r7, #4
   80eae:	f103 0610 	add.w	r6, r3, #16
   80eb2:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   80eb6:	461a      	mov	r2, r3
   80eb8:	6015      	str	r5, [r2, #0]
   80eba:	6055      	str	r5, [r2, #4]
   80ebc:	6095      	str	r5, [r2, #8]
   80ebe:	60d5      	str	r5, [r2, #12]
   80ec0:	3210      	adds	r2, #16
   80ec2:	42b2      	cmp	r2, r6
   80ec4:	d1f8      	bne.n	80eb8 <memset+0x44>
   80ec6:	f004 040f 	and.w	r4, r4, #15
   80eca:	3701      	adds	r7, #1
   80ecc:	2c03      	cmp	r4, #3
   80ece:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   80ed2:	d90d      	bls.n	80ef0 <memset+0x7c>
   80ed4:	461e      	mov	r6, r3
   80ed6:	4622      	mov	r2, r4
   80ed8:	3a04      	subs	r2, #4
   80eda:	2a03      	cmp	r2, #3
   80edc:	f846 5b04 	str.w	r5, [r6], #4
   80ee0:	d8fa      	bhi.n	80ed8 <memset+0x64>
   80ee2:	1f22      	subs	r2, r4, #4
   80ee4:	f022 0203 	bic.w	r2, r2, #3
   80ee8:	3204      	adds	r2, #4
   80eea:	4413      	add	r3, r2
   80eec:	f004 0403 	and.w	r4, r4, #3
   80ef0:	b12c      	cbz	r4, 80efe <memset+0x8a>
   80ef2:	b2c9      	uxtb	r1, r1
   80ef4:	441c      	add	r4, r3
   80ef6:	f803 1b01 	strb.w	r1, [r3], #1
   80efa:	42a3      	cmp	r3, r4
   80efc:	d1fb      	bne.n	80ef6 <memset+0x82>
   80efe:	bcf0      	pop	{r4, r5, r6, r7}
   80f00:	4770      	bx	lr
   80f02:	4614      	mov	r4, r2
   80f04:	4603      	mov	r3, r0
   80f06:	e7c6      	b.n	80e96 <memset+0x22>

00080f08 <setbuf>:
   80f08:	2900      	cmp	r1, #0
   80f0a:	bf0c      	ite	eq
   80f0c:	2202      	moveq	r2, #2
   80f0e:	2200      	movne	r2, #0
   80f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80f14:	f000 b800 	b.w	80f18 <setvbuf>

00080f18 <setvbuf>:
   80f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80f1c:	4d3c      	ldr	r5, [pc, #240]	; (81010 <setvbuf+0xf8>)
   80f1e:	4604      	mov	r4, r0
   80f20:	682d      	ldr	r5, [r5, #0]
   80f22:	4688      	mov	r8, r1
   80f24:	4616      	mov	r6, r2
   80f26:	461f      	mov	r7, r3
   80f28:	b115      	cbz	r5, 80f30 <setvbuf+0x18>
   80f2a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   80f2c:	2b00      	cmp	r3, #0
   80f2e:	d04f      	beq.n	80fd0 <setvbuf+0xb8>
   80f30:	2e02      	cmp	r6, #2
   80f32:	d830      	bhi.n	80f96 <setvbuf+0x7e>
   80f34:	2f00      	cmp	r7, #0
   80f36:	db2e      	blt.n	80f96 <setvbuf+0x7e>
   80f38:	4628      	mov	r0, r5
   80f3a:	4621      	mov	r1, r4
   80f3c:	f001 f826 	bl	81f8c <_fflush_r>
   80f40:	89a3      	ldrh	r3, [r4, #12]
   80f42:	2200      	movs	r2, #0
   80f44:	6062      	str	r2, [r4, #4]
   80f46:	61a2      	str	r2, [r4, #24]
   80f48:	061a      	lsls	r2, r3, #24
   80f4a:	d428      	bmi.n	80f9e <setvbuf+0x86>
   80f4c:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   80f50:	b29b      	uxth	r3, r3
   80f52:	2e02      	cmp	r6, #2
   80f54:	81a3      	strh	r3, [r4, #12]
   80f56:	d02d      	beq.n	80fb4 <setvbuf+0x9c>
   80f58:	f1b8 0f00 	cmp.w	r8, #0
   80f5c:	d03c      	beq.n	80fd8 <setvbuf+0xc0>
   80f5e:	2e01      	cmp	r6, #1
   80f60:	d013      	beq.n	80f8a <setvbuf+0x72>
   80f62:	b29b      	uxth	r3, r3
   80f64:	f003 0008 	and.w	r0, r3, #8
   80f68:	4a2a      	ldr	r2, [pc, #168]	; (81014 <setvbuf+0xfc>)
   80f6a:	b280      	uxth	r0, r0
   80f6c:	63ea      	str	r2, [r5, #60]	; 0x3c
   80f6e:	f8c4 8000 	str.w	r8, [r4]
   80f72:	f8c4 8010 	str.w	r8, [r4, #16]
   80f76:	6167      	str	r7, [r4, #20]
   80f78:	b178      	cbz	r0, 80f9a <setvbuf+0x82>
   80f7a:	f013 0f03 	tst.w	r3, #3
   80f7e:	bf18      	it	ne
   80f80:	2700      	movne	r7, #0
   80f82:	60a7      	str	r7, [r4, #8]
   80f84:	2000      	movs	r0, #0
   80f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80f8a:	f043 0301 	orr.w	r3, r3, #1
   80f8e:	427a      	negs	r2, r7
   80f90:	81a3      	strh	r3, [r4, #12]
   80f92:	61a2      	str	r2, [r4, #24]
   80f94:	e7e5      	b.n	80f62 <setvbuf+0x4a>
   80f96:	f04f 30ff 	mov.w	r0, #4294967295
   80f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80f9e:	4628      	mov	r0, r5
   80fa0:	6921      	ldr	r1, [r4, #16]
   80fa2:	f001 f953 	bl	8224c <_free_r>
   80fa6:	89a3      	ldrh	r3, [r4, #12]
   80fa8:	2e02      	cmp	r6, #2
   80faa:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   80fae:	b29b      	uxth	r3, r3
   80fb0:	81a3      	strh	r3, [r4, #12]
   80fb2:	d1d1      	bne.n	80f58 <setvbuf+0x40>
   80fb4:	2000      	movs	r0, #0
   80fb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   80fba:	f043 0302 	orr.w	r3, r3, #2
   80fbe:	2500      	movs	r5, #0
   80fc0:	2101      	movs	r1, #1
   80fc2:	81a3      	strh	r3, [r4, #12]
   80fc4:	60a5      	str	r5, [r4, #8]
   80fc6:	6022      	str	r2, [r4, #0]
   80fc8:	6122      	str	r2, [r4, #16]
   80fca:	6161      	str	r1, [r4, #20]
   80fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80fd0:	4628      	mov	r0, r5
   80fd2:	f000 fff7 	bl	81fc4 <__sinit>
   80fd6:	e7ab      	b.n	80f30 <setvbuf+0x18>
   80fd8:	2f00      	cmp	r7, #0
   80fda:	bf08      	it	eq
   80fdc:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   80fe0:	4638      	mov	r0, r7
   80fe2:	f001 fc29 	bl	82838 <malloc>
   80fe6:	4680      	mov	r8, r0
   80fe8:	b128      	cbz	r0, 80ff6 <setvbuf+0xde>
   80fea:	89a3      	ldrh	r3, [r4, #12]
   80fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   80ff0:	b29b      	uxth	r3, r3
   80ff2:	81a3      	strh	r3, [r4, #12]
   80ff4:	e7b3      	b.n	80f5e <setvbuf+0x46>
   80ff6:	f44f 6080 	mov.w	r0, #1024	; 0x400
   80ffa:	f001 fc1d 	bl	82838 <malloc>
   80ffe:	4680      	mov	r8, r0
   81000:	b918      	cbnz	r0, 8100a <setvbuf+0xf2>
   81002:	89a3      	ldrh	r3, [r4, #12]
   81004:	f04f 30ff 	mov.w	r0, #4294967295
   81008:	e7d5      	b.n	80fb6 <setvbuf+0x9e>
   8100a:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8100e:	e7ec      	b.n	80fea <setvbuf+0xd2>
   81010:	20070560 	.word	0x20070560
   81014:	00081fb9 	.word	0x00081fb9

00081018 <__sprint_r.part.0>:
   81018:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8101a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8101e:	049c      	lsls	r4, r3, #18
   81020:	460e      	mov	r6, r1
   81022:	4680      	mov	r8, r0
   81024:	4691      	mov	r9, r2
   81026:	d52a      	bpl.n	8107e <__sprint_r.part.0+0x66>
   81028:	6893      	ldr	r3, [r2, #8]
   8102a:	6812      	ldr	r2, [r2, #0]
   8102c:	f102 0a08 	add.w	sl, r2, #8
   81030:	b31b      	cbz	r3, 8107a <__sprint_r.part.0+0x62>
   81032:	e91a 00a0 	ldmdb	sl, {r5, r7}
   81036:	08bf      	lsrs	r7, r7, #2
   81038:	d017      	beq.n	8106a <__sprint_r.part.0+0x52>
   8103a:	3d04      	subs	r5, #4
   8103c:	2400      	movs	r4, #0
   8103e:	e001      	b.n	81044 <__sprint_r.part.0+0x2c>
   81040:	42a7      	cmp	r7, r4
   81042:	d010      	beq.n	81066 <__sprint_r.part.0+0x4e>
   81044:	4640      	mov	r0, r8
   81046:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8104a:	4632      	mov	r2, r6
   8104c:	f001 f850 	bl	820f0 <_fputwc_r>
   81050:	1c43      	adds	r3, r0, #1
   81052:	f104 0401 	add.w	r4, r4, #1
   81056:	d1f3      	bne.n	81040 <__sprint_r.part.0+0x28>
   81058:	2300      	movs	r3, #0
   8105a:	f8c9 3008 	str.w	r3, [r9, #8]
   8105e:	f8c9 3004 	str.w	r3, [r9, #4]
   81062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81066:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8106a:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   8106e:	f8c9 3008 	str.w	r3, [r9, #8]
   81072:	f10a 0a08 	add.w	sl, sl, #8
   81076:	2b00      	cmp	r3, #0
   81078:	d1db      	bne.n	81032 <__sprint_r.part.0+0x1a>
   8107a:	2000      	movs	r0, #0
   8107c:	e7ec      	b.n	81058 <__sprint_r.part.0+0x40>
   8107e:	f001 f9b1 	bl	823e4 <__sfvwrite_r>
   81082:	2300      	movs	r3, #0
   81084:	f8c9 3008 	str.w	r3, [r9, #8]
   81088:	f8c9 3004 	str.w	r3, [r9, #4]
   8108c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081090 <_vfiprintf_r>:
   81090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81094:	b0b1      	sub	sp, #196	; 0xc4
   81096:	461c      	mov	r4, r3
   81098:	9102      	str	r1, [sp, #8]
   8109a:	4690      	mov	r8, r2
   8109c:	9308      	str	r3, [sp, #32]
   8109e:	9006      	str	r0, [sp, #24]
   810a0:	b118      	cbz	r0, 810aa <_vfiprintf_r+0x1a>
   810a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   810a4:	2b00      	cmp	r3, #0
   810a6:	f000 80e8 	beq.w	8127a <_vfiprintf_r+0x1ea>
   810aa:	9d02      	ldr	r5, [sp, #8]
   810ac:	89ab      	ldrh	r3, [r5, #12]
   810ae:	b29a      	uxth	r2, r3
   810b0:	0490      	lsls	r0, r2, #18
   810b2:	d407      	bmi.n	810c4 <_vfiprintf_r+0x34>
   810b4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   810b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   810ba:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   810be:	81ab      	strh	r3, [r5, #12]
   810c0:	b29a      	uxth	r2, r3
   810c2:	6669      	str	r1, [r5, #100]	; 0x64
   810c4:	0711      	lsls	r1, r2, #28
   810c6:	f140 80b7 	bpl.w	81238 <_vfiprintf_r+0x1a8>
   810ca:	f8dd b008 	ldr.w	fp, [sp, #8]
   810ce:	f8db 3010 	ldr.w	r3, [fp, #16]
   810d2:	2b00      	cmp	r3, #0
   810d4:	f000 80b0 	beq.w	81238 <_vfiprintf_r+0x1a8>
   810d8:	f002 021a 	and.w	r2, r2, #26
   810dc:	2a0a      	cmp	r2, #10
   810de:	f000 80b7 	beq.w	81250 <_vfiprintf_r+0x1c0>
   810e2:	2300      	movs	r3, #0
   810e4:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   810e8:	930a      	str	r3, [sp, #40]	; 0x28
   810ea:	9315      	str	r3, [sp, #84]	; 0x54
   810ec:	9314      	str	r3, [sp, #80]	; 0x50
   810ee:	9309      	str	r3, [sp, #36]	; 0x24
   810f0:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   810f4:	464e      	mov	r6, r9
   810f6:	f898 3000 	ldrb.w	r3, [r8]
   810fa:	2b00      	cmp	r3, #0
   810fc:	f000 84c8 	beq.w	81a90 <_vfiprintf_r+0xa00>
   81100:	2b25      	cmp	r3, #37	; 0x25
   81102:	f000 84c5 	beq.w	81a90 <_vfiprintf_r+0xa00>
   81106:	f108 0201 	add.w	r2, r8, #1
   8110a:	e001      	b.n	81110 <_vfiprintf_r+0x80>
   8110c:	2b25      	cmp	r3, #37	; 0x25
   8110e:	d004      	beq.n	8111a <_vfiprintf_r+0x8a>
   81110:	7813      	ldrb	r3, [r2, #0]
   81112:	4614      	mov	r4, r2
   81114:	3201      	adds	r2, #1
   81116:	2b00      	cmp	r3, #0
   81118:	d1f8      	bne.n	8110c <_vfiprintf_r+0x7c>
   8111a:	ebc8 0504 	rsb	r5, r8, r4
   8111e:	b195      	cbz	r5, 81146 <_vfiprintf_r+0xb6>
   81120:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81122:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81124:	3301      	adds	r3, #1
   81126:	442a      	add	r2, r5
   81128:	2b07      	cmp	r3, #7
   8112a:	f8c6 8000 	str.w	r8, [r6]
   8112e:	6075      	str	r5, [r6, #4]
   81130:	9215      	str	r2, [sp, #84]	; 0x54
   81132:	9314      	str	r3, [sp, #80]	; 0x50
   81134:	dd7b      	ble.n	8122e <_vfiprintf_r+0x19e>
   81136:	2a00      	cmp	r2, #0
   81138:	f040 84d5 	bne.w	81ae6 <_vfiprintf_r+0xa56>
   8113c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8113e:	9214      	str	r2, [sp, #80]	; 0x50
   81140:	4428      	add	r0, r5
   81142:	464e      	mov	r6, r9
   81144:	9009      	str	r0, [sp, #36]	; 0x24
   81146:	7823      	ldrb	r3, [r4, #0]
   81148:	2b00      	cmp	r3, #0
   8114a:	f000 83ed 	beq.w	81928 <_vfiprintf_r+0x898>
   8114e:	2100      	movs	r1, #0
   81150:	f04f 0200 	mov.w	r2, #0
   81154:	f04f 3cff 	mov.w	ip, #4294967295
   81158:	7863      	ldrb	r3, [r4, #1]
   8115a:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   8115e:	9104      	str	r1, [sp, #16]
   81160:	468a      	mov	sl, r1
   81162:	f104 0801 	add.w	r8, r4, #1
   81166:	4608      	mov	r0, r1
   81168:	4665      	mov	r5, ip
   8116a:	f108 0801 	add.w	r8, r8, #1
   8116e:	f1a3 0220 	sub.w	r2, r3, #32
   81172:	2a58      	cmp	r2, #88	; 0x58
   81174:	f200 82d9 	bhi.w	8172a <_vfiprintf_r+0x69a>
   81178:	e8df f012 	tbh	[pc, r2, lsl #1]
   8117c:	02d702cb 	.word	0x02d702cb
   81180:	02d202d7 	.word	0x02d202d7
   81184:	02d702d7 	.word	0x02d702d7
   81188:	02d702d7 	.word	0x02d702d7
   8118c:	02d702d7 	.word	0x02d702d7
   81190:	028f0282 	.word	0x028f0282
   81194:	008402d7 	.word	0x008402d7
   81198:	02d70293 	.word	0x02d70293
   8119c:	0196012b 	.word	0x0196012b
   811a0:	01960196 	.word	0x01960196
   811a4:	01960196 	.word	0x01960196
   811a8:	01960196 	.word	0x01960196
   811ac:	01960196 	.word	0x01960196
   811b0:	02d702d7 	.word	0x02d702d7
   811b4:	02d702d7 	.word	0x02d702d7
   811b8:	02d702d7 	.word	0x02d702d7
   811bc:	02d702d7 	.word	0x02d702d7
   811c0:	02d702d7 	.word	0x02d702d7
   811c4:	02d70130 	.word	0x02d70130
   811c8:	02d702d7 	.word	0x02d702d7
   811cc:	02d702d7 	.word	0x02d702d7
   811d0:	02d702d7 	.word	0x02d702d7
   811d4:	02d702d7 	.word	0x02d702d7
   811d8:	017b02d7 	.word	0x017b02d7
   811dc:	02d702d7 	.word	0x02d702d7
   811e0:	02d702d7 	.word	0x02d702d7
   811e4:	01a402d7 	.word	0x01a402d7
   811e8:	02d702d7 	.word	0x02d702d7
   811ec:	02d701bf 	.word	0x02d701bf
   811f0:	02d702d7 	.word	0x02d702d7
   811f4:	02d702d7 	.word	0x02d702d7
   811f8:	02d702d7 	.word	0x02d702d7
   811fc:	02d702d7 	.word	0x02d702d7
   81200:	01e402d7 	.word	0x01e402d7
   81204:	02d701fa 	.word	0x02d701fa
   81208:	02d702d7 	.word	0x02d702d7
   8120c:	01fa0216 	.word	0x01fa0216
   81210:	02d702d7 	.word	0x02d702d7
   81214:	02d7021b 	.word	0x02d7021b
   81218:	00890228 	.word	0x00890228
   8121c:	027d0266 	.word	0x027d0266
   81220:	023a02d7 	.word	0x023a02d7
   81224:	011902d7 	.word	0x011902d7
   81228:	02d702d7 	.word	0x02d702d7
   8122c:	02af      	.short	0x02af
   8122e:	3608      	adds	r6, #8
   81230:	9809      	ldr	r0, [sp, #36]	; 0x24
   81232:	4428      	add	r0, r5
   81234:	9009      	str	r0, [sp, #36]	; 0x24
   81236:	e786      	b.n	81146 <_vfiprintf_r+0xb6>
   81238:	9806      	ldr	r0, [sp, #24]
   8123a:	9902      	ldr	r1, [sp, #8]
   8123c:	f000 fd90 	bl	81d60 <__swsetup_r>
   81240:	b9b0      	cbnz	r0, 81270 <_vfiprintf_r+0x1e0>
   81242:	9d02      	ldr	r5, [sp, #8]
   81244:	89aa      	ldrh	r2, [r5, #12]
   81246:	f002 021a 	and.w	r2, r2, #26
   8124a:	2a0a      	cmp	r2, #10
   8124c:	f47f af49 	bne.w	810e2 <_vfiprintf_r+0x52>
   81250:	f8dd b008 	ldr.w	fp, [sp, #8]
   81254:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81258:	2b00      	cmp	r3, #0
   8125a:	f6ff af42 	blt.w	810e2 <_vfiprintf_r+0x52>
   8125e:	9806      	ldr	r0, [sp, #24]
   81260:	4659      	mov	r1, fp
   81262:	4642      	mov	r2, r8
   81264:	4623      	mov	r3, r4
   81266:	f000 fd3d 	bl	81ce4 <__sbprintf>
   8126a:	b031      	add	sp, #196	; 0xc4
   8126c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81270:	f04f 30ff 	mov.w	r0, #4294967295
   81274:	b031      	add	sp, #196	; 0xc4
   81276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8127a:	f000 fea3 	bl	81fc4 <__sinit>
   8127e:	e714      	b.n	810aa <_vfiprintf_r+0x1a>
   81280:	4240      	negs	r0, r0
   81282:	9308      	str	r3, [sp, #32]
   81284:	f04a 0a04 	orr.w	sl, sl, #4
   81288:	f898 3000 	ldrb.w	r3, [r8]
   8128c:	e76d      	b.n	8116a <_vfiprintf_r+0xda>
   8128e:	f01a 0320 	ands.w	r3, sl, #32
   81292:	9004      	str	r0, [sp, #16]
   81294:	46ac      	mov	ip, r5
   81296:	f000 80f4 	beq.w	81482 <_vfiprintf_r+0x3f2>
   8129a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8129e:	f10b 0307 	add.w	r3, fp, #7
   812a2:	f023 0307 	bic.w	r3, r3, #7
   812a6:	f103 0408 	add.w	r4, r3, #8
   812aa:	9408      	str	r4, [sp, #32]
   812ac:	e9d3 4500 	ldrd	r4, r5, [r3]
   812b0:	2300      	movs	r3, #0
   812b2:	f04f 0000 	mov.w	r0, #0
   812b6:	2100      	movs	r1, #0
   812b8:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   812bc:	f8cd c014 	str.w	ip, [sp, #20]
   812c0:	9107      	str	r1, [sp, #28]
   812c2:	f1bc 0f00 	cmp.w	ip, #0
   812c6:	bfa8      	it	ge
   812c8:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   812cc:	ea54 0205 	orrs.w	r2, r4, r5
   812d0:	f040 80ad 	bne.w	8142e <_vfiprintf_r+0x39e>
   812d4:	f1bc 0f00 	cmp.w	ip, #0
   812d8:	f040 80a9 	bne.w	8142e <_vfiprintf_r+0x39e>
   812dc:	2b00      	cmp	r3, #0
   812de:	f040 83c0 	bne.w	81a62 <_vfiprintf_r+0x9d2>
   812e2:	f01a 0f01 	tst.w	sl, #1
   812e6:	f000 83bc 	beq.w	81a62 <_vfiprintf_r+0x9d2>
   812ea:	2330      	movs	r3, #48	; 0x30
   812ec:	af30      	add	r7, sp, #192	; 0xc0
   812ee:	f807 3d41 	strb.w	r3, [r7, #-65]!
   812f2:	ebc7 0409 	rsb	r4, r7, r9
   812f6:	9405      	str	r4, [sp, #20]
   812f8:	f8dd b014 	ldr.w	fp, [sp, #20]
   812fc:	9c07      	ldr	r4, [sp, #28]
   812fe:	45e3      	cmp	fp, ip
   81300:	bfb8      	it	lt
   81302:	46e3      	movlt	fp, ip
   81304:	f8cd b00c 	str.w	fp, [sp, #12]
   81308:	b11c      	cbz	r4, 81312 <_vfiprintf_r+0x282>
   8130a:	f10b 0b01 	add.w	fp, fp, #1
   8130e:	f8cd b00c 	str.w	fp, [sp, #12]
   81312:	f01a 0502 	ands.w	r5, sl, #2
   81316:	9507      	str	r5, [sp, #28]
   81318:	d005      	beq.n	81326 <_vfiprintf_r+0x296>
   8131a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8131e:	f10b 0b02 	add.w	fp, fp, #2
   81322:	f8cd b00c 	str.w	fp, [sp, #12]
   81326:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   8132a:	930b      	str	r3, [sp, #44]	; 0x2c
   8132c:	f040 821b 	bne.w	81766 <_vfiprintf_r+0x6d6>
   81330:	9d04      	ldr	r5, [sp, #16]
   81332:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81336:	ebcb 0405 	rsb	r4, fp, r5
   8133a:	2c00      	cmp	r4, #0
   8133c:	f340 8213 	ble.w	81766 <_vfiprintf_r+0x6d6>
   81340:	2c10      	cmp	r4, #16
   81342:	f340 8489 	ble.w	81c58 <_vfiprintf_r+0xbc8>
   81346:	4dbe      	ldr	r5, [pc, #760]	; (81640 <_vfiprintf_r+0x5b0>)
   81348:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8134a:	462b      	mov	r3, r5
   8134c:	9814      	ldr	r0, [sp, #80]	; 0x50
   8134e:	4625      	mov	r5, r4
   81350:	f04f 0b10 	mov.w	fp, #16
   81354:	4664      	mov	r4, ip
   81356:	46b4      	mov	ip, r6
   81358:	461e      	mov	r6, r3
   8135a:	e006      	b.n	8136a <_vfiprintf_r+0x2da>
   8135c:	1c83      	adds	r3, r0, #2
   8135e:	f10c 0c08 	add.w	ip, ip, #8
   81362:	4608      	mov	r0, r1
   81364:	3d10      	subs	r5, #16
   81366:	2d10      	cmp	r5, #16
   81368:	dd11      	ble.n	8138e <_vfiprintf_r+0x2fe>
   8136a:	1c41      	adds	r1, r0, #1
   8136c:	3210      	adds	r2, #16
   8136e:	2907      	cmp	r1, #7
   81370:	9215      	str	r2, [sp, #84]	; 0x54
   81372:	e88c 0840 	stmia.w	ip, {r6, fp}
   81376:	9114      	str	r1, [sp, #80]	; 0x50
   81378:	ddf0      	ble.n	8135c <_vfiprintf_r+0x2cc>
   8137a:	2a00      	cmp	r2, #0
   8137c:	f040 81e6 	bne.w	8174c <_vfiprintf_r+0x6bc>
   81380:	3d10      	subs	r5, #16
   81382:	2d10      	cmp	r5, #16
   81384:	f04f 0301 	mov.w	r3, #1
   81388:	4610      	mov	r0, r2
   8138a:	46cc      	mov	ip, r9
   8138c:	dced      	bgt.n	8136a <_vfiprintf_r+0x2da>
   8138e:	4631      	mov	r1, r6
   81390:	4666      	mov	r6, ip
   81392:	46a4      	mov	ip, r4
   81394:	462c      	mov	r4, r5
   81396:	460d      	mov	r5, r1
   81398:	4422      	add	r2, r4
   8139a:	2b07      	cmp	r3, #7
   8139c:	9215      	str	r2, [sp, #84]	; 0x54
   8139e:	6035      	str	r5, [r6, #0]
   813a0:	6074      	str	r4, [r6, #4]
   813a2:	9314      	str	r3, [sp, #80]	; 0x50
   813a4:	f300 836d 	bgt.w	81a82 <_vfiprintf_r+0x9f2>
   813a8:	3608      	adds	r6, #8
   813aa:	1c59      	adds	r1, r3, #1
   813ac:	e1de      	b.n	8176c <_vfiprintf_r+0x6dc>
   813ae:	f01a 0f20 	tst.w	sl, #32
   813b2:	9004      	str	r0, [sp, #16]
   813b4:	46ac      	mov	ip, r5
   813b6:	f000 808d 	beq.w	814d4 <_vfiprintf_r+0x444>
   813ba:	9d08      	ldr	r5, [sp, #32]
   813bc:	1deb      	adds	r3, r5, #7
   813be:	f023 0307 	bic.w	r3, r3, #7
   813c2:	f103 0b08 	add.w	fp, r3, #8
   813c6:	e9d3 4500 	ldrd	r4, r5, [r3]
   813ca:	f8cd b020 	str.w	fp, [sp, #32]
   813ce:	2301      	movs	r3, #1
   813d0:	e76f      	b.n	812b2 <_vfiprintf_r+0x222>
   813d2:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   813d6:	f898 3000 	ldrb.w	r3, [r8]
   813da:	e6c6      	b.n	8116a <_vfiprintf_r+0xda>
   813dc:	f04a 0a10 	orr.w	sl, sl, #16
   813e0:	f01a 0f20 	tst.w	sl, #32
   813e4:	9004      	str	r0, [sp, #16]
   813e6:	46ac      	mov	ip, r5
   813e8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   813ec:	f000 80c8 	beq.w	81580 <_vfiprintf_r+0x4f0>
   813f0:	9c08      	ldr	r4, [sp, #32]
   813f2:	1de1      	adds	r1, r4, #7
   813f4:	f021 0107 	bic.w	r1, r1, #7
   813f8:	e9d1 2300 	ldrd	r2, r3, [r1]
   813fc:	3108      	adds	r1, #8
   813fe:	9108      	str	r1, [sp, #32]
   81400:	4614      	mov	r4, r2
   81402:	461d      	mov	r5, r3
   81404:	2a00      	cmp	r2, #0
   81406:	f173 0b00 	sbcs.w	fp, r3, #0
   8140a:	f2c0 83ce 	blt.w	81baa <_vfiprintf_r+0xb1a>
   8140e:	f1bc 0f00 	cmp.w	ip, #0
   81412:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81416:	bfa8      	it	ge
   81418:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   8141c:	ea54 0205 	orrs.w	r2, r4, r5
   81420:	9007      	str	r0, [sp, #28]
   81422:	f8cd c014 	str.w	ip, [sp, #20]
   81426:	f04f 0301 	mov.w	r3, #1
   8142a:	f43f af53 	beq.w	812d4 <_vfiprintf_r+0x244>
   8142e:	2b01      	cmp	r3, #1
   81430:	f000 8319 	beq.w	81a66 <_vfiprintf_r+0x9d6>
   81434:	2b02      	cmp	r3, #2
   81436:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   8143a:	f040 824c 	bne.w	818d6 <_vfiprintf_r+0x846>
   8143e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   81442:	4619      	mov	r1, r3
   81444:	f004 000f 	and.w	r0, r4, #15
   81448:	0922      	lsrs	r2, r4, #4
   8144a:	f81b 0000 	ldrb.w	r0, [fp, r0]
   8144e:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   81452:	092b      	lsrs	r3, r5, #4
   81454:	7008      	strb	r0, [r1, #0]
   81456:	ea52 0003 	orrs.w	r0, r2, r3
   8145a:	460f      	mov	r7, r1
   8145c:	4614      	mov	r4, r2
   8145e:	461d      	mov	r5, r3
   81460:	f101 31ff 	add.w	r1, r1, #4294967295
   81464:	d1ee      	bne.n	81444 <_vfiprintf_r+0x3b4>
   81466:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   8146a:	ebc7 0309 	rsb	r3, r7, r9
   8146e:	9305      	str	r3, [sp, #20]
   81470:	e742      	b.n	812f8 <_vfiprintf_r+0x268>
   81472:	f04a 0a10 	orr.w	sl, sl, #16
   81476:	f01a 0320 	ands.w	r3, sl, #32
   8147a:	9004      	str	r0, [sp, #16]
   8147c:	46ac      	mov	ip, r5
   8147e:	f47f af0c 	bne.w	8129a <_vfiprintf_r+0x20a>
   81482:	f01a 0210 	ands.w	r2, sl, #16
   81486:	f040 8311 	bne.w	81aac <_vfiprintf_r+0xa1c>
   8148a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   8148e:	f000 830d 	beq.w	81aac <_vfiprintf_r+0xa1c>
   81492:	f8dd b020 	ldr.w	fp, [sp, #32]
   81496:	4613      	mov	r3, r2
   81498:	f8bb 4000 	ldrh.w	r4, [fp]
   8149c:	f10b 0b04 	add.w	fp, fp, #4
   814a0:	2500      	movs	r5, #0
   814a2:	f8cd b020 	str.w	fp, [sp, #32]
   814a6:	e704      	b.n	812b2 <_vfiprintf_r+0x222>
   814a8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   814ac:	2000      	movs	r0, #0
   814ae:	f818 3b01 	ldrb.w	r3, [r8], #1
   814b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   814b6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   814ba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   814be:	2a09      	cmp	r2, #9
   814c0:	d9f5      	bls.n	814ae <_vfiprintf_r+0x41e>
   814c2:	e654      	b.n	8116e <_vfiprintf_r+0xde>
   814c4:	f04a 0a10 	orr.w	sl, sl, #16
   814c8:	f01a 0f20 	tst.w	sl, #32
   814cc:	9004      	str	r0, [sp, #16]
   814ce:	46ac      	mov	ip, r5
   814d0:	f47f af73 	bne.w	813ba <_vfiprintf_r+0x32a>
   814d4:	f01a 0f10 	tst.w	sl, #16
   814d8:	f040 82ef 	bne.w	81aba <_vfiprintf_r+0xa2a>
   814dc:	f01a 0f40 	tst.w	sl, #64	; 0x40
   814e0:	f000 82eb 	beq.w	81aba <_vfiprintf_r+0xa2a>
   814e4:	f8dd b020 	ldr.w	fp, [sp, #32]
   814e8:	2500      	movs	r5, #0
   814ea:	f8bb 4000 	ldrh.w	r4, [fp]
   814ee:	f10b 0b04 	add.w	fp, fp, #4
   814f2:	2301      	movs	r3, #1
   814f4:	f8cd b020 	str.w	fp, [sp, #32]
   814f8:	e6db      	b.n	812b2 <_vfiprintf_r+0x222>
   814fa:	46ac      	mov	ip, r5
   814fc:	4d51      	ldr	r5, [pc, #324]	; (81644 <_vfiprintf_r+0x5b4>)
   814fe:	f01a 0f20 	tst.w	sl, #32
   81502:	9004      	str	r0, [sp, #16]
   81504:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81508:	950a      	str	r5, [sp, #40]	; 0x28
   8150a:	f000 80f0 	beq.w	816ee <_vfiprintf_r+0x65e>
   8150e:	9d08      	ldr	r5, [sp, #32]
   81510:	1dea      	adds	r2, r5, #7
   81512:	f022 0207 	bic.w	r2, r2, #7
   81516:	f102 0b08 	add.w	fp, r2, #8
   8151a:	f8cd b020 	str.w	fp, [sp, #32]
   8151e:	e9d2 4500 	ldrd	r4, r5, [r2]
   81522:	f01a 0f01 	tst.w	sl, #1
   81526:	f000 82aa 	beq.w	81a7e <_vfiprintf_r+0x9ee>
   8152a:	ea54 0b05 	orrs.w	fp, r4, r5
   8152e:	f000 82a6 	beq.w	81a7e <_vfiprintf_r+0x9ee>
   81532:	2230      	movs	r2, #48	; 0x30
   81534:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81538:	f04a 0a02 	orr.w	sl, sl, #2
   8153c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81540:	2302      	movs	r3, #2
   81542:	e6b6      	b.n	812b2 <_vfiprintf_r+0x222>
   81544:	9b08      	ldr	r3, [sp, #32]
   81546:	f8dd b020 	ldr.w	fp, [sp, #32]
   8154a:	681b      	ldr	r3, [r3, #0]
   8154c:	2401      	movs	r4, #1
   8154e:	f04f 0500 	mov.w	r5, #0
   81552:	f10b 0b04 	add.w	fp, fp, #4
   81556:	9004      	str	r0, [sp, #16]
   81558:	9403      	str	r4, [sp, #12]
   8155a:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8155e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81562:	f8cd b020 	str.w	fp, [sp, #32]
   81566:	9405      	str	r4, [sp, #20]
   81568:	af16      	add	r7, sp, #88	; 0x58
   8156a:	f04f 0c00 	mov.w	ip, #0
   8156e:	e6d0      	b.n	81312 <_vfiprintf_r+0x282>
   81570:	f01a 0f20 	tst.w	sl, #32
   81574:	9004      	str	r0, [sp, #16]
   81576:	46ac      	mov	ip, r5
   81578:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8157c:	f47f af38 	bne.w	813f0 <_vfiprintf_r+0x360>
   81580:	f01a 0f10 	tst.w	sl, #16
   81584:	f040 82a7 	bne.w	81ad6 <_vfiprintf_r+0xa46>
   81588:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8158c:	f000 82a3 	beq.w	81ad6 <_vfiprintf_r+0xa46>
   81590:	f8dd b020 	ldr.w	fp, [sp, #32]
   81594:	f9bb 4000 	ldrsh.w	r4, [fp]
   81598:	f10b 0b04 	add.w	fp, fp, #4
   8159c:	17e5      	asrs	r5, r4, #31
   8159e:	4622      	mov	r2, r4
   815a0:	462b      	mov	r3, r5
   815a2:	f8cd b020 	str.w	fp, [sp, #32]
   815a6:	e72d      	b.n	81404 <_vfiprintf_r+0x374>
   815a8:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   815ac:	f898 3000 	ldrb.w	r3, [r8]
   815b0:	e5db      	b.n	8116a <_vfiprintf_r+0xda>
   815b2:	f898 3000 	ldrb.w	r3, [r8]
   815b6:	4642      	mov	r2, r8
   815b8:	2b6c      	cmp	r3, #108	; 0x6c
   815ba:	bf03      	ittte	eq
   815bc:	f108 0801 	addeq.w	r8, r8, #1
   815c0:	f04a 0a20 	orreq.w	sl, sl, #32
   815c4:	7853      	ldrbeq	r3, [r2, #1]
   815c6:	f04a 0a10 	orrne.w	sl, sl, #16
   815ca:	e5ce      	b.n	8116a <_vfiprintf_r+0xda>
   815cc:	f01a 0f20 	tst.w	sl, #32
   815d0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   815d4:	f000 82f7 	beq.w	81bc6 <_vfiprintf_r+0xb36>
   815d8:	9c08      	ldr	r4, [sp, #32]
   815da:	6821      	ldr	r1, [r4, #0]
   815dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   815de:	17e5      	asrs	r5, r4, #31
   815e0:	462b      	mov	r3, r5
   815e2:	9d08      	ldr	r5, [sp, #32]
   815e4:	4622      	mov	r2, r4
   815e6:	3504      	adds	r5, #4
   815e8:	9508      	str	r5, [sp, #32]
   815ea:	e9c1 2300 	strd	r2, r3, [r1]
   815ee:	e582      	b.n	810f6 <_vfiprintf_r+0x66>
   815f0:	9c08      	ldr	r4, [sp, #32]
   815f2:	46ac      	mov	ip, r5
   815f4:	6827      	ldr	r7, [r4, #0]
   815f6:	f04f 0500 	mov.w	r5, #0
   815fa:	9004      	str	r0, [sp, #16]
   815fc:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81600:	3404      	adds	r4, #4
   81602:	2f00      	cmp	r7, #0
   81604:	f000 8332 	beq.w	81c6c <_vfiprintf_r+0xbdc>
   81608:	f1bc 0f00 	cmp.w	ip, #0
   8160c:	4638      	mov	r0, r7
   8160e:	f2c0 8307 	blt.w	81c20 <_vfiprintf_r+0xb90>
   81612:	4662      	mov	r2, ip
   81614:	2100      	movs	r1, #0
   81616:	f8cd c004 	str.w	ip, [sp, #4]
   8161a:	f001 fbb1 	bl	82d80 <memchr>
   8161e:	f8dd c004 	ldr.w	ip, [sp, #4]
   81622:	2800      	cmp	r0, #0
   81624:	f000 833a 	beq.w	81c9c <_vfiprintf_r+0xc0c>
   81628:	1bc0      	subs	r0, r0, r7
   8162a:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8162e:	4560      	cmp	r0, ip
   81630:	bfa8      	it	ge
   81632:	4660      	movge	r0, ip
   81634:	9005      	str	r0, [sp, #20]
   81636:	9408      	str	r4, [sp, #32]
   81638:	9507      	str	r5, [sp, #28]
   8163a:	f04f 0c00 	mov.w	ip, #0
   8163e:	e65b      	b.n	812f8 <_vfiprintf_r+0x268>
   81640:	00083e3c 	.word	0x00083e3c
   81644:	00083dfc 	.word	0x00083dfc
   81648:	9b08      	ldr	r3, [sp, #32]
   8164a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8164e:	9004      	str	r0, [sp, #16]
   81650:	48b2      	ldr	r0, [pc, #712]	; (8191c <_vfiprintf_r+0x88c>)
   81652:	681c      	ldr	r4, [r3, #0]
   81654:	2230      	movs	r2, #48	; 0x30
   81656:	2378      	movs	r3, #120	; 0x78
   81658:	f10b 0b04 	add.w	fp, fp, #4
   8165c:	46ac      	mov	ip, r5
   8165e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81662:	f04a 0a02 	orr.w	sl, sl, #2
   81666:	f8cd b020 	str.w	fp, [sp, #32]
   8166a:	2500      	movs	r5, #0
   8166c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81670:	900a      	str	r0, [sp, #40]	; 0x28
   81672:	2302      	movs	r3, #2
   81674:	e61d      	b.n	812b2 <_vfiprintf_r+0x222>
   81676:	f04a 0a20 	orr.w	sl, sl, #32
   8167a:	f898 3000 	ldrb.w	r3, [r8]
   8167e:	e574      	b.n	8116a <_vfiprintf_r+0xda>
   81680:	f8dd b020 	ldr.w	fp, [sp, #32]
   81684:	f8db 0000 	ldr.w	r0, [fp]
   81688:	f10b 0304 	add.w	r3, fp, #4
   8168c:	2800      	cmp	r0, #0
   8168e:	f6ff adf7 	blt.w	81280 <_vfiprintf_r+0x1f0>
   81692:	9308      	str	r3, [sp, #32]
   81694:	f898 3000 	ldrb.w	r3, [r8]
   81698:	e567      	b.n	8116a <_vfiprintf_r+0xda>
   8169a:	f898 3000 	ldrb.w	r3, [r8]
   8169e:	212b      	movs	r1, #43	; 0x2b
   816a0:	e563      	b.n	8116a <_vfiprintf_r+0xda>
   816a2:	f898 3000 	ldrb.w	r3, [r8]
   816a6:	f108 0401 	add.w	r4, r8, #1
   816aa:	2b2a      	cmp	r3, #42	; 0x2a
   816ac:	f000 8305 	beq.w	81cba <_vfiprintf_r+0xc2a>
   816b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   816b4:	2a09      	cmp	r2, #9
   816b6:	bf98      	it	ls
   816b8:	2500      	movls	r5, #0
   816ba:	f200 82fa 	bhi.w	81cb2 <_vfiprintf_r+0xc22>
   816be:	f814 3b01 	ldrb.w	r3, [r4], #1
   816c2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   816c6:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   816ca:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   816ce:	2a09      	cmp	r2, #9
   816d0:	d9f5      	bls.n	816be <_vfiprintf_r+0x62e>
   816d2:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   816d6:	46a0      	mov	r8, r4
   816d8:	e549      	b.n	8116e <_vfiprintf_r+0xde>
   816da:	4c90      	ldr	r4, [pc, #576]	; (8191c <_vfiprintf_r+0x88c>)
   816dc:	f01a 0f20 	tst.w	sl, #32
   816e0:	9004      	str	r0, [sp, #16]
   816e2:	46ac      	mov	ip, r5
   816e4:	940a      	str	r4, [sp, #40]	; 0x28
   816e6:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   816ea:	f47f af10 	bne.w	8150e <_vfiprintf_r+0x47e>
   816ee:	f01a 0f10 	tst.w	sl, #16
   816f2:	f040 81ea 	bne.w	81aca <_vfiprintf_r+0xa3a>
   816f6:	f01a 0f40 	tst.w	sl, #64	; 0x40
   816fa:	f000 81e6 	beq.w	81aca <_vfiprintf_r+0xa3a>
   816fe:	f8dd b020 	ldr.w	fp, [sp, #32]
   81702:	2500      	movs	r5, #0
   81704:	f8bb 4000 	ldrh.w	r4, [fp]
   81708:	f10b 0b04 	add.w	fp, fp, #4
   8170c:	f8cd b020 	str.w	fp, [sp, #32]
   81710:	e707      	b.n	81522 <_vfiprintf_r+0x492>
   81712:	f898 3000 	ldrb.w	r3, [r8]
   81716:	2900      	cmp	r1, #0
   81718:	f47f ad27 	bne.w	8116a <_vfiprintf_r+0xda>
   8171c:	2120      	movs	r1, #32
   8171e:	e524      	b.n	8116a <_vfiprintf_r+0xda>
   81720:	f04a 0a01 	orr.w	sl, sl, #1
   81724:	f898 3000 	ldrb.w	r3, [r8]
   81728:	e51f      	b.n	8116a <_vfiprintf_r+0xda>
   8172a:	9004      	str	r0, [sp, #16]
   8172c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81730:	2b00      	cmp	r3, #0
   81732:	f000 80f9 	beq.w	81928 <_vfiprintf_r+0x898>
   81736:	2501      	movs	r5, #1
   81738:	f04f 0b00 	mov.w	fp, #0
   8173c:	9503      	str	r5, [sp, #12]
   8173e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81742:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81746:	9505      	str	r5, [sp, #20]
   81748:	af16      	add	r7, sp, #88	; 0x58
   8174a:	e70e      	b.n	8156a <_vfiprintf_r+0x4da>
   8174c:	9806      	ldr	r0, [sp, #24]
   8174e:	9902      	ldr	r1, [sp, #8]
   81750:	aa13      	add	r2, sp, #76	; 0x4c
   81752:	f7ff fc61 	bl	81018 <__sprint_r.part.0>
   81756:	2800      	cmp	r0, #0
   81758:	f040 80ed 	bne.w	81936 <_vfiprintf_r+0x8a6>
   8175c:	9814      	ldr	r0, [sp, #80]	; 0x50
   8175e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81760:	1c43      	adds	r3, r0, #1
   81762:	46cc      	mov	ip, r9
   81764:	e5fe      	b.n	81364 <_vfiprintf_r+0x2d4>
   81766:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81768:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8176a:	1c59      	adds	r1, r3, #1
   8176c:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81770:	b168      	cbz	r0, 8178e <_vfiprintf_r+0x6fe>
   81772:	3201      	adds	r2, #1
   81774:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   81778:	2301      	movs	r3, #1
   8177a:	2907      	cmp	r1, #7
   8177c:	9215      	str	r2, [sp, #84]	; 0x54
   8177e:	9114      	str	r1, [sp, #80]	; 0x50
   81780:	e886 0009 	stmia.w	r6, {r0, r3}
   81784:	f300 8160 	bgt.w	81a48 <_vfiprintf_r+0x9b8>
   81788:	460b      	mov	r3, r1
   8178a:	3608      	adds	r6, #8
   8178c:	3101      	adds	r1, #1
   8178e:	9c07      	ldr	r4, [sp, #28]
   81790:	b164      	cbz	r4, 817ac <_vfiprintf_r+0x71c>
   81792:	3202      	adds	r2, #2
   81794:	a812      	add	r0, sp, #72	; 0x48
   81796:	2302      	movs	r3, #2
   81798:	2907      	cmp	r1, #7
   8179a:	9215      	str	r2, [sp, #84]	; 0x54
   8179c:	9114      	str	r1, [sp, #80]	; 0x50
   8179e:	e886 0009 	stmia.w	r6, {r0, r3}
   817a2:	f300 8157 	bgt.w	81a54 <_vfiprintf_r+0x9c4>
   817a6:	460b      	mov	r3, r1
   817a8:	3608      	adds	r6, #8
   817aa:	3101      	adds	r1, #1
   817ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   817ae:	2d80      	cmp	r5, #128	; 0x80
   817b0:	f000 8101 	beq.w	819b6 <_vfiprintf_r+0x926>
   817b4:	9d05      	ldr	r5, [sp, #20]
   817b6:	ebc5 040c 	rsb	r4, r5, ip
   817ba:	2c00      	cmp	r4, #0
   817bc:	dd2f      	ble.n	8181e <_vfiprintf_r+0x78e>
   817be:	2c10      	cmp	r4, #16
   817c0:	4d57      	ldr	r5, [pc, #348]	; (81920 <_vfiprintf_r+0x890>)
   817c2:	dd22      	ble.n	8180a <_vfiprintf_r+0x77a>
   817c4:	4630      	mov	r0, r6
   817c6:	f04f 0b10 	mov.w	fp, #16
   817ca:	462e      	mov	r6, r5
   817cc:	4625      	mov	r5, r4
   817ce:	9c06      	ldr	r4, [sp, #24]
   817d0:	e006      	b.n	817e0 <_vfiprintf_r+0x750>
   817d2:	f103 0c02 	add.w	ip, r3, #2
   817d6:	3008      	adds	r0, #8
   817d8:	460b      	mov	r3, r1
   817da:	3d10      	subs	r5, #16
   817dc:	2d10      	cmp	r5, #16
   817de:	dd10      	ble.n	81802 <_vfiprintf_r+0x772>
   817e0:	1c59      	adds	r1, r3, #1
   817e2:	3210      	adds	r2, #16
   817e4:	2907      	cmp	r1, #7
   817e6:	9215      	str	r2, [sp, #84]	; 0x54
   817e8:	e880 0840 	stmia.w	r0, {r6, fp}
   817ec:	9114      	str	r1, [sp, #80]	; 0x50
   817ee:	ddf0      	ble.n	817d2 <_vfiprintf_r+0x742>
   817f0:	2a00      	cmp	r2, #0
   817f2:	d163      	bne.n	818bc <_vfiprintf_r+0x82c>
   817f4:	3d10      	subs	r5, #16
   817f6:	2d10      	cmp	r5, #16
   817f8:	f04f 0c01 	mov.w	ip, #1
   817fc:	4613      	mov	r3, r2
   817fe:	4648      	mov	r0, r9
   81800:	dcee      	bgt.n	817e0 <_vfiprintf_r+0x750>
   81802:	462c      	mov	r4, r5
   81804:	4661      	mov	r1, ip
   81806:	4635      	mov	r5, r6
   81808:	4606      	mov	r6, r0
   8180a:	4422      	add	r2, r4
   8180c:	2907      	cmp	r1, #7
   8180e:	9215      	str	r2, [sp, #84]	; 0x54
   81810:	6035      	str	r5, [r6, #0]
   81812:	6074      	str	r4, [r6, #4]
   81814:	9114      	str	r1, [sp, #80]	; 0x50
   81816:	f300 80c1 	bgt.w	8199c <_vfiprintf_r+0x90c>
   8181a:	3608      	adds	r6, #8
   8181c:	3101      	adds	r1, #1
   8181e:	9d05      	ldr	r5, [sp, #20]
   81820:	2907      	cmp	r1, #7
   81822:	442a      	add	r2, r5
   81824:	9215      	str	r2, [sp, #84]	; 0x54
   81826:	6037      	str	r7, [r6, #0]
   81828:	6075      	str	r5, [r6, #4]
   8182a:	9114      	str	r1, [sp, #80]	; 0x50
   8182c:	f340 80c1 	ble.w	819b2 <_vfiprintf_r+0x922>
   81830:	2a00      	cmp	r2, #0
   81832:	f040 8130 	bne.w	81a96 <_vfiprintf_r+0xa06>
   81836:	9214      	str	r2, [sp, #80]	; 0x50
   81838:	464e      	mov	r6, r9
   8183a:	f01a 0f04 	tst.w	sl, #4
   8183e:	f000 808b 	beq.w	81958 <_vfiprintf_r+0x8c8>
   81842:	9d04      	ldr	r5, [sp, #16]
   81844:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81848:	ebcb 0405 	rsb	r4, fp, r5
   8184c:	2c00      	cmp	r4, #0
   8184e:	f340 8083 	ble.w	81958 <_vfiprintf_r+0x8c8>
   81852:	2c10      	cmp	r4, #16
   81854:	f340 821e 	ble.w	81c94 <_vfiprintf_r+0xc04>
   81858:	9914      	ldr	r1, [sp, #80]	; 0x50
   8185a:	4d32      	ldr	r5, [pc, #200]	; (81924 <_vfiprintf_r+0x894>)
   8185c:	2710      	movs	r7, #16
   8185e:	f8dd a018 	ldr.w	sl, [sp, #24]
   81862:	f8dd b008 	ldr.w	fp, [sp, #8]
   81866:	e005      	b.n	81874 <_vfiprintf_r+0x7e4>
   81868:	1c88      	adds	r0, r1, #2
   8186a:	3608      	adds	r6, #8
   8186c:	4619      	mov	r1, r3
   8186e:	3c10      	subs	r4, #16
   81870:	2c10      	cmp	r4, #16
   81872:	dd10      	ble.n	81896 <_vfiprintf_r+0x806>
   81874:	1c4b      	adds	r3, r1, #1
   81876:	3210      	adds	r2, #16
   81878:	2b07      	cmp	r3, #7
   8187a:	9215      	str	r2, [sp, #84]	; 0x54
   8187c:	e886 00a0 	stmia.w	r6, {r5, r7}
   81880:	9314      	str	r3, [sp, #80]	; 0x50
   81882:	ddf1      	ble.n	81868 <_vfiprintf_r+0x7d8>
   81884:	2a00      	cmp	r2, #0
   81886:	d17d      	bne.n	81984 <_vfiprintf_r+0x8f4>
   81888:	3c10      	subs	r4, #16
   8188a:	2c10      	cmp	r4, #16
   8188c:	f04f 0001 	mov.w	r0, #1
   81890:	4611      	mov	r1, r2
   81892:	464e      	mov	r6, r9
   81894:	dcee      	bgt.n	81874 <_vfiprintf_r+0x7e4>
   81896:	4422      	add	r2, r4
   81898:	2807      	cmp	r0, #7
   8189a:	9215      	str	r2, [sp, #84]	; 0x54
   8189c:	6035      	str	r5, [r6, #0]
   8189e:	6074      	str	r4, [r6, #4]
   818a0:	9014      	str	r0, [sp, #80]	; 0x50
   818a2:	dd59      	ble.n	81958 <_vfiprintf_r+0x8c8>
   818a4:	2a00      	cmp	r2, #0
   818a6:	d14f      	bne.n	81948 <_vfiprintf_r+0x8b8>
   818a8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   818aa:	f8dd b00c 	ldr.w	fp, [sp, #12]
   818ae:	9d04      	ldr	r5, [sp, #16]
   818b0:	45ab      	cmp	fp, r5
   818b2:	bfac      	ite	ge
   818b4:	445c      	addge	r4, fp
   818b6:	1964      	addlt	r4, r4, r5
   818b8:	9409      	str	r4, [sp, #36]	; 0x24
   818ba:	e05e      	b.n	8197a <_vfiprintf_r+0x8ea>
   818bc:	4620      	mov	r0, r4
   818be:	9902      	ldr	r1, [sp, #8]
   818c0:	aa13      	add	r2, sp, #76	; 0x4c
   818c2:	f7ff fba9 	bl	81018 <__sprint_r.part.0>
   818c6:	2800      	cmp	r0, #0
   818c8:	d135      	bne.n	81936 <_vfiprintf_r+0x8a6>
   818ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   818cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   818ce:	f103 0c01 	add.w	ip, r3, #1
   818d2:	4648      	mov	r0, r9
   818d4:	e781      	b.n	817da <_vfiprintf_r+0x74a>
   818d6:	08e0      	lsrs	r0, r4, #3
   818d8:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   818dc:	f004 0207 	and.w	r2, r4, #7
   818e0:	08e9      	lsrs	r1, r5, #3
   818e2:	3230      	adds	r2, #48	; 0x30
   818e4:	ea50 0b01 	orrs.w	fp, r0, r1
   818e8:	461f      	mov	r7, r3
   818ea:	701a      	strb	r2, [r3, #0]
   818ec:	4604      	mov	r4, r0
   818ee:	460d      	mov	r5, r1
   818f0:	f103 33ff 	add.w	r3, r3, #4294967295
   818f4:	d1ef      	bne.n	818d6 <_vfiprintf_r+0x846>
   818f6:	f01a 0f01 	tst.w	sl, #1
   818fa:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   818fe:	4639      	mov	r1, r7
   81900:	f000 80b9 	beq.w	81a76 <_vfiprintf_r+0x9e6>
   81904:	2a30      	cmp	r2, #48	; 0x30
   81906:	f43f acf4 	beq.w	812f2 <_vfiprintf_r+0x262>
   8190a:	461f      	mov	r7, r3
   8190c:	ebc7 0509 	rsb	r5, r7, r9
   81910:	2330      	movs	r3, #48	; 0x30
   81912:	9505      	str	r5, [sp, #20]
   81914:	f801 3c01 	strb.w	r3, [r1, #-1]
   81918:	e4ee      	b.n	812f8 <_vfiprintf_r+0x268>
   8191a:	bf00      	nop
   8191c:	00083e10 	.word	0x00083e10
   81920:	00083e2c 	.word	0x00083e2c
   81924:	00083e3c 	.word	0x00083e3c
   81928:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8192a:	b123      	cbz	r3, 81936 <_vfiprintf_r+0x8a6>
   8192c:	9806      	ldr	r0, [sp, #24]
   8192e:	9902      	ldr	r1, [sp, #8]
   81930:	aa13      	add	r2, sp, #76	; 0x4c
   81932:	f7ff fb71 	bl	81018 <__sprint_r.part.0>
   81936:	9c02      	ldr	r4, [sp, #8]
   81938:	89a3      	ldrh	r3, [r4, #12]
   8193a:	065b      	lsls	r3, r3, #25
   8193c:	f53f ac98 	bmi.w	81270 <_vfiprintf_r+0x1e0>
   81940:	9809      	ldr	r0, [sp, #36]	; 0x24
   81942:	b031      	add	sp, #196	; 0xc4
   81944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81948:	9806      	ldr	r0, [sp, #24]
   8194a:	9902      	ldr	r1, [sp, #8]
   8194c:	aa13      	add	r2, sp, #76	; 0x4c
   8194e:	f7ff fb63 	bl	81018 <__sprint_r.part.0>
   81952:	2800      	cmp	r0, #0
   81954:	d1ef      	bne.n	81936 <_vfiprintf_r+0x8a6>
   81956:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81958:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8195a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8195e:	9d04      	ldr	r5, [sp, #16]
   81960:	45ab      	cmp	fp, r5
   81962:	bfac      	ite	ge
   81964:	445c      	addge	r4, fp
   81966:	1964      	addlt	r4, r4, r5
   81968:	9409      	str	r4, [sp, #36]	; 0x24
   8196a:	b132      	cbz	r2, 8197a <_vfiprintf_r+0x8ea>
   8196c:	9806      	ldr	r0, [sp, #24]
   8196e:	9902      	ldr	r1, [sp, #8]
   81970:	aa13      	add	r2, sp, #76	; 0x4c
   81972:	f7ff fb51 	bl	81018 <__sprint_r.part.0>
   81976:	2800      	cmp	r0, #0
   81978:	d1dd      	bne.n	81936 <_vfiprintf_r+0x8a6>
   8197a:	2000      	movs	r0, #0
   8197c:	9014      	str	r0, [sp, #80]	; 0x50
   8197e:	464e      	mov	r6, r9
   81980:	f7ff bbb9 	b.w	810f6 <_vfiprintf_r+0x66>
   81984:	4650      	mov	r0, sl
   81986:	4659      	mov	r1, fp
   81988:	aa13      	add	r2, sp, #76	; 0x4c
   8198a:	f7ff fb45 	bl	81018 <__sprint_r.part.0>
   8198e:	2800      	cmp	r0, #0
   81990:	d1d1      	bne.n	81936 <_vfiprintf_r+0x8a6>
   81992:	9914      	ldr	r1, [sp, #80]	; 0x50
   81994:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81996:	1c48      	adds	r0, r1, #1
   81998:	464e      	mov	r6, r9
   8199a:	e768      	b.n	8186e <_vfiprintf_r+0x7de>
   8199c:	2a00      	cmp	r2, #0
   8199e:	f040 80f7 	bne.w	81b90 <_vfiprintf_r+0xb00>
   819a2:	9c05      	ldr	r4, [sp, #20]
   819a4:	2301      	movs	r3, #1
   819a6:	9720      	str	r7, [sp, #128]	; 0x80
   819a8:	9421      	str	r4, [sp, #132]	; 0x84
   819aa:	9415      	str	r4, [sp, #84]	; 0x54
   819ac:	4622      	mov	r2, r4
   819ae:	9314      	str	r3, [sp, #80]	; 0x50
   819b0:	464e      	mov	r6, r9
   819b2:	3608      	adds	r6, #8
   819b4:	e741      	b.n	8183a <_vfiprintf_r+0x7aa>
   819b6:	9d04      	ldr	r5, [sp, #16]
   819b8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   819bc:	ebcb 0405 	rsb	r4, fp, r5
   819c0:	2c00      	cmp	r4, #0
   819c2:	f77f aef7 	ble.w	817b4 <_vfiprintf_r+0x724>
   819c6:	2c10      	cmp	r4, #16
   819c8:	4da6      	ldr	r5, [pc, #664]	; (81c64 <_vfiprintf_r+0xbd4>)
   819ca:	f340 8170 	ble.w	81cae <_vfiprintf_r+0xc1e>
   819ce:	4629      	mov	r1, r5
   819d0:	f04f 0b10 	mov.w	fp, #16
   819d4:	4625      	mov	r5, r4
   819d6:	4664      	mov	r4, ip
   819d8:	46b4      	mov	ip, r6
   819da:	460e      	mov	r6, r1
   819dc:	e006      	b.n	819ec <_vfiprintf_r+0x95c>
   819de:	1c98      	adds	r0, r3, #2
   819e0:	f10c 0c08 	add.w	ip, ip, #8
   819e4:	460b      	mov	r3, r1
   819e6:	3d10      	subs	r5, #16
   819e8:	2d10      	cmp	r5, #16
   819ea:	dd0f      	ble.n	81a0c <_vfiprintf_r+0x97c>
   819ec:	1c59      	adds	r1, r3, #1
   819ee:	3210      	adds	r2, #16
   819f0:	2907      	cmp	r1, #7
   819f2:	9215      	str	r2, [sp, #84]	; 0x54
   819f4:	e88c 0840 	stmia.w	ip, {r6, fp}
   819f8:	9114      	str	r1, [sp, #80]	; 0x50
   819fa:	ddf0      	ble.n	819de <_vfiprintf_r+0x94e>
   819fc:	b9ba      	cbnz	r2, 81a2e <_vfiprintf_r+0x99e>
   819fe:	3d10      	subs	r5, #16
   81a00:	2d10      	cmp	r5, #16
   81a02:	f04f 0001 	mov.w	r0, #1
   81a06:	4613      	mov	r3, r2
   81a08:	46cc      	mov	ip, r9
   81a0a:	dcef      	bgt.n	819ec <_vfiprintf_r+0x95c>
   81a0c:	4633      	mov	r3, r6
   81a0e:	4666      	mov	r6, ip
   81a10:	46a4      	mov	ip, r4
   81a12:	462c      	mov	r4, r5
   81a14:	461d      	mov	r5, r3
   81a16:	4422      	add	r2, r4
   81a18:	2807      	cmp	r0, #7
   81a1a:	9215      	str	r2, [sp, #84]	; 0x54
   81a1c:	6035      	str	r5, [r6, #0]
   81a1e:	6074      	str	r4, [r6, #4]
   81a20:	9014      	str	r0, [sp, #80]	; 0x50
   81a22:	f300 80af 	bgt.w	81b84 <_vfiprintf_r+0xaf4>
   81a26:	3608      	adds	r6, #8
   81a28:	1c41      	adds	r1, r0, #1
   81a2a:	4603      	mov	r3, r0
   81a2c:	e6c2      	b.n	817b4 <_vfiprintf_r+0x724>
   81a2e:	9806      	ldr	r0, [sp, #24]
   81a30:	9902      	ldr	r1, [sp, #8]
   81a32:	aa13      	add	r2, sp, #76	; 0x4c
   81a34:	f7ff faf0 	bl	81018 <__sprint_r.part.0>
   81a38:	2800      	cmp	r0, #0
   81a3a:	f47f af7c 	bne.w	81936 <_vfiprintf_r+0x8a6>
   81a3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81a40:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81a42:	1c58      	adds	r0, r3, #1
   81a44:	46cc      	mov	ip, r9
   81a46:	e7ce      	b.n	819e6 <_vfiprintf_r+0x956>
   81a48:	2a00      	cmp	r2, #0
   81a4a:	d179      	bne.n	81b40 <_vfiprintf_r+0xab0>
   81a4c:	4619      	mov	r1, r3
   81a4e:	464e      	mov	r6, r9
   81a50:	4613      	mov	r3, r2
   81a52:	e69c      	b.n	8178e <_vfiprintf_r+0x6fe>
   81a54:	2a00      	cmp	r2, #0
   81a56:	f040 8084 	bne.w	81b62 <_vfiprintf_r+0xad2>
   81a5a:	2101      	movs	r1, #1
   81a5c:	4613      	mov	r3, r2
   81a5e:	464e      	mov	r6, r9
   81a60:	e6a4      	b.n	817ac <_vfiprintf_r+0x71c>
   81a62:	464f      	mov	r7, r9
   81a64:	e448      	b.n	812f8 <_vfiprintf_r+0x268>
   81a66:	2d00      	cmp	r5, #0
   81a68:	bf08      	it	eq
   81a6a:	2c0a      	cmpeq	r4, #10
   81a6c:	d246      	bcs.n	81afc <_vfiprintf_r+0xa6c>
   81a6e:	3430      	adds	r4, #48	; 0x30
   81a70:	af30      	add	r7, sp, #192	; 0xc0
   81a72:	f807 4d41 	strb.w	r4, [r7, #-65]!
   81a76:	ebc7 0309 	rsb	r3, r7, r9
   81a7a:	9305      	str	r3, [sp, #20]
   81a7c:	e43c      	b.n	812f8 <_vfiprintf_r+0x268>
   81a7e:	2302      	movs	r3, #2
   81a80:	e417      	b.n	812b2 <_vfiprintf_r+0x222>
   81a82:	2a00      	cmp	r2, #0
   81a84:	f040 80af 	bne.w	81be6 <_vfiprintf_r+0xb56>
   81a88:	4613      	mov	r3, r2
   81a8a:	2101      	movs	r1, #1
   81a8c:	464e      	mov	r6, r9
   81a8e:	e66d      	b.n	8176c <_vfiprintf_r+0x6dc>
   81a90:	4644      	mov	r4, r8
   81a92:	f7ff bb58 	b.w	81146 <_vfiprintf_r+0xb6>
   81a96:	9806      	ldr	r0, [sp, #24]
   81a98:	9902      	ldr	r1, [sp, #8]
   81a9a:	aa13      	add	r2, sp, #76	; 0x4c
   81a9c:	f7ff fabc 	bl	81018 <__sprint_r.part.0>
   81aa0:	2800      	cmp	r0, #0
   81aa2:	f47f af48 	bne.w	81936 <_vfiprintf_r+0x8a6>
   81aa6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81aa8:	464e      	mov	r6, r9
   81aaa:	e6c6      	b.n	8183a <_vfiprintf_r+0x7aa>
   81aac:	9d08      	ldr	r5, [sp, #32]
   81aae:	682c      	ldr	r4, [r5, #0]
   81ab0:	3504      	adds	r5, #4
   81ab2:	9508      	str	r5, [sp, #32]
   81ab4:	2500      	movs	r5, #0
   81ab6:	f7ff bbfc 	b.w	812b2 <_vfiprintf_r+0x222>
   81aba:	9d08      	ldr	r5, [sp, #32]
   81abc:	2301      	movs	r3, #1
   81abe:	682c      	ldr	r4, [r5, #0]
   81ac0:	3504      	adds	r5, #4
   81ac2:	9508      	str	r5, [sp, #32]
   81ac4:	2500      	movs	r5, #0
   81ac6:	f7ff bbf4 	b.w	812b2 <_vfiprintf_r+0x222>
   81aca:	9d08      	ldr	r5, [sp, #32]
   81acc:	682c      	ldr	r4, [r5, #0]
   81ace:	3504      	adds	r5, #4
   81ad0:	9508      	str	r5, [sp, #32]
   81ad2:	2500      	movs	r5, #0
   81ad4:	e525      	b.n	81522 <_vfiprintf_r+0x492>
   81ad6:	9d08      	ldr	r5, [sp, #32]
   81ad8:	682c      	ldr	r4, [r5, #0]
   81ada:	3504      	adds	r5, #4
   81adc:	9508      	str	r5, [sp, #32]
   81ade:	17e5      	asrs	r5, r4, #31
   81ae0:	4622      	mov	r2, r4
   81ae2:	462b      	mov	r3, r5
   81ae4:	e48e      	b.n	81404 <_vfiprintf_r+0x374>
   81ae6:	9806      	ldr	r0, [sp, #24]
   81ae8:	9902      	ldr	r1, [sp, #8]
   81aea:	aa13      	add	r2, sp, #76	; 0x4c
   81aec:	f7ff fa94 	bl	81018 <__sprint_r.part.0>
   81af0:	2800      	cmp	r0, #0
   81af2:	f47f af20 	bne.w	81936 <_vfiprintf_r+0x8a6>
   81af6:	464e      	mov	r6, r9
   81af8:	f7ff bb9a 	b.w	81230 <_vfiprintf_r+0x1a0>
   81afc:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   81b00:	9603      	str	r6, [sp, #12]
   81b02:	465e      	mov	r6, fp
   81b04:	46e3      	mov	fp, ip
   81b06:	4620      	mov	r0, r4
   81b08:	4629      	mov	r1, r5
   81b0a:	220a      	movs	r2, #10
   81b0c:	2300      	movs	r3, #0
   81b0e:	f001 fe5f 	bl	837d0 <__aeabi_uldivmod>
   81b12:	3230      	adds	r2, #48	; 0x30
   81b14:	7032      	strb	r2, [r6, #0]
   81b16:	4620      	mov	r0, r4
   81b18:	4629      	mov	r1, r5
   81b1a:	220a      	movs	r2, #10
   81b1c:	2300      	movs	r3, #0
   81b1e:	f001 fe57 	bl	837d0 <__aeabi_uldivmod>
   81b22:	4604      	mov	r4, r0
   81b24:	460d      	mov	r5, r1
   81b26:	ea54 0005 	orrs.w	r0, r4, r5
   81b2a:	4637      	mov	r7, r6
   81b2c:	f106 36ff 	add.w	r6, r6, #4294967295
   81b30:	d1e9      	bne.n	81b06 <_vfiprintf_r+0xa76>
   81b32:	ebc7 0309 	rsb	r3, r7, r9
   81b36:	46dc      	mov	ip, fp
   81b38:	9e03      	ldr	r6, [sp, #12]
   81b3a:	9305      	str	r3, [sp, #20]
   81b3c:	f7ff bbdc 	b.w	812f8 <_vfiprintf_r+0x268>
   81b40:	9806      	ldr	r0, [sp, #24]
   81b42:	9902      	ldr	r1, [sp, #8]
   81b44:	aa13      	add	r2, sp, #76	; 0x4c
   81b46:	f8cd c004 	str.w	ip, [sp, #4]
   81b4a:	f7ff fa65 	bl	81018 <__sprint_r.part.0>
   81b4e:	f8dd c004 	ldr.w	ip, [sp, #4]
   81b52:	2800      	cmp	r0, #0
   81b54:	f47f aeef 	bne.w	81936 <_vfiprintf_r+0x8a6>
   81b58:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81b5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b5c:	1c59      	adds	r1, r3, #1
   81b5e:	464e      	mov	r6, r9
   81b60:	e615      	b.n	8178e <_vfiprintf_r+0x6fe>
   81b62:	9806      	ldr	r0, [sp, #24]
   81b64:	9902      	ldr	r1, [sp, #8]
   81b66:	aa13      	add	r2, sp, #76	; 0x4c
   81b68:	f8cd c004 	str.w	ip, [sp, #4]
   81b6c:	f7ff fa54 	bl	81018 <__sprint_r.part.0>
   81b70:	f8dd c004 	ldr.w	ip, [sp, #4]
   81b74:	2800      	cmp	r0, #0
   81b76:	f47f aede 	bne.w	81936 <_vfiprintf_r+0x8a6>
   81b7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81b7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b7e:	1c59      	adds	r1, r3, #1
   81b80:	464e      	mov	r6, r9
   81b82:	e613      	b.n	817ac <_vfiprintf_r+0x71c>
   81b84:	2a00      	cmp	r2, #0
   81b86:	d156      	bne.n	81c36 <_vfiprintf_r+0xba6>
   81b88:	2101      	movs	r1, #1
   81b8a:	4613      	mov	r3, r2
   81b8c:	464e      	mov	r6, r9
   81b8e:	e611      	b.n	817b4 <_vfiprintf_r+0x724>
   81b90:	9806      	ldr	r0, [sp, #24]
   81b92:	9902      	ldr	r1, [sp, #8]
   81b94:	aa13      	add	r2, sp, #76	; 0x4c
   81b96:	f7ff fa3f 	bl	81018 <__sprint_r.part.0>
   81b9a:	2800      	cmp	r0, #0
   81b9c:	f47f aecb 	bne.w	81936 <_vfiprintf_r+0x8a6>
   81ba0:	9914      	ldr	r1, [sp, #80]	; 0x50
   81ba2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81ba4:	3101      	adds	r1, #1
   81ba6:	464e      	mov	r6, r9
   81ba8:	e639      	b.n	8181e <_vfiprintf_r+0x78e>
   81baa:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   81bae:	4264      	negs	r4, r4
   81bb0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   81bb4:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81bb8:	f8cd b01c 	str.w	fp, [sp, #28]
   81bbc:	f8cd c014 	str.w	ip, [sp, #20]
   81bc0:	2301      	movs	r3, #1
   81bc2:	f7ff bb7e 	b.w	812c2 <_vfiprintf_r+0x232>
   81bc6:	f01a 0f10 	tst.w	sl, #16
   81bca:	d11d      	bne.n	81c08 <_vfiprintf_r+0xb78>
   81bcc:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81bd0:	d058      	beq.n	81c84 <_vfiprintf_r+0xbf4>
   81bd2:	9d08      	ldr	r5, [sp, #32]
   81bd4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   81bd8:	682b      	ldr	r3, [r5, #0]
   81bda:	3504      	adds	r5, #4
   81bdc:	9508      	str	r5, [sp, #32]
   81bde:	f8a3 b000 	strh.w	fp, [r3]
   81be2:	f7ff ba88 	b.w	810f6 <_vfiprintf_r+0x66>
   81be6:	9806      	ldr	r0, [sp, #24]
   81be8:	9902      	ldr	r1, [sp, #8]
   81bea:	aa13      	add	r2, sp, #76	; 0x4c
   81bec:	f8cd c004 	str.w	ip, [sp, #4]
   81bf0:	f7ff fa12 	bl	81018 <__sprint_r.part.0>
   81bf4:	f8dd c004 	ldr.w	ip, [sp, #4]
   81bf8:	2800      	cmp	r0, #0
   81bfa:	f47f ae9c 	bne.w	81936 <_vfiprintf_r+0x8a6>
   81bfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81c00:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81c02:	1c59      	adds	r1, r3, #1
   81c04:	464e      	mov	r6, r9
   81c06:	e5b1      	b.n	8176c <_vfiprintf_r+0x6dc>
   81c08:	f8dd b020 	ldr.w	fp, [sp, #32]
   81c0c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81c0e:	f8db 3000 	ldr.w	r3, [fp]
   81c12:	f10b 0b04 	add.w	fp, fp, #4
   81c16:	f8cd b020 	str.w	fp, [sp, #32]
   81c1a:	601c      	str	r4, [r3, #0]
   81c1c:	f7ff ba6b 	b.w	810f6 <_vfiprintf_r+0x66>
   81c20:	9408      	str	r4, [sp, #32]
   81c22:	f001 fc0b 	bl	8343c <strlen>
   81c26:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   81c2a:	9005      	str	r0, [sp, #20]
   81c2c:	9407      	str	r4, [sp, #28]
   81c2e:	f04f 0c00 	mov.w	ip, #0
   81c32:	f7ff bb61 	b.w	812f8 <_vfiprintf_r+0x268>
   81c36:	9806      	ldr	r0, [sp, #24]
   81c38:	9902      	ldr	r1, [sp, #8]
   81c3a:	aa13      	add	r2, sp, #76	; 0x4c
   81c3c:	f8cd c004 	str.w	ip, [sp, #4]
   81c40:	f7ff f9ea 	bl	81018 <__sprint_r.part.0>
   81c44:	f8dd c004 	ldr.w	ip, [sp, #4]
   81c48:	2800      	cmp	r0, #0
   81c4a:	f47f ae74 	bne.w	81936 <_vfiprintf_r+0x8a6>
   81c4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81c50:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81c52:	1c59      	adds	r1, r3, #1
   81c54:	464e      	mov	r6, r9
   81c56:	e5ad      	b.n	817b4 <_vfiprintf_r+0x724>
   81c58:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81c5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81c5c:	3301      	adds	r3, #1
   81c5e:	4d02      	ldr	r5, [pc, #8]	; (81c68 <_vfiprintf_r+0xbd8>)
   81c60:	f7ff bb9a 	b.w	81398 <_vfiprintf_r+0x308>
   81c64:	00083e2c 	.word	0x00083e2c
   81c68:	00083e3c 	.word	0x00083e3c
   81c6c:	f1bc 0f06 	cmp.w	ip, #6
   81c70:	bf34      	ite	cc
   81c72:	4663      	movcc	r3, ip
   81c74:	2306      	movcs	r3, #6
   81c76:	9408      	str	r4, [sp, #32]
   81c78:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   81c7c:	9305      	str	r3, [sp, #20]
   81c7e:	9403      	str	r4, [sp, #12]
   81c80:	4f16      	ldr	r7, [pc, #88]	; (81cdc <_vfiprintf_r+0xc4c>)
   81c82:	e472      	b.n	8156a <_vfiprintf_r+0x4da>
   81c84:	9c08      	ldr	r4, [sp, #32]
   81c86:	9d09      	ldr	r5, [sp, #36]	; 0x24
   81c88:	6823      	ldr	r3, [r4, #0]
   81c8a:	3404      	adds	r4, #4
   81c8c:	9408      	str	r4, [sp, #32]
   81c8e:	601d      	str	r5, [r3, #0]
   81c90:	f7ff ba31 	b.w	810f6 <_vfiprintf_r+0x66>
   81c94:	9814      	ldr	r0, [sp, #80]	; 0x50
   81c96:	4d12      	ldr	r5, [pc, #72]	; (81ce0 <_vfiprintf_r+0xc50>)
   81c98:	3001      	adds	r0, #1
   81c9a:	e5fc      	b.n	81896 <_vfiprintf_r+0x806>
   81c9c:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81ca0:	f8cd c014 	str.w	ip, [sp, #20]
   81ca4:	9507      	str	r5, [sp, #28]
   81ca6:	9408      	str	r4, [sp, #32]
   81ca8:	4684      	mov	ip, r0
   81caa:	f7ff bb25 	b.w	812f8 <_vfiprintf_r+0x268>
   81cae:	4608      	mov	r0, r1
   81cb0:	e6b1      	b.n	81a16 <_vfiprintf_r+0x986>
   81cb2:	46a0      	mov	r8, r4
   81cb4:	2500      	movs	r5, #0
   81cb6:	f7ff ba5a 	b.w	8116e <_vfiprintf_r+0xde>
   81cba:	f8dd b020 	ldr.w	fp, [sp, #32]
   81cbe:	f898 3001 	ldrb.w	r3, [r8, #1]
   81cc2:	f8db 5000 	ldr.w	r5, [fp]
   81cc6:	f10b 0204 	add.w	r2, fp, #4
   81cca:	2d00      	cmp	r5, #0
   81ccc:	9208      	str	r2, [sp, #32]
   81cce:	46a0      	mov	r8, r4
   81cd0:	f6bf aa4b 	bge.w	8116a <_vfiprintf_r+0xda>
   81cd4:	f04f 35ff 	mov.w	r5, #4294967295
   81cd8:	f7ff ba47 	b.w	8116a <_vfiprintf_r+0xda>
   81cdc:	00083e24 	.word	0x00083e24
   81ce0:	00083e3c 	.word	0x00083e3c

00081ce4 <__sbprintf>:
   81ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81ce8:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   81cea:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   81cee:	4688      	mov	r8, r1
   81cf0:	9719      	str	r7, [sp, #100]	; 0x64
   81cf2:	f8d8 701c 	ldr.w	r7, [r8, #28]
   81cf6:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   81cfa:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   81cfe:	9707      	str	r7, [sp, #28]
   81d00:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   81d04:	ac1a      	add	r4, sp, #104	; 0x68
   81d06:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81d0a:	f02a 0a02 	bic.w	sl, sl, #2
   81d0e:	2600      	movs	r6, #0
   81d10:	4669      	mov	r1, sp
   81d12:	9400      	str	r4, [sp, #0]
   81d14:	9404      	str	r4, [sp, #16]
   81d16:	9502      	str	r5, [sp, #8]
   81d18:	9505      	str	r5, [sp, #20]
   81d1a:	f8ad a00c 	strh.w	sl, [sp, #12]
   81d1e:	f8ad 900e 	strh.w	r9, [sp, #14]
   81d22:	9709      	str	r7, [sp, #36]	; 0x24
   81d24:	9606      	str	r6, [sp, #24]
   81d26:	4605      	mov	r5, r0
   81d28:	f7ff f9b2 	bl	81090 <_vfiprintf_r>
   81d2c:	1e04      	subs	r4, r0, #0
   81d2e:	db07      	blt.n	81d40 <__sbprintf+0x5c>
   81d30:	4628      	mov	r0, r5
   81d32:	4669      	mov	r1, sp
   81d34:	f000 f92a 	bl	81f8c <_fflush_r>
   81d38:	42b0      	cmp	r0, r6
   81d3a:	bf18      	it	ne
   81d3c:	f04f 34ff 	movne.w	r4, #4294967295
   81d40:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81d44:	065b      	lsls	r3, r3, #25
   81d46:	d505      	bpl.n	81d54 <__sbprintf+0x70>
   81d48:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81d50:	f8a8 300c 	strh.w	r3, [r8, #12]
   81d54:	4620      	mov	r0, r4
   81d56:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   81d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81d5e:	bf00      	nop

00081d60 <__swsetup_r>:
   81d60:	4b2f      	ldr	r3, [pc, #188]	; (81e20 <__swsetup_r+0xc0>)
   81d62:	b570      	push	{r4, r5, r6, lr}
   81d64:	4606      	mov	r6, r0
   81d66:	6818      	ldr	r0, [r3, #0]
   81d68:	460c      	mov	r4, r1
   81d6a:	b110      	cbz	r0, 81d72 <__swsetup_r+0x12>
   81d6c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   81d6e:	2a00      	cmp	r2, #0
   81d70:	d036      	beq.n	81de0 <__swsetup_r+0x80>
   81d72:	89a5      	ldrh	r5, [r4, #12]
   81d74:	b2ab      	uxth	r3, r5
   81d76:	0719      	lsls	r1, r3, #28
   81d78:	d50c      	bpl.n	81d94 <__swsetup_r+0x34>
   81d7a:	6922      	ldr	r2, [r4, #16]
   81d7c:	b1aa      	cbz	r2, 81daa <__swsetup_r+0x4a>
   81d7e:	f013 0101 	ands.w	r1, r3, #1
   81d82:	d01e      	beq.n	81dc2 <__swsetup_r+0x62>
   81d84:	6963      	ldr	r3, [r4, #20]
   81d86:	2100      	movs	r1, #0
   81d88:	425b      	negs	r3, r3
   81d8a:	61a3      	str	r3, [r4, #24]
   81d8c:	60a1      	str	r1, [r4, #8]
   81d8e:	b1f2      	cbz	r2, 81dce <__swsetup_r+0x6e>
   81d90:	2000      	movs	r0, #0
   81d92:	bd70      	pop	{r4, r5, r6, pc}
   81d94:	06da      	lsls	r2, r3, #27
   81d96:	d53a      	bpl.n	81e0e <__swsetup_r+0xae>
   81d98:	075b      	lsls	r3, r3, #29
   81d9a:	d424      	bmi.n	81de6 <__swsetup_r+0x86>
   81d9c:	6922      	ldr	r2, [r4, #16]
   81d9e:	f045 0308 	orr.w	r3, r5, #8
   81da2:	81a3      	strh	r3, [r4, #12]
   81da4:	b29b      	uxth	r3, r3
   81da6:	2a00      	cmp	r2, #0
   81da8:	d1e9      	bne.n	81d7e <__swsetup_r+0x1e>
   81daa:	f403 7120 	and.w	r1, r3, #640	; 0x280
   81dae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   81db2:	d0e4      	beq.n	81d7e <__swsetup_r+0x1e>
   81db4:	4630      	mov	r0, r6
   81db6:	4621      	mov	r1, r4
   81db8:	f000 fcce 	bl	82758 <__smakebuf_r>
   81dbc:	89a3      	ldrh	r3, [r4, #12]
   81dbe:	6922      	ldr	r2, [r4, #16]
   81dc0:	e7dd      	b.n	81d7e <__swsetup_r+0x1e>
   81dc2:	0798      	lsls	r0, r3, #30
   81dc4:	bf58      	it	pl
   81dc6:	6961      	ldrpl	r1, [r4, #20]
   81dc8:	60a1      	str	r1, [r4, #8]
   81dca:	2a00      	cmp	r2, #0
   81dcc:	d1e0      	bne.n	81d90 <__swsetup_r+0x30>
   81dce:	89a3      	ldrh	r3, [r4, #12]
   81dd0:	061a      	lsls	r2, r3, #24
   81dd2:	d5dd      	bpl.n	81d90 <__swsetup_r+0x30>
   81dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81dd8:	81a3      	strh	r3, [r4, #12]
   81dda:	f04f 30ff 	mov.w	r0, #4294967295
   81dde:	bd70      	pop	{r4, r5, r6, pc}
   81de0:	f000 f8f0 	bl	81fc4 <__sinit>
   81de4:	e7c5      	b.n	81d72 <__swsetup_r+0x12>
   81de6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81de8:	b149      	cbz	r1, 81dfe <__swsetup_r+0x9e>
   81dea:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81dee:	4299      	cmp	r1, r3
   81df0:	d003      	beq.n	81dfa <__swsetup_r+0x9a>
   81df2:	4630      	mov	r0, r6
   81df4:	f000 fa2a 	bl	8224c <_free_r>
   81df8:	89a5      	ldrh	r5, [r4, #12]
   81dfa:	2300      	movs	r3, #0
   81dfc:	6323      	str	r3, [r4, #48]	; 0x30
   81dfe:	6922      	ldr	r2, [r4, #16]
   81e00:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   81e04:	2100      	movs	r1, #0
   81e06:	b2ad      	uxth	r5, r5
   81e08:	6022      	str	r2, [r4, #0]
   81e0a:	6061      	str	r1, [r4, #4]
   81e0c:	e7c7      	b.n	81d9e <__swsetup_r+0x3e>
   81e0e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   81e12:	2309      	movs	r3, #9
   81e14:	6033      	str	r3, [r6, #0]
   81e16:	f04f 30ff 	mov.w	r0, #4294967295
   81e1a:	81a5      	strh	r5, [r4, #12]
   81e1c:	bd70      	pop	{r4, r5, r6, pc}
   81e1e:	bf00      	nop
   81e20:	20070560 	.word	0x20070560

00081e24 <register_fini>:
   81e24:	4b02      	ldr	r3, [pc, #8]	; (81e30 <register_fini+0xc>)
   81e26:	b113      	cbz	r3, 81e2e <register_fini+0xa>
   81e28:	4802      	ldr	r0, [pc, #8]	; (81e34 <register_fini+0x10>)
   81e2a:	f000 b805 	b.w	81e38 <atexit>
   81e2e:	4770      	bx	lr
   81e30:	00000000 	.word	0x00000000
   81e34:	000820c1 	.word	0x000820c1

00081e38 <atexit>:
   81e38:	4601      	mov	r1, r0
   81e3a:	2000      	movs	r0, #0
   81e3c:	4602      	mov	r2, r0
   81e3e:	4603      	mov	r3, r0
   81e40:	f001 bbca 	b.w	835d8 <__register_exitproc>

00081e44 <__sflush_r>:
   81e44:	898b      	ldrh	r3, [r1, #12]
   81e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81e4a:	b29a      	uxth	r2, r3
   81e4c:	460d      	mov	r5, r1
   81e4e:	0711      	lsls	r1, r2, #28
   81e50:	4680      	mov	r8, r0
   81e52:	d43c      	bmi.n	81ece <__sflush_r+0x8a>
   81e54:	686a      	ldr	r2, [r5, #4]
   81e56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81e5a:	2a00      	cmp	r2, #0
   81e5c:	81ab      	strh	r3, [r5, #12]
   81e5e:	dd59      	ble.n	81f14 <__sflush_r+0xd0>
   81e60:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81e62:	2c00      	cmp	r4, #0
   81e64:	d04b      	beq.n	81efe <__sflush_r+0xba>
   81e66:	b29b      	uxth	r3, r3
   81e68:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   81e6c:	2100      	movs	r1, #0
   81e6e:	b292      	uxth	r2, r2
   81e70:	f8d8 6000 	ldr.w	r6, [r8]
   81e74:	f8c8 1000 	str.w	r1, [r8]
   81e78:	2a00      	cmp	r2, #0
   81e7a:	d04f      	beq.n	81f1c <__sflush_r+0xd8>
   81e7c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81e7e:	075f      	lsls	r7, r3, #29
   81e80:	d505      	bpl.n	81e8e <__sflush_r+0x4a>
   81e82:	6869      	ldr	r1, [r5, #4]
   81e84:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   81e86:	1a52      	subs	r2, r2, r1
   81e88:	b10b      	cbz	r3, 81e8e <__sflush_r+0x4a>
   81e8a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81e8c:	1ad2      	subs	r2, r2, r3
   81e8e:	4640      	mov	r0, r8
   81e90:	69e9      	ldr	r1, [r5, #28]
   81e92:	2300      	movs	r3, #0
   81e94:	47a0      	blx	r4
   81e96:	1c44      	adds	r4, r0, #1
   81e98:	d04a      	beq.n	81f30 <__sflush_r+0xec>
   81e9a:	89ab      	ldrh	r3, [r5, #12]
   81e9c:	692a      	ldr	r2, [r5, #16]
   81e9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81ea2:	b29b      	uxth	r3, r3
   81ea4:	2100      	movs	r1, #0
   81ea6:	602a      	str	r2, [r5, #0]
   81ea8:	04da      	lsls	r2, r3, #19
   81eaa:	81ab      	strh	r3, [r5, #12]
   81eac:	6069      	str	r1, [r5, #4]
   81eae:	d44c      	bmi.n	81f4a <__sflush_r+0x106>
   81eb0:	6b29      	ldr	r1, [r5, #48]	; 0x30
   81eb2:	f8c8 6000 	str.w	r6, [r8]
   81eb6:	b311      	cbz	r1, 81efe <__sflush_r+0xba>
   81eb8:	f105 0340 	add.w	r3, r5, #64	; 0x40
   81ebc:	4299      	cmp	r1, r3
   81ebe:	d002      	beq.n	81ec6 <__sflush_r+0x82>
   81ec0:	4640      	mov	r0, r8
   81ec2:	f000 f9c3 	bl	8224c <_free_r>
   81ec6:	2000      	movs	r0, #0
   81ec8:	6328      	str	r0, [r5, #48]	; 0x30
   81eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81ece:	692e      	ldr	r6, [r5, #16]
   81ed0:	b1ae      	cbz	r6, 81efe <__sflush_r+0xba>
   81ed2:	0791      	lsls	r1, r2, #30
   81ed4:	682c      	ldr	r4, [r5, #0]
   81ed6:	bf0c      	ite	eq
   81ed8:	696b      	ldreq	r3, [r5, #20]
   81eda:	2300      	movne	r3, #0
   81edc:	602e      	str	r6, [r5, #0]
   81ede:	1ba4      	subs	r4, r4, r6
   81ee0:	60ab      	str	r3, [r5, #8]
   81ee2:	e00a      	b.n	81efa <__sflush_r+0xb6>
   81ee4:	4632      	mov	r2, r6
   81ee6:	4623      	mov	r3, r4
   81ee8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   81eea:	4640      	mov	r0, r8
   81eec:	69e9      	ldr	r1, [r5, #28]
   81eee:	47b8      	blx	r7
   81ef0:	2800      	cmp	r0, #0
   81ef2:	ebc0 0404 	rsb	r4, r0, r4
   81ef6:	4406      	add	r6, r0
   81ef8:	dd04      	ble.n	81f04 <__sflush_r+0xc0>
   81efa:	2c00      	cmp	r4, #0
   81efc:	dcf2      	bgt.n	81ee4 <__sflush_r+0xa0>
   81efe:	2000      	movs	r0, #0
   81f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f04:	89ab      	ldrh	r3, [r5, #12]
   81f06:	f04f 30ff 	mov.w	r0, #4294967295
   81f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f0e:	81ab      	strh	r3, [r5, #12]
   81f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f14:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   81f16:	2a00      	cmp	r2, #0
   81f18:	dca2      	bgt.n	81e60 <__sflush_r+0x1c>
   81f1a:	e7f0      	b.n	81efe <__sflush_r+0xba>
   81f1c:	2301      	movs	r3, #1
   81f1e:	4640      	mov	r0, r8
   81f20:	69e9      	ldr	r1, [r5, #28]
   81f22:	47a0      	blx	r4
   81f24:	1c43      	adds	r3, r0, #1
   81f26:	4602      	mov	r2, r0
   81f28:	d01e      	beq.n	81f68 <__sflush_r+0x124>
   81f2a:	89ab      	ldrh	r3, [r5, #12]
   81f2c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81f2e:	e7a6      	b.n	81e7e <__sflush_r+0x3a>
   81f30:	f8d8 3000 	ldr.w	r3, [r8]
   81f34:	b95b      	cbnz	r3, 81f4e <__sflush_r+0x10a>
   81f36:	89aa      	ldrh	r2, [r5, #12]
   81f38:	6929      	ldr	r1, [r5, #16]
   81f3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   81f3e:	b292      	uxth	r2, r2
   81f40:	606b      	str	r3, [r5, #4]
   81f42:	04d3      	lsls	r3, r2, #19
   81f44:	81aa      	strh	r2, [r5, #12]
   81f46:	6029      	str	r1, [r5, #0]
   81f48:	d5b2      	bpl.n	81eb0 <__sflush_r+0x6c>
   81f4a:	6528      	str	r0, [r5, #80]	; 0x50
   81f4c:	e7b0      	b.n	81eb0 <__sflush_r+0x6c>
   81f4e:	2b1d      	cmp	r3, #29
   81f50:	d001      	beq.n	81f56 <__sflush_r+0x112>
   81f52:	2b16      	cmp	r3, #22
   81f54:	d113      	bne.n	81f7e <__sflush_r+0x13a>
   81f56:	89a9      	ldrh	r1, [r5, #12]
   81f58:	692b      	ldr	r3, [r5, #16]
   81f5a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   81f5e:	2200      	movs	r2, #0
   81f60:	81a9      	strh	r1, [r5, #12]
   81f62:	602b      	str	r3, [r5, #0]
   81f64:	606a      	str	r2, [r5, #4]
   81f66:	e7a3      	b.n	81eb0 <__sflush_r+0x6c>
   81f68:	f8d8 3000 	ldr.w	r3, [r8]
   81f6c:	2b00      	cmp	r3, #0
   81f6e:	d0dc      	beq.n	81f2a <__sflush_r+0xe6>
   81f70:	2b1d      	cmp	r3, #29
   81f72:	d001      	beq.n	81f78 <__sflush_r+0x134>
   81f74:	2b16      	cmp	r3, #22
   81f76:	d1c5      	bne.n	81f04 <__sflush_r+0xc0>
   81f78:	f8c8 6000 	str.w	r6, [r8]
   81f7c:	e7bf      	b.n	81efe <__sflush_r+0xba>
   81f7e:	89ab      	ldrh	r3, [r5, #12]
   81f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f84:	81ab      	strh	r3, [r5, #12]
   81f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f8a:	bf00      	nop

00081f8c <_fflush_r>:
   81f8c:	b510      	push	{r4, lr}
   81f8e:	4604      	mov	r4, r0
   81f90:	b082      	sub	sp, #8
   81f92:	b108      	cbz	r0, 81f98 <_fflush_r+0xc>
   81f94:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81f96:	b153      	cbz	r3, 81fae <_fflush_r+0x22>
   81f98:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   81f9c:	b908      	cbnz	r0, 81fa2 <_fflush_r+0x16>
   81f9e:	b002      	add	sp, #8
   81fa0:	bd10      	pop	{r4, pc}
   81fa2:	4620      	mov	r0, r4
   81fa4:	b002      	add	sp, #8
   81fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81faa:	f7ff bf4b 	b.w	81e44 <__sflush_r>
   81fae:	9101      	str	r1, [sp, #4]
   81fb0:	f000 f808 	bl	81fc4 <__sinit>
   81fb4:	9901      	ldr	r1, [sp, #4]
   81fb6:	e7ef      	b.n	81f98 <_fflush_r+0xc>

00081fb8 <_cleanup_r>:
   81fb8:	4901      	ldr	r1, [pc, #4]	; (81fc0 <_cleanup_r+0x8>)
   81fba:	f000 bb9f 	b.w	826fc <_fwalk>
   81fbe:	bf00      	nop
   81fc0:	00083725 	.word	0x00083725

00081fc4 <__sinit>:
   81fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81fc8:	6b84      	ldr	r4, [r0, #56]	; 0x38
   81fca:	b083      	sub	sp, #12
   81fcc:	4607      	mov	r7, r0
   81fce:	2c00      	cmp	r4, #0
   81fd0:	d165      	bne.n	8209e <__sinit+0xda>
   81fd2:	687d      	ldr	r5, [r7, #4]
   81fd4:	4833      	ldr	r0, [pc, #204]	; (820a4 <__sinit+0xe0>)
   81fd6:	2304      	movs	r3, #4
   81fd8:	2103      	movs	r1, #3
   81fda:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   81fde:	63f8      	str	r0, [r7, #60]	; 0x3c
   81fe0:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   81fe4:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   81fe8:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   81fec:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   81ff0:	81ab      	strh	r3, [r5, #12]
   81ff2:	602c      	str	r4, [r5, #0]
   81ff4:	606c      	str	r4, [r5, #4]
   81ff6:	60ac      	str	r4, [r5, #8]
   81ff8:	666c      	str	r4, [r5, #100]	; 0x64
   81ffa:	81ec      	strh	r4, [r5, #14]
   81ffc:	612c      	str	r4, [r5, #16]
   81ffe:	616c      	str	r4, [r5, #20]
   82000:	61ac      	str	r4, [r5, #24]
   82002:	4621      	mov	r1, r4
   82004:	2208      	movs	r2, #8
   82006:	f7fe ff35 	bl	80e74 <memset>
   8200a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 820a8 <__sinit+0xe4>
   8200e:	68be      	ldr	r6, [r7, #8]
   82010:	f8df a098 	ldr.w	sl, [pc, #152]	; 820ac <__sinit+0xe8>
   82014:	f8df 9098 	ldr.w	r9, [pc, #152]	; 820b0 <__sinit+0xec>
   82018:	f8df 8098 	ldr.w	r8, [pc, #152]	; 820b4 <__sinit+0xf0>
   8201c:	2301      	movs	r3, #1
   8201e:	2209      	movs	r2, #9
   82020:	61ed      	str	r5, [r5, #28]
   82022:	f8c5 b020 	str.w	fp, [r5, #32]
   82026:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8202a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8202e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82032:	4621      	mov	r1, r4
   82034:	81f3      	strh	r3, [r6, #14]
   82036:	81b2      	strh	r2, [r6, #12]
   82038:	6034      	str	r4, [r6, #0]
   8203a:	6074      	str	r4, [r6, #4]
   8203c:	60b4      	str	r4, [r6, #8]
   8203e:	6674      	str	r4, [r6, #100]	; 0x64
   82040:	6134      	str	r4, [r6, #16]
   82042:	6174      	str	r4, [r6, #20]
   82044:	61b4      	str	r4, [r6, #24]
   82046:	2208      	movs	r2, #8
   82048:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   8204c:	9301      	str	r3, [sp, #4]
   8204e:	f7fe ff11 	bl	80e74 <memset>
   82052:	68fd      	ldr	r5, [r7, #12]
   82054:	2012      	movs	r0, #18
   82056:	2202      	movs	r2, #2
   82058:	61f6      	str	r6, [r6, #28]
   8205a:	f8c6 b020 	str.w	fp, [r6, #32]
   8205e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   82062:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   82066:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   8206a:	4621      	mov	r1, r4
   8206c:	81a8      	strh	r0, [r5, #12]
   8206e:	81ea      	strh	r2, [r5, #14]
   82070:	602c      	str	r4, [r5, #0]
   82072:	606c      	str	r4, [r5, #4]
   82074:	60ac      	str	r4, [r5, #8]
   82076:	666c      	str	r4, [r5, #100]	; 0x64
   82078:	612c      	str	r4, [r5, #16]
   8207a:	616c      	str	r4, [r5, #20]
   8207c:	61ac      	str	r4, [r5, #24]
   8207e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82082:	2208      	movs	r2, #8
   82084:	f7fe fef6 	bl	80e74 <memset>
   82088:	9b01      	ldr	r3, [sp, #4]
   8208a:	61ed      	str	r5, [r5, #28]
   8208c:	f8c5 b020 	str.w	fp, [r5, #32]
   82090:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82094:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82098:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8209c:	63bb      	str	r3, [r7, #56]	; 0x38
   8209e:	b003      	add	sp, #12
   820a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   820a4:	00081fb9 	.word	0x00081fb9
   820a8:	000833b9 	.word	0x000833b9
   820ac:	000833dd 	.word	0x000833dd
   820b0:	00083415 	.word	0x00083415
   820b4:	00083435 	.word	0x00083435

000820b8 <__sfp_lock_acquire>:
   820b8:	4770      	bx	lr
   820ba:	bf00      	nop

000820bc <__sfp_lock_release>:
   820bc:	4770      	bx	lr
   820be:	bf00      	nop

000820c0 <__libc_fini_array>:
   820c0:	b538      	push	{r3, r4, r5, lr}
   820c2:	4d09      	ldr	r5, [pc, #36]	; (820e8 <__libc_fini_array+0x28>)
   820c4:	4c09      	ldr	r4, [pc, #36]	; (820ec <__libc_fini_array+0x2c>)
   820c6:	1b64      	subs	r4, r4, r5
   820c8:	10a4      	asrs	r4, r4, #2
   820ca:	bf18      	it	ne
   820cc:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   820d0:	d005      	beq.n	820de <__libc_fini_array+0x1e>
   820d2:	3c01      	subs	r4, #1
   820d4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   820d8:	4798      	blx	r3
   820da:	2c00      	cmp	r4, #0
   820dc:	d1f9      	bne.n	820d2 <__libc_fini_array+0x12>
   820de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   820e2:	f001 bebd 	b.w	83e60 <_fini>
   820e6:	bf00      	nop
   820e8:	00083e6c 	.word	0x00083e6c
   820ec:	00083e70 	.word	0x00083e70

000820f0 <_fputwc_r>:
   820f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   820f4:	8993      	ldrh	r3, [r2, #12]
   820f6:	460f      	mov	r7, r1
   820f8:	0499      	lsls	r1, r3, #18
   820fa:	b082      	sub	sp, #8
   820fc:	4614      	mov	r4, r2
   820fe:	4680      	mov	r8, r0
   82100:	d406      	bmi.n	82110 <_fputwc_r+0x20>
   82102:	6e52      	ldr	r2, [r2, #100]	; 0x64
   82104:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8210c:	81a3      	strh	r3, [r4, #12]
   8210e:	6662      	str	r2, [r4, #100]	; 0x64
   82110:	f000 fb1c 	bl	8274c <__locale_mb_cur_max>
   82114:	2801      	cmp	r0, #1
   82116:	d03e      	beq.n	82196 <_fputwc_r+0xa6>
   82118:	463a      	mov	r2, r7
   8211a:	4640      	mov	r0, r8
   8211c:	a901      	add	r1, sp, #4
   8211e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82122:	f001 fa0f 	bl	83544 <_wcrtomb_r>
   82126:	1c42      	adds	r2, r0, #1
   82128:	4606      	mov	r6, r0
   8212a:	d02d      	beq.n	82188 <_fputwc_r+0x98>
   8212c:	2800      	cmp	r0, #0
   8212e:	d03a      	beq.n	821a6 <_fputwc_r+0xb6>
   82130:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82134:	2500      	movs	r5, #0
   82136:	e009      	b.n	8214c <_fputwc_r+0x5c>
   82138:	6823      	ldr	r3, [r4, #0]
   8213a:	7019      	strb	r1, [r3, #0]
   8213c:	6823      	ldr	r3, [r4, #0]
   8213e:	3301      	adds	r3, #1
   82140:	6023      	str	r3, [r4, #0]
   82142:	3501      	adds	r5, #1
   82144:	42b5      	cmp	r5, r6
   82146:	d22e      	bcs.n	821a6 <_fputwc_r+0xb6>
   82148:	ab01      	add	r3, sp, #4
   8214a:	5ce9      	ldrb	r1, [r5, r3]
   8214c:	68a3      	ldr	r3, [r4, #8]
   8214e:	3b01      	subs	r3, #1
   82150:	2b00      	cmp	r3, #0
   82152:	60a3      	str	r3, [r4, #8]
   82154:	daf0      	bge.n	82138 <_fputwc_r+0x48>
   82156:	69a2      	ldr	r2, [r4, #24]
   82158:	4293      	cmp	r3, r2
   8215a:	db06      	blt.n	8216a <_fputwc_r+0x7a>
   8215c:	6823      	ldr	r3, [r4, #0]
   8215e:	7019      	strb	r1, [r3, #0]
   82160:	6823      	ldr	r3, [r4, #0]
   82162:	7819      	ldrb	r1, [r3, #0]
   82164:	3301      	adds	r3, #1
   82166:	290a      	cmp	r1, #10
   82168:	d1ea      	bne.n	82140 <_fputwc_r+0x50>
   8216a:	4640      	mov	r0, r8
   8216c:	4622      	mov	r2, r4
   8216e:	f001 f995 	bl	8349c <__swbuf_r>
   82172:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   82176:	4258      	negs	r0, r3
   82178:	4158      	adcs	r0, r3
   8217a:	2800      	cmp	r0, #0
   8217c:	d0e1      	beq.n	82142 <_fputwc_r+0x52>
   8217e:	f04f 30ff 	mov.w	r0, #4294967295
   82182:	b002      	add	sp, #8
   82184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82188:	89a3      	ldrh	r3, [r4, #12]
   8218a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8218e:	81a3      	strh	r3, [r4, #12]
   82190:	b002      	add	sp, #8
   82192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82196:	1e7b      	subs	r3, r7, #1
   82198:	2bfe      	cmp	r3, #254	; 0xfe
   8219a:	d8bd      	bhi.n	82118 <_fputwc_r+0x28>
   8219c:	b2f9      	uxtb	r1, r7
   8219e:	4606      	mov	r6, r0
   821a0:	f88d 1004 	strb.w	r1, [sp, #4]
   821a4:	e7c6      	b.n	82134 <_fputwc_r+0x44>
   821a6:	4638      	mov	r0, r7
   821a8:	b002      	add	sp, #8
   821aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   821ae:	bf00      	nop

000821b0 <_malloc_trim_r>:
   821b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   821b2:	4d23      	ldr	r5, [pc, #140]	; (82240 <_malloc_trim_r+0x90>)
   821b4:	460f      	mov	r7, r1
   821b6:	4604      	mov	r4, r0
   821b8:	f000 ff08 	bl	82fcc <__malloc_lock>
   821bc:	68ab      	ldr	r3, [r5, #8]
   821be:	685e      	ldr	r6, [r3, #4]
   821c0:	f026 0603 	bic.w	r6, r6, #3
   821c4:	1bf1      	subs	r1, r6, r7
   821c6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   821ca:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   821ce:	f021 010f 	bic.w	r1, r1, #15
   821d2:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   821d6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   821da:	db07      	blt.n	821ec <_malloc_trim_r+0x3c>
   821dc:	4620      	mov	r0, r4
   821de:	2100      	movs	r1, #0
   821e0:	f001 f8d8 	bl	83394 <_sbrk_r>
   821e4:	68ab      	ldr	r3, [r5, #8]
   821e6:	4433      	add	r3, r6
   821e8:	4298      	cmp	r0, r3
   821ea:	d004      	beq.n	821f6 <_malloc_trim_r+0x46>
   821ec:	4620      	mov	r0, r4
   821ee:	f000 feef 	bl	82fd0 <__malloc_unlock>
   821f2:	2000      	movs	r0, #0
   821f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   821f6:	4620      	mov	r0, r4
   821f8:	4279      	negs	r1, r7
   821fa:	f001 f8cb 	bl	83394 <_sbrk_r>
   821fe:	3001      	adds	r0, #1
   82200:	d00d      	beq.n	8221e <_malloc_trim_r+0x6e>
   82202:	4b10      	ldr	r3, [pc, #64]	; (82244 <_malloc_trim_r+0x94>)
   82204:	68aa      	ldr	r2, [r5, #8]
   82206:	6819      	ldr	r1, [r3, #0]
   82208:	1bf6      	subs	r6, r6, r7
   8220a:	f046 0601 	orr.w	r6, r6, #1
   8220e:	4620      	mov	r0, r4
   82210:	1bc9      	subs	r1, r1, r7
   82212:	6056      	str	r6, [r2, #4]
   82214:	6019      	str	r1, [r3, #0]
   82216:	f000 fedb 	bl	82fd0 <__malloc_unlock>
   8221a:	2001      	movs	r0, #1
   8221c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8221e:	4620      	mov	r0, r4
   82220:	2100      	movs	r1, #0
   82222:	f001 f8b7 	bl	83394 <_sbrk_r>
   82226:	68ab      	ldr	r3, [r5, #8]
   82228:	1ac2      	subs	r2, r0, r3
   8222a:	2a0f      	cmp	r2, #15
   8222c:	ddde      	ble.n	821ec <_malloc_trim_r+0x3c>
   8222e:	4d06      	ldr	r5, [pc, #24]	; (82248 <_malloc_trim_r+0x98>)
   82230:	4904      	ldr	r1, [pc, #16]	; (82244 <_malloc_trim_r+0x94>)
   82232:	682d      	ldr	r5, [r5, #0]
   82234:	f042 0201 	orr.w	r2, r2, #1
   82238:	1b40      	subs	r0, r0, r5
   8223a:	605a      	str	r2, [r3, #4]
   8223c:	6008      	str	r0, [r1, #0]
   8223e:	e7d5      	b.n	821ec <_malloc_trim_r+0x3c>
   82240:	20070588 	.word	0x20070588
   82244:	20070ad8 	.word	0x20070ad8
   82248:	20070994 	.word	0x20070994

0008224c <_free_r>:
   8224c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82250:	460d      	mov	r5, r1
   82252:	4606      	mov	r6, r0
   82254:	2900      	cmp	r1, #0
   82256:	d055      	beq.n	82304 <_free_r+0xb8>
   82258:	f000 feb8 	bl	82fcc <__malloc_lock>
   8225c:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82260:	f8df c170 	ldr.w	ip, [pc, #368]	; 823d4 <_free_r+0x188>
   82264:	f1a5 0408 	sub.w	r4, r5, #8
   82268:	f021 0301 	bic.w	r3, r1, #1
   8226c:	18e2      	adds	r2, r4, r3
   8226e:	f8dc 0008 	ldr.w	r0, [ip, #8]
   82272:	6857      	ldr	r7, [r2, #4]
   82274:	4290      	cmp	r0, r2
   82276:	f027 0703 	bic.w	r7, r7, #3
   8227a:	d068      	beq.n	8234e <_free_r+0x102>
   8227c:	f011 0101 	ands.w	r1, r1, #1
   82280:	6057      	str	r7, [r2, #4]
   82282:	d032      	beq.n	822ea <_free_r+0x9e>
   82284:	2100      	movs	r1, #0
   82286:	19d0      	adds	r0, r2, r7
   82288:	6840      	ldr	r0, [r0, #4]
   8228a:	07c0      	lsls	r0, r0, #31
   8228c:	d406      	bmi.n	8229c <_free_r+0x50>
   8228e:	443b      	add	r3, r7
   82290:	6890      	ldr	r0, [r2, #8]
   82292:	2900      	cmp	r1, #0
   82294:	d04d      	beq.n	82332 <_free_r+0xe6>
   82296:	68d2      	ldr	r2, [r2, #12]
   82298:	60c2      	str	r2, [r0, #12]
   8229a:	6090      	str	r0, [r2, #8]
   8229c:	f043 0201 	orr.w	r2, r3, #1
   822a0:	6062      	str	r2, [r4, #4]
   822a2:	50e3      	str	r3, [r4, r3]
   822a4:	b9e1      	cbnz	r1, 822e0 <_free_r+0x94>
   822a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   822aa:	d32d      	bcc.n	82308 <_free_r+0xbc>
   822ac:	0a5a      	lsrs	r2, r3, #9
   822ae:	2a04      	cmp	r2, #4
   822b0:	d869      	bhi.n	82386 <_free_r+0x13a>
   822b2:	0998      	lsrs	r0, r3, #6
   822b4:	3038      	adds	r0, #56	; 0x38
   822b6:	0041      	lsls	r1, r0, #1
   822b8:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   822bc:	f8dc 2008 	ldr.w	r2, [ip, #8]
   822c0:	4944      	ldr	r1, [pc, #272]	; (823d4 <_free_r+0x188>)
   822c2:	4562      	cmp	r2, ip
   822c4:	d065      	beq.n	82392 <_free_r+0x146>
   822c6:	6851      	ldr	r1, [r2, #4]
   822c8:	f021 0103 	bic.w	r1, r1, #3
   822cc:	428b      	cmp	r3, r1
   822ce:	d202      	bcs.n	822d6 <_free_r+0x8a>
   822d0:	6892      	ldr	r2, [r2, #8]
   822d2:	4594      	cmp	ip, r2
   822d4:	d1f7      	bne.n	822c6 <_free_r+0x7a>
   822d6:	68d3      	ldr	r3, [r2, #12]
   822d8:	60e3      	str	r3, [r4, #12]
   822da:	60a2      	str	r2, [r4, #8]
   822dc:	609c      	str	r4, [r3, #8]
   822de:	60d4      	str	r4, [r2, #12]
   822e0:	4630      	mov	r0, r6
   822e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   822e6:	f000 be73 	b.w	82fd0 <__malloc_unlock>
   822ea:	f855 5c08 	ldr.w	r5, [r5, #-8]
   822ee:	f10c 0808 	add.w	r8, ip, #8
   822f2:	1b64      	subs	r4, r4, r5
   822f4:	68a0      	ldr	r0, [r4, #8]
   822f6:	442b      	add	r3, r5
   822f8:	4540      	cmp	r0, r8
   822fa:	d042      	beq.n	82382 <_free_r+0x136>
   822fc:	68e5      	ldr	r5, [r4, #12]
   822fe:	60c5      	str	r5, [r0, #12]
   82300:	60a8      	str	r0, [r5, #8]
   82302:	e7c0      	b.n	82286 <_free_r+0x3a>
   82304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82308:	08db      	lsrs	r3, r3, #3
   8230a:	109a      	asrs	r2, r3, #2
   8230c:	2001      	movs	r0, #1
   8230e:	4090      	lsls	r0, r2
   82310:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82314:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82318:	689a      	ldr	r2, [r3, #8]
   8231a:	4301      	orrs	r1, r0
   8231c:	60a2      	str	r2, [r4, #8]
   8231e:	60e3      	str	r3, [r4, #12]
   82320:	f8cc 1004 	str.w	r1, [ip, #4]
   82324:	4630      	mov	r0, r6
   82326:	609c      	str	r4, [r3, #8]
   82328:	60d4      	str	r4, [r2, #12]
   8232a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8232e:	f000 be4f 	b.w	82fd0 <__malloc_unlock>
   82332:	4d29      	ldr	r5, [pc, #164]	; (823d8 <_free_r+0x18c>)
   82334:	42a8      	cmp	r0, r5
   82336:	d1ae      	bne.n	82296 <_free_r+0x4a>
   82338:	f043 0201 	orr.w	r2, r3, #1
   8233c:	f8cc 4014 	str.w	r4, [ip, #20]
   82340:	f8cc 4010 	str.w	r4, [ip, #16]
   82344:	60e0      	str	r0, [r4, #12]
   82346:	60a0      	str	r0, [r4, #8]
   82348:	6062      	str	r2, [r4, #4]
   8234a:	50e3      	str	r3, [r4, r3]
   8234c:	e7c8      	b.n	822e0 <_free_r+0x94>
   8234e:	441f      	add	r7, r3
   82350:	07cb      	lsls	r3, r1, #31
   82352:	d407      	bmi.n	82364 <_free_r+0x118>
   82354:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82358:	1a64      	subs	r4, r4, r1
   8235a:	68e3      	ldr	r3, [r4, #12]
   8235c:	68a2      	ldr	r2, [r4, #8]
   8235e:	440f      	add	r7, r1
   82360:	60d3      	str	r3, [r2, #12]
   82362:	609a      	str	r2, [r3, #8]
   82364:	4b1d      	ldr	r3, [pc, #116]	; (823dc <_free_r+0x190>)
   82366:	f047 0201 	orr.w	r2, r7, #1
   8236a:	681b      	ldr	r3, [r3, #0]
   8236c:	6062      	str	r2, [r4, #4]
   8236e:	429f      	cmp	r7, r3
   82370:	f8cc 4008 	str.w	r4, [ip, #8]
   82374:	d3b4      	bcc.n	822e0 <_free_r+0x94>
   82376:	4b1a      	ldr	r3, [pc, #104]	; (823e0 <_free_r+0x194>)
   82378:	4630      	mov	r0, r6
   8237a:	6819      	ldr	r1, [r3, #0]
   8237c:	f7ff ff18 	bl	821b0 <_malloc_trim_r>
   82380:	e7ae      	b.n	822e0 <_free_r+0x94>
   82382:	2101      	movs	r1, #1
   82384:	e77f      	b.n	82286 <_free_r+0x3a>
   82386:	2a14      	cmp	r2, #20
   82388:	d80b      	bhi.n	823a2 <_free_r+0x156>
   8238a:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   8238e:	0041      	lsls	r1, r0, #1
   82390:	e792      	b.n	822b8 <_free_r+0x6c>
   82392:	1080      	asrs	r0, r0, #2
   82394:	2501      	movs	r5, #1
   82396:	4085      	lsls	r5, r0
   82398:	6848      	ldr	r0, [r1, #4]
   8239a:	4613      	mov	r3, r2
   8239c:	4328      	orrs	r0, r5
   8239e:	6048      	str	r0, [r1, #4]
   823a0:	e79a      	b.n	822d8 <_free_r+0x8c>
   823a2:	2a54      	cmp	r2, #84	; 0x54
   823a4:	d803      	bhi.n	823ae <_free_r+0x162>
   823a6:	0b18      	lsrs	r0, r3, #12
   823a8:	306e      	adds	r0, #110	; 0x6e
   823aa:	0041      	lsls	r1, r0, #1
   823ac:	e784      	b.n	822b8 <_free_r+0x6c>
   823ae:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   823b2:	d803      	bhi.n	823bc <_free_r+0x170>
   823b4:	0bd8      	lsrs	r0, r3, #15
   823b6:	3077      	adds	r0, #119	; 0x77
   823b8:	0041      	lsls	r1, r0, #1
   823ba:	e77d      	b.n	822b8 <_free_r+0x6c>
   823bc:	f240 5154 	movw	r1, #1364	; 0x554
   823c0:	428a      	cmp	r2, r1
   823c2:	d803      	bhi.n	823cc <_free_r+0x180>
   823c4:	0c98      	lsrs	r0, r3, #18
   823c6:	307c      	adds	r0, #124	; 0x7c
   823c8:	0041      	lsls	r1, r0, #1
   823ca:	e775      	b.n	822b8 <_free_r+0x6c>
   823cc:	21fc      	movs	r1, #252	; 0xfc
   823ce:	207e      	movs	r0, #126	; 0x7e
   823d0:	e772      	b.n	822b8 <_free_r+0x6c>
   823d2:	bf00      	nop
   823d4:	20070588 	.word	0x20070588
   823d8:	20070590 	.word	0x20070590
   823dc:	20070990 	.word	0x20070990
   823e0:	20070ad4 	.word	0x20070ad4

000823e4 <__sfvwrite_r>:
   823e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   823e8:	6893      	ldr	r3, [r2, #8]
   823ea:	b083      	sub	sp, #12
   823ec:	4616      	mov	r6, r2
   823ee:	4681      	mov	r9, r0
   823f0:	460c      	mov	r4, r1
   823f2:	b32b      	cbz	r3, 82440 <__sfvwrite_r+0x5c>
   823f4:	898b      	ldrh	r3, [r1, #12]
   823f6:	0719      	lsls	r1, r3, #28
   823f8:	d526      	bpl.n	82448 <__sfvwrite_r+0x64>
   823fa:	6922      	ldr	r2, [r4, #16]
   823fc:	b322      	cbz	r2, 82448 <__sfvwrite_r+0x64>
   823fe:	f003 0202 	and.w	r2, r3, #2
   82402:	b292      	uxth	r2, r2
   82404:	6835      	ldr	r5, [r6, #0]
   82406:	2a00      	cmp	r2, #0
   82408:	d02c      	beq.n	82464 <__sfvwrite_r+0x80>
   8240a:	f04f 0a00 	mov.w	sl, #0
   8240e:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 826f8 <__sfvwrite_r+0x314>
   82412:	46d0      	mov	r8, sl
   82414:	45d8      	cmp	r8, fp
   82416:	bf34      	ite	cc
   82418:	4643      	movcc	r3, r8
   8241a:	465b      	movcs	r3, fp
   8241c:	4652      	mov	r2, sl
   8241e:	4648      	mov	r0, r9
   82420:	f1b8 0f00 	cmp.w	r8, #0
   82424:	d04f      	beq.n	824c6 <__sfvwrite_r+0xe2>
   82426:	69e1      	ldr	r1, [r4, #28]
   82428:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8242a:	47b8      	blx	r7
   8242c:	2800      	cmp	r0, #0
   8242e:	dd56      	ble.n	824de <__sfvwrite_r+0xfa>
   82430:	68b3      	ldr	r3, [r6, #8]
   82432:	4482      	add	sl, r0
   82434:	1a1b      	subs	r3, r3, r0
   82436:	ebc0 0808 	rsb	r8, r0, r8
   8243a:	60b3      	str	r3, [r6, #8]
   8243c:	2b00      	cmp	r3, #0
   8243e:	d1e9      	bne.n	82414 <__sfvwrite_r+0x30>
   82440:	2000      	movs	r0, #0
   82442:	b003      	add	sp, #12
   82444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82448:	4648      	mov	r0, r9
   8244a:	4621      	mov	r1, r4
   8244c:	f7ff fc88 	bl	81d60 <__swsetup_r>
   82450:	2800      	cmp	r0, #0
   82452:	f040 8148 	bne.w	826e6 <__sfvwrite_r+0x302>
   82456:	89a3      	ldrh	r3, [r4, #12]
   82458:	6835      	ldr	r5, [r6, #0]
   8245a:	f003 0202 	and.w	r2, r3, #2
   8245e:	b292      	uxth	r2, r2
   82460:	2a00      	cmp	r2, #0
   82462:	d1d2      	bne.n	8240a <__sfvwrite_r+0x26>
   82464:	f013 0a01 	ands.w	sl, r3, #1
   82468:	d142      	bne.n	824f0 <__sfvwrite_r+0x10c>
   8246a:	46d0      	mov	r8, sl
   8246c:	f1b8 0f00 	cmp.w	r8, #0
   82470:	d023      	beq.n	824ba <__sfvwrite_r+0xd6>
   82472:	059a      	lsls	r2, r3, #22
   82474:	68a7      	ldr	r7, [r4, #8]
   82476:	d576      	bpl.n	82566 <__sfvwrite_r+0x182>
   82478:	45b8      	cmp	r8, r7
   8247a:	f0c0 80a4 	bcc.w	825c6 <__sfvwrite_r+0x1e2>
   8247e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82482:	f040 80b2 	bne.w	825ea <__sfvwrite_r+0x206>
   82486:	6820      	ldr	r0, [r4, #0]
   82488:	46bb      	mov	fp, r7
   8248a:	4651      	mov	r1, sl
   8248c:	465a      	mov	r2, fp
   8248e:	f000 fd37 	bl	82f00 <memmove>
   82492:	68a2      	ldr	r2, [r4, #8]
   82494:	6821      	ldr	r1, [r4, #0]
   82496:	1bd2      	subs	r2, r2, r7
   82498:	eb01 030b 	add.w	r3, r1, fp
   8249c:	60a2      	str	r2, [r4, #8]
   8249e:	6023      	str	r3, [r4, #0]
   824a0:	4642      	mov	r2, r8
   824a2:	68b3      	ldr	r3, [r6, #8]
   824a4:	4492      	add	sl, r2
   824a6:	1a9b      	subs	r3, r3, r2
   824a8:	ebc2 0808 	rsb	r8, r2, r8
   824ac:	60b3      	str	r3, [r6, #8]
   824ae:	2b00      	cmp	r3, #0
   824b0:	d0c6      	beq.n	82440 <__sfvwrite_r+0x5c>
   824b2:	89a3      	ldrh	r3, [r4, #12]
   824b4:	f1b8 0f00 	cmp.w	r8, #0
   824b8:	d1db      	bne.n	82472 <__sfvwrite_r+0x8e>
   824ba:	f8d5 a000 	ldr.w	sl, [r5]
   824be:	f8d5 8004 	ldr.w	r8, [r5, #4]
   824c2:	3508      	adds	r5, #8
   824c4:	e7d2      	b.n	8246c <__sfvwrite_r+0x88>
   824c6:	f8d5 a000 	ldr.w	sl, [r5]
   824ca:	f8d5 8004 	ldr.w	r8, [r5, #4]
   824ce:	3508      	adds	r5, #8
   824d0:	e7a0      	b.n	82414 <__sfvwrite_r+0x30>
   824d2:	4648      	mov	r0, r9
   824d4:	4621      	mov	r1, r4
   824d6:	f7ff fd59 	bl	81f8c <_fflush_r>
   824da:	2800      	cmp	r0, #0
   824dc:	d059      	beq.n	82592 <__sfvwrite_r+0x1ae>
   824de:	89a3      	ldrh	r3, [r4, #12]
   824e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   824e4:	f04f 30ff 	mov.w	r0, #4294967295
   824e8:	81a3      	strh	r3, [r4, #12]
   824ea:	b003      	add	sp, #12
   824ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   824f0:	4692      	mov	sl, r2
   824f2:	9201      	str	r2, [sp, #4]
   824f4:	4693      	mov	fp, r2
   824f6:	4690      	mov	r8, r2
   824f8:	f1b8 0f00 	cmp.w	r8, #0
   824fc:	d02b      	beq.n	82556 <__sfvwrite_r+0x172>
   824fe:	9f01      	ldr	r7, [sp, #4]
   82500:	2f00      	cmp	r7, #0
   82502:	d064      	beq.n	825ce <__sfvwrite_r+0x1ea>
   82504:	6820      	ldr	r0, [r4, #0]
   82506:	6921      	ldr	r1, [r4, #16]
   82508:	45c2      	cmp	sl, r8
   8250a:	bf34      	ite	cc
   8250c:	4653      	movcc	r3, sl
   8250e:	4643      	movcs	r3, r8
   82510:	4288      	cmp	r0, r1
   82512:	461f      	mov	r7, r3
   82514:	f8d4 c008 	ldr.w	ip, [r4, #8]
   82518:	6962      	ldr	r2, [r4, #20]
   8251a:	d903      	bls.n	82524 <__sfvwrite_r+0x140>
   8251c:	4494      	add	ip, r2
   8251e:	4563      	cmp	r3, ip
   82520:	f300 80ae 	bgt.w	82680 <__sfvwrite_r+0x29c>
   82524:	4293      	cmp	r3, r2
   82526:	db36      	blt.n	82596 <__sfvwrite_r+0x1b2>
   82528:	4613      	mov	r3, r2
   8252a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8252c:	4648      	mov	r0, r9
   8252e:	69e1      	ldr	r1, [r4, #28]
   82530:	465a      	mov	r2, fp
   82532:	47b8      	blx	r7
   82534:	1e07      	subs	r7, r0, #0
   82536:	ddd2      	ble.n	824de <__sfvwrite_r+0xfa>
   82538:	ebba 0a07 	subs.w	sl, sl, r7
   8253c:	d03a      	beq.n	825b4 <__sfvwrite_r+0x1d0>
   8253e:	68b3      	ldr	r3, [r6, #8]
   82540:	44bb      	add	fp, r7
   82542:	1bdb      	subs	r3, r3, r7
   82544:	ebc7 0808 	rsb	r8, r7, r8
   82548:	60b3      	str	r3, [r6, #8]
   8254a:	2b00      	cmp	r3, #0
   8254c:	f43f af78 	beq.w	82440 <__sfvwrite_r+0x5c>
   82550:	f1b8 0f00 	cmp.w	r8, #0
   82554:	d1d3      	bne.n	824fe <__sfvwrite_r+0x11a>
   82556:	2700      	movs	r7, #0
   82558:	f8d5 b000 	ldr.w	fp, [r5]
   8255c:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82560:	9701      	str	r7, [sp, #4]
   82562:	3508      	adds	r5, #8
   82564:	e7c8      	b.n	824f8 <__sfvwrite_r+0x114>
   82566:	6820      	ldr	r0, [r4, #0]
   82568:	6923      	ldr	r3, [r4, #16]
   8256a:	4298      	cmp	r0, r3
   8256c:	d802      	bhi.n	82574 <__sfvwrite_r+0x190>
   8256e:	6963      	ldr	r3, [r4, #20]
   82570:	4598      	cmp	r8, r3
   82572:	d272      	bcs.n	8265a <__sfvwrite_r+0x276>
   82574:	45b8      	cmp	r8, r7
   82576:	bf38      	it	cc
   82578:	4647      	movcc	r7, r8
   8257a:	463a      	mov	r2, r7
   8257c:	4651      	mov	r1, sl
   8257e:	f000 fcbf 	bl	82f00 <memmove>
   82582:	68a3      	ldr	r3, [r4, #8]
   82584:	6822      	ldr	r2, [r4, #0]
   82586:	1bdb      	subs	r3, r3, r7
   82588:	443a      	add	r2, r7
   8258a:	60a3      	str	r3, [r4, #8]
   8258c:	6022      	str	r2, [r4, #0]
   8258e:	2b00      	cmp	r3, #0
   82590:	d09f      	beq.n	824d2 <__sfvwrite_r+0xee>
   82592:	463a      	mov	r2, r7
   82594:	e785      	b.n	824a2 <__sfvwrite_r+0xbe>
   82596:	461a      	mov	r2, r3
   82598:	4659      	mov	r1, fp
   8259a:	9300      	str	r3, [sp, #0]
   8259c:	f000 fcb0 	bl	82f00 <memmove>
   825a0:	9b00      	ldr	r3, [sp, #0]
   825a2:	68a1      	ldr	r1, [r4, #8]
   825a4:	6822      	ldr	r2, [r4, #0]
   825a6:	1ac9      	subs	r1, r1, r3
   825a8:	ebba 0a07 	subs.w	sl, sl, r7
   825ac:	4413      	add	r3, r2
   825ae:	60a1      	str	r1, [r4, #8]
   825b0:	6023      	str	r3, [r4, #0]
   825b2:	d1c4      	bne.n	8253e <__sfvwrite_r+0x15a>
   825b4:	4648      	mov	r0, r9
   825b6:	4621      	mov	r1, r4
   825b8:	f7ff fce8 	bl	81f8c <_fflush_r>
   825bc:	2800      	cmp	r0, #0
   825be:	d18e      	bne.n	824de <__sfvwrite_r+0xfa>
   825c0:	f8cd a004 	str.w	sl, [sp, #4]
   825c4:	e7bb      	b.n	8253e <__sfvwrite_r+0x15a>
   825c6:	6820      	ldr	r0, [r4, #0]
   825c8:	4647      	mov	r7, r8
   825ca:	46c3      	mov	fp, r8
   825cc:	e75d      	b.n	8248a <__sfvwrite_r+0xa6>
   825ce:	4658      	mov	r0, fp
   825d0:	210a      	movs	r1, #10
   825d2:	4642      	mov	r2, r8
   825d4:	f000 fbd4 	bl	82d80 <memchr>
   825d8:	2800      	cmp	r0, #0
   825da:	d07f      	beq.n	826dc <__sfvwrite_r+0x2f8>
   825dc:	f100 0a01 	add.w	sl, r0, #1
   825e0:	2701      	movs	r7, #1
   825e2:	ebcb 0a0a 	rsb	sl, fp, sl
   825e6:	9701      	str	r7, [sp, #4]
   825e8:	e78c      	b.n	82504 <__sfvwrite_r+0x120>
   825ea:	6822      	ldr	r2, [r4, #0]
   825ec:	6921      	ldr	r1, [r4, #16]
   825ee:	6967      	ldr	r7, [r4, #20]
   825f0:	ebc1 0c02 	rsb	ip, r1, r2
   825f4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   825f8:	f10c 0201 	add.w	r2, ip, #1
   825fc:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   82600:	4442      	add	r2, r8
   82602:	107f      	asrs	r7, r7, #1
   82604:	4297      	cmp	r7, r2
   82606:	bf34      	ite	cc
   82608:	4617      	movcc	r7, r2
   8260a:	463a      	movcs	r2, r7
   8260c:	055b      	lsls	r3, r3, #21
   8260e:	d54f      	bpl.n	826b0 <__sfvwrite_r+0x2cc>
   82610:	4611      	mov	r1, r2
   82612:	4648      	mov	r0, r9
   82614:	f8cd c000 	str.w	ip, [sp]
   82618:	f000 f916 	bl	82848 <_malloc_r>
   8261c:	f8dd c000 	ldr.w	ip, [sp]
   82620:	4683      	mov	fp, r0
   82622:	2800      	cmp	r0, #0
   82624:	d062      	beq.n	826ec <__sfvwrite_r+0x308>
   82626:	4662      	mov	r2, ip
   82628:	6921      	ldr	r1, [r4, #16]
   8262a:	f8cd c000 	str.w	ip, [sp]
   8262e:	f000 fbf1 	bl	82e14 <memcpy>
   82632:	89a2      	ldrh	r2, [r4, #12]
   82634:	f8dd c000 	ldr.w	ip, [sp]
   82638:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8263c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82640:	81a2      	strh	r2, [r4, #12]
   82642:	eb0b 000c 	add.w	r0, fp, ip
   82646:	ebcc 0207 	rsb	r2, ip, r7
   8264a:	f8c4 b010 	str.w	fp, [r4, #16]
   8264e:	6167      	str	r7, [r4, #20]
   82650:	6020      	str	r0, [r4, #0]
   82652:	60a2      	str	r2, [r4, #8]
   82654:	4647      	mov	r7, r8
   82656:	46c3      	mov	fp, r8
   82658:	e717      	b.n	8248a <__sfvwrite_r+0xa6>
   8265a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8265e:	4590      	cmp	r8, r2
   82660:	bf38      	it	cc
   82662:	4642      	movcc	r2, r8
   82664:	fb92 f2f3 	sdiv	r2, r2, r3
   82668:	fb02 f303 	mul.w	r3, r2, r3
   8266c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8266e:	4648      	mov	r0, r9
   82670:	69e1      	ldr	r1, [r4, #28]
   82672:	4652      	mov	r2, sl
   82674:	47b8      	blx	r7
   82676:	2800      	cmp	r0, #0
   82678:	f77f af31 	ble.w	824de <__sfvwrite_r+0xfa>
   8267c:	4602      	mov	r2, r0
   8267e:	e710      	b.n	824a2 <__sfvwrite_r+0xbe>
   82680:	4662      	mov	r2, ip
   82682:	4659      	mov	r1, fp
   82684:	f8cd c000 	str.w	ip, [sp]
   82688:	f000 fc3a 	bl	82f00 <memmove>
   8268c:	f8dd c000 	ldr.w	ip, [sp]
   82690:	6823      	ldr	r3, [r4, #0]
   82692:	4648      	mov	r0, r9
   82694:	4463      	add	r3, ip
   82696:	6023      	str	r3, [r4, #0]
   82698:	4621      	mov	r1, r4
   8269a:	f8cd c000 	str.w	ip, [sp]
   8269e:	f7ff fc75 	bl	81f8c <_fflush_r>
   826a2:	f8dd c000 	ldr.w	ip, [sp]
   826a6:	2800      	cmp	r0, #0
   826a8:	f47f af19 	bne.w	824de <__sfvwrite_r+0xfa>
   826ac:	4667      	mov	r7, ip
   826ae:	e743      	b.n	82538 <__sfvwrite_r+0x154>
   826b0:	4648      	mov	r0, r9
   826b2:	f8cd c000 	str.w	ip, [sp]
   826b6:	f000 fc8d 	bl	82fd4 <_realloc_r>
   826ba:	f8dd c000 	ldr.w	ip, [sp]
   826be:	4683      	mov	fp, r0
   826c0:	2800      	cmp	r0, #0
   826c2:	d1be      	bne.n	82642 <__sfvwrite_r+0x25e>
   826c4:	4648      	mov	r0, r9
   826c6:	6921      	ldr	r1, [r4, #16]
   826c8:	f7ff fdc0 	bl	8224c <_free_r>
   826cc:	89a3      	ldrh	r3, [r4, #12]
   826ce:	220c      	movs	r2, #12
   826d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   826d4:	b29b      	uxth	r3, r3
   826d6:	f8c9 2000 	str.w	r2, [r9]
   826da:	e701      	b.n	824e0 <__sfvwrite_r+0xfc>
   826dc:	2701      	movs	r7, #1
   826de:	f108 0a01 	add.w	sl, r8, #1
   826e2:	9701      	str	r7, [sp, #4]
   826e4:	e70e      	b.n	82504 <__sfvwrite_r+0x120>
   826e6:	f04f 30ff 	mov.w	r0, #4294967295
   826ea:	e6aa      	b.n	82442 <__sfvwrite_r+0x5e>
   826ec:	230c      	movs	r3, #12
   826ee:	f8c9 3000 	str.w	r3, [r9]
   826f2:	89a3      	ldrh	r3, [r4, #12]
   826f4:	e6f4      	b.n	824e0 <__sfvwrite_r+0xfc>
   826f6:	bf00      	nop
   826f8:	7ffffc00 	.word	0x7ffffc00

000826fc <_fwalk>:
   826fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82700:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82704:	4688      	mov	r8, r1
   82706:	d019      	beq.n	8273c <_fwalk+0x40>
   82708:	2600      	movs	r6, #0
   8270a:	687d      	ldr	r5, [r7, #4]
   8270c:	68bc      	ldr	r4, [r7, #8]
   8270e:	3d01      	subs	r5, #1
   82710:	d40e      	bmi.n	82730 <_fwalk+0x34>
   82712:	89a3      	ldrh	r3, [r4, #12]
   82714:	3d01      	subs	r5, #1
   82716:	2b01      	cmp	r3, #1
   82718:	d906      	bls.n	82728 <_fwalk+0x2c>
   8271a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8271e:	4620      	mov	r0, r4
   82720:	3301      	adds	r3, #1
   82722:	d001      	beq.n	82728 <_fwalk+0x2c>
   82724:	47c0      	blx	r8
   82726:	4306      	orrs	r6, r0
   82728:	1c6b      	adds	r3, r5, #1
   8272a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8272e:	d1f0      	bne.n	82712 <_fwalk+0x16>
   82730:	683f      	ldr	r7, [r7, #0]
   82732:	2f00      	cmp	r7, #0
   82734:	d1e9      	bne.n	8270a <_fwalk+0xe>
   82736:	4630      	mov	r0, r6
   82738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8273c:	463e      	mov	r6, r7
   8273e:	4630      	mov	r0, r6
   82740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082744 <__locale_charset>:
   82744:	4800      	ldr	r0, [pc, #0]	; (82748 <__locale_charset+0x4>)
   82746:	4770      	bx	lr
   82748:	20070564 	.word	0x20070564

0008274c <__locale_mb_cur_max>:
   8274c:	4b01      	ldr	r3, [pc, #4]	; (82754 <__locale_mb_cur_max+0x8>)
   8274e:	6818      	ldr	r0, [r3, #0]
   82750:	4770      	bx	lr
   82752:	bf00      	nop
   82754:	20070584 	.word	0x20070584

00082758 <__smakebuf_r>:
   82758:	b5f0      	push	{r4, r5, r6, r7, lr}
   8275a:	898b      	ldrh	r3, [r1, #12]
   8275c:	b091      	sub	sp, #68	; 0x44
   8275e:	b29a      	uxth	r2, r3
   82760:	0796      	lsls	r6, r2, #30
   82762:	460c      	mov	r4, r1
   82764:	4605      	mov	r5, r0
   82766:	d437      	bmi.n	827d8 <__smakebuf_r+0x80>
   82768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8276c:	2900      	cmp	r1, #0
   8276e:	db17      	blt.n	827a0 <__smakebuf_r+0x48>
   82770:	aa01      	add	r2, sp, #4
   82772:	f000 ffdf 	bl	83734 <_fstat_r>
   82776:	2800      	cmp	r0, #0
   82778:	db10      	blt.n	8279c <__smakebuf_r+0x44>
   8277a:	9b02      	ldr	r3, [sp, #8]
   8277c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   82780:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   82784:	424f      	negs	r7, r1
   82786:	414f      	adcs	r7, r1
   82788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   8278c:	d02c      	beq.n	827e8 <__smakebuf_r+0x90>
   8278e:	89a3      	ldrh	r3, [r4, #12]
   82790:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82794:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82798:	81a3      	strh	r3, [r4, #12]
   8279a:	e00b      	b.n	827b4 <__smakebuf_r+0x5c>
   8279c:	89a3      	ldrh	r3, [r4, #12]
   8279e:	b29a      	uxth	r2, r3
   827a0:	f012 0f80 	tst.w	r2, #128	; 0x80
   827a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   827a8:	81a3      	strh	r3, [r4, #12]
   827aa:	bf14      	ite	ne
   827ac:	2640      	movne	r6, #64	; 0x40
   827ae:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   827b2:	2700      	movs	r7, #0
   827b4:	4628      	mov	r0, r5
   827b6:	4631      	mov	r1, r6
   827b8:	f000 f846 	bl	82848 <_malloc_r>
   827bc:	89a3      	ldrh	r3, [r4, #12]
   827be:	2800      	cmp	r0, #0
   827c0:	d029      	beq.n	82816 <__smakebuf_r+0xbe>
   827c2:	4a1b      	ldr	r2, [pc, #108]	; (82830 <__smakebuf_r+0xd8>)
   827c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   827c8:	63ea      	str	r2, [r5, #60]	; 0x3c
   827ca:	81a3      	strh	r3, [r4, #12]
   827cc:	6020      	str	r0, [r4, #0]
   827ce:	6120      	str	r0, [r4, #16]
   827d0:	6166      	str	r6, [r4, #20]
   827d2:	b9a7      	cbnz	r7, 827fe <__smakebuf_r+0xa6>
   827d4:	b011      	add	sp, #68	; 0x44
   827d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   827d8:	f101 0343 	add.w	r3, r1, #67	; 0x43
   827dc:	2201      	movs	r2, #1
   827de:	600b      	str	r3, [r1, #0]
   827e0:	610b      	str	r3, [r1, #16]
   827e2:	614a      	str	r2, [r1, #20]
   827e4:	b011      	add	sp, #68	; 0x44
   827e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   827e8:	4a12      	ldr	r2, [pc, #72]	; (82834 <__smakebuf_r+0xdc>)
   827ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   827ec:	4293      	cmp	r3, r2
   827ee:	d1ce      	bne.n	8278e <__smakebuf_r+0x36>
   827f0:	89a3      	ldrh	r3, [r4, #12]
   827f2:	f44f 6680 	mov.w	r6, #1024	; 0x400
   827f6:	4333      	orrs	r3, r6
   827f8:	81a3      	strh	r3, [r4, #12]
   827fa:	64e6      	str	r6, [r4, #76]	; 0x4c
   827fc:	e7da      	b.n	827b4 <__smakebuf_r+0x5c>
   827fe:	4628      	mov	r0, r5
   82800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82804:	f000 ffaa 	bl	8375c <_isatty_r>
   82808:	2800      	cmp	r0, #0
   8280a:	d0e3      	beq.n	827d4 <__smakebuf_r+0x7c>
   8280c:	89a3      	ldrh	r3, [r4, #12]
   8280e:	f043 0301 	orr.w	r3, r3, #1
   82812:	81a3      	strh	r3, [r4, #12]
   82814:	e7de      	b.n	827d4 <__smakebuf_r+0x7c>
   82816:	059a      	lsls	r2, r3, #22
   82818:	d4dc      	bmi.n	827d4 <__smakebuf_r+0x7c>
   8281a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8281e:	f043 0302 	orr.w	r3, r3, #2
   82822:	2101      	movs	r1, #1
   82824:	81a3      	strh	r3, [r4, #12]
   82826:	6022      	str	r2, [r4, #0]
   82828:	6122      	str	r2, [r4, #16]
   8282a:	6161      	str	r1, [r4, #20]
   8282c:	e7d2      	b.n	827d4 <__smakebuf_r+0x7c>
   8282e:	bf00      	nop
   82830:	00081fb9 	.word	0x00081fb9
   82834:	00083415 	.word	0x00083415

00082838 <malloc>:
   82838:	4b02      	ldr	r3, [pc, #8]	; (82844 <malloc+0xc>)
   8283a:	4601      	mov	r1, r0
   8283c:	6818      	ldr	r0, [r3, #0]
   8283e:	f000 b803 	b.w	82848 <_malloc_r>
   82842:	bf00      	nop
   82844:	20070560 	.word	0x20070560

00082848 <_malloc_r>:
   82848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8284c:	f101 050b 	add.w	r5, r1, #11
   82850:	2d16      	cmp	r5, #22
   82852:	b083      	sub	sp, #12
   82854:	4606      	mov	r6, r0
   82856:	d927      	bls.n	828a8 <_malloc_r+0x60>
   82858:	f035 0507 	bics.w	r5, r5, #7
   8285c:	d427      	bmi.n	828ae <_malloc_r+0x66>
   8285e:	42a9      	cmp	r1, r5
   82860:	d825      	bhi.n	828ae <_malloc_r+0x66>
   82862:	4630      	mov	r0, r6
   82864:	f000 fbb2 	bl	82fcc <__malloc_lock>
   82868:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8286c:	d226      	bcs.n	828bc <_malloc_r+0x74>
   8286e:	4fc1      	ldr	r7, [pc, #772]	; (82b74 <_malloc_r+0x32c>)
   82870:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   82874:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82878:	68dc      	ldr	r4, [r3, #12]
   8287a:	429c      	cmp	r4, r3
   8287c:	f000 81d2 	beq.w	82c24 <_malloc_r+0x3dc>
   82880:	6863      	ldr	r3, [r4, #4]
   82882:	68e2      	ldr	r2, [r4, #12]
   82884:	f023 0303 	bic.w	r3, r3, #3
   82888:	4423      	add	r3, r4
   8288a:	6858      	ldr	r0, [r3, #4]
   8288c:	68a1      	ldr	r1, [r4, #8]
   8288e:	f040 0501 	orr.w	r5, r0, #1
   82892:	60ca      	str	r2, [r1, #12]
   82894:	4630      	mov	r0, r6
   82896:	6091      	str	r1, [r2, #8]
   82898:	605d      	str	r5, [r3, #4]
   8289a:	f000 fb99 	bl	82fd0 <__malloc_unlock>
   8289e:	3408      	adds	r4, #8
   828a0:	4620      	mov	r0, r4
   828a2:	b003      	add	sp, #12
   828a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   828a8:	2510      	movs	r5, #16
   828aa:	42a9      	cmp	r1, r5
   828ac:	d9d9      	bls.n	82862 <_malloc_r+0x1a>
   828ae:	2400      	movs	r4, #0
   828b0:	230c      	movs	r3, #12
   828b2:	4620      	mov	r0, r4
   828b4:	6033      	str	r3, [r6, #0]
   828b6:	b003      	add	sp, #12
   828b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   828bc:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   828c0:	f000 8089 	beq.w	829d6 <_malloc_r+0x18e>
   828c4:	f1bc 0f04 	cmp.w	ip, #4
   828c8:	f200 8160 	bhi.w	82b8c <_malloc_r+0x344>
   828cc:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   828d0:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   828d4:	ea4f 014c 	mov.w	r1, ip, lsl #1
   828d8:	4fa6      	ldr	r7, [pc, #664]	; (82b74 <_malloc_r+0x32c>)
   828da:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   828de:	68cc      	ldr	r4, [r1, #12]
   828e0:	42a1      	cmp	r1, r4
   828e2:	d105      	bne.n	828f0 <_malloc_r+0xa8>
   828e4:	e00c      	b.n	82900 <_malloc_r+0xb8>
   828e6:	2b00      	cmp	r3, #0
   828e8:	da79      	bge.n	829de <_malloc_r+0x196>
   828ea:	68e4      	ldr	r4, [r4, #12]
   828ec:	42a1      	cmp	r1, r4
   828ee:	d007      	beq.n	82900 <_malloc_r+0xb8>
   828f0:	6862      	ldr	r2, [r4, #4]
   828f2:	f022 0203 	bic.w	r2, r2, #3
   828f6:	1b53      	subs	r3, r2, r5
   828f8:	2b0f      	cmp	r3, #15
   828fa:	ddf4      	ble.n	828e6 <_malloc_r+0x9e>
   828fc:	f10c 3cff 	add.w	ip, ip, #4294967295
   82900:	f10c 0c01 	add.w	ip, ip, #1
   82904:	4b9b      	ldr	r3, [pc, #620]	; (82b74 <_malloc_r+0x32c>)
   82906:	693c      	ldr	r4, [r7, #16]
   82908:	f103 0e08 	add.w	lr, r3, #8
   8290c:	4574      	cmp	r4, lr
   8290e:	f000 817e 	beq.w	82c0e <_malloc_r+0x3c6>
   82912:	6861      	ldr	r1, [r4, #4]
   82914:	f021 0103 	bic.w	r1, r1, #3
   82918:	1b4a      	subs	r2, r1, r5
   8291a:	2a0f      	cmp	r2, #15
   8291c:	f300 8164 	bgt.w	82be8 <_malloc_r+0x3a0>
   82920:	2a00      	cmp	r2, #0
   82922:	f8c3 e014 	str.w	lr, [r3, #20]
   82926:	f8c3 e010 	str.w	lr, [r3, #16]
   8292a:	da69      	bge.n	82a00 <_malloc_r+0x1b8>
   8292c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82930:	f080 813a 	bcs.w	82ba8 <_malloc_r+0x360>
   82934:	08c9      	lsrs	r1, r1, #3
   82936:	108a      	asrs	r2, r1, #2
   82938:	f04f 0801 	mov.w	r8, #1
   8293c:	fa08 f802 	lsl.w	r8, r8, r2
   82940:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82944:	685a      	ldr	r2, [r3, #4]
   82946:	6888      	ldr	r0, [r1, #8]
   82948:	ea48 0202 	orr.w	r2, r8, r2
   8294c:	60a0      	str	r0, [r4, #8]
   8294e:	60e1      	str	r1, [r4, #12]
   82950:	605a      	str	r2, [r3, #4]
   82952:	608c      	str	r4, [r1, #8]
   82954:	60c4      	str	r4, [r0, #12]
   82956:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8295a:	2001      	movs	r0, #1
   8295c:	4098      	lsls	r0, r3
   8295e:	4290      	cmp	r0, r2
   82960:	d85b      	bhi.n	82a1a <_malloc_r+0x1d2>
   82962:	4202      	tst	r2, r0
   82964:	d106      	bne.n	82974 <_malloc_r+0x12c>
   82966:	f02c 0c03 	bic.w	ip, ip, #3
   8296a:	0040      	lsls	r0, r0, #1
   8296c:	4202      	tst	r2, r0
   8296e:	f10c 0c04 	add.w	ip, ip, #4
   82972:	d0fa      	beq.n	8296a <_malloc_r+0x122>
   82974:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   82978:	4644      	mov	r4, r8
   8297a:	46e1      	mov	r9, ip
   8297c:	68e3      	ldr	r3, [r4, #12]
   8297e:	429c      	cmp	r4, r3
   82980:	d107      	bne.n	82992 <_malloc_r+0x14a>
   82982:	e146      	b.n	82c12 <_malloc_r+0x3ca>
   82984:	2a00      	cmp	r2, #0
   82986:	f280 8157 	bge.w	82c38 <_malloc_r+0x3f0>
   8298a:	68db      	ldr	r3, [r3, #12]
   8298c:	429c      	cmp	r4, r3
   8298e:	f000 8140 	beq.w	82c12 <_malloc_r+0x3ca>
   82992:	6859      	ldr	r1, [r3, #4]
   82994:	f021 0103 	bic.w	r1, r1, #3
   82998:	1b4a      	subs	r2, r1, r5
   8299a:	2a0f      	cmp	r2, #15
   8299c:	ddf2      	ble.n	82984 <_malloc_r+0x13c>
   8299e:	461c      	mov	r4, r3
   829a0:	f854 cf08 	ldr.w	ip, [r4, #8]!
   829a4:	68d9      	ldr	r1, [r3, #12]
   829a6:	f045 0901 	orr.w	r9, r5, #1
   829aa:	f042 0801 	orr.w	r8, r2, #1
   829ae:	441d      	add	r5, r3
   829b0:	f8c3 9004 	str.w	r9, [r3, #4]
   829b4:	4630      	mov	r0, r6
   829b6:	f8cc 100c 	str.w	r1, [ip, #12]
   829ba:	f8c1 c008 	str.w	ip, [r1, #8]
   829be:	617d      	str	r5, [r7, #20]
   829c0:	613d      	str	r5, [r7, #16]
   829c2:	f8c5 e00c 	str.w	lr, [r5, #12]
   829c6:	f8c5 e008 	str.w	lr, [r5, #8]
   829ca:	f8c5 8004 	str.w	r8, [r5, #4]
   829ce:	50aa      	str	r2, [r5, r2]
   829d0:	f000 fafe 	bl	82fd0 <__malloc_unlock>
   829d4:	e764      	b.n	828a0 <_malloc_r+0x58>
   829d6:	217e      	movs	r1, #126	; 0x7e
   829d8:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   829dc:	e77c      	b.n	828d8 <_malloc_r+0x90>
   829de:	4422      	add	r2, r4
   829e0:	6850      	ldr	r0, [r2, #4]
   829e2:	68e3      	ldr	r3, [r4, #12]
   829e4:	68a1      	ldr	r1, [r4, #8]
   829e6:	f040 0501 	orr.w	r5, r0, #1
   829ea:	60cb      	str	r3, [r1, #12]
   829ec:	4630      	mov	r0, r6
   829ee:	6099      	str	r1, [r3, #8]
   829f0:	6055      	str	r5, [r2, #4]
   829f2:	f000 faed 	bl	82fd0 <__malloc_unlock>
   829f6:	3408      	adds	r4, #8
   829f8:	4620      	mov	r0, r4
   829fa:	b003      	add	sp, #12
   829fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a00:	4421      	add	r1, r4
   82a02:	684b      	ldr	r3, [r1, #4]
   82a04:	4630      	mov	r0, r6
   82a06:	f043 0301 	orr.w	r3, r3, #1
   82a0a:	604b      	str	r3, [r1, #4]
   82a0c:	f000 fae0 	bl	82fd0 <__malloc_unlock>
   82a10:	3408      	adds	r4, #8
   82a12:	4620      	mov	r0, r4
   82a14:	b003      	add	sp, #12
   82a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a1a:	68bc      	ldr	r4, [r7, #8]
   82a1c:	6863      	ldr	r3, [r4, #4]
   82a1e:	f023 0903 	bic.w	r9, r3, #3
   82a22:	45a9      	cmp	r9, r5
   82a24:	d304      	bcc.n	82a30 <_malloc_r+0x1e8>
   82a26:	ebc5 0309 	rsb	r3, r5, r9
   82a2a:	2b0f      	cmp	r3, #15
   82a2c:	f300 8091 	bgt.w	82b52 <_malloc_r+0x30a>
   82a30:	4b51      	ldr	r3, [pc, #324]	; (82b78 <_malloc_r+0x330>)
   82a32:	4a52      	ldr	r2, [pc, #328]	; (82b7c <_malloc_r+0x334>)
   82a34:	6819      	ldr	r1, [r3, #0]
   82a36:	6813      	ldr	r3, [r2, #0]
   82a38:	eb05 0a01 	add.w	sl, r5, r1
   82a3c:	3301      	adds	r3, #1
   82a3e:	eb04 0b09 	add.w	fp, r4, r9
   82a42:	f000 8161 	beq.w	82d08 <_malloc_r+0x4c0>
   82a46:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   82a4a:	f10a 0a0f 	add.w	sl, sl, #15
   82a4e:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   82a52:	f02a 0a0f 	bic.w	sl, sl, #15
   82a56:	4630      	mov	r0, r6
   82a58:	4651      	mov	r1, sl
   82a5a:	9201      	str	r2, [sp, #4]
   82a5c:	f000 fc9a 	bl	83394 <_sbrk_r>
   82a60:	f1b0 3fff 	cmp.w	r0, #4294967295
   82a64:	4680      	mov	r8, r0
   82a66:	9a01      	ldr	r2, [sp, #4]
   82a68:	f000 8101 	beq.w	82c6e <_malloc_r+0x426>
   82a6c:	4583      	cmp	fp, r0
   82a6e:	f200 80fb 	bhi.w	82c68 <_malloc_r+0x420>
   82a72:	f8df c114 	ldr.w	ip, [pc, #276]	; 82b88 <_malloc_r+0x340>
   82a76:	45c3      	cmp	fp, r8
   82a78:	f8dc 3000 	ldr.w	r3, [ip]
   82a7c:	4453      	add	r3, sl
   82a7e:	f8cc 3000 	str.w	r3, [ip]
   82a82:	f000 814a 	beq.w	82d1a <_malloc_r+0x4d2>
   82a86:	6812      	ldr	r2, [r2, #0]
   82a88:	493c      	ldr	r1, [pc, #240]	; (82b7c <_malloc_r+0x334>)
   82a8a:	3201      	adds	r2, #1
   82a8c:	bf1b      	ittet	ne
   82a8e:	ebcb 0b08 	rsbne	fp, fp, r8
   82a92:	445b      	addne	r3, fp
   82a94:	f8c1 8000 	streq.w	r8, [r1]
   82a98:	f8cc 3000 	strne.w	r3, [ip]
   82a9c:	f018 0307 	ands.w	r3, r8, #7
   82aa0:	f000 8114 	beq.w	82ccc <_malloc_r+0x484>
   82aa4:	f1c3 0208 	rsb	r2, r3, #8
   82aa8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   82aac:	4490      	add	r8, r2
   82aae:	3308      	adds	r3, #8
   82ab0:	44c2      	add	sl, r8
   82ab2:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   82ab6:	ebca 0a03 	rsb	sl, sl, r3
   82aba:	4651      	mov	r1, sl
   82abc:	4630      	mov	r0, r6
   82abe:	f8cd c004 	str.w	ip, [sp, #4]
   82ac2:	f000 fc67 	bl	83394 <_sbrk_r>
   82ac6:	1c43      	adds	r3, r0, #1
   82ac8:	f8dd c004 	ldr.w	ip, [sp, #4]
   82acc:	f000 8135 	beq.w	82d3a <_malloc_r+0x4f2>
   82ad0:	ebc8 0200 	rsb	r2, r8, r0
   82ad4:	4452      	add	r2, sl
   82ad6:	f042 0201 	orr.w	r2, r2, #1
   82ada:	f8dc 3000 	ldr.w	r3, [ip]
   82ade:	42bc      	cmp	r4, r7
   82ae0:	4453      	add	r3, sl
   82ae2:	f8c7 8008 	str.w	r8, [r7, #8]
   82ae6:	f8cc 3000 	str.w	r3, [ip]
   82aea:	f8c8 2004 	str.w	r2, [r8, #4]
   82aee:	f8df a098 	ldr.w	sl, [pc, #152]	; 82b88 <_malloc_r+0x340>
   82af2:	d015      	beq.n	82b20 <_malloc_r+0x2d8>
   82af4:	f1b9 0f0f 	cmp.w	r9, #15
   82af8:	f240 80eb 	bls.w	82cd2 <_malloc_r+0x48a>
   82afc:	6861      	ldr	r1, [r4, #4]
   82afe:	f1a9 020c 	sub.w	r2, r9, #12
   82b02:	f022 0207 	bic.w	r2, r2, #7
   82b06:	f001 0101 	and.w	r1, r1, #1
   82b0a:	ea42 0e01 	orr.w	lr, r2, r1
   82b0e:	2005      	movs	r0, #5
   82b10:	18a1      	adds	r1, r4, r2
   82b12:	2a0f      	cmp	r2, #15
   82b14:	f8c4 e004 	str.w	lr, [r4, #4]
   82b18:	6048      	str	r0, [r1, #4]
   82b1a:	6088      	str	r0, [r1, #8]
   82b1c:	f200 8111 	bhi.w	82d42 <_malloc_r+0x4fa>
   82b20:	4a17      	ldr	r2, [pc, #92]	; (82b80 <_malloc_r+0x338>)
   82b22:	68bc      	ldr	r4, [r7, #8]
   82b24:	6811      	ldr	r1, [r2, #0]
   82b26:	428b      	cmp	r3, r1
   82b28:	bf88      	it	hi
   82b2a:	6013      	strhi	r3, [r2, #0]
   82b2c:	4a15      	ldr	r2, [pc, #84]	; (82b84 <_malloc_r+0x33c>)
   82b2e:	6811      	ldr	r1, [r2, #0]
   82b30:	428b      	cmp	r3, r1
   82b32:	bf88      	it	hi
   82b34:	6013      	strhi	r3, [r2, #0]
   82b36:	6862      	ldr	r2, [r4, #4]
   82b38:	f022 0203 	bic.w	r2, r2, #3
   82b3c:	4295      	cmp	r5, r2
   82b3e:	ebc5 0302 	rsb	r3, r5, r2
   82b42:	d801      	bhi.n	82b48 <_malloc_r+0x300>
   82b44:	2b0f      	cmp	r3, #15
   82b46:	dc04      	bgt.n	82b52 <_malloc_r+0x30a>
   82b48:	4630      	mov	r0, r6
   82b4a:	f000 fa41 	bl	82fd0 <__malloc_unlock>
   82b4e:	2400      	movs	r4, #0
   82b50:	e6a6      	b.n	828a0 <_malloc_r+0x58>
   82b52:	f045 0201 	orr.w	r2, r5, #1
   82b56:	f043 0301 	orr.w	r3, r3, #1
   82b5a:	4425      	add	r5, r4
   82b5c:	6062      	str	r2, [r4, #4]
   82b5e:	4630      	mov	r0, r6
   82b60:	60bd      	str	r5, [r7, #8]
   82b62:	606b      	str	r3, [r5, #4]
   82b64:	f000 fa34 	bl	82fd0 <__malloc_unlock>
   82b68:	3408      	adds	r4, #8
   82b6a:	4620      	mov	r0, r4
   82b6c:	b003      	add	sp, #12
   82b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b72:	bf00      	nop
   82b74:	20070588 	.word	0x20070588
   82b78:	20070ad4 	.word	0x20070ad4
   82b7c:	20070994 	.word	0x20070994
   82b80:	20070ad0 	.word	0x20070ad0
   82b84:	20070acc 	.word	0x20070acc
   82b88:	20070ad8 	.word	0x20070ad8
   82b8c:	f1bc 0f14 	cmp.w	ip, #20
   82b90:	d961      	bls.n	82c56 <_malloc_r+0x40e>
   82b92:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   82b96:	f200 808f 	bhi.w	82cb8 <_malloc_r+0x470>
   82b9a:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   82b9e:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   82ba2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82ba6:	e697      	b.n	828d8 <_malloc_r+0x90>
   82ba8:	0a4b      	lsrs	r3, r1, #9
   82baa:	2b04      	cmp	r3, #4
   82bac:	d958      	bls.n	82c60 <_malloc_r+0x418>
   82bae:	2b14      	cmp	r3, #20
   82bb0:	f200 80ad 	bhi.w	82d0e <_malloc_r+0x4c6>
   82bb4:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   82bb8:	0050      	lsls	r0, r2, #1
   82bba:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   82bbe:	6883      	ldr	r3, [r0, #8]
   82bc0:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82d7c <_malloc_r+0x534>
   82bc4:	4283      	cmp	r3, r0
   82bc6:	f000 808a 	beq.w	82cde <_malloc_r+0x496>
   82bca:	685a      	ldr	r2, [r3, #4]
   82bcc:	f022 0203 	bic.w	r2, r2, #3
   82bd0:	4291      	cmp	r1, r2
   82bd2:	d202      	bcs.n	82bda <_malloc_r+0x392>
   82bd4:	689b      	ldr	r3, [r3, #8]
   82bd6:	4298      	cmp	r0, r3
   82bd8:	d1f7      	bne.n	82bca <_malloc_r+0x382>
   82bda:	68d9      	ldr	r1, [r3, #12]
   82bdc:	687a      	ldr	r2, [r7, #4]
   82bde:	60e1      	str	r1, [r4, #12]
   82be0:	60a3      	str	r3, [r4, #8]
   82be2:	608c      	str	r4, [r1, #8]
   82be4:	60dc      	str	r4, [r3, #12]
   82be6:	e6b6      	b.n	82956 <_malloc_r+0x10e>
   82be8:	f045 0701 	orr.w	r7, r5, #1
   82bec:	f042 0101 	orr.w	r1, r2, #1
   82bf0:	4425      	add	r5, r4
   82bf2:	6067      	str	r7, [r4, #4]
   82bf4:	4630      	mov	r0, r6
   82bf6:	615d      	str	r5, [r3, #20]
   82bf8:	611d      	str	r5, [r3, #16]
   82bfa:	f8c5 e00c 	str.w	lr, [r5, #12]
   82bfe:	f8c5 e008 	str.w	lr, [r5, #8]
   82c02:	6069      	str	r1, [r5, #4]
   82c04:	50aa      	str	r2, [r5, r2]
   82c06:	3408      	adds	r4, #8
   82c08:	f000 f9e2 	bl	82fd0 <__malloc_unlock>
   82c0c:	e648      	b.n	828a0 <_malloc_r+0x58>
   82c0e:	685a      	ldr	r2, [r3, #4]
   82c10:	e6a1      	b.n	82956 <_malloc_r+0x10e>
   82c12:	f109 0901 	add.w	r9, r9, #1
   82c16:	f019 0f03 	tst.w	r9, #3
   82c1a:	f104 0408 	add.w	r4, r4, #8
   82c1e:	f47f aead 	bne.w	8297c <_malloc_r+0x134>
   82c22:	e02d      	b.n	82c80 <_malloc_r+0x438>
   82c24:	f104 0308 	add.w	r3, r4, #8
   82c28:	6964      	ldr	r4, [r4, #20]
   82c2a:	42a3      	cmp	r3, r4
   82c2c:	bf08      	it	eq
   82c2e:	f10c 0c02 	addeq.w	ip, ip, #2
   82c32:	f43f ae67 	beq.w	82904 <_malloc_r+0xbc>
   82c36:	e623      	b.n	82880 <_malloc_r+0x38>
   82c38:	4419      	add	r1, r3
   82c3a:	6848      	ldr	r0, [r1, #4]
   82c3c:	461c      	mov	r4, r3
   82c3e:	f854 2f08 	ldr.w	r2, [r4, #8]!
   82c42:	68db      	ldr	r3, [r3, #12]
   82c44:	f040 0501 	orr.w	r5, r0, #1
   82c48:	604d      	str	r5, [r1, #4]
   82c4a:	4630      	mov	r0, r6
   82c4c:	60d3      	str	r3, [r2, #12]
   82c4e:	609a      	str	r2, [r3, #8]
   82c50:	f000 f9be 	bl	82fd0 <__malloc_unlock>
   82c54:	e624      	b.n	828a0 <_malloc_r+0x58>
   82c56:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   82c5a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82c5e:	e63b      	b.n	828d8 <_malloc_r+0x90>
   82c60:	098a      	lsrs	r2, r1, #6
   82c62:	3238      	adds	r2, #56	; 0x38
   82c64:	0050      	lsls	r0, r2, #1
   82c66:	e7a8      	b.n	82bba <_malloc_r+0x372>
   82c68:	42bc      	cmp	r4, r7
   82c6a:	f43f af02 	beq.w	82a72 <_malloc_r+0x22a>
   82c6e:	68bc      	ldr	r4, [r7, #8]
   82c70:	6862      	ldr	r2, [r4, #4]
   82c72:	f022 0203 	bic.w	r2, r2, #3
   82c76:	e761      	b.n	82b3c <_malloc_r+0x2f4>
   82c78:	f8d8 8000 	ldr.w	r8, [r8]
   82c7c:	4598      	cmp	r8, r3
   82c7e:	d17a      	bne.n	82d76 <_malloc_r+0x52e>
   82c80:	f01c 0f03 	tst.w	ip, #3
   82c84:	f1a8 0308 	sub.w	r3, r8, #8
   82c88:	f10c 3cff 	add.w	ip, ip, #4294967295
   82c8c:	d1f4      	bne.n	82c78 <_malloc_r+0x430>
   82c8e:	687b      	ldr	r3, [r7, #4]
   82c90:	ea23 0300 	bic.w	r3, r3, r0
   82c94:	607b      	str	r3, [r7, #4]
   82c96:	0040      	lsls	r0, r0, #1
   82c98:	4298      	cmp	r0, r3
   82c9a:	f63f aebe 	bhi.w	82a1a <_malloc_r+0x1d2>
   82c9e:	2800      	cmp	r0, #0
   82ca0:	f43f aebb 	beq.w	82a1a <_malloc_r+0x1d2>
   82ca4:	4203      	tst	r3, r0
   82ca6:	46cc      	mov	ip, r9
   82ca8:	f47f ae64 	bne.w	82974 <_malloc_r+0x12c>
   82cac:	0040      	lsls	r0, r0, #1
   82cae:	4203      	tst	r3, r0
   82cb0:	f10c 0c04 	add.w	ip, ip, #4
   82cb4:	d0fa      	beq.n	82cac <_malloc_r+0x464>
   82cb6:	e65d      	b.n	82974 <_malloc_r+0x12c>
   82cb8:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   82cbc:	d819      	bhi.n	82cf2 <_malloc_r+0x4aa>
   82cbe:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   82cc2:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   82cc6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82cca:	e605      	b.n	828d8 <_malloc_r+0x90>
   82ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82cd0:	e6ee      	b.n	82ab0 <_malloc_r+0x268>
   82cd2:	2301      	movs	r3, #1
   82cd4:	f8c8 3004 	str.w	r3, [r8, #4]
   82cd8:	4644      	mov	r4, r8
   82cda:	2200      	movs	r2, #0
   82cdc:	e72e      	b.n	82b3c <_malloc_r+0x2f4>
   82cde:	1092      	asrs	r2, r2, #2
   82ce0:	2001      	movs	r0, #1
   82ce2:	4090      	lsls	r0, r2
   82ce4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   82ce8:	4619      	mov	r1, r3
   82cea:	4302      	orrs	r2, r0
   82cec:	f8c8 2004 	str.w	r2, [r8, #4]
   82cf0:	e775      	b.n	82bde <_malloc_r+0x396>
   82cf2:	f240 5354 	movw	r3, #1364	; 0x554
   82cf6:	459c      	cmp	ip, r3
   82cf8:	d81b      	bhi.n	82d32 <_malloc_r+0x4ea>
   82cfa:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   82cfe:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   82d02:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82d06:	e5e7      	b.n	828d8 <_malloc_r+0x90>
   82d08:	f10a 0a10 	add.w	sl, sl, #16
   82d0c:	e6a3      	b.n	82a56 <_malloc_r+0x20e>
   82d0e:	2b54      	cmp	r3, #84	; 0x54
   82d10:	d81f      	bhi.n	82d52 <_malloc_r+0x50a>
   82d12:	0b0a      	lsrs	r2, r1, #12
   82d14:	326e      	adds	r2, #110	; 0x6e
   82d16:	0050      	lsls	r0, r2, #1
   82d18:	e74f      	b.n	82bba <_malloc_r+0x372>
   82d1a:	f3cb 010b 	ubfx	r1, fp, #0, #12
   82d1e:	2900      	cmp	r1, #0
   82d20:	f47f aeb1 	bne.w	82a86 <_malloc_r+0x23e>
   82d24:	eb0a 0109 	add.w	r1, sl, r9
   82d28:	68ba      	ldr	r2, [r7, #8]
   82d2a:	f041 0101 	orr.w	r1, r1, #1
   82d2e:	6051      	str	r1, [r2, #4]
   82d30:	e6f6      	b.n	82b20 <_malloc_r+0x2d8>
   82d32:	21fc      	movs	r1, #252	; 0xfc
   82d34:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   82d38:	e5ce      	b.n	828d8 <_malloc_r+0x90>
   82d3a:	2201      	movs	r2, #1
   82d3c:	f04f 0a00 	mov.w	sl, #0
   82d40:	e6cb      	b.n	82ada <_malloc_r+0x292>
   82d42:	f104 0108 	add.w	r1, r4, #8
   82d46:	4630      	mov	r0, r6
   82d48:	f7ff fa80 	bl	8224c <_free_r>
   82d4c:	f8da 3000 	ldr.w	r3, [sl]
   82d50:	e6e6      	b.n	82b20 <_malloc_r+0x2d8>
   82d52:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82d56:	d803      	bhi.n	82d60 <_malloc_r+0x518>
   82d58:	0bca      	lsrs	r2, r1, #15
   82d5a:	3277      	adds	r2, #119	; 0x77
   82d5c:	0050      	lsls	r0, r2, #1
   82d5e:	e72c      	b.n	82bba <_malloc_r+0x372>
   82d60:	f240 5254 	movw	r2, #1364	; 0x554
   82d64:	4293      	cmp	r3, r2
   82d66:	d803      	bhi.n	82d70 <_malloc_r+0x528>
   82d68:	0c8a      	lsrs	r2, r1, #18
   82d6a:	327c      	adds	r2, #124	; 0x7c
   82d6c:	0050      	lsls	r0, r2, #1
   82d6e:	e724      	b.n	82bba <_malloc_r+0x372>
   82d70:	20fc      	movs	r0, #252	; 0xfc
   82d72:	227e      	movs	r2, #126	; 0x7e
   82d74:	e721      	b.n	82bba <_malloc_r+0x372>
   82d76:	687b      	ldr	r3, [r7, #4]
   82d78:	e78d      	b.n	82c96 <_malloc_r+0x44e>
   82d7a:	bf00      	nop
   82d7c:	20070588 	.word	0x20070588

00082d80 <memchr>:
   82d80:	0783      	lsls	r3, r0, #30
   82d82:	b470      	push	{r4, r5, r6}
   82d84:	b2c9      	uxtb	r1, r1
   82d86:	d040      	beq.n	82e0a <memchr+0x8a>
   82d88:	1e54      	subs	r4, r2, #1
   82d8a:	b32a      	cbz	r2, 82dd8 <memchr+0x58>
   82d8c:	7803      	ldrb	r3, [r0, #0]
   82d8e:	428b      	cmp	r3, r1
   82d90:	d023      	beq.n	82dda <memchr+0x5a>
   82d92:	1c43      	adds	r3, r0, #1
   82d94:	e004      	b.n	82da0 <memchr+0x20>
   82d96:	b1fc      	cbz	r4, 82dd8 <memchr+0x58>
   82d98:	7805      	ldrb	r5, [r0, #0]
   82d9a:	4614      	mov	r4, r2
   82d9c:	428d      	cmp	r5, r1
   82d9e:	d01c      	beq.n	82dda <memchr+0x5a>
   82da0:	f013 0f03 	tst.w	r3, #3
   82da4:	4618      	mov	r0, r3
   82da6:	f104 32ff 	add.w	r2, r4, #4294967295
   82daa:	f103 0301 	add.w	r3, r3, #1
   82dae:	d1f2      	bne.n	82d96 <memchr+0x16>
   82db0:	2c03      	cmp	r4, #3
   82db2:	d814      	bhi.n	82dde <memchr+0x5e>
   82db4:	1e65      	subs	r5, r4, #1
   82db6:	b354      	cbz	r4, 82e0e <memchr+0x8e>
   82db8:	7803      	ldrb	r3, [r0, #0]
   82dba:	428b      	cmp	r3, r1
   82dbc:	d00d      	beq.n	82dda <memchr+0x5a>
   82dbe:	1c42      	adds	r2, r0, #1
   82dc0:	2300      	movs	r3, #0
   82dc2:	e002      	b.n	82dca <memchr+0x4a>
   82dc4:	7804      	ldrb	r4, [r0, #0]
   82dc6:	428c      	cmp	r4, r1
   82dc8:	d007      	beq.n	82dda <memchr+0x5a>
   82dca:	42ab      	cmp	r3, r5
   82dcc:	4610      	mov	r0, r2
   82dce:	f103 0301 	add.w	r3, r3, #1
   82dd2:	f102 0201 	add.w	r2, r2, #1
   82dd6:	d1f5      	bne.n	82dc4 <memchr+0x44>
   82dd8:	2000      	movs	r0, #0
   82dda:	bc70      	pop	{r4, r5, r6}
   82ddc:	4770      	bx	lr
   82dde:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   82de2:	4603      	mov	r3, r0
   82de4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   82de8:	681a      	ldr	r2, [r3, #0]
   82dea:	4618      	mov	r0, r3
   82dec:	4072      	eors	r2, r6
   82dee:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   82df2:	ea25 0202 	bic.w	r2, r5, r2
   82df6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   82dfa:	f103 0304 	add.w	r3, r3, #4
   82dfe:	d1d9      	bne.n	82db4 <memchr+0x34>
   82e00:	3c04      	subs	r4, #4
   82e02:	2c03      	cmp	r4, #3
   82e04:	4618      	mov	r0, r3
   82e06:	d8ef      	bhi.n	82de8 <memchr+0x68>
   82e08:	e7d4      	b.n	82db4 <memchr+0x34>
   82e0a:	4614      	mov	r4, r2
   82e0c:	e7d0      	b.n	82db0 <memchr+0x30>
   82e0e:	4620      	mov	r0, r4
   82e10:	e7e3      	b.n	82dda <memchr+0x5a>
   82e12:	bf00      	nop

00082e14 <memcpy>:
   82e14:	4684      	mov	ip, r0
   82e16:	ea41 0300 	orr.w	r3, r1, r0
   82e1a:	f013 0303 	ands.w	r3, r3, #3
   82e1e:	d149      	bne.n	82eb4 <memcpy+0xa0>
   82e20:	3a40      	subs	r2, #64	; 0x40
   82e22:	d323      	bcc.n	82e6c <memcpy+0x58>
   82e24:	680b      	ldr	r3, [r1, #0]
   82e26:	6003      	str	r3, [r0, #0]
   82e28:	684b      	ldr	r3, [r1, #4]
   82e2a:	6043      	str	r3, [r0, #4]
   82e2c:	688b      	ldr	r3, [r1, #8]
   82e2e:	6083      	str	r3, [r0, #8]
   82e30:	68cb      	ldr	r3, [r1, #12]
   82e32:	60c3      	str	r3, [r0, #12]
   82e34:	690b      	ldr	r3, [r1, #16]
   82e36:	6103      	str	r3, [r0, #16]
   82e38:	694b      	ldr	r3, [r1, #20]
   82e3a:	6143      	str	r3, [r0, #20]
   82e3c:	698b      	ldr	r3, [r1, #24]
   82e3e:	6183      	str	r3, [r0, #24]
   82e40:	69cb      	ldr	r3, [r1, #28]
   82e42:	61c3      	str	r3, [r0, #28]
   82e44:	6a0b      	ldr	r3, [r1, #32]
   82e46:	6203      	str	r3, [r0, #32]
   82e48:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82e4a:	6243      	str	r3, [r0, #36]	; 0x24
   82e4c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82e4e:	6283      	str	r3, [r0, #40]	; 0x28
   82e50:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82e52:	62c3      	str	r3, [r0, #44]	; 0x2c
   82e54:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82e56:	6303      	str	r3, [r0, #48]	; 0x30
   82e58:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82e5a:	6343      	str	r3, [r0, #52]	; 0x34
   82e5c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82e5e:	6383      	str	r3, [r0, #56]	; 0x38
   82e60:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82e62:	63c3      	str	r3, [r0, #60]	; 0x3c
   82e64:	3040      	adds	r0, #64	; 0x40
   82e66:	3140      	adds	r1, #64	; 0x40
   82e68:	3a40      	subs	r2, #64	; 0x40
   82e6a:	d2db      	bcs.n	82e24 <memcpy+0x10>
   82e6c:	3230      	adds	r2, #48	; 0x30
   82e6e:	d30b      	bcc.n	82e88 <memcpy+0x74>
   82e70:	680b      	ldr	r3, [r1, #0]
   82e72:	6003      	str	r3, [r0, #0]
   82e74:	684b      	ldr	r3, [r1, #4]
   82e76:	6043      	str	r3, [r0, #4]
   82e78:	688b      	ldr	r3, [r1, #8]
   82e7a:	6083      	str	r3, [r0, #8]
   82e7c:	68cb      	ldr	r3, [r1, #12]
   82e7e:	60c3      	str	r3, [r0, #12]
   82e80:	3010      	adds	r0, #16
   82e82:	3110      	adds	r1, #16
   82e84:	3a10      	subs	r2, #16
   82e86:	d2f3      	bcs.n	82e70 <memcpy+0x5c>
   82e88:	320c      	adds	r2, #12
   82e8a:	d305      	bcc.n	82e98 <memcpy+0x84>
   82e8c:	f851 3b04 	ldr.w	r3, [r1], #4
   82e90:	f840 3b04 	str.w	r3, [r0], #4
   82e94:	3a04      	subs	r2, #4
   82e96:	d2f9      	bcs.n	82e8c <memcpy+0x78>
   82e98:	3204      	adds	r2, #4
   82e9a:	d008      	beq.n	82eae <memcpy+0x9a>
   82e9c:	07d2      	lsls	r2, r2, #31
   82e9e:	bf1c      	itt	ne
   82ea0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82ea4:	f800 3b01 	strbne.w	r3, [r0], #1
   82ea8:	d301      	bcc.n	82eae <memcpy+0x9a>
   82eaa:	880b      	ldrh	r3, [r1, #0]
   82eac:	8003      	strh	r3, [r0, #0]
   82eae:	4660      	mov	r0, ip
   82eb0:	4770      	bx	lr
   82eb2:	bf00      	nop
   82eb4:	2a08      	cmp	r2, #8
   82eb6:	d313      	bcc.n	82ee0 <memcpy+0xcc>
   82eb8:	078b      	lsls	r3, r1, #30
   82eba:	d0b1      	beq.n	82e20 <memcpy+0xc>
   82ebc:	f010 0303 	ands.w	r3, r0, #3
   82ec0:	d0ae      	beq.n	82e20 <memcpy+0xc>
   82ec2:	f1c3 0304 	rsb	r3, r3, #4
   82ec6:	1ad2      	subs	r2, r2, r3
   82ec8:	07db      	lsls	r3, r3, #31
   82eca:	bf1c      	itt	ne
   82ecc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82ed0:	f800 3b01 	strbne.w	r3, [r0], #1
   82ed4:	d3a4      	bcc.n	82e20 <memcpy+0xc>
   82ed6:	f831 3b02 	ldrh.w	r3, [r1], #2
   82eda:	f820 3b02 	strh.w	r3, [r0], #2
   82ede:	e79f      	b.n	82e20 <memcpy+0xc>
   82ee0:	3a04      	subs	r2, #4
   82ee2:	d3d9      	bcc.n	82e98 <memcpy+0x84>
   82ee4:	3a01      	subs	r2, #1
   82ee6:	f811 3b01 	ldrb.w	r3, [r1], #1
   82eea:	f800 3b01 	strb.w	r3, [r0], #1
   82eee:	d2f9      	bcs.n	82ee4 <memcpy+0xd0>
   82ef0:	780b      	ldrb	r3, [r1, #0]
   82ef2:	7003      	strb	r3, [r0, #0]
   82ef4:	784b      	ldrb	r3, [r1, #1]
   82ef6:	7043      	strb	r3, [r0, #1]
   82ef8:	788b      	ldrb	r3, [r1, #2]
   82efa:	7083      	strb	r3, [r0, #2]
   82efc:	4660      	mov	r0, ip
   82efe:	4770      	bx	lr

00082f00 <memmove>:
   82f00:	4288      	cmp	r0, r1
   82f02:	b4f0      	push	{r4, r5, r6, r7}
   82f04:	d910      	bls.n	82f28 <memmove+0x28>
   82f06:	188c      	adds	r4, r1, r2
   82f08:	42a0      	cmp	r0, r4
   82f0a:	d20d      	bcs.n	82f28 <memmove+0x28>
   82f0c:	1885      	adds	r5, r0, r2
   82f0e:	1e53      	subs	r3, r2, #1
   82f10:	b142      	cbz	r2, 82f24 <memmove+0x24>
   82f12:	4621      	mov	r1, r4
   82f14:	462a      	mov	r2, r5
   82f16:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   82f1a:	3b01      	subs	r3, #1
   82f1c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   82f20:	1c5c      	adds	r4, r3, #1
   82f22:	d1f8      	bne.n	82f16 <memmove+0x16>
   82f24:	bcf0      	pop	{r4, r5, r6, r7}
   82f26:	4770      	bx	lr
   82f28:	2a0f      	cmp	r2, #15
   82f2a:	d944      	bls.n	82fb6 <memmove+0xb6>
   82f2c:	ea40 0301 	orr.w	r3, r0, r1
   82f30:	079b      	lsls	r3, r3, #30
   82f32:	d144      	bne.n	82fbe <memmove+0xbe>
   82f34:	f1a2 0710 	sub.w	r7, r2, #16
   82f38:	093f      	lsrs	r7, r7, #4
   82f3a:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   82f3e:	3610      	adds	r6, #16
   82f40:	460c      	mov	r4, r1
   82f42:	4603      	mov	r3, r0
   82f44:	6825      	ldr	r5, [r4, #0]
   82f46:	3310      	adds	r3, #16
   82f48:	f843 5c10 	str.w	r5, [r3, #-16]
   82f4c:	6865      	ldr	r5, [r4, #4]
   82f4e:	3410      	adds	r4, #16
   82f50:	f843 5c0c 	str.w	r5, [r3, #-12]
   82f54:	f854 5c08 	ldr.w	r5, [r4, #-8]
   82f58:	f843 5c08 	str.w	r5, [r3, #-8]
   82f5c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   82f60:	f843 5c04 	str.w	r5, [r3, #-4]
   82f64:	42b3      	cmp	r3, r6
   82f66:	d1ed      	bne.n	82f44 <memmove+0x44>
   82f68:	1c7b      	adds	r3, r7, #1
   82f6a:	f002 0c0f 	and.w	ip, r2, #15
   82f6e:	011b      	lsls	r3, r3, #4
   82f70:	f1bc 0f03 	cmp.w	ip, #3
   82f74:	4419      	add	r1, r3
   82f76:	4403      	add	r3, r0
   82f78:	d923      	bls.n	82fc2 <memmove+0xc2>
   82f7a:	460e      	mov	r6, r1
   82f7c:	461d      	mov	r5, r3
   82f7e:	4664      	mov	r4, ip
   82f80:	f856 7b04 	ldr.w	r7, [r6], #4
   82f84:	3c04      	subs	r4, #4
   82f86:	2c03      	cmp	r4, #3
   82f88:	f845 7b04 	str.w	r7, [r5], #4
   82f8c:	d8f8      	bhi.n	82f80 <memmove+0x80>
   82f8e:	f1ac 0404 	sub.w	r4, ip, #4
   82f92:	f024 0403 	bic.w	r4, r4, #3
   82f96:	3404      	adds	r4, #4
   82f98:	f002 0203 	and.w	r2, r2, #3
   82f9c:	4423      	add	r3, r4
   82f9e:	4421      	add	r1, r4
   82fa0:	2a00      	cmp	r2, #0
   82fa2:	d0bf      	beq.n	82f24 <memmove+0x24>
   82fa4:	441a      	add	r2, r3
   82fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
   82faa:	f803 4b01 	strb.w	r4, [r3], #1
   82fae:	4293      	cmp	r3, r2
   82fb0:	d1f9      	bne.n	82fa6 <memmove+0xa6>
   82fb2:	bcf0      	pop	{r4, r5, r6, r7}
   82fb4:	4770      	bx	lr
   82fb6:	4603      	mov	r3, r0
   82fb8:	2a00      	cmp	r2, #0
   82fba:	d1f3      	bne.n	82fa4 <memmove+0xa4>
   82fbc:	e7b2      	b.n	82f24 <memmove+0x24>
   82fbe:	4603      	mov	r3, r0
   82fc0:	e7f0      	b.n	82fa4 <memmove+0xa4>
   82fc2:	4662      	mov	r2, ip
   82fc4:	2a00      	cmp	r2, #0
   82fc6:	d1ed      	bne.n	82fa4 <memmove+0xa4>
   82fc8:	e7ac      	b.n	82f24 <memmove+0x24>
   82fca:	bf00      	nop

00082fcc <__malloc_lock>:
   82fcc:	4770      	bx	lr
   82fce:	bf00      	nop

00082fd0 <__malloc_unlock>:
   82fd0:	4770      	bx	lr
   82fd2:	bf00      	nop

00082fd4 <_realloc_r>:
   82fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82fd8:	460c      	mov	r4, r1
   82fda:	b083      	sub	sp, #12
   82fdc:	4690      	mov	r8, r2
   82fde:	4681      	mov	r9, r0
   82fe0:	2900      	cmp	r1, #0
   82fe2:	f000 80ba 	beq.w	8315a <_realloc_r+0x186>
   82fe6:	f7ff fff1 	bl	82fcc <__malloc_lock>
   82fea:	f108 060b 	add.w	r6, r8, #11
   82fee:	f854 3c04 	ldr.w	r3, [r4, #-4]
   82ff2:	2e16      	cmp	r6, #22
   82ff4:	f023 0503 	bic.w	r5, r3, #3
   82ff8:	f1a4 0708 	sub.w	r7, r4, #8
   82ffc:	d84b      	bhi.n	83096 <_realloc_r+0xc2>
   82ffe:	2110      	movs	r1, #16
   83000:	460e      	mov	r6, r1
   83002:	45b0      	cmp	r8, r6
   83004:	d84c      	bhi.n	830a0 <_realloc_r+0xcc>
   83006:	428d      	cmp	r5, r1
   83008:	da51      	bge.n	830ae <_realloc_r+0xda>
   8300a:	f8df b384 	ldr.w	fp, [pc, #900]	; 83390 <_realloc_r+0x3bc>
   8300e:	1978      	adds	r0, r7, r5
   83010:	f8db e008 	ldr.w	lr, [fp, #8]
   83014:	4586      	cmp	lr, r0
   83016:	f000 80a6 	beq.w	83166 <_realloc_r+0x192>
   8301a:	6842      	ldr	r2, [r0, #4]
   8301c:	f022 0c01 	bic.w	ip, r2, #1
   83020:	4484      	add	ip, r0
   83022:	f8dc c004 	ldr.w	ip, [ip, #4]
   83026:	f01c 0f01 	tst.w	ip, #1
   8302a:	d054      	beq.n	830d6 <_realloc_r+0x102>
   8302c:	2200      	movs	r2, #0
   8302e:	4610      	mov	r0, r2
   83030:	07db      	lsls	r3, r3, #31
   83032:	d46f      	bmi.n	83114 <_realloc_r+0x140>
   83034:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83038:	ebc3 0a07 	rsb	sl, r3, r7
   8303c:	f8da 3004 	ldr.w	r3, [sl, #4]
   83040:	f023 0303 	bic.w	r3, r3, #3
   83044:	442b      	add	r3, r5
   83046:	2800      	cmp	r0, #0
   83048:	d062      	beq.n	83110 <_realloc_r+0x13c>
   8304a:	4570      	cmp	r0, lr
   8304c:	f000 80e9 	beq.w	83222 <_realloc_r+0x24e>
   83050:	eb02 0e03 	add.w	lr, r2, r3
   83054:	458e      	cmp	lr, r1
   83056:	db5b      	blt.n	83110 <_realloc_r+0x13c>
   83058:	68c3      	ldr	r3, [r0, #12]
   8305a:	6882      	ldr	r2, [r0, #8]
   8305c:	46d0      	mov	r8, sl
   8305e:	60d3      	str	r3, [r2, #12]
   83060:	609a      	str	r2, [r3, #8]
   83062:	f858 1f08 	ldr.w	r1, [r8, #8]!
   83066:	f8da 300c 	ldr.w	r3, [sl, #12]
   8306a:	1f2a      	subs	r2, r5, #4
   8306c:	2a24      	cmp	r2, #36	; 0x24
   8306e:	60cb      	str	r3, [r1, #12]
   83070:	6099      	str	r1, [r3, #8]
   83072:	f200 8123 	bhi.w	832bc <_realloc_r+0x2e8>
   83076:	2a13      	cmp	r2, #19
   83078:	f240 80b0 	bls.w	831dc <_realloc_r+0x208>
   8307c:	6823      	ldr	r3, [r4, #0]
   8307e:	2a1b      	cmp	r2, #27
   83080:	f8ca 3008 	str.w	r3, [sl, #8]
   83084:	6863      	ldr	r3, [r4, #4]
   83086:	f8ca 300c 	str.w	r3, [sl, #12]
   8308a:	f200 812b 	bhi.w	832e4 <_realloc_r+0x310>
   8308e:	3408      	adds	r4, #8
   83090:	f10a 0310 	add.w	r3, sl, #16
   83094:	e0a3      	b.n	831de <_realloc_r+0x20a>
   83096:	f026 0607 	bic.w	r6, r6, #7
   8309a:	2e00      	cmp	r6, #0
   8309c:	4631      	mov	r1, r6
   8309e:	dab0      	bge.n	83002 <_realloc_r+0x2e>
   830a0:	230c      	movs	r3, #12
   830a2:	2000      	movs	r0, #0
   830a4:	f8c9 3000 	str.w	r3, [r9]
   830a8:	b003      	add	sp, #12
   830aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   830ae:	46a0      	mov	r8, r4
   830b0:	1baa      	subs	r2, r5, r6
   830b2:	2a0f      	cmp	r2, #15
   830b4:	f003 0301 	and.w	r3, r3, #1
   830b8:	d81a      	bhi.n	830f0 <_realloc_r+0x11c>
   830ba:	432b      	orrs	r3, r5
   830bc:	607b      	str	r3, [r7, #4]
   830be:	443d      	add	r5, r7
   830c0:	686b      	ldr	r3, [r5, #4]
   830c2:	f043 0301 	orr.w	r3, r3, #1
   830c6:	606b      	str	r3, [r5, #4]
   830c8:	4648      	mov	r0, r9
   830ca:	f7ff ff81 	bl	82fd0 <__malloc_unlock>
   830ce:	4640      	mov	r0, r8
   830d0:	b003      	add	sp, #12
   830d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   830d6:	f022 0203 	bic.w	r2, r2, #3
   830da:	eb02 0c05 	add.w	ip, r2, r5
   830de:	458c      	cmp	ip, r1
   830e0:	dba6      	blt.n	83030 <_realloc_r+0x5c>
   830e2:	68c2      	ldr	r2, [r0, #12]
   830e4:	6881      	ldr	r1, [r0, #8]
   830e6:	46a0      	mov	r8, r4
   830e8:	60ca      	str	r2, [r1, #12]
   830ea:	4665      	mov	r5, ip
   830ec:	6091      	str	r1, [r2, #8]
   830ee:	e7df      	b.n	830b0 <_realloc_r+0xdc>
   830f0:	19b9      	adds	r1, r7, r6
   830f2:	4333      	orrs	r3, r6
   830f4:	f042 0001 	orr.w	r0, r2, #1
   830f8:	607b      	str	r3, [r7, #4]
   830fa:	440a      	add	r2, r1
   830fc:	6048      	str	r0, [r1, #4]
   830fe:	6853      	ldr	r3, [r2, #4]
   83100:	3108      	adds	r1, #8
   83102:	f043 0301 	orr.w	r3, r3, #1
   83106:	6053      	str	r3, [r2, #4]
   83108:	4648      	mov	r0, r9
   8310a:	f7ff f89f 	bl	8224c <_free_r>
   8310e:	e7db      	b.n	830c8 <_realloc_r+0xf4>
   83110:	428b      	cmp	r3, r1
   83112:	da33      	bge.n	8317c <_realloc_r+0x1a8>
   83114:	4641      	mov	r1, r8
   83116:	4648      	mov	r0, r9
   83118:	f7ff fb96 	bl	82848 <_malloc_r>
   8311c:	4680      	mov	r8, r0
   8311e:	2800      	cmp	r0, #0
   83120:	d0d2      	beq.n	830c8 <_realloc_r+0xf4>
   83122:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83126:	f1a0 0108 	sub.w	r1, r0, #8
   8312a:	f023 0201 	bic.w	r2, r3, #1
   8312e:	443a      	add	r2, r7
   83130:	4291      	cmp	r1, r2
   83132:	f000 80bc 	beq.w	832ae <_realloc_r+0x2da>
   83136:	1f2a      	subs	r2, r5, #4
   83138:	2a24      	cmp	r2, #36	; 0x24
   8313a:	d86e      	bhi.n	8321a <_realloc_r+0x246>
   8313c:	2a13      	cmp	r2, #19
   8313e:	d842      	bhi.n	831c6 <_realloc_r+0x1f2>
   83140:	4603      	mov	r3, r0
   83142:	4622      	mov	r2, r4
   83144:	6811      	ldr	r1, [r2, #0]
   83146:	6019      	str	r1, [r3, #0]
   83148:	6851      	ldr	r1, [r2, #4]
   8314a:	6059      	str	r1, [r3, #4]
   8314c:	6892      	ldr	r2, [r2, #8]
   8314e:	609a      	str	r2, [r3, #8]
   83150:	4621      	mov	r1, r4
   83152:	4648      	mov	r0, r9
   83154:	f7ff f87a 	bl	8224c <_free_r>
   83158:	e7b6      	b.n	830c8 <_realloc_r+0xf4>
   8315a:	4611      	mov	r1, r2
   8315c:	b003      	add	sp, #12
   8315e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83162:	f7ff bb71 	b.w	82848 <_malloc_r>
   83166:	f8de 2004 	ldr.w	r2, [lr, #4]
   8316a:	f106 0c10 	add.w	ip, r6, #16
   8316e:	f022 0203 	bic.w	r2, r2, #3
   83172:	1950      	adds	r0, r2, r5
   83174:	4560      	cmp	r0, ip
   83176:	da3d      	bge.n	831f4 <_realloc_r+0x220>
   83178:	4670      	mov	r0, lr
   8317a:	e759      	b.n	83030 <_realloc_r+0x5c>
   8317c:	46d0      	mov	r8, sl
   8317e:	f858 0f08 	ldr.w	r0, [r8, #8]!
   83182:	f8da 100c 	ldr.w	r1, [sl, #12]
   83186:	1f2a      	subs	r2, r5, #4
   83188:	2a24      	cmp	r2, #36	; 0x24
   8318a:	60c1      	str	r1, [r0, #12]
   8318c:	6088      	str	r0, [r1, #8]
   8318e:	f200 80a0 	bhi.w	832d2 <_realloc_r+0x2fe>
   83192:	2a13      	cmp	r2, #19
   83194:	f240 809b 	bls.w	832ce <_realloc_r+0x2fa>
   83198:	6821      	ldr	r1, [r4, #0]
   8319a:	2a1b      	cmp	r2, #27
   8319c:	f8ca 1008 	str.w	r1, [sl, #8]
   831a0:	6861      	ldr	r1, [r4, #4]
   831a2:	f8ca 100c 	str.w	r1, [sl, #12]
   831a6:	f200 80b2 	bhi.w	8330e <_realloc_r+0x33a>
   831aa:	3408      	adds	r4, #8
   831ac:	f10a 0210 	add.w	r2, sl, #16
   831b0:	6821      	ldr	r1, [r4, #0]
   831b2:	461d      	mov	r5, r3
   831b4:	6011      	str	r1, [r2, #0]
   831b6:	6861      	ldr	r1, [r4, #4]
   831b8:	4657      	mov	r7, sl
   831ba:	6051      	str	r1, [r2, #4]
   831bc:	68a3      	ldr	r3, [r4, #8]
   831be:	6093      	str	r3, [r2, #8]
   831c0:	f8da 3004 	ldr.w	r3, [sl, #4]
   831c4:	e774      	b.n	830b0 <_realloc_r+0xdc>
   831c6:	6823      	ldr	r3, [r4, #0]
   831c8:	2a1b      	cmp	r2, #27
   831ca:	6003      	str	r3, [r0, #0]
   831cc:	6863      	ldr	r3, [r4, #4]
   831ce:	6043      	str	r3, [r0, #4]
   831d0:	d862      	bhi.n	83298 <_realloc_r+0x2c4>
   831d2:	f100 0308 	add.w	r3, r0, #8
   831d6:	f104 0208 	add.w	r2, r4, #8
   831da:	e7b3      	b.n	83144 <_realloc_r+0x170>
   831dc:	4643      	mov	r3, r8
   831de:	6822      	ldr	r2, [r4, #0]
   831e0:	4675      	mov	r5, lr
   831e2:	601a      	str	r2, [r3, #0]
   831e4:	6862      	ldr	r2, [r4, #4]
   831e6:	4657      	mov	r7, sl
   831e8:	605a      	str	r2, [r3, #4]
   831ea:	68a2      	ldr	r2, [r4, #8]
   831ec:	609a      	str	r2, [r3, #8]
   831ee:	f8da 3004 	ldr.w	r3, [sl, #4]
   831f2:	e75d      	b.n	830b0 <_realloc_r+0xdc>
   831f4:	1b83      	subs	r3, r0, r6
   831f6:	4437      	add	r7, r6
   831f8:	f043 0301 	orr.w	r3, r3, #1
   831fc:	f8cb 7008 	str.w	r7, [fp, #8]
   83200:	607b      	str	r3, [r7, #4]
   83202:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83206:	4648      	mov	r0, r9
   83208:	f003 0301 	and.w	r3, r3, #1
   8320c:	431e      	orrs	r6, r3
   8320e:	f844 6c04 	str.w	r6, [r4, #-4]
   83212:	f7ff fedd 	bl	82fd0 <__malloc_unlock>
   83216:	4620      	mov	r0, r4
   83218:	e75a      	b.n	830d0 <_realloc_r+0xfc>
   8321a:	4621      	mov	r1, r4
   8321c:	f7ff fe70 	bl	82f00 <memmove>
   83220:	e796      	b.n	83150 <_realloc_r+0x17c>
   83222:	eb02 0c03 	add.w	ip, r2, r3
   83226:	f106 0210 	add.w	r2, r6, #16
   8322a:	4594      	cmp	ip, r2
   8322c:	f6ff af70 	blt.w	83110 <_realloc_r+0x13c>
   83230:	4657      	mov	r7, sl
   83232:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83236:	f8da 300c 	ldr.w	r3, [sl, #12]
   8323a:	1f2a      	subs	r2, r5, #4
   8323c:	2a24      	cmp	r2, #36	; 0x24
   8323e:	60cb      	str	r3, [r1, #12]
   83240:	6099      	str	r1, [r3, #8]
   83242:	f200 8086 	bhi.w	83352 <_realloc_r+0x37e>
   83246:	2a13      	cmp	r2, #19
   83248:	d977      	bls.n	8333a <_realloc_r+0x366>
   8324a:	6823      	ldr	r3, [r4, #0]
   8324c:	2a1b      	cmp	r2, #27
   8324e:	f8ca 3008 	str.w	r3, [sl, #8]
   83252:	6863      	ldr	r3, [r4, #4]
   83254:	f8ca 300c 	str.w	r3, [sl, #12]
   83258:	f200 8084 	bhi.w	83364 <_realloc_r+0x390>
   8325c:	3408      	adds	r4, #8
   8325e:	f10a 0310 	add.w	r3, sl, #16
   83262:	6822      	ldr	r2, [r4, #0]
   83264:	601a      	str	r2, [r3, #0]
   83266:	6862      	ldr	r2, [r4, #4]
   83268:	605a      	str	r2, [r3, #4]
   8326a:	68a2      	ldr	r2, [r4, #8]
   8326c:	609a      	str	r2, [r3, #8]
   8326e:	ebc6 020c 	rsb	r2, r6, ip
   83272:	eb0a 0306 	add.w	r3, sl, r6
   83276:	f042 0201 	orr.w	r2, r2, #1
   8327a:	f8cb 3008 	str.w	r3, [fp, #8]
   8327e:	605a      	str	r2, [r3, #4]
   83280:	f8da 3004 	ldr.w	r3, [sl, #4]
   83284:	4648      	mov	r0, r9
   83286:	f003 0301 	and.w	r3, r3, #1
   8328a:	431e      	orrs	r6, r3
   8328c:	f8ca 6004 	str.w	r6, [sl, #4]
   83290:	f7ff fe9e 	bl	82fd0 <__malloc_unlock>
   83294:	4638      	mov	r0, r7
   83296:	e71b      	b.n	830d0 <_realloc_r+0xfc>
   83298:	68a3      	ldr	r3, [r4, #8]
   8329a:	2a24      	cmp	r2, #36	; 0x24
   8329c:	6083      	str	r3, [r0, #8]
   8329e:	68e3      	ldr	r3, [r4, #12]
   832a0:	60c3      	str	r3, [r0, #12]
   832a2:	d02b      	beq.n	832fc <_realloc_r+0x328>
   832a4:	f100 0310 	add.w	r3, r0, #16
   832a8:	f104 0210 	add.w	r2, r4, #16
   832ac:	e74a      	b.n	83144 <_realloc_r+0x170>
   832ae:	f850 2c04 	ldr.w	r2, [r0, #-4]
   832b2:	46a0      	mov	r8, r4
   832b4:	f022 0203 	bic.w	r2, r2, #3
   832b8:	4415      	add	r5, r2
   832ba:	e6f9      	b.n	830b0 <_realloc_r+0xdc>
   832bc:	4621      	mov	r1, r4
   832be:	4640      	mov	r0, r8
   832c0:	4675      	mov	r5, lr
   832c2:	4657      	mov	r7, sl
   832c4:	f7ff fe1c 	bl	82f00 <memmove>
   832c8:	f8da 3004 	ldr.w	r3, [sl, #4]
   832cc:	e6f0      	b.n	830b0 <_realloc_r+0xdc>
   832ce:	4642      	mov	r2, r8
   832d0:	e76e      	b.n	831b0 <_realloc_r+0x1dc>
   832d2:	4621      	mov	r1, r4
   832d4:	4640      	mov	r0, r8
   832d6:	461d      	mov	r5, r3
   832d8:	4657      	mov	r7, sl
   832da:	f7ff fe11 	bl	82f00 <memmove>
   832de:	f8da 3004 	ldr.w	r3, [sl, #4]
   832e2:	e6e5      	b.n	830b0 <_realloc_r+0xdc>
   832e4:	68a3      	ldr	r3, [r4, #8]
   832e6:	2a24      	cmp	r2, #36	; 0x24
   832e8:	f8ca 3010 	str.w	r3, [sl, #16]
   832ec:	68e3      	ldr	r3, [r4, #12]
   832ee:	f8ca 3014 	str.w	r3, [sl, #20]
   832f2:	d018      	beq.n	83326 <_realloc_r+0x352>
   832f4:	3410      	adds	r4, #16
   832f6:	f10a 0318 	add.w	r3, sl, #24
   832fa:	e770      	b.n	831de <_realloc_r+0x20a>
   832fc:	6922      	ldr	r2, [r4, #16]
   832fe:	f100 0318 	add.w	r3, r0, #24
   83302:	6102      	str	r2, [r0, #16]
   83304:	6961      	ldr	r1, [r4, #20]
   83306:	f104 0218 	add.w	r2, r4, #24
   8330a:	6141      	str	r1, [r0, #20]
   8330c:	e71a      	b.n	83144 <_realloc_r+0x170>
   8330e:	68a1      	ldr	r1, [r4, #8]
   83310:	2a24      	cmp	r2, #36	; 0x24
   83312:	f8ca 1010 	str.w	r1, [sl, #16]
   83316:	68e1      	ldr	r1, [r4, #12]
   83318:	f8ca 1014 	str.w	r1, [sl, #20]
   8331c:	d00f      	beq.n	8333e <_realloc_r+0x36a>
   8331e:	3410      	adds	r4, #16
   83320:	f10a 0218 	add.w	r2, sl, #24
   83324:	e744      	b.n	831b0 <_realloc_r+0x1dc>
   83326:	6922      	ldr	r2, [r4, #16]
   83328:	f10a 0320 	add.w	r3, sl, #32
   8332c:	f8ca 2018 	str.w	r2, [sl, #24]
   83330:	6962      	ldr	r2, [r4, #20]
   83332:	3418      	adds	r4, #24
   83334:	f8ca 201c 	str.w	r2, [sl, #28]
   83338:	e751      	b.n	831de <_realloc_r+0x20a>
   8333a:	463b      	mov	r3, r7
   8333c:	e791      	b.n	83262 <_realloc_r+0x28e>
   8333e:	6921      	ldr	r1, [r4, #16]
   83340:	f10a 0220 	add.w	r2, sl, #32
   83344:	f8ca 1018 	str.w	r1, [sl, #24]
   83348:	6961      	ldr	r1, [r4, #20]
   8334a:	3418      	adds	r4, #24
   8334c:	f8ca 101c 	str.w	r1, [sl, #28]
   83350:	e72e      	b.n	831b0 <_realloc_r+0x1dc>
   83352:	4621      	mov	r1, r4
   83354:	4638      	mov	r0, r7
   83356:	f8cd c004 	str.w	ip, [sp, #4]
   8335a:	f7ff fdd1 	bl	82f00 <memmove>
   8335e:	f8dd c004 	ldr.w	ip, [sp, #4]
   83362:	e784      	b.n	8326e <_realloc_r+0x29a>
   83364:	68a3      	ldr	r3, [r4, #8]
   83366:	2a24      	cmp	r2, #36	; 0x24
   83368:	f8ca 3010 	str.w	r3, [sl, #16]
   8336c:	68e3      	ldr	r3, [r4, #12]
   8336e:	f8ca 3014 	str.w	r3, [sl, #20]
   83372:	d003      	beq.n	8337c <_realloc_r+0x3a8>
   83374:	3410      	adds	r4, #16
   83376:	f10a 0318 	add.w	r3, sl, #24
   8337a:	e772      	b.n	83262 <_realloc_r+0x28e>
   8337c:	6922      	ldr	r2, [r4, #16]
   8337e:	f10a 0320 	add.w	r3, sl, #32
   83382:	f8ca 2018 	str.w	r2, [sl, #24]
   83386:	6962      	ldr	r2, [r4, #20]
   83388:	3418      	adds	r4, #24
   8338a:	f8ca 201c 	str.w	r2, [sl, #28]
   8338e:	e768      	b.n	83262 <_realloc_r+0x28e>
   83390:	20070588 	.word	0x20070588

00083394 <_sbrk_r>:
   83394:	b538      	push	{r3, r4, r5, lr}
   83396:	4c07      	ldr	r4, [pc, #28]	; (833b4 <_sbrk_r+0x20>)
   83398:	2300      	movs	r3, #0
   8339a:	4605      	mov	r5, r0
   8339c:	4608      	mov	r0, r1
   8339e:	6023      	str	r3, [r4, #0]
   833a0:	f7fd fcde 	bl	80d60 <_sbrk>
   833a4:	1c43      	adds	r3, r0, #1
   833a6:	d000      	beq.n	833aa <_sbrk_r+0x16>
   833a8:	bd38      	pop	{r3, r4, r5, pc}
   833aa:	6823      	ldr	r3, [r4, #0]
   833ac:	2b00      	cmp	r3, #0
   833ae:	d0fb      	beq.n	833a8 <_sbrk_r+0x14>
   833b0:	602b      	str	r3, [r5, #0]
   833b2:	bd38      	pop	{r3, r4, r5, pc}
   833b4:	20070b0c 	.word	0x20070b0c

000833b8 <__sread>:
   833b8:	b510      	push	{r4, lr}
   833ba:	460c      	mov	r4, r1
   833bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   833c0:	f000 f9f2 	bl	837a8 <_read_r>
   833c4:	2800      	cmp	r0, #0
   833c6:	db03      	blt.n	833d0 <__sread+0x18>
   833c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   833ca:	4403      	add	r3, r0
   833cc:	6523      	str	r3, [r4, #80]	; 0x50
   833ce:	bd10      	pop	{r4, pc}
   833d0:	89a3      	ldrh	r3, [r4, #12]
   833d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   833d6:	81a3      	strh	r3, [r4, #12]
   833d8:	bd10      	pop	{r4, pc}
   833da:	bf00      	nop

000833dc <__swrite>:
   833dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   833e0:	460c      	mov	r4, r1
   833e2:	8989      	ldrh	r1, [r1, #12]
   833e4:	461d      	mov	r5, r3
   833e6:	05cb      	lsls	r3, r1, #23
   833e8:	4616      	mov	r6, r2
   833ea:	4607      	mov	r7, r0
   833ec:	d506      	bpl.n	833fc <__swrite+0x20>
   833ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   833f2:	2200      	movs	r2, #0
   833f4:	2302      	movs	r3, #2
   833f6:	f000 f9c3 	bl	83780 <_lseek_r>
   833fa:	89a1      	ldrh	r1, [r4, #12]
   833fc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83400:	81a1      	strh	r1, [r4, #12]
   83402:	4638      	mov	r0, r7
   83404:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83408:	4632      	mov	r2, r6
   8340a:	462b      	mov	r3, r5
   8340c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83410:	f000 b8ce 	b.w	835b0 <_write_r>

00083414 <__sseek>:
   83414:	b510      	push	{r4, lr}
   83416:	460c      	mov	r4, r1
   83418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8341c:	f000 f9b0 	bl	83780 <_lseek_r>
   83420:	89a3      	ldrh	r3, [r4, #12]
   83422:	1c42      	adds	r2, r0, #1
   83424:	bf0e      	itee	eq
   83426:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8342a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8342e:	6520      	strne	r0, [r4, #80]	; 0x50
   83430:	81a3      	strh	r3, [r4, #12]
   83432:	bd10      	pop	{r4, pc}

00083434 <__sclose>:
   83434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83438:	f000 b922 	b.w	83680 <_close_r>

0008343c <strlen>:
   8343c:	f020 0103 	bic.w	r1, r0, #3
   83440:	f010 0003 	ands.w	r0, r0, #3
   83444:	f1c0 0000 	rsb	r0, r0, #0
   83448:	f851 3b04 	ldr.w	r3, [r1], #4
   8344c:	f100 0c04 	add.w	ip, r0, #4
   83450:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83454:	f06f 0200 	mvn.w	r2, #0
   83458:	bf1c      	itt	ne
   8345a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8345e:	4313      	orrne	r3, r2
   83460:	f04f 0c01 	mov.w	ip, #1
   83464:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83468:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8346c:	eba3 020c 	sub.w	r2, r3, ip
   83470:	ea22 0203 	bic.w	r2, r2, r3
   83474:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83478:	bf04      	itt	eq
   8347a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8347e:	3004      	addeq	r0, #4
   83480:	d0f4      	beq.n	8346c <strlen+0x30>
   83482:	f013 0fff 	tst.w	r3, #255	; 0xff
   83486:	bf1f      	itttt	ne
   83488:	3001      	addne	r0, #1
   8348a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   8348e:	3001      	addne	r0, #1
   83490:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   83494:	bf18      	it	ne
   83496:	3001      	addne	r0, #1
   83498:	4770      	bx	lr
   8349a:	bf00      	nop

0008349c <__swbuf_r>:
   8349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8349e:	460d      	mov	r5, r1
   834a0:	4614      	mov	r4, r2
   834a2:	4607      	mov	r7, r0
   834a4:	b110      	cbz	r0, 834ac <__swbuf_r+0x10>
   834a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   834a8:	2b00      	cmp	r3, #0
   834aa:	d048      	beq.n	8353e <__swbuf_r+0xa2>
   834ac:	89a2      	ldrh	r2, [r4, #12]
   834ae:	69a0      	ldr	r0, [r4, #24]
   834b0:	b293      	uxth	r3, r2
   834b2:	60a0      	str	r0, [r4, #8]
   834b4:	0718      	lsls	r0, r3, #28
   834b6:	d538      	bpl.n	8352a <__swbuf_r+0x8e>
   834b8:	6926      	ldr	r6, [r4, #16]
   834ba:	2e00      	cmp	r6, #0
   834bc:	d035      	beq.n	8352a <__swbuf_r+0x8e>
   834be:	0499      	lsls	r1, r3, #18
   834c0:	b2ed      	uxtb	r5, r5
   834c2:	d515      	bpl.n	834f0 <__swbuf_r+0x54>
   834c4:	6823      	ldr	r3, [r4, #0]
   834c6:	6962      	ldr	r2, [r4, #20]
   834c8:	1b9e      	subs	r6, r3, r6
   834ca:	4296      	cmp	r6, r2
   834cc:	da1c      	bge.n	83508 <__swbuf_r+0x6c>
   834ce:	3601      	adds	r6, #1
   834d0:	68a2      	ldr	r2, [r4, #8]
   834d2:	1c59      	adds	r1, r3, #1
   834d4:	3a01      	subs	r2, #1
   834d6:	60a2      	str	r2, [r4, #8]
   834d8:	6021      	str	r1, [r4, #0]
   834da:	701d      	strb	r5, [r3, #0]
   834dc:	6963      	ldr	r3, [r4, #20]
   834de:	42b3      	cmp	r3, r6
   834e0:	d01a      	beq.n	83518 <__swbuf_r+0x7c>
   834e2:	89a3      	ldrh	r3, [r4, #12]
   834e4:	07db      	lsls	r3, r3, #31
   834e6:	d501      	bpl.n	834ec <__swbuf_r+0x50>
   834e8:	2d0a      	cmp	r5, #10
   834ea:	d015      	beq.n	83518 <__swbuf_r+0x7c>
   834ec:	4628      	mov	r0, r5
   834ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   834f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   834f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   834f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   834fa:	6663      	str	r3, [r4, #100]	; 0x64
   834fc:	6823      	ldr	r3, [r4, #0]
   834fe:	81a2      	strh	r2, [r4, #12]
   83500:	6962      	ldr	r2, [r4, #20]
   83502:	1b9e      	subs	r6, r3, r6
   83504:	4296      	cmp	r6, r2
   83506:	dbe2      	blt.n	834ce <__swbuf_r+0x32>
   83508:	4638      	mov	r0, r7
   8350a:	4621      	mov	r1, r4
   8350c:	f7fe fd3e 	bl	81f8c <_fflush_r>
   83510:	b940      	cbnz	r0, 83524 <__swbuf_r+0x88>
   83512:	6823      	ldr	r3, [r4, #0]
   83514:	2601      	movs	r6, #1
   83516:	e7db      	b.n	834d0 <__swbuf_r+0x34>
   83518:	4638      	mov	r0, r7
   8351a:	4621      	mov	r1, r4
   8351c:	f7fe fd36 	bl	81f8c <_fflush_r>
   83520:	2800      	cmp	r0, #0
   83522:	d0e3      	beq.n	834ec <__swbuf_r+0x50>
   83524:	f04f 30ff 	mov.w	r0, #4294967295
   83528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8352a:	4638      	mov	r0, r7
   8352c:	4621      	mov	r1, r4
   8352e:	f7fe fc17 	bl	81d60 <__swsetup_r>
   83532:	2800      	cmp	r0, #0
   83534:	d1f6      	bne.n	83524 <__swbuf_r+0x88>
   83536:	89a2      	ldrh	r2, [r4, #12]
   83538:	6926      	ldr	r6, [r4, #16]
   8353a:	b293      	uxth	r3, r2
   8353c:	e7bf      	b.n	834be <__swbuf_r+0x22>
   8353e:	f7fe fd41 	bl	81fc4 <__sinit>
   83542:	e7b3      	b.n	834ac <__swbuf_r+0x10>

00083544 <_wcrtomb_r>:
   83544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83548:	461e      	mov	r6, r3
   8354a:	b086      	sub	sp, #24
   8354c:	460c      	mov	r4, r1
   8354e:	4605      	mov	r5, r0
   83550:	4617      	mov	r7, r2
   83552:	4b0f      	ldr	r3, [pc, #60]	; (83590 <_wcrtomb_r+0x4c>)
   83554:	b191      	cbz	r1, 8357c <_wcrtomb_r+0x38>
   83556:	f8d3 8000 	ldr.w	r8, [r3]
   8355a:	f7ff f8f3 	bl	82744 <__locale_charset>
   8355e:	9600      	str	r6, [sp, #0]
   83560:	4603      	mov	r3, r0
   83562:	4621      	mov	r1, r4
   83564:	463a      	mov	r2, r7
   83566:	4628      	mov	r0, r5
   83568:	47c0      	blx	r8
   8356a:	1c43      	adds	r3, r0, #1
   8356c:	d103      	bne.n	83576 <_wcrtomb_r+0x32>
   8356e:	2200      	movs	r2, #0
   83570:	238a      	movs	r3, #138	; 0x8a
   83572:	6032      	str	r2, [r6, #0]
   83574:	602b      	str	r3, [r5, #0]
   83576:	b006      	add	sp, #24
   83578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8357c:	681f      	ldr	r7, [r3, #0]
   8357e:	f7ff f8e1 	bl	82744 <__locale_charset>
   83582:	9600      	str	r6, [sp, #0]
   83584:	4603      	mov	r3, r0
   83586:	4622      	mov	r2, r4
   83588:	4628      	mov	r0, r5
   8358a:	a903      	add	r1, sp, #12
   8358c:	47b8      	blx	r7
   8358e:	e7ec      	b.n	8356a <_wcrtomb_r+0x26>
   83590:	20070998 	.word	0x20070998

00083594 <__ascii_wctomb>:
   83594:	b121      	cbz	r1, 835a0 <__ascii_wctomb+0xc>
   83596:	2aff      	cmp	r2, #255	; 0xff
   83598:	d804      	bhi.n	835a4 <__ascii_wctomb+0x10>
   8359a:	700a      	strb	r2, [r1, #0]
   8359c:	2001      	movs	r0, #1
   8359e:	4770      	bx	lr
   835a0:	4608      	mov	r0, r1
   835a2:	4770      	bx	lr
   835a4:	238a      	movs	r3, #138	; 0x8a
   835a6:	6003      	str	r3, [r0, #0]
   835a8:	f04f 30ff 	mov.w	r0, #4294967295
   835ac:	4770      	bx	lr
   835ae:	bf00      	nop

000835b0 <_write_r>:
   835b0:	b570      	push	{r4, r5, r6, lr}
   835b2:	4c08      	ldr	r4, [pc, #32]	; (835d4 <_write_r+0x24>)
   835b4:	4606      	mov	r6, r0
   835b6:	2500      	movs	r5, #0
   835b8:	4608      	mov	r0, r1
   835ba:	4611      	mov	r1, r2
   835bc:	461a      	mov	r2, r3
   835be:	6025      	str	r5, [r4, #0]
   835c0:	f7fc ffba 	bl	80538 <_write>
   835c4:	1c43      	adds	r3, r0, #1
   835c6:	d000      	beq.n	835ca <_write_r+0x1a>
   835c8:	bd70      	pop	{r4, r5, r6, pc}
   835ca:	6823      	ldr	r3, [r4, #0]
   835cc:	2b00      	cmp	r3, #0
   835ce:	d0fb      	beq.n	835c8 <_write_r+0x18>
   835d0:	6033      	str	r3, [r6, #0]
   835d2:	bd70      	pop	{r4, r5, r6, pc}
   835d4:	20070b0c 	.word	0x20070b0c

000835d8 <__register_exitproc>:
   835d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   835da:	4c27      	ldr	r4, [pc, #156]	; (83678 <__register_exitproc+0xa0>)
   835dc:	b085      	sub	sp, #20
   835de:	6826      	ldr	r6, [r4, #0]
   835e0:	4607      	mov	r7, r0
   835e2:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   835e6:	2c00      	cmp	r4, #0
   835e8:	d040      	beq.n	8366c <__register_exitproc+0x94>
   835ea:	6865      	ldr	r5, [r4, #4]
   835ec:	2d1f      	cmp	r5, #31
   835ee:	dd1e      	ble.n	8362e <__register_exitproc+0x56>
   835f0:	4822      	ldr	r0, [pc, #136]	; (8367c <__register_exitproc+0xa4>)
   835f2:	b918      	cbnz	r0, 835fc <__register_exitproc+0x24>
   835f4:	f04f 30ff 	mov.w	r0, #4294967295
   835f8:	b005      	add	sp, #20
   835fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   835fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83600:	9103      	str	r1, [sp, #12]
   83602:	9202      	str	r2, [sp, #8]
   83604:	9301      	str	r3, [sp, #4]
   83606:	f7ff f917 	bl	82838 <malloc>
   8360a:	9903      	ldr	r1, [sp, #12]
   8360c:	4604      	mov	r4, r0
   8360e:	9a02      	ldr	r2, [sp, #8]
   83610:	9b01      	ldr	r3, [sp, #4]
   83612:	2800      	cmp	r0, #0
   83614:	d0ee      	beq.n	835f4 <__register_exitproc+0x1c>
   83616:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   8361a:	2000      	movs	r0, #0
   8361c:	6025      	str	r5, [r4, #0]
   8361e:	6060      	str	r0, [r4, #4]
   83620:	4605      	mov	r5, r0
   83622:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83626:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   8362a:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   8362e:	b93f      	cbnz	r7, 83640 <__register_exitproc+0x68>
   83630:	1c6b      	adds	r3, r5, #1
   83632:	2000      	movs	r0, #0
   83634:	3502      	adds	r5, #2
   83636:	6063      	str	r3, [r4, #4]
   83638:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   8363c:	b005      	add	sp, #20
   8363e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83640:	2601      	movs	r6, #1
   83642:	40ae      	lsls	r6, r5
   83644:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   83648:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   8364c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83650:	2f02      	cmp	r7, #2
   83652:	ea42 0206 	orr.w	r2, r2, r6
   83656:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8365a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   8365e:	d1e7      	bne.n	83630 <__register_exitproc+0x58>
   83660:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83664:	431e      	orrs	r6, r3
   83666:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   8366a:	e7e1      	b.n	83630 <__register_exitproc+0x58>
   8366c:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   83670:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83674:	e7b9      	b.n	835ea <__register_exitproc+0x12>
   83676:	bf00      	nop
   83678:	00083df8 	.word	0x00083df8
   8367c:	00082839 	.word	0x00082839

00083680 <_close_r>:
   83680:	b538      	push	{r3, r4, r5, lr}
   83682:	4c07      	ldr	r4, [pc, #28]	; (836a0 <_close_r+0x20>)
   83684:	2300      	movs	r3, #0
   83686:	4605      	mov	r5, r0
   83688:	4608      	mov	r0, r1
   8368a:	6023      	str	r3, [r4, #0]
   8368c:	f7fd fb82 	bl	80d94 <_close>
   83690:	1c43      	adds	r3, r0, #1
   83692:	d000      	beq.n	83696 <_close_r+0x16>
   83694:	bd38      	pop	{r3, r4, r5, pc}
   83696:	6823      	ldr	r3, [r4, #0]
   83698:	2b00      	cmp	r3, #0
   8369a:	d0fb      	beq.n	83694 <_close_r+0x14>
   8369c:	602b      	str	r3, [r5, #0]
   8369e:	bd38      	pop	{r3, r4, r5, pc}
   836a0:	20070b0c 	.word	0x20070b0c

000836a4 <_fclose_r>:
   836a4:	b570      	push	{r4, r5, r6, lr}
   836a6:	460c      	mov	r4, r1
   836a8:	4605      	mov	r5, r0
   836aa:	b131      	cbz	r1, 836ba <_fclose_r+0x16>
   836ac:	b110      	cbz	r0, 836b4 <_fclose_r+0x10>
   836ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
   836b0:	2b00      	cmp	r3, #0
   836b2:	d02f      	beq.n	83714 <_fclose_r+0x70>
   836b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   836b8:	b90b      	cbnz	r3, 836be <_fclose_r+0x1a>
   836ba:	2000      	movs	r0, #0
   836bc:	bd70      	pop	{r4, r5, r6, pc}
   836be:	4628      	mov	r0, r5
   836c0:	4621      	mov	r1, r4
   836c2:	f7fe fc63 	bl	81f8c <_fflush_r>
   836c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   836c8:	4606      	mov	r6, r0
   836ca:	b133      	cbz	r3, 836da <_fclose_r+0x36>
   836cc:	4628      	mov	r0, r5
   836ce:	69e1      	ldr	r1, [r4, #28]
   836d0:	4798      	blx	r3
   836d2:	2800      	cmp	r0, #0
   836d4:	bfb8      	it	lt
   836d6:	f04f 36ff 	movlt.w	r6, #4294967295
   836da:	89a3      	ldrh	r3, [r4, #12]
   836dc:	061b      	lsls	r3, r3, #24
   836de:	d41c      	bmi.n	8371a <_fclose_r+0x76>
   836e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   836e2:	b141      	cbz	r1, 836f6 <_fclose_r+0x52>
   836e4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   836e8:	4299      	cmp	r1, r3
   836ea:	d002      	beq.n	836f2 <_fclose_r+0x4e>
   836ec:	4628      	mov	r0, r5
   836ee:	f7fe fdad 	bl	8224c <_free_r>
   836f2:	2300      	movs	r3, #0
   836f4:	6323      	str	r3, [r4, #48]	; 0x30
   836f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
   836f8:	b121      	cbz	r1, 83704 <_fclose_r+0x60>
   836fa:	4628      	mov	r0, r5
   836fc:	f7fe fda6 	bl	8224c <_free_r>
   83700:	2300      	movs	r3, #0
   83702:	6463      	str	r3, [r4, #68]	; 0x44
   83704:	f7fe fcd8 	bl	820b8 <__sfp_lock_acquire>
   83708:	2300      	movs	r3, #0
   8370a:	81a3      	strh	r3, [r4, #12]
   8370c:	f7fe fcd6 	bl	820bc <__sfp_lock_release>
   83710:	4630      	mov	r0, r6
   83712:	bd70      	pop	{r4, r5, r6, pc}
   83714:	f7fe fc56 	bl	81fc4 <__sinit>
   83718:	e7cc      	b.n	836b4 <_fclose_r+0x10>
   8371a:	4628      	mov	r0, r5
   8371c:	6921      	ldr	r1, [r4, #16]
   8371e:	f7fe fd95 	bl	8224c <_free_r>
   83722:	e7dd      	b.n	836e0 <_fclose_r+0x3c>

00083724 <fclose>:
   83724:	4b02      	ldr	r3, [pc, #8]	; (83730 <fclose+0xc>)
   83726:	4601      	mov	r1, r0
   83728:	6818      	ldr	r0, [r3, #0]
   8372a:	f7ff bfbb 	b.w	836a4 <_fclose_r>
   8372e:	bf00      	nop
   83730:	20070560 	.word	0x20070560

00083734 <_fstat_r>:
   83734:	b538      	push	{r3, r4, r5, lr}
   83736:	4c08      	ldr	r4, [pc, #32]	; (83758 <_fstat_r+0x24>)
   83738:	2300      	movs	r3, #0
   8373a:	4605      	mov	r5, r0
   8373c:	4608      	mov	r0, r1
   8373e:	4611      	mov	r1, r2
   83740:	6023      	str	r3, [r4, #0]
   83742:	f7fd fb2b 	bl	80d9c <_fstat>
   83746:	1c43      	adds	r3, r0, #1
   83748:	d000      	beq.n	8374c <_fstat_r+0x18>
   8374a:	bd38      	pop	{r3, r4, r5, pc}
   8374c:	6823      	ldr	r3, [r4, #0]
   8374e:	2b00      	cmp	r3, #0
   83750:	d0fb      	beq.n	8374a <_fstat_r+0x16>
   83752:	602b      	str	r3, [r5, #0]
   83754:	bd38      	pop	{r3, r4, r5, pc}
   83756:	bf00      	nop
   83758:	20070b0c 	.word	0x20070b0c

0008375c <_isatty_r>:
   8375c:	b538      	push	{r3, r4, r5, lr}
   8375e:	4c07      	ldr	r4, [pc, #28]	; (8377c <_isatty_r+0x20>)
   83760:	2300      	movs	r3, #0
   83762:	4605      	mov	r5, r0
   83764:	4608      	mov	r0, r1
   83766:	6023      	str	r3, [r4, #0]
   83768:	f7fd fb1e 	bl	80da8 <_isatty>
   8376c:	1c43      	adds	r3, r0, #1
   8376e:	d000      	beq.n	83772 <_isatty_r+0x16>
   83770:	bd38      	pop	{r3, r4, r5, pc}
   83772:	6823      	ldr	r3, [r4, #0]
   83774:	2b00      	cmp	r3, #0
   83776:	d0fb      	beq.n	83770 <_isatty_r+0x14>
   83778:	602b      	str	r3, [r5, #0]
   8377a:	bd38      	pop	{r3, r4, r5, pc}
   8377c:	20070b0c 	.word	0x20070b0c

00083780 <_lseek_r>:
   83780:	b570      	push	{r4, r5, r6, lr}
   83782:	4c08      	ldr	r4, [pc, #32]	; (837a4 <_lseek_r+0x24>)
   83784:	4606      	mov	r6, r0
   83786:	2500      	movs	r5, #0
   83788:	4608      	mov	r0, r1
   8378a:	4611      	mov	r1, r2
   8378c:	461a      	mov	r2, r3
   8378e:	6025      	str	r5, [r4, #0]
   83790:	f7fd fb0c 	bl	80dac <_lseek>
   83794:	1c43      	adds	r3, r0, #1
   83796:	d000      	beq.n	8379a <_lseek_r+0x1a>
   83798:	bd70      	pop	{r4, r5, r6, pc}
   8379a:	6823      	ldr	r3, [r4, #0]
   8379c:	2b00      	cmp	r3, #0
   8379e:	d0fb      	beq.n	83798 <_lseek_r+0x18>
   837a0:	6033      	str	r3, [r6, #0]
   837a2:	bd70      	pop	{r4, r5, r6, pc}
   837a4:	20070b0c 	.word	0x20070b0c

000837a8 <_read_r>:
   837a8:	b570      	push	{r4, r5, r6, lr}
   837aa:	4c08      	ldr	r4, [pc, #32]	; (837cc <_read_r+0x24>)
   837ac:	4606      	mov	r6, r0
   837ae:	2500      	movs	r5, #0
   837b0:	4608      	mov	r0, r1
   837b2:	4611      	mov	r1, r2
   837b4:	461a      	mov	r2, r3
   837b6:	6025      	str	r5, [r4, #0]
   837b8:	f7fc fcc6 	bl	80148 <_read>
   837bc:	1c43      	adds	r3, r0, #1
   837be:	d000      	beq.n	837c2 <_read_r+0x1a>
   837c0:	bd70      	pop	{r4, r5, r6, pc}
   837c2:	6823      	ldr	r3, [r4, #0]
   837c4:	2b00      	cmp	r3, #0
   837c6:	d0fb      	beq.n	837c0 <_read_r+0x18>
   837c8:	6033      	str	r3, [r6, #0]
   837ca:	bd70      	pop	{r4, r5, r6, pc}
   837cc:	20070b0c 	.word	0x20070b0c

000837d0 <__aeabi_uldivmod>:
   837d0:	b94b      	cbnz	r3, 837e6 <__aeabi_uldivmod+0x16>
   837d2:	b942      	cbnz	r2, 837e6 <__aeabi_uldivmod+0x16>
   837d4:	2900      	cmp	r1, #0
   837d6:	bf08      	it	eq
   837d8:	2800      	cmpeq	r0, #0
   837da:	d002      	beq.n	837e2 <__aeabi_uldivmod+0x12>
   837dc:	f04f 31ff 	mov.w	r1, #4294967295
   837e0:	4608      	mov	r0, r1
   837e2:	f000 b83b 	b.w	8385c <__aeabi_idiv0>
   837e6:	b082      	sub	sp, #8
   837e8:	46ec      	mov	ip, sp
   837ea:	e92d 5000 	stmdb	sp!, {ip, lr}
   837ee:	f000 f81d 	bl	8382c <__gnu_uldivmod_helper>
   837f2:	f8dd e004 	ldr.w	lr, [sp, #4]
   837f6:	b002      	add	sp, #8
   837f8:	bc0c      	pop	{r2, r3}
   837fa:	4770      	bx	lr

000837fc <__gnu_ldivmod_helper>:
   837fc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83800:	9e08      	ldr	r6, [sp, #32]
   83802:	4614      	mov	r4, r2
   83804:	461d      	mov	r5, r3
   83806:	4680      	mov	r8, r0
   83808:	4689      	mov	r9, r1
   8380a:	f000 f829 	bl	83860 <__divdi3>
   8380e:	fb04 f301 	mul.w	r3, r4, r1
   83812:	fba4 ab00 	umull	sl, fp, r4, r0
   83816:	fb00 3205 	mla	r2, r0, r5, r3
   8381a:	4493      	add	fp, r2
   8381c:	ebb8 080a 	subs.w	r8, r8, sl
   83820:	eb69 090b 	sbc.w	r9, r9, fp
   83824:	e9c6 8900 	strd	r8, r9, [r6]
   83828:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0008382c <__gnu_uldivmod_helper>:
   8382c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   83830:	9e08      	ldr	r6, [sp, #32]
   83832:	4614      	mov	r4, r2
   83834:	461d      	mov	r5, r3
   83836:	4680      	mov	r8, r0
   83838:	4689      	mov	r9, r1
   8383a:	f000 f961 	bl	83b00 <__udivdi3>
   8383e:	fb00 f505 	mul.w	r5, r0, r5
   83842:	fba0 ab04 	umull	sl, fp, r0, r4
   83846:	fb04 5401 	mla	r4, r4, r1, r5
   8384a:	44a3      	add	fp, r4
   8384c:	ebb8 080a 	subs.w	r8, r8, sl
   83850:	eb69 090b 	sbc.w	r9, r9, fp
   83854:	e9c6 8900 	strd	r8, r9, [r6]
   83858:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0008385c <__aeabi_idiv0>:
   8385c:	4770      	bx	lr
   8385e:	bf00      	nop

00083860 <__divdi3>:
   83860:	2900      	cmp	r1, #0
   83862:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83866:	f2c0 80a1 	blt.w	839ac <__divdi3+0x14c>
   8386a:	2400      	movs	r4, #0
   8386c:	2b00      	cmp	r3, #0
   8386e:	f2c0 8098 	blt.w	839a2 <__divdi3+0x142>
   83872:	4615      	mov	r5, r2
   83874:	4606      	mov	r6, r0
   83876:	460f      	mov	r7, r1
   83878:	2b00      	cmp	r3, #0
   8387a:	d13f      	bne.n	838fc <__divdi3+0x9c>
   8387c:	428a      	cmp	r2, r1
   8387e:	d958      	bls.n	83932 <__divdi3+0xd2>
   83880:	fab2 f382 	clz	r3, r2
   83884:	b14b      	cbz	r3, 8389a <__divdi3+0x3a>
   83886:	f1c3 0220 	rsb	r2, r3, #32
   8388a:	fa01 f703 	lsl.w	r7, r1, r3
   8388e:	fa20 f202 	lsr.w	r2, r0, r2
   83892:	409d      	lsls	r5, r3
   83894:	fa00 f603 	lsl.w	r6, r0, r3
   83898:	4317      	orrs	r7, r2
   8389a:	0c29      	lsrs	r1, r5, #16
   8389c:	fbb7 f2f1 	udiv	r2, r7, r1
   838a0:	fb01 7712 	mls	r7, r1, r2, r7
   838a4:	b2a8      	uxth	r0, r5
   838a6:	fb00 f302 	mul.w	r3, r0, r2
   838aa:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   838ae:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   838b2:	42bb      	cmp	r3, r7
   838b4:	d909      	bls.n	838ca <__divdi3+0x6a>
   838b6:	197f      	adds	r7, r7, r5
   838b8:	f102 3cff 	add.w	ip, r2, #4294967295
   838bc:	f080 8105 	bcs.w	83aca <__divdi3+0x26a>
   838c0:	42bb      	cmp	r3, r7
   838c2:	f240 8102 	bls.w	83aca <__divdi3+0x26a>
   838c6:	3a02      	subs	r2, #2
   838c8:	442f      	add	r7, r5
   838ca:	1aff      	subs	r7, r7, r3
   838cc:	fbb7 f3f1 	udiv	r3, r7, r1
   838d0:	fb01 7113 	mls	r1, r1, r3, r7
   838d4:	fb00 f003 	mul.w	r0, r0, r3
   838d8:	b2b6      	uxth	r6, r6
   838da:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   838de:	4288      	cmp	r0, r1
   838e0:	d908      	bls.n	838f4 <__divdi3+0x94>
   838e2:	1949      	adds	r1, r1, r5
   838e4:	f103 37ff 	add.w	r7, r3, #4294967295
   838e8:	f080 80f1 	bcs.w	83ace <__divdi3+0x26e>
   838ec:	4288      	cmp	r0, r1
   838ee:	f240 80ee 	bls.w	83ace <__divdi3+0x26e>
   838f2:	3b02      	subs	r3, #2
   838f4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   838f8:	2300      	movs	r3, #0
   838fa:	e003      	b.n	83904 <__divdi3+0xa4>
   838fc:	428b      	cmp	r3, r1
   838fe:	d90a      	bls.n	83916 <__divdi3+0xb6>
   83900:	2300      	movs	r3, #0
   83902:	461a      	mov	r2, r3
   83904:	4610      	mov	r0, r2
   83906:	4619      	mov	r1, r3
   83908:	b114      	cbz	r4, 83910 <__divdi3+0xb0>
   8390a:	4240      	negs	r0, r0
   8390c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83910:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83914:	4770      	bx	lr
   83916:	fab3 f883 	clz	r8, r3
   8391a:	f1b8 0f00 	cmp.w	r8, #0
   8391e:	f040 8088 	bne.w	83a32 <__divdi3+0x1d2>
   83922:	428b      	cmp	r3, r1
   83924:	d302      	bcc.n	8392c <__divdi3+0xcc>
   83926:	4282      	cmp	r2, r0
   83928:	f200 80e2 	bhi.w	83af0 <__divdi3+0x290>
   8392c:	2300      	movs	r3, #0
   8392e:	2201      	movs	r2, #1
   83930:	e7e8      	b.n	83904 <__divdi3+0xa4>
   83932:	b912      	cbnz	r2, 8393a <__divdi3+0xda>
   83934:	2301      	movs	r3, #1
   83936:	fbb3 f5f2 	udiv	r5, r3, r2
   8393a:	fab5 f285 	clz	r2, r5
   8393e:	2a00      	cmp	r2, #0
   83940:	d13a      	bne.n	839b8 <__divdi3+0x158>
   83942:	1b7f      	subs	r7, r7, r5
   83944:	0c28      	lsrs	r0, r5, #16
   83946:	fa1f fc85 	uxth.w	ip, r5
   8394a:	2301      	movs	r3, #1
   8394c:	fbb7 f1f0 	udiv	r1, r7, r0
   83950:	fb00 7711 	mls	r7, r0, r1, r7
   83954:	fb0c f201 	mul.w	r2, ip, r1
   83958:	ea4f 4816 	mov.w	r8, r6, lsr #16
   8395c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   83960:	42ba      	cmp	r2, r7
   83962:	d907      	bls.n	83974 <__divdi3+0x114>
   83964:	197f      	adds	r7, r7, r5
   83966:	f101 38ff 	add.w	r8, r1, #4294967295
   8396a:	d202      	bcs.n	83972 <__divdi3+0x112>
   8396c:	42ba      	cmp	r2, r7
   8396e:	f200 80c4 	bhi.w	83afa <__divdi3+0x29a>
   83972:	4641      	mov	r1, r8
   83974:	1abf      	subs	r7, r7, r2
   83976:	fbb7 f2f0 	udiv	r2, r7, r0
   8397a:	fb00 7012 	mls	r0, r0, r2, r7
   8397e:	fb0c fc02 	mul.w	ip, ip, r2
   83982:	b2b6      	uxth	r6, r6
   83984:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   83988:	4584      	cmp	ip, r0
   8398a:	d907      	bls.n	8399c <__divdi3+0x13c>
   8398c:	1940      	adds	r0, r0, r5
   8398e:	f102 37ff 	add.w	r7, r2, #4294967295
   83992:	d202      	bcs.n	8399a <__divdi3+0x13a>
   83994:	4584      	cmp	ip, r0
   83996:	f200 80ae 	bhi.w	83af6 <__divdi3+0x296>
   8399a:	463a      	mov	r2, r7
   8399c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   839a0:	e7b0      	b.n	83904 <__divdi3+0xa4>
   839a2:	43e4      	mvns	r4, r4
   839a4:	4252      	negs	r2, r2
   839a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   839aa:	e762      	b.n	83872 <__divdi3+0x12>
   839ac:	4240      	negs	r0, r0
   839ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   839b2:	f04f 34ff 	mov.w	r4, #4294967295
   839b6:	e759      	b.n	8386c <__divdi3+0xc>
   839b8:	4095      	lsls	r5, r2
   839ba:	f1c2 0920 	rsb	r9, r2, #32
   839be:	fa27 f109 	lsr.w	r1, r7, r9
   839c2:	fa26 f909 	lsr.w	r9, r6, r9
   839c6:	4097      	lsls	r7, r2
   839c8:	0c28      	lsrs	r0, r5, #16
   839ca:	fbb1 f8f0 	udiv	r8, r1, r0
   839ce:	fb00 1118 	mls	r1, r0, r8, r1
   839d2:	fa1f fc85 	uxth.w	ip, r5
   839d6:	fb0c f308 	mul.w	r3, ip, r8
   839da:	ea49 0907 	orr.w	r9, r9, r7
   839de:	ea4f 4719 	mov.w	r7, r9, lsr #16
   839e2:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   839e6:	428b      	cmp	r3, r1
   839e8:	fa06 f602 	lsl.w	r6, r6, r2
   839ec:	d908      	bls.n	83a00 <__divdi3+0x1a0>
   839ee:	1949      	adds	r1, r1, r5
   839f0:	f108 32ff 	add.w	r2, r8, #4294967295
   839f4:	d27a      	bcs.n	83aec <__divdi3+0x28c>
   839f6:	428b      	cmp	r3, r1
   839f8:	d978      	bls.n	83aec <__divdi3+0x28c>
   839fa:	f1a8 0802 	sub.w	r8, r8, #2
   839fe:	4429      	add	r1, r5
   83a00:	1ac9      	subs	r1, r1, r3
   83a02:	fbb1 f3f0 	udiv	r3, r1, r0
   83a06:	fb00 1713 	mls	r7, r0, r3, r1
   83a0a:	fb0c f203 	mul.w	r2, ip, r3
   83a0e:	fa1f f989 	uxth.w	r9, r9
   83a12:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   83a16:	42ba      	cmp	r2, r7
   83a18:	d907      	bls.n	83a2a <__divdi3+0x1ca>
   83a1a:	197f      	adds	r7, r7, r5
   83a1c:	f103 31ff 	add.w	r1, r3, #4294967295
   83a20:	d260      	bcs.n	83ae4 <__divdi3+0x284>
   83a22:	42ba      	cmp	r2, r7
   83a24:	d95e      	bls.n	83ae4 <__divdi3+0x284>
   83a26:	3b02      	subs	r3, #2
   83a28:	442f      	add	r7, r5
   83a2a:	1abf      	subs	r7, r7, r2
   83a2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83a30:	e78c      	b.n	8394c <__divdi3+0xec>
   83a32:	f1c8 0220 	rsb	r2, r8, #32
   83a36:	fa25 f102 	lsr.w	r1, r5, r2
   83a3a:	fa03 fc08 	lsl.w	ip, r3, r8
   83a3e:	fa27 f302 	lsr.w	r3, r7, r2
   83a42:	fa20 f202 	lsr.w	r2, r0, r2
   83a46:	fa07 f708 	lsl.w	r7, r7, r8
   83a4a:	ea41 0c0c 	orr.w	ip, r1, ip
   83a4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
   83a52:	fbb3 f1f9 	udiv	r1, r3, r9
   83a56:	fb09 3311 	mls	r3, r9, r1, r3
   83a5a:	fa1f fa8c 	uxth.w	sl, ip
   83a5e:	fb0a fb01 	mul.w	fp, sl, r1
   83a62:	4317      	orrs	r7, r2
   83a64:	0c3a      	lsrs	r2, r7, #16
   83a66:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83a6a:	459b      	cmp	fp, r3
   83a6c:	fa05 f008 	lsl.w	r0, r5, r8
   83a70:	d908      	bls.n	83a84 <__divdi3+0x224>
   83a72:	eb13 030c 	adds.w	r3, r3, ip
   83a76:	f101 32ff 	add.w	r2, r1, #4294967295
   83a7a:	d235      	bcs.n	83ae8 <__divdi3+0x288>
   83a7c:	459b      	cmp	fp, r3
   83a7e:	d933      	bls.n	83ae8 <__divdi3+0x288>
   83a80:	3902      	subs	r1, #2
   83a82:	4463      	add	r3, ip
   83a84:	ebcb 0303 	rsb	r3, fp, r3
   83a88:	fbb3 f2f9 	udiv	r2, r3, r9
   83a8c:	fb09 3312 	mls	r3, r9, r2, r3
   83a90:	fb0a fa02 	mul.w	sl, sl, r2
   83a94:	b2bf      	uxth	r7, r7
   83a96:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   83a9a:	45ba      	cmp	sl, r7
   83a9c:	d908      	bls.n	83ab0 <__divdi3+0x250>
   83a9e:	eb17 070c 	adds.w	r7, r7, ip
   83aa2:	f102 33ff 	add.w	r3, r2, #4294967295
   83aa6:	d21b      	bcs.n	83ae0 <__divdi3+0x280>
   83aa8:	45ba      	cmp	sl, r7
   83aaa:	d919      	bls.n	83ae0 <__divdi3+0x280>
   83aac:	3a02      	subs	r2, #2
   83aae:	4467      	add	r7, ip
   83ab0:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   83ab4:	fba5 0100 	umull	r0, r1, r5, r0
   83ab8:	ebca 0707 	rsb	r7, sl, r7
   83abc:	428f      	cmp	r7, r1
   83abe:	f04f 0300 	mov.w	r3, #0
   83ac2:	d30a      	bcc.n	83ada <__divdi3+0x27a>
   83ac4:	d005      	beq.n	83ad2 <__divdi3+0x272>
   83ac6:	462a      	mov	r2, r5
   83ac8:	e71c      	b.n	83904 <__divdi3+0xa4>
   83aca:	4662      	mov	r2, ip
   83acc:	e6fd      	b.n	838ca <__divdi3+0x6a>
   83ace:	463b      	mov	r3, r7
   83ad0:	e710      	b.n	838f4 <__divdi3+0x94>
   83ad2:	fa06 f608 	lsl.w	r6, r6, r8
   83ad6:	4286      	cmp	r6, r0
   83ad8:	d2f5      	bcs.n	83ac6 <__divdi3+0x266>
   83ada:	1e6a      	subs	r2, r5, #1
   83adc:	2300      	movs	r3, #0
   83ade:	e711      	b.n	83904 <__divdi3+0xa4>
   83ae0:	461a      	mov	r2, r3
   83ae2:	e7e5      	b.n	83ab0 <__divdi3+0x250>
   83ae4:	460b      	mov	r3, r1
   83ae6:	e7a0      	b.n	83a2a <__divdi3+0x1ca>
   83ae8:	4611      	mov	r1, r2
   83aea:	e7cb      	b.n	83a84 <__divdi3+0x224>
   83aec:	4690      	mov	r8, r2
   83aee:	e787      	b.n	83a00 <__divdi3+0x1a0>
   83af0:	4643      	mov	r3, r8
   83af2:	4642      	mov	r2, r8
   83af4:	e706      	b.n	83904 <__divdi3+0xa4>
   83af6:	3a02      	subs	r2, #2
   83af8:	e750      	b.n	8399c <__divdi3+0x13c>
   83afa:	3902      	subs	r1, #2
   83afc:	442f      	add	r7, r5
   83afe:	e739      	b.n	83974 <__divdi3+0x114>

00083b00 <__udivdi3>:
   83b00:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83b04:	4614      	mov	r4, r2
   83b06:	4605      	mov	r5, r0
   83b08:	460e      	mov	r6, r1
   83b0a:	2b00      	cmp	r3, #0
   83b0c:	d143      	bne.n	83b96 <__udivdi3+0x96>
   83b0e:	428a      	cmp	r2, r1
   83b10:	d953      	bls.n	83bba <__udivdi3+0xba>
   83b12:	fab2 f782 	clz	r7, r2
   83b16:	b157      	cbz	r7, 83b2e <__udivdi3+0x2e>
   83b18:	f1c7 0620 	rsb	r6, r7, #32
   83b1c:	fa20 f606 	lsr.w	r6, r0, r6
   83b20:	fa01 f307 	lsl.w	r3, r1, r7
   83b24:	fa02 f407 	lsl.w	r4, r2, r7
   83b28:	fa00 f507 	lsl.w	r5, r0, r7
   83b2c:	431e      	orrs	r6, r3
   83b2e:	0c21      	lsrs	r1, r4, #16
   83b30:	fbb6 f2f1 	udiv	r2, r6, r1
   83b34:	fb01 6612 	mls	r6, r1, r2, r6
   83b38:	b2a0      	uxth	r0, r4
   83b3a:	fb00 f302 	mul.w	r3, r0, r2
   83b3e:	0c2f      	lsrs	r7, r5, #16
   83b40:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   83b44:	42b3      	cmp	r3, r6
   83b46:	d909      	bls.n	83b5c <__udivdi3+0x5c>
   83b48:	1936      	adds	r6, r6, r4
   83b4a:	f102 37ff 	add.w	r7, r2, #4294967295
   83b4e:	f080 80fd 	bcs.w	83d4c <__udivdi3+0x24c>
   83b52:	42b3      	cmp	r3, r6
   83b54:	f240 80fa 	bls.w	83d4c <__udivdi3+0x24c>
   83b58:	3a02      	subs	r2, #2
   83b5a:	4426      	add	r6, r4
   83b5c:	1af6      	subs	r6, r6, r3
   83b5e:	fbb6 f3f1 	udiv	r3, r6, r1
   83b62:	fb01 6113 	mls	r1, r1, r3, r6
   83b66:	fb00 f003 	mul.w	r0, r0, r3
   83b6a:	b2ad      	uxth	r5, r5
   83b6c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   83b70:	4288      	cmp	r0, r1
   83b72:	d908      	bls.n	83b86 <__udivdi3+0x86>
   83b74:	1909      	adds	r1, r1, r4
   83b76:	f103 36ff 	add.w	r6, r3, #4294967295
   83b7a:	f080 80e9 	bcs.w	83d50 <__udivdi3+0x250>
   83b7e:	4288      	cmp	r0, r1
   83b80:	f240 80e6 	bls.w	83d50 <__udivdi3+0x250>
   83b84:	3b02      	subs	r3, #2
   83b86:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83b8a:	2300      	movs	r3, #0
   83b8c:	4610      	mov	r0, r2
   83b8e:	4619      	mov	r1, r3
   83b90:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83b94:	4770      	bx	lr
   83b96:	428b      	cmp	r3, r1
   83b98:	d84c      	bhi.n	83c34 <__udivdi3+0x134>
   83b9a:	fab3 f683 	clz	r6, r3
   83b9e:	2e00      	cmp	r6, #0
   83ba0:	d14f      	bne.n	83c42 <__udivdi3+0x142>
   83ba2:	428b      	cmp	r3, r1
   83ba4:	d302      	bcc.n	83bac <__udivdi3+0xac>
   83ba6:	4282      	cmp	r2, r0
   83ba8:	f200 80dd 	bhi.w	83d66 <__udivdi3+0x266>
   83bac:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83bb0:	2300      	movs	r3, #0
   83bb2:	2201      	movs	r2, #1
   83bb4:	4610      	mov	r0, r2
   83bb6:	4619      	mov	r1, r3
   83bb8:	4770      	bx	lr
   83bba:	b912      	cbnz	r2, 83bc2 <__udivdi3+0xc2>
   83bbc:	2401      	movs	r4, #1
   83bbe:	fbb4 f4f2 	udiv	r4, r4, r2
   83bc2:	fab4 f284 	clz	r2, r4
   83bc6:	2a00      	cmp	r2, #0
   83bc8:	f040 8082 	bne.w	83cd0 <__udivdi3+0x1d0>
   83bcc:	1b09      	subs	r1, r1, r4
   83bce:	0c26      	lsrs	r6, r4, #16
   83bd0:	b2a7      	uxth	r7, r4
   83bd2:	2301      	movs	r3, #1
   83bd4:	fbb1 f0f6 	udiv	r0, r1, r6
   83bd8:	fb06 1110 	mls	r1, r6, r0, r1
   83bdc:	fb07 f200 	mul.w	r2, r7, r0
   83be0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   83be4:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   83be8:	428a      	cmp	r2, r1
   83bea:	d907      	bls.n	83bfc <__udivdi3+0xfc>
   83bec:	1909      	adds	r1, r1, r4
   83bee:	f100 3cff 	add.w	ip, r0, #4294967295
   83bf2:	d202      	bcs.n	83bfa <__udivdi3+0xfa>
   83bf4:	428a      	cmp	r2, r1
   83bf6:	f200 80c8 	bhi.w	83d8a <__udivdi3+0x28a>
   83bfa:	4660      	mov	r0, ip
   83bfc:	1a89      	subs	r1, r1, r2
   83bfe:	fbb1 f2f6 	udiv	r2, r1, r6
   83c02:	fb06 1112 	mls	r1, r6, r2, r1
   83c06:	fb07 f702 	mul.w	r7, r7, r2
   83c0a:	b2ad      	uxth	r5, r5
   83c0c:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   83c10:	42af      	cmp	r7, r5
   83c12:	d908      	bls.n	83c26 <__udivdi3+0x126>
   83c14:	192c      	adds	r4, r5, r4
   83c16:	f102 31ff 	add.w	r1, r2, #4294967295
   83c1a:	f080 809b 	bcs.w	83d54 <__udivdi3+0x254>
   83c1e:	42a7      	cmp	r7, r4
   83c20:	f240 8098 	bls.w	83d54 <__udivdi3+0x254>
   83c24:	3a02      	subs	r2, #2
   83c26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   83c2a:	4610      	mov	r0, r2
   83c2c:	4619      	mov	r1, r3
   83c2e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83c32:	4770      	bx	lr
   83c34:	2300      	movs	r3, #0
   83c36:	461a      	mov	r2, r3
   83c38:	4610      	mov	r0, r2
   83c3a:	4619      	mov	r1, r3
   83c3c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83c40:	4770      	bx	lr
   83c42:	f1c6 0520 	rsb	r5, r6, #32
   83c46:	fa22 f705 	lsr.w	r7, r2, r5
   83c4a:	fa03 f406 	lsl.w	r4, r3, r6
   83c4e:	fa21 f305 	lsr.w	r3, r1, r5
   83c52:	fa01 fb06 	lsl.w	fp, r1, r6
   83c56:	fa20 f505 	lsr.w	r5, r0, r5
   83c5a:	433c      	orrs	r4, r7
   83c5c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83c60:	fbb3 fcf8 	udiv	ip, r3, r8
   83c64:	fb08 331c 	mls	r3, r8, ip, r3
   83c68:	fa1f f984 	uxth.w	r9, r4
   83c6c:	fb09 fa0c 	mul.w	sl, r9, ip
   83c70:	ea45 0b0b 	orr.w	fp, r5, fp
   83c74:	ea4f 451b 	mov.w	r5, fp, lsr #16
   83c78:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   83c7c:	459a      	cmp	sl, r3
   83c7e:	fa02 f206 	lsl.w	r2, r2, r6
   83c82:	d904      	bls.n	83c8e <__udivdi3+0x18e>
   83c84:	191b      	adds	r3, r3, r4
   83c86:	f10c 35ff 	add.w	r5, ip, #4294967295
   83c8a:	d36f      	bcc.n	83d6c <__udivdi3+0x26c>
   83c8c:	46ac      	mov	ip, r5
   83c8e:	ebca 0303 	rsb	r3, sl, r3
   83c92:	fbb3 f5f8 	udiv	r5, r3, r8
   83c96:	fb08 3315 	mls	r3, r8, r5, r3
   83c9a:	fb09 f905 	mul.w	r9, r9, r5
   83c9e:	fa1f fb8b 	uxth.w	fp, fp
   83ca2:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   83ca6:	45b9      	cmp	r9, r7
   83ca8:	d904      	bls.n	83cb4 <__udivdi3+0x1b4>
   83caa:	193f      	adds	r7, r7, r4
   83cac:	f105 33ff 	add.w	r3, r5, #4294967295
   83cb0:	d362      	bcc.n	83d78 <__udivdi3+0x278>
   83cb2:	461d      	mov	r5, r3
   83cb4:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   83cb8:	fbac 2302 	umull	r2, r3, ip, r2
   83cbc:	ebc9 0707 	rsb	r7, r9, r7
   83cc0:	429f      	cmp	r7, r3
   83cc2:	f04f 0500 	mov.w	r5, #0
   83cc6:	d34a      	bcc.n	83d5e <__udivdi3+0x25e>
   83cc8:	d046      	beq.n	83d58 <__udivdi3+0x258>
   83cca:	4662      	mov	r2, ip
   83ccc:	462b      	mov	r3, r5
   83cce:	e75d      	b.n	83b8c <__udivdi3+0x8c>
   83cd0:	4094      	lsls	r4, r2
   83cd2:	f1c2 0920 	rsb	r9, r2, #32
   83cd6:	fa21 fc09 	lsr.w	ip, r1, r9
   83cda:	4091      	lsls	r1, r2
   83cdc:	fa20 f909 	lsr.w	r9, r0, r9
   83ce0:	0c26      	lsrs	r6, r4, #16
   83ce2:	fbbc f8f6 	udiv	r8, ip, r6
   83ce6:	fb06 cc18 	mls	ip, r6, r8, ip
   83cea:	b2a7      	uxth	r7, r4
   83cec:	fb07 f308 	mul.w	r3, r7, r8
   83cf0:	ea49 0901 	orr.w	r9, r9, r1
   83cf4:	ea4f 4119 	mov.w	r1, r9, lsr #16
   83cf8:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   83cfc:	4563      	cmp	r3, ip
   83cfe:	fa00 f502 	lsl.w	r5, r0, r2
   83d02:	d909      	bls.n	83d18 <__udivdi3+0x218>
   83d04:	eb1c 0c04 	adds.w	ip, ip, r4
   83d08:	f108 32ff 	add.w	r2, r8, #4294967295
   83d0c:	d23b      	bcs.n	83d86 <__udivdi3+0x286>
   83d0e:	4563      	cmp	r3, ip
   83d10:	d939      	bls.n	83d86 <__udivdi3+0x286>
   83d12:	f1a8 0802 	sub.w	r8, r8, #2
   83d16:	44a4      	add	ip, r4
   83d18:	ebc3 0c0c 	rsb	ip, r3, ip
   83d1c:	fbbc f3f6 	udiv	r3, ip, r6
   83d20:	fb06 c113 	mls	r1, r6, r3, ip
   83d24:	fb07 f203 	mul.w	r2, r7, r3
   83d28:	fa1f f989 	uxth.w	r9, r9
   83d2c:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   83d30:	428a      	cmp	r2, r1
   83d32:	d907      	bls.n	83d44 <__udivdi3+0x244>
   83d34:	1909      	adds	r1, r1, r4
   83d36:	f103 30ff 	add.w	r0, r3, #4294967295
   83d3a:	d222      	bcs.n	83d82 <__udivdi3+0x282>
   83d3c:	428a      	cmp	r2, r1
   83d3e:	d920      	bls.n	83d82 <__udivdi3+0x282>
   83d40:	3b02      	subs	r3, #2
   83d42:	4421      	add	r1, r4
   83d44:	1a89      	subs	r1, r1, r2
   83d46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83d4a:	e743      	b.n	83bd4 <__udivdi3+0xd4>
   83d4c:	463a      	mov	r2, r7
   83d4e:	e705      	b.n	83b5c <__udivdi3+0x5c>
   83d50:	4633      	mov	r3, r6
   83d52:	e718      	b.n	83b86 <__udivdi3+0x86>
   83d54:	460a      	mov	r2, r1
   83d56:	e766      	b.n	83c26 <__udivdi3+0x126>
   83d58:	40b0      	lsls	r0, r6
   83d5a:	4290      	cmp	r0, r2
   83d5c:	d2b5      	bcs.n	83cca <__udivdi3+0x1ca>
   83d5e:	f10c 32ff 	add.w	r2, ip, #4294967295
   83d62:	2300      	movs	r3, #0
   83d64:	e712      	b.n	83b8c <__udivdi3+0x8c>
   83d66:	4633      	mov	r3, r6
   83d68:	4632      	mov	r2, r6
   83d6a:	e70f      	b.n	83b8c <__udivdi3+0x8c>
   83d6c:	459a      	cmp	sl, r3
   83d6e:	d98d      	bls.n	83c8c <__udivdi3+0x18c>
   83d70:	f1ac 0c02 	sub.w	ip, ip, #2
   83d74:	4423      	add	r3, r4
   83d76:	e78a      	b.n	83c8e <__udivdi3+0x18e>
   83d78:	45b9      	cmp	r9, r7
   83d7a:	d99a      	bls.n	83cb2 <__udivdi3+0x1b2>
   83d7c:	3d02      	subs	r5, #2
   83d7e:	4427      	add	r7, r4
   83d80:	e798      	b.n	83cb4 <__udivdi3+0x1b4>
   83d82:	4603      	mov	r3, r0
   83d84:	e7de      	b.n	83d44 <__udivdi3+0x244>
   83d86:	4690      	mov	r8, r2
   83d88:	e7c6      	b.n	83d18 <__udivdi3+0x218>
   83d8a:	3802      	subs	r0, #2
   83d8c:	4421      	add	r1, r4
   83d8e:	e735      	b.n	83bfc <__udivdi3+0xfc>
   83d90:	736e6f43 	.word	0x736e6f43
   83d94:	20656c6f 	.word	0x20656c6f
   83d98:	64616572 	.word	0x64616572
   83d9c:	00000a79 	.word	0x00000a79
   83da0:	3d3d3d3d 	.word	0x3d3d3d3d
   83da4:	3d3d3d3d 	.word	0x3d3d3d3d
   83da8:	3d3d3d3d 	.word	0x3d3d3d3d
   83dac:	00000a3d 	.word	0x00000a3d
   83db0:	61746f72 	.word	0x61746f72
   83db4:	6c206574 	.word	0x6c206574
   83db8:	0a746665 	.word	0x0a746665
   83dbc:	00000000 	.word	0x00000000
   83dc0:	706f7473 	.word	0x706f7473
   83dc4:	646e6120 	.word	0x646e6120
   83dc8:	766f6d20 	.word	0x766f6d20
   83dcc:	6f662065 	.word	0x6f662065
   83dd0:	72617772 	.word	0x72617772
   83dd4:	00000a64 	.word	0x00000a64
   83dd8:	61746f72 	.word	0x61746f72
   83ddc:	72206574 	.word	0x72206574
   83de0:	74686769 	.word	0x74686769
   83de4:	0000000a 	.word	0x0000000a
   83de8:	6f206f6e 	.word	0x6f206f6e
   83dec:	63656a62 	.word	0x63656a62
   83df0:	00000a74 	.word	0x00000a74
   83df4:	00000043 	.word	0x00000043

00083df8 <_global_impure_ptr>:
   83df8:	20070138 33323130 37363534 42413938     8.. 0123456789AB
   83e08:	46454443 00000000 33323130 37363534     CDEF....01234567
   83e18:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83e28:	0000296c                                l)..

00083e2c <zeroes.6721>:
   83e2c:	30303030 30303030 30303030 30303030     0000000000000000

00083e3c <blanks.6720>:
   83e3c:	20202020 20202020 20202020 20202020                     

00083e4c <_init>:
   83e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83e4e:	bf00      	nop
   83e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83e52:	bc08      	pop	{r3}
   83e54:	469e      	mov	lr, r3
   83e56:	4770      	bx	lr

00083e58 <__init_array_start>:
   83e58:	00081e25 	.word	0x00081e25

00083e5c <__frame_dummy_init_array_entry>:
   83e5c:	00080119                                ....

00083e60 <_fini>:
   83e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83e62:	bf00      	nop
   83e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83e66:	bc08      	pop	{r3}
   83e68:	469e      	mov	lr, r3
   83e6a:	4770      	bx	lr

00083e6c <__fini_array_start>:
   83e6c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900 00000000                       ..=.....

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
2007016c:	00083df4 00000000 00000000 00000000     .=..............
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <_impure_ptr>:
20070560:	20070138                                8.. 

20070564 <lc_ctype_charset>:
20070564:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070584 <__mb_cur_max>:
20070584:	00000001                                ....

20070588 <__malloc_av_>:
	...
20070590:	20070588 20070588 20070590 20070590     ... ... ... ... 
200705a0:	20070598 20070598 200705a0 200705a0     ... ... ... ... 
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 

20070990 <__malloc_trim_threshold>:
20070990:	00020000                                ....

20070994 <__malloc_sbrk_base>:
20070994:	ffffffff                                ....

20070998 <__wctomb>:
20070998:	00083595                                .5..
